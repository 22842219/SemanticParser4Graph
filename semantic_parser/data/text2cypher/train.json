[
    {
        "db_id": "department_management",
        "query": "MATCH (head:`department_management.head`)\nWHERE head.age > 56\nRETURN count(*)",
        "question": "How many heads of the departments are older than 56 ?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "department_management",
        "query": "MATCH (head:`department_management.head`)\nRETURN head.name,head.born_state,head.age\nORDER BY head.age",
        "question": "List the name, born state and age of the heads of departments ordered by age.",
        "answers": [
            [
                "P\u00e1draig Harrington",
                "Connecticut",
                43.0
            ],
            [
                "Stewart Cink",
                "Florida",
                50.0
            ],
            [
                "Dudley Hart",
                "California",
                52.0
            ],
            [
                "Jeff Maggert",
                "Delaware",
                53.0
            ],
            [
                "Nick Faldo",
                "California",
                56.0
            ],
            [
                "Tiger Woods",
                "Alabama",
                67.0
            ],
            [
                "Franklin Langham",
                "Connecticut",
                67.0
            ],
            [
                "Sergio Garc\u00eda",
                "California",
                68.0
            ],
            [
                "K. J. Choi",
                "Alabama",
                69.0
            ],
            [
                "Billy Mayfair",
                "California",
                69.0
            ]
        ]
    },
    {
        "db_id": "department_management",
        "query": "MATCH (department:`department_management.department`)\nRETURN department.Creation,department.Name,department.Budget_in_Billions",
        "question": "List the creation year, name and budget of each department.",
        "answers": [
            [
                "1789",
                "State",
                9.96
            ],
            [
                "1789",
                "Treasury",
                11.1
            ],
            [
                "1947",
                "Defense",
                439.3
            ],
            [
                "1870",
                "Justice",
                23.4
            ],
            [
                "1849",
                "Interior",
                10.7
            ],
            [
                "1889",
                "Agriculture",
                77.6
            ],
            [
                "1903",
                "Commerce",
                6.2
            ],
            [
                "1913",
                "Labor",
                59.7
            ],
            [
                "1953",
                "Health and Human Services",
                543.2
            ],
            [
                "1965",
                "Housing and Urban Development",
                46.2
            ],
            [
                "1966",
                "Transportation",
                58.0
            ],
            [
                "1977",
                "Energy",
                21.5
            ],
            [
                "1979",
                "Education",
                62.8
            ],
            [
                "1989",
                "Veterans Affairs",
                73.2
            ],
            [
                "2002",
                "Homeland Security",
                44.6
            ]
        ]
    },
    {
        "db_id": "department_management",
        "query": "MATCH (department:`department_management.department`)\nRETURN max(department.Budget_in_Billions),min(department.Budget_in_Billions)",
        "question": "What are the maximum and minimum budget of the departments?",
        "answers": [
            [
                543.2,
                6.2
            ]
        ]
    },
    {
        "db_id": "department_management",
        "query": "MATCH (department:`department_management.department`)\nWHERE 10<=department.Ranking<=15\nRETURN avg(department.Num_Employees)",
        "question": "What is the average number of employees of the departments whose rank is between 10 and 15?",
        "answers": [
            [
                105468.16666666667
            ]
        ]
    },
    {
        "db_id": "department_management",
        "query": "MATCH (head:`department_management.head`)\nWHERE head.born_state <> 'California'\nRETURN head.name",
        "question": "What are the names of the heads who are born outside the California state?",
        "answers": [
            [
                "Tiger Woods"
            ],
            [
                "K. J. Choi"
            ],
            [
                "Jeff Maggert"
            ],
            [
                "Stewart Cink"
            ],
            [
                "P\u00e1draig Harrington"
            ],
            [
                "Franklin Langham"
            ]
        ]
    },
    {
        "db_id": "department_management",
        "query": "MATCH (T1:`department_management.department`)-[T2:`department_management.management`]-(T3:`department_management.head`)\nWHERE T3.born_state = 'Alabama'\nRETURN DISTINCT T1.Creation",
        "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
        "answers": [
            [
                "1903"
            ]
        ]
    },
    {
        "db_id": "department_management",
        "query": "MATCH (head:`department_management.head`)\nWITH count(*) AS count, head.born_state AS born_state\nWHERE count  >= 3\nRETURN born_state",
        "question": "What are the names of the states where at least 3 heads were born?",
        "answers": [
            [
                "California"
            ]
        ]
    },
    {
        "db_id": "department_management",
        "query": "MATCH (T1:`department_management.department`)-[T2:`department_management.management`]-()\nWHERE T2.temporary_acting = 'Yes'\nRETURN T1.Name,T1.Num_Employees",
        "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
        "answers": [
            [
                "Treasury",
                115897.0
            ],
            [
                "Treasury",
                115897.0
            ],
            [
                "Homeland Security",
                208000.0
            ]
        ]
    },
    {
        "db_id": "department_management",
        "query": "MATCH ()-[management:`department_management.management`]-()\nRETURN count(DISTINCT management.temporary_acting)",
        "question": "How many acting statuses are there?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "department_management",
        "query": "MATCH (T1:`department_management.head`)-[T2:`department_management.management`]-()\nWHERE T2.temporary_acting = 'Yes'\nRETURN DISTINCT T1.age",
        "question": "What are the distinct ages of the heads who are acting?",
        "answers": [
            [
                52.0
            ],
            [
                53.0
            ],
            [
                69.0
            ]
        ]
    },
    {
        "db_id": "department_management",
        "query": "MATCH (T1:`department_management.department`)-[T2:`department_management.management`]-()\nWITH count(*) AS count, T1.Name AS Name, T1.Department_ID AS Department_ID\nWHERE count  > 1\nRETURN Department_ID,Name,count",
        "question": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
        "answers": [
            [
                2,
                "Treasury",
                2
            ]
        ]
    },
    {
        "db_id": "department_management",
        "query": "MATCH (head:`department_management.head`)\nWHERE head.name =~'.*[H|h]a.*'\nRETURN head.head_ID,head.name",
        "question": "Which head's name has the substring 'Ha'? List the id and name.",
        "answers": [
            [
                4,
                "Dudley Hart"
            ],
            [
                9,
                "P\u00e1draig Harrington"
            ],
            [
                10,
                "Franklin Langham"
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (farm:`farm.farm`)\nRETURN count(*)",
        "question": "How many farms are there?",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (farm:`farm.farm`)\nRETURN count(*)",
        "question": "Count the number of farms.",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (farm:`farm.farm`)\nRETURN farm.Total_Horses\nORDER BY farm.Total_Horses ASC",
        "question": "List the total number of horses on farms in ascending order.",
        "answers": [
            [
                2546.9
            ],
            [
                2604.8
            ],
            [
                3658.9
            ],
            [
                4781.3
            ],
            [
                5056.5
            ],
            [
                5308.2
            ],
            [
                5486.9
            ],
            [
                5607.5
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (farm:`farm.farm`)\nRETURN farm.Total_Horses\nORDER BY farm.Total_Horses ASC",
        "question": "What is the total horses record for each farm, sorted ascending?",
        "answers": [
            [
                2546.9
            ],
            [
                2604.8
            ],
            [
                3658.9
            ],
            [
                4781.3
            ],
            [
                5056.5
            ],
            [
                5308.2
            ],
            [
                5486.9
            ],
            [
                5607.5
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (farm_competition:`farm.farm_competition`)\nWHERE farm_competition.Theme <> 'Aliens'\nRETURN farm_competition.Hosts",
        "question": "What are the hosts of competitions whose theme is not \"Aliens\"?",
        "answers": [
            [
                "Miley Cyrus Jared Leto and Karen Mok"
            ],
            [
                "Leehom Wang and Kelly Rowland"
            ],
            [
                "Alicia Keys"
            ],
            [
                "Vanness Wu and Michelle Branch"
            ],
            [
                "Shaggy and Coco Lee"
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (farm_competition:`farm.farm_competition`)\nWHERE farm_competition.Theme <> 'Aliens'\nRETURN farm_competition.Hosts",
        "question": "Return the hosts of competitions for which the theme is not Aliens?",
        "answers": [
            [
                "Miley Cyrus Jared Leto and Karen Mok"
            ],
            [
                "Leehom Wang and Kelly Rowland"
            ],
            [
                "Alicia Keys"
            ],
            [
                "Vanness Wu and Michelle Branch"
            ],
            [
                "Shaggy and Coco Lee"
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (farm_competition:`farm.farm_competition`)\nRETURN farm_competition.Theme\nORDER BY farm_competition.Year ASC",
        "question": "What are the themes of farm competitions sorted by year in ascending order?",
        "answers": [
            [
                "Aliens"
            ],
            [
                "MTV Cube"
            ],
            [
                "Valentine's Day"
            ],
            [
                "MTV Asia Aid"
            ],
            [
                "Codehunters"
            ],
            [
                "Carnival M is back!"
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (farm_competition:`farm.farm_competition`)\nRETURN farm_competition.Theme\nORDER BY farm_competition.Year ASC",
        "question": "Return the themes of farm competitions, sorted by year ascending.",
        "answers": [
            [
                "Aliens"
            ],
            [
                "MTV Cube"
            ],
            [
                "Valentine's Day"
            ],
            [
                "MTV Asia Aid"
            ],
            [
                "Codehunters"
            ],
            [
                "Carnival M is back!"
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (farm:`farm.farm`)\nRETURN max(farm.Cows),min(farm.Cows)",
        "question": "What are the maximum and minimum number of cows across all farms.",
        "answers": [
            [
                3987.0,
                2407.2
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (farm:`farm.farm`)\nRETURN max(farm.Cows),min(farm.Cows)",
        "question": "Return the maximum and minimum number of cows across all farms.",
        "answers": [
            [
                3987.0,
                2407.2
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (city:`farm.city`)\nRETURN count(DISTINCT city.Status)",
        "question": "How many different statuses do cities have?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (city:`farm.city`)\nRETURN count(DISTINCT city.Status)",
        "question": "Count the number of different statuses.",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (city:`farm.city`)\nRETURN city.Official_Name\nORDER BY city.Population DESC",
        "question": "List official names of cities in descending order of population.",
        "answers": [
            [
                "Grand Falls/Grand-Sault"
            ],
            [
                "Perth-Andover"
            ],
            [
                "Plaster Rock"
            ],
            [
                "Drummond"
            ],
            [
                "Aroostook"
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (city:`farm.city`)\nRETURN city.Official_Name\nORDER BY city.Population DESC",
        "question": "What are the official names of cities, ordered descending by population?",
        "answers": [
            [
                "Grand Falls/Grand-Sault"
            ],
            [
                "Perth-Andover"
            ],
            [
                "Plaster Rock"
            ],
            [
                "Drummond"
            ],
            [
                "Aroostook"
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (city:`farm.city`)\nRETURN city.Official_Name,city.Status\nORDER BY city.Population DESC\nLIMIT 1",
        "question": "List the official name and status of the city with the largest population.",
        "answers": [
            [
                "Grand Falls/Grand-Sault",
                "Town"
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (city:`farm.city`)\nRETURN city.Official_Name,city.Status\nORDER BY city.Population DESC\nLIMIT 1",
        "question": "What is the official name and status of the city with the most residents?",
        "answers": [
            [
                "Grand Falls/Grand-Sault",
                "Town"
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (T1:`farm.city`)-[]-(T2:`farm.farm_competition`)\nRETURN T2.Year,T1.Official_Name",
        "question": "Show the years and the official names of the host cities of competitions.",
        "answers": [
            [
                2013,
                "Grand Falls/Grand-Sault"
            ],
            [
                2006,
                "Perth-Andover"
            ],
            [
                2005,
                "Plaster Rock"
            ],
            [
                2004,
                "Drummond"
            ],
            [
                2002,
                "Aroostook"
            ],
            [
                2003,
                "Aroostook"
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (T1:`farm.city`)-[]-(T2:`farm.farm_competition`)\nRETURN T2.Year,T1.Official_Name",
        "question": "Give the years and official names of the cities of each competition.",
        "answers": [
            [
                2013,
                "Grand Falls/Grand-Sault"
            ],
            [
                2006,
                "Perth-Andover"
            ],
            [
                2005,
                "Plaster Rock"
            ],
            [
                2004,
                "Drummond"
            ],
            [
                2002,
                "Aroostook"
            ],
            [
                2003,
                "Aroostook"
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (T1:`farm.city`)-[]-(T2:`farm.farm_competition`)\nWITH count(*) AS count, T1.Official_Name AS Official_Name\nWHERE count  > 1\nRETURN Official_Name",
        "question": "Show the official names of the cities that have hosted more than one competition.",
        "answers": [
            [
                "Aroostook"
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (T1:`farm.city`)-[]-(T2:`farm.farm_competition`)\nWITH count(*) AS count, T1.Official_Name AS Official_Name\nWHERE count  > 1\nRETURN Official_Name",
        "question": "What are the official names of cities that have hosted more than one competition?",
        "answers": [
            [
                "Aroostook"
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (T1:`farm.city`)-[]-(T2:`farm.farm_competition`)\nWHERE T1.Population > 1000\nRETURN T2.Theme",
        "question": "Please show the themes of competitions with host cities having populations larger than 1000.",
        "answers": [
            [
                "Carnival M is back!"
            ],
            [
                "Codehunters"
            ],
            [
                "MTV Asia Aid"
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (T1:`farm.city`)-[]-(T2:`farm.farm_competition`)\nWHERE T1.Population > 1000\nRETURN T2.Theme",
        "question": "What are the themes of competitions that have corresponding host cities with more than 1000 residents?",
        "answers": [
            [
                "Carnival M is back!"
            ],
            [
                "Codehunters"
            ],
            [
                "MTV Asia Aid"
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (city:`farm.city`)\nRETURN city.Status,avg(city.Population)",
        "question": "Please show the different statuses of cities and the average population of cities with each status.",
        "answers": [
            [
                "Town",
                5706.0
            ],
            [
                "Village",
                1009.75
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (city:`farm.city`)\nRETURN city.Status,avg(city.Population)",
        "question": "What are the statuses and average populations of each city?",
        "answers": [
            [
                "Town",
                5706.0
            ],
            [
                "Village",
                1009.75
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (city:`farm.city`)\nRETURN city.Status\nORDER BY city.Status ASC",
        "question": "Please show the different statuses, ordered by the number of cities that have each.",
        "answers": [
            [
                "Town"
            ],
            [
                "Village"
            ],
            [
                "Village"
            ],
            [
                "Village"
            ],
            [
                "Village"
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (city:`farm.city`)\nRETURN city.Status\nORDER BY city.Status ASC",
        "question": "Return the different statuses of cities, ascending by frequency.",
        "answers": [
            [
                "Town"
            ],
            [
                "Village"
            ],
            [
                "Village"
            ],
            [
                "Village"
            ],
            [
                "Village"
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (city:`farm.city`)\nRETURN city.Status\nORDER BY city.Status DESC\nLIMIT 1",
        "question": "List the most common type of Status across cities.",
        "answers": [
            [
                "Village"
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (city:`farm.city`)\nRETURN city.Status\nORDER BY city.Status DESC\nLIMIT 1",
        "question": "What is the most common status across all cities?",
        "answers": [
            [
                "Village"
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (city:`farm.city`)\nWHERE NOT (city)-[]-(:`farm.farm_competition`)    \nRETURN city.Official_Name",
        "question": "List the official names of cities that have not held any competition.",
        "answers": []
    },
    {
        "db_id": "farm",
        "query": "MATCH (city:`farm.city`)\nWHERE NOT (city)-[]-(:`farm.farm_competition`)    \nRETURN city.Official_Name",
        "question": "What are the official names of cities that have not hosted a farm competition?",
        "answers": []
    },
    {
        "db_id": "farm",
        "query": "MATCH (city:`farm.city`)\nWHERE city.Population > 1500 OR city.Population < 500\nRETURN city.Official_Name",
        "question": "Find the official names of cities with population bigger than 1500 or smaller than 500.",
        "answers": [
            [
                "Grand Falls/Grand-Sault"
            ],
            [
                "Perth-Andover"
            ],
            [
                "Aroostook"
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (city:`farm.city`)\nWHERE city.Population > 1500 OR city.Population < 500\nRETURN city.Official_Name",
        "question": "What are the official names of cities that have population over 1500 or less than 500?",
        "answers": [
            [
                "Grand Falls/Grand-Sault"
            ],
            [
                "Perth-Andover"
            ],
            [
                "Aroostook"
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (city:`farm.city`)\nWHERE city.Status <> 'Village'\nRETURN city.Census_Ranking",
        "question": "Show the census ranking of cities whose status are not \"Village\".",
        "answers": [
            [
                "636 of 5008"
            ]
        ]
    },
    {
        "db_id": "farm",
        "query": "MATCH (city:`farm.city`)\nWHERE city.Status <> 'Village'\nRETURN city.Census_Ranking",
        "question": "What are the census rankings of cities that do not have the status \"Village\"?",
        "answers": [
            [
                "636 of 5008"
            ]
        ]
    },
    {
        "db_id": "student_assessment",
        "query": "MATCH (T1:`student_assessment.Candidates`)-[]-(T2:`student_assessment.People`)\nRETURN T2.first_name,T2.last_name",
        "question": "what are the first name and last name of all candidates?",
        "answers": [
            [
                "Shannon",
                "Senger"
            ],
            [
                "Virginie",
                "Hartmann"
            ],
            [
                "Dariana",
                "Bednar"
            ],
            [
                "Verna",
                "Grant"
            ],
            [
                "Hoyt",
                "Wintheiser"
            ],
            [
                "Mayra",
                "Hartmann"
            ],
            [
                "Lizeth",
                "Bartoletti"
            ],
            [
                "Nova",
                "Feest"
            ]
        ]
    },
    {
        "db_id": "student_assessment",
        "query": "MATCH (T1:`student_assessment.Candidates`)-[]-(T2:`student_assessment.People`)\nRETURN T2.first_name,T2.last_name",
        "question": "What are the first and last names of all the candidates?",
        "answers": [
            [
                "Shannon",
                "Senger"
            ],
            [
                "Virginie",
                "Hartmann"
            ],
            [
                "Dariana",
                "Bednar"
            ],
            [
                "Verna",
                "Grant"
            ],
            [
                "Hoyt",
                "Wintheiser"
            ],
            [
                "Mayra",
                "Hartmann"
            ],
            [
                "Lizeth",
                "Bartoletti"
            ],
            [
                "Nova",
                "Feest"
            ]
        ]
    },
    {
        "db_id": "student_assessment",
        "query": "MATCH (student_course_attendance:`student_assessment.Student_Course_Attendance`)\nRETURN student_course_attendance.student_id",
        "question": "List the id of students who attended some courses?",
        "answers": [
            [
                111
            ],
            [
                121
            ],
            [
                121
            ],
            [
                141
            ],
            [
                171
            ],
            [
                161
            ],
            [
                151
            ],
            [
                141
            ]
        ]
    },
    {
        "db_id": "student_assessment",
        "query": "MATCH (student_course_attendance:`student_assessment.Student_Course_Attendance`)\nRETURN student_course_attendance.student_id",
        "question": "What are the ids of all students who have attended at least one course?",
        "answers": [
            [
                111
            ],
            [
                121
            ],
            [
                121
            ],
            [
                141
            ],
            [
                171
            ],
            [
                161
            ],
            [
                151
            ],
            [
                141
            ]
        ]
    },
    {
        "db_id": "student_assessment",
        "query": "MATCH (candidate_assessments:`student_assessment.Candidate_Assessments`)\nRETURN candidate_assessments.candidate_id\nORDER BY candidate_assessments.assessment_date DESC\nLIMIT 1",
        "question": "Find id of the candidate who most recently accessed the course?",
        "answers": [
            [
                121
            ]
        ]
    },
    {
        "db_id": "student_assessment",
        "query": "MATCH (candidate_assessments:`student_assessment.Candidate_Assessments`)\nRETURN candidate_assessments.candidate_id\nORDER BY candidate_assessments.assessment_date DESC\nLIMIT 1",
        "question": "What is the id of the candidate who most recently accessed the course?",
        "answers": [
            [
                121
            ]
        ]
    },
    {
        "db_id": "student_assessment",
        "query": "MATCH (student_course_attendance:`student_assessment.Student_Course_Attendance`)\nWHERE student_course_attendance.course_id = 301\nRETURN student_course_attendance.student_id",
        "question": "What are the id of students who registered course 301?",
        "answers": [
            [
                111
            ],
            [
                121
            ],
            [
                171
            ],
            [
                141
            ]
        ]
    },
    {
        "db_id": "student_assessment",
        "query": "MATCH (student_course_attendance:`student_assessment.Student_Course_Attendance`)\nWHERE student_course_attendance.course_id = 301\nRETURN student_course_attendance.student_id",
        "question": "What are the ids of the students who registered for course 301?",
        "answers": [
            [
                111
            ],
            [
                121
            ],
            [
                171
            ],
            [
                141
            ]
        ]
    },
    {
        "db_id": "student_assessment",
        "query": "MATCH (student_course_attendance:`student_assessment.Student_Course_Attendance`)\nWHERE student_course_attendance.course_id = 301\nRETURN student_course_attendance.student_id\nORDER BY student_course_attendance.date_of_attendance DESC\nLIMIT 1",
        "question": "What is the id of the student who most recently registered course 301?",
        "answers": [
            [
                171
            ]
        ]
    },
    {
        "db_id": "student_assessment",
        "query": "MATCH (student_course_attendance:`student_assessment.Student_Course_Attendance`)\nWHERE student_course_attendance.course_id = 301\nRETURN student_course_attendance.student_id\nORDER BY student_course_attendance.date_of_attendance DESC\nLIMIT 1",
        "question": "What are the ids of the students who registered for course 301 most recently?",
        "answers": [
            [
                171
            ]
        ]
    },
    {
        "db_id": "student_assessment",
        "query": "MATCH (T1:`student_assessment.Addresses`)-[]-(T2:`student_assessment.People_Addresses`)\nRETURN DISTINCT T1.city",
        "question": "Find distinct cities of addresses of people?",
        "answers": [
            [
                "South Minnie"
            ],
            [
                "Linnealand"
            ],
            [
                "East Tavaresburgh"
            ],
            [
                "Terencetown"
            ],
            [
                "Lake Devon"
            ],
            [
                "O'Connellview"
            ],
            [
                "New Alta"
            ],
            [
                "South Naomibury"
            ]
        ]
    },
    {
        "db_id": "student_assessment",
        "query": "MATCH (T1:`student_assessment.Addresses`)-[]-(T2:`student_assessment.People_Addresses`)\nRETURN DISTINCT T1.city",
        "question": "What are the different cities where people live?",
        "answers": [
            [
                "South Minnie"
            ],
            [
                "Linnealand"
            ],
            [
                "East Tavaresburgh"
            ],
            [
                "Terencetown"
            ],
            [
                "Lake Devon"
            ],
            [
                "O'Connellview"
            ],
            [
                "New Alta"
            ],
            [
                "South Naomibury"
            ]
        ]
    },
    {
        "db_id": "student_assessment",
        "query": "MATCH (courses:`student_assessment.Courses`)\nRETURN courses.course_name\nORDER BY courses.course_name",
        "question": "List the names of courses in alphabetical order?",
        "answers": [
            [
                "Art history"
            ],
            [
                "English"
            ],
            [
                "French"
            ],
            [
                "data structure"
            ],
            [
                "database"
            ],
            [
                "statistics"
            ]
        ]
    },
    {
        "db_id": "student_assessment",
        "query": "MATCH (courses:`student_assessment.Courses`)\nRETURN courses.course_name\nORDER BY courses.course_name",
        "question": "What are the names of the courses in alphabetical order?",
        "answers": [
            [
                "Art history"
            ],
            [
                "English"
            ],
            [
                "French"
            ],
            [
                "data structure"
            ],
            [
                "database"
            ],
            [
                "statistics"
            ]
        ]
    },
    {
        "db_id": "student_assessment",
        "query": "MATCH (people:`student_assessment.People`)\nRETURN people.first_name\nORDER BY people.first_name",
        "question": "List the first names of people in alphabetical order?",
        "answers": [
            [
                "Dariana"
            ],
            [
                "Hoyt"
            ],
            [
                "Lizeth"
            ],
            [
                "Mayra"
            ],
            [
                "Nova"
            ],
            [
                "Shannon"
            ],
            [
                "Verna"
            ],
            [
                "Virginie"
            ]
        ]
    },
    {
        "db_id": "student_assessment",
        "query": "MATCH (people:`student_assessment.People`)\nRETURN people.first_name\nORDER BY people.first_name",
        "question": "What are the first names of the people in alphabetical order?",
        "answers": [
            [
                "Dariana"
            ],
            [
                "Hoyt"
            ],
            [
                "Lizeth"
            ],
            [
                "Mayra"
            ],
            [
                "Nova"
            ],
            [
                "Shannon"
            ],
            [
                "Verna"
            ],
            [
                "Virginie"
            ]
        ]
    },
    {
        "db_id": "book_2",
        "query": "MATCH (book:`book_2.book`)\nRETURN count(*)",
        "question": "How many books are there?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "book_2",
        "query": "MATCH (book:`book_2.book`)\nRETURN book.Writer\nORDER BY book.Writer ASC",
        "question": "List the writers of the books in ascending alphabetical order.",
        "answers": [
            [
                "Christopher Hinz"
            ],
            [
                "Christopher Hinz"
            ],
            [
                "Christopher Moeller"
            ],
            [
                "Dave Gibbons"
            ],
            [
                "Elaine Lee"
            ],
            [
                "Garth Ennis"
            ],
            [
                "Garth Ennis"
            ],
            [
                "Howard Chaykin"
            ],
            [
                "Michael Moorcock"
            ],
            [
                "Timothy Truman"
            ]
        ]
    },
    {
        "db_id": "book_2",
        "query": "MATCH (book:`book_2.book`)\nRETURN book.Title\nORDER BY book.Issues ASC",
        "question": "List the titles of the books in ascending order of issues.",
        "answers": [
            [
                "The Dome: Ground Zero"
            ],
            [
                "Bloody Mary"
            ],
            [
                "Bloody Mary : Lady Liberty"
            ],
            [
                "Dead Corps"
            ],
            [
                "Sheva's War"
            ],
            [
                "The Black Lamb"
            ],
            [
                "BrainBanx"
            ],
            [
                "Gemini Blood"
            ],
            [
                "Cyberella"
            ],
            [
                "Michael Moorcock's Multiverse"
            ]
        ]
    },
    {
        "db_id": "book_2",
        "query": "MATCH (book:`book_2.book`)\nWHERE book.Writer <> 'Elaine Lee'\nRETURN book.Title",
        "question": "What are the titles of the books whose writer is not \"Elaine Lee\"?",
        "answers": [
            [
                "The Black Lamb"
            ],
            [
                "Bloody Mary"
            ],
            [
                "Bloody Mary : Lady Liberty"
            ],
            [
                "Cyberella"
            ],
            [
                "Dead Corps"
            ],
            [
                "The Dome: Ground Zero"
            ],
            [
                "Gemini Blood"
            ],
            [
                "Michael Moorcock's Multiverse"
            ],
            [
                "Sheva's War"
            ]
        ]
    },
    {
        "db_id": "book_2",
        "query": "MATCH (book:`book_2.book`)\nRETURN book.Title,book.Issues",
        "question": "What are the title and issues of the books?",
        "answers": [
            [
                "The Black Lamb",
                6.0
            ],
            [
                "Bloody Mary",
                4.0
            ],
            [
                "Bloody Mary : Lady Liberty",
                4.0
            ],
            [
                "BrainBanx",
                6.0
            ],
            [
                "Cyberella",
                12.0
            ],
            [
                "Dead Corps",
                4.0
            ],
            [
                "The Dome: Ground Zero",
                1.0
            ],
            [
                "Gemini Blood",
                9.0
            ],
            [
                "Michael Moorcock's Multiverse",
                12.0
            ],
            [
                "Sheva's War",
                5.0
            ]
        ]
    },
    {
        "db_id": "book_2",
        "query": "MATCH (publication:`book_2.publication`)\nRETURN publication.Publication_Date\nORDER BY publication.Price DESC",
        "question": "What are the dates of publications in descending order of price?",
        "answers": [
            [
                "August 2008"
            ],
            [
                "March 2008"
            ],
            [
                "June 2006"
            ],
            [
                "October 2005"
            ],
            [
                "August 2008"
            ],
            [
                "March 2007"
            ],
            [
                "April 2007"
            ]
        ]
    },
    {
        "db_id": "book_2",
        "query": "MATCH (publication:`book_2.publication`)\nWHERE publication.Price > 5000000\nRETURN DISTINCT publication.Publisher",
        "question": "What are the distinct publishers of publications with price higher than 5000000?",
        "answers": [
            [
                "Pearson"
            ],
            [
                "Thomson Reuters"
            ]
        ]
    },
    {
        "db_id": "book_2",
        "query": "MATCH (publication:`book_2.publication`)\nRETURN publication.Publisher\nORDER BY publication.Price DESC\nLIMIT 1",
        "question": "List the publisher of the publication with the highest price.",
        "answers": [
            [
                "Pearson"
            ]
        ]
    },
    {
        "db_id": "book_2",
        "query": "MATCH (T1:`book_2.book`)-[]-(T2:`book_2.publication`)\nRETURN T1.Title,T2.Publication_Date",
        "question": "Show the title and publication dates of books.",
        "answers": [
            [
                "The Black Lamb",
                "August 2008"
            ],
            [
                "Bloody Mary : Lady Liberty",
                "March 2008"
            ],
            [
                "BrainBanx",
                "June 2006"
            ],
            [
                "Cyberella",
                "October 2005"
            ],
            [
                "The Dome: Ground Zero",
                "August 2008"
            ],
            [
                "Michael Moorcock's Multiverse",
                "March 2007"
            ],
            [
                "Sheva's War",
                "April 2007"
            ]
        ]
    },
    {
        "db_id": "book_2",
        "query": "MATCH (T1:`book_2.book`)-[]-(T2:`book_2.publication`)\nWHERE T2.Price > 4000000\nRETURN T1.Writer",
        "question": "Show writers who have published a book with price more than 4000000.",
        "answers": [
            [
                "Timothy Truman"
            ],
            [
                "Garth Ennis"
            ],
            [
                "Elaine Lee"
            ]
        ]
    },
    {
        "db_id": "book_2",
        "query": "MATCH (T1:`book_2.book`)-[]-(T2:`book_2.publication`)\nRETURN T1.Title\nORDER BY T2.Price DESC",
        "question": "Show the titles of books in descending order of publication price.",
        "answers": [
            [
                "The Black Lamb"
            ],
            [
                "Bloody Mary : Lady Liberty"
            ],
            [
                "BrainBanx"
            ],
            [
                "Cyberella"
            ],
            [
                "The Dome: Ground Zero"
            ],
            [
                "Michael Moorcock's Multiverse"
            ],
            [
                "Sheva's War"
            ]
        ]
    },
    {
        "db_id": "book_2",
        "query": "MATCH (publication:`book_2.publication`)\nWITH publication.Publisher AS Publisher, count(*) AS count\nWHERE count  > 1\nRETURN Publisher",
        "question": "Show publishers that have more than one publication.",
        "answers": [
            [
                "Pearson"
            ],
            [
                "Wiley"
            ]
        ]
    },
    {
        "db_id": "book_2",
        "query": "MATCH (publication:`book_2.publication`)\nRETURN publication.Publisher,count(*)",
        "question": "Show different publishers together with the number of publications they have.",
        "answers": [
            [
                "Pearson",
                2
            ],
            [
                "Thomson Reuters",
                1
            ],
            [
                "Wiley",
                2
            ],
            [
                "Springer Nature",
                1
            ],
            [
                "Bertelsmann",
                1
            ]
        ]
    },
    {
        "db_id": "book_2",
        "query": "MATCH (book:`book_2.book`)\nWITH count(*) AS count, book.Writer AS Writer\nWHERE count  > 1\nRETURN Writer",
        "question": "List the writers who have written more than one book.",
        "answers": [
            [
                "Garth Ennis"
            ],
            [
                "Christopher Hinz"
            ]
        ]
    },
    {
        "db_id": "book_2",
        "query": "MATCH (book:`book_2.book`)\nWHERE NOT (book)-[]-(:`book_2.publication`)    \nRETURN book.Title",
        "question": "List the titles of books that are not published.",
        "answers": [
            [
                "Bloody Mary"
            ],
            [
                "Dead Corps"
            ],
            [
                "Gemini Blood"
            ]
        ]
    },
    {
        "db_id": "book_2",
        "query": "MATCH (publication:`book_2.publication`)\nRETURN count(DISTINCT publication.Publication_Date)",
        "question": "What is the number of distinct publication dates?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "book_2",
        "query": "MATCH (publication:`book_2.publication`)\nRETURN count(DISTINCT publication.Publication_Date)",
        "question": "How many distinct publication dates are there in our record?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "book_2",
        "query": "MATCH (publication:`book_2.publication`)\nWHERE publication.Publisher = 'Person' OR publication.Publisher = 'Wiley'\nRETURN publication.Price",
        "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"",
        "answers": [
            [
                4100000.0
            ],
            [
                3000000.0
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (actor:`musical.actor`)\nRETURN count(*)",
        "question": "How many actors are there?",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (actor:`musical.actor`)\nRETURN count(*)",
        "question": "Count the number of actors.",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (actor:`musical.actor`)\nRETURN actor.Name\nORDER BY actor.Name ASC",
        "question": "List the name of actors in ascending alphabetical order.",
        "answers": [
            [
                "Alan Fletcher"
            ],
            [
                "Ian Smith"
            ],
            [
                "Jackie Woodburne"
            ],
            [
                "Kate Ritchie"
            ],
            [
                "Lynne McGranger"
            ],
            [
                "Ray Meagher"
            ],
            [
                "Ryan Moloney"
            ],
            [
                "Stefan Dennis"
            ],
            [
                "Tom Oliver"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (actor:`musical.actor`)\nRETURN actor.Name\nORDER BY actor.Name ASC",
        "question": "What are the names of actors, ordered alphabetically?",
        "answers": [
            [
                "Alan Fletcher"
            ],
            [
                "Ian Smith"
            ],
            [
                "Jackie Woodburne"
            ],
            [
                "Kate Ritchie"
            ],
            [
                "Lynne McGranger"
            ],
            [
                "Ray Meagher"
            ],
            [
                "Ryan Moloney"
            ],
            [
                "Stefan Dennis"
            ],
            [
                "Tom Oliver"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (actor:`musical.actor`)\nRETURN actor.Character,actor.Duration",
        "question": "What are the characters and duration of actors?",
        "answers": [
            [
                "Alf Stewart",
                "1988\u2014"
            ],
            [
                "Lou Carpenter",
                "1988, 1992\u2014"
            ],
            [
                "Irene Roberts",
                "1993\u2014"
            ],
            [
                "Sally Fletcher",
                "1988\u20132008, 2013"
            ],
            [
                "Karl Kennedy",
                "1994\u2014"
            ],
            [
                "Susan Kennedy",
                "1994\u2014"
            ],
            [
                "Toadfish Rebecchi",
                "1995, 1996\u2014"
            ],
            [
                "Harold Bishop",
                "1987\u20131991, 1996\u20132009, 2011"
            ],
            [
                "Paul Robinson",
                "1985\u20131992, 1993, 2004\u2014"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (actor:`musical.actor`)\nRETURN actor.Character,actor.Duration",
        "question": "Return the characters and durations for each actor.",
        "answers": [
            [
                "Alf Stewart",
                "1988\u2014"
            ],
            [
                "Lou Carpenter",
                "1988, 1992\u2014"
            ],
            [
                "Irene Roberts",
                "1993\u2014"
            ],
            [
                "Sally Fletcher",
                "1988\u20132008, 2013"
            ],
            [
                "Karl Kennedy",
                "1994\u2014"
            ],
            [
                "Susan Kennedy",
                "1994\u2014"
            ],
            [
                "Toadfish Rebecchi",
                "1995, 1996\u2014"
            ],
            [
                "Harold Bishop",
                "1987\u20131991, 1996\u20132009, 2011"
            ],
            [
                "Paul Robinson",
                "1985\u20131992, 1993, 2004\u2014"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (actor:`musical.actor`)\nWHERE actor.age <> 20\nRETURN actor.Name",
        "question": "List the name of actors whose age is not 20.",
        "answers": [
            [
                "Ray Meagher"
            ],
            [
                "Tom Oliver"
            ],
            [
                "Lynne McGranger"
            ],
            [
                "Ryan Moloney"
            ],
            [
                "Ian Smith"
            ],
            [
                "Stefan Dennis"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (actor:`musical.actor`)\nWHERE actor.age <> 20\nRETURN actor.Name",
        "question": "What are the names of actors who are not 20 years old?",
        "answers": [
            [
                "Ray Meagher"
            ],
            [
                "Tom Oliver"
            ],
            [
                "Lynne McGranger"
            ],
            [
                "Ryan Moloney"
            ],
            [
                "Ian Smith"
            ],
            [
                "Stefan Dennis"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (actor:`musical.actor`)\nRETURN actor.Character\nORDER BY actor.age DESC",
        "question": "What are the characters of actors in descending order of age?",
        "answers": [
            [
                "Alf Stewart"
            ],
            [
                "Lou Carpenter"
            ],
            [
                "Irene Roberts"
            ],
            [
                "Sally Fletcher"
            ],
            [
                "Karl Kennedy"
            ],
            [
                "Susan Kennedy"
            ],
            [
                "Toadfish Rebecchi"
            ],
            [
                "Harold Bishop"
            ],
            [
                "Paul Robinson"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (actor:`musical.actor`)\nRETURN actor.Character\nORDER BY actor.age DESC",
        "question": "Return the characters for actors, ordered by age descending.",
        "answers": [
            [
                "Alf Stewart"
            ],
            [
                "Lou Carpenter"
            ],
            [
                "Irene Roberts"
            ],
            [
                "Sally Fletcher"
            ],
            [
                "Karl Kennedy"
            ],
            [
                "Susan Kennedy"
            ],
            [
                "Toadfish Rebecchi"
            ],
            [
                "Harold Bishop"
            ],
            [
                "Paul Robinson"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (actor:`musical.actor`)\nRETURN actor.Duration\nORDER BY actor.age DESC\nLIMIT 1",
        "question": "What is the duration of the oldest actor?",
        "answers": [
            [
                "1988\u2014"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (actor:`musical.actor`)\nRETURN actor.Duration\nORDER BY actor.age DESC\nLIMIT 1",
        "question": "Return the duration of the actor with the greatest age.",
        "answers": [
            [
                "1988\u2014"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (musical:`musical.musical`)\nWHERE musical.Nominee = 'Bob Fosse'\nRETURN musical.Name",
        "question": "What are the names of musicals with nominee \"Bob Fosse\"?",
        "answers": [
            [
                "The Phantom of the Opera"
            ],
            [
                "Wicked"
            ],
            [
                "West Side Story"
            ],
            [
                "The Book of Mormon"
            ],
            [
                "Chicago"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (musical:`musical.musical`)\nWHERE musical.Nominee = 'Bob Fosse'\nRETURN musical.Name",
        "question": "Return the names of musicals who have the nominee Bob Fosse.",
        "answers": [
            [
                "The Phantom of the Opera"
            ],
            [
                "Wicked"
            ],
            [
                "West Side Story"
            ],
            [
                "The Book of Mormon"
            ],
            [
                "Chicago"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (musical:`musical.musical`)\nWHERE musical.Award <> 'Tony Award'\nRETURN DISTINCT musical.Nominee",
        "question": "What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?",
        "answers": [
            [
                "Cleavant Derricks"
            ],
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (musical:`musical.musical`)\nWHERE musical.Award <> 'Tony Award'\nRETURN DISTINCT musical.Nominee",
        "question": "Return the different nominees of musicals that have an award that is not the Tony Award.",
        "answers": [
            [
                "Cleavant Derricks"
            ],
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nRETURN T1.Name,T2.Name",
        "question": "Show names of actors and names of musicals they are in.",
        "answers": [
            [
                "Ray Meagher",
                "The Phantom of the Opera"
            ],
            [
                "Tom Oliver",
                "The Phantom of the Opera"
            ],
            [
                "Lynne McGranger",
                "Les Mis\u00e9rables"
            ],
            [
                "Kate Ritchie",
                "Les Mis\u00e9rables"
            ],
            [
                "Alan Fletcher",
                "West Side Story"
            ],
            [
                "Jackie Woodburne",
                "The Book of Mormon"
            ],
            [
                "Ryan Moloney",
                "The Book of Mormon"
            ],
            [
                "Ian Smith",
                "The Book of Mormon"
            ],
            [
                "Stefan Dennis",
                "The Book of Mormon"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nRETURN T1.Name,T2.Name",
        "question": "What are the names of actors and the musicals that they are in?",
        "answers": [
            [
                "Ray Meagher",
                "The Phantom of the Opera"
            ],
            [
                "Tom Oliver",
                "The Phantom of the Opera"
            ],
            [
                "Lynne McGranger",
                "Les Mis\u00e9rables"
            ],
            [
                "Kate Ritchie",
                "Les Mis\u00e9rables"
            ],
            [
                "Alan Fletcher",
                "West Side Story"
            ],
            [
                "Jackie Woodburne",
                "The Book of Mormon"
            ],
            [
                "Ryan Moloney",
                "The Book of Mormon"
            ],
            [
                "Ian Smith",
                "The Book of Mormon"
            ],
            [
                "Stefan Dennis",
                "The Book of Mormon"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nWHERE T2.Name = 'The Phantom of the Opera'\nRETURN T1.Name",
        "question": "Show names of actors that have appeared in musical with name \"The Phantom of the Opera\".",
        "answers": [
            [
                "Ray Meagher"
            ],
            [
                "Tom Oliver"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nWHERE T2.Name = 'The Phantom of the Opera'\nRETURN T1.Name",
        "question": "What are the names of actors who have been in the musical titled The Phantom of the Opera?",
        "answers": [
            [
                "Ray Meagher"
            ],
            [
                "Tom Oliver"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nRETURN T1.Name\nORDER BY T2.Year DESC",
        "question": "Show names of actors in descending order of the year their musical is awarded.",
        "answers": [
            [
                "Ray Meagher"
            ],
            [
                "Tom Oliver"
            ],
            [
                "Lynne McGranger"
            ],
            [
                "Kate Ritchie"
            ],
            [
                "Alan Fletcher"
            ],
            [
                "Jackie Woodburne"
            ],
            [
                "Ryan Moloney"
            ],
            [
                "Ian Smith"
            ],
            [
                "Stefan Dennis"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nRETURN T1.Name\nORDER BY T2.Year DESC",
        "question": "What are the names of actors ordered descending by the year in which their musical was awarded?",
        "answers": [
            [
                "Ray Meagher"
            ],
            [
                "Tom Oliver"
            ],
            [
                "Lynne McGranger"
            ],
            [
                "Kate Ritchie"
            ],
            [
                "Alan Fletcher"
            ],
            [
                "Jackie Woodburne"
            ],
            [
                "Ryan Moloney"
            ],
            [
                "Ian Smith"
            ],
            [
                "Stefan Dennis"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nRETURN T2.Name,count(*)",
        "question": "Show names of musicals and the number of actors who have appeared in the musicals.",
        "answers": [
            [
                "The Phantom of the Opera",
                2
            ],
            [
                "Les Mis\u00e9rables",
                2
            ],
            [
                "West Side Story",
                1
            ],
            [
                "The Book of Mormon",
                4
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nRETURN T2.Name,count(*)",
        "question": "How many actors have appeared in each musical?",
        "answers": [
            [
                "The Phantom of the Opera",
                2
            ],
            [
                "Les Mis\u00e9rables",
                2
            ],
            [
                "West Side Story",
                1
            ],
            [
                "The Book of Mormon",
                4
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nWITH T2.Name AS Name, count(*) AS count\nWHERE count  >= 3\nRETURN Name",
        "question": "Show names of musicals which have at least three actors.",
        "answers": [
            [
                "The Book of Mormon"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nWITH T2.Name AS Name, count(*) AS count\nWHERE count  >= 3\nRETURN Name",
        "question": "What are the names of musicals who have at 3 or more actors?",
        "answers": [
            [
                "The Book of Mormon"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (musical:`musical.musical`)\nRETURN musical.Nominee,count(*)",
        "question": "Show different nominees and the number of musicals they have been nominated.",
        "answers": [
            [
                "Bob Fosse",
                5
            ],
            [
                "Cleavant Derricks",
                2
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (musical:`musical.musical`)\nRETURN musical.Nominee,count(*)",
        "question": "How many musicals has each nominee been nominated for?",
        "answers": [
            [
                "Bob Fosse",
                5
            ],
            [
                "Cleavant Derricks",
                2
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (musical:`musical.musical`)\nWITH count(*) AS count, musical.Nominee AS Nominee\nWHERE count  > 2\nRETURN Nominee",
        "question": "List the nominees that have been nominated more than two musicals.",
        "answers": [
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (musical:`musical.musical`)\nWITH count(*) AS count, musical.Nominee AS Nominee\nWHERE count  > 2\nRETURN Nominee",
        "question": "Who are the nominees who have been nominated more than two times?",
        "answers": [
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (musical:`musical.musical`)\nWHERE NOT (musical)-[]-(:`musical.actor`)    \nRETURN musical.Name",
        "question": "List the name of musicals that do not have actors.",
        "answers": [
            [
                "Wicked"
            ],
            [
                "Rent"
            ],
            [
                "Chicago"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (musical:`musical.musical`)\nWHERE NOT (musical)-[]-(:`musical.actor`)    \nRETURN musical.Name",
        "question": "What are the names of musicals who have no actors?",
        "answers": [
            [
                "Wicked"
            ],
            [
                "Rent"
            ],
            [
                "Chicago"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (musical:`musical.musical`)\nWHERE musical.Award = 'Tony Award' OR musical.Award = 'Cleavant Derricks'\nRETURN musical.Nominee",
        "question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".",
        "answers": [
            [
                "Bob Fosse"
            ],
            [
                "Cleavant Derricks"
            ],
            [
                "Bob Fosse"
            ],
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "db_id": "musical",
        "query": "MATCH (musical:`musical.musical`)\nWHERE musical.Award = 'Tony Award' OR musical.Award = 'Cleavant Derricks'\nRETURN musical.Nominee",
        "question": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?",
        "answers": [
            [
                "Bob Fosse"
            ],
            [
                "Cleavant Derricks"
            ],
            [
                "Bob Fosse"
            ],
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "db_id": "twitter_1",
        "query": "MATCH (user_profiles:`twitter_1.user_profiles`)\nWHERE user_profiles.name = 'Mary'\nRETURN user_profiles.email",
        "question": "Find the emails of the user named \"Mary\".",
        "answers": [
            [
                "Mary@yale.edu"
            ]
        ]
    },
    {
        "db_id": "twitter_1",
        "query": "MATCH (user_profiles:`twitter_1.user_profiles`)\nWHERE user_profiles.name = 'Iron Man'\nRETURN user_profiles.partitionid",
        "question": "What is the partition id of the user named \"Iron Man\".",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "twitter_1",
        "query": "MATCH (user_profiles:`twitter_1.user_profiles`)\nRETURN count(*)",
        "question": "How many users are there?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "twitter_1",
        "query": "MATCH (tweets:`twitter_1.tweets`)\nRETURN count(*)",
        "question": "Find the number of tweets in record.",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "twitter_1",
        "query": "MATCH (tweets:`twitter_1.tweets`)\nRETURN count(DISTINCT tweets.uid)",
        "question": "Find the number of users who posted some tweets.",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "twitter_1",
        "query": "MATCH (user_profiles:`twitter_1.user_profiles`)\nWHERE user_profiles.name =~'.*[S|s]wift.*'\nRETURN user_profiles.name,user_profiles.email",
        "question": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.",
        "answers": [
            [
                "Tyler Swift",
                "ts@superstar.com\n"
            ]
        ]
    },
    {
        "db_id": "twitter_1",
        "query": "MATCH (tweets:`twitter_1.tweets`)\nWHERE tweets.text =~'.*[I|i]ntern.*'\nRETURN tweets.text",
        "question": "Return the text of tweets about the topic 'intern'.",
        "answers": [
            [
                "My company is hiring interns."
            ]
        ]
    },
    {
        "db_id": "twitter_1",
        "query": "MATCH (user_profiles:`twitter_1.user_profiles`)\nWHERE user_profiles.followers > 1000\nRETURN user_profiles.name,user_profiles.email",
        "question": "Find the name and email of the users who have more than 1000 followers.",
        "answers": [
            [
                "Iron Man",
                "ts@richest.com"
            ],
            [
                "Black Widow\n",
                "bw@superhero.com"
            ],
            [
                "Tyler Swift",
                "ts@superstar.com\n"
            ],
            [
                "Celine Dion",
                "cd@superstar.com"
            ],
            [
                "Natalie Portman",
                "np@superstar.com"
            ]
        ]
    },
    {
        "db_id": "twitter_1",
        "query": "MATCH (T1:`twitter_1.user_profiles`)-[]-(T2:`twitter_1.tweets`)\nWITH T1.name AS name, count(*) AS count\nWHERE count  > 1\nRETURN name",
        "question": "Find the names of users who have more than one tweet.",
        "answers": [
            [
                "Iron Man"
            ],
            [
                "Susan"
            ],
            [
                "Celine Dion"
            ]
        ]
    },
    {
        "db_id": "twitter_1",
        "query": "MATCH (user_profiles:`twitter_1.user_profiles`)\nRETURN user_profiles.name\nORDER BY user_profiles.followers DESC\nLIMIT 1",
        "question": "Find the name of the user who has the largest number of followers.",
        "answers": [
            [
                "Tyler Swift"
            ]
        ]
    },
    {
        "db_id": "twitter_1",
        "query": "MATCH (user_profiles:`twitter_1.user_profiles`)\nRETURN user_profiles.name,user_profiles.email\nORDER BY user_profiles.followers\nLIMIT 1",
        "question": "Find the name and email of the user followed by the least number of people.",
        "answers": [
            [
                "Susan",
                "susan@gmail.com\n"
            ]
        ]
    },
    {
        "db_id": "twitter_1",
        "query": "MATCH (user_profiles:`twitter_1.user_profiles`)\nRETURN user_profiles.name,user_profiles.followers\nORDER BY user_profiles.followers DESC",
        "question": "List the name and number of followers for each user, and sort the results by the number of followers in descending order.",
        "answers": [
            [
                "Tyler Swift",
                99999998
            ],
            [
                "Natalie Portman",
                94375428
            ],
            [
                "Black Widow\n",
                35425845
            ],
            [
                "Celine Dion",
                23927492
            ],
            [
                "Iron Man",
                6662425
            ],
            [
                "Mary",
                890
            ],
            [
                "Susan",
                100
            ]
        ]
    },
    {
        "db_id": "twitter_1",
        "query": "MATCH (user_profiles:`twitter_1.user_profiles`)\nRETURN user_profiles.name\nORDER BY user_profiles.followers DESC\nLIMIT 5",
        "question": "List the names of 5 users followed by the largest number of other users.",
        "answers": [
            [
                "Tyler Swift"
            ],
            [
                "Natalie Portman"
            ],
            [
                "Black Widow\n"
            ],
            [
                "Celine Dion"
            ],
            [
                "Iron Man"
            ]
        ]
    },
    {
        "db_id": "twitter_1",
        "query": "MATCH (tweets:`twitter_1.tweets`)\nRETURN tweets.text\nORDER BY tweets.createdate",
        "question": "List the text of all tweets in the order of date.",
        "answers": [
            [
                "Hello I'm Tony Stark."
            ],
            [
                "Today I have went shopping at Laffayette."
            ],
            [
                "My company is hiring interns."
            ],
            [
                "Oh, I only have a few fans."
            ],
            [
                "Let\u2019s celebrate women, fight for equality and support each other,  not just today, but everyday!"
            ],
            [
                "I love my new boyfriend."
            ],
            [
                "I feel tired and don't want to write SQLs."
            ],
            [
                "I had a pretty rough time during the last couple of weeks"
            ]
        ]
    },
    {
        "db_id": "twitter_1",
        "query": "MATCH (T1:`twitter_1.user_profiles`)-[]-(T2:`twitter_1.tweets`)\nRETURN T1.name,count(*)",
        "question": "Find the name of each user and number of tweets tweeted by each of them.",
        "answers": [
            [
                "Iron Man",
                2
            ],
            [
                "Black Widow\n",
                1
            ],
            [
                "Susan",
                2
            ],
            [
                "Celine Dion",
                2
            ],
            [
                "Tyler Swift",
                1
            ]
        ]
    },
    {
        "db_id": "twitter_1",
        "query": "MATCH (T1:`twitter_1.user_profiles`)-[]-(T2:`twitter_1.tweets`)\nWITH T1.name AS name, count(*) AS count, T1.partitionid AS partitionid\nWHERE count  < 2\nRETURN name,partitionid",
        "question": "Find the name and partition id for users who tweeted less than twice.",
        "answers": [
            [
                "Black Widow\n",
                23
            ],
            [
                "Tyler Swift",
                10
            ]
        ]
    },
    {
        "db_id": "twitter_1",
        "query": "MATCH (T1:`twitter_1.user_profiles`)-[]-(T2:`twitter_1.tweets`)\nWITH T1.name AS name, count(*) AS count\nWHERE count  > 1\nRETURN name,count",
        "question": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them.",
        "answers": [
            [
                "Iron Man",
                2
            ],
            [
                "Susan",
                2
            ],
            [
                "Celine Dion",
                2
            ]
        ]
    },
    {
        "db_id": "twitter_1",
        "query": "MATCH (user_profiles:`twitter_1.user_profiles`)\nWHERE NOT (user_profiles)-[]-(:`twitter_1.tweets`)    \nRETURN avg(user_profiles.followers)",
        "question": "Find the average number of followers for the users who do not have any tweet.",
        "answers": [
            [
                47188159.0
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nRETURN DISTINCT catalog_contents.catalog_entry_name",
        "question": "Find the names of all the catalog entries.",
        "answers": [
            [
                "Cola"
            ],
            [
                "Root beer"
            ],
            [
                "Cream Soda"
            ],
            [
                "Carbonated Water"
            ],
            [
                "Ginger Beer"
            ],
            [
                "Tizer"
            ],
            [
                "Vimto"
            ],
            [
                "Ramune"
            ],
            [
                "Sprite Lemo"
            ],
            [
                "Dr Pepper"
            ],
            [
                "Diet Pepsi"
            ],
            [
                "Diet Mountain Dew"
            ],
            [
                "Mountain Dew"
            ],
            [
                "Fenta Orange"
            ],
            [
                "Wanglaoji"
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nRETURN DISTINCT catalog_contents.catalog_entry_name",
        "question": "What are all the catalog entry names?",
        "answers": [
            [
                "Cola"
            ],
            [
                "Root beer"
            ],
            [
                "Cream Soda"
            ],
            [
                "Carbonated Water"
            ],
            [
                "Ginger Beer"
            ],
            [
                "Tizer"
            ],
            [
                "Vimto"
            ],
            [
                "Ramune"
            ],
            [
                "Sprite Lemo"
            ],
            [
                "Dr Pepper"
            ],
            [
                "Diet Pepsi"
            ],
            [
                "Diet Mountain Dew"
            ],
            [
                "Mountain Dew"
            ],
            [
                "Fenta Orange"
            ],
            [
                "Wanglaoji"
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (attribute_definitions:`product_catalog.Attribute_Definitions`)\nWITH attribute_definitions.attribute_data_type AS attribute_data_type, count(*) AS count\nWHERE count  > 3\nRETURN attribute_data_type",
        "question": "Find the list of attribute data types possessed by more than 3 attribute definitions.",
        "answers": [
            [
                "Bool"
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (attribute_definitions:`product_catalog.Attribute_Definitions`)\nWITH attribute_definitions.attribute_data_type AS attribute_data_type, count(*) AS count\nWHERE count  > 3\nRETURN attribute_data_type",
        "question": "What are the attribute data types with more than 3 attribute definitions?",
        "answers": [
            [
                "Bool"
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (catalog_structure:`product_catalog.Catalog_Structure`)\nWHERE 5<=catalog_structure.catalog_level_number<=10\nRETURN catalog_structure.catalog_level_name,catalog_structure.catalog_level_number",
        "question": "Find the name and level of catalog structure with level between 5 and 10.",
        "answers": [
            [
                "Sub-Category",
                8
            ],
            [
                "Product",
                9
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (catalog_structure:`product_catalog.Catalog_Structure`)\nWHERE 5<=catalog_structure.catalog_level_number<=10\nRETURN catalog_structure.catalog_level_name,catalog_structure.catalog_level_number",
        "question": "What are the name and level of catalog structure with level number between 5 and 10",
        "answers": [
            [
                "Sub-Category",
                8
            ],
            [
                "Product",
                9
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (catalogs:`product_catalog.Catalogs`)\nRETURN catalogs.catalog_publisher\nORDER BY catalogs.catalog_publisher DESC\nLIMIT 1",
        "question": "Which catalog publisher has published the most catalogs?",
        "answers": [
            [
                "Russel-Gislason Lemon shop"
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (catalogs:`product_catalog.Catalogs`)\nRETURN catalogs.catalog_publisher\nORDER BY catalogs.catalog_publisher DESC\nLIMIT 1",
        "question": "Find the catalog publisher that has the most catalogs.",
        "answers": [
            [
                "Russel-Gislason Lemon shop"
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (t1:`product_catalog.Catalogs`)-[]-(t2:`product_catalog.Catalog_Structure`)\nWHERE t2.catalog_level_number > 5\nRETURN t1.catalog_name,t1.date_of_publication",
        "question": "Find the names and publication dates of all catalogs that have catalog level number greater than 5.",
        "answers": [
            [
                "Coffee Bean",
                "2012-04-13 06:37:09"
            ],
            [
                "Jam",
                "2011-07-22 04:57:19"
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (t1:`product_catalog.Catalogs`)-[]-(t2:`product_catalog.Catalog_Structure`)\nWHERE t2.catalog_level_number > 5\nRETURN t1.catalog_name,t1.date_of_publication",
        "question": "What are the name and publication date of the catalogs with catalog level number above 5?",
        "answers": [
            [
                "Coffee Bean",
                "2012-04-13 06:37:09"
            ],
            [
                "Jam",
                "2011-07-22 04:57:19"
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nRETURN catalog_contents.catalog_entry_name\nORDER BY catalog_contents.price_in_dollars DESC\nLIMIT 1",
        "question": "What is the entry name of the most expensive catalog (in USD)?",
        "answers": [
            [
                "Sprite Lemo"
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nRETURN catalog_contents.catalog_entry_name\nORDER BY catalog_contents.price_in_dollars DESC\nLIMIT 1",
        "question": "Find the entry name of the catalog with the highest price (in USD).",
        "answers": [
            [
                "Sprite Lemo"
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (t1:`product_catalog.Catalog_Contents`)-[]-(t2:`product_catalog.Catalog_Structure`)\nRETURN t2.catalog_level_name\nORDER BY t1.price_in_dollars\nLIMIT 1",
        "question": "What is the level name of the cheapest catalog (in USD)?",
        "answers": [
            [
                "Category"
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (t1:`product_catalog.Catalog_Contents`)-[]-(t2:`product_catalog.Catalog_Structure`)\nRETURN t2.catalog_level_name\nORDER BY t1.price_in_dollars\nLIMIT 1",
        "question": "Find the level name of the catalog with the lowest price (in USD).",
        "answers": [
            [
                "Category"
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nRETURN catalog_contents.catalog_entry_name\nORDER BY catalog_contents.height DESC\nLIMIT 1",
        "question": "What is the product with the highest height? Give me the catalog entry name.",
        "answers": [
            [
                "Cola"
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nRETURN catalog_contents.catalog_entry_name\nORDER BY catalog_contents.height DESC\nLIMIT 1",
        "question": "Which catalog content has the highest height? Give me the catalog entry name.",
        "answers": [
            [
                "Cola"
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nRETURN catalog_contents.catalog_entry_name\nORDER BY catalog_contents.capacity ASC\nLIMIT 1",
        "question": "Find the name of the product that has the smallest capacity.",
        "answers": [
            [
                "Cola"
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nRETURN catalog_contents.catalog_entry_name\nORDER BY catalog_contents.capacity ASC\nLIMIT 1",
        "question": "Which catalog content has the smallest capacity? Return the catalog entry name.",
        "answers": [
            [
                "Cola"
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (t1:`product_catalog.Catalog_Contents`)-[t2:`product_catalog.Catalog_Contents_Additional_Attributes`]-()\nWHERE t2.catalog_level_number = 8\nRETURN t1.catalog_entry_name",
        "question": "Find the names of catalog entries with level number 8.",
        "answers": [
            [
                "Cola"
            ],
            [
                "Root beer"
            ],
            [
                "Carbonated Water"
            ],
            [
                "Ginger Beer"
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (t1:`product_catalog.Catalog_Contents`)-[t2:`product_catalog.Catalog_Contents_Additional_Attributes`]-()\nWHERE t2.catalog_level_number = 8\nRETURN t1.catalog_entry_name",
        "question": "What are the names of catalog entries with level number 8?",
        "answers": [
            [
                "Cola"
            ],
            [
                "Root beer"
            ],
            [
                "Carbonated Water"
            ],
            [
                "Ginger Beer"
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nWHERE catalog_contents.length < '3' OR catalog_contents.width > '5'\nRETURN catalog_contents.catalog_entry_name",
        "question": "Find the names of the products with length smaller than 3 or height greater than 5.",
        "answers": [
            [
                "Root beer"
            ],
            [
                "Cream Soda"
            ],
            [
                "Ginger Beer"
            ],
            [
                "Dr Pepper"
            ],
            [
                "Fenta Orange"
            ],
            [
                "Wanglaoji"
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nWHERE catalog_contents.length < '3' OR catalog_contents.width > '5'\nRETURN catalog_contents.catalog_entry_name",
        "question": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.",
        "answers": [
            [
                "Root beer"
            ],
            [
                "Cream Soda"
            ],
            [
                "Ginger Beer"
            ],
            [
                "Dr Pepper"
            ],
            [
                "Fenta Orange"
            ],
            [
                "Wanglaoji"
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nWHERE catalog_contents.price_in_dollars > 700\nRETURN catalog_contents.catalog_entry_name,catalog_contents.capacity",
        "question": "Find the name and capacity of products with price greater than 700 (in USD).",
        "answers": [
            [
                "Vimto",
                "6"
            ],
            [
                "Sprite Lemo",
                "8"
            ],
            [
                "Dr Pepper",
                "1"
            ],
            [
                "Diet Pepsi",
                "9"
            ],
            [
                "Diet Mountain Dew",
                "8"
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nWHERE catalog_contents.price_in_dollars > 700\nRETURN catalog_contents.catalog_entry_name,catalog_contents.capacity",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "answers": [
            [
                "Vimto",
                "6"
            ],
            [
                "Sprite Lemo",
                "8"
            ],
            [
                "Dr Pepper",
                "1"
            ],
            [
                "Diet Pepsi",
                "9"
            ],
            [
                "Diet Mountain Dew",
                "8"
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (catalogs:`product_catalog.Catalogs`)\nWITH catalogs.date_of_latest_revision AS date_of_latest_revision, count(*) AS count\nWHERE count  > 1\nRETURN date_of_latest_revision",
        "question": "Find the dates on which more than one revisions were made.",
        "answers": [
            [
                "2017-09-26 12:10:36"
            ],
            [
                "2017-10-26 01:16:51"
            ],
            [
                "2017-12-04 06:48:13"
            ],
            [
                "2017-03-30 09:15:37"
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (catalogs:`product_catalog.Catalogs`)\nWITH catalogs.date_of_latest_revision AS date_of_latest_revision, count(*) AS count\nWHERE count  > 1\nRETURN date_of_latest_revision",
        "question": "On which days more than one revisions were made on catalogs.",
        "answers": [
            [
                "2017-09-26 12:10:36"
            ],
            [
                "2017-10-26 01:16:51"
            ],
            [
                "2017-12-04 06:48:13"
            ],
            [
                "2017-03-30 09:15:37"
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nRETURN count(*)",
        "question": "How many products are there in the records?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nRETURN count(*)",
        "question": "Find the total number of catalog contents.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nWHERE catalog_contents.next_entry_id > 8\nRETURN catalog_contents.catalog_entry_name",
        "question": "Name all the products with next entry ID greater than 8.",
        "answers": [
            [
                "Sprite Lemo"
            ],
            [
                "Diet Pepsi"
            ],
            [
                "Wanglaoji"
            ]
        ]
    },
    {
        "db_id": "product_catalog",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nWHERE catalog_contents.next_entry_id > 8\nRETURN catalog_contents.catalog_entry_name",
        "question": "What are the catalog entry names of the products with next entry ID above 8?",
        "answers": [
            [
                "Sprite Lemo"
            ],
            [
                "Diet Pepsi"
            ],
            [
                "Wanglaoji"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nRETURN count(*)",
        "question": "How many aircrafts do we have?",
        "answers": [
            [
                16
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nRETURN count(*)",
        "question": "How many aircrafts exist in the database?",
        "answers": [
            [
                16
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nRETURN aircraft.name,aircraft.distance",
        "question": "Show name and distance for all aircrafts.",
        "answers": [
            [
                "Boeing 747-400",
                8430
            ],
            [
                "Boeing 737-800",
                3383
            ],
            [
                "Airbus A340-300",
                7120
            ],
            [
                "British Aerospace Jetstream 41",
                1502
            ],
            [
                "Embraer ERJ-145",
                1530
            ],
            [
                "SAAB 340",
                2128
            ],
            [
                "Piper Archer III",
                520
            ],
            [
                "Tupolev 154",
                4103
            ],
            [
                "Schwitzer 2-33",
                30
            ],
            [
                "Lockheed L1011",
                6900
            ],
            [
                "Boeing 757-300",
                4010
            ],
            [
                "Boeing 777-300",
                6441
            ],
            [
                "Boeing 767-400ER",
                6475
            ],
            [
                "Airbus A320",
                2605
            ],
            [
                "Airbus A319",
                1805
            ],
            [
                "Boeing 727",
                1504
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nRETURN aircraft.name,aircraft.distance",
        "question": "What are the names and distances for all airplanes?",
        "answers": [
            [
                "Boeing 747-400",
                8430
            ],
            [
                "Boeing 737-800",
                3383
            ],
            [
                "Airbus A340-300",
                7120
            ],
            [
                "British Aerospace Jetstream 41",
                1502
            ],
            [
                "Embraer ERJ-145",
                1530
            ],
            [
                "SAAB 340",
                2128
            ],
            [
                "Piper Archer III",
                520
            ],
            [
                "Tupolev 154",
                4103
            ],
            [
                "Schwitzer 2-33",
                30
            ],
            [
                "Lockheed L1011",
                6900
            ],
            [
                "Boeing 757-300",
                4010
            ],
            [
                "Boeing 777-300",
                6441
            ],
            [
                "Boeing 767-400ER",
                6475
            ],
            [
                "Airbus A320",
                2605
            ],
            [
                "Airbus A319",
                1805
            ],
            [
                "Boeing 727",
                1504
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nWHERE aircraft.distance > 1000\nRETURN aircraft.aid",
        "question": "Show ids for all aircrafts with more than 1000 distance.",
        "answers": [
            [
                1
            ],
            [
                2
            ],
            [
                3
            ],
            [
                4
            ],
            [
                5
            ],
            [
                6
            ],
            [
                8
            ],
            [
                9
            ],
            [
                10
            ],
            [
                11
            ],
            [
                12
            ],
            [
                13
            ],
            [
                14
            ],
            [
                15
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nWHERE aircraft.distance > 1000\nRETURN aircraft.aid",
        "question": "What are the ids of all aircrafts that can cover a distance of more than 1000?",
        "answers": [
            [
                1
            ],
            [
                2
            ],
            [
                3
            ],
            [
                4
            ],
            [
                5
            ],
            [
                6
            ],
            [
                8
            ],
            [
                9
            ],
            [
                10
            ],
            [
                11
            ],
            [
                12
            ],
            [
                13
            ],
            [
                14
            ],
            [
                15
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nWHERE 1000<=aircraft.distance<=5000\nRETURN count(*)",
        "question": "How many aircrafts have distance between 1000 and 5000?",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nWHERE 1000<=aircraft.distance<=5000\nRETURN count(*)",
        "question": "What is the count of aircrafts that have a distance between 1000 and 5000?",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nWHERE aircraft.aid = 12\nRETURN aircraft.name,aircraft.distance",
        "question": "What is the name and distance for aircraft with id 12?",
        "answers": [
            [
                "Boeing 767-400ER",
                6475
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nWHERE aircraft.aid = 12\nRETURN aircraft.name,aircraft.distance",
        "question": "What is the name and distance for the aircraft that has an id of 12?",
        "answers": [
            [
                "Boeing 767-400ER",
                6475
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nRETURN min(aircraft.distance),avg(aircraft.distance),max(aircraft.distance)",
        "question": "What is the minimum, average, and maximum distance of all aircrafts.",
        "answers": [
            [
                30,
                3655.375,
                8430
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nRETURN min(aircraft.distance),avg(aircraft.distance),max(aircraft.distance)",
        "question": "Return the minimum, average and maximum distances traveled across all aircrafts.",
        "answers": [
            [
                30,
                3655.375,
                8430
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nRETURN aircraft.aid,aircraft.name\nORDER BY aircraft.distance DESC\nLIMIT 1",
        "question": "Show the id and name of the aircraft with the maximum distance.",
        "answers": [
            [
                1,
                "Boeing 747-400"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nRETURN aircraft.aid,aircraft.name\nORDER BY aircraft.distance DESC\nLIMIT 1",
        "question": "What is the id and name of the aircraft that can cover the maximum distance?",
        "answers": [
            [
                1,
                "Boeing 747-400"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nRETURN aircraft.name\nORDER BY aircraft.distance\nLIMIT 3",
        "question": "Show the name of aircrafts with top three lowest distances.",
        "answers": [
            [
                "Schwitzer 2-33"
            ],
            [
                "Piper Archer III"
            ],
            [
                "British Aerospace Jetstream 41"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nRETURN aircraft.name\nORDER BY aircraft.distance\nLIMIT 3",
        "question": "What are the aircrafts with top 3 shortest lengthes? List their names.",
        "answers": [
            [
                "Schwitzer 2-33"
            ],
            [
                "Piper Archer III"
            ],
            [
                "British Aerospace Jetstream 41"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nWITH avg(aircraft.distance) AS distance\nMATCH (aircraft:`flight_1.aircraft`)\nWHERE  aircraft.distance >  distance \nRETURN aircraft.name",
        "question": "Show names for all aircrafts with distances more than the average.",
        "answers": [
            [
                "Boeing 747-400"
            ],
            [
                "Airbus A340-300"
            ],
            [
                "Tupolev 154"
            ],
            [
                "Lockheed L1011"
            ],
            [
                "Boeing 757-300"
            ],
            [
                "Boeing 777-300"
            ],
            [
                "Boeing 767-400ER"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nWITH avg(aircraft.distance) AS distance\nMATCH (aircraft:`flight_1.aircraft`)\nWHERE  aircraft.distance >  distance \nRETURN aircraft.name",
        "question": "What are the names of all aircrafts that can cover more distances than average?",
        "answers": [
            [
                "Boeing 747-400"
            ],
            [
                "Airbus A340-300"
            ],
            [
                "Tupolev 154"
            ],
            [
                "Lockheed L1011"
            ],
            [
                "Boeing 757-300"
            ],
            [
                "Boeing 777-300"
            ],
            [
                "Boeing 767-400ER"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (employee:`flight_1.employee`)\nRETURN count(*)",
        "question": "How many employees do we have?",
        "answers": [
            [
                31
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (employee:`flight_1.employee`)\nRETURN count(*)",
        "question": "What is the number of employees?",
        "answers": [
            [
                31
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (employee:`flight_1.employee`)\nRETURN employee.name,employee.salary\nORDER BY employee.salary",
        "question": "Show name and salary for all employees sorted by salary.",
        "answers": [
            [
                "Milo Brooks",
                20
            ],
            [
                "Donald King",
                18050
            ],
            [
                "Richard Jackson",
                23980
            ],
            [
                "Patricia Jones",
                24450
            ],
            [
                "Linda Davis",
                27984
            ],
            [
                "Elizabeth Taylor",
                32021
            ],
            [
                "Haywood Kelly",
                32899
            ],
            [
                "Chad Stewart",
                33546
            ],
            [
                "David Anderson",
                43001
            ],
            [
                "Barbara Wilson",
                43723
            ],
            [
                "Robert Brown",
                44740
            ],
            [
                "Michael Miller",
                48090
            ],
            [
                "William Moore",
                48250
            ],
            [
                "Jennifer Thomas",
                54921
            ],
            [
                "William Ward",
                84476
            ],
            [
                "Michael Miller",
                99890
            ],
            [
                "Larry West",
                101745
            ],
            [
                "William Jones",
                105743
            ],
            [
                "Eric Cooper",
                114323
            ],
            [
                "James Smith",
                120433
            ],
            [
                "Dorthy Lewis",
                152013
            ],
            [
                "John Williams",
                153972
            ],
            [
                "Mary Johnson",
                178345
            ],
            [
                "Karen Scott",
                205187
            ],
            [
                "Mark Young",
                205187
            ],
            [
                "Lawrence Sperry",
                212156
            ],
            [
                "Angela Martinez",
                212156
            ],
            [
                "Joseph Thompson",
                212156
            ],
            [
                "Betty Adams",
                227489
            ],
            [
                "Lisa Walker",
                256481
            ],
            [
                "George Wright",
                289950
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (employee:`flight_1.employee`)\nRETURN employee.name,employee.salary\nORDER BY employee.salary",
        "question": "What is the name and salary of all employees in order of salary?",
        "answers": [
            [
                "Milo Brooks",
                20
            ],
            [
                "Donald King",
                18050
            ],
            [
                "Richard Jackson",
                23980
            ],
            [
                "Patricia Jones",
                24450
            ],
            [
                "Linda Davis",
                27984
            ],
            [
                "Elizabeth Taylor",
                32021
            ],
            [
                "Haywood Kelly",
                32899
            ],
            [
                "Chad Stewart",
                33546
            ],
            [
                "David Anderson",
                43001
            ],
            [
                "Barbara Wilson",
                43723
            ],
            [
                "Robert Brown",
                44740
            ],
            [
                "Michael Miller",
                48090
            ],
            [
                "William Moore",
                48250
            ],
            [
                "Jennifer Thomas",
                54921
            ],
            [
                "William Ward",
                84476
            ],
            [
                "Michael Miller",
                99890
            ],
            [
                "Larry West",
                101745
            ],
            [
                "William Jones",
                105743
            ],
            [
                "Eric Cooper",
                114323
            ],
            [
                "James Smith",
                120433
            ],
            [
                "Dorthy Lewis",
                152013
            ],
            [
                "John Williams",
                153972
            ],
            [
                "Mary Johnson",
                178345
            ],
            [
                "Karen Scott",
                205187
            ],
            [
                "Mark Young",
                205187
            ],
            [
                "Lawrence Sperry",
                212156
            ],
            [
                "Angela Martinez",
                212156
            ],
            [
                "Joseph Thompson",
                212156
            ],
            [
                "Betty Adams",
                227489
            ],
            [
                "Lisa Walker",
                256481
            ],
            [
                "George Wright",
                289950
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (employee:`flight_1.employee`)\nWHERE employee.salary > 100000\nRETURN employee.eid",
        "question": "Show ids for all employees with at least 100000 salary.",
        "answers": [
            [
                242518965
            ],
            [
                141582651
            ],
            [
                11564812
            ],
            [
                567354612
            ],
            [
                552455318
            ],
            [
                550156548
            ],
            [
                390487451
            ],
            [
                355548984
            ],
            [
                310454876
            ],
            [
                142519864
            ],
            [
                269734834
            ],
            [
                552455348
            ],
            [
                556784565
            ],
            [
                573284895
            ],
            [
                574489456
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (employee:`flight_1.employee`)\nWHERE employee.salary > 100000\nRETURN employee.eid",
        "question": "What is the id of every employee who has at least a salary of  100000?",
        "answers": [
            [
                242518965
            ],
            [
                141582651
            ],
            [
                11564812
            ],
            [
                567354612
            ],
            [
                552455318
            ],
            [
                550156548
            ],
            [
                390487451
            ],
            [
                355548984
            ],
            [
                310454876
            ],
            [
                142519864
            ],
            [
                269734834
            ],
            [
                552455348
            ],
            [
                556784565
            ],
            [
                573284895
            ],
            [
                574489456
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (employee:`flight_1.employee`)\nWHERE 100000<=employee.salary<=200000\nRETURN count(*)",
        "question": "How many employees have salary between 100000 and 200000?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (employee:`flight_1.employee`)\nWHERE 100000<=employee.salary<=200000\nRETURN count(*)",
        "question": "What is the number of employees that have a salary between 100000 and 200000?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (employee:`flight_1.employee`)\nWHERE employee.eid = 242518965\nRETURN employee.name,employee.salary",
        "question": "What is the name and salary for employee with id 242518965?",
        "answers": [
            [
                "James Smith",
                120433
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (employee:`flight_1.employee`)\nWHERE employee.eid = 242518965\nRETURN employee.name,employee.salary",
        "question": "What is the name and salary of the employee with the id 242518965?",
        "answers": [
            [
                "James Smith",
                120433
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (employee:`flight_1.employee`)\nRETURN employee.eid,employee.name\nORDER BY employee.salary DESC\nLIMIT 1",
        "question": "Show the id and name of the employee with maximum salary.",
        "answers": [
            [
                269734834,
                "George Wright"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (employee:`flight_1.employee`)\nRETURN employee.eid,employee.name\nORDER BY employee.salary DESC\nLIMIT 1",
        "question": "What is the id and name of the employee with the highest salary?",
        "answers": [
            [
                269734834,
                "George Wright"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (employee:`flight_1.employee`)\nRETURN employee.name\nORDER BY employee.salary ASC\nLIMIT 3",
        "question": "Show the name of employees with three lowest salaries.",
        "answers": [
            [
                "Milo Brooks"
            ],
            [
                "Donald King"
            ],
            [
                "Richard Jackson"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (employee:`flight_1.employee`)\nRETURN employee.name\nORDER BY employee.salary ASC\nLIMIT 3",
        "question": "What is the name of the 3 employees who get paid the least?",
        "answers": [
            [
                "Milo Brooks"
            ],
            [
                "Donald King"
            ],
            [
                "Richard Jackson"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (employee:`flight_1.employee`)\nWITH avg(employee.salary) AS salary\nMATCH (employee:`flight_1.employee`)\nWHERE  employee.salary >  salary \nRETURN employee.name",
        "question": "Show names for all employees with salary more than the average.",
        "answers": [
            [
                "James Smith"
            ],
            [
                "Mary Johnson"
            ],
            [
                "John Williams"
            ],
            [
                "Lisa Walker"
            ],
            [
                "Karen Scott"
            ],
            [
                "Lawrence Sperry"
            ],
            [
                "Angela Martinez"
            ],
            [
                "Joseph Thompson"
            ],
            [
                "Betty Adams"
            ],
            [
                "George Wright"
            ],
            [
                "Dorthy Lewis"
            ],
            [
                "Mark Young"
            ],
            [
                "Eric Cooper"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (employee:`flight_1.employee`)\nWITH avg(employee.salary) AS salary\nMATCH (employee:`flight_1.employee`)\nWHERE  employee.salary >  salary \nRETURN employee.name",
        "question": "What are the names of all employees who have a salary higher than average?",
        "answers": [
            [
                "James Smith"
            ],
            [
                "Mary Johnson"
            ],
            [
                "John Williams"
            ],
            [
                "Lisa Walker"
            ],
            [
                "Karen Scott"
            ],
            [
                "Lawrence Sperry"
            ],
            [
                "Angela Martinez"
            ],
            [
                "Joseph Thompson"
            ],
            [
                "Betty Adams"
            ],
            [
                "George Wright"
            ],
            [
                "Dorthy Lewis"
            ],
            [
                "Mark Young"
            ],
            [
                "Eric Cooper"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (employee:`flight_1.employee`)\nWHERE employee.name = 'Mark Young'\nRETURN employee.eid,employee.salary",
        "question": "Show the id and salary of Mark Young.",
        "answers": [
            [
                556784565,
                205187
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (employee:`flight_1.employee`)\nWHERE employee.name = 'Mark Young'\nRETURN employee.eid,employee.salary",
        "question": "What is the id and salary of the employee named Mark Young?",
        "answers": [
            [
                556784565,
                205187
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (flight:`flight_1.flight`)\nRETURN count(*)",
        "question": "How many flights do we have?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (flight:`flight_1.flight`)\nRETURN count(*)",
        "question": "What is the number of flights?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (flight:`flight_1.flight`)\nRETURN flight.flno,flight.origin,flight.destination\nORDER BY flight.origin",
        "question": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.",
        "answers": [
            [
                76,
                "Chicago",
                "Los Angeles"
            ],
            [
                68,
                "Chicago",
                "New York"
            ],
            [
                99,
                "Los Angeles",
                "Washington D.C."
            ],
            [
                13,
                "Los Angeles",
                "Chicago"
            ],
            [
                346,
                "Los Angeles",
                "Dallas"
            ],
            [
                387,
                "Los Angeles",
                "Boston"
            ],
            [
                7,
                "Los Angeles",
                "Sydney"
            ],
            [
                2,
                "Los Angeles",
                "Tokyo"
            ],
            [
                33,
                "Los Angeles",
                "Honolulu"
            ],
            [
                34,
                "Los Angeles",
                "Honolulu"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (flight:`flight_1.flight`)\nRETURN flight.flno,flight.origin,flight.destination\nORDER BY flight.origin",
        "question": "What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?",
        "answers": [
            [
                76,
                "Chicago",
                "Los Angeles"
            ],
            [
                68,
                "Chicago",
                "New York"
            ],
            [
                99,
                "Los Angeles",
                "Washington D.C."
            ],
            [
                13,
                "Los Angeles",
                "Chicago"
            ],
            [
                346,
                "Los Angeles",
                "Dallas"
            ],
            [
                387,
                "Los Angeles",
                "Boston"
            ],
            [
                7,
                "Los Angeles",
                "Sydney"
            ],
            [
                2,
                "Los Angeles",
                "Tokyo"
            ],
            [
                33,
                "Los Angeles",
                "Honolulu"
            ],
            [
                34,
                "Los Angeles",
                "Honolulu"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (flight:`flight_1.flight`)\nWHERE flight.origin = \"Los Angeles\"\nRETURN flight.flno",
        "question": "Show all flight number from Los Angeles.",
        "answers": [
            [
                99
            ],
            [
                13
            ],
            [
                346
            ],
            [
                387
            ],
            [
                7
            ],
            [
                2
            ],
            [
                33
            ],
            [
                34
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (flight:`flight_1.flight`)\nWHERE flight.origin = \"Los Angeles\"\nRETURN flight.flno",
        "question": "What are the numbers of all flights coming from Los Angeles?",
        "answers": [
            [
                99
            ],
            [
                13
            ],
            [
                346
            ],
            [
                387
            ],
            [
                7
            ],
            [
                2
            ],
            [
                33
            ],
            [
                34
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (flight:`flight_1.flight`)\nWHERE flight.distance > 2000\nRETURN flight.flno",
        "question": "Show flight number for all flights with more than 2000 distance.",
        "answers": [
            [
                99
            ],
            [
                387
            ],
            [
                7
            ],
            [
                2
            ],
            [
                33
            ],
            [
                34
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (flight:`flight_1.flight`)\nWHERE flight.distance > 2000\nRETURN flight.flno",
        "question": "What are the numbers of all flights that can cover a distance of more than 2000?",
        "answers": [
            [
                99
            ],
            [
                387
            ],
            [
                7
            ],
            [
                2
            ],
            [
                33
            ],
            [
                34
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (flight:`flight_1.flight`)\nWHERE flight.price > 300\nRETURN flight.origin,flight.destination",
        "question": "Show origin and destination for flights with price higher than 300.",
        "answers": [
            [
                "Los Angeles",
                "Tokyo"
            ],
            [
                "Los Angeles",
                "Honolulu"
            ],
            [
                "Los Angeles",
                "Honolulu"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (flight:`flight_1.flight`)\nWHERE flight.price > 300\nRETURN flight.origin,flight.destination",
        "question": "What is the origin and destination for all flights whose price is higher than 300?",
        "answers": [
            [
                "Los Angeles",
                "Tokyo"
            ],
            [
                "Los Angeles",
                "Honolulu"
            ],
            [
                "Los Angeles",
                "Honolulu"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (flight:`flight_1.flight`)\nRETURN flight.flno,flight.distance\nORDER BY flight.price DESC\nLIMIT 1",
        "question": "Show the flight number and distance of the flight with maximum price.",
        "answers": [
            [
                2,
                5478
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (flight:`flight_1.flight`)\nRETURN flight.flno,flight.distance\nORDER BY flight.price DESC\nLIMIT 1",
        "question": "What is the flight number and its distance for the one with the maximum price?",
        "answers": [
            [
                2,
                5478
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (flight:`flight_1.flight`)\nRETURN flight.flno\nORDER BY flight.distance ASC\nLIMIT 3",
        "question": "Show the flight number of flights with three lowest distances.",
        "answers": [
            [
                68
            ],
            [
                346
            ],
            [
                13
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (flight:`flight_1.flight`)\nRETURN flight.flno\nORDER BY flight.distance ASC\nLIMIT 3",
        "question": "What are the numbers of the shortest flights?",
        "answers": [
            [
                68
            ],
            [
                346
            ],
            [
                13
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (flight:`flight_1.flight`)\nRETURN flight.origin,count(*)",
        "question": "Show all origins and the number of flights from each origin.",
        "answers": [
            [
                "Los Angeles",
                8
            ],
            [
                "Chicago",
                2
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (flight:`flight_1.flight`)\nRETURN flight.origin,count(*)",
        "question": "For each origin, how many flights came from there?",
        "answers": [
            [
                "Los Angeles",
                8
            ],
            [
                "Chicago",
                2
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (flight:`flight_1.flight`)\nRETURN flight.destination,count(*)",
        "question": "Show all destinations and the number of flights to each destination.",
        "answers": [
            [
                "Washington D.C.",
                1
            ],
            [
                "Chicago",
                1
            ],
            [
                "Dallas",
                1
            ],
            [
                "Boston",
                1
            ],
            [
                "Sydney",
                1
            ],
            [
                "Tokyo",
                1
            ],
            [
                "Honolulu",
                2
            ],
            [
                "Los Angeles",
                1
            ],
            [
                "New York",
                1
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (flight:`flight_1.flight`)\nRETURN flight.destination,count(*)",
        "question": "What are the destinations and number of flights to each one?",
        "answers": [
            [
                "Washington D.C.",
                1
            ],
            [
                "Chicago",
                1
            ],
            [
                "Dallas",
                1
            ],
            [
                "Boston",
                1
            ],
            [
                "Sydney",
                1
            ],
            [
                "Tokyo",
                1
            ],
            [
                "Honolulu",
                2
            ],
            [
                "Los Angeles",
                1
            ],
            [
                "New York",
                1
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (flight:`flight_1.flight`)\nRETURN flight.origin\nORDER BY flight.origin DESC\nLIMIT 1",
        "question": "Which origin has most number of flights?",
        "answers": [
            [
                "Los Angeles"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (flight:`flight_1.flight`)\nRETURN flight.origin\nORDER BY flight.origin DESC\nLIMIT 1",
        "question": "What place has the most flights coming from there?",
        "answers": [
            [
                "Los Angeles"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (flight:`flight_1.flight`)\nRETURN flight.destination\nORDER BY flight.destination\nLIMIT 1",
        "question": "Which destination has least number of flights?",
        "answers": [
            [
                "Boston"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (flight:`flight_1.flight`)\nRETURN flight.destination\nORDER BY flight.destination\nLIMIT 1",
        "question": "What destination has the fewest number of flights?",
        "answers": [
            [
                "Boston"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (T1:`flight_1.flight`)-[]-(T2:`flight_1.aircraft`)\nWHERE T1.flno = 99\nRETURN T2.name",
        "question": "What is the aircraft name for the flight with number 99",
        "answers": [
            [
                "Boeing 747-400"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (T1:`flight_1.flight`)-[]-(T2:`flight_1.aircraft`)\nWHERE T1.flno = 99\nRETURN T2.name",
        "question": "What is the name of the aircraft that was on flight number 99?",
        "answers": [
            [
                "Boeing 747-400"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (T1:`flight_1.flight`)-[]-(T2:`flight_1.aircraft`)\nWHERE T2.name = \"Airbus A340-300\"\nRETURN T1.flno",
        "question": "Show all flight numbers with aircraft Airbus A340-300.",
        "answers": [
            [
                7
            ],
            [
                13
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (T1:`flight_1.flight`)-[]-(T2:`flight_1.aircraft`)\nWHERE T2.name = \"Airbus A340-300\"\nRETURN T1.flno",
        "question": "What are the flight numbers for the aircraft Airbus A340-300?",
        "answers": [
            [
                7
            ],
            [
                13
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (T1:`flight_1.flight`)-[]-(T2:`flight_1.aircraft`)\nRETURN T2.name,count(*)",
        "question": "Show aircraft names and number of flights for each aircraft.",
        "answers": [
            [
                "Boeing 747-400",
                1
            ],
            [
                "Airbus A340-300",
                2
            ],
            [
                "Boeing 737-800",
                1
            ],
            [
                "SAAB 340",
                1
            ],
            [
                "Lockheed L1011",
                2
            ],
            [
                "Piper Archer III",
                1
            ],
            [
                "Embraer ERJ-145",
                1
            ],
            [
                "Boeing 757-300",
                1
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (T1:`flight_1.flight`)-[]-(T2:`flight_1.aircraft`)\nRETURN T2.name,count(*)",
        "question": "What is the name of each aircraft and how many flights does each one complete?",
        "answers": [
            [
                "Boeing 747-400",
                1
            ],
            [
                "Airbus A340-300",
                2
            ],
            [
                "Boeing 737-800",
                1
            ],
            [
                "SAAB 340",
                1
            ],
            [
                "Lockheed L1011",
                2
            ],
            [
                "Piper Archer III",
                1
            ],
            [
                "Embraer ERJ-145",
                1
            ],
            [
                "Boeing 757-300",
                1
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (T1:`flight_1.flight`)-[]-(T2:`flight_1.aircraft`)\nWITH count(*) AS count, T2.name AS name\nWHERE count  >= 2\nRETURN name",
        "question": "Show names for all aircraft with at least two flights.",
        "answers": [
            [
                "Airbus A340-300"
            ],
            [
                "Lockheed L1011"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (T1:`flight_1.flight`)-[]-(T2:`flight_1.aircraft`)\nWITH count(*) AS count, T2.name AS name\nWHERE count  >= 2\nRETURN name",
        "question": "What are the names for all aircrafts with at least 2 flights?",
        "answers": [
            [
                "Airbus A340-300"
            ],
            [
                "Lockheed L1011"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH ()-[certificate:`flight_1.certificate`]-()\nRETURN count(DISTINCT certificate.eid)",
        "question": "How many employees have certificate.",
        "answers": [
            [
                20
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH ()-[certificate:`flight_1.certificate`]-()\nRETURN count(DISTINCT certificate.eid)",
        "question": "What is the count of distinct employees with certificates?",
        "answers": [
            [
                20
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (T1:`flight_1.employee`)-[T2:`flight_1.certificate`]-(T3:`flight_1.aircraft`)\nWHERE T1.name = \"John Williams\"\nRETURN T3.name",
        "question": "Show names for all aircrafts of which John Williams has certificates.",
        "answers": [
            [
                "Boeing 757-300"
            ],
            [
                "Boeing 737-800"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (T1:`flight_1.employee`)-[T2:`flight_1.certificate`]-(T3:`flight_1.aircraft`)\nWHERE T1.name = \"John Williams\"\nRETURN T3.name",
        "question": "What are the names of all aircrafts that John Williams have certificates to be able to fly?",
        "answers": [
            [
                "Boeing 757-300"
            ],
            [
                "Boeing 737-800"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (T1:`flight_1.employee`)-[T2:`flight_1.certificate`]-(T3:`flight_1.aircraft`)\nWHERE T3.name = \"Boeing 737-800\"\nRETURN T1.name",
        "question": "Show names for all employees who have certificate of Boeing 737-800.",
        "answers": [
            [
                "Mary Johnson"
            ],
            [
                "James Smith"
            ],
            [
                "George Wright"
            ],
            [
                "Betty Adams"
            ],
            [
                "Lisa Walker"
            ],
            [
                "Larry West"
            ],
            [
                "Mark Young"
            ],
            [
                "John Williams"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (T1:`flight_1.employee`)-[T2:`flight_1.certificate`]-(T3:`flight_1.aircraft`)\nWHERE T3.name = \"Boeing 737-800\"\nRETURN T1.name",
        "question": "What are the names of all employees who have a certificate to fly Boeing 737-800?",
        "answers": [
            [
                "Mary Johnson"
            ],
            [
                "James Smith"
            ],
            [
                "George Wright"
            ],
            [
                "Betty Adams"
            ],
            [
                "Lisa Walker"
            ],
            [
                "Larry West"
            ],
            [
                "Mark Young"
            ],
            [
                "John Williams"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (T2:`flight_1.aircraft`)-[T1:`flight_1.certificate`]-()\nWITH count(T1.aid) AS cnt, T2\nRETURN T2.name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Show the name of aircraft which fewest people have its certificate.",
        "answers": [
            [
                "Boeing 737-800"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (T2:`flight_1.aircraft`)-[T1:`flight_1.certificate`]-()\nWITH count(T1.aid) AS cnt, T2\nRETURN T2.name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What are the names of the aircraft that the least people are certified to fly?",
        "answers": [
            [
                "Boeing 737-800"
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (T1:`flight_1.employee`)-[T2:`flight_1.certificate`]-()\nWITH T1, count(T1.eid) AS cnt\nRETURN T1.name,T1.salary\nORDER BY cnt DESC\nLIMIT 1",
        "question": "what is the salary and name of the employee who has the most number of aircraft certificates?",
        "answers": [
            [
                "George Wright",
                289950
            ]
        ]
    },
    {
        "db_id": "flight_1",
        "query": "MATCH (T1:`flight_1.employee`)-[T2:`flight_1.certificate`]-()\nWITH T1, count(T1.eid) AS cnt\nRETURN T1.name,T1.salary\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the salaray and name of the employee that is certified to fly the most planes?",
        "answers": [
            [
                "George Wright",
                289950
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nRETURN count(DISTINCT allergy_type.Allergy)",
        "question": "How many allergies are there?",
        "answers": [
            [
                14
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nRETURN count(DISTINCT allergy_type.Allergy)",
        "question": "How many allergy entries are there?",
        "answers": [
            [
                14
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nRETURN count(DISTINCT allergy_type.AllergyType)",
        "question": "How many different allergy types exist?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nRETURN count(DISTINCT allergy_type.AllergyType)",
        "question": "How many distinct allergies are there?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nRETURN DISTINCT allergy_type.AllergyType",
        "question": "Show all allergy types.",
        "answers": [
            [
                "food"
            ],
            [
                "environmental"
            ],
            [
                "animal"
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nRETURN DISTINCT allergy_type.AllergyType",
        "question": "What are the different allergy types?",
        "answers": [
            [
                "food"
            ],
            [
                "environmental"
            ],
            [
                "animal"
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nRETURN allergy_type.Allergy,allergy_type.AllergyType",
        "question": "Show all allergies and their types.",
        "answers": [
            [
                "Eggs",
                "food"
            ],
            [
                "Nuts",
                "food"
            ],
            [
                "Milk",
                "food"
            ],
            [
                "Shellfish",
                "food"
            ],
            [
                "Anchovies",
                "food"
            ],
            [
                "Wheat",
                "food"
            ],
            [
                "Soy",
                "food"
            ],
            [
                "Ragweed",
                "environmental"
            ],
            [
                "Tree Pollen",
                "environmental"
            ],
            [
                "Grass Pollen",
                "environmental"
            ],
            [
                "Cat",
                "animal"
            ],
            [
                "Dog",
                "animal"
            ],
            [
                "Rodent",
                "animal"
            ],
            [
                "Bee Stings",
                "animal"
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nRETURN allergy_type.Allergy,allergy_type.AllergyType",
        "question": "What are the allergies and their types?",
        "answers": [
            [
                "Eggs",
                "food"
            ],
            [
                "Nuts",
                "food"
            ],
            [
                "Milk",
                "food"
            ],
            [
                "Shellfish",
                "food"
            ],
            [
                "Anchovies",
                "food"
            ],
            [
                "Wheat",
                "food"
            ],
            [
                "Soy",
                "food"
            ],
            [
                "Ragweed",
                "environmental"
            ],
            [
                "Tree Pollen",
                "environmental"
            ],
            [
                "Grass Pollen",
                "environmental"
            ],
            [
                "Cat",
                "animal"
            ],
            [
                "Dog",
                "animal"
            ],
            [
                "Rodent",
                "animal"
            ],
            [
                "Bee Stings",
                "animal"
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nWHERE allergy_type.AllergyType = 'food'\nRETURN DISTINCT allergy_type.Allergy",
        "question": "Show all allergies with type food.",
        "answers": [
            [
                "Eggs"
            ],
            [
                "Nuts"
            ],
            [
                "Milk"
            ],
            [
                "Shellfish"
            ],
            [
                "Anchovies"
            ],
            [
                "Wheat"
            ],
            [
                "Soy"
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nWHERE allergy_type.AllergyType = 'food'\nRETURN DISTINCT allergy_type.Allergy",
        "question": "What are all the different food allergies?",
        "answers": [
            [
                "Eggs"
            ],
            [
                "Nuts"
            ],
            [
                "Milk"
            ],
            [
                "Shellfish"
            ],
            [
                "Anchovies"
            ],
            [
                "Wheat"
            ],
            [
                "Soy"
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nWHERE allergy_type.Allergy = 'Cat'\nRETURN allergy_type.AllergyType",
        "question": "What is the type of allergy Cat?",
        "answers": [
            [
                "animal"
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nWHERE allergy_type.Allergy = 'Cat'\nRETURN allergy_type.AllergyType",
        "question": "What is allergy type of a cat allergy?",
        "answers": [
            [
                "animal"
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nWHERE allergy_type.AllergyType = 'animal'\nRETURN count(*)",
        "question": "How many allergies have type animal?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nWHERE allergy_type.AllergyType = 'animal'\nRETURN count(*)",
        "question": "How many animal type allergies exist?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nRETURN allergy_type.AllergyType,count(*)",
        "question": "Show all allergy types and the number of allergies in each type.",
        "answers": [
            [
                "food",
                7
            ],
            [
                "environmental",
                3
            ],
            [
                "animal",
                4
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nRETURN allergy_type.AllergyType,count(*)",
        "question": "What are the allergy types and how many allergies correspond to each one?",
        "answers": [
            [
                "food",
                7
            ],
            [
                "environmental",
                3
            ],
            [
                "animal",
                4
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nRETURN allergy_type.AllergyType\nORDER BY allergy_type.AllergyType DESC\nLIMIT 1",
        "question": "Which allergy type has most number of allergies?",
        "answers": [
            [
                "food"
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nRETURN allergy_type.AllergyType\nORDER BY allergy_type.AllergyType DESC\nLIMIT 1",
        "question": "Which allergy type is most common?",
        "answers": [
            [
                "food"
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN count(*)",
        "question": "How many students are there?",
        "answers": [
            [
                34
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN count(*)",
        "question": "What is the total number of students?",
        "answers": [
            [
                34
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN student.Fname,student.LName",
        "question": "Show first name and last name for all students.",
        "answers": [
            [
                "Linda",
                "Smith"
            ],
            [
                "Tracy",
                "Kim"
            ],
            [
                "Shiela",
                "Jones"
            ],
            [
                "Dinesh",
                "Kumar"
            ],
            [
                "Paul",
                "Gompers"
            ],
            [
                "Andy",
                "Schultz"
            ],
            [
                "Lisa",
                "Apap"
            ],
            [
                "Jandy",
                "Nelson"
            ],
            [
                "Eric",
                "Tai"
            ],
            [
                "Derek",
                "Lee"
            ],
            [
                "David",
                "Adams"
            ],
            [
                "Steven",
                "Davis"
            ],
            [
                "Charles",
                "Norris"
            ],
            [
                "Susan",
                "Lee"
            ],
            [
                "Mark",
                "Schwartz"
            ],
            [
                "Bruce",
                "Wilson"
            ],
            [
                "Michael",
                "Leighton"
            ],
            [
                "Arthur",
                "Pang"
            ],
            [
                "Ian",
                "Thornton"
            ],
            [
                "George",
                "Andreou"
            ],
            [
                "Michael",
                "Woods"
            ],
            [
                "David",
                "Shieber"
            ],
            [
                "Stacy",
                "Prater"
            ],
            [
                "Mark",
                "Goldman"
            ],
            [
                "Eric",
                "Pang"
            ],
            [
                "Paul",
                "Brody"
            ],
            [
                "Eric",
                "Rugh"
            ],
            [
                "Jun",
                "Han"
            ],
            [
                "Lisa",
                "Cheng"
            ],
            [
                "Sarah",
                "Smith"
            ],
            [
                "Eric",
                "Brown"
            ],
            [
                "William",
                "Simms"
            ],
            [
                "Eric",
                "Epp"
            ],
            [
                "Sarah",
                "Schmidt"
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN student.Fname,student.LName",
        "question": "What are the full names of all students",
        "answers": [
            [
                "Linda",
                "Smith"
            ],
            [
                "Tracy",
                "Kim"
            ],
            [
                "Shiela",
                "Jones"
            ],
            [
                "Dinesh",
                "Kumar"
            ],
            [
                "Paul",
                "Gompers"
            ],
            [
                "Andy",
                "Schultz"
            ],
            [
                "Lisa",
                "Apap"
            ],
            [
                "Jandy",
                "Nelson"
            ],
            [
                "Eric",
                "Tai"
            ],
            [
                "Derek",
                "Lee"
            ],
            [
                "David",
                "Adams"
            ],
            [
                "Steven",
                "Davis"
            ],
            [
                "Charles",
                "Norris"
            ],
            [
                "Susan",
                "Lee"
            ],
            [
                "Mark",
                "Schwartz"
            ],
            [
                "Bruce",
                "Wilson"
            ],
            [
                "Michael",
                "Leighton"
            ],
            [
                "Arthur",
                "Pang"
            ],
            [
                "Ian",
                "Thornton"
            ],
            [
                "George",
                "Andreou"
            ],
            [
                "Michael",
                "Woods"
            ],
            [
                "David",
                "Shieber"
            ],
            [
                "Stacy",
                "Prater"
            ],
            [
                "Mark",
                "Goldman"
            ],
            [
                "Eric",
                "Pang"
            ],
            [
                "Paul",
                "Brody"
            ],
            [
                "Eric",
                "Rugh"
            ],
            [
                "Jun",
                "Han"
            ],
            [
                "Lisa",
                "Cheng"
            ],
            [
                "Sarah",
                "Smith"
            ],
            [
                "Eric",
                "Brown"
            ],
            [
                "William",
                "Simms"
            ],
            [
                "Eric",
                "Epp"
            ],
            [
                "Sarah",
                "Schmidt"
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN count(DISTINCT student.Advisor)",
        "question": "How many different advisors are listed?",
        "answers": [
            [
                18
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN count(DISTINCT student.Advisor)",
        "question": "How many advisors are there?",
        "answers": [
            [
                18
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN DISTINCT student.Major",
        "question": "Show all majors.",
        "answers": [
            [
                600
            ],
            [
                520
            ],
            [
                540
            ],
            [
                550
            ],
            [
                100
            ],
            [
                50
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN DISTINCT student.Major",
        "question": "What are the different majors?",
        "answers": [
            [
                600
            ],
            [
                520
            ],
            [
                540
            ],
            [
                550
            ],
            [
                100
            ],
            [
                50
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN DISTINCT student.city_code",
        "question": "Show all cities where students live.",
        "answers": [
            [
                "BAL"
            ],
            [
                "HKG"
            ],
            [
                "WAS"
            ],
            [
                "CHI"
            ],
            [
                "YYZ"
            ],
            [
                "PIT"
            ],
            [
                "HOU"
            ],
            [
                "PHL"
            ],
            [
                "DAL"
            ],
            [
                "DET"
            ],
            [
                "LON"
            ],
            [
                "NYC"
            ],
            [
                "LOS"
            ],
            [
                "ROC"
            ],
            [
                "PEK"
            ],
            [
                "SFO"
            ],
            [
                "ATL"
            ],
            [
                "NAR"
            ],
            [
                "BOS"
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN DISTINCT student.city_code",
        "question": "What cities do students live in?",
        "answers": [
            [
                "BAL"
            ],
            [
                "HKG"
            ],
            [
                "WAS"
            ],
            [
                "CHI"
            ],
            [
                "YYZ"
            ],
            [
                "PIT"
            ],
            [
                "HOU"
            ],
            [
                "PHL"
            ],
            [
                "DAL"
            ],
            [
                "DET"
            ],
            [
                "LON"
            ],
            [
                "NYC"
            ],
            [
                "LOS"
            ],
            [
                "ROC"
            ],
            [
                "PEK"
            ],
            [
                "SFO"
            ],
            [
                "ATL"
            ],
            [
                "NAR"
            ],
            [
                "BOS"
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nWHERE student.Sex = 'F'\nRETURN student.Fname,student.LName,student.Age",
        "question": "Show first name, last name, age for all female students. Their sex is F.",
        "answers": [
            [
                "Linda",
                "Smith",
                18
            ],
            [
                "Tracy",
                "Kim",
                19
            ],
            [
                "Shiela",
                "Jones",
                21
            ],
            [
                "Lisa",
                "Apap",
                18
            ],
            [
                "Jandy",
                "Nelson",
                20
            ],
            [
                "Susan",
                "Lee",
                16
            ],
            [
                "Stacy",
                "Prater",
                18
            ],
            [
                "Lisa",
                "Cheng",
                21
            ],
            [
                "Sarah",
                "Smith",
                20
            ],
            [
                "Sarah",
                "Schmidt",
                26
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nWHERE student.Sex = 'F'\nRETURN student.Fname,student.LName,student.Age",
        "question": "What are the full names and ages for all female students whose sex is F?",
        "answers": [
            [
                "Linda",
                "Smith",
                18
            ],
            [
                "Tracy",
                "Kim",
                19
            ],
            [
                "Shiela",
                "Jones",
                21
            ],
            [
                "Lisa",
                "Apap",
                18
            ],
            [
                "Jandy",
                "Nelson",
                20
            ],
            [
                "Susan",
                "Lee",
                16
            ],
            [
                "Stacy",
                "Prater",
                18
            ],
            [
                "Lisa",
                "Cheng",
                21
            ],
            [
                "Sarah",
                "Smith",
                20
            ],
            [
                "Sarah",
                "Schmidt",
                26
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nWHERE student.Sex = 'M'\nRETURN student.StuID",
        "question": "Show student ids for all male students.",
        "answers": [
            [
                1004
            ],
            [
                1005
            ],
            [
                1006
            ],
            [
                1009
            ],
            [
                1010
            ],
            [
                1011
            ],
            [
                1012
            ],
            [
                1014
            ],
            [
                1016
            ],
            [
                1017
            ],
            [
                1018
            ],
            [
                1019
            ],
            [
                1020
            ],
            [
                1021
            ],
            [
                1022
            ],
            [
                1023
            ],
            [
                1025
            ],
            [
                1026
            ],
            [
                1027
            ],
            [
                1028
            ],
            [
                1029
            ],
            [
                1032
            ],
            [
                1033
            ],
            [
                1034
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nWHERE student.Sex = 'M'\nRETURN student.StuID",
        "question": "What are the student ids for all male students?",
        "answers": [
            [
                1004
            ],
            [
                1005
            ],
            [
                1006
            ],
            [
                1009
            ],
            [
                1010
            ],
            [
                1011
            ],
            [
                1012
            ],
            [
                1014
            ],
            [
                1016
            ],
            [
                1017
            ],
            [
                1018
            ],
            [
                1019
            ],
            [
                1020
            ],
            [
                1021
            ],
            [
                1022
            ],
            [
                1023
            ],
            [
                1025
            ],
            [
                1026
            ],
            [
                1027
            ],
            [
                1028
            ],
            [
                1029
            ],
            [
                1032
            ],
            [
                1033
            ],
            [
                1034
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nWHERE student.Age = 18\nRETURN count(*)",
        "question": "How many students are age 18?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nWHERE student.Age = 18\nRETURN count(*)",
        "question": "How many students are 18 years old?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nWHERE student.Age > 20\nRETURN student.StuID",
        "question": "Show all student ids who are older than 20.",
        "answers": [
            [
                1003
            ],
            [
                1005
            ],
            [
                1011
            ],
            [
                1017
            ],
            [
                1020
            ],
            [
                1030
            ],
            [
                1035
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nWHERE student.Age > 20\nRETURN student.StuID",
        "question": "What are the student ids for students over 20 years old?",
        "answers": [
            [
                1003
            ],
            [
                1005
            ],
            [
                1011
            ],
            [
                1017
            ],
            [
                1020
            ],
            [
                1030
            ],
            [
                1035
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nWHERE student.StuID = 1004\nRETURN student.Advisor",
        "question": "Who is the advisor of student with ID 1004?",
        "answers": [
            [
                8423
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nWHERE student.StuID = 1004\nRETURN student.Advisor",
        "question": "Who advises student 1004?",
        "answers": [
            [
                8423
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nWITH min(student.Age) AS age\nMATCH (student:`allergy_1.Student`)\nWHERE  student.Age =  age \nRETURN student.LName",
        "question": "What is the last name of the youngest student?",
        "answers": [
            [
                "Lee"
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nWITH min(student.Age) AS age\nMATCH (student:`allergy_1.Student`)\nWHERE  student.Age =  age \nRETURN student.LName",
        "question": "Provide the last name of the youngest student.",
        "answers": [
            [
                "Lee"
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nWITH max(student.Age) AS age\nMATCH (student:`allergy_1.Student`)\nWHERE  student.Age =  age \nRETURN student.StuID",
        "question": "Show the student id of the oldest student.",
        "answers": [
            [
                1017
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nWITH max(student.Age) AS age\nMATCH (student:`allergy_1.Student`)\nWHERE  student.Age =  age \nRETURN student.StuID",
        "question": "What student id corresponds to the oldest student?",
        "answers": [
            [
                1017
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN student.Major,count(*)",
        "question": "Show all majors and corresponding number of students.",
        "answers": [
            [
                600,
                18
            ],
            [
                520,
                6
            ],
            [
                540,
                2
            ],
            [
                550,
                5
            ],
            [
                100,
                1
            ],
            [
                50,
                2
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN student.Major,count(*)",
        "question": "How many students are there for each major?",
        "answers": [
            [
                600,
                18
            ],
            [
                520,
                6
            ],
            [
                540,
                2
            ],
            [
                550,
                5
            ],
            [
                100,
                1
            ],
            [
                50,
                2
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN student.Major\nORDER BY student.Major DESC\nLIMIT 1",
        "question": "Which major has most number of students?",
        "answers": [
            [
                600
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN student.Major\nORDER BY student.Major DESC\nLIMIT 1",
        "question": "What is the largest major?",
        "answers": [
            [
                600
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN student.Age,count(*)",
        "question": "Show all ages and corresponding number of students.",
        "answers": [
            [
                18,
                10
            ],
            [
                19,
                4
            ],
            [
                21,
                2
            ],
            [
                20,
                8
            ],
            [
                26,
                2
            ],
            [
                17,
                4
            ],
            [
                22,
                2
            ],
            [
                16,
                1
            ],
            [
                27,
                1
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN student.Age,count(*)",
        "question": "How old is each student and how many students are each age?",
        "answers": [
            [
                18,
                10
            ],
            [
                19,
                4
            ],
            [
                21,
                2
            ],
            [
                20,
                8
            ],
            [
                26,
                2
            ],
            [
                17,
                4
            ],
            [
                22,
                2
            ],
            [
                16,
                1
            ],
            [
                27,
                1
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN student.city_code,count(*)",
        "question": "Show all cities and corresponding number of students.",
        "answers": [
            [
                "BAL",
                4
            ],
            [
                "HKG",
                3
            ],
            [
                "WAS",
                3
            ],
            [
                "CHI",
                1
            ],
            [
                "YYZ",
                2
            ],
            [
                "PIT",
                4
            ],
            [
                "HOU",
                1
            ],
            [
                "PHL",
                3
            ],
            [
                "DAL",
                1
            ],
            [
                "DET",
                1
            ],
            [
                "LON",
                1
            ],
            [
                "NYC",
                3
            ],
            [
                "LOS",
                1
            ],
            [
                "ROC",
                1
            ],
            [
                "PEK",
                1
            ],
            [
                "SFO",
                1
            ],
            [
                "ATL",
                1
            ],
            [
                "NAR",
                1
            ],
            [
                "BOS",
                1
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN student.city_code,count(*)",
        "question": "How many students live in each city?",
        "answers": [
            [
                "BAL",
                4
            ],
            [
                "HKG",
                3
            ],
            [
                "WAS",
                3
            ],
            [
                "CHI",
                1
            ],
            [
                "YYZ",
                2
            ],
            [
                "PIT",
                4
            ],
            [
                "HOU",
                1
            ],
            [
                "PHL",
                3
            ],
            [
                "DAL",
                1
            ],
            [
                "DET",
                1
            ],
            [
                "LON",
                1
            ],
            [
                "NYC",
                3
            ],
            [
                "LOS",
                1
            ],
            [
                "ROC",
                1
            ],
            [
                "PEK",
                1
            ],
            [
                "SFO",
                1
            ],
            [
                "ATL",
                1
            ],
            [
                "NAR",
                1
            ],
            [
                "BOS",
                1
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN student.Advisor,count(*)",
        "question": "Show all advisors and corresponding number of students.",
        "answers": [
            [
                1121,
                3
            ],
            [
                7712,
                1
            ],
            [
                7792,
                1
            ],
            [
                8423,
                1
            ],
            [
                1148,
                3
            ],
            [
                8918,
                1
            ],
            [
                9172,
                1
            ],
            [
                2192,
                4
            ],
            [
                7723,
                1
            ],
            [
                8741,
                1
            ],
            [
                8721,
                1
            ],
            [
                7271,
                2
            ],
            [
                8722,
                3
            ],
            [
                7134,
                2
            ],
            [
                8723,
                1
            ],
            [
                2311,
                3
            ],
            [
                8772,
                3
            ],
            [
                5718,
                2
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN student.Advisor,count(*)",
        "question": "How many students does each advisor have?",
        "answers": [
            [
                1121,
                3
            ],
            [
                7712,
                1
            ],
            [
                7792,
                1
            ],
            [
                8423,
                1
            ],
            [
                1148,
                3
            ],
            [
                8918,
                1
            ],
            [
                9172,
                1
            ],
            [
                2192,
                4
            ],
            [
                7723,
                1
            ],
            [
                8741,
                1
            ],
            [
                8721,
                1
            ],
            [
                7271,
                2
            ],
            [
                8722,
                3
            ],
            [
                7134,
                2
            ],
            [
                8723,
                1
            ],
            [
                2311,
                3
            ],
            [
                8772,
                3
            ],
            [
                5718,
                2
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (T2:`allergy_1.Allergy_Type`)-[T1:`allergy_1.Has_Allergy`]-()\nWHERE T2.AllergyType = 'food'\nRETURN count(*)",
        "question": "How many students have a food allergy?",
        "answers": [
            [
                28
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (T2:`allergy_1.Allergy_Type`)-[T1:`allergy_1.Has_Allergy`]-()\nWHERE T2.AllergyType = 'food'\nRETURN count(*)",
        "question": "How many students are affected by food related allergies?",
        "answers": [
            [
                28
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH ()-[has_allergy:`allergy_1.Has_Allergy`]-()\nRETURN has_allergy.Allergy\nORDER BY has_allergy.Allergy DESC\nLIMIT 1",
        "question": "Which allergy has most number of students affected?",
        "answers": [
            [
                "Tree Pollen"
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH ()-[has_allergy:`allergy_1.Has_Allergy`]-()\nRETURN has_allergy.Allergy\nORDER BY has_allergy.Allergy DESC\nLIMIT 1",
        "question": "Which allergy is the most common?",
        "answers": [
            [
                "Tree Pollen"
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (T1:`allergy_1.Student`)-[T2:`allergy_1.Has_Allergy`]-()\nWHERE T2.Allergy = 'Milk' OR T2.Allergy = 'Cat'\nRETURN DISTINCT T1.Fname,T1.city_code",
        "question": "Find the different first names and cities of the students who have allergy to milk or cat.",
        "answers": [
            [
                "Linda",
                "BAL"
            ],
            [
                "Lisa",
                "PIT"
            ],
            [
                "Derek",
                "HOU"
            ],
            [
                "Mark",
                "DET"
            ],
            [
                "David",
                "NYC"
            ]
        ]
    },
    {
        "db_id": "allergy_1",
        "query": "MATCH (T1:`allergy_1.Student`)-[T2:`allergy_1.Has_Allergy`]-()\nWHERE T2.Allergy = 'Milk' OR T2.Allergy = 'Cat'\nRETURN DISTINCT T1.Fname,T1.city_code",
        "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?",
        "answers": [
            [
                "Linda",
                "BAL"
            ],
            [
                "Lisa",
                "PIT"
            ],
            [
                "Derek",
                "HOU"
            ],
            [
                "Mark",
                "DET"
            ],
            [
                "David",
                "NYC"
            ]
        ]
    },
    {
        "db_id": "journal_committee",
        "query": "MATCH (editor:`journal_committee.editor`)\nRETURN count(*)",
        "question": "How many editors are there?",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "journal_committee",
        "query": "MATCH (editor:`journal_committee.editor`)\nRETURN editor.Name\nORDER BY editor.Age ASC",
        "question": "List the names of editors in ascending order of age.",
        "answers": [
            [
                "Szymon Wydra"
            ],
            [
                "Marek Siudym"
            ],
            [
                "W\u0142adys\u0142aw Grzywna"
            ],
            [
                "Mariusz Zalejski"
            ],
            [
                "Kamila Porczyk"
            ],
            [
                "Anna Powierza"
            ],
            [
                "Maria G\u00f3ralczyk"
            ],
            [
                "Piotr Pr\u0119gowski"
            ],
            [
                "Gra\u017cyna Wolszczak"
            ]
        ]
    },
    {
        "db_id": "journal_committee",
        "query": "MATCH (editor:`journal_committee.editor`)\nRETURN editor.Name,editor.Age",
        "question": "What are the names and ages of editors?",
        "answers": [
            [
                "Kamila Porczyk",
                34.0
            ],
            [
                "Anna Powierza",
                35.0
            ],
            [
                "Marek Siudym",
                21.0
            ],
            [
                "Piotr Pr\u0119gowski",
                43.0
            ],
            [
                "Szymon Wydra",
                20.0
            ],
            [
                "W\u0142adys\u0142aw Grzywna",
                24.0
            ],
            [
                "Mariusz Zalejski",
                25.0
            ],
            [
                "Gra\u017cyna Wolszczak",
                54.0
            ],
            [
                "Maria G\u00f3ralczyk",
                38.0
            ]
        ]
    },
    {
        "db_id": "journal_committee",
        "query": "MATCH (editor:`journal_committee.editor`)\nWHERE editor.Age > 25\nRETURN editor.Name",
        "question": "List the names of editors who are older than 25.",
        "answers": [
            [
                "Kamila Porczyk"
            ],
            [
                "Anna Powierza"
            ],
            [
                "Piotr Pr\u0119gowski"
            ],
            [
                "Gra\u017cyna Wolszczak"
            ],
            [
                "Maria G\u00f3ralczyk"
            ]
        ]
    },
    {
        "db_id": "journal_committee",
        "query": "MATCH (editor:`journal_committee.editor`)\nWHERE editor.Age = 24 OR editor.Age = 25\nRETURN editor.Name",
        "question": "Show the names of editors of age either 24 or 25.",
        "answers": [
            [
                "W\u0142adys\u0142aw Grzywna"
            ],
            [
                "Mariusz Zalejski"
            ]
        ]
    },
    {
        "db_id": "journal_committee",
        "query": "MATCH (editor:`journal_committee.editor`)\nRETURN editor.Name\nORDER BY editor.Age ASC\nLIMIT 1",
        "question": "What is the name of the youngest editor?",
        "answers": [
            [
                "Szymon Wydra"
            ]
        ]
    },
    {
        "db_id": "journal_committee",
        "query": "MATCH (editor:`journal_committee.editor`)\nRETURN editor.Age,count(*)",
        "question": "What are the different ages of editors? Show each age along with the number of editors of that age.",
        "answers": [
            [
                34.0,
                1
            ],
            [
                35.0,
                1
            ],
            [
                21.0,
                1
            ],
            [
                43.0,
                1
            ],
            [
                20.0,
                1
            ],
            [
                24.0,
                1
            ],
            [
                25.0,
                1
            ],
            [
                54.0,
                1
            ],
            [
                38.0,
                1
            ]
        ]
    },
    {
        "db_id": "journal_committee",
        "query": "MATCH (editor:`journal_committee.editor`)\nRETURN editor.Age\nORDER BY editor.Age DESC\nLIMIT 1",
        "question": "Please show the most common age of editors.",
        "answers": [
            [
                54.0
            ]
        ]
    },
    {
        "db_id": "journal_committee",
        "query": "MATCH (journal:`journal_committee.journal`)\nRETURN DISTINCT journal.Theme",
        "question": "Show the distinct themes of journals.",
        "answers": [
            [
                "Miami Dolphins"
            ],
            [
                "at Jacksonville Jaguars"
            ],
            [
                "at Baltimore Ravens"
            ],
            [
                "Tampa Bay Buccaneers"
            ],
            [
                "at Detroit Lions"
            ],
            [
                "at Pittsburgh Steelers"
            ],
            [
                "Jacksonville Jaguars"
            ],
            [
                "Baltimore Ravens"
            ],
            [
                "at Cincinnati Bengals"
            ],
            [
                "Pittsburgh Steelers"
            ],
            [
                "at Cleveland Browns"
            ],
            [
                "at Minnesota Vikings"
            ],
            [
                "Green Bay Packers"
            ],
            [
                "at Oakland Raiders"
            ],
            [
                "Cleveland Browns"
            ],
            [
                "Cincinnati Bengals"
            ]
        ]
    },
    {
        "db_id": "journal_committee",
        "query": "MATCH (T2:`journal_committee.editor`)-[T1:`journal_committee.journal_committee`]-(T3:`journal_committee.journal`)\nRETURN T2.Name,T3.Theme",
        "question": "Show the names of editors and the theme of journals for which they serve on committees.",
        "answers": [
            [
                "Kamila Porczyk",
                "at Minnesota Vikings"
            ],
            [
                "Marek Siudym",
                "at Detroit Lions"
            ],
            [
                "Piotr Pr\u0119gowski",
                "at Jacksonville Jaguars"
            ],
            [
                "W\u0142adys\u0142aw Grzywna",
                "Pittsburgh Steelers"
            ],
            [
                "Gra\u017cyna Wolszczak",
                "Cincinnati Bengals"
            ],
            [
                "Gra\u017cyna Wolszczak",
                "at Baltimore Ravens"
            ],
            [
                "Maria G\u00f3ralczyk",
                "at Cleveland Browns"
            ]
        ]
    },
    {
        "db_id": "journal_committee",
        "query": "MATCH (T2:`journal_committee.editor`)-[T1:`journal_committee.journal_committee`]-(T3:`journal_committee.journal`)\nRETURN T2.Name,T3.Theme",
        "question": "For each journal_committee, find the editor name and the journal theme.",
        "answers": [
            [
                "Kamila Porczyk",
                "at Minnesota Vikings"
            ],
            [
                "Marek Siudym",
                "at Detroit Lions"
            ],
            [
                "Piotr Pr\u0119gowski",
                "at Jacksonville Jaguars"
            ],
            [
                "W\u0142adys\u0142aw Grzywna",
                "Pittsburgh Steelers"
            ],
            [
                "Gra\u017cyna Wolszczak",
                "Cincinnati Bengals"
            ],
            [
                "Gra\u017cyna Wolszczak",
                "at Baltimore Ravens"
            ],
            [
                "Maria G\u00f3ralczyk",
                "at Cleveland Browns"
            ]
        ]
    },
    {
        "db_id": "journal_committee",
        "query": "MATCH (T2:`journal_committee.editor`)-[T1:`journal_committee.journal_committee`]-(T3:`journal_committee.journal`)\nRETURN T2.Name,T2.Age,T3.Theme\nORDER BY T3.Theme ASC",
        "question": "Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.",
        "answers": [
            [
                "Gra\u017cyna Wolszczak",
                54.0,
                "Cincinnati Bengals"
            ],
            [
                "W\u0142adys\u0142aw Grzywna",
                24.0,
                "Pittsburgh Steelers"
            ],
            [
                "Gra\u017cyna Wolszczak",
                54.0,
                "at Baltimore Ravens"
            ],
            [
                "Maria G\u00f3ralczyk",
                38.0,
                "at Cleveland Browns"
            ],
            [
                "Marek Siudym",
                21.0,
                "at Detroit Lions"
            ],
            [
                "Piotr Pr\u0119gowski",
                43.0,
                "at Jacksonville Jaguars"
            ],
            [
                "Kamila Porczyk",
                34.0,
                "at Minnesota Vikings"
            ]
        ]
    },
    {
        "db_id": "journal_committee",
        "query": "MATCH (T2:`journal_committee.editor`)-[T1:`journal_committee.journal_committee`]-(T3:`journal_committee.journal`)\nWHERE T3.Sales > 3000\nRETURN T2.Name",
        "question": "Show the names of editors that are on the committee of journals with sales bigger than 3000.",
        "answers": [
            [
                "Kamila Porczyk"
            ],
            [
                "W\u0142adys\u0142aw Grzywna"
            ],
            [
                "Gra\u017cyna Wolszczak"
            ],
            [
                "Gra\u017cyna Wolszczak"
            ],
            [
                "Maria G\u00f3ralczyk"
            ]
        ]
    },
    {
        "db_id": "journal_committee",
        "query": "MATCH (T1:`journal_committee.editor`)-[T2:`journal_committee.journal_committee`]-()\nRETURN T1.Editor_ID,T1.Name,count(*)",
        "question": "Show the id, name of each editor and the number of journal committees they are on.",
        "answers": [
            [
                1,
                "Kamila Porczyk",
                1
            ],
            [
                3,
                "Marek Siudym",
                1
            ],
            [
                4,
                "Piotr Pr\u0119gowski",
                1
            ],
            [
                6,
                "W\u0142adys\u0142aw Grzywna",
                1
            ],
            [
                8,
                "Gra\u017cyna Wolszczak",
                2
            ],
            [
                9,
                "Maria G\u00f3ralczyk",
                1
            ]
        ]
    },
    {
        "db_id": "journal_committee",
        "query": "MATCH (T1:`journal_committee.editor`)-[T2:`journal_committee.journal_committee`]-()\nWITH T1.Name AS Name, count(*) AS count\nWHERE count  >= 2\nRETURN Name",
        "question": "Show the names of editors that are on at least two journal committees.",
        "answers": [
            [
                "Gra\u017cyna Wolszczak"
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (accounts:`customers_card_transactions.Accounts`)\nRETURN count(*)",
        "question": "How many accounts do we have?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (accounts:`customers_card_transactions.Accounts`)\nRETURN count(*)",
        "question": "Count the number of accounts.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (accounts:`customers_card_transactions.Accounts`)\nRETURN accounts.account_id,accounts.customer_id,accounts.account_name",
        "question": "Show ids, customer ids, names for all accounts.",
        "answers": [
            [
                1,
                6,
                "338"
            ],
            [
                2,
                14,
                "562"
            ],
            [
                3,
                9,
                "162"
            ],
            [
                4,
                12,
                "038"
            ],
            [
                5,
                13,
                "858"
            ],
            [
                6,
                12,
                "262"
            ],
            [
                7,
                9,
                "621"
            ],
            [
                8,
                8,
                "381"
            ],
            [
                9,
                9,
                "546"
            ],
            [
                10,
                4,
                "767"
            ],
            [
                11,
                4,
                "022"
            ],
            [
                12,
                2,
                "866"
            ],
            [
                13,
                10,
                "234"
            ],
            [
                14,
                9,
                "557"
            ],
            [
                15,
                4,
                "725"
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (accounts:`customers_card_transactions.Accounts`)\nRETURN accounts.account_id,accounts.customer_id,accounts.account_name",
        "question": "What are the account ids, customer ids, and account names for all the accounts?",
        "answers": [
            [
                1,
                6,
                "338"
            ],
            [
                2,
                14,
                "562"
            ],
            [
                3,
                9,
                "162"
            ],
            [
                4,
                12,
                "038"
            ],
            [
                5,
                13,
                "858"
            ],
            [
                6,
                12,
                "262"
            ],
            [
                7,
                9,
                "621"
            ],
            [
                8,
                8,
                "381"
            ],
            [
                9,
                9,
                "546"
            ],
            [
                10,
                4,
                "767"
            ],
            [
                11,
                4,
                "022"
            ],
            [
                12,
                2,
                "866"
            ],
            [
                13,
                10,
                "234"
            ],
            [
                14,
                9,
                "557"
            ],
            [
                15,
                4,
                "725"
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (accounts:`customers_card_transactions.Accounts`)\nRETURN accounts.customer_id,count(*)",
        "question": "Show all customer ids and the number of accounts for each customer.",
        "answers": [
            [
                6,
                1
            ],
            [
                14,
                1
            ],
            [
                9,
                4
            ],
            [
                12,
                2
            ],
            [
                13,
                1
            ],
            [
                8,
                1
            ],
            [
                4,
                3
            ],
            [
                2,
                1
            ],
            [
                10,
                1
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (accounts:`customers_card_transactions.Accounts`)\nRETURN accounts.customer_id,count(*)",
        "question": "How many accounts are there for each customer id?",
        "answers": [
            [
                6,
                1
            ],
            [
                14,
                1
            ],
            [
                9,
                4
            ],
            [
                12,
                2
            ],
            [
                13,
                1
            ],
            [
                8,
                1
            ],
            [
                4,
                3
            ],
            [
                2,
                1
            ],
            [
                10,
                1
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (accounts:`customers_card_transactions.Accounts`)\nRETURN count(DISTINCT accounts.customer_id)",
        "question": "How many customers have an account?",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (accounts:`customers_card_transactions.Accounts`)\nRETURN count(DISTINCT accounts.customer_id)",
        "question": "Count the number of customers who hold an account.",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (customers:`customers_card_transactions.Customers`)\nRETURN count(*)",
        "question": "How many customers do we have?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (customers:`customers_card_transactions.Customers`)\nRETURN count(*)",
        "question": "Count the number of customers.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (customers:`customers_card_transactions.Customers`)\nRETURN customers.customer_id,customers.customer_first_name,customers.customer_last_name,customers.customer_phone",
        "question": "Show ids, first names, last names, and phones for all customers.",
        "answers": [
            [
                1,
                "Aniyah",
                "Feest",
                "(673)872-5338"
            ],
            [
                2,
                "Susie",
                "Wiza",
                "679-845-8645x94312"
            ],
            [
                3,
                "Marcel",
                "Brekke",
                "1-511-656-6664"
            ],
            [
                4,
                "Art",
                "Turcotte",
                "941-213-6716x675"
            ],
            [
                5,
                "Armani",
                "Farrell",
                "224-123-1012"
            ],
            [
                6,
                "Kiel",
                "Schinner",
                "1-564-044-3909"
            ],
            [
                7,
                "Izabella",
                "Erdman",
                "751.049.9948"
            ],
            [
                8,
                "Elyssa",
                "Lind",
                "+12(6)9024410984"
            ],
            [
                9,
                "Faustino",
                "Langworth",
                "284.749.0453"
            ],
            [
                10,
                "Axel",
                "Effertz",
                "+90(8)1290735932"
            ],
            [
                11,
                "Frederic",
                "Swift",
                "1-207-977-5182"
            ],
            [
                12,
                "Bryce",
                "Rath",
                "(415)237-0701x3115"
            ],
            [
                13,
                "Serenity",
                "Effertz",
                "1-894-567-2283"
            ],
            [
                14,
                "Blanche",
                "Huels",
                "(703)950-4708x8972"
            ],
            [
                15,
                "Nat",
                "Davis",
                "246-469-4472x359"
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (customers:`customers_card_transactions.Customers`)\nRETURN customers.customer_id,customers.customer_first_name,customers.customer_last_name,customers.customer_phone",
        "question": "What are the ids, full names, and phones of each customer?",
        "answers": [
            [
                1,
                "Aniyah",
                "Feest",
                "(673)872-5338"
            ],
            [
                2,
                "Susie",
                "Wiza",
                "679-845-8645x94312"
            ],
            [
                3,
                "Marcel",
                "Brekke",
                "1-511-656-6664"
            ],
            [
                4,
                "Art",
                "Turcotte",
                "941-213-6716x675"
            ],
            [
                5,
                "Armani",
                "Farrell",
                "224-123-1012"
            ],
            [
                6,
                "Kiel",
                "Schinner",
                "1-564-044-3909"
            ],
            [
                7,
                "Izabella",
                "Erdman",
                "751.049.9948"
            ],
            [
                8,
                "Elyssa",
                "Lind",
                "+12(6)9024410984"
            ],
            [
                9,
                "Faustino",
                "Langworth",
                "284.749.0453"
            ],
            [
                10,
                "Axel",
                "Effertz",
                "+90(8)1290735932"
            ],
            [
                11,
                "Frederic",
                "Swift",
                "1-207-977-5182"
            ],
            [
                12,
                "Bryce",
                "Rath",
                "(415)237-0701x3115"
            ],
            [
                13,
                "Serenity",
                "Effertz",
                "1-894-567-2283"
            ],
            [
                14,
                "Blanche",
                "Huels",
                "(703)950-4708x8972"
            ],
            [
                15,
                "Nat",
                "Davis",
                "246-469-4472x359"
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (customers:`customers_card_transactions.Customers`)\nWHERE customers.customer_first_name = 'Aniyah' AND customers.customer_last_name = 'Feest'\nRETURN customers.customer_phone,customers.customer_email",
        "question": "What is the phone and email for customer with first name Aniyah and last name Feest?",
        "answers": [
            [
                "(673)872-5338",
                "fahey.dorian@example.com"
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (customers:`customers_card_transactions.Customers`)\nWHERE customers.customer_first_name = 'Aniyah' AND customers.customer_last_name = 'Feest'\nRETURN customers.customer_phone,customers.customer_email",
        "question": "Return the phone and email of the customer with the first name Aniyah and last name Feest.",
        "answers": [
            [
                "(673)872-5338",
                "fahey.dorian@example.com"
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nRETURN count(*)",
        "question": "Show the number of customer cards.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nRETURN count(*)",
        "question": "How many customer cards are there?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nRETURN customers_cards.card_id,customers_cards.customer_id,customers_cards.card_type_code,customers_cards.card_number",
        "question": "Show ids, customer ids, card type codes, card numbers for all cards.",
        "answers": [
            [
                1,
                14,
                "Credit",
                "4560596484842"
            ],
            [
                2,
                9,
                "Credit",
                "4859448397570735"
            ],
            [
                3,
                6,
                "Debit",
                "348237249146948"
            ],
            [
                4,
                15,
                "Credit",
                "4485460762694"
            ],
            [
                5,
                13,
                "Credit",
                "5122249720639438"
            ],
            [
                6,
                10,
                "Debit",
                "5102229294602335"
            ],
            [
                7,
                9,
                "Credit",
                "4716674779726"
            ],
            [
                8,
                12,
                "Credit",
                "6011225247353230"
            ],
            [
                9,
                3,
                "Debit",
                "4929590358481"
            ],
            [
                10,
                10,
                "Debit",
                "4532488235104"
            ],
            [
                11,
                8,
                "Debit",
                "4707949584519"
            ],
            [
                12,
                3,
                "Debit",
                "4929896676202959"
            ],
            [
                13,
                2,
                "Credit",
                "5484846021884483"
            ],
            [
                14,
                5,
                "Debit",
                "4929384762825"
            ],
            [
                15,
                2,
                "Debit",
                "345475370003028"
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nRETURN customers_cards.card_id,customers_cards.customer_id,customers_cards.card_type_code,customers_cards.card_number",
        "question": "What are card ids, customer ids, card types, and card numbers for each customer card?",
        "answers": [
            [
                1,
                14,
                "Credit",
                "4560596484842"
            ],
            [
                2,
                9,
                "Credit",
                "4859448397570735"
            ],
            [
                3,
                6,
                "Debit",
                "348237249146948"
            ],
            [
                4,
                15,
                "Credit",
                "4485460762694"
            ],
            [
                5,
                13,
                "Credit",
                "5122249720639438"
            ],
            [
                6,
                10,
                "Debit",
                "5102229294602335"
            ],
            [
                7,
                9,
                "Credit",
                "4716674779726"
            ],
            [
                8,
                12,
                "Credit",
                "6011225247353230"
            ],
            [
                9,
                3,
                "Debit",
                "4929590358481"
            ],
            [
                10,
                10,
                "Debit",
                "4532488235104"
            ],
            [
                11,
                8,
                "Debit",
                "4707949584519"
            ],
            [
                12,
                3,
                "Debit",
                "4929896676202959"
            ],
            [
                13,
                2,
                "Credit",
                "5484846021884483"
            ],
            [
                14,
                5,
                "Debit",
                "4929384762825"
            ],
            [
                15,
                2,
                "Debit",
                "345475370003028"
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (T1:`customers_card_transactions.Customers_Cards`)-[]-(T2:`customers_card_transactions.Customers`)\nWHERE T2.customer_first_name = 'Art' AND T2.customer_last_name = 'Turcotte'\nRETURN count(*)",
        "question": "How many cards does customer Art Turcotte have?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (T1:`customers_card_transactions.Customers_Cards`)-[]-(T2:`customers_card_transactions.Customers`)\nWHERE T2.customer_first_name = 'Art' AND T2.customer_last_name = 'Turcotte'\nRETURN count(*)",
        "question": "Count the number of cards the customer with the first name Art and last name Turcotte has.",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nRETURN customers_cards.customer_id,count(*)",
        "question": "Show all customer ids and the number of cards owned by each customer.",
        "answers": [
            [
                14,
                1
            ],
            [
                9,
                2
            ],
            [
                6,
                1
            ],
            [
                15,
                1
            ],
            [
                13,
                1
            ],
            [
                10,
                2
            ],
            [
                12,
                1
            ],
            [
                3,
                2
            ],
            [
                8,
                1
            ],
            [
                2,
                2
            ],
            [
                5,
                1
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nRETURN customers_cards.customer_id,count(*)",
        "question": "What are the different customer ids, and how many cards does each one hold?",
        "answers": [
            [
                14,
                1
            ],
            [
                9,
                2
            ],
            [
                6,
                1
            ],
            [
                15,
                1
            ],
            [
                13,
                1
            ],
            [
                10,
                2
            ],
            [
                12,
                1
            ],
            [
                3,
                2
            ],
            [
                8,
                1
            ],
            [
                2,
                2
            ],
            [
                5,
                1
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nRETURN customers_cards.card_type_code,count(*)",
        "question": "Show all card type codes and the number of cards in each type.",
        "answers": [
            [
                "Credit",
                7
            ],
            [
                "Debit",
                8
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nRETURN customers_cards.card_type_code,count(*)",
        "question": "What are the different card types, and how many cards are there of each?",
        "answers": [
            [
                "Credit",
                7
            ],
            [
                "Debit",
                8
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nRETURN customers_cards.card_type_code\nORDER BY customers_cards.card_type_code DESC\nLIMIT 1",
        "question": "What is the card type code with most number of cards?",
        "answers": [
            [
                "Debit"
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nRETURN customers_cards.card_type_code\nORDER BY customers_cards.card_type_code DESC\nLIMIT 1",
        "question": "Return the code of the card type that is most common.",
        "answers": [
            [
                "Debit"
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nWITH count(*) AS count, customers_cards.card_type_code AS card_type_code\nWHERE count  >= 5\nRETURN card_type_code",
        "question": "Show card type codes with at least 5 cards.",
        "answers": [
            [
                "Credit"
            ],
            [
                "Debit"
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nWITH count(*) AS count, customers_cards.card_type_code AS card_type_code\nWHERE count  >= 5\nRETURN card_type_code",
        "question": "What are the codes of card types that have 5 or more cards?",
        "answers": [
            [
                "Credit"
            ],
            [
                "Debit"
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nRETURN customers_cards.card_type_code,count(DISTINCT customers_cards.customer_id)",
        "question": "Show all card type codes and the number of customers holding cards in each type.",
        "answers": [
            [
                "Credit",
                6
            ],
            [
                "Debit",
                6
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nRETURN customers_cards.card_type_code,count(DISTINCT customers_cards.customer_id)",
        "question": "What are the different card type codes, and how many different customers hold each type?",
        "answers": [
            [
                "Credit",
                6
            ],
            [
                "Debit",
                6
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nRETURN DISTINCT customers_cards.card_type_code",
        "question": "Show all card type codes.",
        "answers": [
            [
                "Credit"
            ],
            [
                "Debit"
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nRETURN DISTINCT customers_cards.card_type_code",
        "question": "What are the different card type codes?",
        "answers": [
            [
                "Credit"
            ],
            [
                "Debit"
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nRETURN count(DISTINCT customers_cards.card_type_code)",
        "question": "Show the number of card types.",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nRETURN count(DISTINCT customers_cards.card_type_code)",
        "question": "How many different card types are there?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH ()-[financial_transactions:`customers_card_transactions.Financial_Transactions`]-()\nRETURN DISTINCT financial_transactions.transaction_type",
        "question": "Show all transaction types.",
        "answers": [
            [
                "Payment"
            ],
            [
                "Refund"
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH ()-[financial_transactions:`customers_card_transactions.Financial_Transactions`]-()\nRETURN DISTINCT financial_transactions.transaction_type",
        "question": "What are the different types of transactions?",
        "answers": [
            [
                "Payment"
            ],
            [
                "Refund"
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH ()-[financial_transactions:`customers_card_transactions.Financial_Transactions`]-()\nRETURN count(DISTINCT financial_transactions.transaction_type)",
        "question": "Show the number of transaction types.",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH ()-[financial_transactions:`customers_card_transactions.Financial_Transactions`]-()\nRETURN count(DISTINCT financial_transactions.transaction_type)",
        "question": "How many different types of transactions are there?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (T2:`customers_card_transactions.Customers_Cards`)-[T1:`customers_card_transactions.Financial_Transactions`]-()\nRETURN T2.card_type_code,count(*)",
        "question": "Show the card type codes and the number of transactions.",
        "answers": [
            [
                "Credit",
                7
            ],
            [
                "Debit",
                8
            ]
        ]
    },
    {
        "db_id": "customers_card_transactions",
        "query": "MATCH (T2:`customers_card_transactions.Customers_Cards`)-[T1:`customers_card_transactions.Financial_Transactions`]-()\nRETURN T2.card_type_code,count(*)",
        "question": "What are the different card types, and how many transactions have been made with each?",
        "answers": [
            [
                "Credit",
                7
            ],
            [
                "Debit",
                8
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (track:`race_track.track`)\nRETURN count(*)",
        "question": "How many tracks do we have?",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (track:`race_track.track`)\nRETURN count(*)",
        "question": "Count the number of tracks.",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (track:`race_track.track`)\nRETURN track.Name,track.Location",
        "question": "Show the name and location for all tracks.",
        "answers": [
            [
                "Auto Club Speedway",
                "Fontana, CA"
            ],
            [
                "Chicagoland Speedway",
                "Joliet, IL"
            ],
            [
                "Darlington Raceway",
                "Darlington, SC"
            ],
            [
                "Daytona International Speedway",
                "Daytona Beach, FL"
            ],
            [
                "Homestead-Miami Speedway",
                "Homestead, FL"
            ],
            [
                "Kansas Speedway",
                "Kansas City, KS"
            ],
            [
                "Martinsville Speedway",
                "Ridgeway, VA"
            ],
            [
                "Michigan International Speedway",
                "Brooklyn, MI"
            ],
            [
                "Phoenix International Raceway",
                "Avondale, AZ"
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (track:`race_track.track`)\nRETURN track.Name,track.Location",
        "question": "What are the names and locations of all tracks?",
        "answers": [
            [
                "Auto Club Speedway",
                "Fontana, CA"
            ],
            [
                "Chicagoland Speedway",
                "Joliet, IL"
            ],
            [
                "Darlington Raceway",
                "Darlington, SC"
            ],
            [
                "Daytona International Speedway",
                "Daytona Beach, FL"
            ],
            [
                "Homestead-Miami Speedway",
                "Homestead, FL"
            ],
            [
                "Kansas Speedway",
                "Kansas City, KS"
            ],
            [
                "Martinsville Speedway",
                "Ridgeway, VA"
            ],
            [
                "Michigan International Speedway",
                "Brooklyn, MI"
            ],
            [
                "Phoenix International Raceway",
                "Avondale, AZ"
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (track:`race_track.track`)\nWHERE track.Year_Opened > 2000\nRETURN track.Name,track.Seating\nORDER BY track.Seating",
        "question": "Show names and seatings, ordered by seating for all tracks opened after 2000.",
        "answers": [
            [
                "Chicagoland Speedway",
                75000.0
            ],
            [
                "Kansas Speedway",
                81687.0
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (track:`race_track.track`)\nWHERE track.Year_Opened > 2000\nRETURN track.Name,track.Seating\nORDER BY track.Seating",
        "question": "What are the names and seatings for all tracks opened after 2000, ordered by seating?",
        "answers": [
            [
                "Chicagoland Speedway",
                75000.0
            ],
            [
                "Kansas Speedway",
                81687.0
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (track:`race_track.track`)\nRETURN track.Name,track.Location,track.Seating\nORDER BY track.Year_Opened DESC\nLIMIT 1",
        "question": "What is the name, location and seating for the most recently opened track?",
        "answers": [
            [
                "Chicagoland Speedway",
                "Joliet, IL",
                75000.0
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (track:`race_track.track`)\nRETURN track.Name,track.Location,track.Seating\nORDER BY track.Year_Opened DESC\nLIMIT 1",
        "question": "Return the name, location, and seating of the track that was opened in the most recent year.",
        "answers": [
            [
                "Chicagoland Speedway",
                "Joliet, IL",
                75000.0
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (track:`race_track.track`)\nRETURN min(track.Seating),max(track.Seating),avg(track.Seating)",
        "question": "What is the minimum, maximum, and average seating for all tracks.",
        "answers": [
            [
                63000.0,
                168000.0,
                91526.88888888889
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (track:`race_track.track`)\nRETURN min(track.Seating),max(track.Seating),avg(track.Seating)",
        "question": "Return the minimum, maximum, and average seating across all tracks.",
        "answers": [
            [
                63000.0,
                168000.0,
                91526.88888888889
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (track:`race_track.track`)\nWITH avg(track.Seating) AS seating\nMATCH (track:`race_track.track`)\nWHERE  track.Seating >  seating \nRETURN track.Name,track.Location,track.Year_Opened",
        "question": "Show the name, location, open year for all tracks with a seating higher than the average.",
        "answers": [
            [
                "Auto Club Speedway",
                "Fontana, CA",
                1997.0
            ],
            [
                "Daytona International Speedway",
                "Daytona Beach, FL",
                1959.0
            ],
            [
                "Michigan International Speedway",
                "Brooklyn, MI",
                1968.0
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (track:`race_track.track`)\nWITH avg(track.Seating) AS seating\nMATCH (track:`race_track.track`)\nWHERE  track.Seating >  seating \nRETURN track.Name,track.Location,track.Year_Opened",
        "question": "What are the names, locations, and years of opening for tracks with seating higher than average?",
        "answers": [
            [
                "Auto Club Speedway",
                "Fontana, CA",
                1997.0
            ],
            [
                "Daytona International Speedway",
                "Daytona Beach, FL",
                1959.0
            ],
            [
                "Michigan International Speedway",
                "Brooklyn, MI",
                1968.0
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (track:`race_track.track`)\nRETURN DISTINCT track.Location",
        "question": "What are distinct locations where tracks are located?",
        "answers": [
            [
                "Fontana, CA"
            ],
            [
                "Joliet, IL"
            ],
            [
                "Darlington, SC"
            ],
            [
                "Daytona Beach, FL"
            ],
            [
                "Homestead, FL"
            ],
            [
                "Kansas City, KS"
            ],
            [
                "Ridgeway, VA"
            ],
            [
                "Brooklyn, MI"
            ],
            [
                "Avondale, AZ"
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (track:`race_track.track`)\nRETURN DISTINCT track.Location",
        "question": "Give the different locations of tracks.",
        "answers": [
            [
                "Fontana, CA"
            ],
            [
                "Joliet, IL"
            ],
            [
                "Darlington, SC"
            ],
            [
                "Daytona Beach, FL"
            ],
            [
                "Homestead, FL"
            ],
            [
                "Kansas City, KS"
            ],
            [
                "Ridgeway, VA"
            ],
            [
                "Brooklyn, MI"
            ],
            [
                "Avondale, AZ"
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (race:`race_track.race`)\nRETURN count(*)",
        "question": "How many races are there?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (race:`race_track.race`)\nRETURN count(*)",
        "question": "Count the number of races.",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (race:`race_track.race`)\nRETURN DISTINCT race.Class",
        "question": "What are the distinct classes that races can have?",
        "answers": [
            [
                "DP/GT"
            ],
            [
                "GT"
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (race:`race_track.race`)\nRETURN DISTINCT race.Class",
        "question": "Return the different classes of races.",
        "answers": [
            [
                "DP/GT"
            ],
            [
                "GT"
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (race:`race_track.race`)\nRETURN race.Name,race.Class,race.Date",
        "question": "Show name, class, and date for all races.",
        "answers": [
            [
                "Rolex 24 At Daytona",
                "DP/GT",
                "January 26 January 27"
            ],
            [
                "Gainsco Grand Prix of Miami",
                "DP/GT",
                "March 29"
            ],
            [
                "Mexico City 250",
                "DP/GT",
                "April 19"
            ],
            [
                "Bosch Engineering 250 at VIR",
                "GT",
                "April 27"
            ],
            [
                "RumBum.com 250",
                "DP/GT",
                "May 17"
            ],
            [
                "Lime Rock GT Classic 250",
                "GT",
                "May 26"
            ],
            [
                "Sahlen's Six Hours of the Glen",
                "DP/GT",
                "June 7"
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (race:`race_track.race`)\nRETURN race.Name,race.Class,race.Date",
        "question": "What are the names, classes, and dates for all races?",
        "answers": [
            [
                "Rolex 24 At Daytona",
                "DP/GT",
                "January 26 January 27"
            ],
            [
                "Gainsco Grand Prix of Miami",
                "DP/GT",
                "March 29"
            ],
            [
                "Mexico City 250",
                "DP/GT",
                "April 19"
            ],
            [
                "Bosch Engineering 250 at VIR",
                "GT",
                "April 27"
            ],
            [
                "RumBum.com 250",
                "DP/GT",
                "May 17"
            ],
            [
                "Lime Rock GT Classic 250",
                "GT",
                "May 26"
            ],
            [
                "Sahlen's Six Hours of the Glen",
                "DP/GT",
                "June 7"
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (race:`race_track.race`)\nRETURN race.Class,count(*)",
        "question": "Show the race class and number of races in each class.",
        "answers": [
            [
                "DP/GT",
                5
            ],
            [
                "GT",
                2
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (race:`race_track.race`)\nRETURN race.Class,count(*)",
        "question": "What are the different classes of races, and how many races correspond to each?",
        "answers": [
            [
                "DP/GT",
                5
            ],
            [
                "GT",
                2
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (race:`race_track.race`)\nWITH count(*) AS count, race.Class AS Class\nWHERE count  >= 2\nRETURN Class",
        "question": "List the race class with at least two races.",
        "answers": [
            [
                "DP/GT"
            ],
            [
                "GT"
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (race:`race_track.race`)\nWITH count(*) AS count, race.Class AS Class\nWHERE count  >= 2\nRETURN Class",
        "question": "What are the classes of races that have two or more corresponding races?",
        "answers": [
            [
                "DP/GT"
            ],
            [
                "GT"
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (track:`race_track.track`)\nWHERE NOT (track)-[]-(:`race_track.race`)    \nRETURN track.Name",
        "question": "Show all track names that have had no races.",
        "answers": [
            [
                "Darlington Raceway"
            ],
            [
                "Michigan International Speedway"
            ],
            [
                "Phoenix International Raceway"
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (track:`race_track.track`)\nWHERE NOT (track)-[]-(:`race_track.race`)    \nRETURN track.Name",
        "question": "Return the names of tracks that have no had any races.",
        "answers": [
            [
                "Darlington Raceway"
            ],
            [
                "Michigan International Speedway"
            ],
            [
                "Phoenix International Raceway"
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (track:`race_track.track`)\nWHERE 4000<=track.Seating<=5000\nRETURN track.Year_Opened",
        "question": "Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.",
        "answers": []
    },
    {
        "db_id": "race_track",
        "query": "MATCH (track:`race_track.track`)\nWHERE 4000<=track.Seating<=5000\nRETURN track.Year_Opened",
        "question": "What are the years of opening for tracks with seating between 4000 and 5000?",
        "answers": []
    },
    {
        "db_id": "race_track",
        "query": "MATCH (T1:`race_track.race`)-[]-(T2:`race_track.track`)\nRETURN T2.Name,count(*)",
        "question": "Show the name of track and the number of races in each track.",
        "answers": [
            [
                "Auto Club Speedway",
                1
            ],
            [
                "Chicagoland Speedway",
                2
            ],
            [
                "Daytona International Speedway",
                1
            ],
            [
                "Homestead-Miami Speedway",
                1
            ],
            [
                "Kansas Speedway",
                1
            ],
            [
                "Martinsville Speedway",
                1
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (T1:`race_track.race`)-[]-(T2:`race_track.track`)\nRETURN T2.Name,count(*)",
        "question": "What are the names of different tracks, and how many races has each had?",
        "answers": [
            [
                "Auto Club Speedway",
                1
            ],
            [
                "Chicagoland Speedway",
                2
            ],
            [
                "Daytona International Speedway",
                1
            ],
            [
                "Homestead-Miami Speedway",
                1
            ],
            [
                "Kansas Speedway",
                1
            ],
            [
                "Martinsville Speedway",
                1
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (T1:`race_track.race`)-[]-(T2:`race_track.track`)\nWITH T2, count(T1.Track_ID) AS cnt\nRETURN T2.Name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Show the name of track with most number of races.",
        "answers": [
            [
                "Chicagoland Speedway"
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (T1:`race_track.race`)-[]-(T2:`race_track.track`)\nWITH T2, count(T1.Track_ID) AS cnt\nRETURN T2.Name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the name of the track that has had the greatest number of races?",
        "answers": [
            [
                "Chicagoland Speedway"
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (T1:`race_track.race`)-[]-(T2:`race_track.track`)\nRETURN T1.Name,T1.Date,T2.Name",
        "question": "Show the name and date for each race and its track name.",
        "answers": [
            [
                "Rolex 24 At Daytona",
                "January 26 January 27",
                "Auto Club Speedway"
            ],
            [
                "Gainsco Grand Prix of Miami",
                "March 29",
                "Chicagoland Speedway"
            ],
            [
                "Mexico City 250",
                "April 19",
                "Chicagoland Speedway"
            ],
            [
                "Bosch Engineering 250 at VIR",
                "April 27",
                "Daytona International Speedway"
            ],
            [
                "RumBum.com 250",
                "May 17",
                "Homestead-Miami Speedway"
            ],
            [
                "Lime Rock GT Classic 250",
                "May 26",
                "Kansas Speedway"
            ],
            [
                "Sahlen's Six Hours of the Glen",
                "June 7",
                "Martinsville Speedway"
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (T1:`race_track.race`)-[]-(T2:`race_track.track`)\nRETURN T1.Name,T1.Date,T2.Name",
        "question": "What are the names and dates of races, and the names of the tracks where they are held?",
        "answers": [
            [
                "Rolex 24 At Daytona",
                "January 26 January 27",
                "Auto Club Speedway"
            ],
            [
                "Gainsco Grand Prix of Miami",
                "March 29",
                "Chicagoland Speedway"
            ],
            [
                "Mexico City 250",
                "April 19",
                "Chicagoland Speedway"
            ],
            [
                "Bosch Engineering 250 at VIR",
                "April 27",
                "Daytona International Speedway"
            ],
            [
                "RumBum.com 250",
                "May 17",
                "Homestead-Miami Speedway"
            ],
            [
                "Lime Rock GT Classic 250",
                "May 26",
                "Kansas Speedway"
            ],
            [
                "Sahlen's Six Hours of the Glen",
                "June 7",
                "Martinsville Speedway"
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (T1:`race_track.race`)-[]-(T2:`race_track.track`)\nWITH T2.Name AS Name, count(*) AS count, T2.Location AS Location\nWHERE count  = 1\nRETURN Name,Location",
        "question": "Show the name and location of track with 1 race.",
        "answers": [
            [
                "Auto Club Speedway",
                "Fontana, CA"
            ],
            [
                "Daytona International Speedway",
                "Daytona Beach, FL"
            ],
            [
                "Homestead-Miami Speedway",
                "Homestead, FL"
            ],
            [
                "Kansas Speedway",
                "Kansas City, KS"
            ],
            [
                "Martinsville Speedway",
                "Ridgeway, VA"
            ]
        ]
    },
    {
        "db_id": "race_track",
        "query": "MATCH (T1:`race_track.race`)-[]-(T2:`race_track.track`)\nWITH T2.Name AS Name, count(*) AS count, T2.Location AS Location\nWHERE count  = 1\nRETURN Name,Location",
        "question": "What are the names and locations of tracks that have had exactly 1 race?",
        "answers": [
            [
                "Auto Club Speedway",
                "Fontana, CA"
            ],
            [
                "Daytona International Speedway",
                "Daytona Beach, FL"
            ],
            [
                "Homestead-Miami Speedway",
                "Homestead, FL"
            ],
            [
                "Kansas Speedway",
                "Kansas City, KS"
            ],
            [
                "Martinsville Speedway",
                "Ridgeway, VA"
            ]
        ]
    },
    {
        "db_id": "coffee_shop",
        "query": "MATCH (member:`coffee_shop.member`)\nWHERE member.Membership_card = 'Black'\nRETURN count(*)",
        "question": "How many members have the black membership card?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "coffee_shop",
        "query": "MATCH (member:`coffee_shop.member`)\nRETURN count(*),member.Address",
        "question": "Find the number of members living in each address.",
        "answers": [
            [
                3,
                "Hartford"
            ],
            [
                4,
                "Waterbury"
            ],
            [
                2,
                "Cheshire"
            ],
            [
                1,
                "Bridgeport"
            ]
        ]
    },
    {
        "db_id": "coffee_shop",
        "query": "MATCH (member:`coffee_shop.member`)\nWHERE member.Address = 'Harford' OR member.Address = 'Waterbury'\nRETURN member.Name",
        "question": "Give me the names of members whose address is in Harford or Waterbury.",
        "answers": [
            [
                "Breton, Robert"
            ],
            [
                "Cobb, Sedrick"
            ],
            [
                "Reynolds, Richard"
            ],
            [
                "Rizzo, Todd"
            ]
        ]
    },
    {
        "db_id": "coffee_shop",
        "query": "MATCH (member:`coffee_shop.member`)\nWHERE member.Membership_card = 'Black' OR member.Age < 30\nRETURN member.Name,member.Member_ID",
        "question": "Find the ids and names of members who are under age 30 or with black membership card.",
        "answers": [
            [
                "Ashby, Lazale",
                1
            ],
            [
                "Campbell, Jessie",
                3
            ],
            [
                "Cobb, Sedrick",
                4
            ],
            [
                "Peeler, Russell",
                7
            ],
            [
                "Reynolds, Richard",
                8
            ],
            [
                "Webb, Daniel",
                10
            ]
        ]
    },
    {
        "db_id": "coffee_shop",
        "query": "MATCH (member:`coffee_shop.member`)\nRETURN member.Time_of_purchase,member.Age,member.Address\nORDER BY member.Time_of_purchase",
        "question": "Find the purchase time, age and address of each member, and show the results in the order of purchase time.",
        "answers": [
            [
                18,
                29,
                "Hartford"
            ],
            [
                18,
                35,
                "Waterbury"
            ],
            [
                20,
                34,
                "Hartford"
            ],
            [
                24,
                45,
                "Waterbury"
            ],
            [
                26,
                33,
                "Cheshire"
            ],
            [
                26,
                42,
                "Bridgeport"
            ],
            [
                27,
                51,
                "Waterbury"
            ],
            [
                27,
                51,
                "Hartford"
            ],
            [
                41,
                67,
                "Waterbury"
            ],
            [
                44,
                50,
                "Cheshire"
            ]
        ]
    },
    {
        "db_id": "coffee_shop",
        "query": "MATCH (member:`coffee_shop.member`)\nWITH count(*) AS count, member.Membership_card AS Membership_card\nWHERE count  > 5\nRETURN Membership_card",
        "question": "Which membership card has more than 5 members?",
        "answers": [
            [
                "Black"
            ]
        ]
    },
    {
        "db_id": "coffee_shop",
        "query": "MATCH (member:`coffee_shop.member`)\nWHERE member.Address <> 'Hartford'\nRETURN count(*)",
        "question": "How many members are not living in Hartford?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "coffee_shop",
        "query": "MATCH (shop:`coffee_shop.shop`)\nRETURN shop.Address\nORDER BY shop.Open_Year",
        "question": "Show the shop addresses ordered by their opening year.",
        "answers": [
            [
                "1100 Main Street"
            ],
            [
                "1111 Main Street"
            ],
            [
                "2345 McGee Street"
            ],
            [
                "324 E. 11th Street"
            ],
            [
                "1200 Main Street"
            ],
            [
                "1330 Baltimore Street"
            ],
            [
                "909 Walnut Street"
            ],
            [
                "1201 Walnut Street"
            ],
            [
                "414 E. 12th Street"
            ],
            [
                "909 Main Street"
            ]
        ]
    },
    {
        "db_id": "coffee_shop",
        "query": "MATCH (shop:`coffee_shop.shop`)\nWITH avg(shop.Score) AS score\nMATCH (shop:`coffee_shop.shop`)\nWHERE  shop.Score <  score \nRETURN shop.Shop_ID,shop.Address",
        "question": "Find the id and address of the shops whose score is below the average score.",
        "answers": [
            [
                4,
                "909 Walnut Street"
            ],
            [
                5,
                "414 E. 12th Street"
            ],
            [
                6,
                "1201 Walnut Street"
            ],
            [
                8,
                "909 Main Street"
            ],
            [
                9,
                "1100 Main Street"
            ],
            [
                10,
                "324 E. 11th Street"
            ]
        ]
    },
    {
        "db_id": "coffee_shop",
        "query": "MATCH (shop:`coffee_shop.shop`)\nWHERE NOT (shop)-[]-(:`coffee_shop.happy_hour`)    \nRETURN shop.Address,shop.Num_of_staff",
        "question": "Find the address and staff number of the shops that do not have any happy hour.",
        "answers": [
            [
                "909 Walnut Street",
                "27"
            ],
            [
                "1201 Walnut Street",
                "34"
            ],
            [
                "2345 McGee Street",
                "425"
            ],
            [
                "909 Main Street",
                "28"
            ],
            [
                "1100 Main Street",
                "23"
            ]
        ]
    },
    {
        "db_id": "coffee_shop",
        "query": "MATCH (t1:`coffee_shop.shop`)-[]-(t2:`coffee_shop.happy_hour`)\nWHERE t2.Month = 'May'\nRETURN t1.Address,t1.Shop_ID",
        "question": "What are the id and address of the shops which have a happy hour in May?",
        "answers": [
            [
                "1200 Main Street",
                1
            ],
            [
                "1200 Main Street",
                1
            ],
            [
                "1330 Baltimore Street",
                3
            ]
        ]
    },
    {
        "db_id": "coffee_shop",
        "query": "MATCH (happy_hour:`coffee_shop.happy_hour`)\nRETURN happy_hour.Month\nORDER BY happy_hour.Month DESC\nLIMIT 1",
        "question": "Which month has the most happy hours?",
        "answers": [
            [
                "May"
            ]
        ]
    },
    {
        "db_id": "coffee_shop",
        "query": "MATCH (happy_hour:`coffee_shop.happy_hour`)\nWITH count(*) AS count, happy_hour.Month AS Month\nWHERE count  > 2\nRETURN Month",
        "question": "Which months have more than 2 happy hours?",
        "answers": [
            [
                "May"
            ],
            [
                "April"
            ]
        ]
    },
    {
        "db_id": "insurance_fnol",
        "query": "MATCH (available_policies:`insurance_fnol.Available_Policies`)\nRETURN available_policies.Customer_Phone",
        "question": "Find all the phone numbers.",
        "answers": [
            [
                "+16(2)5838999222"
            ],
            [
                "242.763.9214"
            ],
            [
                "1-416-503-7735x94204"
            ],
            [
                "(777)537-7792"
            ],
            [
                "1-446-940-9907x257"
            ],
            [
                "(379)862-8274x12620"
            ],
            [
                "+85(6)1302858396"
            ],
            [
                "1-797-927-3585x9321"
            ],
            [
                "991.642.6485x822"
            ],
            [
                "813.178.8211x557"
            ],
            [
                "889-572-0609x552"
            ],
            [
                "1-138-841-3073"
            ],
            [
                "1-381-132-0127x3801"
            ],
            [
                "00481937923"
            ],
            [
                "405.090.8654x021"
            ]
        ]
    },
    {
        "db_id": "insurance_fnol",
        "query": "MATCH (available_policies:`insurance_fnol.Available_Policies`)\nRETURN available_policies.Customer_Phone",
        "question": "What are all the phone numbers?",
        "answers": [
            [
                "+16(2)5838999222"
            ],
            [
                "242.763.9214"
            ],
            [
                "1-416-503-7735x94204"
            ],
            [
                "(777)537-7792"
            ],
            [
                "1-446-940-9907x257"
            ],
            [
                "(379)862-8274x12620"
            ],
            [
                "+85(6)1302858396"
            ],
            [
                "1-797-927-3585x9321"
            ],
            [
                "991.642.6485x822"
            ],
            [
                "813.178.8211x557"
            ],
            [
                "889-572-0609x552"
            ],
            [
                "1-138-841-3073"
            ],
            [
                "1-381-132-0127x3801"
            ],
            [
                "00481937923"
            ],
            [
                "405.090.8654x021"
            ]
        ]
    },
    {
        "db_id": "insurance_fnol",
        "query": "MATCH (available_policies:`insurance_fnol.Available_Policies`)\nWHERE available_policies.policy_type_code = \"Life Insurance\"\nRETURN available_policies.Customer_Phone",
        "question": "What are the customer phone numbers under the policy \"Life Insurance\"?",
        "answers": [
            [
                "+16(2)5838999222"
            ],
            [
                "991.642.6485x822"
            ],
            [
                "889-572-0609x552"
            ],
            [
                "1-138-841-3073"
            ]
        ]
    },
    {
        "db_id": "insurance_fnol",
        "query": "MATCH (available_policies:`insurance_fnol.Available_Policies`)\nWHERE available_policies.policy_type_code = \"Life Insurance\"\nRETURN available_policies.Customer_Phone",
        "question": "What are the phone numbers of customers using the policy with the code \"Life Insurance\"?",
        "answers": [
            [
                "+16(2)5838999222"
            ],
            [
                "991.642.6485x822"
            ],
            [
                "889-572-0609x552"
            ],
            [
                "1-138-841-3073"
            ]
        ]
    },
    {
        "db_id": "insurance_fnol",
        "query": "MATCH (available_policies:`insurance_fnol.Available_Policies`)\nWITH count(*) AS count, available_policies.policy_type_code AS policy_type_code\nWHERE count  > 4\nRETURN policy_type_code",
        "question": "Find the policy type used by more than 4 customers.",
        "answers": [
            [
                "Property Insurance"
            ],
            [
                "Mortgage Insurance"
            ]
        ]
    },
    {
        "db_id": "insurance_fnol",
        "query": "MATCH (available_policies:`insurance_fnol.Available_Policies`)\nWITH count(*) AS count, available_policies.policy_type_code AS policy_type_code\nWHERE count  > 4\nRETURN policy_type_code",
        "question": "Find the policy types more than 4 customers use. Show their type code.",
        "answers": [
            [
                "Property Insurance"
            ],
            [
                "Mortgage Insurance"
            ]
        ]
    },
    {
        "db_id": "insurance_fnol",
        "query": "MATCH (t1:`insurance_fnol.First_Notification_of_Loss`)-[]-(t2:`insurance_fnol.Services`)\nWITH t2.Service_name AS Service_name, count(*) AS count\nWHERE count  > 2\nRETURN Service_name",
        "question": "Find the name of services that have been used for more than 2 times in first notification of loss.",
        "answers": [
            [
                "New policy application"
            ]
        ]
    },
    {
        "db_id": "insurance_fnol",
        "query": "MATCH (t1:`insurance_fnol.First_Notification_of_Loss`)-[]-(t2:`insurance_fnol.Services`)\nWITH t2.Service_name AS Service_name, count(*) AS count\nWHERE count  > 2\nRETURN Service_name",
        "question": "Which services have been used more than twice in first notification of loss? Return the service name.",
        "answers": [
            [
                "New policy application"
            ]
        ]
    },
    {
        "db_id": "insurance_fnol",
        "query": "MATCH (t1:`insurance_fnol.Customers`)-[t2:`insurance_fnol.Customers_Policies`]-()\nWHERE t1.Customer_name = \"Dayana Robel\"\nRETURN count(*)",
        "question": "How many policies are listed for the customer named \"Dayana Robel\"?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "insurance_fnol",
        "query": "MATCH (t1:`insurance_fnol.Customers`)-[t2:`insurance_fnol.Customers_Policies`]-()\nWHERE t1.Customer_name = \"Dayana Robel\"\nRETURN count(*)",
        "question": "Count the total number of policies used by the customer named \"Dayana Robel\".",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "insurance_fnol",
        "query": "MATCH (t1:`insurance_fnol.Customers`)-[t2:`insurance_fnol.Customers_Policies`]-()\nWITH t1, count(t1.Customer_name) AS cnt\nRETURN t1.Customer_name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the name of the customer who has the most policies listed?",
        "answers": [
            [
                "Jay Chou"
            ]
        ]
    },
    {
        "db_id": "insurance_fnol",
        "query": "MATCH (t1:`insurance_fnol.Customers`)-[t2:`insurance_fnol.Customers_Policies`]-()\nWITH t1, count(t1.Customer_name) AS cnt\nRETURN t1.Customer_name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Which customer uses the most policies? Give me the customer name.",
        "answers": [
            [
                "Jay Chou"
            ]
        ]
    },
    {
        "db_id": "insurance_fnol",
        "query": "MATCH (t1:`insurance_fnol.Customers`)-[t2:`insurance_fnol.Customers_Policies`]-(t3:`insurance_fnol.Available_Policies`)\nWHERE t1.Customer_name = \"Dayana Robel\"\nRETURN DISTINCT t3.policy_type_code",
        "question": "What are all the policy types of the customer named \"Dayana Robel\"?",
        "answers": [
            [
                "Mortgage Insurance"
            ]
        ]
    },
    {
        "db_id": "insurance_fnol",
        "query": "MATCH (t1:`insurance_fnol.Customers`)-[t2:`insurance_fnol.Customers_Policies`]-(t3:`insurance_fnol.Available_Policies`)\nWHERE t1.Customer_name = \"Dayana Robel\"\nRETURN DISTINCT t3.policy_type_code",
        "question": "Tell me the types of the policy used by the customer named \"Dayana Robel\".",
        "answers": [
            [
                "Mortgage Insurance"
            ]
        ]
    },
    {
        "db_id": "insurance_fnol",
        "query": "MATCH (services:`insurance_fnol.Services`)\nRETURN services.Service_name\nORDER BY services.Service_name",
        "question": "List all the services in the alphabetical order.",
        "answers": [
            [
                "Change a policy"
            ],
            [
                "Close a policy"
            ],
            [
                "New policy application"
            ],
            [
                "Upgrade a policy"
            ]
        ]
    },
    {
        "db_id": "insurance_fnol",
        "query": "MATCH (services:`insurance_fnol.Services`)\nRETURN services.Service_name\nORDER BY services.Service_name",
        "question": "Give me a list of all the service names sorted alphabetically.",
        "answers": [
            [
                "Change a policy"
            ],
            [
                "Close a policy"
            ],
            [
                "New policy application"
            ],
            [
                "Upgrade a policy"
            ]
        ]
    },
    {
        "db_id": "insurance_fnol",
        "query": "MATCH (services:`insurance_fnol.Services`)\nRETURN count(*)",
        "question": "How many services are there?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "insurance_fnol",
        "query": "MATCH (services:`insurance_fnol.Services`)\nRETURN count(*)",
        "question": "Count the total number of available services.",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "insurance_fnol",
        "query": "MATCH (settlements:`insurance_fnol.Settlements`)\nRETURN max(settlements.Settlement_Amount),min(settlements.Settlement_Amount)",
        "question": "What are the maximum and minimum settlement amount on record?",
        "answers": [
            [
                9814.39,
                1588.45
            ]
        ]
    },
    {
        "db_id": "insurance_fnol",
        "query": "MATCH (settlements:`insurance_fnol.Settlements`)\nRETURN max(settlements.Settlement_Amount),min(settlements.Settlement_Amount)",
        "question": "Find the maximum and minimum settlement amount.",
        "answers": [
            [
                9814.39,
                1588.45
            ]
        ]
    },
    {
        "db_id": "insurance_fnol",
        "query": "MATCH (customers:`insurance_fnol.Customers`)\nRETURN customers.Customer_ID,customers.Customer_name\nORDER BY customers.Customer_ID ASC",
        "question": "List all the customers in increasing order of IDs.",
        "answers": [
            [
                194,
                "America Jaskolski"
            ],
            [
                214,
                "Ellsworth Paucek"
            ],
            [
                256,
                "Mrs. Hanna Willms"
            ],
            [
                562,
                "Dr. Diana Rath"
            ],
            [
                582,
                "Selena Gerhold"
            ],
            [
                641,
                "Dayana Robel"
            ],
            [
                682,
                "Mr. Edwardo Blanda I"
            ],
            [
                756,
                "Mr. Randal Lynch III"
            ],
            [
                805,
                "Mrs. Liza Heller V"
            ],
            [
                826,
                "Mrs. Lilly Graham III"
            ],
            [
                882,
                "Miss Felicita Reichel"
            ],
            [
                892,
                "Sydnie Friesen"
            ],
            [
                923,
                "David Ross"
            ],
            [
                956,
                "Cai Zhang"
            ],
            [
                996,
                "Jay Chou"
            ]
        ]
    },
    {
        "db_id": "insurance_fnol",
        "query": "MATCH (customers:`insurance_fnol.Customers`)\nRETURN customers.Customer_ID,customers.Customer_name\nORDER BY customers.Customer_ID ASC",
        "question": "What is the ordered list of customer ids?",
        "answers": [
            [
                194,
                "America Jaskolski"
            ],
            [
                214,
                "Ellsworth Paucek"
            ],
            [
                256,
                "Mrs. Hanna Willms"
            ],
            [
                562,
                "Dr. Diana Rath"
            ],
            [
                582,
                "Selena Gerhold"
            ],
            [
                641,
                "Dayana Robel"
            ],
            [
                682,
                "Mr. Edwardo Blanda I"
            ],
            [
                756,
                "Mr. Randal Lynch III"
            ],
            [
                805,
                "Mrs. Liza Heller V"
            ],
            [
                826,
                "Mrs. Lilly Graham III"
            ],
            [
                882,
                "Miss Felicita Reichel"
            ],
            [
                892,
                "Sydnie Friesen"
            ],
            [
                923,
                "David Ross"
            ],
            [
                956,
                "Cai Zhang"
            ],
            [
                996,
                "Jay Chou"
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nRETURN count(*)",
        "question": "How many kinds of enzymes are there?",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nRETURN count(*)",
        "question": "What is the total count of enzymes?",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nRETURN enzyme.name\nORDER BY enzyme.name DESC",
        "question": "List the name of enzymes in descending lexicographical order.",
        "answers": [
            [
                "Uroporphyrinogen III synthase"
            ],
            [
                "Uroporphyrinogen III decarboxylase"
            ],
            [
                "Protoporphyrinogen oxidase"
            ],
            [
                "PBG deaminase"
            ],
            [
                "Ferrochelatase"
            ],
            [
                "Coproporphyrinogen III oxidase"
            ],
            [
                "ALA synthase"
            ],
            [
                "ALA dehydratase"
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nRETURN enzyme.name\nORDER BY enzyme.name DESC",
        "question": "What are the names of enzymes in descending order?",
        "answers": [
            [
                "Uroporphyrinogen III synthase"
            ],
            [
                "Uroporphyrinogen III decarboxylase"
            ],
            [
                "Protoporphyrinogen oxidase"
            ],
            [
                "PBG deaminase"
            ],
            [
                "Ferrochelatase"
            ],
            [
                "Coproporphyrinogen III oxidase"
            ],
            [
                "ALA synthase"
            ],
            [
                "ALA dehydratase"
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nRETURN enzyme.name,enzyme.Location",
        "question": "List the names and the locations that the enzymes can make an effect.",
        "answers": [
            [
                "ALA synthase",
                "Mitochondrion"
            ],
            [
                "ALA dehydratase",
                "Cytosol"
            ],
            [
                "PBG deaminase",
                "Cytosol"
            ],
            [
                "Uroporphyrinogen III synthase",
                "Cytosol"
            ],
            [
                "Uroporphyrinogen III decarboxylase",
                "Cytosol"
            ],
            [
                "Coproporphyrinogen III oxidase",
                "Mitochondrion"
            ],
            [
                "Protoporphyrinogen oxidase",
                "Mitochondrion"
            ],
            [
                "Ferrochelatase",
                "Mitochondrion"
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nRETURN enzyme.name,enzyme.Location",
        "question": "What are the names and locations of all enzymes listed?",
        "answers": [
            [
                "ALA synthase",
                "Mitochondrion"
            ],
            [
                "ALA dehydratase",
                "Cytosol"
            ],
            [
                "PBG deaminase",
                "Cytosol"
            ],
            [
                "Uroporphyrinogen III synthase",
                "Cytosol"
            ],
            [
                "Uroporphyrinogen III decarboxylase",
                "Cytosol"
            ],
            [
                "Coproporphyrinogen III oxidase",
                "Mitochondrion"
            ],
            [
                "Protoporphyrinogen oxidase",
                "Mitochondrion"
            ],
            [
                "Ferrochelatase",
                "Mitochondrion"
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nRETURN max(enzyme.OMIM)",
        "question": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?",
        "answers": [
            [
                606938
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nRETURN max(enzyme.OMIM)",
        "question": "What is the maximum OMIM value in the database?",
        "answers": [
            [
                606938
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nWHERE enzyme.Location = 'Cytosol'\nRETURN enzyme.Product,enzyme.Chromosome,enzyme.Porphyria",
        "question": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?",
        "answers": [
            [
                "Porphobilinogen",
                "9q34",
                "ALA-Dehydratase deficiency"
            ],
            [
                "Hydroxymethyl bilane",
                "11q23.3",
                "acute intermittent porphyria"
            ],
            [
                "Uroporphyrinogen III",
                "10q25.2-q26.3",
                "congenital erythropoietic porphyria"
            ],
            [
                "Coproporphyrinogen III",
                "1p34",
                "porphyria cutanea tarda"
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nWHERE enzyme.Location = 'Cytosol'\nRETURN enzyme.Product,enzyme.Chromosome,enzyme.Porphyria",
        "question": "What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'?",
        "answers": [
            [
                "Porphobilinogen",
                "9q34",
                "ALA-Dehydratase deficiency"
            ],
            [
                "Hydroxymethyl bilane",
                "11q23.3",
                "acute intermittent porphyria"
            ],
            [
                "Uroporphyrinogen III",
                "10q25.2-q26.3",
                "congenital erythropoietic porphyria"
            ],
            [
                "Coproporphyrinogen III",
                "1p34",
                "porphyria cutanea tarda"
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nWHERE enzyme.Product <> 'Heme'\nRETURN enzyme.name",
        "question": "What are the names of enzymes who does not produce 'Heme'?",
        "answers": [
            [
                "ALA synthase"
            ],
            [
                "ALA dehydratase"
            ],
            [
                "PBG deaminase"
            ],
            [
                "Uroporphyrinogen III synthase"
            ],
            [
                "Uroporphyrinogen III decarboxylase"
            ],
            [
                "Coproporphyrinogen III oxidase"
            ],
            [
                "Protoporphyrinogen oxidase"
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nWHERE enzyme.Product <> 'Heme'\nRETURN enzyme.name",
        "question": "What are the names of enzymes whose product is not 'Heme'?",
        "answers": [
            [
                "ALA synthase"
            ],
            [
                "ALA dehydratase"
            ],
            [
                "PBG deaminase"
            ],
            [
                "Uroporphyrinogen III synthase"
            ],
            [
                "Uroporphyrinogen III decarboxylase"
            ],
            [
                "Coproporphyrinogen III oxidase"
            ],
            [
                "Protoporphyrinogen oxidase"
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (medicine:`medicine_enzyme_interaction.medicine`)\nWHERE medicine.FDA_approved = 'Yes'\nRETURN medicine.name,medicine.Trade_Name",
        "question": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?",
        "answers": [
            [
                "Aripiprazole",
                "Abilify"
            ],
            [
                "Asenapine",
                "Saphris"
            ],
            [
                "Clozapine",
                "Clozaril"
            ],
            [
                "Iloperidone",
                "Fanapt"
            ],
            [
                "Lurasidone",
                "Latuda"
            ],
            [
                "Olanzapine",
                "Zyprexa"
            ],
            [
                "Paliperidone",
                "Invega"
            ],
            [
                "Quetiapine",
                "Seroquel"
            ],
            [
                "Risperidone",
                "Risperdal"
            ],
            [
                "Ziprasidone",
                "Geodon"
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (medicine:`medicine_enzyme_interaction.medicine`)\nWHERE medicine.FDA_approved = 'Yes'\nRETURN medicine.name,medicine.Trade_Name",
        "question": "What are the names and trade names of the medcines that are FDA approved?",
        "answers": [
            [
                "Aripiprazole",
                "Abilify"
            ],
            [
                "Asenapine",
                "Saphris"
            ],
            [
                "Clozapine",
                "Clozaril"
            ],
            [
                "Iloperidone",
                "Fanapt"
            ],
            [
                "Lurasidone",
                "Latuda"
            ],
            [
                "Olanzapine",
                "Zyprexa"
            ],
            [
                "Paliperidone",
                "Invega"
            ],
            [
                "Quetiapine",
                "Seroquel"
            ],
            [
                "Risperidone",
                "Risperdal"
            ],
            [
                "Ziprasidone",
                "Geodon"
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (T1:`medicine_enzyme_interaction.enzyme`)-[T2:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-(T3:`medicine_enzyme_interaction.medicine`)\nWHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'\nRETURN T1.name",
        "question": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?",
        "answers": [
            [
                "ALA synthase"
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (T1:`medicine_enzyme_interaction.enzyme`)-[T2:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-(T3:`medicine_enzyme_interaction.medicine`)\nWHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'\nRETURN T1.name",
        "question": "What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?",
        "answers": [
            [
                "ALA synthase"
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (T1:`medicine_enzyme_interaction.medicine`)-[T2:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-()\nWITH T1.name AS name, count(*) AS count, T1.id AS id\nWHERE count  >= 2\nRETURN id,name",
        "question": "What are the ids and names of the medicine that can interact with two or more enzymes?",
        "answers": [
            [
                2,
                "Aripiprazole"
            ],
            [
                3,
                "Asenapine"
            ],
            [
                8,
                "Iloperidone"
            ],
            [
                20,
                "Ziprasidone"
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (T1:`medicine_enzyme_interaction.medicine`)-[T2:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-()\nWITH T1.name AS name, count(*) AS count, T1.id AS id\nWHERE count  >= 2\nRETURN id,name",
        "question": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?",
        "answers": [
            [
                2,
                "Aripiprazole"
            ],
            [
                3,
                "Asenapine"
            ],
            [
                8,
                "Iloperidone"
            ],
            [
                20,
                "Ziprasidone"
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (T1:`medicine_enzyme_interaction.medicine`)-[T2:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-()\nWITH T1, count(T1.id) AS cnt\nRETURN T1.id,T1.name,T1.FDA_approved\nORDER BY cnt DESC",
        "question": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.",
        "answers": [
            [
                2,
                "Aripiprazole",
                "Yes"
            ],
            [
                3,
                "Asenapine",
                "Yes"
            ],
            [
                8,
                "Iloperidone",
                "Yes"
            ],
            [
                20,
                "Ziprasidone",
                "Yes"
            ],
            [
                1,
                "Amisulpride",
                "No"
            ],
            [
                4,
                "Blonanserin",
                "No"
            ],
            [
                5,
                "Carpipramine",
                "No"
            ],
            [
                6,
                "Clocapramine",
                "No"
            ],
            [
                7,
                "Clozapine",
                "Yes"
            ],
            [
                9,
                "Lurasidone",
                "Yes"
            ],
            [
                10,
                "Melperone",
                "No"
            ],
            [
                13,
                "Paliperidone",
                "Yes"
            ],
            [
                19,
                "Sulpiride",
                "No"
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (T1:`medicine_enzyme_interaction.medicine`)-[T2:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-()\nWITH T1, count(T1.id) AS cnt\nRETURN T1.id,T1.name,T1.FDA_approved\nORDER BY cnt DESC",
        "question": "What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?",
        "answers": [
            [
                2,
                "Aripiprazole",
                "Yes"
            ],
            [
                3,
                "Asenapine",
                "Yes"
            ],
            [
                8,
                "Iloperidone",
                "Yes"
            ],
            [
                20,
                "Ziprasidone",
                "Yes"
            ],
            [
                1,
                "Amisulpride",
                "No"
            ],
            [
                4,
                "Blonanserin",
                "No"
            ],
            [
                5,
                "Carpipramine",
                "No"
            ],
            [
                6,
                "Clocapramine",
                "No"
            ],
            [
                7,
                "Clozapine",
                "Yes"
            ],
            [
                9,
                "Lurasidone",
                "Yes"
            ],
            [
                10,
                "Melperone",
                "No"
            ],
            [
                13,
                "Paliperidone",
                "Yes"
            ],
            [
                19,
                "Sulpiride",
                "No"
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (T1:`medicine_enzyme_interaction.enzyme`)-[T2:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-()\nWHERE T2.interaction_type = 'activitor'\nWITH T1, count(T1.id) AS cnt\nRETURN T1.id,T1.name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?",
        "answers": [
            [
                4,
                "Uroporphyrinogen III synthase"
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (T1:`medicine_enzyme_interaction.enzyme`)-[T2:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-()\nWHERE T2.interaction_type = 'activitor'\nWITH T1, count(T1.id) AS cnt\nRETURN T1.id,T1.name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the id and name of the enzyme that can interact with the most medicines as an activator?",
        "answers": [
            [
                4,
                "Uroporphyrinogen III synthase"
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (T2:`medicine_enzyme_interaction.medicine`)-[T1:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-(T3:`medicine_enzyme_interaction.enzyme`)\nWHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole'\nRETURN T1.interaction_type",
        "question": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "answers": [
            [
                "inhibitor"
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (T2:`medicine_enzyme_interaction.medicine`)-[T1:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-(T3:`medicine_enzyme_interaction.enzyme`)\nWHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole'\nRETURN T1.interaction_type",
        "question": "What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "answers": [
            [
                "inhibitor"
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (medicine:`medicine_enzyme_interaction.medicine`)\nWHERE medicine.FDA_approved = 'No'\nRETURN count(*)",
        "question": "How many medicines have the FDA approval status 'No' ?",
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (medicine:`medicine_enzyme_interaction.medicine`)\nWHERE medicine.FDA_approved = 'No'\nRETURN count(*)",
        "question": "How many medicines were not approved by the FDA?",
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (T1:`medicine_enzyme_interaction.medicine`)-[T2:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-()\nWITH count(*) AS count, T1.id AS id, T1.Trade_Name AS Trade_Name\nWHERE count  >= 3\nRETURN id,Trade_Name",
        "question": "What is the id and trade name of the medicines can interact with at least 3 enzymes?",
        "answers": [
            [
                2,
                "Abilify"
            ],
            [
                3,
                "Saphris"
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (T1:`medicine_enzyme_interaction.medicine`)-[T2:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-()\nWITH count(*) AS count, T1.id AS id, T1.Trade_Name AS Trade_Name\nWHERE count  >= 3\nRETURN id,Trade_Name",
        "question": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?",
        "answers": [
            [
                2,
                "Abilify"
            ],
            [
                3,
                "Saphris"
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (T1:`medicine_enzyme_interaction.enzyme`)-[T2:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-()\nWHERE T2.interaction_type = 'inhibitor'\nRETURN DISTINCT T1.name,T1.Location,T1.Product",
        "question": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?",
        "answers": [
            [
                "ALA synthase",
                "Mitochondrion",
                "\u03b4-Aminolevulinic acid"
            ],
            [
                "ALA dehydratase",
                "Cytosol",
                "Porphobilinogen"
            ],
            [
                "PBG deaminase",
                "Cytosol",
                "Hydroxymethyl bilane"
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (T1:`medicine_enzyme_interaction.enzyme`)-[T2:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-()\nWHERE T2.interaction_type = 'inhibitor'\nRETURN DISTINCT T1.name,T1.Location,T1.Product",
        "question": "What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?",
        "answers": [
            [
                "ALA synthase",
                "Mitochondrion",
                "\u03b4-Aminolevulinic acid"
            ],
            [
                "ALA dehydratase",
                "Cytosol",
                "Porphobilinogen"
            ],
            [
                "PBG deaminase",
                "Cytosol",
                "Hydroxymethyl bilane"
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (medicine:`medicine_enzyme_interaction.medicine`)\nRETURN count(DISTINCT medicine.FDA_approved)",
        "question": "How many distinct FDA approval statuses are there for the medicines?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (medicine:`medicine_enzyme_interaction.medicine`)\nRETURN count(DISTINCT medicine.FDA_approved)",
        "question": "How many different FDA approval statuses exist for medicines?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (medicine:`medicine_enzyme_interaction.medicine`)\nRETURN medicine.Trade_Name,count(*)",
        "question": "find the number of medicines offered by each trade.",
        "answers": [
            [
                "Solian",
                1
            ],
            [
                "Abilify",
                1
            ],
            [
                "Saphris",
                1
            ],
            [
                "Lonasen",
                1
            ],
            [
                "Prazinil",
                1
            ],
            [
                "Clofekton",
                1
            ],
            [
                "Clozaril",
                1
            ],
            [
                "Fanapt",
                1
            ],
            [
                "Latuda",
                1
            ],
            [
                "Buronil",
                1
            ],
            [
                "Cremin",
                1
            ],
            [
                "Zyprexa",
                1
            ],
            [
                "Invega",
                1
            ],
            [
                "Lullan",
                1
            ],
            [
                "Seroquel",
                1
            ],
            [
                "Roxiam",
                1
            ],
            [
                "Risperdal",
                1
            ],
            [
                "Serdolect",
                1
            ],
            [
                "Sulpirid",
                1
            ],
            [
                "Geodon",
                1
            ],
            [
                "Nipolept",
                1
            ]
        ]
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "MATCH (medicine:`medicine_enzyme_interaction.medicine`)\nRETURN medicine.Trade_Name,count(*)",
        "question": "How many medicines are offered by each trade name?",
        "answers": [
            [
                "Solian",
                1
            ],
            [
                "Abilify",
                1
            ],
            [
                "Saphris",
                1
            ],
            [
                "Lonasen",
                1
            ],
            [
                "Prazinil",
                1
            ],
            [
                "Clofekton",
                1
            ],
            [
                "Clozaril",
                1
            ],
            [
                "Fanapt",
                1
            ],
            [
                "Latuda",
                1
            ],
            [
                "Buronil",
                1
            ],
            [
                "Cremin",
                1
            ],
            [
                "Zyprexa",
                1
            ],
            [
                "Invega",
                1
            ],
            [
                "Lullan",
                1
            ],
            [
                "Seroquel",
                1
            ],
            [
                "Roxiam",
                1
            ],
            [
                "Risperdal",
                1
            ],
            [
                "Serdolect",
                1
            ],
            [
                "Sulpirid",
                1
            ],
            [
                "Geodon",
                1
            ],
            [
                "Nipolept",
                1
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (university:`university_basketball.university`)\nRETURN university.School,university.Nickname\nORDER BY university.Founded",
        "question": "List all schools and their nicknames in the order of founded year.",
        "answers": [
            [
                "University of Delaware",
                "Fightin' Blue Hens"
            ],
            [
                "Rutgers University",
                "Scarlet Knights"
            ],
            [
                "Lebanon Valley College",
                "Flying Dutchmen"
            ],
            [
                "University of Rhode Island",
                "Rams"
            ],
            [
                "Stony Brook University",
                "Seawolves"
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (university:`university_basketball.university`)\nRETURN university.School,university.Nickname\nORDER BY university.Founded",
        "question": "What are the different schools and their nicknames, ordered by their founding years?",
        "answers": [
            [
                "University of Delaware",
                "Fightin' Blue Hens"
            ],
            [
                "Rutgers University",
                "Scarlet Knights"
            ],
            [
                "Lebanon Valley College",
                "Flying Dutchmen"
            ],
            [
                "University of Rhode Island",
                "Rams"
            ],
            [
                "Stony Brook University",
                "Seawolves"
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (university:`university_basketball.university`)\nWHERE university.Affiliation = 'Public'\nRETURN university.School,university.Location",
        "question": "List all public schools and their locations.",
        "answers": [
            [
                "University of Delaware",
                "Newark, DE"
            ],
            [
                "University of Rhode Island",
                "Kingston, RI"
            ],
            [
                "Rutgers University",
                "New Brunswick, NJ"
            ],
            [
                "Stony Brook University",
                "Stony Brook, NY"
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (university:`university_basketball.university`)\nWHERE university.Affiliation = 'Public'\nRETURN university.School,university.Location",
        "question": "What are the public schools and what are their locations?",
        "answers": [
            [
                "University of Delaware",
                "Newark, DE"
            ],
            [
                "University of Rhode Island",
                "Kingston, RI"
            ],
            [
                "Rutgers University",
                "New Brunswick, NJ"
            ],
            [
                "Stony Brook University",
                "Stony Brook, NY"
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (university:`university_basketball.university`)\nRETURN university.Founded\nORDER BY university.Enrollment DESC\nLIMIT 1",
        "question": "When was the school with the largest enrollment founded?",
        "answers": [
            [
                1766.0
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (university:`university_basketball.university`)\nRETURN university.Founded\nORDER BY university.Enrollment DESC\nLIMIT 1",
        "question": "Return the founded year for the school with the largest enrollment.",
        "answers": [
            [
                1766.0
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (university:`university_basketball.university`)\nWHERE university.Affiliation <> 'Public'\nRETURN university.Founded\nORDER BY university.Founded DESC\nLIMIT 1",
        "question": "Find the founded year of the newest non public school.",
        "answers": [
            [
                1866.0
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (university:`university_basketball.university`)\nWHERE university.Affiliation <> 'Public'\nRETURN university.Founded\nORDER BY university.Founded DESC\nLIMIT 1",
        "question": "What is the founded year of the non public school that was founded most recently?",
        "answers": [
            [
                1866.0
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (basketball_match:`university_basketball.basketball_match`)\nRETURN count(DISTINCT basketball_match.School_ID)",
        "question": "How many schools are in the basketball match?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (basketball_match:`university_basketball.basketball_match`)\nRETURN count(DISTINCT basketball_match.School_ID)",
        "question": "Count the number of schools that have had basketball matches.",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (basketball_match:`university_basketball.basketball_match`)\nRETURN basketball_match.ACC_Percent\nORDER BY basketball_match.ACC_Percent DESC\nLIMIT 1",
        "question": "What is the highest acc percent score in the competition?",
        "answers": [
            [
                ".875"
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (basketball_match:`university_basketball.basketball_match`)\nRETURN basketball_match.ACC_Percent\nORDER BY basketball_match.ACC_Percent DESC\nLIMIT 1",
        "question": "Return the highest acc percent across all basketball matches.",
        "answers": [
            [
                ".875"
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (t1:`university_basketball.university`)-[]-(t2:`university_basketball.basketball_match`)\nRETURN t1.Primary_conference\nORDER BY t2.ACC_Percent\nLIMIT 1",
        "question": "What is the primary conference of the school that has the lowest acc percent score in the competition?",
        "answers": [
            [
                "America East Conference ( D-I )"
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (t1:`university_basketball.university`)-[]-(t2:`university_basketball.basketball_match`)\nRETURN t1.Primary_conference\nORDER BY t2.ACC_Percent\nLIMIT 1",
        "question": "Return the primary conference of the school with the lowest acc percentage score.",
        "answers": [
            [
                "America East Conference ( D-I )"
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (t1:`university_basketball.university`)-[]-(t2:`university_basketball.basketball_match`)\nRETURN t2.Team_Name,t2.ACC_Regular_Season\nORDER BY t1.Founded\nLIMIT 1",
        "question": "What is the team name and acc regular season score of the school that was founded for the longest time?",
        "answers": [
            [
                "North Carolina",
                "14\u20132"
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (t1:`university_basketball.university`)-[]-(t2:`university_basketball.basketball_match`)\nRETURN t2.Team_Name,t2.ACC_Regular_Season\nORDER BY t1.Founded\nLIMIT 1",
        "question": "Return the name of the team and the acc during the regular season for the school that was founded the earliest.",
        "answers": [
            [
                "North Carolina",
                "14\u20132"
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (t1:`university_basketball.university`)-[]-(t2:`university_basketball.basketball_match`)\nWHERE t2.Team_Name = 'Clemson'\nRETURN t2.All_Games,t1.Location",
        "question": "Find the location and all games score of the school that has Clemson as its team name.",
        "answers": [
            [
                "24\u201310",
                "New Brunswick, NJ"
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (t1:`university_basketball.university`)-[]-(t2:`university_basketball.basketball_match`)\nWHERE t2.Team_Name = 'Clemson'\nRETURN t2.All_Games,t1.Location",
        "question": "What are the all games score and location of the school called Clemson?",
        "answers": [
            [
                "24\u201310",
                "New Brunswick, NJ"
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (university:`university_basketball.university`)\nWHERE university.Founded < 1850\nRETURN avg(university.Enrollment)",
        "question": "What are the average enrollment size of the universities that are founded before 1850?",
        "answers": [
            [
                37967.5
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (university:`university_basketball.university`)\nWHERE university.Founded < 1850\nRETURN avg(university.Enrollment)",
        "question": "Return the average enrollment of universities founded before 1850.",
        "answers": [
            [
                37967.5
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (university:`university_basketball.university`)\nRETURN university.Enrollment,university.Primary_conference\nORDER BY university.Founded\nLIMIT 1",
        "question": "Show the enrollment and primary_conference of the oldest college.",
        "answers": [
            [
                19067.0,
                "Colonial Athletic Association ( D-I )"
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (university:`university_basketball.university`)\nRETURN university.Enrollment,university.Primary_conference\nORDER BY university.Founded\nLIMIT 1",
        "question": "What are the enrollment and primary conference for the university which was founded the earliest?",
        "answers": [
            [
                19067.0,
                "Colonial Athletic Association ( D-I )"
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (university:`university_basketball.university`)\nWHERE NOT (university)-[]-(:`university_basketball.basketball_match`)    \nRETURN count(*)",
        "question": "How many schools do not participate in the basketball match?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (university:`university_basketball.university`)\nWHERE NOT (university)-[]-(:`university_basketball.basketball_match`)    \nRETURN count(*)",
        "question": "Count the number of universities that do not participate in the baketball match.",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (university:`university_basketball.university`)\nWHERE university.Founded > 1850 OR university.Affiliation = 'Public'\nRETURN university.School",
        "question": "Find the schools that were either founded after 1850 or public.",
        "answers": [
            [
                "University of Delaware"
            ],
            [
                "Lebanon Valley College"
            ],
            [
                "University of Rhode Island"
            ],
            [
                "Rutgers University"
            ],
            [
                "Stony Brook University"
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (university:`university_basketball.university`)\nWHERE university.Founded > 1850 OR university.Affiliation = 'Public'\nRETURN university.School",
        "question": "What are the schools that were either founded before 1850 or are public?",
        "answers": [
            [
                "University of Delaware"
            ],
            [
                "Lebanon Valley College"
            ],
            [
                "University of Rhode Island"
            ],
            [
                "Rutgers University"
            ],
            [
                "Stony Brook University"
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (university:`university_basketball.university`)\nWHERE university.Enrollment > 20000\nRETURN count(*),university.Affiliation",
        "question": "Find the number of universities that have over a 20000 enrollment size for each affiliation type.",
        "answers": [
            [
                2,
                "Public"
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (university:`university_basketball.university`)\nWHERE university.Enrollment > 20000\nRETURN count(*),university.Affiliation",
        "question": "What are the different affiliations, and how many schools with each have an enrollment size of above 20000?",
        "answers": [
            [
                2,
                "Public"
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (university:`university_basketball.university`)\nRETURN max(university.Enrollment)",
        "question": "What is the maximum enrollment across all schools?",
        "answers": [
            [
                56868.0
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (university:`university_basketball.university`)\nRETURN max(university.Enrollment)",
        "question": "Return the maximum enrollment across all schools.",
        "answers": [
            [
                56868.0
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (basketball_match:`university_basketball.basketball_match`)\nRETURN basketball_match.Team_Name\nORDER BY basketball_match.All_Home DESC",
        "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order.",
        "answers": [
            [
                "Duke"
            ],
            [
                "Virginia Tech"
            ],
            [
                "North Carolina"
            ],
            [
                "Clemson"
            ]
        ]
    },
    {
        "db_id": "university_basketball",
        "query": "MATCH (basketball_match:`university_basketball.basketball_match`)\nRETURN basketball_match.Team_Name\nORDER BY basketball_match.All_Home DESC",
        "question": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?",
        "answers": [
            [
                "Duke"
            ],
            [
                "Virginia Tech"
            ],
            [
                "North Carolina"
            ],
            [
                "Clemson"
            ]
        ]
    },
    {
        "db_id": "phone_1",
        "query": "MATCH (chip_model:`phone_1.chip_model`)\nWHERE 2002<=chip_model.Launch_year<=2004\nRETURN chip_model.Model_name",
        "question": "the names of models that launched between 2002 and 2004.",
        "answers": [
            [
                "X5"
            ],
            [
                "X5 high end"
            ],
            [
                "X3 Basic"
            ],
            [
                "X3 Advanced"
            ],
            [
                "X3i"
            ],
            [
                "X30 low-end"
            ],
            [
                "X30 mid-range"
            ],
            [
                "X30 high-end"
            ],
            [
                "X50 Standard"
            ],
            [
                "X50 Advanced"
            ],
            [
                "X50v"
            ]
        ]
    },
    {
        "db_id": "phone_1",
        "query": "MATCH (chip_model:`phone_1.chip_model`)\nRETURN chip_model.Model_name,chip_model.RAM_MiB\nORDER BY chip_model.RAM_MiB ASC\nLIMIT 1",
        "question": "Which model has the least amount of RAM? List the model name and the amount of RAM.",
        "answers": [
            [
                "X5",
                32.0
            ]
        ]
    },
    {
        "db_id": "phone_1",
        "query": "MATCH (phone:`phone_1.phone`)\nWHERE phone.Hardware_Model_name = \"LG-P760\"\nRETURN phone.chip_model,phone.screen_mode",
        "question": "What are the chip model and screen mode of the phone with hardware model name \"LG-P760\"?",
        "answers": [
            [
                "X51v",
                "3"
            ]
        ]
    },
    {
        "db_id": "phone_1",
        "query": "MATCH (phone:`phone_1.phone`)\nWHERE phone.Company_name = 'Nokia Corporation'\nRETURN count(*)",
        "question": "How many phone hardware models are produced by the company named \"Nokia Corporation\"?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "phone_1",
        "query": "MATCH (T1:`phone_1.chip_model`)-[]-(T2:`phone_1.phone`)\nWHERE T1.Launch_year = 2002 OR T1.RAM_MiB > 32\nRETURN T2.Hardware_Model_name,T2.Company_name",
        "question": "List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.",
        "answers": [
            [
                "XPERIA T, XPERIA J",
                "Sony Mobile Communications"
            ],
            [
                "LG-P760",
                "LG Electronics"
            ],
            [
                "Lumia 920, Lumia 820, Lumia 620",
                "Nokia Corporation"
            ],
            [
                "Z520e",
                "HTC Corporation"
            ],
            [
                "GT-I9100",
                "Samsung Electronics Co Ltd"
            ],
            [
                "Nokia 700",
                "Nokia Corporation"
            ],
            [
                "U8815 Asura",
                "Huawei Technologies Co.Ltd."
            ]
        ]
    },
    {
        "db_id": "phone_1",
        "query": "MATCH (phone:`phone_1.phone`)\nWHERE phone.Accreditation_type =~'.*[F|f]ull.*'\nRETURN phone.Hardware_Model_name,phone.Company_name",
        "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.",
        "answers": [
            [
                "XPERIA T, XPERIA J",
                "Sony Mobile Communications"
            ],
            [
                "LG-P760",
                "LG Electronics"
            ],
            [
                "Lumia 920, Lumia 820, Lumia 620",
                "Nokia Corporation"
            ],
            [
                "GT-I9300",
                "Samsung Electronics Co Ltd"
            ]
        ]
    },
    {
        "db_id": "phone_1",
        "query": "MATCH (phone:`phone_1.phone`)\nRETURN phone.Company_name,count(*)\nORDER BY phone.Company_name ASC\nLIMIT 1",
        "question": "Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.",
        "answers": [
            [
                "HTC Corporation",
                1
            ]
        ]
    },
    {
        "db_id": "phone_1",
        "query": "MATCH (phone:`phone_1.phone`)\nWITH count(*) AS count, phone.Company_name AS Company_name\nWHERE count  > 1\nRETURN Company_name",
        "question": "List the name of the company that produced more than one phone model.",
        "answers": [
            [
                "Nokia Corporation"
            ],
            [
                "Samsung Electronics Co Ltd"
            ]
        ]
    },
    {
        "db_id": "phone_1",
        "query": "MATCH (screen_mode:`phone_1.screen_mode`)\nRETURN max(screen_mode.used_kb),min(screen_mode.used_kb),avg(screen_mode.used_kb)",
        "question": "List the maximum, minimum and average number of used kb in screen mode.",
        "answers": [
            [
                20.0,
                8.0,
                14.857142857142858
            ]
        ]
    },
    {
        "db_id": "phone_1",
        "query": "MATCH (T1:`phone_1.chip_model`)-[]-(T2:`phone_1.phone`)\nWHERE T1.Launch_year = 2002\nRETURN T2.Hardware_Model_name\nORDER BY T1.RAM_MiB DESC\nLIMIT 1",
        "question": "List the name of the phone model launched in year 2002 and with the highest RAM size.",
        "answers": [
            [
                "XPERIA T, XPERIA J"
            ]
        ]
    },
    {
        "db_id": "phone_1",
        "query": "MATCH (phone:`phone_1.phone`)\nRETURN phone.Accreditation_type,count(*)",
        "question": "Find the number of phones for each accreditation type.",
        "answers": [
            [
                "Full",
                4
            ],
            [
                "Provisional",
                4
            ]
        ]
    },
    {
        "db_id": "phone_1",
        "query": "MATCH (phone:`phone_1.phone`)\nRETURN phone.Accreditation_type,count(*)",
        "question": "How many phones belongs to each accreditation type?",
        "answers": [
            [
                "Full",
                4
            ],
            [
                "Provisional",
                4
            ]
        ]
    },
    {
        "db_id": "phone_1",
        "query": "MATCH (phone:`phone_1.phone`)\nWITH phone.Accreditation_level AS Accreditation_level, count(*) AS count\nWHERE count  > 3\nRETURN Accreditation_level",
        "question": "Find the accreditation level that more than 3 phones use.",
        "answers": [
            [
                "joyn"
            ]
        ]
    },
    {
        "db_id": "phone_1",
        "query": "MATCH (chip_model:`phone_1.chip_model`)\nWHERE chip_model.WiFi = 'No'\nRETURN count(*)",
        "question": "How many models do not have the wifi function?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "phone_1",
        "query": "MATCH (chip_model:`phone_1.chip_model`)\nWHERE chip_model.WiFi = 'No'\nRETURN count(*)",
        "question": "Count the number of chip model that do not have wifi.",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "phone_1",
        "query": "MATCH (chip_model:`phone_1.chip_model`)\nRETURN chip_model.Model_name\nORDER BY chip_model.Launch_year",
        "question": "List all the model names sorted by their launch year.",
        "answers": [
            [
                "X5"
            ],
            [
                "X5 high end"
            ],
            [
                "X3 Basic"
            ],
            [
                "X3 Advanced"
            ],
            [
                "X3i"
            ],
            [
                "X30 low-end"
            ],
            [
                "X30 mid-range"
            ],
            [
                "X30 high-end"
            ],
            [
                "X50 Standard"
            ],
            [
                "X50 Advanced"
            ],
            [
                "X50v"
            ],
            [
                "X51 low-end"
            ],
            [
                "X51 mid-range"
            ],
            [
                "X51v"
            ]
        ]
    },
    {
        "db_id": "phone_1",
        "query": "MATCH (chip_model:`phone_1.chip_model`)\nWHERE NOT (chip_model)-[]-(:`phone_1.phone`)    \nRETURN avg(chip_model.RAM_MiB)",
        "question": "Find the average ram mib size of the chip models that are never used by any phone.",
        "answers": [
            [
                60.0
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (country:`match_season.country`)\nRETURN count(*)",
        "question": "How many countries are there in total?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (country:`match_season.country`)\nRETURN count(*)",
        "question": "Count the number of countries.",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (country:`match_season.country`)\nRETURN country.Country_name,country.Capital",
        "question": "Show the country name and capital of all countries.",
        "answers": [
            [
                "Indonesia",
                "Jakarta"
            ],
            [
                "Iran",
                "Tehran"
            ],
            [
                "Iraq",
                "Baghdad"
            ],
            [
                "Ireland",
                "Dublin"
            ],
            [
                "Isle of Man",
                "Douglas"
            ],
            [
                "United States",
                "Washington"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (country:`match_season.country`)\nRETURN country.Country_name,country.Capital",
        "question": "What are the names and capitals of each country?",
        "answers": [
            [
                "Indonesia",
                "Jakarta"
            ],
            [
                "Iran",
                "Tehran"
            ],
            [
                "Iraq",
                "Baghdad"
            ],
            [
                "Ireland",
                "Dublin"
            ],
            [
                "Isle of Man",
                "Douglas"
            ],
            [
                "United States",
                "Washington"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (match_season:`match_season.match_season`)\nRETURN DISTINCT match_season.Position",
        "question": "Show all distinct positions of matches.",
        "answers": [
            [
                "Midfielder"
            ],
            [
                "Defender"
            ],
            [
                "Forward"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (match_season:`match_season.match_season`)\nRETURN DISTINCT match_season.Position",
        "question": "What are the different positions for match season?",
        "answers": [
            [
                "Midfielder"
            ],
            [
                "Defender"
            ],
            [
                "Forward"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (match_season:`match_season.match_season`)\nWHERE match_season.College = 'UCLA'\nRETURN match_season.Player",
        "question": "Show the players from college UCLA.",
        "answers": [
            [
                "Carlos Bocanegra Category:Articles with hCards"
            ],
            [
                "Jonathan Bornstein Category:Articles with hCards"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (match_season:`match_season.match_season`)\nWHERE match_season.College = 'UCLA'\nRETURN match_season.Player",
        "question": "Who are the players from UCLA?",
        "answers": [
            [
                "Carlos Bocanegra Category:Articles with hCards"
            ],
            [
                "Jonathan Bornstein Category:Articles with hCards"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (match_season:`match_season.match_season`)\nWHERE match_season.College = 'UCLA' OR match_season.College = 'Duke'\nRETURN DISTINCT match_season.Position",
        "question": "Show the distinct position of players from college UCLA or Duke.",
        "answers": [
            [
                "Defender"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (match_season:`match_season.match_season`)\nWHERE match_season.College = 'UCLA' OR match_season.College = 'Duke'\nRETURN DISTINCT match_season.Position",
        "question": "What are the different positions of players from UCLA or Duke colleges?",
        "answers": [
            [
                "Defender"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (match_season:`match_season.match_season`)\nWHERE match_season.Position = 'Defender'\nRETURN match_season.Draft_Pick_Number,match_season.Draft_Class",
        "question": "Show the draft pick numbers and draft classes of players whose positions are defenders.",
        "answers": [
            [
                87,
                "1996 MLS Inaugural Player Draft"
            ],
            [
                5,
                "1999 MLS College Draft"
            ],
            [
                4,
                "2000 MLS SuperDraft"
            ],
            [
                9,
                "2005 MLS SuperDraft"
            ],
            [
                37,
                "2006 MLS SuperDraft"
            ],
            [
                4,
                "2008 MLS SuperDraft"
            ],
            [
                3,
                "2009 MLS SuperDraft"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (match_season:`match_season.match_season`)\nWHERE match_season.Position = 'Defender'\nRETURN match_season.Draft_Pick_Number,match_season.Draft_Class",
        "question": "What are the draft pick numbers and draft classes for players who play the Defender position?",
        "answers": [
            [
                87,
                "1996 MLS Inaugural Player Draft"
            ],
            [
                5,
                "1999 MLS College Draft"
            ],
            [
                4,
                "2000 MLS SuperDraft"
            ],
            [
                9,
                "2005 MLS SuperDraft"
            ],
            [
                37,
                "2006 MLS SuperDraft"
            ],
            [
                4,
                "2008 MLS SuperDraft"
            ],
            [
                3,
                "2009 MLS SuperDraft"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (match_season:`match_season.match_season`)\nRETURN count(DISTINCT match_season.Team)",
        "question": "How many distinct teams are involved in match seasons?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (match_season:`match_season.match_season`)\nRETURN count(DISTINCT match_season.Team)",
        "question": "Count the number of different teams involved in match season.",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (player:`match_season.player`)\nRETURN player.Player,player.Years_Played",
        "question": "Show the players and the years played.",
        "answers": [
            [
                "Cho Soong-Jae (630)",
                "1 (2011)"
            ],
            [
                "Chung Hong (717)",
                "1 (2011)"
            ],
            [
                "Im Kyu-tae (492)",
                "8 (2003\u20132005, 2007\u20132011)"
            ],
            [
                "Jeong Suk-Young (793)",
                "2 (2010\u20132011)"
            ],
            [
                "Kim Hyun-Joon (908)",
                "2 (2010\u20132011)"
            ],
            [
                "Kim Young-Jun (474)",
                "4 (2003\u20132004, 2010\u20132011)"
            ],
            [
                "Lim Yong-Kyu (288)",
                "3 (2009\u20132011)"
            ],
            [
                "Seol Jae-Min (none)",
                "2 (2010-2011)"
            ],
            [
                "An Jae-Sung",
                "3 (2005, 2007\u20132008)"
            ],
            [
                "Bae Nam-Ju",
                "2 (1988, 1990)"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (player:`match_season.player`)\nRETURN player.Player,player.Years_Played",
        "question": "Who are the different players and how many years has each played?",
        "answers": [
            [
                "Cho Soong-Jae (630)",
                "1 (2011)"
            ],
            [
                "Chung Hong (717)",
                "1 (2011)"
            ],
            [
                "Im Kyu-tae (492)",
                "8 (2003\u20132005, 2007\u20132011)"
            ],
            [
                "Jeong Suk-Young (793)",
                "2 (2010\u20132011)"
            ],
            [
                "Kim Hyun-Joon (908)",
                "2 (2010\u20132011)"
            ],
            [
                "Kim Young-Jun (474)",
                "4 (2003\u20132004, 2010\u20132011)"
            ],
            [
                "Lim Yong-Kyu (288)",
                "3 (2009\u20132011)"
            ],
            [
                "Seol Jae-Min (none)",
                "2 (2010-2011)"
            ],
            [
                "An Jae-Sung",
                "3 (2005, 2007\u20132008)"
            ],
            [
                "Bae Nam-Ju",
                "2 (1988, 1990)"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (team:`match_season.team`)\nRETURN team.Name",
        "question": "Show all team names.",
        "answers": [
            [
                "Columbus Crew"
            ],
            [
                "Evalyn Feil"
            ],
            [
                "Anais VonRueden"
            ],
            [
                "Miami Fusion"
            ],
            [
                "Enrique Osinski"
            ],
            [
                "Brown Erdman"
            ],
            [
                "Los Angeles Galaxy"
            ],
            [
                "Berneice Hand"
            ],
            [
                "Ryley Goldner"
            ],
            [
                "D.C. United"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (team:`match_season.team`)\nRETURN team.Name",
        "question": "What are the names of all teams?",
        "answers": [
            [
                "Columbus Crew"
            ],
            [
                "Evalyn Feil"
            ],
            [
                "Anais VonRueden"
            ],
            [
                "Miami Fusion"
            ],
            [
                "Enrique Osinski"
            ],
            [
                "Brown Erdman"
            ],
            [
                "Los Angeles Galaxy"
            ],
            [
                "Berneice Hand"
            ],
            [
                "Ryley Goldner"
            ],
            [
                "D.C. United"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (T1:`match_season.country`)-[]-(T2:`match_season.match_season`)\nRETURN T2.Season,T2.Player,T1.Country_name",
        "question": "Show the season, the player, and the name of the country that player belongs to.",
        "answers": [
            [
                2003.0,
                "Damani Ralph Category:Articles with hCards",
                "Indonesia"
            ],
            [
                2010.0,
                "Andy Najar Category:Articles with hCards",
                "Ireland"
            ],
            [
                1998.0,
                "Ben Olsen Category:Articles with hCards",
                "Ireland"
            ],
            [
                2001.0,
                "Rodrigo Faria Category:Articles with hCards",
                "Ireland"
            ],
            [
                2007.0,
                "Maurice Edu Category:Articles with hCards",
                "Ireland"
            ],
            [
                1999.0,
                "Jay Heaps Category:Articles with hCards",
                "Isle of Man"
            ],
            [
                2000.0,
                "Carlos Bocanegra Category:Articles with hCards",
                "Isle of Man"
            ],
            [
                1997.0,
                "Mike Duhaney Category:Articles with hCards",
                "United States"
            ],
            [
                2011.0,
                "C. J. Sapong Category:Articles with hCards",
                "United States"
            ],
            [
                1996.0,
                "Steve Ralston Category:Articles with hCards",
                "United States"
            ],
            [
                2008.0,
                "Sean Franklin Category:Articles with hCards",
                "United States"
            ],
            [
                2009.0,
                "Omar Gonzalez Category:Articles with hCards",
                "United States"
            ],
            [
                2005.0,
                "Michael Parkhurst Category:Articles with hCards",
                "United States"
            ],
            [
                2002.0,
                "Kyle Martino Category:Articles with hCards",
                "United States"
            ],
            [
                2004.0,
                "Clint Dempsey Category:Articles with hCards",
                "United States"
            ],
            [
                2006.0,
                "Jonathan Bornstein Category:Articles with hCards",
                "United States"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (T1:`match_season.country`)-[]-(T2:`match_season.match_season`)\nRETURN T2.Season,T2.Player,T1.Country_name",
        "question": "For each player, what are their name, season, and country that they belong to?",
        "answers": [
            [
                2003.0,
                "Damani Ralph Category:Articles with hCards",
                "Indonesia"
            ],
            [
                2010.0,
                "Andy Najar Category:Articles with hCards",
                "Ireland"
            ],
            [
                1998.0,
                "Ben Olsen Category:Articles with hCards",
                "Ireland"
            ],
            [
                2001.0,
                "Rodrigo Faria Category:Articles with hCards",
                "Ireland"
            ],
            [
                2007.0,
                "Maurice Edu Category:Articles with hCards",
                "Ireland"
            ],
            [
                1999.0,
                "Jay Heaps Category:Articles with hCards",
                "Isle of Man"
            ],
            [
                2000.0,
                "Carlos Bocanegra Category:Articles with hCards",
                "Isle of Man"
            ],
            [
                1997.0,
                "Mike Duhaney Category:Articles with hCards",
                "United States"
            ],
            [
                2011.0,
                "C. J. Sapong Category:Articles with hCards",
                "United States"
            ],
            [
                1996.0,
                "Steve Ralston Category:Articles with hCards",
                "United States"
            ],
            [
                2008.0,
                "Sean Franklin Category:Articles with hCards",
                "United States"
            ],
            [
                2009.0,
                "Omar Gonzalez Category:Articles with hCards",
                "United States"
            ],
            [
                2005.0,
                "Michael Parkhurst Category:Articles with hCards",
                "United States"
            ],
            [
                2002.0,
                "Kyle Martino Category:Articles with hCards",
                "United States"
            ],
            [
                2004.0,
                "Clint Dempsey Category:Articles with hCards",
                "United States"
            ],
            [
                2006.0,
                "Jonathan Bornstein Category:Articles with hCards",
                "United States"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (T1:`match_season.country`)-[]-(T2:`match_season.match_season`)\nWHERE T1.Country_name = 'Indonesia'\nRETURN T2.Player",
        "question": "Which players are from Indonesia?",
        "answers": [
            [
                "Damani Ralph Category:Articles with hCards"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (T1:`match_season.country`)-[]-(T2:`match_season.match_season`)\nWHERE T1.Country_name = 'Indonesia'\nRETURN T2.Player",
        "question": "Who are the players from Indonesia?",
        "answers": [
            [
                "Damani Ralph Category:Articles with hCards"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (T1:`match_season.country`)-[]-(T2:`match_season.match_season`)\nWHERE T1.Capital = 'Dublin'\nRETURN DISTINCT T2.Position",
        "question": "What are the distinct positions of the players from a country whose capital is Dublin?",
        "answers": [
            [
                "Midfielder"
            ],
            [
                "Forward"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (T1:`match_season.country`)-[]-(T2:`match_season.match_season`)\nWHERE T1.Capital = 'Dublin'\nRETURN DISTINCT T2.Position",
        "question": "Give the different positions of players who play for the country with the capital Dublin.",
        "answers": [
            [
                "Midfielder"
            ],
            [
                "Forward"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (T1:`match_season.country`)-[]-(T2:`match_season.match_season`)\nWHERE T2.College = 'Maryland' OR T2.College = 'Duke'\nRETURN T1.Official_native_language",
        "question": "What are the official languages of the countries of players from Maryland or Duke college?",
        "answers": [
            [
                "English Manx"
            ],
            [
                "Irish English"
            ],
            [
                "English"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (T1:`match_season.country`)-[]-(T2:`match_season.match_season`)\nWHERE T2.College = 'Maryland' OR T2.College = 'Duke'\nRETURN T1.Official_native_language",
        "question": "Return the official native languages of countries who have players from Maryland or Duke colleges.",
        "answers": [
            [
                "English Manx"
            ],
            [
                "Irish English"
            ],
            [
                "English"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (T1:`match_season.country`)-[]-(T2:`match_season.match_season`)\nWHERE T2.Position = 'Defender'\nRETURN count(DISTINCT T1.Official_native_language)",
        "question": "How many distinct official languages are there among countries of players whose positions are defenders.",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (T1:`match_season.country`)-[]-(T2:`match_season.match_season`)\nWHERE T2.Position = 'Defender'\nRETURN count(DISTINCT T1.Official_native_language)",
        "question": "Count the number of different official languages corresponding to countries that players who play Defender are from.",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (T1:`match_season.match_season`)-[]-(T2:`match_season.team`)\nRETURN T1.Season,T1.Player,T2.Name",
        "question": "Show the season, the player, and the name of the team that players belong to.",
        "answers": [
            [
                1996.0,
                "Steve Ralston Category:Articles with hCards",
                "Columbus Crew"
            ],
            [
                1997.0,
                "Mike Duhaney Category:Articles with hCards",
                "Evalyn Feil"
            ],
            [
                2003.0,
                "Damani Ralph Category:Articles with hCards",
                "Evalyn Feil"
            ],
            [
                2002.0,
                "Kyle Martino Category:Articles with hCards",
                "Anais VonRueden"
            ],
            [
                1998.0,
                "Ben Olsen Category:Articles with hCards",
                "Anais VonRueden"
            ],
            [
                2004.0,
                "Clint Dempsey Category:Articles with hCards",
                "Anais VonRueden"
            ],
            [
                2011.0,
                "C. J. Sapong Category:Articles with hCards",
                "Anais VonRueden"
            ],
            [
                1999.0,
                "Jay Heaps Category:Articles with hCards",
                "Miami Fusion"
            ],
            [
                2005.0,
                "Michael Parkhurst Category:Articles with hCards",
                "Miami Fusion"
            ],
            [
                2008.0,
                "Sean Franklin Category:Articles with hCards",
                "Enrique Osinski"
            ],
            [
                2010.0,
                "Andy Najar Category:Articles with hCards",
                "Enrique Osinski"
            ],
            [
                2009.0,
                "Omar Gonzalez Category:Articles with hCards",
                "Enrique Osinski"
            ],
            [
                2000.0,
                "Carlos Bocanegra Category:Articles with hCards",
                "Enrique Osinski"
            ],
            [
                2001.0,
                "Rodrigo Faria Category:Articles with hCards",
                "Enrique Osinski"
            ],
            [
                2007.0,
                "Maurice Edu Category:Articles with hCards",
                "Ryley Goldner"
            ],
            [
                2006.0,
                "Jonathan Bornstein Category:Articles with hCards",
                "D.C. United"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (T1:`match_season.match_season`)-[]-(T2:`match_season.team`)\nRETURN T1.Season,T1.Player,T2.Name",
        "question": "Who are the different players, what season do they play in, and what is the name of the team they are on?",
        "answers": [
            [
                1996.0,
                "Steve Ralston Category:Articles with hCards",
                "Columbus Crew"
            ],
            [
                1997.0,
                "Mike Duhaney Category:Articles with hCards",
                "Evalyn Feil"
            ],
            [
                2003.0,
                "Damani Ralph Category:Articles with hCards",
                "Evalyn Feil"
            ],
            [
                2002.0,
                "Kyle Martino Category:Articles with hCards",
                "Anais VonRueden"
            ],
            [
                1998.0,
                "Ben Olsen Category:Articles with hCards",
                "Anais VonRueden"
            ],
            [
                2004.0,
                "Clint Dempsey Category:Articles with hCards",
                "Anais VonRueden"
            ],
            [
                2011.0,
                "C. J. Sapong Category:Articles with hCards",
                "Anais VonRueden"
            ],
            [
                1999.0,
                "Jay Heaps Category:Articles with hCards",
                "Miami Fusion"
            ],
            [
                2005.0,
                "Michael Parkhurst Category:Articles with hCards",
                "Miami Fusion"
            ],
            [
                2008.0,
                "Sean Franklin Category:Articles with hCards",
                "Enrique Osinski"
            ],
            [
                2010.0,
                "Andy Najar Category:Articles with hCards",
                "Enrique Osinski"
            ],
            [
                2009.0,
                "Omar Gonzalez Category:Articles with hCards",
                "Enrique Osinski"
            ],
            [
                2000.0,
                "Carlos Bocanegra Category:Articles with hCards",
                "Enrique Osinski"
            ],
            [
                2001.0,
                "Rodrigo Faria Category:Articles with hCards",
                "Enrique Osinski"
            ],
            [
                2007.0,
                "Maurice Edu Category:Articles with hCards",
                "Ryley Goldner"
            ],
            [
                2006.0,
                "Jonathan Bornstein Category:Articles with hCards",
                "D.C. United"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (T1:`match_season.match_season`)-[]-(T2:`match_season.team`)\nWHERE T2.Name = 'Ryley Goldner'\nRETURN T1.Position",
        "question": "Show the positions of the players from the team with name \"Ryley Goldner\".",
        "answers": [
            [
                "Midfielder"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (T1:`match_season.match_season`)-[]-(T2:`match_season.team`)\nWHERE T2.Name = 'Ryley Goldner'\nRETURN T1.Position",
        "question": "Return the positions of players on the team Ryley Goldner.",
        "answers": [
            [
                "Midfielder"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (T1:`match_season.match_season`)-[]-(T2:`match_season.team`)\nWHERE T2.Name = 'Columbus Crew'\nRETURN count(DISTINCT T1.College)",
        "question": "How many distinct colleges are associated with players from the team with name \"Columbus Crew\".",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (T1:`match_season.match_season`)-[]-(T2:`match_season.team`)\nWHERE T2.Name = 'Columbus Crew'\nRETURN count(DISTINCT T1.College)",
        "question": "Count the number of different colleges that players who play for Columbus Crew are from.",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (T1:`match_season.player`)-[]-(T2:`match_season.team`)\nWHERE T2.Name = 'Columbus Crew'\nRETURN T1.Player,T1.Years_Played",
        "question": "Show the players and years played for players from team \"Columbus Crew\".",
        "answers": [
            [
                "Im Kyu-tae (492)",
                "8 (2003\u20132005, 2007\u20132011)"
            ],
            [
                "Jeong Suk-Young (793)",
                "2 (2010\u20132011)"
            ],
            [
                "Seol Jae-Min (none)",
                "2 (2010-2011)"
            ],
            [
                "An Jae-Sung",
                "3 (2005, 2007\u20132008)"
            ],
            [
                "Cho Soong-Jae (630)",
                "1 (2011)"
            ],
            [
                "Chung Hong (717)",
                "1 (2011)"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (T1:`match_season.player`)-[]-(T2:`match_season.team`)\nWHERE T2.Name = 'Columbus Crew'\nRETURN T1.Player,T1.Years_Played",
        "question": "What are the players who played for Columbus Crew, and how many years did each play for?",
        "answers": [
            [
                "Im Kyu-tae (492)",
                "8 (2003\u20132005, 2007\u20132011)"
            ],
            [
                "Jeong Suk-Young (793)",
                "2 (2010\u20132011)"
            ],
            [
                "Seol Jae-Min (none)",
                "2 (2010-2011)"
            ],
            [
                "An Jae-Sung",
                "3 (2005, 2007\u20132008)"
            ],
            [
                "Cho Soong-Jae (630)",
                "1 (2011)"
            ],
            [
                "Chung Hong (717)",
                "1 (2011)"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (match_season:`match_season.match_season`)\nRETURN match_season.Position,count(*)",
        "question": "Show the position of players and the corresponding number of players.",
        "answers": [
            [
                "Midfielder",
                6
            ],
            [
                "Defender",
                7
            ],
            [
                "Forward",
                3
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (match_season:`match_season.match_season`)\nRETURN match_season.Position,count(*)",
        "question": "How many players played each position?",
        "answers": [
            [
                "Midfielder",
                6
            ],
            [
                "Defender",
                7
            ],
            [
                "Forward",
                3
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (match_season:`match_season.match_season`)\nRETURN match_season.Player\nORDER BY match_season.College ASC",
        "question": "Return all players sorted by college in ascending alphabetical order.",
        "answers": [
            [
                "Sean Franklin Category:Articles with hCards"
            ],
            [
                "Rodrigo Faria Category:Articles with hCards"
            ],
            [
                "Damani Ralph Category:Articles with hCards"
            ],
            [
                "Jay Heaps Category:Articles with hCards"
            ],
            [
                "Steve Ralston Category:Articles with hCards"
            ],
            [
                "Clint Dempsey Category:Articles with hCards"
            ],
            [
                "C. J. Sapong Category:Articles with hCards"
            ],
            [
                "Maurice Edu Category:Articles with hCards"
            ],
            [
                "Omar Gonzalez Category:Articles with hCards"
            ],
            [
                "Carlos Bocanegra Category:Articles with hCards"
            ],
            [
                "Jonathan Bornstein Category:Articles with hCards"
            ],
            [
                "Mike Duhaney Category:Articles with hCards"
            ],
            [
                "Ben Olsen Category:Articles with hCards"
            ],
            [
                "Kyle Martino Category:Articles with hCards"
            ],
            [
                "Michael Parkhurst Category:Articles with hCards"
            ],
            [
                "Andy Najar Category:Articles with hCards"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (match_season:`match_season.match_season`)\nRETURN match_season.Player\nORDER BY match_season.College ASC",
        "question": "What are all the players who played in match season, sorted by college in ascending alphabetical order?",
        "answers": [
            [
                "Sean Franklin Category:Articles with hCards"
            ],
            [
                "Rodrigo Faria Category:Articles with hCards"
            ],
            [
                "Damani Ralph Category:Articles with hCards"
            ],
            [
                "Jay Heaps Category:Articles with hCards"
            ],
            [
                "Steve Ralston Category:Articles with hCards"
            ],
            [
                "Clint Dempsey Category:Articles with hCards"
            ],
            [
                "C. J. Sapong Category:Articles with hCards"
            ],
            [
                "Maurice Edu Category:Articles with hCards"
            ],
            [
                "Omar Gonzalez Category:Articles with hCards"
            ],
            [
                "Carlos Bocanegra Category:Articles with hCards"
            ],
            [
                "Jonathan Bornstein Category:Articles with hCards"
            ],
            [
                "Mike Duhaney Category:Articles with hCards"
            ],
            [
                "Ben Olsen Category:Articles with hCards"
            ],
            [
                "Kyle Martino Category:Articles with hCards"
            ],
            [
                "Michael Parkhurst Category:Articles with hCards"
            ],
            [
                "Andy Najar Category:Articles with hCards"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (match_season:`match_season.match_season`)\nWITH count(*) AS count, match_season.College AS College\nWHERE count  >= 2\nRETURN College",
        "question": "Show the name of colleges that have at least two players.",
        "answers": [
            [
                "Virginia"
            ],
            [
                "UCLA"
            ],
            [
                "Maryland"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (match_season:`match_season.match_season`)\nWITH count(*) AS count, match_season.College AS College\nWHERE count  >= 2\nRETURN College",
        "question": "What are the names of all colleges that have two or more players?",
        "answers": [
            [
                "Virginia"
            ],
            [
                "UCLA"
            ],
            [
                "Maryland"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (team:`match_season.team`)\nWHERE NOT (team)-[]-(:`match_season.match_season`)    \nRETURN team.Name",
        "question": "What are the names of teams that do no have match season record?",
        "answers": [
            [
                "Brown Erdman"
            ],
            [
                "Los Angeles Galaxy"
            ],
            [
                "Berneice Hand"
            ]
        ]
    },
    {
        "db_id": "match_season",
        "query": "MATCH (team:`match_season.team`)\nWHERE NOT (team)-[]-(:`match_season.match_season`)    \nRETURN team.Name",
        "question": "Return the names of teams that have no match season record.",
        "answers": [
            [
                "Brown Erdman"
            ],
            [
                "Los Angeles Galaxy"
            ],
            [
                "Berneice Hand"
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (climber:`climbing.climber`)\nRETURN count(*)",
        "question": "How many climbers are there?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (climber:`climbing.climber`)\nRETURN count(*)",
        "question": "Count the number of climbers.",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (climber:`climbing.climber`)\nRETURN climber.Name\nORDER BY climber.Points DESC",
        "question": "List the names of climbers in descending order of points.",
        "answers": [
            [
                "Klaus Enders"
            ],
            [
                "Siegfried Schauzu"
            ],
            [
                "Hans Luthringhauser"
            ],
            [
                "Jean Claude Castella"
            ],
            [
                "Horst Owesle"
            ],
            [
                "Georg Auerbacher"
            ],
            [
                "Arseneus Butscher"
            ],
            [
                "Charlie Freedman"
            ],
            [
                "L Currie"
            ],
            [
                "Mick Horsepole"
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (climber:`climbing.climber`)\nRETURN climber.Name\nORDER BY climber.Points DESC",
        "question": "What are the names of the climbers, ordered by points descending?",
        "answers": [
            [
                "Klaus Enders"
            ],
            [
                "Siegfried Schauzu"
            ],
            [
                "Hans Luthringhauser"
            ],
            [
                "Jean Claude Castella"
            ],
            [
                "Horst Owesle"
            ],
            [
                "Georg Auerbacher"
            ],
            [
                "Arseneus Butscher"
            ],
            [
                "Charlie Freedman"
            ],
            [
                "L Currie"
            ],
            [
                "Mick Horsepole"
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (climber:`climbing.climber`)\nWHERE climber.Country <> 'Switzerland'\nRETURN climber.Name",
        "question": "List the names of climbers whose country is not Switzerland.",
        "answers": [
            [
                "Klaus Enders"
            ],
            [
                "Siegfried Schauzu"
            ],
            [
                "Hans Luthringhauser"
            ],
            [
                "Horst Owesle"
            ],
            [
                "Georg Auerbacher"
            ],
            [
                "Arseneus Butscher"
            ],
            [
                "Charlie Freedman"
            ],
            [
                "L Currie"
            ],
            [
                "Mick Horsepole"
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (climber:`climbing.climber`)\nWHERE climber.Country <> 'Switzerland'\nRETURN climber.Name",
        "question": "What are the names of climbers who are not from the country of Switzerland?",
        "answers": [
            [
                "Klaus Enders"
            ],
            [
                "Siegfried Schauzu"
            ],
            [
                "Hans Luthringhauser"
            ],
            [
                "Horst Owesle"
            ],
            [
                "Georg Auerbacher"
            ],
            [
                "Arseneus Butscher"
            ],
            [
                "Charlie Freedman"
            ],
            [
                "L Currie"
            ],
            [
                "Mick Horsepole"
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (climber:`climbing.climber`)\nWHERE climber.Country = 'United Kingdom'\nRETURN max(climber.Points)",
        "question": "What is the maximum point for climbers whose country is United Kingdom?",
        "answers": [
            [
                3.0
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (climber:`climbing.climber`)\nWHERE climber.Country = 'United Kingdom'\nRETURN max(climber.Points)",
        "question": "Return the maximum number of points for climbers from the United Kingdom.",
        "answers": [
            [
                3.0
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (climber:`climbing.climber`)\nRETURN count(DISTINCT climber.Country)",
        "question": "How many distinct countries are the climbers from?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (climber:`climbing.climber`)\nRETURN count(DISTINCT climber.Country)",
        "question": "Count the number of different countries that climbers are from.",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (mountain:`climbing.mountain`)\nRETURN mountain.Name\nORDER BY mountain.Name ASC",
        "question": "What are the names of mountains in ascending alphabetical order?",
        "answers": [
            [
                "Duwoni / Mt Speke (Vittorio Emanuele Pk)"
            ],
            [
                "Kibo (Uhuru Pk)"
            ],
            [
                "Mawenzi (Hans Meyer Pk)"
            ],
            [
                "Mount Kenya (Batian)"
            ],
            [
                "Mount Kenya (Lenana)"
            ],
            [
                "Ngaliema / Mt Stanley (Margherita Pk)"
            ],
            [
                "Ngaliema / Mt Stanley (Savoia Pk)"
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (mountain:`climbing.mountain`)\nRETURN mountain.Name\nORDER BY mountain.Name ASC",
        "question": "Give the names of mountains in alphabetical order.",
        "answers": [
            [
                "Duwoni / Mt Speke (Vittorio Emanuele Pk)"
            ],
            [
                "Kibo (Uhuru Pk)"
            ],
            [
                "Mawenzi (Hans Meyer Pk)"
            ],
            [
                "Mount Kenya (Batian)"
            ],
            [
                "Mount Kenya (Lenana)"
            ],
            [
                "Ngaliema / Mt Stanley (Margherita Pk)"
            ],
            [
                "Ngaliema / Mt Stanley (Savoia Pk)"
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (mountain:`climbing.mountain`)\nWHERE mountain.Height > 5000\nRETURN mountain.Country",
        "question": "What are the countries of mountains with height bigger than 5000?",
        "answers": [
            [
                "Tanzania"
            ],
            [
                "Kenya"
            ],
            [
                "Tanzania"
            ],
            [
                "DR Congo Uganda"
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (mountain:`climbing.mountain`)\nWHERE mountain.Height > 5000\nRETURN mountain.Country",
        "question": "Return the countries of the mountains that have a height larger than 5000.",
        "answers": [
            [
                "Tanzania"
            ],
            [
                "Kenya"
            ],
            [
                "Tanzania"
            ],
            [
                "DR Congo Uganda"
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (mountain:`climbing.mountain`)\nRETURN mountain.Name\nORDER BY mountain.Height DESC\nLIMIT 1",
        "question": "What is the name of the highest mountain?",
        "answers": [
            [
                "Kibo (Uhuru Pk)"
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (mountain:`climbing.mountain`)\nRETURN mountain.Name\nORDER BY mountain.Height DESC\nLIMIT 1",
        "question": "Return the name of the mountain with the greatest height.",
        "answers": [
            [
                "Kibo (Uhuru Pk)"
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (T1:`climbing.climber`)-[]-(T2:`climbing.mountain`)\nRETURN T1.Name,T2.Name",
        "question": "Show names of climbers and the names of mountains they climb.",
        "answers": [
            [
                "Klaus Enders",
                "Kibo (Uhuru Pk)"
            ],
            [
                "Siegfried Schauzu",
                "Kibo (Uhuru Pk)"
            ],
            [
                "Hans Luthringhauser",
                "Mount Kenya (Batian)"
            ],
            [
                "Jean Claude Castella",
                "Mount Kenya (Batian)"
            ],
            [
                "Horst Owesle",
                "Mount Kenya (Batian)"
            ],
            [
                "Georg Auerbacher",
                "Mawenzi (Hans Meyer Pk)"
            ],
            [
                "Arseneus Butscher",
                "Mount Kenya (Lenana)"
            ],
            [
                "Charlie Freedman",
                "Mount Kenya (Lenana)"
            ],
            [
                "L Currie",
                "Duwoni / Mt Speke (Vittorio Emanuele Pk)"
            ],
            [
                "Mick Horsepole",
                "Duwoni / Mt Speke (Vittorio Emanuele Pk)"
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (T1:`climbing.climber`)-[]-(T2:`climbing.mountain`)\nRETURN T1.Name,T2.Name",
        "question": "What are the names of climbers and the corresponding names of mountains that they climb?",
        "answers": [
            [
                "Klaus Enders",
                "Kibo (Uhuru Pk)"
            ],
            [
                "Siegfried Schauzu",
                "Kibo (Uhuru Pk)"
            ],
            [
                "Hans Luthringhauser",
                "Mount Kenya (Batian)"
            ],
            [
                "Jean Claude Castella",
                "Mount Kenya (Batian)"
            ],
            [
                "Horst Owesle",
                "Mount Kenya (Batian)"
            ],
            [
                "Georg Auerbacher",
                "Mawenzi (Hans Meyer Pk)"
            ],
            [
                "Arseneus Butscher",
                "Mount Kenya (Lenana)"
            ],
            [
                "Charlie Freedman",
                "Mount Kenya (Lenana)"
            ],
            [
                "L Currie",
                "Duwoni / Mt Speke (Vittorio Emanuele Pk)"
            ],
            [
                "Mick Horsepole",
                "Duwoni / Mt Speke (Vittorio Emanuele Pk)"
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (T1:`climbing.climber`)-[]-(T2:`climbing.mountain`)\nRETURN T1.Name,T2.Height",
        "question": "Show the names of climbers and the heights of mountains they climb.",
        "answers": [
            [
                "Klaus Enders",
                5895.0
            ],
            [
                "Siegfried Schauzu",
                5895.0
            ],
            [
                "Hans Luthringhauser",
                5199.0
            ],
            [
                "Jean Claude Castella",
                5199.0
            ],
            [
                "Horst Owesle",
                5199.0
            ],
            [
                "Georg Auerbacher",
                5148.0
            ],
            [
                "Arseneus Butscher",
                4985.0
            ],
            [
                "Charlie Freedman",
                4985.0
            ],
            [
                "L Currie",
                4890.0
            ],
            [
                "Mick Horsepole",
                4890.0
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (T1:`climbing.climber`)-[]-(T2:`climbing.mountain`)\nRETURN T1.Name,T2.Height",
        "question": "What are the names of climbers and the corresponding heights of the mountains that they climb?",
        "answers": [
            [
                "Klaus Enders",
                5895.0
            ],
            [
                "Siegfried Schauzu",
                5895.0
            ],
            [
                "Hans Luthringhauser",
                5199.0
            ],
            [
                "Jean Claude Castella",
                5199.0
            ],
            [
                "Horst Owesle",
                5199.0
            ],
            [
                "Georg Auerbacher",
                5148.0
            ],
            [
                "Arseneus Butscher",
                4985.0
            ],
            [
                "Charlie Freedman",
                4985.0
            ],
            [
                "L Currie",
                4890.0
            ],
            [
                "Mick Horsepole",
                4890.0
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (T1:`climbing.climber`)-[]-(T2:`climbing.mountain`)\nRETURN T2.Height\nORDER BY T1.Points DESC\nLIMIT 1",
        "question": "Show the height of the mountain climbed by the climber with the maximum points.",
        "answers": [
            [
                5895.0
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (T1:`climbing.climber`)-[]-(T2:`climbing.mountain`)\nRETURN T2.Height\nORDER BY T1.Points DESC\nLIMIT 1",
        "question": "What is the height of the mountain climbined by the climbing who had the most points?",
        "answers": [
            [
                5895.0
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (T1:`climbing.climber`)-[]-(T2:`climbing.mountain`)\nWHERE T1.Country = 'West Germany'\nRETURN DISTINCT T2.Name",
        "question": "Show the distinct names of mountains climbed by climbers from country \"West Germany\".",
        "answers": [
            [
                "Kibo (Uhuru Pk)"
            ],
            [
                "Mount Kenya (Batian)"
            ],
            [
                "Mawenzi (Hans Meyer Pk)"
            ],
            [
                "Mount Kenya (Lenana)"
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (T1:`climbing.climber`)-[]-(T2:`climbing.mountain`)\nWHERE T1.Country = 'West Germany'\nRETURN DISTINCT T2.Name",
        "question": "What are the different names of mountains ascended by climbers from the country of West Germany?",
        "answers": [
            [
                "Kibo (Uhuru Pk)"
            ],
            [
                "Mount Kenya (Batian)"
            ],
            [
                "Mawenzi (Hans Meyer Pk)"
            ],
            [
                "Mount Kenya (Lenana)"
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (T1:`climbing.climber`)-[]-(T2:`climbing.mountain`)\nWHERE T2.Country = 'Uganda'\nRETURN T1.Time",
        "question": "Show the times used by climbers to climb mountains in Country Uganda.",
        "answers": [
            [
                "1:27.28.8"
            ],
            [
                "1:25.40.6"
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (T1:`climbing.climber`)-[]-(T2:`climbing.mountain`)\nWHERE T2.Country = 'Uganda'\nRETURN T1.Time",
        "question": "What are the times used by climbers who climbed mountains in the country of Uganda?",
        "answers": [
            [
                "1:27.28.8"
            ],
            [
                "1:25.40.6"
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (climber:`climbing.climber`)\nRETURN climber.Country,count(*)",
        "question": "Please show the countries and the number of climbers from each country.",
        "answers": [
            [
                "West Germany",
                6
            ],
            [
                "Switzerland",
                1
            ],
            [
                "United Kingdom",
                3
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (climber:`climbing.climber`)\nRETURN climber.Country,count(*)",
        "question": "How many climbers are from each country?",
        "answers": [
            [
                "West Germany",
                6
            ],
            [
                "Switzerland",
                1
            ],
            [
                "United Kingdom",
                3
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (mountain:`climbing.mountain`)\nWITH count(*) AS count, mountain.Country AS Country\nWHERE count  > 1\nRETURN Country",
        "question": "List the countries that have more than one mountain.",
        "answers": [
            [
                "Tanzania"
            ],
            [
                "Kenya"
            ],
            [
                "Uganda"
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (mountain:`climbing.mountain`)\nWITH count(*) AS count, mountain.Country AS Country\nWHERE count  > 1\nRETURN Country",
        "question": "Which countries have more than one mountain?",
        "answers": [
            [
                "Tanzania"
            ],
            [
                "Kenya"
            ],
            [
                "Uganda"
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (mountain:`climbing.mountain`)\nWHERE NOT (mountain)-[]-(:`climbing.climber`)    \nRETURN mountain.Name",
        "question": "List the names of mountains that do not have any climber.",
        "answers": [
            [
                "Ngaliema / Mt Stanley (Margherita Pk)"
            ],
            [
                "Ngaliema / Mt Stanley (Savoia Pk)"
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (mountain:`climbing.mountain`)\nWHERE NOT (mountain)-[]-(:`climbing.climber`)    \nRETURN mountain.Name",
        "question": "What are the names of countains that no climber has climbed?",
        "answers": [
            [
                "Ngaliema / Mt Stanley (Margherita Pk)"
            ],
            [
                "Ngaliema / Mt Stanley (Savoia Pk)"
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (mountain:`climbing.mountain`)\nRETURN mountain.Range\nORDER BY mountain.Range DESC\nLIMIT 1",
        "question": "Show the range that has the most number of mountains.",
        "answers": [
            [
                "Rwenzori"
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (mountain:`climbing.mountain`)\nRETURN mountain.Range\nORDER BY mountain.Range DESC\nLIMIT 1",
        "question": "Which range contains the most mountains?",
        "answers": [
            [
                "Rwenzori"
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (mountain:`climbing.mountain`)\nWHERE mountain.Height > 5000 OR mountain.Prominence > 1000\nRETURN mountain.Name",
        "question": "Show the names of mountains with height more than 5000 or prominence more than 1000.",
        "answers": [
            [
                "Kibo (Uhuru Pk)"
            ],
            [
                "Mount Kenya (Batian)"
            ],
            [
                "Mawenzi (Hans Meyer Pk)"
            ],
            [
                "Ngaliema / Mt Stanley (Margherita Pk)"
            ]
        ]
    },
    {
        "db_id": "climbing",
        "query": "MATCH (mountain:`climbing.mountain`)\nWHERE mountain.Height > 5000 OR mountain.Prominence > 1000\nRETURN mountain.Name",
        "question": "What are the names of mountains that have a height of over 5000 or a prominence of over 1000?",
        "answers": [
            [
                "Kibo (Uhuru Pk)"
            ],
            [
                "Mount Kenya (Batian)"
            ],
            [
                "Mawenzi (Hans Meyer Pk)"
            ],
            [
                "Ngaliema / Mt Stanley (Margherita Pk)"
            ]
        ]
    },
    {
        "db_id": "body_builder",
        "query": "MATCH (body_builder:`body_builder.body_builder`)\nRETURN count(*)",
        "question": "How many body builders are there?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "body_builder",
        "query": "MATCH (body_builder:`body_builder.body_builder`)\nRETURN body_builder.Total\nORDER BY body_builder.Total ASC",
        "question": "List the total scores of body builders in ascending order.",
        "answers": [
            [
                292.5
            ],
            [
                312.5
            ],
            [
                315.0
            ],
            [
                315.0
            ],
            [
                317.5
            ]
        ]
    },
    {
        "db_id": "body_builder",
        "query": "MATCH (body_builder:`body_builder.body_builder`)\nRETURN body_builder.Snatch,body_builder.Clean_Jerk\nORDER BY body_builder.Snatch ASC",
        "question": "List the snatch score and clean jerk score of body builders in ascending order of snatch score.",
        "answers": [
            [
                130.0,
                162.5
            ],
            [
                137.5,
                177.5
            ],
            [
                137.5,
                175.0
            ],
            [
                140.0,
                175.0
            ],
            [
                142.5,
                175.0
            ]
        ]
    },
    {
        "db_id": "body_builder",
        "query": "MATCH (body_builder:`body_builder.body_builder`)\nRETURN avg(body_builder.Snatch)",
        "question": "What is the average snatch score of body builders?",
        "answers": [
            [
                137.5
            ]
        ]
    },
    {
        "db_id": "body_builder",
        "query": "MATCH (body_builder:`body_builder.body_builder`)\nRETURN body_builder.Clean_Jerk\nORDER BY body_builder.Total DESC\nLIMIT 1",
        "question": "What are the clean and jerk score of the body builder with the highest total score?",
        "answers": [
            [
                175.0
            ]
        ]
    },
    {
        "db_id": "body_builder",
        "query": "MATCH (people:`body_builder.people`)\nRETURN people.Birth_Date\nORDER BY people.Height ASC",
        "question": "What are the birthdays of people in ascending order of height?",
        "answers": [
            [
                "January 1, 1992"
            ],
            [
                "March 30, 1976"
            ],
            [
                "February 13, 1985"
            ],
            [
                "December 5, 1991"
            ],
            [
                "July 4, 1990"
            ],
            [
                "May 5, 1987"
            ]
        ]
    },
    {
        "db_id": "body_builder",
        "query": "MATCH (T1:`body_builder.body_builder`)-[]-(T2:`body_builder.people`)\nRETURN T2.Name",
        "question": "What are the names of body builders?",
        "answers": [
            [
                "Jack Campbell"
            ],
            [
                "Ty Conklin"
            ],
            [
                "Al Montoya"
            ],
            [
                "Cam Fowler"
            ],
            [
                "Jake Gardiner"
            ]
        ]
    },
    {
        "db_id": "body_builder",
        "query": "MATCH (T1:`body_builder.body_builder`)-[]-(T2:`body_builder.people`)\nWHERE T1.Total > 300\nRETURN T2.Name",
        "question": "What are the names of body builders whose total score is higher than 300?",
        "answers": [
            [
                "Jack Campbell"
            ],
            [
                "Ty Conklin"
            ],
            [
                "Al Montoya"
            ],
            [
                "Cam Fowler"
            ]
        ]
    },
    {
        "db_id": "body_builder",
        "query": "MATCH (T1:`body_builder.body_builder`)-[]-(T2:`body_builder.people`)\nRETURN T2.Name\nORDER BY T2.Weight DESC\nLIMIT 1",
        "question": "What is the name of the body builder with the greatest body weight?",
        "answers": [
            [
                "Al Montoya"
            ]
        ]
    },
    {
        "db_id": "body_builder",
        "query": "MATCH (T1:`body_builder.body_builder`)-[]-(T2:`body_builder.people`)\nRETURN T2.Birth_Date,T2.Birth_Place\nORDER BY T1.Total DESC\nLIMIT 1",
        "question": "What are the birth date and birth place of the body builder with the highest total points?",
        "answers": [
            [
                "January 1, 1992",
                "Port Huron, Michigan"
            ]
        ]
    },
    {
        "db_id": "body_builder",
        "query": "MATCH (T1:`body_builder.body_builder`)-[]-(T2:`body_builder.people`)\nWHERE T1.Total < 315\nRETURN T2.Height",
        "question": "What are the heights of body builders with total score smaller than 315?",
        "answers": [
            [
                196.0
            ],
            [
                205.0
            ]
        ]
    },
    {
        "db_id": "body_builder",
        "query": "MATCH (T1:`body_builder.body_builder`)-[]-(T2:`body_builder.people`)\nRETURN T2.Name\nORDER BY T1.Total DESC",
        "question": "What are the names of body builders in descending order of total scores?",
        "answers": [
            [
                "Jack Campbell"
            ],
            [
                "Ty Conklin"
            ],
            [
                "Al Montoya"
            ],
            [
                "Cam Fowler"
            ],
            [
                "Jake Gardiner"
            ]
        ]
    },
    {
        "db_id": "body_builder",
        "query": "MATCH (people:`body_builder.people`)\nRETURN people.Birth_Place,count(*)",
        "question": "List each birth place along with the number of people from there.",
        "answers": [
            [
                "Port Huron, Michigan",
                1
            ],
            [
                "Anchorage, Alaska",
                1
            ],
            [
                "Glenview, Illinois",
                1
            ],
            [
                "Nashua, New Hampshire",
                1
            ],
            [
                "Farmington Hills, Michigan",
                1
            ],
            [
                "Minnetonka, Minnesota",
                1
            ]
        ]
    },
    {
        "db_id": "body_builder",
        "query": "MATCH (people:`body_builder.people`)\nRETURN people.Birth_Place\nORDER BY people.Birth_Place DESC\nLIMIT 1",
        "question": "What is the most common birth place of people?",
        "answers": [
            [
                "Port Huron, Michigan"
            ]
        ]
    },
    {
        "db_id": "body_builder",
        "query": "MATCH (people:`body_builder.people`)\nWITH count(*) AS count, people.Birth_Place AS Birth_Place\nWHERE count  >= 2\nRETURN Birth_Place",
        "question": "What are the birth places that are shared by at least two people?",
        "answers": []
    },
    {
        "db_id": "body_builder",
        "query": "MATCH (people:`body_builder.people`)\nRETURN people.Height,people.Weight\nORDER BY people.Height DESC",
        "question": "List the height and weight of people in descending order of height.",
        "answers": [
            [
                215.0,
                102.0
            ],
            [
                205.0,
                92.0
            ],
            [
                196.0,
                89.0
            ],
            [
                195.0,
                100.0
            ],
            [
                192.0,
                90.0
            ],
            [
                182.0,
                80.0
            ]
        ]
    },
    {
        "db_id": "body_builder",
        "query": "MATCH (people:`body_builder.people`)\nRETURN count(DISTINCT people.Birth_Place)",
        "question": "How many distinct birth places are there?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "body_builder",
        "query": "MATCH (people:`body_builder.people`)\nWHERE NOT (people)-[]-(:`body_builder.body_builder`)    \nRETURN count(*)",
        "question": "How many persons are not body builders?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "body_builder",
        "query": "MATCH (T1:`body_builder.body_builder`)-[]-(T2:`body_builder.people`)\nWHERE T1.Snatch > 140 OR T2.Height > 200\nRETURN T2.Weight",
        "question": "List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.",
        "answers": [
            [
                80.0
            ],
            [
                92.0
            ]
        ]
    },
    {
        "db_id": "body_builder",
        "query": "MATCH (body_builder:`body_builder.body_builder`)\nRETURN min(body_builder.Snatch)",
        "question": "What is the minimum snatch score?",
        "answers": [
            [
                130.0
            ]
        ]
    },
    {
        "db_id": "election_representative",
        "query": "MATCH (election:`election_representative.election`)\nRETURN count(*)",
        "question": "How many elections are there?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "election_representative",
        "query": "MATCH (election:`election_representative.election`)\nRETURN election.Votes\nORDER BY election.Votes DESC",
        "question": "List the votes of elections in descending order.",
        "answers": [
            [
                14077.0
            ],
            [
                13049.0
            ],
            [
                12422.0
            ],
            [
                11059.0
            ],
            [
                9423.0
            ]
        ]
    },
    {
        "db_id": "election_representative",
        "query": "MATCH (election:`election_representative.election`)\nRETURN election.Date,election.Vote_Percent",
        "question": "List the dates and vote percents of elections.",
        "answers": [
            [
                "July 1942",
                16.2
            ],
            [
                "October 1942",
                18.5
            ],
            [
                "1946",
                19.5
            ],
            [
                "1949",
                19.5
            ],
            [
                "1953",
                16.0
            ]
        ]
    },
    {
        "db_id": "election_representative",
        "query": "MATCH (election:`election_representative.election`)\nRETURN min(election.Vote_Percent),max(election.Vote_Percent)",
        "question": "What are the minimum and maximum vote percents of elections?",
        "answers": [
            [
                16.0,
                19.5
            ]
        ]
    },
    {
        "db_id": "election_representative",
        "query": "MATCH (representative:`election_representative.representative`)\nRETURN representative.Name,representative.Party",
        "question": "What are the names and parties of representatives?",
        "answers": [
            [
                "Dan Quayle",
                "Republican"
            ],
            [
                "John Quayle",
                "Democratic"
            ],
            [
                "Al Quie",
                "Republican"
            ],
            [
                "James M. Quigley",
                "Democratic"
            ],
            [
                "Jimmy Quillen",
                "Republican"
            ],
            [
                "Jack Quinn",
                "Republican"
            ],
            [
                "James L. Quinn",
                "Democratic"
            ]
        ]
    },
    {
        "db_id": "election_representative",
        "query": "MATCH (representative:`election_representative.representative`)\nWHERE representative.Party <> 'Republican'\nRETURN representative.Name",
        "question": "What are the names of representatives whose party is not \"Republican\"?",
        "answers": [
            [
                "John Quayle"
            ],
            [
                "James M. Quigley"
            ],
            [
                "James L. Quinn"
            ]
        ]
    },
    {
        "db_id": "election_representative",
        "query": "MATCH (representative:`election_representative.representative`)\nWHERE representative.State = 'New York' OR representative.State = 'Indiana'\nRETURN representative.Lifespan",
        "question": "What are the life spans of representatives from New York state or Indiana state?",
        "answers": [
            [
                "1947\u2013"
            ],
            [
                "1868\u20131930"
            ],
            [
                "1951\u2013"
            ]
        ]
    },
    {
        "db_id": "election_representative",
        "query": "MATCH (T1:`election_representative.election`)-[]-(T2:`election_representative.representative`)\nRETURN T2.Name,T1.Date",
        "question": "What are the names of representatives and the dates of elections they participated in.",
        "answers": [
            [
                "Dan Quayle",
                "July 1942"
            ],
            [
                "John Quayle",
                "October 1942"
            ],
            [
                "James M. Quigley",
                "1946"
            ],
            [
                "Jimmy Quillen",
                "1949"
            ],
            [
                "James L. Quinn",
                "1953"
            ]
        ]
    },
    {
        "db_id": "election_representative",
        "query": "MATCH (T1:`election_representative.election`)-[]-(T2:`election_representative.representative`)\nWHERE T1.Votes > 10000\nRETURN T2.Name",
        "question": "What are the names of representatives with more than 10000 votes in election?",
        "answers": [
            [
                "John Quayle"
            ],
            [
                "James M. Quigley"
            ],
            [
                "Jimmy Quillen"
            ],
            [
                "James L. Quinn"
            ]
        ]
    },
    {
        "db_id": "election_representative",
        "query": "MATCH (T1:`election_representative.election`)-[]-(T2:`election_representative.representative`)\nRETURN T2.Name\nORDER BY T1.Votes DESC",
        "question": "What are the names of representatives in descending order of votes?",
        "answers": [
            [
                "Jimmy Quillen"
            ],
            [
                "James M. Quigley"
            ],
            [
                "James L. Quinn"
            ],
            [
                "John Quayle"
            ],
            [
                "Dan Quayle"
            ]
        ]
    },
    {
        "db_id": "election_representative",
        "query": "MATCH (T1:`election_representative.election`)-[]-(T2:`election_representative.representative`)\nRETURN T2.Party\nORDER BY T1.Votes ASC\nLIMIT 1",
        "question": "What is the party of the representative that has the smallest number of votes.",
        "answers": [
            [
                "Republican"
            ]
        ]
    },
    {
        "db_id": "election_representative",
        "query": "MATCH (T1:`election_representative.election`)-[]-(T2:`election_representative.representative`)\nRETURN T2.Lifespan\nORDER BY T1.Vote_Percent DESC",
        "question": "What are the lifespans of representatives in descending order of vote percent?",
        "answers": [
            [
                "1918\u2013"
            ],
            [
                "1916\u20132003"
            ],
            [
                "1868\u20131930"
            ],
            [
                "1947\u2013"
            ],
            [
                "1875\u20131960"
            ]
        ]
    },
    {
        "db_id": "election_representative",
        "query": "MATCH (representative:`election_representative.representative`)\nRETURN representative.Party,count(*)",
        "question": "What are the different parties of representative? Show the party name and the number of representatives in each party.",
        "answers": [
            [
                "Republican",
                4
            ],
            [
                "Democratic",
                3
            ]
        ]
    },
    {
        "db_id": "election_representative",
        "query": "MATCH (representative:`election_representative.representative`)\nRETURN representative.Party,count(*)\nORDER BY representative.Party DESC\nLIMIT 1",
        "question": "What is the party that has the largest number of representatives?",
        "answers": [
            [
                "Republican",
                4
            ]
        ]
    },
    {
        "db_id": "election_representative",
        "query": "MATCH (representative:`election_representative.representative`)\nWITH count(*) AS count, representative.Party AS Party\nWHERE count  >= 3\nRETURN Party",
        "question": "What parties have at least three representatives?",
        "answers": [
            [
                "Republican"
            ],
            [
                "Democratic"
            ]
        ]
    },
    {
        "db_id": "election_representative",
        "query": "MATCH (representative:`election_representative.representative`)\nWITH count(*) AS count, representative.State AS State\nWHERE count  >= 2\nRETURN State",
        "question": "What states have at least two representatives?",
        "answers": [
            [
                "New York"
            ],
            [
                "Pennsylvania"
            ]
        ]
    },
    {
        "db_id": "election_representative",
        "query": "MATCH (representative:`election_representative.representative`)\nWHERE NOT (representative)-[]-(:`election_representative.election`)    \nRETURN representative.Name",
        "question": "List the names of representatives that have not participated in elections listed here.",
        "answers": [
            [
                "Al Quie"
            ],
            [
                "Jack Quinn"
            ]
        ]
    },
    {
        "db_id": "election_representative",
        "query": "MATCH (representative:`election_representative.representative`)\nRETURN count(DISTINCT representative.Party)",
        "question": "How many distinct parties are there for representatives?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (apartment_bookings:`apartment_rentals.Apartment_Bookings`)\nRETURN count(*)",
        "question": "How many apartment bookings are there in total?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (apartment_bookings:`apartment_rentals.Apartment_Bookings`)\nRETURN count(*)",
        "question": "Count the total number of apartment bookings.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (apartment_bookings:`apartment_rentals.Apartment_Bookings`)\nRETURN apartment_bookings.booking_start_date,apartment_bookings.booking_end_date",
        "question": "Show the start dates and end dates of all the apartment bookings.",
        "answers": [
            [
                "2016-09-26 17:13:49",
                "2017-10-07 11:38:48"
            ],
            [
                "2016-04-01 06:28:08",
                "2017-10-25 11:08:42"
            ],
            [
                "2017-03-13 16:20:14",
                "2018-02-19 16:59:08"
            ],
            [
                "2016-08-04 10:33:00",
                "2017-09-29 12:43:50"
            ],
            [
                "2017-02-11 14:34:14",
                "2017-10-07 20:47:19"
            ],
            [
                "2016-05-24 20:09:38",
                "2017-10-03 01:56:21"
            ],
            [
                "2016-07-25 02:57:04",
                "2017-09-28 11:08:15"
            ],
            [
                "2016-11-26 05:04:31",
                "2018-02-25 15:15:37"
            ],
            [
                "2017-05-13 18:17:20",
                "2017-10-06 11:15:58"
            ],
            [
                "2017-03-04 02:23:49",
                "2018-02-06 16:57:05"
            ],
            [
                "2016-06-07 05:05:18",
                "2017-11-13 13:59:45"
            ],
            [
                "2016-04-17 12:53:59",
                "2018-03-20 17:32:58"
            ],
            [
                "2016-09-28 05:00:50",
                "2017-09-30 18:41:04"
            ],
            [
                "2017-04-07 04:53:27",
                "2017-11-29 12:59:42"
            ],
            [
                "2017-07-03 14:15:56",
                "2017-11-12 01:05:09"
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (apartment_bookings:`apartment_rentals.Apartment_Bookings`)\nRETURN apartment_bookings.booking_start_date,apartment_bookings.booking_end_date",
        "question": "What are the start date and end date of each apartment booking?",
        "answers": [
            [
                "2016-09-26 17:13:49",
                "2017-10-07 11:38:48"
            ],
            [
                "2016-04-01 06:28:08",
                "2017-10-25 11:08:42"
            ],
            [
                "2017-03-13 16:20:14",
                "2018-02-19 16:59:08"
            ],
            [
                "2016-08-04 10:33:00",
                "2017-09-29 12:43:50"
            ],
            [
                "2017-02-11 14:34:14",
                "2017-10-07 20:47:19"
            ],
            [
                "2016-05-24 20:09:38",
                "2017-10-03 01:56:21"
            ],
            [
                "2016-07-25 02:57:04",
                "2017-09-28 11:08:15"
            ],
            [
                "2016-11-26 05:04:31",
                "2018-02-25 15:15:37"
            ],
            [
                "2017-05-13 18:17:20",
                "2017-10-06 11:15:58"
            ],
            [
                "2017-03-04 02:23:49",
                "2018-02-06 16:57:05"
            ],
            [
                "2016-06-07 05:05:18",
                "2017-11-13 13:59:45"
            ],
            [
                "2016-04-17 12:53:59",
                "2018-03-20 17:32:58"
            ],
            [
                "2016-09-28 05:00:50",
                "2017-09-30 18:41:04"
            ],
            [
                "2017-04-07 04:53:27",
                "2017-11-29 12:59:42"
            ],
            [
                "2017-07-03 14:15:56",
                "2017-11-12 01:05:09"
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (apartment_buildings:`apartment_rentals.Apartment_Buildings`)\nRETURN DISTINCT apartment_buildings.building_description",
        "question": "Show all distinct building descriptions.",
        "answers": [
            [
                "Studio"
            ],
            [
                "Flat"
            ],
            [
                "Duplex"
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (apartment_buildings:`apartment_rentals.Apartment_Buildings`)\nRETURN DISTINCT apartment_buildings.building_description",
        "question": "Give me a list of all the distinct building descriptions.",
        "answers": [
            [
                "Studio"
            ],
            [
                "Flat"
            ],
            [
                "Duplex"
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nRETURN min(apartments.bathroom_count),max(apartments.bathroom_count)",
        "question": "What is the minimum and maximum number of bathrooms of all the apartments?",
        "answers": [
            [
                1,
                3
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nRETURN min(apartments.bathroom_count),max(apartments.bathroom_count)",
        "question": "Give me the minimum and maximum bathroom count among all the apartments.",
        "answers": [
            [
                1,
                3
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nRETURN apartments.apt_number,apartments.room_count",
        "question": "Return the apartment number and the number of rooms for each apartment.",
        "answers": [
            [
                "Suite 645",
                "7"
            ],
            [
                "Apt. 585",
                "5"
            ],
            [
                "Apt. 908",
                "7"
            ],
            [
                "Suite 749",
                "8"
            ],
            [
                "Suite 307",
                "9"
            ],
            [
                "Apt. 187",
                "9"
            ],
            [
                "Suite 088",
                "6"
            ],
            [
                "Suite 693",
                "9"
            ],
            [
                "Apt. 940",
                "8"
            ],
            [
                "Apt. 859",
                "6"
            ],
            [
                "Apt. 794",
                "3"
            ],
            [
                "Apt. 477",
                "3"
            ],
            [
                "Apt. 411",
                "9"
            ],
            [
                "Apt. 837",
                "8"
            ],
            [
                "Suite 634",
                "8"
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nRETURN apartments.apt_number,apartments.room_count",
        "question": "What are the apartment number and the room count of each apartment?",
        "answers": [
            [
                "Suite 645",
                "7"
            ],
            [
                "Apt. 585",
                "5"
            ],
            [
                "Apt. 908",
                "7"
            ],
            [
                "Suite 749",
                "8"
            ],
            [
                "Suite 307",
                "9"
            ],
            [
                "Apt. 187",
                "9"
            ],
            [
                "Suite 088",
                "6"
            ],
            [
                "Suite 693",
                "9"
            ],
            [
                "Apt. 940",
                "8"
            ],
            [
                "Apt. 859",
                "6"
            ],
            [
                "Apt. 794",
                "3"
            ],
            [
                "Apt. 477",
                "3"
            ],
            [
                "Apt. 411",
                "9"
            ],
            [
                "Apt. 837",
                "8"
            ],
            [
                "Suite 634",
                "8"
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (guests:`apartment_rentals.Guests`)\nRETURN guests.guest_first_name,guests.guest_last_name",
        "question": "Return the first names and last names of all guests",
        "answers": [
            [
                "Kip",
                "DuBuque"
            ],
            [
                "Rebeca",
                "Runolfsdottir"
            ],
            [
                "Keon",
                "Treutel"
            ],
            [
                "Gabe",
                "Bode"
            ],
            [
                "Lou",
                "Grady"
            ],
            [
                "Josefina",
                "Jerde"
            ],
            [
                "Mozell",
                "Toy"
            ],
            [
                "Keith",
                "Hoeger"
            ],
            [
                "Crystal",
                "Runolfsson"
            ],
            [
                "Nikki",
                "Lehner"
            ],
            [
                "Gregoria",
                "Schowalter"
            ],
            [
                "Louvenia",
                "Crona"
            ],
            [
                "Else",
                "Roberts"
            ],
            [
                "Juvenal",
                "Kautzer"
            ],
            [
                "Tamia",
                "Mante"
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (guests:`apartment_rentals.Guests`)\nRETURN guests.guest_first_name,guests.guest_last_name",
        "question": "What are the first names and last names of all the guests?",
        "answers": [
            [
                "Kip",
                "DuBuque"
            ],
            [
                "Rebeca",
                "Runolfsdottir"
            ],
            [
                "Keon",
                "Treutel"
            ],
            [
                "Gabe",
                "Bode"
            ],
            [
                "Lou",
                "Grady"
            ],
            [
                "Josefina",
                "Jerde"
            ],
            [
                "Mozell",
                "Toy"
            ],
            [
                "Keith",
                "Hoeger"
            ],
            [
                "Crystal",
                "Runolfsson"
            ],
            [
                "Nikki",
                "Lehner"
            ],
            [
                "Gregoria",
                "Schowalter"
            ],
            [
                "Louvenia",
                "Crona"
            ],
            [
                "Else",
                "Roberts"
            ],
            [
                "Juvenal",
                "Kautzer"
            ],
            [
                "Tamia",
                "Mante"
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (T1:`apartment_rentals.Apartment_Bookings`)-[]-(T2:`apartment_rentals.Apartments`)\nWHERE T2.apt_number = \"Suite 634\"\nRETURN T1.booking_status_code",
        "question": "What is the booking status code of the apartment with apartment number \"Suite 634\"?",
        "answers": [
            [
                "Provisional"
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (T1:`apartment_rentals.Apartment_Bookings`)-[]-(T2:`apartment_rentals.Apartments`)\nWHERE T2.apt_number = \"Suite 634\"\nRETURN T1.booking_status_code",
        "question": "Tell me the booking status code for the apartment with number \"Suite 634\".",
        "answers": [
            [
                "Provisional"
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (T1:`apartment_rentals.Apartment_Facilities`)-[]-(T2:`apartment_rentals.Apartments`)\nWHERE T2.bedroom_count > 4\nRETURN T1.facility_code",
        "question": "Show the facility codes of apartments with more than 4 bedrooms.",
        "answers": [
            [
                "Gym"
            ],
            [
                "Cable TV"
            ],
            [
                "Gym"
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (T1:`apartment_rentals.Apartment_Facilities`)-[]-(T2:`apartment_rentals.Apartments`)\nWHERE T2.bedroom_count > 4\nRETURN T1.facility_code",
        "question": "What are the facility codes of the apartments with more than four bedrooms?",
        "answers": [
            [
                "Gym"
            ],
            [
                "Cable TV"
            ],
            [
                "Gym"
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (T1:`apartment_rentals.Apartment_Buildings`)-[]-(T2:`apartment_rentals.Apartments`)\nWHERE T2.bathroom_count > 2\nRETURN T1.building_address",
        "question": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.",
        "answers": [
            [
                "71537 Gorczany Inlet\nWisozkburgh, AL 08256"
            ],
            [
                "489 Josh Orchard Apt. 998\nSipesview, DE 69053"
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (T1:`apartment_rentals.Apartment_Buildings`)-[]-(T2:`apartment_rentals.Apartments`)\nWHERE T2.bathroom_count > 2\nRETURN T1.building_address",
        "question": "Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.",
        "answers": [
            [
                "71537 Gorczany Inlet\nWisozkburgh, AL 08256"
            ],
            [
                "489 Josh Orchard Apt. 998\nSipesview, DE 69053"
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (apartment_bookings:`apartment_rentals.Apartment_Bookings`)\nRETURN apartment_bookings.booking_status_code,count(*)",
        "question": "Show the booking status code and the corresponding number of bookings.",
        "answers": [
            [
                "Provisional",
                8
            ],
            [
                "Confirmed",
                7
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (apartment_bookings:`apartment_rentals.Apartment_Bookings`)\nRETURN apartment_bookings.booking_status_code,count(*)",
        "question": "How many bookings does each booking status have? List the booking status code and the number of corresponding bookings.",
        "answers": [
            [
                "Provisional",
                8
            ],
            [
                "Confirmed",
                7
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nRETURN apartments.apt_number\nORDER BY apartments.room_count ASC",
        "question": "Return all the apartment numbers sorted by the room count in ascending order.",
        "answers": [
            [
                "Apt. 794"
            ],
            [
                "Apt. 477"
            ],
            [
                "Apt. 585"
            ],
            [
                "Suite 088"
            ],
            [
                "Apt. 859"
            ],
            [
                "Suite 645"
            ],
            [
                "Apt. 908"
            ],
            [
                "Suite 749"
            ],
            [
                "Apt. 940"
            ],
            [
                "Apt. 837"
            ],
            [
                "Suite 634"
            ],
            [
                "Suite 307"
            ],
            [
                "Apt. 187"
            ],
            [
                "Suite 693"
            ],
            [
                "Apt. 411"
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nRETURN apartments.apt_number\nORDER BY apartments.room_count ASC",
        "question": "Sort the apartment numbers in ascending order of room count.",
        "answers": [
            [
                "Apt. 794"
            ],
            [
                "Apt. 477"
            ],
            [
                "Apt. 585"
            ],
            [
                "Suite 088"
            ],
            [
                "Apt. 859"
            ],
            [
                "Suite 645"
            ],
            [
                "Apt. 908"
            ],
            [
                "Suite 749"
            ],
            [
                "Apt. 940"
            ],
            [
                "Apt. 837"
            ],
            [
                "Suite 634"
            ],
            [
                "Suite 307"
            ],
            [
                "Apt. 187"
            ],
            [
                "Suite 693"
            ],
            [
                "Apt. 411"
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nRETURN apartments.apt_number\nORDER BY apartments.bedroom_count DESC\nLIMIT 1",
        "question": "Return the apartment number with the largest number of bedrooms.",
        "answers": [
            [
                "Apt. 908"
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nRETURN apartments.apt_number\nORDER BY apartments.bedroom_count DESC\nLIMIT 1",
        "question": "What is the apartment number of the apartment with the most beds?",
        "answers": [
            [
                "Apt. 908"
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nRETURN apartments.apt_type_code,count(*)\nORDER BY apartments.apt_type_code ASC",
        "question": "Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.",
        "answers": [
            [
                "Duplex",
                5
            ],
            [
                "Flat",
                6
            ],
            [
                "Studio",
                4
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nRETURN apartments.apt_type_code,count(*)\nORDER BY apartments.apt_type_code ASC",
        "question": "Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments.",
        "answers": [
            [
                "Duplex",
                5
            ],
            [
                "Flat",
                6
            ],
            [
                "Studio",
                4
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nRETURN apartments.apt_type_code,max(apartments.room_count),min(apartments.room_count)",
        "question": "Show each apartment type code, and the maximum and minimum number of rooms for each type.",
        "answers": [
            [
                "Flat",
                "9",
                "3"
            ],
            [
                "Studio",
                "9",
                "6"
            ],
            [
                "Duplex",
                "9",
                "3"
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nRETURN apartments.apt_type_code,max(apartments.room_count),min(apartments.room_count)",
        "question": "Return each apartment type code along with the maximum and minimum number of rooms among each type.",
        "answers": [
            [
                "Flat",
                "9",
                "3"
            ],
            [
                "Studio",
                "9",
                "6"
            ],
            [
                "Duplex",
                "9",
                "3"
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (guests:`apartment_rentals.Guests`)\nRETURN guests.gender_code,count(*)\nORDER BY guests.gender_code DESC",
        "question": "Show each gender code and the corresponding count of guests sorted by the count in descending order.",
        "answers": [
            [
                "Unknown",
                3
            ],
            [
                "Male",
                3
            ],
            [
                "Female",
                9
            ]
        ]
    },
    {
        "db_id": "apartment_rentals",
        "query": "MATCH (guests:`apartment_rentals.Guests`)\nRETURN guests.gender_code,count(*)\nORDER BY guests.gender_code DESC",
        "question": "Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts.",
        "answers": [
            [
                "Unknown",
                3
            ],
            [
                "Male",
                3
            ],
            [
                "Female",
                9
            ]
        ]
    },
    {
        "db_id": "game_injury",
        "query": "MATCH (game:`game_injury.game`)\nWHERE game.Season > 2007\nRETURN count(*)",
        "question": "How many games are held after season 2007?",
        "answers": [
            [
                17
            ]
        ]
    },
    {
        "db_id": "game_injury",
        "query": "MATCH (game:`game_injury.game`)\nRETURN game.Date\nORDER BY game.Home_team DESC",
        "question": "List the dates of games by the home team name in descending order.",
        "answers": [
            [
                "18 May 2007"
            ],
            [
                "22 September 2007"
            ],
            [
                "9 December 2007"
            ],
            [
                "10 July 2008"
            ],
            [
                "14 October 2009"
            ],
            [
                "8 August 2009"
            ],
            [
                "31 October 2010"
            ],
            [
                "7 July 2011"
            ],
            [
                "9 August 2012"
            ],
            [
                "25 November 2012"
            ],
            [
                "30 June 2013"
            ],
            [
                "16 August 2008"
            ],
            [
                "31 October 2008"
            ],
            [
                "12 July 2009"
            ],
            [
                "14 March 2010"
            ],
            [
                "21 August 2011"
            ],
            [
                "11 March 2012"
            ],
            [
                "26 June 2012"
            ],
            [
                "22 August 2012"
            ],
            [
                "8 August 2013"
            ]
        ]
    },
    {
        "db_id": "game_injury",
        "query": "MATCH (game:`game_injury.game`)\nRETURN game.Season,game.Home_team,game.Away_team",
        "question": "List the season, home team, away team of all the games.",
        "answers": [
            [
                2007,
                "Quruvchi",
                "Pakhtakor"
            ],
            [
                2007,
                "Pakhtakor",
                "Quruvchi"
            ],
            [
                2007,
                "Pakhtakor",
                "Quruvchi"
            ],
            [
                2008,
                "Pakhtakor",
                "Quruvchi"
            ],
            [
                2008,
                "Bunyodkor",
                "Pakhtakor"
            ],
            [
                2008,
                "Bunyodkor",
                "Pakhtakor"
            ],
            [
                2009,
                "Bunyodkor",
                "Pakhtakor"
            ],
            [
                2009,
                "Pakhtakor",
                "Bunyodkor"
            ],
            [
                2009,
                "Pakhtakor",
                "Bunyodkor"
            ],
            [
                2010,
                "Bunyodkor",
                "Pakhtakor"
            ],
            [
                2010,
                "Pakhtakor",
                "Bunyodkor"
            ],
            [
                2011,
                "Pakhtakor",
                "Bunyodkor"
            ],
            [
                2011,
                "Bunyodkor",
                "Pakhtakor"
            ],
            [
                2012,
                "Bunyodkor",
                "Pakhtakor"
            ],
            [
                2012,
                "Bunyodkor",
                "Pakhtakor"
            ],
            [
                2012,
                "Pakhtakor",
                "Bunyodkor"
            ],
            [
                2012,
                "Bunyodkor",
                "Pakhtakor"
            ],
            [
                2012,
                "Pakhtakor",
                "Bunyodkor"
            ],
            [
                2013,
                "Pakhtakor",
                "Bunyodkor"
            ],
            [
                2013,
                "Bunyodkor",
                "Pakhtakor"
            ]
        ]
    },
    {
        "db_id": "game_injury",
        "query": "MATCH (stadium:`game_injury.stadium`)\nRETURN max(stadium.Home_Games),min(stadium.Home_Games),avg(stadium.Home_Games)",
        "question": "What are the maximum, minimum and average home games each stadium held?",
        "answers": [
            [
                8,
                8,
                8.0
            ]
        ]
    },
    {
        "db_id": "game_injury",
        "query": "MATCH (stadium:`game_injury.stadium`)\nWHERE stadium.Capacity_Percentage > 100\nRETURN stadium.Average_Attendance",
        "question": "What is the average attendance of stadiums with capacity percentage higher than 100%?",
        "answers": [
            [
                87047.0
            ],
            [
                71227.0
            ],
            [
                69144.0
            ]
        ]
    },
    {
        "db_id": "game_injury",
        "query": "MATCH (injury_accident:`game_injury.injury_accident`)\nWHERE injury_accident.Injury <> 'Knee problem'\nRETURN injury_accident.Player,injury_accident.Number_of_matches,injury_accident.Source",
        "question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?",
        "answers": [
            [
                "Davide Santon",
                "12",
                "inter.it"
            ],
            [
                "Dejan Stankovi\u0107",
                "2",
                "inter.it"
            ],
            [
                "Wesley Sneijder",
                "1",
                "inter.it"
            ],
            [
                "Diego Milito",
                "1",
                "inter.it"
            ],
            [
                "Javier Zanetti",
                "4",
                "inter.it"
            ],
            [
                "Walter Samuel",
                "3",
                "inter.it"
            ],
            [
                "Thiago Motta",
                "10",
                "inter.it"
            ],
            [
                "Goran Pandev",
                "3",
                "inter.it"
            ],
            [
                "Iv\u00e1n C\u00f3rdoba",
                "1",
                "inter.it"
            ],
            [
                "Esteban Cambiasso",
                "2",
                "inter.it"
            ],
            [
                "Dejan Stankovi\u0107 (2)",
                "4 (6)",
                "inter.it"
            ],
            [
                "Wesley Sneijder (2)",
                "1 (2)",
                "inter.it"
            ],
            [
                "Esteban Cambiasso (2)",
                "4 (6)",
                "inter.it"
            ]
        ]
    },
    {
        "db_id": "game_injury",
        "query": "MATCH (T1:`game_injury.game`)-[]-(T2:`game_injury.injury_accident`)\nWHERE T2.Player = 'Walter Samuel'\nRETURN T1.Season",
        "question": "What is the season of the game which causes the player 'Walter Samuel' to get injured?",
        "answers": [
            [
                2008
            ]
        ]
    },
    {
        "db_id": "game_injury",
        "query": "MATCH (T1:`game_injury.game`)-[]-(T2:`game_injury.injury_accident`)\nWITH count(*) AS count, T1.Score AS Score, T1.Date AS Date, T1.id AS id\nWHERE count  >= 2\nRETURN id,Score,Date",
        "question": "What are the ids, scores, and dates of the games which caused at least two injury accidents?",
        "answers": [
            [
                5,
                "1\u20131",
                "16 August 2008"
            ],
            [
                6,
                "3\u20131",
                "31 October 2008"
            ],
            [
                10,
                "2\u20131",
                "14 March 2010"
            ]
        ]
    },
    {
        "db_id": "game_injury",
        "query": "MATCH (T1:`game_injury.stadium`)-[]-(T2:`game_injury.game`)-[]-(T3:`game_injury.injury_accident`)\nWITH T1, count(T1.id) AS cnt\nRETURN T1.id,T1.name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What are the id and name of the stadium where the most injury accidents happened?",
        "answers": [
            [
                10,
                "Louisiana Superdome"
            ]
        ]
    },
    {
        "db_id": "game_injury",
        "query": "MATCH (T1:`game_injury.stadium`)-[]-(T2:`game_injury.game`)-[]-(T3:`game_injury.injury_accident`)\nWITH T1, count(T1.id) AS cnt\nRETURN T1.id,T1.name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Find the id and name of the stadium where the largest number of injury accidents occurred.",
        "answers": [
            [
                10,
                "Louisiana Superdome"
            ]
        ]
    },
    {
        "db_id": "game_injury",
        "query": "MATCH (injury_accident:`game_injury.injury_accident`)\nRETURN count(DISTINCT injury_accident.Source)",
        "question": "How many different kinds of information sources are there for injury accidents?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "game_injury",
        "query": "MATCH (game:`game_injury.game`)\nWHERE NOT (game)-[]-(:`game_injury.injury_accident`)    \nRETURN count(*)",
        "question": "How many games are free of injury accidents?",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "game_injury",
        "query": "MATCH (T1:`game_injury.injury_accident`)-[]-(T2:`game_injury.game`)\nWHERE T2.Season > 2010\nRETURN count(DISTINCT T1.Injury)",
        "question": "How many distinct kinds of injuries happened after season 2010?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "game_injury",
        "query": "MATCH (T1:`game_injury.stadium`)-[]-(T2:`game_injury.game`)\nRETURN T1.id,count(*)",
        "question": "How many games has each stadium held?",
        "answers": [
            [
                1,
                2
            ],
            [
                2,
                2
            ],
            [
                3,
                2
            ],
            [
                4,
                2
            ],
            [
                5,
                2
            ],
            [
                6,
                1
            ],
            [
                7,
                2
            ],
            [
                8,
                1
            ],
            [
                9,
                1
            ],
            [
                10,
                3
            ],
            [
                11,
                1
            ],
            [
                12,
                1
            ]
        ]
    },
    {
        "db_id": "game_injury",
        "query": "MATCH (T1:`game_injury.game`)-[]-(T2:`game_injury.injury_accident`)\nRETURN T1.Date,T2.Player\nORDER BY T1.Season DESC",
        "question": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.",
        "answers": [
            [
                "7 July 2011",
                "Thiago Motta (2)"
            ],
            [
                "14 March 2010",
                "Dejan Stankovi\u0107 (2)"
            ],
            [
                "14 March 2010",
                "Wesley Sneijder (2)"
            ],
            [
                "31 October 2010",
                "Esteban Cambiasso (2)"
            ],
            [
                "14 October 2009",
                "Iv\u00e1n C\u00f3rdoba"
            ],
            [
                "8 August 2009",
                "Esteban Cambiasso"
            ],
            [
                "10 July 2008",
                "Wesley Sneijder"
            ],
            [
                "16 August 2008",
                "Diego Milito"
            ],
            [
                "16 August 2008",
                "Javier Zanetti"
            ],
            [
                "31 October 2008",
                "Walter Samuel"
            ],
            [
                "31 October 2008",
                "Thiago Motta"
            ],
            [
                "31 October 2008",
                "Goran Pandev"
            ],
            [
                "18 May 2007",
                "Davide Santon"
            ],
            [
                "22 September 2007",
                "Maicon"
            ],
            [
                "9 December 2007",
                "Dejan Stankovi\u0107"
            ]
        ]
    },
    {
        "db_id": "performance_attendance",
        "query": "MATCH (performance:`performance_attendance.performance`)\nRETURN count(*)",
        "question": "How many performances are there?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "performance_attendance",
        "query": "MATCH (performance:`performance_attendance.performance`)\nRETURN performance.Host\nORDER BY performance.Attendance ASC",
        "question": "List the hosts of performances in ascending order of attendance.",
        "answers": [
            [
                "Boston Bruins"
            ],
            [
                "New York Rangers"
            ],
            [
                "Pittsburgh Penguins"
            ],
            [
                "Atlanta Thrashers"
            ],
            [
                "Ottawa Senators"
            ],
            [
                "Montreal Canadiens"
            ]
        ]
    },
    {
        "db_id": "performance_attendance",
        "query": "MATCH (performance:`performance_attendance.performance`)\nRETURN performance.Date,performance.Location",
        "question": "What are the dates and locations of performances?",
        "answers": [
            [
                "February 2",
                "TD Garden"
            ],
            [
                "February 4",
                "Madison Square Garden"
            ],
            [
                "February 5",
                "Verizon Center"
            ],
            [
                "February 7",
                "Verizon Center"
            ],
            [
                "February 10",
                "Bell Centre"
            ],
            [
                "February 11",
                "Scotiabank Place"
            ]
        ]
    },
    {
        "db_id": "performance_attendance",
        "query": "MATCH (performance:`performance_attendance.performance`)\nWHERE performance.Location = 'TD Garden' OR performance.Location = 'Bell Centre'\nRETURN performance.Attendance",
        "question": "Show the attendances of the performances at location \"TD Garden\" or \"Bell Centre\"",
        "answers": [
            [
                165
            ],
            [
                2173
            ]
        ]
    },
    {
        "db_id": "performance_attendance",
        "query": "MATCH (performance:`performance_attendance.performance`)\nRETURN performance.Date\nORDER BY performance.Attendance DESC\nLIMIT 1",
        "question": "What is the date of the performance with the highest number of attendees?",
        "answers": [
            [
                "February 10"
            ]
        ]
    },
    {
        "db_id": "performance_attendance",
        "query": "MATCH (performance:`performance_attendance.performance`)\nRETURN performance.Location,count(*)",
        "question": "Show different locations and the number of performances at each location.",
        "answers": [
            [
                "TD Garden",
                1
            ],
            [
                "Madison Square Garden",
                1
            ],
            [
                "Verizon Center",
                2
            ],
            [
                "Bell Centre",
                1
            ],
            [
                "Scotiabank Place",
                1
            ]
        ]
    },
    {
        "db_id": "performance_attendance",
        "query": "MATCH (performance:`performance_attendance.performance`)\nRETURN performance.Location\nORDER BY performance.Location DESC\nLIMIT 1",
        "question": "Show the most common location of performances.",
        "answers": [
            [
                "Verizon Center"
            ]
        ]
    },
    {
        "db_id": "performance_attendance",
        "query": "MATCH (performance:`performance_attendance.performance`)\nWITH count(*) AS count, performance.Location AS Location\nWHERE count  >= 2\nRETURN Location",
        "question": "Show the locations that have at least two performances.",
        "answers": [
            [
                "Verizon Center"
            ]
        ]
    },
    {
        "db_id": "debate",
        "query": "MATCH (debate:`debate.debate`)\nRETURN count(*)",
        "question": "How many debates are there?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "debate",
        "query": "MATCH (debate:`debate.debate`)\nRETURN debate.Venue\nORDER BY debate.Num_of_Audience ASC",
        "question": "List the venues of debates in ascending order of the number of audience.",
        "answers": [
            [
                "Manama , Bahrain"
            ],
            [
                "Doha , Qatar"
            ],
            [
                "Abu Dhabi , UAE"
            ],
            [
                "Manama , Bahrain"
            ],
            [
                "Dubai , UAE"
            ],
            [
                "Manama , Bahrain"
            ]
        ]
    },
    {
        "db_id": "debate",
        "query": "MATCH (debate:`debate.debate`)\nRETURN debate.Date,debate.Venue",
        "question": "What are the date and venue of each debate?",
        "answers": [
            [
                "October 21, 2011",
                "Manama , Bahrain"
            ],
            [
                "December 17, 2014",
                "Doha , Qatar"
            ],
            [
                "August 3, 2015",
                "Manama , Bahrain"
            ],
            [
                "October 27, 2015",
                "Manama , Bahrain"
            ],
            [
                "January 12, 2017",
                "Dubai , UAE"
            ],
            [
                "January 21, 2017",
                "Abu Dhabi , UAE"
            ]
        ]
    },
    {
        "db_id": "debate",
        "query": "MATCH (debate:`debate.debate`)\nWHERE debate.Num_of_Audience > 150\nRETURN debate.Date",
        "question": "List the dates of debates with number of audience bigger than 150",
        "answers": [
            [
                "October 21, 2011"
            ],
            [
                "October 27, 2015"
            ],
            [
                "January 12, 2017"
            ],
            [
                "January 21, 2017"
            ]
        ]
    },
    {
        "db_id": "debate",
        "query": "MATCH (people:`debate.people`)\nWHERE people.Age = 35 OR people.Age = 36\nRETURN people.Name",
        "question": "Show the names of people aged either 35 or 36.",
        "answers": [
            [
                "Luther C. Carter"
            ],
            [
                "William B. Maclay"
            ],
            [
                "Charles Van Wyck"
            ]
        ]
    },
    {
        "db_id": "debate",
        "query": "MATCH (people:`debate.people`)\nRETURN people.Party\nORDER BY people.Age ASC\nLIMIT 1",
        "question": "What is the party of the youngest people?",
        "answers": [
            [
                "Republican"
            ]
        ]
    },
    {
        "db_id": "debate",
        "query": "MATCH (people:`debate.people`)\nRETURN people.Party,count(*)",
        "question": "Show different parties of people along with the number of people in each party.",
        "answers": [
            [
                "Republican",
                4
            ],
            [
                "Democratic",
                3
            ],
            [
                "Independent Democrat",
                1
            ],
            [
                "Anti-Lecompton Democrat",
                2
            ]
        ]
    },
    {
        "db_id": "debate",
        "query": "MATCH (people:`debate.people`)\nRETURN people.Party\nORDER BY people.Party DESC\nLIMIT 1",
        "question": "Show the party that has the most people.",
        "answers": [
            [
                "Republican"
            ]
        ]
    },
    {
        "db_id": "debate",
        "query": "MATCH (debate:`debate.debate`)\nRETURN DISTINCT debate.Venue",
        "question": "Show the distinct venues of debates",
        "answers": [
            [
                "Manama , Bahrain"
            ],
            [
                "Doha , Qatar"
            ],
            [
                "Dubai , UAE"
            ],
            [
                "Abu Dhabi , UAE"
            ]
        ]
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "MATCH (customers:`insurance_and_eClaims.Customers`)\nRETURN customers.Customer_Details\nORDER BY customers.Customer_Details",
        "question": "List the names of all the customers in alphabetical order.",
        "answers": [
            [
                "America Jaskolski"
            ],
            [
                "Augustine Kerluke"
            ],
            [
                "Buddy Marquardt"
            ],
            [
                "Dayana Robel"
            ],
            [
                "Dr. Diana Rath"
            ],
            [
                "Ellsworth Paucek"
            ],
            [
                "Lauriane Ferry PhD"
            ],
            [
                "Miss Felicita Reichel"
            ],
            [
                "Mr. Edwardo Blanda I"
            ],
            [
                "Mr. Randal Lynch III"
            ],
            [
                "Mrs. Hanna Willms"
            ],
            [
                "Mrs. Lilly Graham III"
            ],
            [
                "Mrs. Liza Heller V"
            ],
            [
                "Selena Gerhold"
            ],
            [
                "Sydnie Friesen"
            ]
        ]
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "MATCH (customers:`insurance_and_eClaims.Customers`)\nRETURN customers.Customer_Details\nORDER BY customers.Customer_Details",
        "question": "Sort the customer names in alphabetical order.",
        "answers": [
            [
                "America Jaskolski"
            ],
            [
                "Augustine Kerluke"
            ],
            [
                "Buddy Marquardt"
            ],
            [
                "Dayana Robel"
            ],
            [
                "Dr. Diana Rath"
            ],
            [
                "Ellsworth Paucek"
            ],
            [
                "Lauriane Ferry PhD"
            ],
            [
                "Miss Felicita Reichel"
            ],
            [
                "Mr. Edwardo Blanda I"
            ],
            [
                "Mr. Randal Lynch III"
            ],
            [
                "Mrs. Hanna Willms"
            ],
            [
                "Mrs. Lilly Graham III"
            ],
            [
                "Mrs. Liza Heller V"
            ],
            [
                "Selena Gerhold"
            ],
            [
                "Sydnie Friesen"
            ]
        ]
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "MATCH (policies:`insurance_and_eClaims.Policies`)\nRETURN policies.Policy_Type_Code\nORDER BY policies.Policy_Type_Code DESC\nLIMIT 1",
        "question": "Which type of policy is most frequently used? Give me the policy type code.",
        "answers": [
            [
                "Uniformed"
            ]
        ]
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "MATCH (policies:`insurance_and_eClaims.Policies`)\nRETURN policies.Policy_Type_Code\nORDER BY policies.Policy_Type_Code DESC\nLIMIT 1",
        "question": "Find the type code of the most frequently used policy.",
        "answers": [
            [
                "Uniformed"
            ]
        ]
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "MATCH (policies:`insurance_and_eClaims.Policies`)\nWITH count(*) AS count, policies.Policy_Type_Code AS Policy_Type_Code\nWHERE count  > 2\nRETURN Policy_Type_Code",
        "question": "Find all the policy types that are used by more than 2 customers.",
        "answers": [
            [
                "Deputy"
            ],
            [
                "Jurisdiction"
            ],
            [
                "Uniformed"
            ]
        ]
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "MATCH (policies:`insurance_and_eClaims.Policies`)\nWITH count(*) AS count, policies.Policy_Type_Code AS Policy_Type_Code\nWHERE count  > 2\nRETURN Policy_Type_Code",
        "question": "Which types of policy are chosen by more than 2 customers? Give me the policy type codes.",
        "answers": [
            [
                "Deputy"
            ],
            [
                "Jurisdiction"
            ],
            [
                "Uniformed"
            ]
        ]
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "MATCH (claims_processing_stages:`insurance_and_eClaims.Claims_Processing_Stages`)\nRETURN count(*)",
        "question": "How many claim processing stages are there in total?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "MATCH (claims_processing_stages:`insurance_and_eClaims.Claims_Processing_Stages`)\nRETURN count(*)",
        "question": "Find the number of distinct stages in claim processing.",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "MATCH (policies:`insurance_and_eClaims.Policies`)\nRETURN policies.Policy_Type_Code,count(*)",
        "question": "Find the number of records of each policy type and its type code.",
        "answers": [
            [
                "Deputy",
                3
            ],
            [
                "Jurisdiction",
                3
            ],
            [
                "Uniformed",
                8
            ],
            [
                "Normal",
                1
            ]
        ]
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "MATCH (policies:`insurance_and_eClaims.Policies`)\nRETURN policies.Policy_Type_Code,count(*)",
        "question": "For each policy type, return its type code and its count in the record.",
        "answers": [
            [
                "Deputy",
                3
            ],
            [
                "Jurisdiction",
                3
            ],
            [
                "Uniformed",
                8
            ],
            [
                "Normal",
                1
            ]
        ]
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "MATCH (t1:`insurance_and_eClaims.Policies`)-[]-(t2:`insurance_and_eClaims.Customers`)\nWITH count(t2.Customer_Details) AS cnt, t2\nRETURN t2.Customer_Details\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Find the name of the customer that has been involved in the most policies.",
        "answers": [
            [
                "Dr. Diana Rath"
            ]
        ]
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "MATCH (t1:`insurance_and_eClaims.Policies`)-[]-(t2:`insurance_and_eClaims.Customers`)\nWITH count(t2.Customer_Details) AS cnt, t2\nRETURN t2.Customer_Details\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Which customer have the most policies? Give me the customer details.",
        "answers": [
            [
                "Dr. Diana Rath"
            ]
        ]
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "MATCH (claims_processing:`insurance_and_eClaims.Claims_Processing`)\nRETURN count(DISTINCT claims_processing.Claim_Outcome_Code)",
        "question": "How many distinct claim outcome codes are there?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "MATCH (claims_processing:`insurance_and_eClaims.Claims_Processing`)\nRETURN count(DISTINCT claims_processing.Claim_Outcome_Code)",
        "question": "Count the number of distinct claim outcome codes.",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (accounts:`customers_and_invoices.Accounts`)\nRETURN count(*)",
        "question": "Show the number of accounts.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (accounts:`customers_and_invoices.Accounts`)\nRETURN count(*)",
        "question": "How many accounts are there?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (accounts:`customers_and_invoices.Accounts`)\nRETURN count(DISTINCT accounts.customer_id)",
        "question": "How many customers have opened an account?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (accounts:`customers_and_invoices.Accounts`)\nRETURN count(DISTINCT accounts.customer_id)",
        "question": "Count the number of customers who have an account.",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (accounts:`customers_and_invoices.Accounts`)\nRETURN accounts.account_id,accounts.date_account_opened,accounts.account_name,accounts.other_account_details",
        "question": "Show the id, the date of account opened, the account name, and other account detail for all accounts.",
        "answers": [
            [
                1,
                "2016-07-30 22:22:24",
                "900",
                "Regular"
            ],
            [
                2,
                "2017-05-29 16:45:17",
                "520",
                "VIP"
            ],
            [
                3,
                "2012-05-04 18:50:32",
                "323",
                "Regular"
            ],
            [
                4,
                "2011-03-29 15:06:59",
                "390",
                "VIP"
            ],
            [
                5,
                "2014-08-11 18:15:14",
                "935",
                "Regular"
            ],
            [
                6,
                "2014-05-30 12:16:52",
                "371",
                "Regular"
            ],
            [
                7,
                "2015-11-03 08:04:15",
                "398",
                "VIP"
            ],
            [
                8,
                "2009-06-13 11:41:52",
                "710",
                "Regular"
            ],
            [
                9,
                "2010-10-22 13:33:45",
                "337",
                "Regular"
            ],
            [
                10,
                "2016-04-25 21:49:17",
                "429",
                "VIP"
            ],
            [
                11,
                "2012-07-09 23:40:15",
                "191",
                "VIP"
            ],
            [
                12,
                "2015-02-02 09:47:08",
                "601",
                "Regular"
            ],
            [
                13,
                "2010-06-16 09:35:00",
                "272",
                "Regular"
            ],
            [
                14,
                "2014-12-28 07:29:42",
                "861",
                "VIP"
            ],
            [
                15,
                "2008-05-04 22:15:56",
                "662",
                "VIP"
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (accounts:`customers_and_invoices.Accounts`)\nRETURN accounts.account_id,accounts.date_account_opened,accounts.account_name,accounts.other_account_details",
        "question": "What are the ids, date opened, name, and other details for all accounts?",
        "answers": [
            [
                1,
                "2016-07-30 22:22:24",
                "900",
                "Regular"
            ],
            [
                2,
                "2017-05-29 16:45:17",
                "520",
                "VIP"
            ],
            [
                3,
                "2012-05-04 18:50:32",
                "323",
                "Regular"
            ],
            [
                4,
                "2011-03-29 15:06:59",
                "390",
                "VIP"
            ],
            [
                5,
                "2014-08-11 18:15:14",
                "935",
                "Regular"
            ],
            [
                6,
                "2014-05-30 12:16:52",
                "371",
                "Regular"
            ],
            [
                7,
                "2015-11-03 08:04:15",
                "398",
                "VIP"
            ],
            [
                8,
                "2009-06-13 11:41:52",
                "710",
                "Regular"
            ],
            [
                9,
                "2010-10-22 13:33:45",
                "337",
                "Regular"
            ],
            [
                10,
                "2016-04-25 21:49:17",
                "429",
                "VIP"
            ],
            [
                11,
                "2012-07-09 23:40:15",
                "191",
                "VIP"
            ],
            [
                12,
                "2015-02-02 09:47:08",
                "601",
                "Regular"
            ],
            [
                13,
                "2010-06-16 09:35:00",
                "272",
                "Regular"
            ],
            [
                14,
                "2014-12-28 07:29:42",
                "861",
                "VIP"
            ],
            [
                15,
                "2008-05-04 22:15:56",
                "662",
                "VIP"
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (T1:`customers_and_invoices.Accounts`)-[]-(T2:`customers_and_invoices.Customers`)\nWHERE T2.customer_first_name = 'Meaghan'\nRETURN T1.account_id,T1.date_account_opened,T1.account_name,T1.other_account_details",
        "question": "Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.",
        "answers": [
            [
                3,
                "2012-05-04 18:50:32",
                "323",
                "Regular"
            ],
            [
                9,
                "2010-10-22 13:33:45",
                "337",
                "Regular"
            ],
            [
                1,
                "2016-07-30 22:22:24",
                "900",
                "Regular"
            ],
            [
                12,
                "2015-02-02 09:47:08",
                "601",
                "Regular"
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (T1:`customers_and_invoices.Accounts`)-[]-(T2:`customers_and_invoices.Customers`)\nWHERE T2.customer_first_name = 'Meaghan'\nRETURN T1.account_id,T1.date_account_opened,T1.account_name,T1.other_account_details",
        "question": "What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name \"Meaghan\"?",
        "answers": [
            [
                3,
                "2012-05-04 18:50:32",
                "323",
                "Regular"
            ],
            [
                9,
                "2010-10-22 13:33:45",
                "337",
                "Regular"
            ],
            [
                1,
                "2016-07-30 22:22:24",
                "900",
                "Regular"
            ],
            [
                12,
                "2015-02-02 09:47:08",
                "601",
                "Regular"
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (T1:`customers_and_invoices.Customers`)-[]-(T2:`customers_and_invoices.Accounts`)\nRETURN DISTINCT T1.customer_first_name,T1.customer_last_name,T1.phone_number",
        "question": "Show the unique first names, last names, and phone numbers for all customers with any account.",
        "answers": [
            [
                "Meaghan",
                "Keeling",
                "06015518212"
            ],
            [
                "Joesph",
                "Schaefer",
                "(488)524-5345"
            ],
            [
                "Ruby",
                "Boyle",
                "1-546-302-5676"
            ],
            [
                "Jensen",
                "Muller",
                "(650)406-8761"
            ],
            [
                "Kieran",
                "Auer",
                "(157)046-6255x98627"
            ],
            [
                "Abbey",
                "Ruecker",
                "1-344-593-4896x425"
            ],
            [
                "Vesta",
                "Leuschke",
                "+69(0)7149212554"
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (T1:`customers_and_invoices.Customers`)-[]-(T2:`customers_and_invoices.Accounts`)\nRETURN DISTINCT T1.customer_first_name,T1.customer_last_name,T1.phone_number",
        "question": "What are the distinct first names, last names, and phone numbers for customers with accounts?",
        "answers": [
            [
                "Meaghan",
                "Keeling",
                "06015518212"
            ],
            [
                "Joesph",
                "Schaefer",
                "(488)524-5345"
            ],
            [
                "Ruby",
                "Boyle",
                "1-546-302-5676"
            ],
            [
                "Jensen",
                "Muller",
                "(650)406-8761"
            ],
            [
                "Kieran",
                "Auer",
                "(157)046-6255x98627"
            ],
            [
                "Abbey",
                "Ruecker",
                "1-344-593-4896x425"
            ],
            [
                "Vesta",
                "Leuschke",
                "+69(0)7149212554"
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (accounts:`customers_and_invoices.Accounts`)\nRETURN count(*),accounts.customer_id",
        "question": "How many accounts does each customer have? List the number and customer id.",
        "answers": [
            [
                4,
                8
            ],
            [
                1,
                3
            ],
            [
                3,
                15
            ],
            [
                1,
                12
            ],
            [
                4,
                13
            ],
            [
                1,
                9
            ],
            [
                1,
                6
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (accounts:`customers_and_invoices.Accounts`)\nRETURN count(*),accounts.customer_id",
        "question": "Count the number of accounts corresponding to each customer id.",
        "answers": [
            [
                4,
                8
            ],
            [
                1,
                3
            ],
            [
                3,
                15
            ],
            [
                1,
                12
            ],
            [
                4,
                13
            ],
            [
                1,
                9
            ],
            [
                1,
                6
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (T1:`customers_and_invoices.Accounts`)-[]-(T2:`customers_and_invoices.Customers`)\nRETURN T1.customer_id,T2.customer_first_name,T2.customer_last_name,count(*)",
        "question": "Show id, first name and last name for all customers and the number of accounts.",
        "answers": [
            [
                8,
                "Meaghan",
                "Keeling",
                4
            ],
            [
                3,
                "Joesph",
                "Schaefer",
                1
            ],
            [
                15,
                "Ruby",
                "Boyle",
                3
            ],
            [
                12,
                "Jensen",
                "Muller",
                1
            ],
            [
                13,
                "Kieran",
                "Auer",
                4
            ],
            [
                9,
                "Abbey",
                "Ruecker",
                1
            ],
            [
                6,
                "Vesta",
                "Leuschke",
                1
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (T1:`customers_and_invoices.Accounts`)-[]-(T2:`customers_and_invoices.Customers`)\nRETURN T1.customer_id,T2.customer_first_name,T2.customer_last_name,count(*)",
        "question": "What are the the full names and ids for all customers, and how many accounts does each have?",
        "answers": [
            [
                8,
                "Meaghan",
                "Keeling",
                4
            ],
            [
                3,
                "Joesph",
                "Schaefer",
                1
            ],
            [
                15,
                "Ruby",
                "Boyle",
                3
            ],
            [
                12,
                "Jensen",
                "Muller",
                1
            ],
            [
                13,
                "Kieran",
                "Auer",
                4
            ],
            [
                9,
                "Abbey",
                "Ruecker",
                1
            ],
            [
                6,
                "Vesta",
                "Leuschke",
                1
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (T1:`customers_and_invoices.Accounts`)-[]-(T2:`customers_and_invoices.Customers`)\nWITH count(*) AS count, T2.customer_first_name AS customer_first_name, T1.customer_id AS customer_id\nWHERE count  >= 2\nRETURN customer_first_name,customer_id",
        "question": "Show first name and id for all customers with at least 2 accounts.",
        "answers": [
            [
                "Meaghan",
                8
            ],
            [
                "Ruby",
                15
            ],
            [
                "Kieran",
                13
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (T1:`customers_and_invoices.Accounts`)-[]-(T2:`customers_and_invoices.Customers`)\nWITH count(*) AS count, T2.customer_first_name AS customer_first_name, T1.customer_id AS customer_id\nWHERE count  >= 2\nRETURN customer_first_name,customer_id",
        "question": "What are the first names and ids for customers who have two or more accounts?",
        "answers": [
            [
                "Meaghan",
                8
            ],
            [
                "Ruby",
                15
            ],
            [
                "Kieran",
                13
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (customers:`customers_and_invoices.Customers`)\nRETURN count(*)",
        "question": "Show the number of customers.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (customers:`customers_and_invoices.Customers`)\nRETURN count(*)",
        "question": "Count the number of customers.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (customers:`customers_and_invoices.Customers`)\nRETURN customers.gender,count(*)",
        "question": "Show the number of customers for each gender.",
        "answers": [
            [
                "1",
                6
            ],
            [
                "0",
                9
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (customers:`customers_and_invoices.Customers`)\nRETURN customers.gender,count(*)",
        "question": "How many customers are there of each gender?",
        "answers": [
            [
                "1",
                6
            ],
            [
                "0",
                9
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (T2:`customers_and_invoices.Accounts`)-[T1:`customers_and_invoices.Financial_Transactions`]-()\nWITH count(*) AS count, T2.account_name AS account_name, T1.account_id AS account_id\nWHERE count  >= 4\nRETURN account_id,account_name",
        "question": "Show the account id and name with at least 4 transactions.",
        "answers": [
            [
                9,
                "337"
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (T2:`customers_and_invoices.Accounts`)-[T1:`customers_and_invoices.Financial_Transactions`]-()\nWITH count(*) AS count, T2.account_name AS account_name, T1.account_id AS account_id\nWHERE count  >= 4\nRETURN account_id,account_name",
        "question": "What are the ids and names of accounts with 4 or more transactions?",
        "answers": [
            [
                9,
                "337"
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (products:`customers_and_invoices.Products`)\nRETURN DISTINCT products.product_size",
        "question": "Show all product sizes.",
        "answers": [
            [
                "Medium"
            ],
            [
                "Small"
            ],
            [
                "Large"
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (products:`customers_and_invoices.Products`)\nRETURN DISTINCT products.product_size",
        "question": "What are the different product sizes?",
        "answers": [
            [
                "Medium"
            ],
            [
                "Small"
            ],
            [
                "Large"
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (products:`customers_and_invoices.Products`)\nRETURN DISTINCT products.product_color",
        "question": "Show all product colors.",
        "answers": [
            [
                "Red"
            ],
            [
                "Yellow"
            ],
            [
                "Black"
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (products:`customers_and_invoices.Products`)\nRETURN DISTINCT products.product_color",
        "question": "What are the different product colors?",
        "answers": [
            [
                "Red"
            ],
            [
                "Yellow"
            ],
            [
                "Black"
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (T2:`customers_and_invoices.Invoices`)-[T1:`customers_and_invoices.Financial_Transactions`]-()\nWITH T2, count(T1.invoice_number) AS cnt\nRETURN T2.invoice_number,T2.invoice_date\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the invoice number and invoice date for the invoice with most number of transactions?",
        "answers": [
            [
                12,
                "2018-03-15 21:24:13"
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (T2:`customers_and_invoices.Invoices`)-[T1:`customers_and_invoices.Financial_Transactions`]-()\nWITH T2, count(T1.invoice_number) AS cnt\nRETURN T2.invoice_number,T2.invoice_date\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?",
        "answers": [
            [
                12,
                "2018-03-15 21:24:13"
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (invoices:`customers_and_invoices.Invoices`)\nRETURN count(*)",
        "question": "How many invoices do we have?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (invoices:`customers_and_invoices.Invoices`)\nRETURN count(*)",
        "question": "Count the number of invoices.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (T1:`customers_and_invoices.Invoices`)-[]-(T2:`customers_and_invoices.Orders`)\nRETURN T1.invoice_date,T1.order_id,T2.order_details",
        "question": "Show invoice dates and order id and details for all invoices.",
        "answers": [
            [
                "2018-03-01 16:40:48",
                9,
                null
            ],
            [
                "2018-03-20 00:21:41",
                9,
                null
            ],
            [
                "2018-03-05 08:47:33",
                3,
                null
            ],
            [
                "2018-02-28 19:01:06",
                9,
                null
            ],
            [
                "2018-03-07 02:04:32",
                13,
                null
            ],
            [
                "2018-03-16 21:57:43",
                8,
                null
            ],
            [
                "2018-03-13 07:27:38",
                10,
                null
            ],
            [
                "2018-03-19 17:06:30",
                10,
                null
            ],
            [
                "2018-03-16 11:01:06",
                12,
                null
            ],
            [
                "2018-03-01 01:44:08",
                11,
                null
            ],
            [
                "2018-03-23 04:59:28",
                5,
                null
            ],
            [
                "2018-03-15 21:24:13",
                3,
                null
            ],
            [
                "2018-03-03 20:44:06",
                3,
                null
            ],
            [
                "2018-03-19 22:38:10",
                4,
                null
            ],
            [
                "2018-03-15 09:38:49",
                14,
                null
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (T1:`customers_and_invoices.Invoices`)-[]-(T2:`customers_and_invoices.Orders`)\nRETURN T1.invoice_date,T1.order_id,T2.order_details",
        "question": "What are the invoice dates, order ids, and order details for all invoices?",
        "answers": [
            [
                "2018-03-01 16:40:48",
                9,
                null
            ],
            [
                "2018-03-20 00:21:41",
                9,
                null
            ],
            [
                "2018-03-05 08:47:33",
                3,
                null
            ],
            [
                "2018-02-28 19:01:06",
                9,
                null
            ],
            [
                "2018-03-07 02:04:32",
                13,
                null
            ],
            [
                "2018-03-16 21:57:43",
                8,
                null
            ],
            [
                "2018-03-13 07:27:38",
                10,
                null
            ],
            [
                "2018-03-19 17:06:30",
                10,
                null
            ],
            [
                "2018-03-16 11:01:06",
                12,
                null
            ],
            [
                "2018-03-01 01:44:08",
                11,
                null
            ],
            [
                "2018-03-23 04:59:28",
                5,
                null
            ],
            [
                "2018-03-15 21:24:13",
                3,
                null
            ],
            [
                "2018-03-03 20:44:06",
                3,
                null
            ],
            [
                "2018-03-19 22:38:10",
                4,
                null
            ],
            [
                "2018-03-15 09:38:49",
                14,
                null
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (invoices:`customers_and_invoices.Invoices`)\nRETURN invoices.order_id,count(*)",
        "question": "Show the order ids and the number of invoices for each order.",
        "answers": [
            [
                9,
                3
            ],
            [
                3,
                3
            ],
            [
                13,
                1
            ],
            [
                8,
                1
            ],
            [
                10,
                2
            ],
            [
                12,
                1
            ],
            [
                11,
                1
            ],
            [
                5,
                1
            ],
            [
                4,
                1
            ],
            [
                14,
                1
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (invoices:`customers_and_invoices.Invoices`)\nRETURN invoices.order_id,count(*)",
        "question": "How many invoices correspond to each order id?",
        "answers": [
            [
                9,
                3
            ],
            [
                3,
                3
            ],
            [
                13,
                1
            ],
            [
                8,
                1
            ],
            [
                10,
                2
            ],
            [
                12,
                1
            ],
            [
                11,
                1
            ],
            [
                5,
                1
            ],
            [
                4,
                1
            ],
            [
                14,
                1
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (T1:`customers_and_invoices.Invoices`)-[]-(T2:`customers_and_invoices.Orders`)\nWITH count(*) AS count, T2.order_details AS order_details, T2.order_id AS order_id\nWHERE count  > 2\nRETURN order_id,order_details",
        "question": "What is the order id and order details for the order more than two invoices.",
        "answers": [
            [
                9,
                null
            ],
            [
                3,
                null
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (T1:`customers_and_invoices.Invoices`)-[]-(T2:`customers_and_invoices.Orders`)\nWITH count(*) AS count, T2.order_details AS order_details, T2.order_id AS order_id\nWHERE count  > 2\nRETURN order_id,order_details",
        "question": "Return the order ids and details for orderes with two or more invoices.",
        "answers": [
            [
                9,
                null
            ],
            [
                3,
                null
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (order_items:`customers_and_invoices.Order_Items`)\nRETURN order_items.order_id,count(*)",
        "question": "Show the order ids and the number of items in each order.",
        "answers": [
            [
                4,
                3
            ],
            [
                15,
                2
            ],
            [
                1,
                2
            ],
            [
                2,
                1
            ],
            [
                13,
                4
            ],
            [
                10,
                1
            ],
            [
                14,
                1
            ],
            [
                12,
                1
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (order_items:`customers_and_invoices.Order_Items`)\nRETURN order_items.order_id,count(*)",
        "question": "How many order items correspond to each order id?",
        "answers": [
            [
                4,
                3
            ],
            [
                15,
                2
            ],
            [
                1,
                2
            ],
            [
                2,
                1
            ],
            [
                13,
                4
            ],
            [
                10,
                1
            ],
            [
                14,
                1
            ],
            [
                12,
                1
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (order_items:`customers_and_invoices.Order_Items`)\nRETURN order_items.product_id,count(DISTINCT order_items.order_id)",
        "question": "Show the product ids and the number of unique orders containing each product.",
        "answers": [
            [
                4,
                2
            ],
            [
                10,
                1
            ],
            [
                5,
                2
            ],
            [
                3,
                1
            ],
            [
                14,
                3
            ],
            [
                12,
                1
            ],
            [
                15,
                1
            ],
            [
                9,
                1
            ],
            [
                7,
                1
            ],
            [
                13,
                1
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (order_items:`customers_and_invoices.Order_Items`)\nRETURN order_items.product_id,count(DISTINCT order_items.order_id)",
        "question": "How many distinct order ids correspond to each product?",
        "answers": [
            [
                4,
                2
            ],
            [
                10,
                1
            ],
            [
                5,
                2
            ],
            [
                3,
                1
            ],
            [
                14,
                3
            ],
            [
                12,
                1
            ],
            [
                15,
                1
            ],
            [
                9,
                1
            ],
            [
                7,
                1
            ],
            [
                13,
                1
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (order_items:`customers_and_invoices.Order_Items`)\nRETURN order_items.order_id,count(DISTINCT order_items.product_id)",
        "question": "Show order ids and the number of products in each order.",
        "answers": [
            [
                4,
                3
            ],
            [
                15,
                2
            ],
            [
                1,
                2
            ],
            [
                2,
                1
            ],
            [
                13,
                3
            ],
            [
                10,
                1
            ],
            [
                14,
                1
            ],
            [
                12,
                1
            ]
        ]
    },
    {
        "db_id": "customers_and_invoices",
        "query": "MATCH (order_items:`customers_and_invoices.Order_Items`)\nRETURN order_items.order_id,count(DISTINCT order_items.product_id)",
        "question": "How many different products correspond to each order id?",
        "answers": [
            [
                4,
                3
            ],
            [
                15,
                2
            ],
            [
                1,
                2
            ],
            [
                2,
                1
            ],
            [
                13,
                3
            ],
            [
                10,
                1
            ],
            [
                14,
                1
            ],
            [
                12,
                1
            ]
        ]
    },
    {
        "db_id": "wedding",
        "query": "MATCH (church:`wedding.church`)\nWHERE church.Open_Date < 1850\nRETURN count(*)",
        "question": "How many churches opened before 1850 are there?",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "wedding",
        "query": "MATCH (church:`wedding.church`)\nRETURN church.Name,church.Open_Date,church.Organized_by",
        "question": "Show the name, open date, and organizer for all churches.",
        "answers": [
            [
                "Pure Church of Christ",
                1831,
                "Wycam Clark"
            ],
            [
                "Independent Church",
                1832,
                "\u2013 Hoton"
            ],
            [
                "Church of Christ",
                1836,
                "Ezra Booth"
            ],
            [
                "Church of Christ (Parrishite)",
                1837,
                "Warren Parrish"
            ],
            [
                "Alston Church",
                1839,
                "Isaac Russell"
            ],
            [
                "Church of Christ",
                1830,
                "William Chubby"
            ],
            [
                "Church of Jesus Christ, the Bride, the Lamb's Wife",
                1840,
                "George M. Hinkle"
            ],
            [
                "Church of Christ",
                1842,
                "Hiram Page"
            ],
            [
                "True Church of Jesus Christ of Latter Day Saints",
                1844,
                "William Law"
            ]
        ]
    },
    {
        "db_id": "wedding",
        "query": "MATCH (church:`wedding.church`)\nRETURN church.Name\nORDER BY church.Open_Date DESC",
        "question": "List all church names in descending order of opening date.",
        "answers": [
            [
                "True Church of Jesus Christ of Latter Day Saints"
            ],
            [
                "Church of Christ"
            ],
            [
                "Church of Jesus Christ, the Bride, the Lamb's Wife"
            ],
            [
                "Alston Church"
            ],
            [
                "Church of Christ (Parrishite)"
            ],
            [
                "Church of Christ"
            ],
            [
                "Independent Church"
            ],
            [
                "Pure Church of Christ"
            ],
            [
                "Church of Christ"
            ]
        ]
    },
    {
        "db_id": "wedding",
        "query": "MATCH (church:`wedding.church`)\nWITH count(*) AS count, church.Open_Date AS Open_Date\nWHERE count  >= 2\nRETURN Open_Date",
        "question": "Show the opening year in whcih at least two churches opened.",
        "answers": []
    },
    {
        "db_id": "wedding",
        "query": "MATCH (church:`wedding.church`)\nWHERE 1830<=church.Open_Date<=1840\nRETURN church.Organized_by,church.Name",
        "question": "Show the organizer and name for churches that opened between 1830 and 1840.",
        "answers": [
            [
                "Wycam Clark",
                "Pure Church of Christ"
            ],
            [
                "\u2013 Hoton",
                "Independent Church"
            ],
            [
                "Ezra Booth",
                "Church of Christ"
            ],
            [
                "Warren Parrish",
                "Church of Christ (Parrishite)"
            ],
            [
                "Isaac Russell",
                "Alston Church"
            ],
            [
                "William Chubby",
                "Church of Christ"
            ],
            [
                "George M. Hinkle",
                "Church of Jesus Christ, the Bride, the Lamb's Wife"
            ]
        ]
    },
    {
        "db_id": "wedding",
        "query": "MATCH (church:`wedding.church`)\nRETURN church.Open_Date,count(*)",
        "question": "Show all opening years and the number of churches that opened in that year.",
        "answers": [
            [
                1831,
                1
            ],
            [
                1832,
                1
            ],
            [
                1836,
                1
            ],
            [
                1837,
                1
            ],
            [
                1839,
                1
            ],
            [
                1830,
                1
            ],
            [
                1840,
                1
            ],
            [
                1842,
                1
            ],
            [
                1844,
                1
            ]
        ]
    },
    {
        "db_id": "wedding",
        "query": "MATCH (church:`wedding.church`)\nRETURN church.Name,church.Open_Date\nORDER BY church.Open_Date DESC\nLIMIT 3",
        "question": "Show the name and opening year for three churches that opened most recently.",
        "answers": [
            [
                "True Church of Jesus Christ of Latter Day Saints",
                1844
            ],
            [
                "Church of Christ",
                1842
            ],
            [
                "Church of Jesus Christ, the Bride, the Lamb's Wife",
                1840
            ]
        ]
    },
    {
        "db_id": "wedding",
        "query": "MATCH (people:`wedding.people`)\nWHERE people.Is_Male = 'F' AND people.Age > 30\nRETURN count(*)",
        "question": "How many female people are older than 30 in our record?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "wedding",
        "query": "MATCH (people:`wedding.people`)\nRETURN min(people.Age),max(people.Age),avg(people.Age)",
        "question": "Show the minimum, maximum, and average age for all people.",
        "answers": [
            [
                25,
                36,
                30.166666666666668
            ]
        ]
    },
    {
        "db_id": "wedding",
        "query": "MATCH (people:`wedding.people`)\nWITH avg(people.Age) AS age\nMATCH (people:`wedding.people`)\nWHERE  people.Age <  age \nRETURN people.Name,people.Country",
        "question": "Show the name and country for all people whose age is smaller than the average.",
        "answers": [
            [
                "Ricky Barnes",
                "United States"
            ],
            [
                "Summer Duval",
                "United States"
            ],
            [
                "Todd Hamilton",
                "United States"
            ],
            [
                "Annie Mediate",
                "United States"
            ],
            [
                "Adam Scott",
                "Australia"
            ],
            [
                "Danny Toms",
                "United States"
            ]
        ]
    },
    {
        "db_id": "wedding",
        "query": "MATCH (T1:`wedding.church`)-[T2:`wedding.wedding`]-()\nWITH T1.Name AS Name, count(*) AS count\nWHERE count  >= 2\nRETURN Name",
        "question": "Show all church names that have hosted least two weddings.",
        "answers": []
    },
    {
        "db_id": "wedding",
        "query": "MATCH (T2:`wedding.people`)-[T1:`wedding.wedding`]-()\nWHERE T1.Year = 2016 AND T2.Is_Male = 'F' AND T2.Country = 'Canada'\nRETURN T2.Name",
        "question": "Show the names for all females from Canada having a wedding in year 2016.",
        "answers": []
    },
    {
        "db_id": "wedding",
        "query": "MATCH (people:`wedding.people`)\nRETURN people.Country,count(*)",
        "question": "Show all countries and the number of people from each country.",
        "answers": [
            [
                "Canada",
                1
            ],
            [
                "Sweden",
                1
            ],
            [
                "United States",
                8
            ],
            [
                "Northern Ireland",
                1
            ],
            [
                "Australia",
                1
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (artist:`theme_gallery.artist`)\nRETURN count(*)",
        "question": "How many artists do we have?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (artist:`theme_gallery.artist`)\nRETURN count(*)",
        "question": "Count the number of artists.",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (artist:`theme_gallery.artist`)\nRETURN artist.Name,artist.Age,artist.Country\nORDER BY artist.Year_Join",
        "question": "Show all artist name, age, and country ordered by the yeared they joined.",
        "answers": [
            [
                "Larry Nelson",
                50,
                "United States"
            ],
            [
                "Jeff Sluman",
                57,
                "United States"
            ],
            [
                "John Daly",
                46,
                "United States"
            ],
            [
                "Paul Azinger",
                47,
                "United States"
            ],
            [
                "Nick Price",
                48,
                "Zimbabwe"
            ],
            [
                "Mark Brooks",
                48,
                "United States"
            ],
            [
                "Vijay Singh",
                45,
                "Fiji"
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (artist:`theme_gallery.artist`)\nRETURN artist.Name,artist.Age,artist.Country\nORDER BY artist.Year_Join",
        "question": "What are the names, ages, and countries of artists, sorted by the year they joined?",
        "answers": [
            [
                "Larry Nelson",
                50,
                "United States"
            ],
            [
                "Jeff Sluman",
                57,
                "United States"
            ],
            [
                "John Daly",
                46,
                "United States"
            ],
            [
                "Paul Azinger",
                47,
                "United States"
            ],
            [
                "Nick Price",
                48,
                "Zimbabwe"
            ],
            [
                "Mark Brooks",
                48,
                "United States"
            ],
            [
                "Vijay Singh",
                45,
                "Fiji"
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (artist:`theme_gallery.artist`)\nRETURN DISTINCT artist.Country",
        "question": "What are all distinct country for artists?",
        "answers": [
            [
                "Fiji"
            ],
            [
                "United States"
            ],
            [
                "Zimbabwe"
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (artist:`theme_gallery.artist`)\nRETURN DISTINCT artist.Country",
        "question": "Return the different countries for artists.",
        "answers": [
            [
                "Fiji"
            ],
            [
                "United States"
            ],
            [
                "Zimbabwe"
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (artist:`theme_gallery.artist`)\nWHERE artist.Country <> 'United States'\nRETURN artist.Name,artist.Year_Join",
        "question": "Show all artist names and the year joined who are not from United States.",
        "answers": [
            [
                "Vijay Singh",
                1998
            ],
            [
                "Nick Price",
                1994
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (artist:`theme_gallery.artist`)\nWHERE artist.Country <> 'United States'\nRETURN artist.Name,artist.Year_Join",
        "question": "What are the names and year of joining for artists that do not have the country \"United States\"?",
        "answers": [
            [
                "Vijay Singh",
                1998
            ],
            [
                "Nick Price",
                1994
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (artist:`theme_gallery.artist`)\nWHERE artist.Age > 46 AND artist.Year_Join > 1990\nRETURN count(*)",
        "question": "How many artists are above age 46 and joined after 1990?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (artist:`theme_gallery.artist`)\nWHERE artist.Age > 46 AND artist.Year_Join > 1990\nRETURN count(*)",
        "question": "Count the number of artists who are older than 46 and joined after 1990.",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (artist:`theme_gallery.artist`)\nWHERE artist.Country = 'United States'\nRETURN avg(artist.Age),min(artist.Age)",
        "question": "What is the average and minimum age of all artists from United States.",
        "answers": [
            [
                49.6,
                46
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (artist:`theme_gallery.artist`)\nWHERE artist.Country = 'United States'\nRETURN avg(artist.Age),min(artist.Age)",
        "question": "Return the average and minimum ages across artists from the United States.",
        "answers": [
            [
                49.6,
                46
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (artist:`theme_gallery.artist`)\nRETURN artist.Name\nORDER BY artist.Year_Join DESC\nLIMIT 1",
        "question": "What is the name of the artist who joined latest?",
        "answers": [
            [
                "Vijay Singh"
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (artist:`theme_gallery.artist`)\nRETURN artist.Name\nORDER BY artist.Year_Join DESC\nLIMIT 1",
        "question": "Return the name of the artist who has the latest join year.",
        "answers": [
            [
                "Vijay Singh"
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (exhibition:`theme_gallery.exhibition`)\nWHERE exhibition.Year >= 2005\nRETURN count(*)",
        "question": "How many exhibition are there in year 2005 or after?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (exhibition:`theme_gallery.exhibition`)\nWHERE exhibition.Year >= 2005\nRETURN count(*)",
        "question": "Count the number of exhibitions that happened in or after 2005.",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (exhibition:`theme_gallery.exhibition`)\nWHERE exhibition.Ticket_Price < 15\nRETURN exhibition.Theme,exhibition.Year",
        "question": "Show theme and year for all exhibitions with ticket prices lower than 15.",
        "answers": [
            [
                "Santa Claus and Rudolph the Red-Nosed Reindeer",
                2006
            ],
            [
                "Summer",
                2009
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (exhibition:`theme_gallery.exhibition`)\nWHERE exhibition.Ticket_Price < 15\nRETURN exhibition.Theme,exhibition.Year",
        "question": "What are the theme and year for all exhibitions that have a ticket price under 15?",
        "answers": [
            [
                "Santa Claus and Rudolph the Red-Nosed Reindeer",
                2006
            ],
            [
                "Summer",
                2009
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (T1:`theme_gallery.exhibition`)-[]-(T2:`theme_gallery.artist`)\nRETURN T2.Name,count(*)",
        "question": "Show all artist names and the number of exhibitions for each artist.",
        "answers": [
            [
                "Vijay Singh",
                2
            ],
            [
                "John Daly",
                1
            ],
            [
                "Paul Azinger",
                1
            ],
            [
                "Jeff Sluman",
                1
            ],
            [
                "Nick Price",
                1
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (T1:`theme_gallery.exhibition`)-[]-(T2:`theme_gallery.artist`)\nRETURN T2.Name,count(*)",
        "question": "How many exhibitions has each artist had?",
        "answers": [
            [
                "Vijay Singh",
                2
            ],
            [
                "John Daly",
                1
            ],
            [
                "Paul Azinger",
                1
            ],
            [
                "Jeff Sluman",
                1
            ],
            [
                "Nick Price",
                1
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (T1:`theme_gallery.exhibition`)-[]-(T2:`theme_gallery.artist`)\nWITH count(T1.Artist_ID) AS cnt, T2\nRETURN T2.Name,T2.Country\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the name and country for the artist with most number of exhibitions?",
        "answers": [
            [
                "Vijay Singh",
                "Fiji"
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (T1:`theme_gallery.exhibition`)-[]-(T2:`theme_gallery.artist`)\nWITH count(T1.Artist_ID) AS cnt, T2\nRETURN T2.Name,T2.Country\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Return the name and country corresponding to the artist who has had the most exhibitions.",
        "answers": [
            [
                "Vijay Singh",
                "Fiji"
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (artist:`theme_gallery.artist`)\nWHERE NOT (artist)-[]-(:`theme_gallery.exhibition`)    \nRETURN artist.Name",
        "question": "Show names for artists without any exhibition.",
        "answers": [
            [
                "Mark Brooks"
            ],
            [
                "Larry Nelson"
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (artist:`theme_gallery.artist`)\nWHERE NOT (artist)-[]-(:`theme_gallery.exhibition`)    \nRETURN artist.Name",
        "question": "What are the names of artists that have not had any exhibitions?",
        "answers": [
            [
                "Mark Brooks"
            ],
            [
                "Larry Nelson"
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (exhibition:`theme_gallery.exhibition`)\nRETURN exhibition.Theme,exhibition.Year\nORDER BY exhibition.Ticket_Price DESC",
        "question": "Show theme and year for all exhibitions in an descending order of ticket price.",
        "answers": [
            [
                "Spring",
                2008
            ],
            [
                "Santa Claus",
                2004
            ],
            [
                "Christmas stocking",
                2005
            ],
            [
                "Christmas Tree",
                2007
            ],
            [
                "Santa Claus and Rudolph the Red-Nosed Reindeer",
                2006
            ],
            [
                "Summer",
                2009
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (exhibition:`theme_gallery.exhibition`)\nRETURN exhibition.Theme,exhibition.Year\nORDER BY exhibition.Ticket_Price DESC",
        "question": "What are the themes and years for exhibitions, sorted by ticket price descending?",
        "answers": [
            [
                "Spring",
                2008
            ],
            [
                "Santa Claus",
                2004
            ],
            [
                "Christmas stocking",
                2005
            ],
            [
                "Christmas Tree",
                2007
            ],
            [
                "Santa Claus and Rudolph the Red-Nosed Reindeer",
                2006
            ],
            [
                "Summer",
                2009
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (T1:`theme_gallery.exhibition_record`)-[]-(T2:`theme_gallery.exhibition`)\nWHERE T2.Year = 2004\nRETURN T2.Theme,T1.Date,T1.Attendance",
        "question": "What is the theme, date, and attendance for the exhibition in year 2004?",
        "answers": [
            [
                "Santa Claus",
                "December 2",
                965
            ],
            [
                "Santa Claus",
                "December 7",
                2983
            ],
            [
                "Santa Claus",
                "December 5",
                1098
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (T1:`theme_gallery.exhibition_record`)-[]-(T2:`theme_gallery.exhibition`)\nWHERE T2.Year = 2004\nRETURN T2.Theme,T1.Date,T1.Attendance",
        "question": "Return the themes, dates, and attendance for exhibitions that happened in 2004.",
        "answers": [
            [
                "Santa Claus",
                "December 2",
                965
            ],
            [
                "Santa Claus",
                "December 7",
                2983
            ],
            [
                "Santa Claus",
                "December 5",
                1098
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (T1:`theme_gallery.exhibition_record`)-[]-(T2:`theme_gallery.exhibition`)\nWHERE T1.Attendance > 100 OR T2.Ticket_Price < 10\nRETURN count(*)",
        "question": "How many exhibitions have a attendance more than 100 or have a ticket price below 10?",
        "answers": [
            [
                13
            ]
        ]
    },
    {
        "db_id": "theme_gallery",
        "query": "MATCH (T1:`theme_gallery.exhibition_record`)-[]-(T2:`theme_gallery.exhibition`)\nWHERE T1.Attendance > 100 OR T2.Ticket_Price < 10\nRETURN count(*)",
        "question": "Count the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10.",
        "answers": [
            [
                13
            ]
        ]
    },
    {
        "db_id": "epinions_1",
        "query": "MATCH (item:`epinions_1.item`)\nWHERE item.title = 'orange'\nRETURN item.i_id",
        "question": "Find the id of the item whose title is \"orange\".",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "epinions_1",
        "query": "MATCH (review:`epinions_1.review`)\nRETURN count(*)",
        "question": "Find the number of reviews.",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "epinions_1",
        "query": "MATCH (useracct:`epinions_1.useracct`)\nRETURN count(*)",
        "question": "How many users are there?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "epinions_1",
        "query": "MATCH (review:`epinions_1.review`)\nRETURN min(review.rank)",
        "question": "Find the highest rank of all reviews.",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "epinions_1",
        "query": "MATCH (review:`epinions_1.review`)\nRETURN count(DISTINCT review.u_id)",
        "question": "How many different users wrote some reviews?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "epinions_1",
        "query": "MATCH (review:`epinions_1.review`)\nRETURN count(DISTINCT review.i_id)",
        "question": "How many different items were reviewed by some users?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "epinions_1",
        "query": "MATCH (item:`epinions_1.item`)\nWHERE NOT (item)-[]-(:`epinions_1.review`)    \nRETURN count(*)",
        "question": "Find the number of items that did not receive any review.",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "epinions_1",
        "query": "MATCH (useracct:`epinions_1.useracct`)\nWHERE NOT (useracct)-[]-(:`epinions_1.review`)    \nRETURN useracct.name",
        "question": "Find the names of users who did not leave any review.",
        "answers": [
            [
                "Terry"
            ],
            [
                "Nancy"
            ],
            [
                "Rosie"
            ],
            [
                "Roxi"
            ],
            [
                "Emily"
            ]
        ]
    },
    {
        "db_id": "epinions_1",
        "query": "MATCH (T1:`epinions_1.item`)-[]-(T2:`epinions_1.review`)\nWHERE T2.rating = 10\nRETURN T1.title",
        "question": "Find the names of goods that receive a rating of 10.",
        "answers": [
            [
                "orange"
            ],
            [
                "cup"
            ]
        ]
    },
    {
        "db_id": "epinions_1",
        "query": "MATCH (T1:`epinions_1.item`)-[]-(T2:`epinions_1.review`)\nWHERE T2.rating < 5\nRETURN T1.title",
        "question": "Find the titles of items that received any rating below 5.",
        "answers": []
    },
    {
        "db_id": "epinions_1",
        "query": "MATCH (item:`epinions_1.item`)\nRETURN item.title\nORDER BY item.title",
        "question": "List the titles of all items in alphabetic order .",
        "answers": [
            [
                "apple"
            ],
            [
                "avocado"
            ],
            [
                "blue hoodie"
            ],
            [
                "comb"
            ],
            [
                "cup"
            ],
            [
                "orange"
            ],
            [
                "pear"
            ],
            [
                "shampoo"
            ]
        ]
    },
    {
        "db_id": "epinions_1",
        "query": "MATCH (T1:`epinions_1.useracct`)-[]-(T2:`epinions_1.review`)\nWITH count(T1.u_id) AS cnt, T1\nRETURN T1.name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Find the name of the user who gives the most reviews.",
        "answers": [
            [
                "Mark"
            ]
        ]
    },
    {
        "db_id": "epinions_1",
        "query": "MATCH (T1:`epinions_1.useracct`)-[]-(T2:`epinions_1.review`)\nRETURN T1.name,count(*)",
        "question": "For each user, find their name and the number of reviews written by them.",
        "answers": [
            [
                "Helen",
                3
            ],
            [
                "Mark",
                4
            ]
        ]
    },
    {
        "db_id": "epinions_1",
        "query": "MATCH (T1:`epinions_1.useracct`)-[]-(T2:`epinions_1.review`)\nRETURN T1.name\nORDER BY T2.rating DESC\nLIMIT 1",
        "question": "Find the name of the user who gave the highest rating.",
        "answers": [
            [
                "Helen"
            ]
        ]
    },
    {
        "db_id": "epinions_1",
        "query": "MATCH (item:`epinions_1.item`)\nWHERE NOT (item)-[]-(:`epinions_1.review`)    \nRETURN item.title",
        "question": "Find the names of the items that did not receive any review.",
        "answers": [
            [
                "pear"
            ],
            [
                "apple"
            ],
            [
                "blue hoodie"
            ]
        ]
    },
    {
        "db_id": "epinions_1",
        "query": "MATCH (useracct:`epinions_1.useracct`)\nWHERE NOT (useracct)-[]-(:`epinions_1.review`)    \nRETURN useracct.name",
        "question": "Find the names of users who did not leave any review.",
        "answers": [
            [
                "Terry"
            ],
            [
                "Nancy"
            ],
            [
                "Rosie"
            ],
            [
                "Roxi"
            ],
            [
                "Emily"
            ]
        ]
    },
    {
        "db_id": "epinions_1",
        "query": "MATCH (useracct:`epinions_1.useracct`)\nWHERE NOT (useracct)-[]-(:`epinions_1.review`)    \nRETURN count(*)",
        "question": "Find the number of users who did not write any review.",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "epinions_1",
        "query": "MATCH (item:`epinions_1.item`)\nWHERE NOT (item)-[]-(:`epinions_1.review`)    \nRETURN count(*)",
        "question": "Find the number of items without any review.",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "riding_club",
        "query": "MATCH (player:`riding_club.player`)\nRETURN count(*)",
        "question": "How many players are there?",
        "answers": [
            [
                14
            ]
        ]
    },
    {
        "db_id": "riding_club",
        "query": "MATCH (player:`riding_club.player`)\nRETURN player.Player_name\nORDER BY player.Votes ASC",
        "question": "List the names of players in ascending order of votes.",
        "answers": [
            [
                "Mohamed Alli"
            ],
            [
                "Sean Robert"
            ],
            [
                "Ron Strynadka"
            ],
            [
                "Ross C. Martin"
            ],
            [
                "Rachel Heinrichs"
            ],
            [
                "Matt Schaubroeck"
            ],
            [
                "Jean Luc Bouch\u00e9"
            ],
            [
                "Fiona Shiells"
            ],
            [
                "Niki Ashton"
            ],
            [
                "Patricia Cordner"
            ],
            [
                "Ross Eadie"
            ],
            [
                "Pat Martin"
            ],
            [
                "Judy Wasylycia-Leis"
            ],
            [
                "Jim Maloway"
            ]
        ]
    },
    {
        "db_id": "riding_club",
        "query": "MATCH (player:`riding_club.player`)\nRETURN player.Gender,player.Occupation",
        "question": "What are the gender and occupation of players?",
        "answers": [
            [
                "M",
                "Locomotive Engineer"
            ],
            [
                "F",
                "Ministerial Assistant"
            ],
            [
                "F",
                "Researcher"
            ],
            [
                "M",
                "Retired"
            ],
            [
                "M",
                "Small Businessman"
            ],
            [
                "M",
                "Self Employed / Consultant"
            ],
            [
                "M",
                "Distribution Centre Associate"
            ],
            [
                "M",
                "Design Coordinator"
            ],
            [
                "M",
                "Student"
            ],
            [
                "F",
                "Retired"
            ],
            [
                "M",
                "Parliamentarian"
            ],
            [
                "F",
                "Parliamentarian"
            ],
            [
                "M",
                "Product Consultant - MLCC"
            ],
            [
                "F",
                "Student"
            ]
        ]
    },
    {
        "db_id": "riding_club",
        "query": "MATCH (player:`riding_club.player`)\nWHERE player.Occupation <> 'Researcher'\nRETURN player.Player_name,player.Residence",
        "question": "List the name and residence for players whose occupation is not \"Researcher\".",
        "answers": [
            [
                "Jean Luc Bouch\u00e9",
                "Brandon"
            ],
            [
                "Fiona Shiells",
                "Winnipeg"
            ],
            [
                "Ron Strynadka",
                "Birtle"
            ],
            [
                "Jim Maloway",
                "Winnipeg"
            ],
            [
                "Ross Eadie",
                "Winnipeg"
            ],
            [
                "Mohamed Alli",
                "Winnipeg"
            ],
            [
                "Ross C. Martin",
                "Oakbank"
            ],
            [
                "Matt Schaubroeck",
                "Winnipeg"
            ],
            [
                "Patricia Cordner",
                "Selkirk"
            ],
            [
                "Pat Martin",
                "Winnipeg"
            ],
            [
                "Judy Wasylycia-Leis",
                "Winnipeg"
            ],
            [
                "Sean Robert",
                "Winnipeg"
            ],
            [
                "Rachel Heinrichs",
                "Winnipeg"
            ]
        ]
    },
    {
        "db_id": "riding_club",
        "query": "MATCH (player:`riding_club.player`)\nWHERE player.Residence = 'Brandon' OR player.Residence = 'Birtle'\nRETURN player.Sponsor_name",
        "question": "Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\".",
        "answers": [
            [
                "Brandon\u2014Souris"
            ],
            [
                "Dauphin\u2014Swan River\u2014Marquette"
            ]
        ]
    },
    {
        "db_id": "riding_club",
        "query": "MATCH (player:`riding_club.player`)\nRETURN player.Player_name\nORDER BY player.Votes DESC\nLIMIT 1",
        "question": "What is the name of the player with the largest number of votes?",
        "answers": [
            [
                "Jim Maloway"
            ]
        ]
    },
    {
        "db_id": "riding_club",
        "query": "MATCH (player:`riding_club.player`)\nRETURN player.Occupation,count(*)",
        "question": "Show different occupations along with the number of players in each occupation.",
        "answers": [
            [
                "Locomotive Engineer",
                1
            ],
            [
                "Ministerial Assistant",
                1
            ],
            [
                "Researcher",
                1
            ],
            [
                "Retired",
                2
            ],
            [
                "Small Businessman",
                1
            ],
            [
                "Self Employed / Consultant",
                1
            ],
            [
                "Distribution Centre Associate",
                1
            ],
            [
                "Design Coordinator",
                1
            ],
            [
                "Student",
                2
            ],
            [
                "Parliamentarian",
                2
            ],
            [
                "Product Consultant - MLCC",
                1
            ]
        ]
    },
    {
        "db_id": "riding_club",
        "query": "MATCH (player:`riding_club.player`)\nRETURN player.Occupation\nORDER BY player.Occupation DESC\nLIMIT 1",
        "question": "Please show the most common occupation of players.",
        "answers": [
            [
                "Student"
            ]
        ]
    },
    {
        "db_id": "riding_club",
        "query": "MATCH (player:`riding_club.player`)\nWITH count(*) AS count, player.Residence AS Residence\nWHERE count  >= 2\nRETURN Residence",
        "question": "Show the residences that have at least two players.",
        "answers": [
            [
                "Winnipeg"
            ]
        ]
    },
    {
        "db_id": "riding_club",
        "query": "MATCH (T2:`riding_club.coach`)-[T1:`riding_club.player_coach`]-(T3:`riding_club.player`)\nRETURN T3.Player_name,T2.Coach_name",
        "question": "Show the names of players and names of their coaches.",
        "answers": [
            [
                "Fiona Shiells",
                "Jameson Tomas"
            ],
            [
                "Jean Luc Bouch\u00e9",
                "Jameson Tomas"
            ],
            [
                "Niki Ashton",
                "Jameson Tomas"
            ],
            [
                "Ron Strynadka",
                "Joe Fabbri"
            ],
            [
                "Ross Eadie",
                "Robert Chen"
            ],
            [
                "Patricia Cordner",
                "Robert Chen"
            ],
            [
                "Rachel Heinrichs",
                "Smith Brown"
            ]
        ]
    },
    {
        "db_id": "riding_club",
        "query": "MATCH (T2:`riding_club.coach`)-[T1:`riding_club.player_coach`]-(T3:`riding_club.player`)\nWHERE T2.Rank = 1\nRETURN T3.Player_name",
        "question": "Show the names of players coached by the rank 1 coach.",
        "answers": [
            [
                "Fiona Shiells"
            ],
            [
                "Jean Luc Bouch\u00e9"
            ],
            [
                "Niki Ashton"
            ]
        ]
    },
    {
        "db_id": "riding_club",
        "query": "MATCH (T2:`riding_club.coach`)-[T1:`riding_club.player_coach`]-(T3:`riding_club.player`)\nWHERE T1.Starting_year > 2011\nRETURN T3.Player_name,T3.Gender",
        "question": "Show the names and genders of players with a coach starting after 2011.",
        "answers": [
            [
                "Niki Ashton",
                "F"
            ],
            [
                "Ron Strynadka",
                "M"
            ],
            [
                "Ross Eadie",
                "M"
            ]
        ]
    },
    {
        "db_id": "riding_club",
        "query": "MATCH (T2:`riding_club.coach`)-[T1:`riding_club.player_coach`]-(T3:`riding_club.player`)\nRETURN T3.Player_name,T2.Coach_name\nORDER BY T3.Votes DESC",
        "question": "Show the names of players and names of their coaches in descending order of the votes of players.",
        "answers": [
            [
                "Ross Eadie",
                "Robert Chen"
            ],
            [
                "Patricia Cordner",
                "Robert Chen"
            ],
            [
                "Niki Ashton",
                "Jameson Tomas"
            ],
            [
                "Fiona Shiells",
                "Jameson Tomas"
            ],
            [
                "Jean Luc Bouch\u00e9",
                "Jameson Tomas"
            ],
            [
                "Rachel Heinrichs",
                "Smith Brown"
            ],
            [
                "Ron Strynadka",
                "Joe Fabbri"
            ]
        ]
    },
    {
        "db_id": "riding_club",
        "query": "MATCH (T1:`riding_club.club`)-[]-(T2:`riding_club.coach`)\nRETURN T1.Club_ID,T1.Club_name,count(*)",
        "question": "How many coaches does each club has? List the club id, name and the number of coaches.",
        "answers": [
            [
                1,
                "AIK",
                3
            ],
            [
                3,
                "Djurg\u00e5rdens IF",
                2
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (gymnast:`gymnast.gymnast`)\nRETURN count(*)",
        "question": "How many gymnasts are there?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (gymnast:`gymnast.gymnast`)\nRETURN count(*)",
        "question": "Count the number of gymnasts.",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (gymnast:`gymnast.gymnast`)\nRETURN gymnast.Total_Points\nORDER BY gymnast.Total_Points DESC",
        "question": "List the total points of gymnasts in descending order.",
        "answers": [
            [
                58.061
            ],
            [
                57.924
            ],
            [
                57.649
            ],
            [
                57.436
            ],
            [
                57.424
            ],
            [
                57.398
            ],
            [
                57.374
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (gymnast:`gymnast.gymnast`)\nRETURN gymnast.Total_Points\nORDER BY gymnast.Total_Points DESC",
        "question": "What are the total points for all gymnasts, ordered by total points descending?",
        "answers": [
            [
                58.061
            ],
            [
                57.924
            ],
            [
                57.649
            ],
            [
                57.436
            ],
            [
                57.424
            ],
            [
                57.398
            ],
            [
                57.374
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (gymnast:`gymnast.gymnast`)\nRETURN gymnast.Total_Points\nORDER BY gymnast.Floor_Exercise_Points DESC",
        "question": "List the total points of gymnasts in descending order of floor exercise points.",
        "answers": [
            [
                57.436
            ],
            [
                58.061
            ],
            [
                57.924
            ],
            [
                57.424
            ],
            [
                57.398
            ],
            [
                57.374
            ],
            [
                57.649
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (gymnast:`gymnast.gymnast`)\nRETURN gymnast.Total_Points\nORDER BY gymnast.Floor_Exercise_Points DESC",
        "question": "What are the total points of gymnasts, ordered by their floor exercise points descending?",
        "answers": [
            [
                57.436
            ],
            [
                58.061
            ],
            [
                57.924
            ],
            [
                57.424
            ],
            [
                57.398
            ],
            [
                57.374
            ],
            [
                57.649
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (gymnast:`gymnast.gymnast`)\nRETURN avg(gymnast.Horizontal_Bar_Points)",
        "question": "What is the average horizontal bar points for all gymnasts?",
        "answers": [
            [
                9.603428571428571
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (gymnast:`gymnast.gymnast`)\nRETURN avg(gymnast.Horizontal_Bar_Points)",
        "question": "Return the average horizontal bar points across all gymnasts.",
        "answers": [
            [
                9.603428571428571
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (people:`gymnast.people`)\nRETURN people.Name\nORDER BY people.Name ASC",
        "question": "What are the names of people in ascending alphabetical order?",
        "answers": [
            [
                "Ashley P\u00e9rez Cabrera"
            ],
            [
                "Clary Sermina Delgado Cid"
            ],
            [
                "Elizabeth Qui\u00f1\u00f3nez Aroyo"
            ],
            [
                "Endis de los Santos \u00c1lvarez"
            ],
            [
                "Eve Tatiana Cruz Oviedo"
            ],
            [
                "Lorraine S\u00faarez Carmona"
            ],
            [
                "Marina Castro Medina"
            ],
            [
                "Nadia Caba Rodr\u00edguez"
            ],
            [
                "Paul Hamm"
            ],
            [
                "Rosa Clarissa Ort\u00edz Melo"
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (people:`gymnast.people`)\nRETURN people.Name\nORDER BY people.Name ASC",
        "question": "Return the names of people, ordered alphabetically.",
        "answers": [
            [
                "Ashley P\u00e9rez Cabrera"
            ],
            [
                "Clary Sermina Delgado Cid"
            ],
            [
                "Elizabeth Qui\u00f1\u00f3nez Aroyo"
            ],
            [
                "Endis de los Santos \u00c1lvarez"
            ],
            [
                "Eve Tatiana Cruz Oviedo"
            ],
            [
                "Lorraine S\u00faarez Carmona"
            ],
            [
                "Marina Castro Medina"
            ],
            [
                "Nadia Caba Rodr\u00edguez"
            ],
            [
                "Paul Hamm"
            ],
            [
                "Rosa Clarissa Ort\u00edz Melo"
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nRETURN T2.Name",
        "question": "What are the names of gymnasts?",
        "answers": [
            [
                "Paul Hamm"
            ],
            [
                "Lorraine S\u00faarez Carmona"
            ],
            [
                "Elizabeth Qui\u00f1\u00f3nez Aroyo"
            ],
            [
                "Nadia Caba Rodr\u00edguez"
            ],
            [
                "Clary Sermina Delgado Cid"
            ],
            [
                "Marina Castro Medina"
            ],
            [
                "Endis de los Santos \u00c1lvarez"
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nRETURN T2.Name",
        "question": "Return the names of the gymnasts.",
        "answers": [
            [
                "Paul Hamm"
            ],
            [
                "Lorraine S\u00faarez Carmona"
            ],
            [
                "Elizabeth Qui\u00f1\u00f3nez Aroyo"
            ],
            [
                "Nadia Caba Rodr\u00edguez"
            ],
            [
                "Clary Sermina Delgado Cid"
            ],
            [
                "Marina Castro Medina"
            ],
            [
                "Endis de los Santos \u00c1lvarez"
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nWHERE T2.Hometown <> 'Santo Domingo'\nRETURN T2.Name",
        "question": "What are the names of gymnasts whose hometown is not \"Santo Domingo\"?",
        "answers": [
            [
                "Lorraine S\u00faarez Carmona"
            ],
            [
                "Clary Sermina Delgado Cid"
            ],
            [
                "Endis de los Santos \u00c1lvarez"
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nWHERE T2.Hometown <> 'Santo Domingo'\nRETURN T2.Name",
        "question": "Return the names of gymnasts who did not grow up in Santo Domingo.",
        "answers": [
            [
                "Lorraine S\u00faarez Carmona"
            ],
            [
                "Clary Sermina Delgado Cid"
            ],
            [
                "Endis de los Santos \u00c1lvarez"
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (people:`gymnast.people`)\nRETURN people.Age\nORDER BY people.Height DESC\nLIMIT 1",
        "question": "What is the age of the tallest person?",
        "answers": [
            [
                23.0
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (people:`gymnast.people`)\nRETURN people.Age\nORDER BY people.Height DESC\nLIMIT 1",
        "question": "Return the age of the person with the greatest height.",
        "answers": [
            [
                23.0
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (people:`gymnast.people`)\nRETURN people.Name\nORDER BY people.Age DESC\nLIMIT 5",
        "question": "List the names of the top 5 oldest people.",
        "answers": [
            [
                "Paul Hamm"
            ],
            [
                "Endis de los Santos \u00c1lvarez"
            ],
            [
                "Rosa Clarissa Ort\u00edz Melo"
            ],
            [
                "Nadia Caba Rodr\u00edguez"
            ],
            [
                "Lorraine S\u00faarez Carmona"
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (people:`gymnast.people`)\nRETURN people.Name\nORDER BY people.Age DESC\nLIMIT 5",
        "question": "What are the names of the five oldest people?",
        "answers": [
            [
                "Paul Hamm"
            ],
            [
                "Endis de los Santos \u00c1lvarez"
            ],
            [
                "Rosa Clarissa Ort\u00edz Melo"
            ],
            [
                "Nadia Caba Rodr\u00edguez"
            ],
            [
                "Lorraine S\u00faarez Carmona"
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nRETURN T1.Total_Points\nORDER BY T2.Age ASC\nLIMIT 1",
        "question": "What is the total point count of the youngest gymnast?",
        "answers": [
            [
                57.649
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nRETURN T1.Total_Points\nORDER BY T2.Age ASC\nLIMIT 1",
        "question": "Return the total points of the gymnast with the lowest age.",
        "answers": [
            [
                57.649
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nWHERE T1.Total_Points > 57.5\nRETURN DISTINCT T2.Hometown",
        "question": "What are the distinct hometowns of gymnasts with total points more than 57.5?",
        "answers": [
            [
                "Santo Domingo"
            ],
            [
                "Bonao"
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nWHERE T1.Total_Points > 57.5\nRETURN DISTINCT T2.Hometown",
        "question": "Give the different hometowns of gymnasts that have a total point score of above 57.5.",
        "answers": [
            [
                "Santo Domingo"
            ],
            [
                "Bonao"
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nRETURN T2.Hometown,count(*)",
        "question": "What are the hometowns of gymnasts and the corresponding number of gymnasts?",
        "answers": [
            [
                "Santo Domingo",
                4
            ],
            [
                "Bonao",
                1
            ],
            [
                "Santiago de los Caballeros",
                1
            ],
            [
                "Los Alcarrizos",
                1
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nRETURN T2.Hometown,count(*)",
        "question": "How many gymnasts are from each hometown?",
        "answers": [
            [
                "Santo Domingo",
                4
            ],
            [
                "Bonao",
                1
            ],
            [
                "Santiago de los Caballeros",
                1
            ],
            [
                "Los Alcarrizos",
                1
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nWITH count(T2.Hometown) AS cnt, T2\nRETURN T2.Hometown\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the most common hometown of gymnasts?",
        "answers": [
            [
                "Santo Domingo"
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nWITH count(T2.Hometown) AS cnt, T2\nRETURN T2.Hometown\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Return the hometown that is most common among gymnasts.",
        "answers": [
            [
                "Santo Domingo"
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nWITH T2.Hometown AS Hometown, count(*) AS count\nWHERE count  >= 2\nRETURN Hometown",
        "question": "What are the hometowns that are shared by at least two gymnasts?",
        "answers": [
            [
                "Santo Domingo"
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nWITH T2.Hometown AS Hometown, count(*) AS count\nWHERE count  >= 2\nRETURN Hometown",
        "question": "Give the hometowns from which two or more gymnasts are from.",
        "answers": [
            [
                "Santo Domingo"
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nRETURN T2.Name\nORDER BY T2.Height ASC",
        "question": "List the names of gymnasts in ascending order by their heights.",
        "answers": [
            [
                "Paul Hamm"
            ],
            [
                "Elizabeth Qui\u00f1\u00f3nez Aroyo"
            ],
            [
                "Endis de los Santos \u00c1lvarez"
            ],
            [
                "Lorraine S\u00faarez Carmona"
            ],
            [
                "Clary Sermina Delgado Cid"
            ],
            [
                "Marina Castro Medina"
            ],
            [
                "Nadia Caba Rodr\u00edguez"
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nRETURN T2.Name\nORDER BY T2.Height ASC",
        "question": "What are the names of gymnasts, ordered by their heights ascending?",
        "answers": [
            [
                "Paul Hamm"
            ],
            [
                "Elizabeth Qui\u00f1\u00f3nez Aroyo"
            ],
            [
                "Endis de los Santos \u00c1lvarez"
            ],
            [
                "Lorraine S\u00faarez Carmona"
            ],
            [
                "Clary Sermina Delgado Cid"
            ],
            [
                "Marina Castro Medina"
            ],
            [
                "Nadia Caba Rodr\u00edguez"
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nRETURN T2.Age\nORDER BY T1.Total_Points DESC",
        "question": "Show the ages of gymnasts in descending order of total points.",
        "answers": [
            [
                24.0
            ],
            [
                21.0
            ],
            [
                20.0
            ],
            [
                22.0
            ],
            [
                21.0
            ],
            [
                20.0
            ],
            [
                24.0
            ]
        ]
    },
    {
        "db_id": "gymnast",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nRETURN T2.Age\nORDER BY T1.Total_Points DESC",
        "question": "What are the ages of the gymnasts, ordered descending by their total points?",
        "answers": [
            [
                24.0
            ],
            [
                21.0
            ],
            [
                20.0
            ],
            [
                22.0
            ],
            [
                21.0
            ],
            [
                20.0
            ],
            [
                24.0
            ]
        ]
    },
    {
        "db_id": "small_bank_1",
        "query": "MATCH (accounts:`small_bank_1.ACCOUNTS`)\nRETURN count(*)",
        "question": "How many accounts are there in total?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "small_bank_1",
        "query": "MATCH (accounts:`small_bank_1.ACCOUNTS`)\nRETURN count(*)",
        "question": "Count the number of accounts.",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "small_bank_1",
        "query": "MATCH (checking:`small_bank_1.CHECKING`)\nRETURN avg(checking.balance)",
        "question": "Find the average checking balance.",
        "answers": [
            [
                4583.428571428572
            ]
        ]
    },
    {
        "db_id": "small_bank_1",
        "query": "MATCH (checking:`small_bank_1.CHECKING`)\nRETURN avg(checking.balance)",
        "question": "What is the average balance in checking accounts?",
        "answers": [
            [
                4583.428571428572
            ]
        ]
    },
    {
        "db_id": "small_bank_1",
        "query": "MATCH (savings:`small_bank_1.SAVINGS`)\nWITH avg(savings.balance) AS balance\nMATCH (savings:`small_bank_1.SAVINGS`)\nWHERE  savings.balance >  balance \nRETURN count(*)",
        "question": "How many accounts have a savings balance above the average savings balance?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "small_bank_1",
        "query": "MATCH (savings:`small_bank_1.SAVINGS`)\nWITH avg(savings.balance) AS balance\nMATCH (savings:`small_bank_1.SAVINGS`)\nWHERE  savings.balance >  balance \nRETURN count(*)",
        "question": "Find the number of accounts with a savings balance that is higher than the average savings balance.",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "small_bank_1",
        "query": "MATCH (accounts:`small_bank_1.ACCOUNTS`)\nRETURN accounts.name\nORDER BY accounts.name",
        "question": "List all customers\u2019 names in the alphabetical order.",
        "answers": [
            [
                "Brown"
            ],
            [
                "Granger"
            ],
            [
                "O'mahony"
            ],
            [
                "Porter"
            ],
            [
                "Wang"
            ],
            [
                "Weeks"
            ],
            [
                "Wesley"
            ]
        ]
    },
    {
        "db_id": "small_bank_1",
        "query": "MATCH (accounts:`small_bank_1.ACCOUNTS`)\nRETURN accounts.name\nORDER BY accounts.name",
        "question": "What are the names of all the customers in alphabetical order?",
        "answers": [
            [
                "Brown"
            ],
            [
                "Granger"
            ],
            [
                "O'mahony"
            ],
            [
                "Porter"
            ],
            [
                "Wang"
            ],
            [
                "Weeks"
            ],
            [
                "Wesley"
            ]
        ]
    },
    {
        "db_id": "browser_web",
        "query": "MATCH (browser:`browser_web.browser`)\nWHERE browser.market_share >= 5\nRETURN count(*)",
        "question": "How many main stream browsers whose market share is at least 5 exist?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "browser_web",
        "query": "MATCH (browser:`browser_web.browser`)\nRETURN browser.name\nORDER BY browser.market_share DESC",
        "question": "List the name of browsers in descending order by market share.",
        "answers": [
            [
                "Internet Explorer"
            ],
            [
                "Firefox"
            ],
            [
                "Safari"
            ],
            [
                "Opera"
            ]
        ]
    },
    {
        "db_id": "browser_web",
        "query": "MATCH (browser:`browser_web.browser`)\nRETURN browser.id,browser.name,browser.market_share",
        "question": "List the ids, names and market shares of all browsers.",
        "answers": [
            [
                1,
                "Internet Explorer",
                28.96
            ],
            [
                2,
                "Firefox",
                18.11
            ],
            [
                3,
                "Safari",
                8.54
            ],
            [
                4,
                "Opera",
                1.2
            ]
        ]
    },
    {
        "db_id": "browser_web",
        "query": "MATCH (browser:`browser_web.browser`)\nWHERE browser.name = 'Safari'\nRETURN browser.id,browser.market_share",
        "question": "What is the id and market share of the browser Safari?",
        "answers": [
            [
                3,
                8.54
            ]
        ]
    },
    {
        "db_id": "browser_web",
        "query": "MATCH (web_client_accelerator:`browser_web.Web_client_accelerator`)\nWHERE web_client_accelerator.Connection <> 'Broadband'\nRETURN web_client_accelerator.name,web_client_accelerator.Operating_system",
        "question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?",
        "answers": [
            [
                "CACHEbox",
                "Appliance (Linux)"
            ],
            [
                "CProxy",
                "Windows"
            ],
            [
                "Fasterfox",
                "Windows, Mac, Linux and Mobile devices"
            ],
            [
                "fasTun",
                "Any"
            ],
            [
                "Freewire",
                "Windows, except NT and 95"
            ],
            [
                "Heigh Speed",
                "Windows"
            ],
            [
                "Netfury",
                "Windows, Mac"
            ],
            [
                "Nitro",
                "Windows, Mac"
            ],
            [
                "ONSPEED",
                "Windows, Mac and Mobile devices"
            ],
            [
                "Opera Turbo",
                "Android, Linux, Mac and Windows devices"
            ],
            [
                "Polipo",
                "Unix (Linux, *BSD, Mac OS X, others), Windows"
            ],
            [
                "Propel",
                "Windows, Mac"
            ],
            [
                "Proxyconn Web Accelerator",
                "Windows, Mac, Mobile devices"
            ],
            [
                "RabbIT",
                "Any system with Java 1.6 VM available"
            ],
            [
                "Squid",
                "Unix (Linux, *BSD, Mac OS X, others), Windows"
            ],
            [
                "Toonel",
                "Windows, Linux, Mac OS, Symbian, WindowsMobile"
            ],
            [
                "WinGate",
                "Windows (2000 onwards)"
            ],
            [
                "Ziproxy",
                "Unix (Linux, *BSD, Mac OS X, others)"
            ]
        ]
    },
    {
        "db_id": "browser_web",
        "query": "MATCH (T1:`browser_web.browser`)-[T2:`browser_web.accelerator_compatible_browser`]-(T3:`browser_web.Web_client_accelerator`)\nWHERE T3.name = 'CProxy' AND T2.compatible_since_year > 1998\nRETURN T1.name",
        "question": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?",
        "answers": [
            [
                "Opera"
            ]
        ]
    },
    {
        "db_id": "browser_web",
        "query": "MATCH (T1:`browser_web.Web_client_accelerator`)-[T2:`browser_web.accelerator_compatible_browser`]-()\nWITH T1.name AS name, count(*) AS count, T1.id AS id\nWHERE count  >= 2\nRETURN id,name",
        "question": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
        "answers": [
            [
                1,
                "CACHEbox"
            ],
            [
                2,
                "CProxy"
            ],
            [
                3,
                "Fasterfox"
            ]
        ]
    },
    {
        "db_id": "browser_web",
        "query": "MATCH (T1:`browser_web.browser`)-[T2:`browser_web.accelerator_compatible_browser`]-()\nWITH T1, count(T1.id) AS cnt\nRETURN T1.id,T1.name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the id and name of the browser that is compatible with the most web accelerators?",
        "answers": [
            [
                1,
                "Internet Explorer"
            ]
        ]
    },
    {
        "db_id": "browser_web",
        "query": "MATCH (T2:`browser_web.browser`)-[T1:`browser_web.accelerator_compatible_browser`]-(T3:`browser_web.Web_client_accelerator`)\nWHERE T3.name = 'CACHEbox' AND T2.name = 'Internet Explorer'\nRETURN T1.compatible_since_year",
        "question": "When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?",
        "answers": [
            [
                1995
            ]
        ]
    },
    {
        "db_id": "browser_web",
        "query": "MATCH (T1:`browser_web.Web_client_accelerator`)-[T2:`browser_web.accelerator_compatible_browser`]-(T3:`browser_web.browser`)\nWHERE T3.market_share > 15\nRETURN DISTINCT T1.name",
        "question": "What distinct accelerator names are compatible with the browswers that have market share higher than 15?",
        "answers": [
            [
                "Nitro"
            ],
            [
                "CACHEbox"
            ],
            [
                "Fasterfox"
            ]
        ]
    },
    {
        "db_id": "browser_web",
        "query": "MATCH (web_client_accelerator:`browser_web.Web_client_accelerator`)\nRETURN web_client_accelerator.Operating_system,count(*)",
        "question": "Find the number of web accelerators used for each Operating system.",
        "answers": [
            [
                "Appliance (Linux)",
                1
            ],
            [
                "Windows",
                3
            ],
            [
                "Windows, Mac, Linux and Mobile devices",
                1
            ],
            [
                "Any",
                1
            ],
            [
                "Windows, except NT and 95",
                1
            ],
            [
                "Windows, Mac",
                3
            ],
            [
                "Windows, Mac and Mobile devices",
                1
            ],
            [
                "Android, Linux, Mac and Windows devices",
                1
            ],
            [
                "Unix (Linux, *BSD, Mac OS X, others), Windows",
                2
            ],
            [
                "Windows, Mac, Mobile devices",
                1
            ],
            [
                "Any system with Java 1.6 VM available",
                1
            ],
            [
                "Windows, Linux, Mac OS, Symbian, WindowsMobile",
                1
            ],
            [
                "Windows (2000 onwards)",
                1
            ],
            [
                "Unix (Linux, *BSD, Mac OS X, others)",
                1
            ]
        ]
    },
    {
        "db_id": "browser_web",
        "query": "MATCH (T2:`browser_web.browser`)-[T1:`browser_web.accelerator_compatible_browser`]-(T3:`browser_web.Web_client_accelerator`)\nRETURN T2.name,T3.name\nORDER BY T1.compatible_since_year DESC",
        "question": "give me names of all compatible browsers and accelerators in the descending order of compatible year",
        "answers": [
            [
                "Internet Explorer",
                "Nitro"
            ],
            [
                "Opera",
                "fasTun"
            ],
            [
                "Safari",
                "Fasterfox"
            ],
            [
                "Firefox",
                "Fasterfox"
            ],
            [
                "Internet Explorer",
                "Fasterfox"
            ],
            [
                "Opera",
                "CProxy"
            ],
            [
                "Firefox",
                "CACHEbox"
            ],
            [
                "Safari",
                "CProxy"
            ],
            [
                "Internet Explorer",
                "CACHEbox"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nRETURN count(*)",
        "question": "How many wrestlers are there?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nRETURN count(*)",
        "question": "Count the number of wrestlers.",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nRETURN wrestler.Name\nORDER BY wrestler.Days_held DESC",
        "question": "List the names of wrestlers in descending order of days held.",
        "answers": [
            [
                "The Great Sasuke \u00a7"
            ],
            [
                "Gran Hamada"
            ],
            [
                "Shinjiro Otani \u00a7"
            ],
            [
                "\u00daltimo Drag\u00f3n \u00a7"
            ],
            [
                "El Samurai \u00a7"
            ],
            [
                "Rey Misterio Sr."
            ],
            [
                "Jushin Liger \u00a7"
            ],
            [
                "Villa\u00f1o IV"
            ],
            [
                "Fishman"
            ],
            [
                "El Samurai"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nRETURN wrestler.Name\nORDER BY wrestler.Days_held DESC",
        "question": "What are the names of the wrestlers, ordered descending by days held?",
        "answers": [
            [
                "The Great Sasuke \u00a7"
            ],
            [
                "Gran Hamada"
            ],
            [
                "Shinjiro Otani \u00a7"
            ],
            [
                "\u00daltimo Drag\u00f3n \u00a7"
            ],
            [
                "El Samurai \u00a7"
            ],
            [
                "Rey Misterio Sr."
            ],
            [
                "Jushin Liger \u00a7"
            ],
            [
                "Villa\u00f1o IV"
            ],
            [
                "Fishman"
            ],
            [
                "El Samurai"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nRETURN wrestler.Name\nORDER BY wrestler.Days_held ASC\nLIMIT 1",
        "question": "What is the name of the wrestler with the fewest days held?",
        "answers": [
            [
                "El Samurai"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nRETURN wrestler.Name\nORDER BY wrestler.Days_held ASC\nLIMIT 1",
        "question": "Return the name of the wrestler who had the lowest number of days held.",
        "answers": [
            [
                "El Samurai"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nWHERE wrestler.Location <> 'Tokyo , Japan'\nRETURN DISTINCT wrestler.Reign",
        "question": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?",
        "answers": [
            [
                "1"
            ],
            [
                "2"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nWHERE wrestler.Location <> 'Tokyo , Japan'\nRETURN DISTINCT wrestler.Reign",
        "question": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.",
        "answers": [
            [
                "1"
            ],
            [
                "2"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nRETURN wrestler.Name,wrestler.Location",
        "question": "What are the names and location of the wrestlers?",
        "answers": [
            [
                "Rey Misterio Sr.",
                "Tijuana , Mexico"
            ],
            [
                "Fishman",
                "Tijuana , Mexico"
            ],
            [
                "Villa\u00f1o IV",
                "Tijuana , Mexico"
            ],
            [
                "Gran Hamada",
                "Tokyo , Japan"
            ],
            [
                "El Samurai",
                "Tokyo , Japan"
            ],
            [
                "The Great Sasuke \u00a7",
                "Tokyo , Japan"
            ],
            [
                "\u00daltimo Drag\u00f3n \u00a7",
                "Osaka , Japan"
            ],
            [
                "Jushin Liger \u00a7",
                "Tokyo , Japan"
            ],
            [
                "El Samurai \u00a7",
                "Sapporo , Japan"
            ],
            [
                "Shinjiro Otani \u00a7",
                "Nagoya , Japan"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nRETURN wrestler.Name,wrestler.Location",
        "question": "Give the names and locations of all wrestlers.",
        "answers": [
            [
                "Rey Misterio Sr.",
                "Tijuana , Mexico"
            ],
            [
                "Fishman",
                "Tijuana , Mexico"
            ],
            [
                "Villa\u00f1o IV",
                "Tijuana , Mexico"
            ],
            [
                "Gran Hamada",
                "Tokyo , Japan"
            ],
            [
                "El Samurai",
                "Tokyo , Japan"
            ],
            [
                "The Great Sasuke \u00a7",
                "Tokyo , Japan"
            ],
            [
                "\u00daltimo Drag\u00f3n \u00a7",
                "Osaka , Japan"
            ],
            [
                "Jushin Liger \u00a7",
                "Tokyo , Japan"
            ],
            [
                "El Samurai \u00a7",
                "Sapporo , Japan"
            ],
            [
                "Shinjiro Otani \u00a7",
                "Nagoya , Japan"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (elimination:`wrestler.Elimination`)\nWHERE elimination.Team = 'Team Orton'\nRETURN elimination.Elimination_Move",
        "question": "What are the elimination moves of wrestlers whose team is \"Team Orton\"?",
        "answers": [
            [
                "Go To Sleep"
            ],
            [
                "Spear"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (elimination:`wrestler.Elimination`)\nWHERE elimination.Team = 'Team Orton'\nRETURN elimination.Elimination_Move",
        "question": "Return the elimination movies of wrestlers on Team Orton.",
        "answers": [
            [
                "Go To Sleep"
            ],
            [
                "Spear"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (T1:`wrestler.Elimination`)-[]-(T2:`wrestler.wrestler`)\nRETURN T2.Name,T1.Elimination_Move",
        "question": "What are the names of wrestlers and the elimination moves?",
        "answers": [
            [
                "Rey Misterio Sr.",
                "Go To Sleep"
            ],
            [
                "Fishman",
                "Paydirt"
            ],
            [
                "Gran Hamada",
                "Rope hung DDT"
            ],
            [
                "El Samurai",
                "Silver Spoon DDT"
            ],
            [
                "\u00daltimo Drag\u00f3n \u00a7",
                "World's Strongest Slam"
            ],
            [
                "El Samurai \u00a7",
                "Spear"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (T1:`wrestler.Elimination`)-[]-(T2:`wrestler.wrestler`)\nRETURN T2.Name,T1.Elimination_Move",
        "question": "Give the names of wrestlers and their elimination moves.",
        "answers": [
            [
                "Rey Misterio Sr.",
                "Go To Sleep"
            ],
            [
                "Fishman",
                "Paydirt"
            ],
            [
                "Gran Hamada",
                "Rope hung DDT"
            ],
            [
                "El Samurai",
                "Silver Spoon DDT"
            ],
            [
                "\u00daltimo Drag\u00f3n \u00a7",
                "World's Strongest Slam"
            ],
            [
                "El Samurai \u00a7",
                "Spear"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (T1:`wrestler.Elimination`)-[]-(T2:`wrestler.wrestler`)\nRETURN T2.Name,T1.Team\nORDER BY T2.Days_held DESC",
        "question": "List the names of wrestlers and the teams in elimination in descending order of days held.",
        "answers": [
            [
                "Gran Hamada",
                "Team Batista"
            ],
            [
                "\u00daltimo Drag\u00f3n \u00a7",
                "Team Batista"
            ],
            [
                "El Samurai \u00a7",
                "Team Orton"
            ],
            [
                "Rey Misterio Sr.",
                "Team Orton"
            ],
            [
                "Fishman",
                "Team Batista"
            ],
            [
                "El Samurai",
                "Team Batista"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (T1:`wrestler.Elimination`)-[]-(T2:`wrestler.wrestler`)\nRETURN T2.Name,T1.Team\nORDER BY T2.Days_held DESC",
        "question": "What are the names of wrestlers and their teams in elimination, ordered descending by days held?",
        "answers": [
            [
                "Gran Hamada",
                "Team Batista"
            ],
            [
                "\u00daltimo Drag\u00f3n \u00a7",
                "Team Batista"
            ],
            [
                "El Samurai \u00a7",
                "Team Orton"
            ],
            [
                "Rey Misterio Sr.",
                "Team Orton"
            ],
            [
                "Fishman",
                "Team Batista"
            ],
            [
                "El Samurai",
                "Team Batista"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (T1:`wrestler.Elimination`)-[]-(T2:`wrestler.wrestler`)\nRETURN T1.Time\nORDER BY T2.Days_held DESC\nLIMIT 1",
        "question": "List the time of elimination of the wrestlers with largest days held.",
        "answers": [
            [
                "10:45"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (T1:`wrestler.Elimination`)-[]-(T2:`wrestler.wrestler`)\nRETURN T1.Time\nORDER BY T2.Days_held DESC\nLIMIT 1",
        "question": "What is the time of elimination for the wrestler with the most days held?",
        "answers": [
            [
                "10:45"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (T1:`wrestler.Elimination`)-[]-(T2:`wrestler.wrestler`)\nWHERE T2.Days_held > '50'\nRETURN T1.Time",
        "question": "Show times of elimination of wrestlers with days held more than 50.",
        "answers": [
            [
                "10:45"
            ],
            [
                "14:22"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (T1:`wrestler.Elimination`)-[]-(T2:`wrestler.wrestler`)\nWHERE T2.Days_held > '50'\nRETURN T1.Time",
        "question": "What are the times of elimination for wrestlers with over 50 days held?",
        "answers": [
            [
                "10:45"
            ],
            [
                "14:22"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (elimination:`wrestler.Elimination`)\nRETURN elimination.Team,count(*)",
        "question": "Show different teams in eliminations and the number of eliminations from each team.",
        "answers": [
            [
                "Team Orton",
                2
            ],
            [
                "Team Batista",
                4
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (elimination:`wrestler.Elimination`)\nRETURN elimination.Team,count(*)",
        "question": "How many eliminations did each team have?",
        "answers": [
            [
                "Team Orton",
                2
            ],
            [
                "Team Batista",
                4
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (elimination:`wrestler.Elimination`)\nWITH elimination.Team AS Team, count(*) AS count\nWHERE count  > 3\nRETURN Team",
        "question": "Show teams that have suffered more than three eliminations.",
        "answers": [
            [
                "Team Batista"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (elimination:`wrestler.Elimination`)\nWITH elimination.Team AS Team, count(*) AS count\nWHERE count  > 3\nRETURN Team",
        "question": "Which teams had more than 3 eliminations?",
        "answers": [
            [
                "Team Batista"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nRETURN wrestler.Reign,wrestler.Days_held",
        "question": "Show the reign and days held of wrestlers.",
        "answers": [
            [
                "1",
                "344"
            ],
            [
                "1",
                "113"
            ],
            [
                "1",
                "1285"
            ],
            [
                "1",
                "960"
            ],
            [
                "1",
                "1"
            ],
            [
                "1",
                "99"
            ],
            [
                "1",
                "54"
            ],
            [
                "1",
                "183"
            ],
            [
                "2",
                "35"
            ],
            [
                "1",
                "56"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nRETURN wrestler.Reign,wrestler.Days_held",
        "question": "What are the reigns and days held of all wrestlers?",
        "answers": [
            [
                "1",
                "344"
            ],
            [
                "1",
                "113"
            ],
            [
                "1",
                "1285"
            ],
            [
                "1",
                "960"
            ],
            [
                "1",
                "1"
            ],
            [
                "1",
                "99"
            ],
            [
                "1",
                "54"
            ],
            [
                "1",
                "183"
            ],
            [
                "2",
                "35"
            ],
            [
                "1",
                "56"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nWHERE wrestler.Days_held < '100'\nRETURN wrestler.Name",
        "question": "What are the names of wrestlers days held less than 100?",
        "answers": [
            [
                "El Samurai"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nWHERE wrestler.Days_held < '100'\nRETURN wrestler.Name",
        "question": "Return the names of wrestlers with fewer than 100 days held.",
        "answers": [
            [
                "El Samurai"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nWITH count(*) AS count, wrestler.Location AS Location\nWHERE count  > 2\nRETURN Location",
        "question": "List the locations that are shared by more than two wrestlers.",
        "answers": [
            [
                "Tijuana , Mexico"
            ],
            [
                "Tokyo , Japan"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nWITH count(*) AS count, wrestler.Location AS Location\nWHERE count  > 2\nRETURN Location",
        "question": "Which locations are shared by more than two wrestlers?",
        "answers": [
            [
                "Tijuana , Mexico"
            ],
            [
                "Tokyo , Japan"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nWHERE NOT (wrestler)-[]-(:`wrestler.Elimination`)    \nRETURN wrestler.Name",
        "question": "List the names of wrestlers that have not been eliminated.",
        "answers": [
            [
                "Villa\u00f1o IV"
            ],
            [
                "The Great Sasuke \u00a7"
            ],
            [
                "Jushin Liger \u00a7"
            ],
            [
                "Shinjiro Otani \u00a7"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nWHERE NOT (wrestler)-[]-(:`wrestler.Elimination`)    \nRETURN wrestler.Name",
        "question": "What are the names of wrestlers who have never been eliminated?",
        "answers": [
            [
                "Villa\u00f1o IV"
            ],
            [
                "The Great Sasuke \u00a7"
            ],
            [
                "Jushin Liger \u00a7"
            ],
            [
                "Shinjiro Otani \u00a7"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (elimination:`wrestler.Elimination`)\nRETURN count(DISTINCT elimination.Team)",
        "question": "What is the number of distinct teams that suffer elimination?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (elimination:`wrestler.Elimination`)\nRETURN count(DISTINCT elimination.Team)",
        "question": "How many different teams have had eliminated wrestlers?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (elimination:`wrestler.Elimination`)\nWHERE elimination.Eliminated_By = 'Punk' OR elimination.Eliminated_By = 'Orton'\nRETURN elimination.Time",
        "question": "Show the times of elimination by \"Punk\" or \"Orton\".",
        "answers": [
            [
                "00:11"
            ],
            [
                "10:45"
            ]
        ]
    },
    {
        "db_id": "wrestler",
        "query": "MATCH (elimination:`wrestler.Elimination`)\nWHERE elimination.Eliminated_By = 'Punk' OR elimination.Eliminated_By = 'Orton'\nRETURN elimination.Time",
        "question": "What are the times of elimination for any instances in which the elimination was done by Punk or Orton?",
        "answers": [
            [
                "00:11"
            ],
            [
                "10:45"
            ]
        ]
    },
    {
        "db_id": "school_finance",
        "query": "MATCH (school:`school_finance.School`)\nRETURN count(*)",
        "question": "How many schools are there?",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "school_finance",
        "query": "MATCH (school:`school_finance.School`)\nRETURN count(*)",
        "question": "Count the number of schools.",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "school_finance",
        "query": "MATCH (school:`school_finance.School`)\nRETURN school.School_name\nORDER BY school.School_name",
        "question": "Show all school names in alphabetical order.",
        "answers": [
            [
                "Bremen"
            ],
            [
                "Culver Community"
            ],
            [
                "Glenn"
            ],
            [
                "Jimtown"
            ],
            [
                "Knox Community"
            ],
            [
                "LaVille"
            ],
            [
                "New Prairie 1"
            ],
            [
                "Triton"
            ]
        ]
    },
    {
        "db_id": "school_finance",
        "query": "MATCH (school:`school_finance.School`)\nRETURN school.School_name,school.Location,school.Mascot",
        "question": "List the name, location, mascot for all schools.",
        "answers": [
            [
                "Bremen",
                "Bremen",
                "Lions"
            ],
            [
                "Culver Community",
                "Culver",
                "Cavaliers"
            ],
            [
                "Glenn",
                "Walkerton",
                "Falcons"
            ],
            [
                "Jimtown",
                "Elkhart",
                "Jimmies"
            ],
            [
                "Knox Community",
                "Knox",
                "Redskins"
            ],
            [
                "LaVille",
                "Lakeville",
                "Lancers"
            ],
            [
                "New Prairie 1",
                "New Carlisle",
                "Cougars"
            ],
            [
                "Triton",
                "Bourbon",
                "Trojans"
            ]
        ]
    },
    {
        "db_id": "school_finance",
        "query": "MATCH (school:`school_finance.School`)\nWITH avg(school.Enrollment) AS enrollment\nMATCH (school:`school_finance.School`)\nWHERE  school.Enrollment >  enrollment \nRETURN school.Mascot",
        "question": "What are the mascots for schools with enrollments above the average?",
        "answers": [
            [
                "Falcons"
            ],
            [
                "Jimmies"
            ],
            [
                "Redskins"
            ],
            [
                "Cougars"
            ]
        ]
    },
    {
        "db_id": "school_finance",
        "query": "MATCH (school:`school_finance.School`)\nRETURN school.School_name\nORDER BY school.Enrollment\nLIMIT 1",
        "question": "List the name of the school with the smallest enrollment.",
        "answers": [
            [
                "Culver Community"
            ]
        ]
    },
    {
        "db_id": "school_finance",
        "query": "MATCH (school:`school_finance.School`)\nRETURN avg(school.Enrollment),max(school.Enrollment),min(school.Enrollment)",
        "question": "Show the average, maximum, minimum enrollment of all schools.",
        "answers": [
            [
                519.375,
                852,
                287
            ]
        ]
    },
    {
        "db_id": "school_finance",
        "query": "MATCH (endowment:`school_finance.endowment`)\nRETURN endowment.amount,endowment.donator_name\nORDER BY endowment.amount DESC\nLIMIT 1",
        "question": "List the amount and donor name for the largest amount of donation.",
        "answers": [
            [
                9.83,
                "San Jos\u00e9 de Ocoa"
            ]
        ]
    },
    {
        "db_id": "school_finance",
        "query": "MATCH (budget:`school_finance.budget`)\nWHERE budget.Budgeted > 3000 AND budget.Year <= 2001\nRETURN count(*)",
        "question": "How many budgets are above 3000 in year 2001 or before?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "school_finance",
        "query": "MATCH (budget:`school_finance.budget`)\nWHERE budget.Budgeted > 3000 AND budget.Year <= 2001\nRETURN count(*)",
        "question": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "school_finance",
        "query": "MATCH (endowment:`school_finance.endowment`)\nRETURN DISTINCT endowment.donator_name",
        "question": "Show all donor names.",
        "answers": [
            [
                "Monte Plata"
            ],
            [
                "San Jos\u00e9 de Ocoa"
            ],
            [
                "Distrito Nacional"
            ],
            [
                "Valverde"
            ],
            [
                "San Crist\u00f3bal"
            ],
            [
                "Santo Domingo Este"
            ],
            [
                "Santiago"
            ],
            [
                "Duarte"
            ],
            [
                "Com. Dom. En Estados Unidos"
            ],
            [
                "La Vega"
            ],
            [
                "Peravia"
            ]
        ]
    },
    {
        "db_id": "school_finance",
        "query": "MATCH (budget:`school_finance.budget`)\nWHERE budget.Budgeted < budget.Invested\nRETURN count(*)",
        "question": "How many budget record has a budget amount smaller than the invested amount?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "protein_institute",
        "query": "MATCH (building:`protein_institute.building`)\nRETURN count(*)",
        "question": "How many buildings are there?",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "protein_institute",
        "query": "MATCH (building:`protein_institute.building`)\nRETURN building.Name,building.Street_address,building.Floors\nORDER BY building.Floors",
        "question": "Show the name, street address, and number of floors for all buildings ordered by the number of floors.",
        "answers": [
            [
                "Tampa City Hall",
                "315 John F. Kennedy Boulevard",
                10
            ],
            [
                "Citizens Bank Building",
                "701 North Franklin Street",
                12
            ],
            [
                "Floridan Hotel",
                "905 Franklin Street",
                17
            ],
            [
                "Franklin Exchange Building",
                "655 North Franklin Street",
                22
            ],
            [
                "Park Tower",
                "400 North Tampa Street",
                36
            ],
            [
                "One Tampa City Center",
                "201 North Franklin Street",
                39
            ],
            [
                "Bank of America Tower",
                "101 East Kennedy Boulevard",
                42
            ],
            [
                "100 North Tampa",
                "100 North Tampa Street",
                42
            ]
        ]
    },
    {
        "db_id": "protein_institute",
        "query": "MATCH (building:`protein_institute.building`)\nRETURN building.Name\nORDER BY building.Height_feet DESC\nLIMIT 1",
        "question": "What is the name of the tallest building?",
        "answers": [
            [
                "100 North Tampa"
            ]
        ]
    },
    {
        "db_id": "protein_institute",
        "query": "MATCH (building:`protein_institute.building`)\nRETURN avg(building.Floors),max(building.Floors),min(building.Floors)",
        "question": "What are the average, maximum, and minimum number of floors for all buildings?",
        "answers": [
            [
                27.5,
                42,
                10
            ]
        ]
    },
    {
        "db_id": "protein_institute",
        "query": "MATCH (building:`protein_institute.building`)\nWHERE building.Height_feet >= 200 AND building.Floors >= 20\nRETURN building.Name",
        "question": "List the names of buildings with at least 200 feet of height and with at least 20 floors.",
        "answers": [
            [
                "Franklin Exchange Building"
            ],
            [
                "Park Tower"
            ],
            [
                "One Tampa City Center"
            ],
            [
                "Bank of America Tower"
            ],
            [
                "100 North Tampa"
            ]
        ]
    },
    {
        "db_id": "protein_institute",
        "query": "MATCH (institution:`protein_institute.Institution`)\nWHERE institution.Founded > 1990 AND institution.Type = 'Private'\nRETURN institution.Institution,institution.Location",
        "question": "Show the names and locations of institutions that are founded after 1990 and have the type \"Private\".",
        "answers": [
            [
                "Ave Maria University",
                "Ave Maria, Florida"
            ],
            [
                "Lindenwood University\u2013Belleville",
                "Belleville, Illinois"
            ]
        ]
    },
    {
        "db_id": "protein_institute",
        "query": "MATCH (institution:`protein_institute.Institution`)\nWHERE institution.Founded > 1990 AND institution.Enrollment >= 1000\nRETURN institution.Type",
        "question": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.",
        "answers": [
            [
                "Private"
            ],
            [
                "Private"
            ]
        ]
    },
    {
        "db_id": "protein_institute",
        "query": "MATCH (building:`protein_institute.building`)\nWHERE NOT (building)-[]-(:`protein_institute.Institution`)    \nRETURN building.Name",
        "question": "Show the name of buildings that do not have any institution.",
        "answers": [
            [
                "Bank of America Tower"
            ]
        ]
    },
    {
        "db_id": "protein_institute",
        "query": "MATCH (T1:`protein_institute.building`)-[]-(T2:`protein_institute.Institution`)\nRETURN T1.Name,count(*)",
        "question": "For each building, show the name of the building and the number of institutions in it.",
        "answers": [
            [
                "Citizens Bank Building",
                2
            ],
            [
                "Tampa City Hall",
                2
            ],
            [
                "Floridan Hotel",
                1
            ],
            [
                "Franklin Exchange Building",
                2
            ],
            [
                "Park Tower",
                1
            ],
            [
                "One Tampa City Center",
                2
            ],
            [
                "100 North Tampa",
                1
            ]
        ]
    },
    {
        "db_id": "protein_institute",
        "query": "MATCH (T1:`protein_institute.building`)-[]-(T2:`protein_institute.Institution`)\nWHERE T2.Founded > 1880\nWITH T1.Name AS Name, count(*) AS count, T1.Height_feet AS Height_feet\nWHERE count  >= 2\nRETURN Name,Height_feet",
        "question": "Show the names and heights of buildings with at least two institutions founded after 1880.",
        "answers": [
            [
                "Tampa City Hall",
                160
            ],
            [
                "One Tampa City Center",
                537
            ],
            [
                "Citizens Bank Building",
                145
            ]
        ]
    },
    {
        "db_id": "protein_institute",
        "query": "MATCH (institution:`protein_institute.Institution`)\nRETURN DISTINCT institution.Type",
        "question": "Show all the distinct institution types.",
        "answers": [
            [
                "Private"
            ],
            [
                "Public"
            ],
            [
                "Tribal"
            ]
        ]
    },
    {
        "db_id": "protein_institute",
        "query": "MATCH (T1:`protein_institute.Institution`)-[]-(T2:`protein_institute.protein`)\nRETURN T1.Institution,count(*)",
        "question": "Show institution names along with the number of proteins for each institution.",
        "answers": [
            [
                "Dakota State University",
                1
            ],
            [
                "Haskell Indian Nations University",
                1
            ],
            [
                "Lindenwood University\u2013Belleville",
                2
            ],
            [
                "Valley City State University",
                1
            ]
        ]
    },
    {
        "db_id": "protein_institute",
        "query": "MATCH (T1:`protein_institute.Institution`)-[]-(T2:`protein_institute.protein`)\nWHERE T1.Founded > 1880 OR T1.Type = 'Private'\nRETURN count(*)",
        "question": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "protein_institute",
        "query": "MATCH (T1:`protein_institute.Institution`)-[]-(T2:`protein_institute.protein`)\nRETURN T2.protein_name,T1.Institution",
        "question": "Show the protein name and the institution name.",
        "answers": [
            [
                "uncharacterized protein C20orf117-like",
                "Dakota State University"
            ],
            [
                "uncharacterized protein LOC578090",
                "Haskell Indian Nations University"
            ],
            [
                "Centromeric protein E, putative",
                "Lindenwood University\u2013Belleville"
            ],
            [
                "conserved hypothetical protein",
                "Lindenwood University\u2013Belleville"
            ],
            [
                "surface antigen repeat family protein",
                "Valley City State University"
            ]
        ]
    },
    {
        "db_id": "cinema",
        "query": "MATCH (cinema:`cinema.cinema`)\nRETURN count(*)",
        "question": "How many cinema do we have?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "cinema",
        "query": "MATCH (cinema:`cinema.cinema`)\nRETURN count(*)",
        "question": "Count the number of cinemas.",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "cinema",
        "query": "MATCH (cinema:`cinema.cinema`)\nRETURN cinema.Name,cinema.Openning_year,cinema.Capacity",
        "question": "Show name, opening year, and capacity for each cinema.",
        "answers": [
            [
                "Codling",
                2010,
                1100
            ],
            [
                "Carrowleagh",
                2012,
                368
            ],
            [
                "Dublin Array",
                2015,
                364
            ],
            [
                "Glenmore",
                2009,
                305
            ],
            [
                "Glenough",
                2010,
                325
            ],
            [
                "Gortahile",
                2010,
                208
            ],
            [
                "Grouse Lodge",
                2011,
                203
            ],
            [
                "Moneypoint",
                2011,
                225
            ],
            [
                "Mount Callan",
                2011,
                908
            ],
            [
                "Oriel",
                2013,
                330
            ]
        ]
    },
    {
        "db_id": "cinema",
        "query": "MATCH (cinema:`cinema.cinema`)\nWITH avg(cinema.Capacity) AS capacity\nMATCH (cinema:`cinema.cinema`)\nWHERE  cinema.Capacity >  capacity \nRETURN cinema.Name,cinema.Location",
        "question": "Show the cinema name and location for cinemas with capacity above average.",
        "answers": [
            [
                "Codling",
                "County Wicklow"
            ],
            [
                "Mount Callan",
                "County Clare"
            ]
        ]
    },
    {
        "db_id": "cinema",
        "query": "MATCH (cinema:`cinema.cinema`)\nRETURN DISTINCT cinema.Location",
        "question": "What are all the locations with a cinema?",
        "answers": [
            [
                "County Wicklow"
            ],
            [
                "County Cork"
            ],
            [
                "County Dublin"
            ],
            [
                "County Clare"
            ],
            [
                "County Tipperary"
            ],
            [
                "County Laois"
            ],
            [
                "County Louth"
            ]
        ]
    },
    {
        "db_id": "cinema",
        "query": "MATCH (cinema:`cinema.cinema`)\nRETURN DISTINCT cinema.Location",
        "question": "Find the distinct locations that has a cinema.",
        "answers": [
            [
                "County Wicklow"
            ],
            [
                "County Cork"
            ],
            [
                "County Dublin"
            ],
            [
                "County Clare"
            ],
            [
                "County Tipperary"
            ],
            [
                "County Laois"
            ],
            [
                "County Louth"
            ]
        ]
    },
    {
        "db_id": "cinema",
        "query": "MATCH (cinema:`cinema.cinema`)\nRETURN cinema.Name,cinema.Openning_year\nORDER BY cinema.Openning_year DESC",
        "question": "Show all the cinema names and opening years in descending order of opening year.",
        "answers": [
            [
                "Dublin Array",
                2015
            ],
            [
                "Oriel",
                2013
            ],
            [
                "Carrowleagh",
                2012
            ],
            [
                "Grouse Lodge",
                2011
            ],
            [
                "Moneypoint",
                2011
            ],
            [
                "Mount Callan",
                2011
            ],
            [
                "Codling",
                2010
            ],
            [
                "Glenough",
                2010
            ],
            [
                "Gortahile",
                2010
            ],
            [
                "Glenmore",
                2009
            ]
        ]
    },
    {
        "db_id": "cinema",
        "query": "MATCH (cinema:`cinema.cinema`)\nRETURN cinema.Name,cinema.Location\nORDER BY cinema.Capacity DESC\nLIMIT 1",
        "question": "What are the name and location of the cinema with the largest capacity?",
        "answers": [
            [
                "Codling",
                "County Wicklow"
            ]
        ]
    },
    {
        "db_id": "cinema",
        "query": "MATCH (cinema:`cinema.cinema`)\nWHERE cinema.Openning_year >= 2011\nRETURN avg(cinema.Capacity),min(cinema.Capacity),max(cinema.Capacity)",
        "question": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.",
        "answers": [
            [
                399.6666666666667,
                203,
                908
            ]
        ]
    },
    {
        "db_id": "cinema",
        "query": "MATCH (cinema:`cinema.cinema`)\nRETURN cinema.Location,count(*)",
        "question": "Show each location and the number of cinemas there.",
        "answers": [
            [
                "County Wicklow",
                1
            ],
            [
                "County Cork",
                1
            ],
            [
                "County Dublin",
                1
            ],
            [
                "County Clare",
                3
            ],
            [
                "County Tipperary",
                2
            ],
            [
                "County Laois",
                1
            ],
            [
                "County Louth",
                1
            ]
        ]
    },
    {
        "db_id": "cinema",
        "query": "MATCH (cinema:`cinema.cinema`)\nWHERE cinema.Capacity > 300\nWITH cinema.Location AS Location, count(*) AS count\nWHERE count  >= 2\nRETURN Location",
        "question": "Show all the locations with at least two cinemas with capacity above 300.",
        "answers": [
            [
                "County Clare"
            ]
        ]
    },
    {
        "db_id": "cinema",
        "query": "MATCH (cinema:`cinema.cinema`)\nWHERE cinema.Capacity > 300\nWITH cinema.Location AS Location, count(*) AS count\nWHERE count  >= 2\nRETURN Location",
        "question": "Which locations have 2 or more cinemas with capacity over 300?",
        "answers": [
            [
                "County Clare"
            ]
        ]
    },
    {
        "db_id": "cinema",
        "query": "MATCH (film:`cinema.film`)\nRETURN film.Title,film.Directed_by",
        "question": "Show the title and director for all films.",
        "answers": [
            [
                "The Case of the Mystery Weekend",
                "Bill Schreiner"
            ],
            [
                "The Case of the Smart Dummy",
                "Bill Schreiner"
            ],
            [
                "The Case: Off the Record",
                "Bill Schreiner"
            ],
            [
                "The Case of the Bermuda Triangle",
                "Jesus Salvador Trevi\u00f1o"
            ],
            [
                "The Case of the Piggy Banker",
                "Bill Schreiner"
            ]
        ]
    },
    {
        "db_id": "cinema",
        "query": "MATCH (film:`cinema.film`)\nRETURN film.Title,film.Directed_by",
        "question": "What are the title and director of each film?",
        "answers": [
            [
                "The Case of the Mystery Weekend",
                "Bill Schreiner"
            ],
            [
                "The Case of the Smart Dummy",
                "Bill Schreiner"
            ],
            [
                "The Case: Off the Record",
                "Bill Schreiner"
            ],
            [
                "The Case of the Bermuda Triangle",
                "Jesus Salvador Trevi\u00f1o"
            ],
            [
                "The Case of the Piggy Banker",
                "Bill Schreiner"
            ]
        ]
    },
    {
        "db_id": "cinema",
        "query": "MATCH (film:`cinema.film`)\nRETURN DISTINCT film.Directed_by",
        "question": "Show all directors.",
        "answers": [
            [
                "Bill Schreiner"
            ],
            [
                "Jesus Salvador Trevi\u00f1o"
            ]
        ]
    },
    {
        "db_id": "cinema",
        "query": "MATCH (film:`cinema.film`)\nRETURN DISTINCT film.Directed_by",
        "question": "Who are all the directors?",
        "answers": [
            [
                "Bill Schreiner"
            ],
            [
                "Jesus Salvador Trevi\u00f1o"
            ]
        ]
    },
    {
        "db_id": "cinema",
        "query": "MATCH (film:`cinema.film`)\nRETURN film.Directed_by,count(*)",
        "question": "List all directors along with the number of films directed by each director.",
        "answers": [
            [
                "Bill Schreiner",
                4
            ],
            [
                "Jesus Salvador Trevi\u00f1o",
                1
            ]
        ]
    },
    {
        "db_id": "cinema",
        "query": "MATCH (T2:`cinema.film`)-[T1:`cinema.schedule`]-(T3:`cinema.cinema`)\nRETURN T3.Name,T2.Title,T1.Date,T1.Price",
        "question": "Show cinema name, film title, date, and price for each record in schedule.",
        "answers": [
            [
                "Codling",
                "The Case of the Smart Dummy",
                "21 May",
                12.99
            ],
            [
                "Codling",
                "The Case of the Mystery Weekend",
                "21 May",
                12.99
            ],
            [
                "Codling",
                "The Case: Off the Record",
                "21 Jun",
                8.99
            ],
            [
                "Carrowleagh",
                "The Case of the Mystery Weekend",
                "11 July",
                9.99
            ],
            [
                "Gortahile",
                "The Case of the Piggy Banker",
                "2 Aug",
                12.99
            ],
            [
                "Mount Callan",
                "The Case of the Bermuda Triangle",
                "20 May",
                9.99
            ],
            [
                "Oriel",
                "The Case of the Mystery Weekend",
                "19 May",
                15.99
            ]
        ]
    },
    {
        "db_id": "cinema",
        "query": "MATCH (cinema:`cinema.cinema`)\nWHERE cinema.Capacity > 300\nWITH cinema.Location AS Location, count(*) AS count\nWHERE count  > 1\nRETURN Location",
        "question": "Find the locations that have more than one movie theater with capacity above 300.",
        "answers": [
            [
                "County Clare"
            ]
        ]
    },
    {
        "db_id": "cinema",
        "query": "MATCH (cinema:`cinema.cinema`)\nWHERE cinema.Capacity > 300\nWITH cinema.Location AS Location, count(*) AS count\nWHERE count  > 1\nRETURN Location",
        "question": "In which locations are there more than one movie theater with capacity above 300?",
        "answers": [
            [
                "County Clare"
            ]
        ]
    },
    {
        "db_id": "products_for_hire",
        "query": "MATCH (T1:`products_for_hire.Customers`)-[]-(T2:`products_for_hire.Discount_Coupons`)\nWHERE T2.coupon_amount = 500\nRETURN T1.good_or_bad_customer",
        "question": "Are the customers holding coupons with amount 500 bad or good?",
        "answers": [
            [
                "bad"
            ]
        ]
    },
    {
        "db_id": "products_for_hire",
        "query": "MATCH (T1:`products_for_hire.Customers`)-[]-(T2:`products_for_hire.Bookings`)\nRETURN T1.customer_id,T1.first_name,count(*)",
        "question": "How many bookings did each customer make? List the customer id, first name, and the count.",
        "answers": [
            [
                3,
                "Rosalee",
                4
            ],
            [
                7,
                "Marilou",
                3
            ],
            [
                8,
                "Elinore",
                2
            ],
            [
                9,
                "German",
                2
            ],
            [
                10,
                "Layne",
                2
            ],
            [
                11,
                "Maximilian",
                1
            ],
            [
                15,
                "Jamir",
                1
            ]
        ]
    },
    {
        "db_id": "products_for_hire",
        "query": "MATCH (T2:`products_for_hire.Products_for_Hire`)-[T1:`products_for_hire.Products_Booked`]-()\nWHERE T1.booked_amount = 102.76\nRETURN T2.product_description",
        "question": "What is the product description of the product booked with an amount of 102.76?",
        "answers": [
            [
                "Anna Karenina"
            ]
        ]
    },
    {
        "db_id": "products_for_hire",
        "query": "MATCH (T1:`products_for_hire.Products_for_Hire`)-[T2:`products_for_hire.Products_Booked`]-(T3:`products_for_hire.Bookings`)\nWHERE T1.product_name = 'Book collection A'\nRETURN T3.booking_start_date,T3.booking_end_date",
        "question": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?",
        "answers": [
            [
                "2017-04-28 08:35:56",
                "2018-01-18 23:54:44"
            ],
            [
                "2016-11-27 17:19:40",
                "2018-03-04 21:42:45"
            ]
        ]
    },
    {
        "db_id": "products_for_hire",
        "query": "MATCH (products_for_hire:`products_for_hire.Products_for_Hire`)\nRETURN count(DISTINCT products_for_hire.product_type_code)",
        "question": "How many different product types are there?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "products_for_hire",
        "query": "MATCH (customers:`products_for_hire.Customers`)\nWHERE customers.good_or_bad_customer = 'good'\nRETURN customers.first_name,customers.last_name,customers.gender_mf\nORDER BY customers.last_name",
        "question": "What are the first name, last name, and gender of all the good customers? Order by their last name.",
        "answers": [
            [
                "Tyler",
                "Breitenberg",
                "1"
            ],
            [
                "Elinore",
                "Crona",
                "0"
            ],
            [
                "Jailyn",
                "Gerlach",
                "0"
            ],
            [
                "Ericka",
                "Greenholt",
                "0"
            ],
            [
                "Geovany",
                "Homenick",
                "0"
            ],
            [
                "Rosalee",
                "Kessler",
                "0"
            ],
            [
                "Laury",
                "Lemke",
                "1"
            ],
            [
                "German",
                "Little",
                "1"
            ],
            [
                "Maximilian",
                "Murphy",
                "0"
            ],
            [
                "Vergie",
                "Nicolas",
                "0"
            ],
            [
                "Marilou",
                "Strosin",
                "1"
            ]
        ]
    },
    {
        "db_id": "products_for_hire",
        "query": "MATCH (payments:`products_for_hire.Payments`)\nRETURN DISTINCT payments.payment_type_code",
        "question": "What are all the distinct payment types?",
        "answers": [
            [
                "Check"
            ],
            [
                "Cash"
            ],
            [
                "Credit Card"
            ],
            [
                "Direct Debit"
            ]
        ]
    },
    {
        "db_id": "products_for_hire",
        "query": "MATCH (products_for_hire:`products_for_hire.Products_for_Hire`)\nWHERE products_for_hire.product_name =~'.*[B|b]ook.*'\nRETURN products_for_hire.daily_hire_cost",
        "question": "What are the daily hire costs for the products with substring 'Book' in its name?",
        "answers": [
            [
                26.15
            ],
            [
                15.62
            ],
            [
                39.73
            ]
        ]
    },
    {
        "db_id": "products_for_hire",
        "query": "MATCH (payments:`products_for_hire.Payments`)\nWHERE payments.amount_paid > 300 OR payments.payment_type_code = 'Check'\nRETURN payments.payment_date",
        "question": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'",
        "answers": [
            [
                "2018-03-09 16:28:00"
            ],
            [
                "2018-03-03 13:39:44"
            ],
            [
                "2018-03-22 02:28:11"
            ],
            [
                "2018-03-23 20:36:04"
            ],
            [
                "2018-03-19 12:39:31"
            ],
            [
                "2018-03-02 06:25:45"
            ],
            [
                "2018-03-12 23:00:55"
            ],
            [
                "2018-03-12 23:23:56"
            ],
            [
                "2018-03-23 13:24:33"
            ],
            [
                "2018-03-03 03:07:00"
            ],
            [
                "2018-02-27 10:50:39"
            ],
            [
                "2018-03-03 14:22:51"
            ],
            [
                "2018-03-17 15:51:52"
            ],
            [
                "2018-03-17 03:07:45"
            ]
        ]
    },
    {
        "db_id": "products_for_hire",
        "query": "MATCH (products_for_hire:`products_for_hire.Products_for_Hire`)\nWHERE products_for_hire.product_type_code = 'Cutlery' AND products_for_hire.daily_hire_cost < 20\nRETURN products_for_hire.product_name,products_for_hire.product_description",
        "question": "What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?",
        "answers": [
            [
                "Book collection B",
                "War and Peace"
            ]
        ]
    },
    {
        "db_id": "phone_market",
        "query": "MATCH (phone:`phone_market.phone`)\nRETURN count(*)",
        "question": "How many phones are there?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "phone_market",
        "query": "MATCH (phone:`phone_market.phone`)\nRETURN phone.Name\nORDER BY phone.Price ASC",
        "question": "List the names of phones in ascending order of price.",
        "answers": [
            [
                "IPhone 5s"
            ],
            [
                "IPhone 6"
            ],
            [
                "IPhone 6s"
            ],
            [
                "IPhone 7"
            ],
            [
                "IPhone X"
            ]
        ]
    },
    {
        "db_id": "phone_market",
        "query": "MATCH (phone:`phone_market.phone`)\nRETURN phone.Memory_in_G,phone.Carrier",
        "question": "What are the memories and carriers of phones?",
        "answers": [
            [
                32,
                "Sprint"
            ],
            [
                128,
                "Sprint"
            ],
            [
                128,
                "TMobile"
            ],
            [
                16,
                "TMobile"
            ],
            [
                64,
                "TMobile"
            ]
        ]
    },
    {
        "db_id": "phone_market",
        "query": "MATCH (phone:`phone_market.phone`)\nWHERE phone.Memory_in_G > 32\nRETURN DISTINCT phone.Carrier",
        "question": "List the distinct carriers of phones with memories bigger than 32.",
        "answers": [
            [
                "Sprint"
            ],
            [
                "TMobile"
            ]
        ]
    },
    {
        "db_id": "phone_market",
        "query": "MATCH (phone:`phone_market.phone`)\nWHERE phone.Carrier = 'Sprint' OR phone.Carrier = 'TMobile'\nRETURN phone.Name",
        "question": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\".",
        "answers": [
            [
                "IPhone 5s"
            ],
            [
                "IPhone 6"
            ],
            [
                "IPhone 6s"
            ],
            [
                "IPhone 7"
            ],
            [
                "IPhone X"
            ]
        ]
    },
    {
        "db_id": "phone_market",
        "query": "MATCH (phone:`phone_market.phone`)\nRETURN phone.Carrier\nORDER BY phone.Price DESC\nLIMIT 1",
        "question": "What is the carrier of the most expensive phone?",
        "answers": [
            [
                "TMobile"
            ]
        ]
    },
    {
        "db_id": "phone_market",
        "query": "MATCH (phone:`phone_market.phone`)\nRETURN phone.Carrier,count(*)",
        "question": "Show different carriers of phones together with the number of phones with each carrier.",
        "answers": [
            [
                "Sprint",
                2
            ],
            [
                "TMobile",
                3
            ]
        ]
    },
    {
        "db_id": "phone_market",
        "query": "MATCH (phone:`phone_market.phone`)\nRETURN phone.Carrier\nORDER BY phone.Carrier DESC\nLIMIT 1",
        "question": "Show the most frequently used carrier of the phones.",
        "answers": [
            [
                "TMobile"
            ]
        ]
    },
    {
        "db_id": "phone_market",
        "query": "MATCH (T2:`phone_market.market`)-[T1:`phone_market.phone_market`]-(T3:`phone_market.phone`)\nRETURN T3.Name,T2.District",
        "question": "Show the names of phones and the districts of markets they are on.",
        "answers": [
            [
                "IPhone 5s",
                "Ontario"
            ],
            [
                "IPhone 5s",
                "Alberta"
            ],
            [
                "IPhone 6s",
                "British Columbia"
            ],
            [
                "IPhone 7",
                "Alberta"
            ],
            [
                "IPhone X",
                "British Columbia"
            ],
            [
                "IPhone X",
                "Quebec"
            ]
        ]
    },
    {
        "db_id": "phone_market",
        "query": "MATCH (T2:`phone_market.market`)-[T1:`phone_market.phone_market`]-(T3:`phone_market.phone`)\nRETURN T3.Name,T2.District\nORDER BY T2.Ranking",
        "question": "Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.",
        "answers": [
            [
                "IPhone 5s",
                "Alberta"
            ],
            [
                "IPhone 7",
                "Alberta"
            ],
            [
                "IPhone 5s",
                "Ontario"
            ],
            [
                "IPhone X",
                "Quebec"
            ],
            [
                "IPhone 6s",
                "British Columbia"
            ],
            [
                "IPhone X",
                "British Columbia"
            ]
        ]
    },
    {
        "db_id": "phone_market",
        "query": "MATCH (T2:`phone_market.market`)-[T1:`phone_market.phone_market`]-(T3:`phone_market.phone`)\nWHERE T2.Num_of_shops > 50\nRETURN T3.Name",
        "question": "Show the names of phones that are on market with number of shops greater than 50.",
        "answers": [
            [
                "IPhone 5s"
            ],
            [
                "IPhone X"
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (company:`gas_company.company`)\nRETURN count(*)",
        "question": "How many gas companies are there?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (company:`gas_company.company`)\nRETURN count(*)",
        "question": "What is the total number of companies?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (company:`gas_company.company`)\nRETURN company.Company,company.Rank\nORDER BY company.Sales_billion DESC",
        "question": "List the company name and rank for all companies in the decreasing order of their sales.",
        "answers": [
            [
                "Royal Dutch Shell",
                4
            ],
            [
                "ExxonMobil",
                1
            ],
            [
                "BP",
                11
            ],
            [
                "PetroChina",
                7
            ],
            [
                "General Electric",
                3
            ],
            [
                "Petrobras",
                10
            ],
            [
                "Berkshire Hathaway",
                8
            ],
            [
                "HSBC",
                6
            ],
            [
                "Wells Fargo",
                9
            ],
            [
                "Industrial and Commercial Bank of China",
                5
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (company:`gas_company.company`)\nRETURN company.Company,company.Rank\nORDER BY company.Sales_billion DESC",
        "question": "What is the name and rank of every company ordered by descending number of sales?",
        "answers": [
            [
                "Royal Dutch Shell",
                4
            ],
            [
                "ExxonMobil",
                1
            ],
            [
                "BP",
                11
            ],
            [
                "PetroChina",
                7
            ],
            [
                "General Electric",
                3
            ],
            [
                "Petrobras",
                10
            ],
            [
                "Berkshire Hathaway",
                8
            ],
            [
                "HSBC",
                6
            ],
            [
                "Wells Fargo",
                9
            ],
            [
                "Industrial and Commercial Bank of China",
                5
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (company:`gas_company.company`)\nWHERE company.Headquarters <> 'USA'\nRETURN company.Company,company.Main_Industry",
        "question": "Show the company name and the main industry for all companies whose headquarters are not from USA.",
        "answers": [
            [
                "Royal Dutch Shell",
                "Oil and gas"
            ],
            [
                "Industrial and Commercial Bank of China",
                "Banking"
            ],
            [
                "HSBC",
                "Banking"
            ],
            [
                "PetroChina",
                "Oil and gas"
            ],
            [
                "Petrobras",
                "Oil and gas"
            ],
            [
                "BP",
                "Oil and gas"
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (company:`gas_company.company`)\nWHERE company.Headquarters <> 'USA'\nRETURN company.Company,company.Main_Industry",
        "question": "What are the companies and main industries of all companies that are not headquartered in the United States?",
        "answers": [
            [
                "Royal Dutch Shell",
                "Oil and gas"
            ],
            [
                "Industrial and Commercial Bank of China",
                "Banking"
            ],
            [
                "HSBC",
                "Banking"
            ],
            [
                "PetroChina",
                "Oil and gas"
            ],
            [
                "Petrobras",
                "Oil and gas"
            ],
            [
                "BP",
                "Oil and gas"
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (company:`gas_company.company`)\nRETURN company.Company,company.Headquarters\nORDER BY company.Market_Value DESC",
        "question": "Show all company names and headquarters in the descending order of market value.",
        "answers": [
            [
                "ExxonMobil",
                "USA"
            ],
            [
                "PetroChina",
                "China"
            ],
            [
                "Industrial and Commercial Bank of China",
                "China"
            ],
            [
                "Royal Dutch Shell",
                "Netherlands"
            ],
            [
                "General Electric",
                "USA"
            ],
            [
                "Berkshire Hathaway",
                "USA"
            ],
            [
                "Petrobras",
                "Brazil"
            ],
            [
                "Wells Fargo",
                "USA"
            ],
            [
                "HSBC",
                "UK"
            ],
            [
                "BP",
                "UK"
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (company:`gas_company.company`)\nRETURN company.Company,company.Headquarters\nORDER BY company.Market_Value DESC",
        "question": "What are the names and headquarters of all companies ordered by descending market value?",
        "answers": [
            [
                "ExxonMobil",
                "USA"
            ],
            [
                "PetroChina",
                "China"
            ],
            [
                "Industrial and Commercial Bank of China",
                "China"
            ],
            [
                "Royal Dutch Shell",
                "Netherlands"
            ],
            [
                "General Electric",
                "USA"
            ],
            [
                "Berkshire Hathaway",
                "USA"
            ],
            [
                "Petrobras",
                "Brazil"
            ],
            [
                "Wells Fargo",
                "USA"
            ],
            [
                "HSBC",
                "UK"
            ],
            [
                "BP",
                "UK"
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (company:`gas_company.company`)\nRETURN min(company.Market_Value),max(company.Market_Value),avg(company.Market_Value)",
        "question": "Show minimum, maximum, and average market value for all companies.",
        "answers": [
            [
                147.4,
                407.4,
                225.34
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (company:`gas_company.company`)\nRETURN min(company.Market_Value),max(company.Market_Value),avg(company.Market_Value)",
        "question": "What is the minimum, maximum, and average market value for every company?",
        "answers": [
            [
                147.4,
                407.4,
                225.34
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (company:`gas_company.company`)\nRETURN DISTINCT company.Main_Industry",
        "question": "Show all main industry for all companies.",
        "answers": [
            [
                "Oil and gas"
            ],
            [
                "Conglomerate"
            ],
            [
                "Banking"
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (company:`gas_company.company`)\nRETURN DISTINCT company.Main_Industry",
        "question": "What are the different main industries for all companies?",
        "answers": [
            [
                "Oil and gas"
            ],
            [
                "Conglomerate"
            ],
            [
                "Banking"
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (company:`gas_company.company`)\nRETURN company.Headquarters,count(*)",
        "question": "List all headquarters and the number of companies in each headquarter.",
        "answers": [
            [
                "USA",
                4
            ],
            [
                "Netherlands",
                1
            ],
            [
                "China",
                2
            ],
            [
                "UK",
                2
            ],
            [
                "Brazil",
                1
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (company:`gas_company.company`)\nRETURN company.Headquarters,count(*)",
        "question": "For each headquarter, what are the headquarter and how many companies are centered there?",
        "answers": [
            [
                "USA",
                4
            ],
            [
                "Netherlands",
                1
            ],
            [
                "China",
                2
            ],
            [
                "UK",
                2
            ],
            [
                "Brazil",
                1
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (company:`gas_company.company`)\nWHERE company.Main_Industry = 'Banking'\nWITH count(*) AS count, company.Headquarters AS Headquarters\nWHERE count  >= 2\nRETURN Headquarters",
        "question": "Show headquarters with at least two companies in the banking industry.",
        "answers": []
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (company:`gas_company.company`)\nWHERE company.Main_Industry = 'Banking'\nWITH count(*) AS count, company.Headquarters AS Headquarters\nWHERE count  >= 2\nRETURN Headquarters",
        "question": "What are the headquarters with at least two companies in the banking industry?",
        "answers": []
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (gas_station:`gas_company.gas_station`)\nRETURN gas_station.Station_ID,gas_station.Location,gas_station.Manager_Name\nORDER BY gas_station.Open_Year",
        "question": "Show gas station id, location, and manager_name for all gas stations ordered by open year.",
        "answers": [
            [
                1,
                "Herne Hill",
                "BrianWingrave"
            ],
            [
                2,
                "Channel Hill",
                "SimonMarloe"
            ],
            [
                3,
                "Reading North",
                "Simon Cope Derek Marloe"
            ],
            [
                4,
                "Herne St",
                "Colin Denman"
            ],
            [
                5,
                "Reading",
                "Colin Denman"
            ],
            [
                6,
                "Herne Ave",
                "Tom Whit"
            ],
            [
                7,
                "Hennry Hill",
                "Bryan Taylor"
            ],
            [
                8,
                "Jane Ave",
                "BryanDenman"
            ],
            [
                9,
                "Maindy Hill",
                "Tony Bristow"
            ],
            [
                10,
                "Maindy Ave",
                "Luke Rowe"
            ],
            [
                11,
                "Newport Rd",
                "Jon Rowe"
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (gas_station:`gas_company.gas_station`)\nRETURN gas_station.Station_ID,gas_station.Location,gas_station.Manager_Name\nORDER BY gas_station.Open_Year",
        "question": "What are the gas station ids, locations, and manager names for the gas stations ordered by opening year?",
        "answers": [
            [
                1,
                "Herne Hill",
                "BrianWingrave"
            ],
            [
                2,
                "Channel Hill",
                "SimonMarloe"
            ],
            [
                3,
                "Reading North",
                "Simon Cope Derek Marloe"
            ],
            [
                4,
                "Herne St",
                "Colin Denman"
            ],
            [
                5,
                "Reading",
                "Colin Denman"
            ],
            [
                6,
                "Herne Ave",
                "Tom Whit"
            ],
            [
                7,
                "Hennry Hill",
                "Bryan Taylor"
            ],
            [
                8,
                "Jane Ave",
                "BryanDenman"
            ],
            [
                9,
                "Maindy Hill",
                "Tony Bristow"
            ],
            [
                10,
                "Maindy Ave",
                "Luke Rowe"
            ],
            [
                11,
                "Newport Rd",
                "Jon Rowe"
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (gas_station:`gas_company.gas_station`)\nWHERE 2000<=gas_station.Open_Year<=2005\nRETURN count(*)",
        "question": "How many gas station are opened between 2000 and 2005?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (gas_station:`gas_company.gas_station`)\nWHERE 2000<=gas_station.Open_Year<=2005\nRETURN count(*)",
        "question": "What is the total number of gas stations that opened between 2000 and 2005?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (gas_station:`gas_company.gas_station`)\nRETURN gas_station.Location,count(*)\nORDER BY gas_station.Location",
        "question": "Show all locations and the number of gas stations in each location ordered by the count.",
        "answers": [
            [
                "Channel Hill",
                1
            ],
            [
                "Hennry Hill",
                1
            ],
            [
                "Herne Ave",
                1
            ],
            [
                "Herne Hill",
                1
            ],
            [
                "Herne St",
                1
            ],
            [
                "Jane Ave",
                1
            ],
            [
                "Maindy Ave",
                1
            ],
            [
                "Maindy Hill",
                1
            ],
            [
                "Newport Rd",
                1
            ],
            [
                "Reading",
                1
            ],
            [
                "Reading North",
                1
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (gas_station:`gas_company.gas_station`)\nRETURN gas_station.Location,count(*)\nORDER BY gas_station.Location",
        "question": "For each location, how many gas stations are there in order?",
        "answers": [
            [
                "Channel Hill",
                1
            ],
            [
                "Hennry Hill",
                1
            ],
            [
                "Herne Ave",
                1
            ],
            [
                "Herne Hill",
                1
            ],
            [
                "Herne St",
                1
            ],
            [
                "Jane Ave",
                1
            ],
            [
                "Maindy Ave",
                1
            ],
            [
                "Maindy Hill",
                1
            ],
            [
                "Newport Rd",
                1
            ],
            [
                "Reading",
                1
            ],
            [
                "Reading North",
                1
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (T2:`gas_company.company`)-[T1:`gas_company.station_company`]-()\nRETURN T2.Company,count(*)",
        "question": "Show the company name with the number of gas station.",
        "answers": [
            [
                "ExxonMobil",
                2
            ],
            [
                "Royal Dutch Shell",
                1
            ],
            [
                "PetroChina",
                1
            ],
            [
                "Petrobras",
                1
            ],
            [
                "BP",
                1
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (T2:`gas_company.company`)-[T1:`gas_company.station_company`]-()\nRETURN T2.Company,count(*)",
        "question": "For each company id, what are the companies and how many gas stations does each one operate?",
        "answers": [
            [
                "ExxonMobil",
                2
            ],
            [
                "Royal Dutch Shell",
                1
            ],
            [
                "PetroChina",
                1
            ],
            [
                "Petrobras",
                1
            ],
            [
                "BP",
                1
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (T2:`gas_company.company`)-[T1:`gas_company.station_company`]-(T3:`gas_company.gas_station`)\nWHERE T2.Company = 'ExxonMobil'\nRETURN T3.Manager_Name",
        "question": "Show the manager name for gas stations belonging to the ExxonMobil company.",
        "answers": [
            [
                "Colin Denman"
            ],
            [
                "Jon Rowe"
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (T2:`gas_company.company`)-[T1:`gas_company.station_company`]-(T3:`gas_company.gas_station`)\nWHERE T2.Company = 'ExxonMobil'\nRETURN T3.Manager_Name",
        "question": "What are the names of the managers for gas stations that are operated by the ExxonMobil company?",
        "answers": [
            [
                "Colin Denman"
            ],
            [
                "Jon Rowe"
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (T2:`gas_company.company`)-[T1:`gas_company.station_company`]-(T3:`gas_company.gas_station`)\nWHERE T2.Market_Value > 100\nRETURN T3.Location",
        "question": "Show all locations where a gas station for company with market value greater than 100 is located.",
        "answers": [
            [
                "Herne St"
            ],
            [
                "Newport Rd"
            ],
            [
                "Herne Hill"
            ],
            [
                "Herne Ave"
            ],
            [
                "Hennry Hill"
            ],
            [
                "Maindy Ave"
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (T2:`gas_company.company`)-[T1:`gas_company.station_company`]-(T3:`gas_company.gas_station`)\nWHERE T2.Market_Value > 100\nRETURN T3.Location",
        "question": "What are the locations that have gas stations owned by a company with a market value greater than 100?",
        "answers": [
            [
                "Herne St"
            ],
            [
                "Newport Rd"
            ],
            [
                "Herne Hill"
            ],
            [
                "Herne Ave"
            ],
            [
                "Hennry Hill"
            ],
            [
                "Maindy Ave"
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (gas_station:`gas_company.gas_station`)\nRETURN gas_station.Location\nORDER BY gas_station.Open_Year",
        "question": "order all gas station locations by the opening year.",
        "answers": [
            [
                "Herne Hill"
            ],
            [
                "Channel Hill"
            ],
            [
                "Reading North"
            ],
            [
                "Herne St"
            ],
            [
                "Reading"
            ],
            [
                "Herne Ave"
            ],
            [
                "Hennry Hill"
            ],
            [
                "Jane Ave"
            ],
            [
                "Maindy Hill"
            ],
            [
                "Maindy Ave"
            ],
            [
                "Newport Rd"
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (gas_station:`gas_company.gas_station`)\nRETURN gas_station.Location\nORDER BY gas_station.Open_Year",
        "question": "What are the locations of all the gas stations ordered by opening year?",
        "answers": [
            [
                "Herne Hill"
            ],
            [
                "Channel Hill"
            ],
            [
                "Reading North"
            ],
            [
                "Herne St"
            ],
            [
                "Reading"
            ],
            [
                "Herne Ave"
            ],
            [
                "Hennry Hill"
            ],
            [
                "Jane Ave"
            ],
            [
                "Maindy Hill"
            ],
            [
                "Maindy Ave"
            ],
            [
                "Newport Rd"
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (company:`gas_company.company`)\nWHERE company.Main_Industry = 'Banking'\nRETURN company.Rank,company.Company,company.Market_Value\nORDER BY company.Sales_billion,company.Profits_billion",
        "question": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.",
        "answers": [
            [
                5,
                "Industrial and Commercial Bank of China",
                237.4
            ],
            [
                9,
                "Wells Fargo",
                178.7
            ],
            [
                6,
                "HSBC",
                164.3
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (company:`gas_company.company`)\nWHERE company.Main_Industry = 'Banking'\nRETURN company.Rank,company.Company,company.Market_Value\nORDER BY company.Sales_billion,company.Profits_billion",
        "question": "What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?",
        "answers": [
            [
                5,
                "Industrial and Commercial Bank of China",
                237.4
            ],
            [
                9,
                "Wells Fargo",
                178.7
            ],
            [
                6,
                "HSBC",
                164.3
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (T2:`gas_company.company`)-[T1:`gas_company.station_company`]-(T3:`gas_company.gas_station`)\nRETURN T3.Location,T3.Representative_Name\nORDER BY T2.Assets_billion DESC\nLIMIT 3",
        "question": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.",
        "answers": [
            [
                "Herne Hill",
                "Clive Burr"
            ],
            [
                "Herne St",
                "Ray Hughes"
            ],
            [
                "Newport Rd",
                "Tim Read"
            ]
        ]
    },
    {
        "db_id": "gas_company",
        "query": "MATCH (T2:`gas_company.company`)-[T1:`gas_company.station_company`]-(T3:`gas_company.gas_station`)\nRETURN T3.Location,T3.Representative_Name\nORDER BY T2.Assets_billion DESC\nLIMIT 3",
        "question": "What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?",
        "answers": [
            [
                "Herne Hill",
                "Clive Burr"
            ],
            [
                "Herne St",
                "Ray Hughes"
            ],
            [
                "Newport Rd",
                "Tim Read"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (region:`party_people.region`)\nRETURN count(*)",
        "question": "How many regions do we have?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (region:`party_people.region`)\nRETURN count(*)",
        "question": "Count the number of regions.",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (party:`party_people.party`)\nRETURN count(DISTINCT party.Party_name)",
        "question": "How many parties do we have?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (party:`party_people.party`)\nRETURN count(DISTINCT party.Party_name)",
        "question": "Count the number of different parties.",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (party:`party_people.party`)\nRETURN party.Minister,party.Took_office,party.Left_office\nORDER BY party.Left_office",
        "question": "Show the ministers and the time they took and left office, listed by the time they left office.",
        "answers": [
            [
                "Dr. Kwame Nkrumah (MP)",
                "1957",
                "1958"
            ],
            [
                "Kojo Botsio (MP)",
                "1958",
                "1959"
            ],
            [
                "Ebenezer Ako-Adjei (MP)",
                "1959",
                "1960"
            ],
            [
                "Imoru Egala (MP)",
                "1960",
                "1961"
            ],
            [
                "Ebenezer Ako-Adjei (MP)",
                "1961",
                "1962"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (party:`party_people.party`)\nRETURN party.Minister,party.Took_office,party.Left_office\nORDER BY party.Left_office",
        "question": "Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office?",
        "answers": [
            [
                "Dr. Kwame Nkrumah (MP)",
                "1957",
                "1958"
            ],
            [
                "Kojo Botsio (MP)",
                "1958",
                "1959"
            ],
            [
                "Ebenezer Ako-Adjei (MP)",
                "1959",
                "1960"
            ],
            [
                "Imoru Egala (MP)",
                "1960",
                "1961"
            ],
            [
                "Ebenezer Ako-Adjei (MP)",
                "1961",
                "1962"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (party:`party_people.party`)\nWHERE party.Took_office > '1961' OR party.Took_office < '1959'\nRETURN party.Minister",
        "question": "Show the minister who took office after 1961 or before 1959.",
        "answers": [
            [
                "Dr. Kwame Nkrumah (MP)"
            ],
            [
                "Kojo Botsio (MP)"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (party:`party_people.party`)\nWHERE party.Took_office > '1961' OR party.Took_office < '1959'\nRETURN party.Minister",
        "question": "Who are the ministers who took office after 1961 or before 1959?",
        "answers": [
            [
                "Dr. Kwame Nkrumah (MP)"
            ],
            [
                "Kojo Botsio (MP)"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (party:`party_people.party`)\nWHERE party.Party_name <> 'Progress Party'\nRETURN party.Minister",
        "question": "Show all ministers who do not belong to Progress Party.",
        "answers": [
            [
                "Dr. Kwame Nkrumah (MP)"
            ],
            [
                "Ebenezer Ako-Adjei (MP)"
            ],
            [
                "Imoru Egala (MP)"
            ],
            [
                "Ebenezer Ako-Adjei (MP)"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (party:`party_people.party`)\nWHERE party.Party_name <> 'Progress Party'\nRETURN party.Minister",
        "question": "Which ministers are not a part of the Progress Party?",
        "answers": [
            [
                "Dr. Kwame Nkrumah (MP)"
            ],
            [
                "Ebenezer Ako-Adjei (MP)"
            ],
            [
                "Imoru Egala (MP)"
            ],
            [
                "Ebenezer Ako-Adjei (MP)"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (party:`party_people.party`)\nRETURN party.Minister,party.Party_name\nORDER BY party.Took_office DESC",
        "question": "Show all ministers and parties they belong to in descending order of the time they took office.",
        "answers": [
            [
                "Ebenezer Ako-Adjei (MP)",
                "Sinefine Party"
            ],
            [
                "Imoru Egala (MP)",
                "Convention Union Party"
            ],
            [
                "Ebenezer Ako-Adjei (MP)",
                "3"
            ],
            [
                "Kojo Botsio (MP)",
                "Progress Party"
            ],
            [
                "Dr. Kwame Nkrumah (MP)",
                "Convention Peoples Party"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (party:`party_people.party`)\nRETURN party.Minister,party.Party_name\nORDER BY party.Took_office DESC",
        "question": "Who are the ministers and what parties do they belong to, listed descending by the times they took office?",
        "answers": [
            [
                "Ebenezer Ako-Adjei (MP)",
                "Sinefine Party"
            ],
            [
                "Imoru Egala (MP)",
                "Convention Union Party"
            ],
            [
                "Ebenezer Ako-Adjei (MP)",
                "3"
            ],
            [
                "Kojo Botsio (MP)",
                "Progress Party"
            ],
            [
                "Dr. Kwame Nkrumah (MP)",
                "Convention Peoples Party"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (party:`party_people.party`)\nRETURN party.Minister\nORDER BY party.Left_office DESC\nLIMIT 1",
        "question": "Return the minister who left office at the latest time.",
        "answers": [
            [
                "Ebenezer Ako-Adjei (MP)"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (party:`party_people.party`)\nRETURN party.Minister\nORDER BY party.Left_office DESC\nLIMIT 1",
        "question": "Which minister left office the latest?",
        "answers": [
            [
                "Ebenezer Ako-Adjei (MP)"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (T1:`party_people.member`)-[]-(T2:`party_people.party`)\nRETURN T1.Member_Name,T2.Party_name",
        "question": "List member names and their party names.",
        "answers": [
            [
                "Hon John Anderson",
                "Convention Peoples Party"
            ],
            [
                "Kerry Bartlett",
                "Convention Peoples Party"
            ],
            [
                "Hon Kim Beazley",
                "Progress Party"
            ],
            [
                "Anthony Albanese",
                "Progress Party"
            ],
            [
                "Hon Arch Bevis",
                "Progress Party"
            ],
            [
                "Hon Dick Adams",
                "Progress Party"
            ],
            [
                "Hon Bruce Baird",
                "3"
            ],
            [
                "Hon Fran Bailey",
                "3"
            ],
            [
                "Hon Kevin Andrews",
                "3"
            ],
            [
                "Mark Baker",
                "3"
            ],
            [
                "Phil Barresi",
                "3"
            ],
            [
                "Hon Bob Baldwin",
                "3"
            ],
            [
                "Hon Bruce Billson",
                "3"
            ],
            [
                "Hon Tony Abbott",
                "3"
            ],
            [
                "Peter Andren",
                "3"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (T1:`party_people.member`)-[]-(T2:`party_people.party`)\nRETURN T1.Member_Name,T2.Party_name",
        "question": "What are the names of members and their corresponding parties?",
        "answers": [
            [
                "Hon John Anderson",
                "Convention Peoples Party"
            ],
            [
                "Kerry Bartlett",
                "Convention Peoples Party"
            ],
            [
                "Hon Kim Beazley",
                "Progress Party"
            ],
            [
                "Anthony Albanese",
                "Progress Party"
            ],
            [
                "Hon Arch Bevis",
                "Progress Party"
            ],
            [
                "Hon Dick Adams",
                "Progress Party"
            ],
            [
                "Hon Bruce Baird",
                "3"
            ],
            [
                "Hon Fran Bailey",
                "3"
            ],
            [
                "Hon Kevin Andrews",
                "3"
            ],
            [
                "Mark Baker",
                "3"
            ],
            [
                "Phil Barresi",
                "3"
            ],
            [
                "Hon Bob Baldwin",
                "3"
            ],
            [
                "Hon Bruce Billson",
                "3"
            ],
            [
                "Hon Tony Abbott",
                "3"
            ],
            [
                "Peter Andren",
                "3"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (T1:`party_people.member`)-[]-(T2:`party_people.party`)\nRETURN T2.Party_name,count(*)",
        "question": "Show all party names and the number of members in each party.",
        "answers": [
            [
                "Convention Peoples Party",
                2
            ],
            [
                "Progress Party",
                4
            ],
            [
                "3",
                9
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (T1:`party_people.member`)-[]-(T2:`party_people.party`)\nRETURN T2.Party_name,count(*)",
        "question": "How many members are in each party?",
        "answers": [
            [
                "Convention Peoples Party",
                2
            ],
            [
                "Progress Party",
                4
            ],
            [
                "3",
                9
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (T1:`party_people.member`)-[]-(T2:`party_people.party`)\nWITH count(T1.Party_ID) AS cnt, T2\nRETURN T2.Party_name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the name of party with most number of members?",
        "answers": [
            [
                "3"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (T1:`party_people.member`)-[]-(T2:`party_people.party`)\nWITH count(T1.Party_ID) AS cnt, T2\nRETURN T2.Party_name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Return the name of the party with the most members.",
        "answers": [
            [
                "3"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (T1:`party_people.party`)-[]-(T2:`party_people.region`)\nRETURN T1.Party_name,T2.Region_name",
        "question": "Show all party names and their region names.",
        "answers": [
            [
                "Convention Peoples Party",
                "United Kingdom"
            ],
            [
                "Progress Party",
                "United Kingdom"
            ],
            [
                "3",
                "Japan"
            ],
            [
                "Convention Union Party",
                "United States"
            ],
            [
                "Sinefine Party",
                "United States"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (T1:`party_people.party`)-[]-(T2:`party_people.region`)\nRETURN T1.Party_name,T2.Region_name",
        "question": "What are the names of parties and their respective regions?",
        "answers": [
            [
                "Convention Peoples Party",
                "United Kingdom"
            ],
            [
                "Progress Party",
                "United Kingdom"
            ],
            [
                "3",
                "Japan"
            ],
            [
                "Convention Union Party",
                "United States"
            ],
            [
                "Sinefine Party",
                "United States"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (party:`party_people.party`)\nWHERE NOT (party)-[]-(:`party_people.member`)    \nRETURN party.Party_name",
        "question": "Show names of parties that does not have any members.",
        "answers": [
            [
                "Convention Union Party"
            ],
            [
                "Sinefine Party"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (party:`party_people.party`)\nWHERE NOT (party)-[]-(:`party_people.member`)    \nRETURN party.Party_name",
        "question": "What are the names of parties that have no members?",
        "answers": [
            [
                "Convention Union Party"
            ],
            [
                "Sinefine Party"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (T1:`party_people.member`)-[]-(T2:`party_people.party`)\nWHERE T2.Party_name <> 'Progress Party'\nRETURN T1.Member_Name",
        "question": "Show member names that are not in the Progress Party.",
        "answers": [
            [
                "Hon John Anderson"
            ],
            [
                "Kerry Bartlett"
            ],
            [
                "Hon Bruce Baird"
            ],
            [
                "Hon Fran Bailey"
            ],
            [
                "Hon Kevin Andrews"
            ],
            [
                "Mark Baker"
            ],
            [
                "Phil Barresi"
            ],
            [
                "Hon Bob Baldwin"
            ],
            [
                "Hon Bruce Billson"
            ],
            [
                "Hon Tony Abbott"
            ],
            [
                "Peter Andren"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (T1:`party_people.member`)-[]-(T2:`party_people.party`)\nWHERE T2.Party_name <> 'Progress Party'\nRETURN T1.Member_Name",
        "question": "Which member names corresponding to members who are not in the Progress Party?",
        "answers": [
            [
                "Hon John Anderson"
            ],
            [
                "Kerry Bartlett"
            ],
            [
                "Hon Bruce Baird"
            ],
            [
                "Hon Fran Bailey"
            ],
            [
                "Hon Kevin Andrews"
            ],
            [
                "Mark Baker"
            ],
            [
                "Phil Barresi"
            ],
            [
                "Hon Bob Baldwin"
            ],
            [
                "Hon Bruce Billson"
            ],
            [
                "Hon Tony Abbott"
            ],
            [
                "Peter Andren"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (party_events:`party_people.party_events`)\nRETURN count(*)",
        "question": "How many party events do we have?",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (party_events:`party_people.party_events`)\nRETURN count(*)",
        "question": "Count the number of party events.",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (T1:`party_people.party_events`)-[]-(T2:`party_people.party`)\nRETURN T2.Party_name,count(*)",
        "question": "Show party names and the number of events for each party.",
        "answers": [
            [
                "Convention Peoples Party",
                3
            ],
            [
                "Progress Party",
                2
            ],
            [
                "3",
                3
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (T1:`party_people.party_events`)-[]-(T2:`party_people.party`)\nRETURN T2.Party_name,count(*)",
        "question": "How many events are there for each party?",
        "answers": [
            [
                "Convention Peoples Party",
                3
            ],
            [
                "Progress Party",
                2
            ],
            [
                "3",
                3
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (T1:`party_people.party_events`)-[]-(T2:`party_people.party`)\nWITH count(*) AS count, T2.Party_name AS Party_name\nWHERE count  >= 2\nRETURN Party_name",
        "question": "What are the names of parties with at least 2 events?",
        "answers": [
            [
                "Convention Peoples Party"
            ],
            [
                "Progress Party"
            ],
            [
                "3"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (T1:`party_people.party_events`)-[]-(T2:`party_people.party`)\nWITH count(*) AS count, T2.Party_name AS Party_name\nWHERE count  >= 2\nRETURN Party_name",
        "question": "Return the names of parties that have two or more events.",
        "answers": [
            [
                "Convention Peoples Party"
            ],
            [
                "Progress Party"
            ],
            [
                "3"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (T1:`party_people.member`)-[]-(T2:`party_people.party_events`)\nWITH count(T2.None) AS cnt, T1\nRETURN T1.Member_Name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the name of member in charge of greatest number of events?",
        "answers": [
            [
                "Hon John Anderson"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (T1:`party_people.member`)-[]-(T2:`party_people.party_events`)\nWITH count(T2.None) AS cnt, T1\nRETURN T1.Member_Name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Return the name of the member who is in charge of the most events.",
        "answers": [
            [
                "Hon John Anderson"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (party_events:`party_people.party_events`)\nWITH party_events.Event_Name AS Event_Name, count(*) AS count\nWHERE count  > 2\nRETURN Event_Name",
        "question": "find the event names that have more than 2 records.",
        "answers": [
            [
                "Annaual Meeting"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (party_events:`party_people.party_events`)\nWITH party_events.Event_Name AS Event_Name, count(*) AS count\nWHERE count  > 2\nRETURN Event_Name",
        "question": "Which event names were used more than twice for party events?",
        "answers": [
            [
                "Annaual Meeting"
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (t1:`party_people.region`)-[]-(t2:`party_people.party`)-[]-(t3:`party_people.party_events`)\nWHERE t1.Region_name = 'United Kingdom' AND t3.Event_Name = 'Annaual Meeting'\nRETURN count(*)",
        "question": "How many Annual Meeting events happened in the United Kingdom region?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "party_people",
        "query": "MATCH (t1:`party_people.region`)-[]-(t2:`party_people.party`)-[]-(t3:`party_people.party_events`)\nWHERE t1.Region_name = 'United Kingdom' AND t3.Event_Name = 'Annaual Meeting'\nRETURN count(*)",
        "question": "Count the number of Annual Meeting events that took place in the region of the United Kingdom.",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "pilot_record",
        "query": "MATCH (pilot:`pilot_record.pilot`)\nRETURN count(*)",
        "question": "How many pilots are there?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "pilot_record",
        "query": "MATCH (pilot:`pilot_record.pilot`)\nRETURN pilot.Pilot_name\nORDER BY pilot.Rank ASC",
        "question": "List the names of pilots in ascending order of rank.",
        "answers": [
            [
                "Jermaine O'Neal"
            ],
            [
                "Patrick O'Bryant"
            ],
            [
                "Charles Oakley"
            ],
            [
                "Hakeem Olajuwon"
            ],
            [
                "Dan O'Sullivan"
            ]
        ]
    },
    {
        "db_id": "pilot_record",
        "query": "MATCH (pilot:`pilot_record.pilot`)\nRETURN pilot.Position,pilot.Team",
        "question": "What are the positions and teams of pilots?",
        "answers": [
            [
                "Center Team",
                "Bradley"
            ],
            [
                "Forward-Center Team",
                "Eau Claire High School"
            ],
            [
                "Center Team",
                "Fordham"
            ],
            [
                "Forward Team",
                "Virginia Union"
            ],
            [
                "Center Team",
                "Houston"
            ]
        ]
    },
    {
        "db_id": "pilot_record",
        "query": "MATCH (pilot:`pilot_record.pilot`)\nWHERE pilot.Age > 30\nRETURN DISTINCT pilot.Position",
        "question": "List the distinct positions of pilots older than 30.",
        "answers": [
            [
                "Center Team"
            ],
            [
                "Forward-Center Team"
            ]
        ]
    },
    {
        "db_id": "pilot_record",
        "query": "MATCH (pilot:`pilot_record.pilot`)\nWHERE pilot.Team = 'Bradley' OR pilot.Team = 'Fordham'\nRETURN pilot.Pilot_name",
        "question": "Show the names of pilots from team \"Bradley\" or \"Fordham\".",
        "answers": [
            [
                "Patrick O'Bryant"
            ],
            [
                "Dan O'Sullivan"
            ]
        ]
    },
    {
        "db_id": "pilot_record",
        "query": "MATCH (pilot:`pilot_record.pilot`)\nRETURN pilot.Join_Year\nORDER BY pilot.Rank ASC\nLIMIT 1",
        "question": "What is the joined year of the pilot of the highest rank?",
        "answers": [
            [
                2008
            ]
        ]
    },
    {
        "db_id": "pilot_record",
        "query": "MATCH (pilot:`pilot_record.pilot`)\nRETURN pilot.Nationality,count(*)",
        "question": "What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality.",
        "answers": [
            [
                "United States",
                3
            ],
            [
                "United Kindom",
                1
            ],
            [
                "Nigeria",
                1
            ]
        ]
    },
    {
        "db_id": "pilot_record",
        "query": "MATCH (pilot:`pilot_record.pilot`)\nRETURN pilot.Nationality\nORDER BY pilot.Nationality DESC\nLIMIT 1",
        "question": "Show the most common nationality of pilots.",
        "answers": [
            [
                "United States"
            ]
        ]
    },
    {
        "db_id": "pilot_record",
        "query": "MATCH (T2:`pilot_record.aircraft`)-[T1:`pilot_record.pilot_record`]-(T3:`pilot_record.pilot`)\nRETURN T3.Pilot_name,T2.Model",
        "question": "Show the names of pilots and models of aircrafts they have flied with.",
        "answers": [
            [
                "Patrick O'Bryant",
                "Advantage (Low Floor)"
            ],
            [
                "Patrick O'Bryant",
                "Advantage (Low Floor)"
            ],
            [
                "Patrick O'Bryant",
                "Phantom (High Floor)"
            ],
            [
                "Jermaine O'Neal",
                "Phantom (High Floor)"
            ],
            [
                "Dan O'Sullivan",
                "GE40LFR"
            ],
            [
                "Charles Oakley",
                "Phantom (High Floor)"
            ]
        ]
    },
    {
        "db_id": "pilot_record",
        "query": "MATCH (T2:`pilot_record.aircraft`)-[T1:`pilot_record.pilot_record`]-(T3:`pilot_record.pilot`)\nRETURN T3.Pilot_name,T2.Fleet_Series\nORDER BY T3.Rank",
        "question": "Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot.",
        "answers": [
            [
                "Jermaine O'Neal",
                "444-464 (21)"
            ],
            [
                "Patrick O'Bryant",
                "482-492 (11)"
            ],
            [
                "Patrick O'Bryant",
                "474-481 (8)"
            ],
            [
                "Patrick O'Bryant",
                "444-464 (21)"
            ],
            [
                "Charles Oakley",
                "465-467 (3)"
            ],
            [
                "Dan O'Sullivan",
                "300-309 (10)"
            ]
        ]
    },
    {
        "db_id": "pilot_record",
        "query": "MATCH (T2:`pilot_record.aircraft`)-[T1:`pilot_record.pilot_record`]-(T3:`pilot_record.pilot`)\nWHERE T3.Age < 34\nRETURN T2.Fleet_Series",
        "question": "Show the fleet series of the aircrafts flied by pilots younger than 34",
        "answers": [
            [
                "482-492 (11)"
            ],
            [
                "474-481 (8)"
            ],
            [
                "444-464 (21)"
            ],
            [
                "465-467 (3)"
            ]
        ]
    },
    {
        "db_id": "pilot_record",
        "query": "MATCH (T2:`pilot_record.pilot`)-[T1:`pilot_record.pilot_record`]-()\nRETURN T2.Pilot_name,count(*)",
        "question": "Show the names of pilots and the number of records they have.",
        "answers": [
            [
                "Patrick O'Bryant",
                3
            ],
            [
                "Jermaine O'Neal",
                1
            ],
            [
                "Dan O'Sullivan",
                1
            ],
            [
                "Charles Oakley",
                1
            ]
        ]
    },
    {
        "db_id": "pilot_record",
        "query": "MATCH (T2:`pilot_record.pilot`)-[T1:`pilot_record.pilot_record`]-()\nWITH T2.Pilot_name AS Pilot_name, count(*) AS count\nWHERE count  > 1\nRETURN Pilot_name,count",
        "question": "Show names of pilots that have more than one record.",
        "answers": [
            [
                "Patrick O'Bryant",
                3
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "MATCH (ref_document_status:`cre_Doc_Control_Systems.Ref_Document_Status`)\nRETURN ref_document_status.document_status_code",
        "question": "What document status codes do we have?",
        "answers": [
            [
                "working"
            ],
            [
                "done"
            ],
            [
                "overdue"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "MATCH (ref_document_types:`cre_Doc_Control_Systems.Ref_Document_Types`)\nRETURN ref_document_types.document_type_code",
        "question": "What document type codes do we have?",
        "answers": [
            [
                "CD"
            ],
            [
                "Paper"
            ],
            [
                "Hard Drive"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "MATCH (ref_shipping_agents:`cre_Doc_Control_Systems.Ref_Shipping_Agents`)\nRETURN ref_shipping_agents.shipping_agent_name",
        "question": "What are the shipping agent names?",
        "answers": [
            [
                "UPS"
            ],
            [
                "USPS"
            ],
            [
                "Airline"
            ],
            [
                "Fedex"
            ],
            [
                "Ship"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "MATCH (roles:`cre_Doc_Control_Systems.Roles`)\nRETURN roles.role_code",
        "question": "What are all role codes?",
        "answers": [
            [
                "ED"
            ],
            [
                "PT"
            ],
            [
                "MG"
            ],
            [
                "PR"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "MATCH (employees:`cre_Doc_Control_Systems.Employees`)\nRETURN count(*)",
        "question": "How many employees do we have?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "MATCH (documents:`cre_Doc_Control_Systems.Documents`)\nRETURN documents.document_id,documents.receipt_date",
        "question": "List all document ids and receipt dates of documents.",
        "answers": [
            [
                1,
                "2008-04-21 20:42:25"
            ],
            [
                2,
                "1974-05-08 00:00:46"
            ],
            [
                3,
                "2014-12-25 17:22:44"
            ],
            [
                4,
                "1973-11-05 21:48:53"
            ],
            [
                7,
                "1982-09-27 14:52:15"
            ],
            [
                10,
                "1976-09-15 19:24:17"
            ],
            [
                12,
                "1996-05-31 06:51:58"
            ],
            [
                13,
                "2015-04-03 09:36:19"
            ],
            [
                14,
                "2017-07-02 17:39:09"
            ],
            [
                15,
                "1986-12-14 14:18:59"
            ],
            [
                17,
                "1983-09-26 09:32:56"
            ],
            [
                20,
                "1996-07-27 03:30:40"
            ],
            [
                23,
                "1999-04-17 14:19:32"
            ],
            [
                24,
                "2005-09-30 00:10:02"
            ],
            [
                25,
                "1985-11-05 17:59:34"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "MATCH (T1:`cre_Doc_Control_Systems.Roles`)-[]-(T2:`cre_Doc_Control_Systems.Employees`)\nRETURN T1.role_description,T2.role_code,count(*)",
        "question": "How many employees does each role have? List role description, id and number of employees.",
        "answers": [
            [
                "Editor",
                "ED",
                2
            ],
            [
                "Photo",
                "PT",
                2
            ],
            [
                "Manager",
                "MG",
                1
            ],
            [
                "Proof Manager",
                "PR",
                1
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "MATCH (documents:`cre_Doc_Control_Systems.Documents`)\nWHERE documents.document_id = 2\nRETURN documents.document_type_code",
        "question": "List the document type code for the document with the id 2.",
        "answers": [
            [
                "Paper"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "MATCH (documents:`cre_Doc_Control_Systems.Documents`)\nWHERE documents.document_id = 3\nRETURN documents.receipt_date",
        "question": "What is the receipt date of the document with id 3?",
        "answers": [
            [
                "2014-12-25 17:22:44"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "MATCH ()-[documents_mailed:`cre_Doc_Control_Systems.Documents_Mailed`]-()\nWHERE documents_mailed.document_id = 7\nRETURN documents_mailed.mailing_date",
        "question": "What is the mail date of the document with id 7?",
        "answers": [
            [
                "1979-09-21 10:30:52"
            ],
            [
                "1979-09-21 10:30:52"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "MATCH (document_drafts:`cre_Doc_Control_Systems.Document_Drafts`)\nWHERE document_drafts.document_id = 7\nRETURN document_drafts.draft_details",
        "question": "What is draft detail of the document with id 7?",
        "answers": [
            [
                "m"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "MATCH (draft_copies:`cre_Doc_Control_Systems.Draft_Copies`)\nWHERE draft_copies.document_id = 2\nRETURN count(*)",
        "question": "How many draft copies does the document with id 2 have?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "MATCH (draft_copies:`cre_Doc_Control_Systems.Draft_Copies`)\nWITH count(*) AS count, draft_copies.document_id AS document_id\nWHERE count  > 1\nRETURN document_id,count",
        "question": "Which documents have more than 1 draft copies? List document id and number of draft copies.",
        "answers": [
            [
                2,
                2
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "MATCH ()-[circulation_history:`cre_Doc_Control_Systems.Circulation_History`]-()\nRETURN circulation_history.document_id,count(DISTINCT circulation_history.employee_id)",
        "question": "For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.",
        "answers": [
            [
                20,
                1
            ],
            [
                1,
                1
            ],
            [
                2,
                1
            ],
            [
                10,
                1
            ]
        ]
    },
    {
        "db_id": "company_1",
        "query": "MATCH (department:`company_1.department`)\nRETURN department.Dname\nORDER BY department.Mgr_start_date",
        "question": "List all department names ordered by their starting date.",
        "answers": [
            [
                "Headquarters"
            ],
            [
                "Research"
            ],
            [
                "Administration"
            ]
        ]
    },
    {
        "db_id": "company_1",
        "query": "MATCH (dependent:`company_1.dependent`)\nWHERE dependent.Relationship = 'Spouse'\nRETURN dependent.Dependent_name",
        "question": "find all dependent names who have a spouse relation with some employee.",
        "answers": [
            [
                "Joy"
            ],
            [
                "Abner"
            ],
            [
                "Elizabeth"
            ]
        ]
    },
    {
        "db_id": "company_1",
        "query": "MATCH (dependent:`company_1.dependent`)\nWHERE dependent.Sex = 'F'\nRETURN count(*)",
        "question": "how many female dependents are there?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "company_1",
        "query": "MATCH (employee:`company_1.employee`)\nWHERE employee.Salary > 30000\nRETURN employee.Fname,employee.Lname",
        "question": "Return the first names and last names of employees who earn more than 30000 in salary.",
        "answers": [
            [
                "Franklin",
                "Wong"
            ],
            [
                "Ramesh",
                "Narayan"
            ],
            [
                "James",
                "Borg"
            ],
            [
                "Jennifier",
                "Wallace"
            ]
        ]
    },
    {
        "db_id": "company_1",
        "query": "MATCH (employee:`company_1.employee`)\nWHERE employee.Salary < 50000\nRETURN count(*),employee.Sex",
        "question": "Find the number of employees of each gender whose salary is lower than 50000.",
        "answers": [
            [
                4,
                "M"
            ],
            [
                3,
                "F"
            ]
        ]
    },
    {
        "db_id": "company_1",
        "query": "MATCH (employee:`company_1.employee`)\nRETURN employee.Fname,employee.Lname,employee.Address\nORDER BY employee.Bdate",
        "question": "list the first and last names, and the addresses of all employees in the ascending order of their birth date.",
        "answers": [
            [
                "James",
                "Borg",
                "450 Stone, Houston, TX"
            ],
            [
                "Jennifier",
                "Wallace",
                "291 Berry, Bellaire, TX"
            ],
            [
                "Franklin",
                "Wong",
                "638 Voss, Houston, TX"
            ],
            [
                "Ramesh",
                "Narayan",
                "975 Fire Oak, Humble, TX"
            ],
            [
                "Jonh",
                "Smith",
                "731 Fondren, Houston, TX"
            ],
            [
                "Alicia",
                "Zelaya",
                "3321 Castle, Spring, TX"
            ],
            [
                "Ahmad",
                "Jabbar",
                "980 Dallas, Houston, TX"
            ],
            [
                "Joyce",
                "English",
                "5631 Rice, Houston, TX"
            ]
        ]
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "MATCH (T1:`local_govt_in_alabama.Events`)-[]-(T2:`local_govt_in_alabama.Services`)\nWHERE T2.Service_Type_Code = 'Marriage'\nRETURN T1.Event_Details",
        "question": "what are the event details of the services that have the type code 'Marriage'?",
        "answers": [
            [
                "Success"
            ],
            [
                "Fail"
            ],
            [
                "Fail"
            ],
            [
                "Fail"
            ],
            [
                "Success"
            ]
        ]
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "MATCH (T1:`local_govt_in_alabama.Events`)-[T2:`local_govt_in_alabama.Participants_in_Events`]-()\nWITH T1.Event_Details AS Event_Details, T1.Event_ID AS Event_ID, count(*) AS count\nWHERE count  > 1\nRETURN Event_ID,Event_Details",
        "question": "What are the ids and details of events that have more than one participants?",
        "answers": [
            [
                3,
                "Success"
            ],
            [
                13,
                "Fail"
            ],
            [
                17,
                "Fail"
            ],
            [
                40,
                "Fail"
            ],
            [
                80,
                "Success"
            ]
        ]
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "MATCH (T1:`local_govt_in_alabama.Participants`)-[T2:`local_govt_in_alabama.Participants_in_Events`]-()\nRETURN T1.Participant_ID,T1.Participant_Type_Code,count(*)",
        "question": "How many events have each participants attended? List the participant id, type and the number.",
        "answers": [
            [
                26,
                "Organizer",
                2
            ],
            [
                36,
                "Organizer",
                1
            ],
            [
                37,
                "Participant",
                2
            ],
            [
                60,
                "Participant",
                1
            ],
            [
                63,
                "Participant",
                1
            ],
            [
                64,
                "Participant",
                1
            ],
            [
                66,
                "Participant",
                4
            ],
            [
                86,
                "Organizer",
                2
            ],
            [
                90,
                "Participant",
                3
            ],
            [
                96,
                "Organizer",
                1
            ]
        ]
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "MATCH (participants:`local_govt_in_alabama.Participants`)\nRETURN participants.Participant_ID,participants.Participant_Type_Code,participants.Participant_Details",
        "question": "What are all the the participant ids, type code and details?",
        "answers": [
            [
                9,
                "Organizer",
                "Karlee Batz"
            ],
            [
                26,
                "Organizer",
                "Vilma Schinner"
            ],
            [
                28,
                "Organizer",
                "Lupe Deckow"
            ],
            [
                36,
                "Organizer",
                "Kenyatta Kuhn"
            ],
            [
                37,
                "Participant",
                "Miss Kaci Lebsack"
            ],
            [
                38,
                "Organizer",
                "Macy Mayer DDS"
            ],
            [
                60,
                "Participant",
                "Dewitt Walter"
            ],
            [
                63,
                "Participant",
                "Prof. Michelle Maggio Jr."
            ],
            [
                64,
                "Participant",
                "Dr. Jaydon Renner"
            ],
            [
                66,
                "Participant",
                "Justyn Lebsack"
            ],
            [
                75,
                "Participant",
                "Berniece Weimann"
            ],
            [
                86,
                "Organizer",
                "Neil Blick"
            ],
            [
                90,
                "Participant",
                "Dedrick Ebert"
            ],
            [
                96,
                "Organizer",
                "Miss Joyce Cremin"
            ],
            [
                98,
                "Participant",
                "Dr. Kris Deckow"
            ]
        ]
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "MATCH (participants:`local_govt_in_alabama.Participants`)\nWHERE participants.Participant_Type_Code = 'Organizer'\nRETURN count(*)",
        "question": "How many participants belong to the type 'Organizer'?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "MATCH (services:`local_govt_in_alabama.Services`)\nRETURN services.Service_Type_Code\nORDER BY services.Service_Type_Code",
        "question": "List the type of the services in alphabetical order.",
        "answers": [
            [
                "Birth Proof"
            ],
            [
                "Death Proof"
            ],
            [
                "Marriage"
            ],
            [
                "Property Change"
            ]
        ]
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "MATCH (events:`local_govt_in_alabama.Events`)\nRETURN events.Service_ID,events.Event_Details",
        "question": "List the service id and details for the events.",
        "answers": [
            [
                5,
                "Success"
            ],
            [
                8,
                "Success"
            ],
            [
                8,
                "Fail"
            ],
            [
                2,
                "Fail"
            ],
            [
                5,
                "Fail"
            ],
            [
                6,
                "Fail"
            ],
            [
                6,
                "Fail"
            ],
            [
                8,
                "Fail"
            ],
            [
                8,
                "Fail"
            ],
            [
                5,
                "Success"
            ],
            [
                2,
                "Fail"
            ],
            [
                2,
                "Success"
            ],
            [
                5,
                "Success"
            ],
            [
                2,
                "Fail"
            ],
            [
                2,
                "Success"
            ]
        ]
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "MATCH (participants:`local_govt_in_alabama.Participants`)\nRETURN participants.Participant_Type_Code\nORDER BY participants.Participant_Type_Code DESC\nLIMIT 1",
        "question": "What is the most common participant type?",
        "answers": [
            [
                "Participant"
            ]
        ]
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "MATCH ()-[participants_in_events:`local_govt_in_alabama.Participants_in_Events`]-()\nRETURN count(DISTINCT participants_in_events.Participant_ID)",
        "question": "What are all the distinct participant ids who attended any events?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "machine_repair",
        "query": "MATCH (technician:`machine_repair.technician`)\nRETURN count(*)",
        "question": "How many technicians are there?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "machine_repair",
        "query": "MATCH (technician:`machine_repair.technician`)\nRETURN count(*)",
        "question": "What is the number of technicians?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "machine_repair",
        "query": "MATCH (technician:`machine_repair.technician`)\nRETURN technician.Name\nORDER BY technician.Age ASC",
        "question": "List the names of technicians in ascending order of age.",
        "answers": [
            [
                "Mark Sewell"
            ],
            [
                "Lou Boudreau"
            ],
            [
                "Charlie Hollocher"
            ],
            [
                "John Brown"
            ],
            [
                "Joe Sewell"
            ],
            [
                "Mickey Cochrane"
            ],
            [
                "Tony Sewell"
            ],
            [
                "Eddie Collins"
            ],
            [
                "Joe Cochrane"
            ],
            [
                "Eddie Collins"
            ]
        ]
    },
    {
        "db_id": "machine_repair",
        "query": "MATCH (technician:`machine_repair.technician`)\nRETURN technician.Name\nORDER BY technician.Age ASC",
        "question": "What are the names of the technicians by ascending order of age?",
        "answers": [
            [
                "Mark Sewell"
            ],
            [
                "Lou Boudreau"
            ],
            [
                "Charlie Hollocher"
            ],
            [
                "John Brown"
            ],
            [
                "Joe Sewell"
            ],
            [
                "Mickey Cochrane"
            ],
            [
                "Tony Sewell"
            ],
            [
                "Eddie Collins"
            ],
            [
                "Joe Cochrane"
            ],
            [
                "Eddie Collins"
            ]
        ]
    },
    {
        "db_id": "machine_repair",
        "query": "MATCH (technician:`machine_repair.technician`)\nRETURN technician.Team,technician.Starting_Year",
        "question": "What are the team and starting year of technicians?",
        "answers": [
            [
                "NYY",
                2012.0
            ],
            [
                "NYY",
                2013.0
            ],
            [
                "CLE",
                2005.0
            ],
            [
                "CLE",
                2009.0
            ],
            [
                "CHC",
                2002.0
            ],
            [
                "CLE",
                2016.0
            ],
            [
                "CWS",
                2005.0
            ],
            [
                "CLE",
                2006.0
            ],
            [
                "CWS",
                2003.0
            ],
            [
                "PHA",
                2009.0
            ]
        ]
    },
    {
        "db_id": "machine_repair",
        "query": "MATCH (technician:`machine_repair.technician`)\nRETURN technician.Team,technician.Starting_Year",
        "question": "What is the team and starting year for each technician?",
        "answers": [
            [
                "NYY",
                2012.0
            ],
            [
                "NYY",
                2013.0
            ],
            [
                "CLE",
                2005.0
            ],
            [
                "CLE",
                2009.0
            ],
            [
                "CHC",
                2002.0
            ],
            [
                "CLE",
                2016.0
            ],
            [
                "CWS",
                2005.0
            ],
            [
                "CLE",
                2006.0
            ],
            [
                "CWS",
                2003.0
            ],
            [
                "PHA",
                2009.0
            ]
        ]
    },
    {
        "db_id": "machine_repair",
        "query": "MATCH (technician:`machine_repair.technician`)\nWHERE technician.Team <> 'NYY'\nRETURN technician.Name",
        "question": "List the name of technicians whose team is not \"NYY\".",
        "answers": [
            [
                "Tony Sewell"
            ],
            [
                "Mark Sewell"
            ],
            [
                "Charlie Hollocher"
            ],
            [
                "Lou Boudreau"
            ],
            [
                "Eddie Collins"
            ],
            [
                "Joe Cochrane"
            ],
            [
                "Eddie Collins"
            ],
            [
                "Mickey Cochrane"
            ]
        ]
    },
    {
        "db_id": "machine_repair",
        "query": "MATCH (technician:`machine_repair.technician`)\nWHERE technician.Team <> 'NYY'\nRETURN technician.Name",
        "question": "What is the name of the technician whose team is not 'NYY'?",
        "answers": [
            [
                "Tony Sewell"
            ],
            [
                "Mark Sewell"
            ],
            [
                "Charlie Hollocher"
            ],
            [
                "Lou Boudreau"
            ],
            [
                "Eddie Collins"
            ],
            [
                "Joe Cochrane"
            ],
            [
                "Eddie Collins"
            ],
            [
                "Mickey Cochrane"
            ]
        ]
    },
    {
        "db_id": "machine_repair",
        "query": "MATCH (technician:`machine_repair.technician`)\nWHERE technician.Age = 36 OR technician.Age = 37\nRETURN technician.Name",
        "question": "Show the name of technicians aged either 36 or 37",
        "answers": [
            [
                "Joe Sewell"
            ],
            [
                "John Brown"
            ]
        ]
    },
    {
        "db_id": "machine_repair",
        "query": "MATCH (technician:`machine_repair.technician`)\nWHERE technician.Age = 36 OR technician.Age = 37\nRETURN technician.Name",
        "question": "What are the names of the technicians aged either 36 or 37?",
        "answers": [
            [
                "Joe Sewell"
            ],
            [
                "John Brown"
            ]
        ]
    },
    {
        "db_id": "machine_repair",
        "query": "MATCH (technician:`machine_repair.technician`)\nRETURN technician.Starting_Year\nORDER BY technician.Age DESC\nLIMIT 1",
        "question": "What is the starting year of the oldest technicians?",
        "answers": [
            [
                2003.0
            ]
        ]
    },
    {
        "db_id": "machine_repair",
        "query": "MATCH (technician:`machine_repair.technician`)\nRETURN technician.Starting_Year\nORDER BY technician.Age DESC\nLIMIT 1",
        "question": "What is the starting year for the oldest technician?",
        "answers": [
            [
                2003.0
            ]
        ]
    },
    {
        "db_id": "machine_repair",
        "query": "MATCH (technician:`machine_repair.technician`)\nRETURN technician.Team,count(*)",
        "question": "Show different teams of technicians and the number of technicians in each team.",
        "answers": [
            [
                "NYY",
                2
            ],
            [
                "CLE",
                4
            ],
            [
                "CHC",
                1
            ],
            [
                "CWS",
                2
            ],
            [
                "PHA",
                1
            ]
        ]
    },
    {
        "db_id": "machine_repair",
        "query": "MATCH (technician:`machine_repair.technician`)\nRETURN technician.Team,count(*)",
        "question": "For each team, how many technicians are there?",
        "answers": [
            [
                "NYY",
                2
            ],
            [
                "CLE",
                4
            ],
            [
                "CHC",
                1
            ],
            [
                "CWS",
                2
            ],
            [
                "PHA",
                1
            ]
        ]
    },
    {
        "db_id": "machine_repair",
        "query": "MATCH (technician:`machine_repair.technician`)\nWITH count(*) AS count, technician.Team AS Team\nWHERE count  >= 2\nRETURN Team",
        "question": "Show the team that have at least two technicians.",
        "answers": [
            [
                "NYY"
            ],
            [
                "CLE"
            ],
            [
                "CWS"
            ]
        ]
    },
    {
        "db_id": "machine_repair",
        "query": "MATCH (technician:`machine_repair.technician`)\nWITH count(*) AS count, technician.Team AS Team\nWHERE count  >= 2\nRETURN Team",
        "question": "What is the team with at least 2 technicians?",
        "answers": [
            [
                "NYY"
            ],
            [
                "CLE"
            ],
            [
                "CWS"
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nRETURN count(*)",
        "question": "How many entrepreneurs are there?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nRETURN count(*)",
        "question": "Count the number of entrepreneurs.",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nRETURN entrepreneur.Company\nORDER BY entrepreneur.Money_Requested DESC",
        "question": "List the companies of entrepreneurs in descending order of money requested.",
        "answers": [
            [
                "Umbrolly"
            ],
            [
                "Grails Ltd"
            ],
            [
                "Elizabeth Galton Ltd"
            ],
            [
                "Mycorrhizal Systems"
            ],
            [
                "Le Beanock"
            ],
            [
                "IV Cam"
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nRETURN entrepreneur.Company\nORDER BY entrepreneur.Money_Requested DESC",
        "question": "What are the companies of entrepreneurs, ordered descending by amount of money requested?",
        "answers": [
            [
                "Umbrolly"
            ],
            [
                "Grails Ltd"
            ],
            [
                "Elizabeth Galton Ltd"
            ],
            [
                "Mycorrhizal Systems"
            ],
            [
                "Le Beanock"
            ],
            [
                "IV Cam"
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nRETURN entrepreneur.Company,entrepreneur.Investor",
        "question": "List the companies and the investors of entrepreneurs.",
        "answers": [
            [
                "Umbrolly",
                "Duncan Bannatyne"
            ],
            [
                "Grails Ltd",
                "Doug Richard"
            ],
            [
                "Le Beanock",
                "Rachel Elnaugh"
            ],
            [
                "IV Cam",
                "Peter Jones"
            ],
            [
                "Mycorrhizal Systems",
                "Simon Woodroffe"
            ],
            [
                "Elizabeth Galton Ltd",
                "Duncan Bannatyne"
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nRETURN entrepreneur.Company,entrepreneur.Investor",
        "question": "What are the companies and investors that correspond to each entrepreneur?",
        "answers": [
            [
                "Umbrolly",
                "Duncan Bannatyne"
            ],
            [
                "Grails Ltd",
                "Doug Richard"
            ],
            [
                "Le Beanock",
                "Rachel Elnaugh"
            ],
            [
                "IV Cam",
                "Peter Jones"
            ],
            [
                "Mycorrhizal Systems",
                "Simon Woodroffe"
            ],
            [
                "Elizabeth Galton Ltd",
                "Duncan Bannatyne"
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nRETURN avg(entrepreneur.Money_Requested)",
        "question": "What is the average money requested by all entrepreneurs?",
        "answers": [
            [
                93166.66666666667
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nRETURN avg(entrepreneur.Money_Requested)",
        "question": "Return the average money requested across all entrepreneurs.",
        "answers": [
            [
                93166.66666666667
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (people:`entrepreneur.people`)\nRETURN people.Name\nORDER BY people.Weight ASC",
        "question": "What are the names of people in ascending order of weight?",
        "answers": [
            [
                "Fabrizio Buonocore"
            ],
            [
                "Leonardo Binchi"
            ],
            [
                "Alberto Angelini"
            ],
            [
                "Roberto Calcaterra"
            ],
            [
                "Marco Gerini"
            ],
            [
                "Maurizio Felugo"
            ],
            [
                "Francesco Postiglione"
            ],
            [
                "Goran Fiorentini"
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (people:`entrepreneur.people`)\nRETURN people.Name\nORDER BY people.Weight ASC",
        "question": "Return the names of people, ordered by weight ascending.",
        "answers": [
            [
                "Fabrizio Buonocore"
            ],
            [
                "Leonardo Binchi"
            ],
            [
                "Alberto Angelini"
            ],
            [
                "Roberto Calcaterra"
            ],
            [
                "Marco Gerini"
            ],
            [
                "Maurizio Felugo"
            ],
            [
                "Francesco Postiglione"
            ],
            [
                "Goran Fiorentini"
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nRETURN T2.Name",
        "question": "What are the names of entrepreneurs?",
        "answers": [
            [
                "Francesco Postiglione"
            ],
            [
                "Leonardo Binchi"
            ],
            [
                "Fabrizio Buonocore"
            ],
            [
                "Roberto Calcaterra"
            ],
            [
                "Goran Fiorentini"
            ],
            [
                "Maurizio Felugo"
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nRETURN T2.Name",
        "question": "Return the names of entrepreneurs.",
        "answers": [
            [
                "Francesco Postiglione"
            ],
            [
                "Leonardo Binchi"
            ],
            [
                "Fabrizio Buonocore"
            ],
            [
                "Roberto Calcaterra"
            ],
            [
                "Goran Fiorentini"
            ],
            [
                "Maurizio Felugo"
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nWHERE T1.Investor <> 'Rachel Elnaugh'\nRETURN T2.Name",
        "question": "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?",
        "answers": [
            [
                "Francesco Postiglione"
            ],
            [
                "Leonardo Binchi"
            ],
            [
                "Roberto Calcaterra"
            ],
            [
                "Goran Fiorentini"
            ],
            [
                "Maurizio Felugo"
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nWHERE T1.Investor <> 'Rachel Elnaugh'\nRETURN T2.Name",
        "question": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.",
        "answers": [
            [
                "Francesco Postiglione"
            ],
            [
                "Leonardo Binchi"
            ],
            [
                "Roberto Calcaterra"
            ],
            [
                "Goran Fiorentini"
            ],
            [
                "Maurizio Felugo"
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (people:`entrepreneur.people`)\nRETURN people.Weight\nORDER BY people.Height ASC\nLIMIT 1",
        "question": "What is the weight of the shortest person?",
        "answers": [
            [
                75.0
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (people:`entrepreneur.people`)\nRETURN people.Weight\nORDER BY people.Height ASC\nLIMIT 1",
        "question": "Return the weight of the shortest person.",
        "answers": [
            [
                75.0
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nRETURN T2.Name\nORDER BY T2.Weight DESC\nLIMIT 1",
        "question": "What is the name of the entrepreneur with the greatest weight?",
        "answers": [
            [
                "Goran Fiorentini"
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nRETURN T2.Name\nORDER BY T2.Weight DESC\nLIMIT 1",
        "question": "Return the name of the heaviest entrepreneur.",
        "answers": [
            [
                "Goran Fiorentini"
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nWHERE T1.Investor = 'Simon Woodroffe' OR T1.Investor = 'Peter Jones'\nRETURN T2.Date_of_Birth",
        "question": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?",
        "answers": [
            [
                "1972-02-06"
            ],
            [
                "1981-11-21"
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nWHERE T1.Investor = 'Simon Woodroffe' OR T1.Investor = 'Peter Jones'\nRETURN T2.Date_of_Birth",
        "question": "Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.",
        "answers": [
            [
                "1972-02-06"
            ],
            [
                "1981-11-21"
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nRETURN T2.Weight\nORDER BY T1.Money_Requested DESC",
        "question": "What are the weights of entrepreneurs in descending order of money requested?",
        "answers": [
            [
                80.0
            ],
            [
                57.0
            ],
            [
                76.0
            ],
            [
                89.0
            ],
            [
                45.0
            ],
            [
                67.0
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nRETURN T2.Weight\nORDER BY T1.Money_Requested DESC",
        "question": "Return the weights of entrepreneurs, ordered descending by amount of money requested.",
        "answers": [
            [
                80.0
            ],
            [
                57.0
            ],
            [
                76.0
            ],
            [
                89.0
            ],
            [
                45.0
            ],
            [
                67.0
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nRETURN entrepreneur.Investor,count(*)",
        "question": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?",
        "answers": [
            [
                "Duncan Bannatyne",
                2
            ],
            [
                "Doug Richard",
                1
            ],
            [
                "Rachel Elnaugh",
                1
            ],
            [
                "Peter Jones",
                1
            ],
            [
                "Simon Woodroffe",
                1
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nRETURN entrepreneur.Investor,count(*)",
        "question": "How many entrepreneurs correspond to each investor?",
        "answers": [
            [
                "Duncan Bannatyne",
                2
            ],
            [
                "Doug Richard",
                1
            ],
            [
                "Rachel Elnaugh",
                1
            ],
            [
                "Peter Jones",
                1
            ],
            [
                "Simon Woodroffe",
                1
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nWITH count(*) AS count, entrepreneur.Investor AS Investor\nWHERE count  >= 2\nRETURN Investor",
        "question": "What are the investors that have invested in at least two entrepreneurs?",
        "answers": [
            [
                "Duncan Bannatyne"
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nWITH count(*) AS count, entrepreneur.Investor AS Investor\nWHERE count  >= 2\nRETURN Investor",
        "question": "Return the investors who have invested in two or more entrepreneurs.",
        "answers": [
            [
                "Duncan Bannatyne"
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nRETURN T2.Name,T1.Company\nORDER BY T1.Money_Requested",
        "question": "List the names of entrepreneurs and their companies in descending order of money requested?",
        "answers": [
            [
                "Roberto Calcaterra",
                "IV Cam"
            ],
            [
                "Fabrizio Buonocore",
                "Le Beanock"
            ],
            [
                "Goran Fiorentini",
                "Mycorrhizal Systems"
            ],
            [
                "Maurizio Felugo",
                "Elizabeth Galton Ltd"
            ],
            [
                "Leonardo Binchi",
                "Grails Ltd"
            ],
            [
                "Francesco Postiglione",
                "Umbrolly"
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nRETURN T2.Name,T1.Company\nORDER BY T1.Money_Requested",
        "question": "What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?",
        "answers": [
            [
                "Roberto Calcaterra",
                "IV Cam"
            ],
            [
                "Fabrizio Buonocore",
                "Le Beanock"
            ],
            [
                "Goran Fiorentini",
                "Mycorrhizal Systems"
            ],
            [
                "Maurizio Felugo",
                "Elizabeth Galton Ltd"
            ],
            [
                "Leonardo Binchi",
                "Grails Ltd"
            ],
            [
                "Francesco Postiglione",
                "Umbrolly"
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (people:`entrepreneur.people`)\nWHERE NOT (people)-[]-(:`entrepreneur.entrepreneur`)    \nRETURN people.Name",
        "question": "List the names of people that are not entrepreneurs.",
        "answers": [
            [
                "Marco Gerini"
            ],
            [
                "Alberto Angelini"
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (people:`entrepreneur.people`)\nWHERE NOT (people)-[]-(:`entrepreneur.entrepreneur`)    \nRETURN people.Name",
        "question": "What are the names of people who are not entrepreneurs?",
        "answers": [
            [
                "Marco Gerini"
            ],
            [
                "Alberto Angelini"
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nRETURN count(DISTINCT entrepreneur.Company)",
        "question": "How many distinct companies are there?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nRETURN count(DISTINCT entrepreneur.Company)",
        "question": "Count the number of different companies.",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nRETURN T1.Company\nORDER BY T2.Height DESC\nLIMIT 1",
        "question": "Show the company of the tallest entrepreneur.",
        "answers": [
            [
                "Elizabeth Galton Ltd"
            ]
        ]
    },
    {
        "db_id": "entrepreneur",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nRETURN T1.Company\nORDER BY T2.Height DESC\nLIMIT 1",
        "question": "Which company was started by the entrepreneur with the greatest height?",
        "answers": [
            [
                "Elizabeth Galton Ltd"
            ]
        ]
    },
    {
        "db_id": "perpetrator",
        "query": "MATCH (perpetrator:`perpetrator.perpetrator`)\nRETURN count(*)",
        "question": "How many perpetrators are there?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "perpetrator",
        "query": "MATCH (perpetrator:`perpetrator.perpetrator`)\nRETURN perpetrator.Date\nORDER BY perpetrator.Killed DESC",
        "question": "List the date of perpetrators in descending order of the number of people killed.",
        "answers": [
            [
                "04.26 April 26/27"
            ],
            [
                "11.18 Nov. 18"
            ],
            [
                "05.21 May 21"
            ],
            [
                "09.20 Sep. 20"
            ],
            [
                "04.00 April"
            ]
        ]
    },
    {
        "db_id": "perpetrator",
        "query": "MATCH (perpetrator:`perpetrator.perpetrator`)\nRETURN perpetrator.Injured\nORDER BY perpetrator.Injured ASC",
        "question": "List the number of people injured by perpetrators in ascending order.",
        "answers": [
            [
                0
            ],
            [
                3
            ],
            [
                16
            ],
            [
                37
            ],
            [
                80
            ]
        ]
    },
    {
        "db_id": "perpetrator",
        "query": "MATCH (perpetrator:`perpetrator.perpetrator`)\nRETURN avg(perpetrator.Injured)",
        "question": "What is the average number of people injured by all perpetrators?",
        "answers": [
            [
                27.2
            ]
        ]
    },
    {
        "db_id": "perpetrator",
        "query": "MATCH (perpetrator:`perpetrator.perpetrator`)\nRETURN perpetrator.Location\nORDER BY perpetrator.Killed DESC\nLIMIT 1",
        "question": "What is the location of the perpetrator with the largest kills.",
        "answers": [
            [
                "Uiryeong"
            ]
        ]
    },
    {
        "db_id": "perpetrator",
        "query": "MATCH (people:`perpetrator.people`)\nRETURN people.Name\nORDER BY people.Height ASC",
        "question": "What are the names of people in ascending order of height?",
        "answers": [
            [
                "Jim Krivacs"
            ],
            [
                "John Moore"
            ],
            [
                "Brent Boyd"
            ],
            [
                "Ron Baxter"
            ],
            [
                "Ovie Dotson"
            ],
            [
                "John Danks"
            ],
            [
                "Henry Johnson"
            ],
            [
                "Tyrone Brayan"
            ],
            [
                "Gary Goodner"
            ],
            [
                "Rob Cunningham"
            ],
            [
                "Mike Murphy"
            ]
        ]
    },
    {
        "db_id": "perpetrator",
        "query": "MATCH (T1:`perpetrator.people`)-[]-(T2:`perpetrator.perpetrator`)\nRETURN T1.Name",
        "question": "What are the names of perpetrators?",
        "answers": [
            [
                "Ron Baxter"
            ],
            [
                "Tyrone Brayan"
            ],
            [
                "Rob Cunningham"
            ],
            [
                "Ovie Dotson"
            ],
            [
                "Henry Johnson"
            ]
        ]
    },
    {
        "db_id": "perpetrator",
        "query": "MATCH (T1:`perpetrator.people`)-[]-(T2:`perpetrator.perpetrator`)\nWHERE T2.Country <> 'China'\nRETURN T1.Name",
        "question": "What are the names of perpetrators whose country is not \"China\"?",
        "answers": [
            [
                "Ron Baxter"
            ],
            [
                "Rob Cunningham"
            ],
            [
                "Henry Johnson"
            ]
        ]
    },
    {
        "db_id": "perpetrator",
        "query": "MATCH (T1:`perpetrator.people`)-[]-(T2:`perpetrator.perpetrator`)\nRETURN T1.Name\nORDER BY T1.Weight DESC\nLIMIT 1",
        "question": "What is the name of the perpetrator with the biggest weight.",
        "answers": [
            [
                "Tyrone Brayan"
            ]
        ]
    },
    {
        "db_id": "perpetrator",
        "query": "MATCH (T1:`perpetrator.people`)-[]-(T2:`perpetrator.perpetrator`)\nWHERE T2.Country = 'China' OR T2.Country = 'Japan'\nRETURN T1.Name",
        "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?",
        "answers": [
            [
                "Tyrone Brayan"
            ],
            [
                "Rob Cunningham"
            ],
            [
                "Ovie Dotson"
            ]
        ]
    },
    {
        "db_id": "perpetrator",
        "query": "MATCH (T1:`perpetrator.people`)-[]-(T2:`perpetrator.perpetrator`)\nRETURN T1.Height\nORDER BY T2.Injured DESC",
        "question": "What are the heights of perpetrators in descending order of the number of people they injured?",
        "answers": [
            [
                6.5
            ],
            [
                6.4
            ],
            [
                6.7
            ],
            [
                6.8
            ],
            [
                6.6
            ]
        ]
    },
    {
        "db_id": "perpetrator",
        "query": "MATCH (perpetrator:`perpetrator.perpetrator`)\nRETURN perpetrator.Country,count(*)",
        "question": "What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.",
        "answers": [
            [
                "South Korea",
                1
            ],
            [
                "China",
                2
            ],
            [
                "Japan",
                1
            ],
            [
                "India",
                1
            ]
        ]
    },
    {
        "db_id": "perpetrator",
        "query": "MATCH (perpetrator:`perpetrator.perpetrator`)\nWITH count(*) AS count, perpetrator.Country AS Country\nWHERE count  >= 2\nRETURN Country,count",
        "question": "What are the countries that have at least two perpetrators?",
        "answers": [
            [
                "China",
                2
            ]
        ]
    },
    {
        "db_id": "perpetrator",
        "query": "MATCH (T1:`perpetrator.people`)-[]-(T2:`perpetrator.perpetrator`)\nRETURN T1.Name\nORDER BY T2.Year DESC",
        "question": "List the names of perpetrators in descending order of the year.",
        "answers": [
            [
                "Tyrone Brayan"
            ],
            [
                "Ovie Dotson"
            ],
            [
                "Ron Baxter"
            ],
            [
                "Henry Johnson"
            ],
            [
                "Rob Cunningham"
            ]
        ]
    },
    {
        "db_id": "perpetrator",
        "query": "MATCH (people:`perpetrator.people`)\nWHERE NOT (people)-[]-(:`perpetrator.perpetrator`)    \nRETURN people.Name",
        "question": "List the names of people that are not perpetrators.",
        "answers": [
            [
                "Brent Boyd"
            ],
            [
                "John Danks"
            ],
            [
                "Gary Goodner"
            ],
            [
                "Jim Krivacs"
            ],
            [
                "John Moore"
            ],
            [
                "Mike Murphy"
            ]
        ]
    },
    {
        "db_id": "perpetrator",
        "query": "MATCH (perpetrator:`perpetrator.perpetrator`)\nRETURN count(DISTINCT perpetrator.Location)",
        "question": "How many distinct locations of perpetrators are there?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "perpetrator",
        "query": "MATCH (T1:`perpetrator.people`)-[]-(T2:`perpetrator.perpetrator`)\nRETURN T2.Date\nORDER BY T1.Height DESC\nLIMIT 1",
        "question": "Show the date of the tallest perpetrator.",
        "answers": [
            [
                "05.21 May 21"
            ]
        ]
    },
    {
        "db_id": "perpetrator",
        "query": "MATCH (perpetrator:`perpetrator.perpetrator`)\nRETURN max(perpetrator.Year)",
        "question": "In which year did the most recent crime happen?",
        "answers": [
            [
                1995.0
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.County = 'Los Angeles'\nRETURN campuses.Campus",
        "question": "Report the name of all campuses in Los Angeles county.",
        "answers": [
            [
                "California State University-Dominguez Hills"
            ],
            [
                "Long Beach State University"
            ],
            [
                "California State University-Los Angeles"
            ],
            [
                "California State University-Northridge"
            ],
            [
                "California State Polytechnic University-Pomona"
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.County = 'Los Angeles'\nRETURN campuses.Campus",
        "question": "What campuses are located in the county of Los Angeles?",
        "answers": [
            [
                "California State University-Dominguez Hills"
            ],
            [
                "Long Beach State University"
            ],
            [
                "California State University-Los Angeles"
            ],
            [
                "California State University-Northridge"
            ],
            [
                "California State Polytechnic University-Pomona"
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.Location = 'Chico'\nRETURN campuses.Campus",
        "question": "What are the names of all campuses located at Chico?",
        "answers": [
            [
                "California State University-Chico"
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.Location = 'Chico'\nRETURN campuses.Campus",
        "question": "What campuses are located in Chico?",
        "answers": [
            [
                "California State University-Chico"
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.Year = 1958\nRETURN campuses.Campus",
        "question": "Find all the campuses opened in 1958.",
        "answers": [
            [
                "California State University-Northridge"
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.Year = 1958\nRETURN campuses.Campus",
        "question": "What are the campuses that opened in 1958?",
        "answers": [
            [
                "California State University-Northridge"
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.Year < 1800\nRETURN campuses.Campus",
        "question": "Find the name of the campuses opened before 1800.",
        "answers": []
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.Year < 1800\nRETURN campuses.Campus",
        "question": "What campuses opened before 1800?",
        "answers": []
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.Year >= 1935 AND campuses.Year <= 1939\nRETURN campuses.Campus",
        "question": "Which campus was opened between 1935 and 1939?",
        "answers": [
            [
                "California State Polytechnic University-Pomona"
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.Year >= 1935 AND campuses.Year <= 1939\nRETURN campuses.Campus",
        "question": "What campuses opened between 1935 and 1939?",
        "answers": [
            [
                "California State Polytechnic University-Pomona"
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.Location = 'Northridge' AND campuses.County = 'Los Angeles'\nRETURN campuses.Campus  AS campus \nUNION\nMATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.Location = 'San Francisco' AND campuses.County = 'San Francisco'\nRETURN campuses.Campus  AS campus",
        "question": "Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.",
        "answers": [
            [
                "California State University-Northridge"
            ],
            [
                "San Francisco State University"
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.Location = 'Northridge' AND campuses.County = 'Los Angeles'\nRETURN campuses.Campus  AS campus \nUNION\nMATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.Location = 'San Francisco' AND campuses.County = 'San Francisco'\nRETURN campuses.Campus  AS campus",
        "question": "What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?",
        "answers": [
            [
                "California State University-Northridge"
            ],
            [
                "San Francisco State University"
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (csu_fees:`csu_1.csu_fees`)\nWITH avg(csu_fees.CampusFee) AS campusfee\nMATCH (csu_fees:`csu_1.csu_fees`)\nWHERE  csu_fees.CampusFee >  campusfee \nRETURN count(*)",
        "question": "Find the count of universities whose campus fee is greater than the average campus fee.",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (csu_fees:`csu_1.csu_fees`)\nWITH avg(csu_fees.CampusFee) AS campusfee\nMATCH (csu_fees:`csu_1.csu_fees`)\nWHERE  csu_fees.CampusFee >  campusfee \nRETURN count(*)",
        "question": "How many universities have a campus fee higher than average?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (csu_fees:`csu_1.csu_fees`)\nWITH avg(csu_fees.CampusFee) AS campusfee\nMATCH (csu_fees:`csu_1.csu_fees`)\nWHERE  csu_fees.CampusFee >  campusfee \nRETURN count(*)",
        "question": "Find the count of universities whose campus fee is greater than the average campus fee.",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (csu_fees:`csu_1.csu_fees`)\nWITH avg(csu_fees.CampusFee) AS campusfee\nMATCH (csu_fees:`csu_1.csu_fees`)\nWHERE  csu_fees.CampusFee >  campusfee \nRETURN count(*)",
        "question": "How many universities have a campus fee greater than the average?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.County = 'Los Angeles' AND campuses.Year > 1950\nRETURN campuses.Campus",
        "question": "Which university is in Los Angeles county and opened after 1950?",
        "answers": [
            [
                "California State University-Dominguez Hills"
            ],
            [
                "California State University-Northridge"
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.County = 'Los Angeles' AND campuses.Year > 1950\nRETURN campuses.Campus",
        "question": "What campuses are located in Los Angeles county and opened after 1950?",
        "answers": [
            [
                "California State University-Dominguez Hills"
            ],
            [
                "California State University-Northridge"
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (T1:`csu_1.Campuses`)-[]-(T2:`csu_1.faculty`)\nWHERE T2.Year = 2003\nRETURN T1.Campus\nORDER BY T2.Faculty DESC\nLIMIT 1",
        "question": "Which campus has the most faculties in year 2003?",
        "answers": [
            [
                "San Diego State University"
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (T1:`csu_1.Campuses`)-[]-(T2:`csu_1.faculty`)\nWHERE T2.Year = 2003\nRETURN T1.Campus\nORDER BY T2.Faculty DESC\nLIMIT 1",
        "question": "What campus has the most faculties in 2003?",
        "answers": [
            [
                "San Diego State University"
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (csu_fees:`csu_1.csu_fees`)\nWHERE csu_fees.Year = 2005\nRETURN avg(csu_fees.CampusFee)",
        "question": "What is the average fee on a CSU campus in 2005?",
        "answers": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (csu_fees:`csu_1.csu_fees`)\nWHERE csu_fees.Year = 2005\nRETURN avg(csu_fees.CampusFee)",
        "question": "What is the average fee for a CSU campus in the year of 2005?",
        "answers": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.County = 'Los Angeles'\nRETURN count(*)",
        "question": "How many campuses are there in Los Angeles county?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.County = 'Los Angeles'\nRETURN count(*)",
        "question": "How many campuses exist are in the county of LA?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.County = 'Los Angeles'\nRETURN campuses.Campus",
        "question": "List the campuses in Los Angeles county.",
        "answers": [
            [
                "California State University-Dominguez Hills"
            ],
            [
                "Long Beach State University"
            ],
            [
                "California State University-Los Angeles"
            ],
            [
                "California State University-Northridge"
            ],
            [
                "California State Polytechnic University-Pomona"
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.County = 'Los Angeles'\nRETURN campuses.Campus",
        "question": "What campuses are in Los Angeles county?",
        "answers": [
            [
                "California State University-Dominguez Hills"
            ],
            [
                "Long Beach State University"
            ],
            [
                "California State University-Los Angeles"
            ],
            [
                "California State University-Northridge"
            ],
            [
                "California State Polytechnic University-Pomona"
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (t1:`csu_1.csu_fees`)-[]-(t2:`csu_1.Campuses`)\nWHERE t2.Campus = 'San Francisco State University' AND t1.Year = 2000\nRETURN t1.CampusFee",
        "question": "What is the campus fee of \"San Francisco State University\" in year 2000?",
        "answers": []
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (t1:`csu_1.csu_fees`)-[]-(t2:`csu_1.Campuses`)\nWHERE t2.Campus = 'San Francisco State University' AND t1.Year = 2000\nRETURN t1.CampusFee",
        "question": "In the year 2000, what is the campus fee for San Francisco State University?",
        "answers": []
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (t1:`csu_1.csu_fees`)-[]-(t2:`csu_1.Campuses`)\nWHERE t2.Campus = 'San Jose State University' AND t1.Year = 2000\nRETURN t1.CampusFee",
        "question": "Find the campus fee of \"San Jose State University\" in year 2000.",
        "answers": []
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (t1:`csu_1.csu_fees`)-[]-(t2:`csu_1.Campuses`)\nWHERE t2.Campus = 'San Jose State University' AND t1.Year = 2000\nRETURN t1.CampusFee",
        "question": "What is the campus fee in the year 2000 for San Jose State University?",
        "answers": []
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nRETURN count(*)",
        "question": "How many CSU campuses are there?",
        "answers": [
            [
                23
            ]
        ]
    },
    {
        "db_id": "csu_1",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nRETURN count(*)",
        "question": "What is the total number of campuses?",
        "answers": [
            [
                23
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nRETURN count(*)",
        "question": "How many candidates are there?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nRETURN count(*)",
        "question": "Count the number of candidates.",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nRETURN candidate.Support_rate\nORDER BY candidate.Support_rate DESC\nLIMIT 3",
        "question": "what are the top 3 highest support rates?",
        "answers": [
            [
                0.33
            ],
            [
                0.25
            ],
            [
                0.24
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nRETURN candidate.Support_rate\nORDER BY candidate.Support_rate DESC\nLIMIT 3",
        "question": "Return the top 3 greatest support rates.",
        "answers": [
            [
                0.33
            ],
            [
                0.25
            ],
            [
                0.24
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nRETURN candidate.Candidate_ID\nORDER BY candidate.Oppose_rate\nLIMIT 1",
        "question": "Find the id of the candidate who got the lowest oppose rate.",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nRETURN candidate.Candidate_ID\nORDER BY candidate.Oppose_rate\nLIMIT 1",
        "question": "What is the id of the candidate with the lowest oppose rate?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nRETURN candidate.Support_rate,candidate.Consider_rate,candidate.Oppose_rate\nORDER BY candidate.Unsure_rate",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "answers": [
            [
                0.25,
                0.3,
                0.43
            ],
            [
                0.33,
                0.2,
                0.45
            ],
            [
                0.24,
                0.27,
                0.43
            ],
            [
                0.18,
                0.34,
                0.44
            ],
            [
                0.24,
                0.3,
                0.32
            ],
            [
                0.17,
                0.42,
                0.32
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nRETURN candidate.Support_rate,candidate.Consider_rate,candidate.Oppose_rate\nORDER BY candidate.Unsure_rate",
        "question": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?",
        "answers": [
            [
                0.25,
                0.3,
                0.43
            ],
            [
                0.33,
                0.2,
                0.45
            ],
            [
                0.24,
                0.27,
                0.43
            ],
            [
                0.18,
                0.34,
                0.44
            ],
            [
                0.24,
                0.3,
                0.32
            ],
            [
                0.17,
                0.42,
                0.32
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nRETURN candidate.Poll_Source\nORDER BY candidate.Oppose_rate DESC\nLIMIT 1",
        "question": "which poll source does the highest oppose rate come from?",
        "answers": [
            [
                "Newsweek Poll"
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nRETURN candidate.Poll_Source\nORDER BY candidate.Oppose_rate DESC\nLIMIT 1",
        "question": "Return the poll source corresponding to the candidate who has the oppose rate.",
        "answers": [
            [
                "Newsweek Poll"
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (people:`candidate_poll.people`)\nRETURN people.Name\nORDER BY people.Date_of_Birth",
        "question": "List all people names in the order of their date of birth from old to young.",
        "answers": [
            [
                "Vincent Montm\u00e9at"
            ],
            [
                "St\u00e9phane Antiga"
            ],
            [
                "Laurent Capet"
            ],
            [
                "Hubert Henno"
            ],
            [
                "Frantz Granvorka"
            ],
            [
                "Dominique Daquin"
            ],
            [
                "Lo\u00efc De Kergret"
            ],
            [
                "Philippe Bar\u00e7a-Cysique"
            ],
            [
                "Guillaume Samica"
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (people:`candidate_poll.people`)\nRETURN people.Name\nORDER BY people.Date_of_Birth",
        "question": "What are the names of all people, ordered by their date of birth?",
        "answers": [
            [
                "Vincent Montm\u00e9at"
            ],
            [
                "St\u00e9phane Antiga"
            ],
            [
                "Laurent Capet"
            ],
            [
                "Hubert Henno"
            ],
            [
                "Frantz Granvorka"
            ],
            [
                "Dominique Daquin"
            ],
            [
                "Lo\u00efc De Kergret"
            ],
            [
                "Philippe Bar\u00e7a-Cysique"
            ],
            [
                "Guillaume Samica"
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (people:`candidate_poll.people`)\nWHERE people.Sex = 'M'\nRETURN avg(people.Height),avg(people.Weight)",
        "question": "Find the average height and weight for all males (sex is M).",
        "answers": [
            [
                195.14285714285714,
                86.71428571428571
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (people:`candidate_poll.people`)\nWHERE people.Sex = 'M'\nRETURN avg(people.Height),avg(people.Weight)",
        "question": "What are the average height and weight across males (sex is M)?",
        "answers": [
            [
                195.14285714285714,
                86.71428571428571
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (people:`candidate_poll.people`)\nWHERE people.Height > 200 OR people.Height < 190\nRETURN people.Name",
        "question": "find the names of people who are taller than 200 or lower than 190.",
        "answers": [
            [
                "Hubert Henno"
            ],
            [
                "Laurent Capet"
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (people:`candidate_poll.people`)\nWHERE people.Height > 200 OR people.Height < 190\nRETURN people.Name",
        "question": "What are the names of people who have a height greater than 200 or less than 190?",
        "answers": [
            [
                "Hubert Henno"
            ],
            [
                "Laurent Capet"
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (people:`candidate_poll.people`)\nRETURN avg(people.Weight),min(people.Weight),people.Sex",
        "question": "Find the average and minimum weight for each gender.",
        "answers": [
            [
                86.71428571428571,
                82.0,
                "M"
            ],
            [
                92.0,
                90.0,
                "F"
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (people:`candidate_poll.people`)\nRETURN avg(people.Weight),min(people.Weight),people.Sex",
        "question": "What are the average and minimum weights for people of each sex?",
        "answers": [
            [
                86.71428571428571,
                82.0,
                "M"
            ],
            [
                92.0,
                90.0,
                "F"
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (t1:`candidate_poll.people`)-[]-(t2:`candidate_poll.candidate`)\nRETURN t1.Name,t1.Sex\nORDER BY t2.Support_rate DESC\nLIMIT 1",
        "question": "Find the name and gender of the candidate who got the highest support rate.",
        "answers": [
            [
                "Vincent Montm\u00e9at",
                "M"
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (t1:`candidate_poll.people`)-[]-(t2:`candidate_poll.candidate`)\nRETURN t1.Name,t1.Sex\nORDER BY t2.Support_rate DESC\nLIMIT 1",
        "question": "What is the name and sex of the candidate with the highest support rate?",
        "answers": [
            [
                "Vincent Montm\u00e9at",
                "M"
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (people:`candidate_poll.people`)\nWHERE NOT (people)-[]-(:`candidate_poll.candidate`)    \nRETURN people.Name",
        "question": "what are the names of people who did not participate in the candidate election.",
        "answers": [
            [
                "Dominique Daquin"
            ],
            [
                "Frantz Granvorka"
            ],
            [
                "Philippe Bar\u00e7a-Cysique"
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (people:`candidate_poll.people`)\nWHERE NOT (people)-[]-(:`candidate_poll.candidate`)    \nRETURN people.Name",
        "question": "Give the names of people who did not participate in the candidate election.",
        "answers": [
            [
                "Dominique Daquin"
            ],
            [
                "Frantz Granvorka"
            ],
            [
                "Philippe Bar\u00e7a-Cysique"
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (t1:`candidate_poll.people`)-[]-(t2:`candidate_poll.candidate`)\nWHERE t2.Support_rate < t2.Oppose_rate\nRETURN t1.Name",
        "question": "Find the names of the candidates whose support percentage is lower than their oppose rate.",
        "answers": [
            [
                "Hubert Henno"
            ],
            [
                "St\u00e9phane Antiga"
            ],
            [
                "Laurent Capet"
            ],
            [
                "Vincent Montm\u00e9at"
            ],
            [
                "Lo\u00efc De Kergret"
            ],
            [
                "Guillaume Samica"
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (t1:`candidate_poll.people`)-[]-(t2:`candidate_poll.candidate`)\nWHERE t2.Support_rate < t2.Oppose_rate\nRETURN t1.Name",
        "question": "What are the names of candidates who have a lower support rate than oppose rate?",
        "answers": [
            [
                "Hubert Henno"
            ],
            [
                "St\u00e9phane Antiga"
            ],
            [
                "Laurent Capet"
            ],
            [
                "Vincent Montm\u00e9at"
            ],
            [
                "Lo\u00efc De Kergret"
            ],
            [
                "Guillaume Samica"
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (people:`candidate_poll.people`)\nWHERE people.Weight > 85\nRETURN count(*),people.Sex",
        "question": "how many people are there whose weight is higher than 85 for each gender?",
        "answers": [
            [
                2,
                "F"
            ],
            [
                4,
                "M"
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (people:`candidate_poll.people`)\nWHERE people.Weight > 85\nRETURN count(*),people.Sex",
        "question": "Count the number of people of each sex who have a weight higher than 85.",
        "answers": [
            [
                2,
                "F"
            ],
            [
                4,
                "M"
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nRETURN max(candidate.Support_rate),min(candidate.Consider_rate),min(candidate.Oppose_rate)",
        "question": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.",
        "answers": [
            [
                0.33,
                0.2,
                0.32
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nRETURN max(candidate.Support_rate),min(candidate.Consider_rate),min(candidate.Oppose_rate)",
        "question": "Return the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates?",
        "answers": [
            [
                0.33,
                0.2,
                0.32
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (t1:`candidate_poll.people`)-[]-(t2:`candidate_poll.candidate`)\nWHERE t1.Sex = 'F'\nRETURN t1.Name\nORDER BY t1.Name",
        "question": "list all female (sex is F) candidate names in the alphabetical order.",
        "answers": [
            [
                "St\u00e9phane Antiga"
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (t1:`candidate_poll.people`)-[]-(t2:`candidate_poll.candidate`)\nWHERE t1.Sex = 'F'\nRETURN t1.Name\nORDER BY t1.Name",
        "question": "What are the names of all female candidates in alphabetical order (sex is F)?",
        "answers": [
            [
                "St\u00e9phane Antiga"
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (people:`candidate_poll.people`)\nWITH avg(people.Height) AS height\nMATCH (people:`candidate_poll.people`)\nWHERE  people.Height <  height \nRETURN people.Name",
        "question": "find the name of people whose height is lower than the average.",
        "answers": [
            [
                "Hubert Henno"
            ],
            [
                "Frantz Granvorka"
            ],
            [
                "Lo\u00efc De Kergret"
            ],
            [
                "Philippe Bar\u00e7a-Cysique"
            ]
        ]
    },
    {
        "db_id": "candidate_poll",
        "query": "MATCH (people:`candidate_poll.people`)\nWITH avg(people.Height) AS height\nMATCH (people:`candidate_poll.people`)\nWHERE  people.Height <  height \nRETURN people.Name",
        "question": "What are the names of people who are shorter than average?",
        "answers": [
            [
                "Hubert Henno"
            ],
            [
                "Frantz Granvorka"
            ],
            [
                "Lo\u00efc De Kergret"
            ],
            [
                "Philippe Bar\u00e7a-Cysique"
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (movie:`movie_1.Movie`)\nWHERE movie.director = 'Steven Spielberg'\nRETURN movie.title",
        "question": "Find the titles of all movies directed by steven spielberg.",
        "answers": [
            [
                "E.T."
            ],
            [
                "Raiders of the Lost Ark"
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (movie:`movie_1.Movie`)\nWHERE movie.director = 'Steven Spielberg'\nRETURN movie.title",
        "question": "What are the names of all movies directed by Steven Spielberg?",
        "answers": [
            [
                "E.T."
            ],
            [
                "Raiders of the Lost Ark"
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (movie:`movie_1.Movie`)\nWHERE movie.director = 'James Cameron' AND movie.year > 2000\nRETURN movie.title",
        "question": "What is the name of the movie produced after 2000 and directed by James Cameron?",
        "answers": [
            [
                "Avatar"
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (movie:`movie_1.Movie`)\nWHERE movie.director = 'James Cameron' AND movie.year > 2000\nRETURN movie.title",
        "question": "What are the titles of all movies that James Cameron directed after 2000?",
        "answers": [
            [
                "Avatar"
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (movie:`movie_1.Movie`)\nWHERE movie.year < 2000\nRETURN count(*)",
        "question": "How many movies were made before 2000?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (movie:`movie_1.Movie`)\nWHERE movie.year < 2000\nRETURN count(*)",
        "question": "How many movies were made before 2000?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (movie:`movie_1.Movie`)\nWHERE movie.title = 'Avatar'\nRETURN movie.director",
        "question": "Who is the director of movie Avatar?",
        "answers": [
            [
                "James Cameron"
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (movie:`movie_1.Movie`)\nWHERE movie.title = 'Avatar'\nRETURN movie.director",
        "question": "Who directed Avatar?",
        "answers": [
            [
                "James Cameron"
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (reviewer:`movie_1.Reviewer`)\nRETURN count(*)",
        "question": "How many reviewers listed?",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (reviewer:`movie_1.Reviewer`)\nRETURN count(*)",
        "question": "How many reviewers are there?",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (reviewer:`movie_1.Reviewer`)\nWHERE reviewer.name = 'Daniel Lewis'\nRETURN reviewer.rID",
        "question": "What is the reviewer id of Daniel Lewis?",
        "answers": [
            [
                202
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (reviewer:`movie_1.Reviewer`)\nWHERE reviewer.name = 'Daniel Lewis'\nRETURN reviewer.rID",
        "question": "What is the id of the reviewer named Daniel Lewis?",
        "answers": [
            [
                202
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH ()-[rating:`movie_1.Rating`]-()\nRETURN max(rating.stars),min(rating.stars)",
        "question": "What is the lowest and highest rating star?",
        "answers": [
            [
                5,
                2
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH ()-[rating:`movie_1.Rating`]-()\nRETURN max(rating.stars),min(rating.stars)",
        "question": "What is the maximum and mininum number of stars a rating can receive?",
        "answers": [
            [
                5,
                2
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (T1:`movie_1.Movie`)-[T2:`movie_1.Rating`]-()\nWHERE T2.stars = 5\nRETURN T1.director,T1.title",
        "question": "What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.",
        "answers": [
            [
                null,
                "Snow White"
            ],
            [
                "James Cameron",
                "Avatar"
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (T1:`movie_1.Movie`)-[T2:`movie_1.Rating`]-()\nWHERE T2.stars = 5\nRETURN T1.director,T1.title",
        "question": "What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?",
        "answers": [
            [
                null,
                "Snow White"
            ],
            [
                "James Cameron",
                "Avatar"
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (movie:`movie_1.Movie`)\nWITH max(movie.year) AS year\nMATCH (movie:`movie_1.Movie`)\nWHERE  movie.year =  year \nRETURN movie.title",
        "question": "What is the name of the most recent movie?",
        "answers": [
            [
                "Avatar"
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (movie:`movie_1.Movie`)\nWITH max(movie.year) AS year\nMATCH (movie:`movie_1.Movie`)\nWHERE  movie.year =  year \nRETURN movie.title",
        "question": "What is the title of the newest movie?",
        "answers": [
            [
                "Avatar"
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (T2:`movie_1.Movie`)-[T1:`movie_1.Rating`]-(T3:`movie_1.Reviewer`)\nWHERE T2.title = 'Gone with the Wind'\nRETURN DISTINCT T3.name",
        "question": "Find the names of all reviewers who rated Gone with the Wind.",
        "answers": [
            [
                "Sarah Martinez"
            ],
            [
                "Mike Anderson"
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (T2:`movie_1.Movie`)-[T1:`movie_1.Rating`]-(T3:`movie_1.Reviewer`)\nWHERE T2.title = 'Gone with the Wind'\nRETURN DISTINCT T3.name",
        "question": "What are the names of all the different reviewers who rates Gone with the Wind?",
        "answers": [
            [
                "Sarah Martinez"
            ],
            [
                "Mike Anderson"
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (T2:`movie_1.Movie`)-[T1:`movie_1.Rating`]-(T3:`movie_1.Reviewer`)\nWHERE T3.name = 'Sarah Martinez'\nRETURN DISTINCT T2.director",
        "question": "Find the names of all directors whose movies are rated by Sarah Martinez.",
        "answers": [
            [
                "Victor Fleming"
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (T2:`movie_1.Movie`)-[T1:`movie_1.Rating`]-(T3:`movie_1.Reviewer`)\nWHERE T3.name = 'Sarah Martinez'\nRETURN DISTINCT T2.director",
        "question": "What are the names of all directors whose movies have been reviewed by Sarah Martinez?",
        "answers": [
            [
                "Victor Fleming"
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (T2:`movie_1.Movie`)-[T1:`movie_1.Rating`]-(T3:`movie_1.Reviewer`)\nWHERE T2.director = T3.name\nRETURN DISTINCT T3.name,T2.title,T1.stars",
        "question": "For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.",
        "answers": [
            [
                "James Cameron",
                "Avatar",
                5
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (T2:`movie_1.Movie`)-[T1:`movie_1.Rating`]-(T3:`movie_1.Reviewer`)\nWHERE T2.director = T3.name\nRETURN DISTINCT T3.name,T2.title,T1.stars",
        "question": "What are the different reviewer names, movie titles, and stars for every rating where the reviewer had the same name as the director?",
        "answers": [
            [
                "James Cameron",
                "Avatar",
                5
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (movie:`movie_1.Movie`)\nWITH count(*) AS count, movie.director AS director\nWHERE count  = 1\nRETURN director",
        "question": "What are the names of the directors who made exactly one movie?",
        "answers": [
            [
                "Victor Fleming"
            ],
            [
                "George Lucas"
            ],
            [
                "Robert Wise"
            ],
            [
                null
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (movie:`movie_1.Movie`)\nWITH count(*) AS count, movie.director AS director\nWHERE count  = 1\nRETURN director",
        "question": "What are the names of all directors who made one movie?",
        "answers": [
            [
                "Victor Fleming"
            ],
            [
                "George Lucas"
            ],
            [
                "Robert Wise"
            ],
            [
                null
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (movie:`movie_1.Movie`)\nWHERE exists(movie.director)\nWITH count(*) AS count, movie.director AS director\nWHERE count  = 1\nRETURN director",
        "question": "What are the names of the directors who made exactly one movie excluding director NULL?",
        "answers": [
            [
                "Victor Fleming"
            ],
            [
                "George Lucas"
            ],
            [
                "Robert Wise"
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (movie:`movie_1.Movie`)\nWHERE exists(movie.director)\nWITH count(*) AS count, movie.director AS director\nWHERE count  = 1\nRETURN director",
        "question": "What are the names of all directors who have made one movie except for the director named NULL?",
        "answers": [
            [
                "Victor Fleming"
            ],
            [
                "George Lucas"
            ],
            [
                "Robert Wise"
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (T2:`movie_1.Movie`)-[T1:`movie_1.Rating`]-()\nRETURN T2.title,T2.year\nORDER BY T1.stars DESC\nLIMIT 3",
        "question": "What are the names and years of the movies that has the top 3 highest rating star?",
        "answers": [
            [
                "Snow White",
                1937
            ],
            [
                "Avatar",
                2009
            ],
            [
                "Gone with the Wind",
                1939
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (T2:`movie_1.Movie`)-[T1:`movie_1.Rating`]-()\nRETURN T2.title,T2.year\nORDER BY T1.stars DESC\nLIMIT 3",
        "question": "What are the names and years released for the movies with the top 3 highest ratings?",
        "answers": [
            [
                "Snow White",
                1937
            ],
            [
                "Avatar",
                2009
            ],
            [
                "Gone with the Wind",
                1939
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (T2:`movie_1.Movie`)-[T1:`movie_1.Rating`]-()\nRETURN T2.title",
        "question": "What are the titles of all movies that have rating star is between 3 and 5?",
        "answers": [
            [
                "Gone with the Wind"
            ],
            [
                "Gone with the Wind"
            ],
            [
                "The Sound of Music"
            ],
            [
                "The Sound of Music"
            ],
            [
                "E.T."
            ],
            [
                "E.T."
            ],
            [
                "Snow White"
            ],
            [
                "Snow White"
            ],
            [
                "Avatar"
            ],
            [
                "Avatar"
            ],
            [
                "Raiders of the Lost Ark"
            ],
            [
                "Raiders of the Lost Ark"
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (T2:`movie_1.Movie`)-[T1:`movie_1.Rating`]-()\nRETURN T2.title",
        "question": "What are the titles of all movies that have between 3 and 5 stars?",
        "answers": [
            [
                "Gone with the Wind"
            ],
            [
                "Gone with the Wind"
            ],
            [
                "The Sound of Music"
            ],
            [
                "The Sound of Music"
            ],
            [
                "E.T."
            ],
            [
                "E.T."
            ],
            [
                "Snow White"
            ],
            [
                "Snow White"
            ],
            [
                "Avatar"
            ],
            [
                "Avatar"
            ],
            [
                "Raiders of the Lost Ark"
            ],
            [
                "Raiders of the Lost Ark"
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (T2:`movie_1.Movie`)-[T1:`movie_1.Rating`]-(T3:`movie_1.Reviewer`)\nWHERE T3.name = 'Brittany Harris' OR T2.year > 2000\nRETURN DISTINCT T2.title",
        "question": "What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?",
        "answers": [
            [
                "The Sound of Music"
            ],
            [
                "Avatar"
            ],
            [
                "Raiders of the Lost Ark"
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (T2:`movie_1.Movie`)-[T1:`movie_1.Rating`]-(T3:`movie_1.Reviewer`)\nWHERE T3.name = 'Brittany Harris' OR T2.year > 2000\nRETURN DISTINCT T2.title",
        "question": "What are the names of all movies that were made after 2000 or reviewed by Brittany Harris?",
        "answers": [
            [
                "The Sound of Music"
            ],
            [
                "Avatar"
            ],
            [
                "Raiders of the Lost Ark"
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (movie:`movie_1.Movie`)\nWHERE movie.director = 'James Cameron' OR movie.year < 1980\nRETURN movie.title",
        "question": "What are names of the movies that are either made before 1980 or directed by James Cameron?",
        "answers": [
            [
                "Gone with the Wind"
            ],
            [
                "Star Wars"
            ],
            [
                "The Sound of Music"
            ],
            [
                "Titanic"
            ],
            [
                "Snow White"
            ],
            [
                "Avatar"
            ]
        ]
    },
    {
        "db_id": "movie_1",
        "query": "MATCH (movie:`movie_1.Movie`)\nWHERE movie.director = 'James Cameron' OR movie.year < 1980\nRETURN movie.title",
        "question": "What are the names of all movies made before 1980 or had James Cameron as the director?",
        "answers": [
            [
                "Gone with the Wind"
            ],
            [
                "Star Wars"
            ],
            [
                "The Sound of Music"
            ],
            [
                "Titanic"
            ],
            [
                "Snow White"
            ],
            [
                "Avatar"
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN count(*)",
        "question": "How many counties are there?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN count(*)",
        "question": "Count the number of countries.",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN county_public_safety.Name\nORDER BY county_public_safety.Population DESC",
        "question": "List the names of counties in descending order of population.",
        "answers": [
            [
                "Burnaby"
            ],
            [
                "Abbotsford"
            ],
            [
                "Chilliwack"
            ],
            [
                "Campbell River"
            ],
            [
                "Central Saanich"
            ],
            [
                "Castlegar"
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN county_public_safety.Name\nORDER BY county_public_safety.Population DESC",
        "question": "What are the names of the counties of public safety, ordered by population descending?",
        "answers": [
            [
                "Burnaby"
            ],
            [
                "Abbotsford"
            ],
            [
                "Chilliwack"
            ],
            [
                "Campbell River"
            ],
            [
                "Central Saanich"
            ],
            [
                "Castlegar"
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nWHERE county_public_safety.Location <> 'East'\nRETURN DISTINCT county_public_safety.Police_force",
        "question": "List the distinct police forces of counties whose location is not on east side.",
        "answers": [
            [
                "RCMP"
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nWHERE county_public_safety.Location <> 'East'\nRETURN DISTINCT county_public_safety.Police_force",
        "question": "What are the different police forces of counties that are not located in the East?",
        "answers": [
            [
                "RCMP"
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN min(county_public_safety.Crime_rate),max(county_public_safety.Crime_rate)",
        "question": "What are the minimum and maximum crime rate of counties?",
        "answers": [
            [
                49.0,
                178.0
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN min(county_public_safety.Crime_rate),max(county_public_safety.Crime_rate)",
        "question": "Return the minimum and maximum crime rates across all counties.",
        "answers": [
            [
                49.0,
                178.0
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN county_public_safety.Crime_rate\nORDER BY county_public_safety.Police_officers ASC",
        "question": "Show the crime rates of counties in ascending order of number of police officers.",
        "answers": [
            [
                150.0
            ],
            [
                49.0
            ],
            [
                178.0
            ],
            [
                174.0
            ],
            [
                118.0
            ],
            [
                123.0
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN county_public_safety.Crime_rate\nORDER BY county_public_safety.Police_officers ASC",
        "question": "What are the crime rates of counties sorted by number of offices ascending?",
        "answers": [
            [
                150.0
            ],
            [
                49.0
            ],
            [
                178.0
            ],
            [
                174.0
            ],
            [
                118.0
            ],
            [
                123.0
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (city:`county_public_safety.city`)\nRETURN city.Name\nORDER BY city.Name ASC",
        "question": "What are the names of cities in ascending alphabetical order?",
        "answers": [
            [
                "Adjuntas"
            ],
            [
                "Aguada"
            ],
            [
                "Aguadilla"
            ],
            [
                "Aguas Buenas"
            ],
            [
                "Aibonito"
            ],
            [
                "Arecibo"
            ],
            [
                "Arroyo"
            ],
            [
                "A\u00f1asco"
            ],
            [
                "Barceloneta"
            ],
            [
                "Barranquitas"
            ],
            [
                "Bayam\u00f3n"
            ],
            [
                "Cabo Rojo"
            ],
            [
                "Caguas"
            ],
            [
                "Camuy"
            ],
            [
                "Can\u00f3vanas"
            ],
            [
                "Carolina"
            ],
            [
                "Cata\u00f1o"
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (city:`county_public_safety.city`)\nRETURN city.Name\nORDER BY city.Name ASC",
        "question": "Return the names of cities, ordered alphabetically.",
        "answers": [
            [
                "Adjuntas"
            ],
            [
                "Aguada"
            ],
            [
                "Aguadilla"
            ],
            [
                "Aguas Buenas"
            ],
            [
                "Aibonito"
            ],
            [
                "Arecibo"
            ],
            [
                "Arroyo"
            ],
            [
                "A\u00f1asco"
            ],
            [
                "Barceloneta"
            ],
            [
                "Barranquitas"
            ],
            [
                "Bayam\u00f3n"
            ],
            [
                "Cabo Rojo"
            ],
            [
                "Caguas"
            ],
            [
                "Camuy"
            ],
            [
                "Can\u00f3vanas"
            ],
            [
                "Carolina"
            ],
            [
                "Cata\u00f1o"
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (city:`county_public_safety.city`)\nWHERE city.Black > 10\nRETURN city.Hispanic",
        "question": "What are the percentage of hispanics in cities with the black percentage higher than 10?",
        "answers": [
            [
                99.5
            ],
            [
                99.1
            ],
            [
                99.0
            ],
            [
                99.1
            ],
            [
                99.2
            ],
            [
                98.6
            ],
            [
                99.0
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (city:`county_public_safety.city`)\nWHERE city.Black > 10\nRETURN city.Hispanic",
        "question": "Return the hispanic percentage for cities in which the black percentage is greater than 10.",
        "answers": [
            [
                99.5
            ],
            [
                99.1
            ],
            [
                99.0
            ],
            [
                99.1
            ],
            [
                99.2
            ],
            [
                98.6
            ],
            [
                99.0
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN county_public_safety.Name\nORDER BY county_public_safety.Population DESC\nLIMIT 1",
        "question": "List the name of the county with the largest population.",
        "answers": [
            [
                "Burnaby"
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN county_public_safety.Name\nORDER BY county_public_safety.Population DESC\nLIMIT 1",
        "question": "What is the name of the county with the greatest population?",
        "answers": [
            [
                "Burnaby"
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (city:`county_public_safety.city`)\nRETURN city.Name\nORDER BY city.White DESC\nLIMIT 5",
        "question": "List the names of the city with the top 5 white percentages.",
        "answers": [
            [
                "Adjuntas"
            ],
            [
                "Camuy"
            ],
            [
                "Aguada"
            ],
            [
                "Barranquitas"
            ],
            [
                "Arecibo"
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (city:`county_public_safety.city`)\nRETURN city.Name\nORDER BY city.White DESC\nLIMIT 5",
        "question": "What are the names of the five cities with the greatest proportion of white people?",
        "answers": [
            [
                "Adjuntas"
            ],
            [
                "Camuy"
            ],
            [
                "Aguada"
            ],
            [
                "Barranquitas"
            ],
            [
                "Arecibo"
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (T1:`county_public_safety.city`)-[]-(T2:`county_public_safety.county_public_safety`)\nRETURN T1.Name,T2.Name",
        "question": "Show names of cities and names of counties they are in.",
        "answers": [
            [
                "Adjuntas",
                "Abbotsford"
            ],
            [
                "Aguadilla",
                "Abbotsford"
            ],
            [
                "Aguada",
                "Abbotsford"
            ],
            [
                "Aibonito",
                "Burnaby"
            ],
            [
                "Aguas Buenas",
                "Burnaby"
            ],
            [
                "Bayam\u00f3n",
                "Campbell River"
            ],
            [
                "A\u00f1asco",
                "Campbell River"
            ],
            [
                "Arecibo",
                "Campbell River"
            ],
            [
                "Barranquitas",
                "Campbell River"
            ],
            [
                "Barceloneta",
                "Campbell River"
            ],
            [
                "Arroyo",
                "Campbell River"
            ],
            [
                "Cabo Rojo",
                "Castlegar"
            ],
            [
                "Caguas",
                "Castlegar"
            ],
            [
                "Camuy",
                "Central Saanich"
            ],
            [
                "Can\u00f3vanas",
                "Central Saanich"
            ],
            [
                "Cata\u00f1o",
                "Chilliwack"
            ],
            [
                "Carolina",
                "Chilliwack"
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (T1:`county_public_safety.city`)-[]-(T2:`county_public_safety.county_public_safety`)\nRETURN T1.Name,T2.Name",
        "question": "What are the names of cities, as well as the names of the counties they correspond to?",
        "answers": [
            [
                "Adjuntas",
                "Abbotsford"
            ],
            [
                "Aguadilla",
                "Abbotsford"
            ],
            [
                "Aguada",
                "Abbotsford"
            ],
            [
                "Aibonito",
                "Burnaby"
            ],
            [
                "Aguas Buenas",
                "Burnaby"
            ],
            [
                "Bayam\u00f3n",
                "Campbell River"
            ],
            [
                "A\u00f1asco",
                "Campbell River"
            ],
            [
                "Arecibo",
                "Campbell River"
            ],
            [
                "Barranquitas",
                "Campbell River"
            ],
            [
                "Barceloneta",
                "Campbell River"
            ],
            [
                "Arroyo",
                "Campbell River"
            ],
            [
                "Cabo Rojo",
                "Castlegar"
            ],
            [
                "Caguas",
                "Castlegar"
            ],
            [
                "Camuy",
                "Central Saanich"
            ],
            [
                "Can\u00f3vanas",
                "Central Saanich"
            ],
            [
                "Cata\u00f1o",
                "Chilliwack"
            ],
            [
                "Carolina",
                "Chilliwack"
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (T1:`county_public_safety.city`)-[]-(T2:`county_public_safety.county_public_safety`)\nRETURN T1.White,T2.Crime_rate",
        "question": "Show white percentages of cities and the crime rates of counties they are in.",
        "answers": [
            [
                93.1,
                118.0
            ],
            [
                83.0,
                118.0
            ],
            [
                86.6,
                118.0
            ],
            [
                83.5,
                123.0
            ],
            [
                72.5,
                123.0
            ],
            [
                78.3,
                178.0
            ],
            [
                82.0,
                178.0
            ],
            [
                84.5,
                178.0
            ],
            [
                86.0,
                178.0
            ],
            [
                80.7,
                178.0
            ],
            [
                53.5,
                178.0
            ],
            [
                84.1,
                150.0
            ],
            [
                76.1,
                150.0
            ],
            [
                87.9,
                49.0
            ],
            [
                61.2,
                49.0
            ],
            [
                70.7,
                174.0
            ],
            [
                64.3,
                174.0
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (T1:`county_public_safety.city`)-[]-(T2:`county_public_safety.county_public_safety`)\nRETURN T1.White,T2.Crime_rate",
        "question": "What are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?",
        "answers": [
            [
                93.1,
                118.0
            ],
            [
                83.0,
                118.0
            ],
            [
                86.6,
                118.0
            ],
            [
                83.5,
                123.0
            ],
            [
                72.5,
                123.0
            ],
            [
                78.3,
                178.0
            ],
            [
                82.0,
                178.0
            ],
            [
                84.5,
                178.0
            ],
            [
                86.0,
                178.0
            ],
            [
                80.7,
                178.0
            ],
            [
                53.5,
                178.0
            ],
            [
                84.1,
                150.0
            ],
            [
                76.1,
                150.0
            ],
            [
                87.9,
                49.0
            ],
            [
                61.2,
                49.0
            ],
            [
                70.7,
                174.0
            ],
            [
                64.3,
                174.0
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (T1:`county_public_safety.city`)-[]-(T2:`county_public_safety.county_public_safety`)\nWHERE T1.White > 90\nRETURN T2.Crime_rate",
        "question": "Show the crime rate of counties with a city having white percentage more than 90.",
        "answers": [
            [
                118.0
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (T1:`county_public_safety.city`)-[]-(T2:`county_public_safety.county_public_safety`)\nWHERE T1.White > 90\nRETURN T2.Crime_rate",
        "question": "What are the crime rates of counties that contain cities that have white percentages of over 90?",
        "answers": [
            [
                118.0
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN county_public_safety.Police_force,count(*)",
        "question": "Please show the police forces and the number of counties with each police force.",
        "answers": [
            [
                "Abbotsford Police Department",
                1
            ],
            [
                "RCMP",
                4
            ],
            [
                "Central Saanich Police",
                1
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN county_public_safety.Police_force,count(*)",
        "question": "How many counties correspond to each police force?",
        "answers": [
            [
                "Abbotsford Police Department",
                1
            ],
            [
                "RCMP",
                4
            ],
            [
                "Central Saanich Police",
                1
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nWHERE NOT (county_public_safety)-[]-(:`county_public_safety.city`)    \nRETURN county_public_safety.Name",
        "question": "List the names of counties that do not have any cities.",
        "answers": []
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nWHERE NOT (county_public_safety)-[]-(:`county_public_safety.city`)    \nRETURN county_public_safety.Name",
        "question": "What are the names of counties that do not contain any cities?",
        "answers": []
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN county_public_safety.Case_burden\nORDER BY county_public_safety.Population DESC",
        "question": "Show the case burden of counties in descending order of population.",
        "answers": [
            [
                100
            ],
            [
                81
            ],
            [
                140
            ],
            [
                137
            ],
            [
                39
            ],
            [
                107
            ]
        ]
    },
    {
        "db_id": "county_public_safety",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN county_public_safety.Case_burden\nORDER BY county_public_safety.Population DESC",
        "question": "What are the case burdens of counties, ordered descending by population?",
        "answers": [
            [
                100
            ],
            [
                81
            ],
            [
                140
            ],
            [
                137
            ],
            [
                39
            ],
            [
                107
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.basePrice < 160 AND rooms.beds = 2 AND rooms.decor = 'modern'\nRETURN rooms.roomName",
        "question": "Find the names of all modern rooms with a base price below $160 and two beds.",
        "answers": [
            [
                "Mendicant with cryptic"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.basePrice < 160 AND rooms.beds = 2 AND rooms.decor = 'modern'\nRETURN rooms.roomName",
        "question": "What are the names of modern rooms that have a base price lower than $160 and two beds.",
        "answers": [
            [
                "Mendicant with cryptic"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.basePrice > 160 AND rooms.maxOccupancy > 2\nRETURN rooms.roomName,rooms.RoomId",
        "question": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.",
        "answers": [
            [
                "Abscond or bolster",
                "AOB"
            ],
            [
                "Convoke and sanguine",
                "CAS"
            ],
            [
                "Riddle to exculpate",
                "RTE"
            ],
            [
                "Frugal not apropos",
                "FNA"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.basePrice > 160 AND rooms.maxOccupancy > 2\nRETURN rooms.roomName,rooms.RoomId",
        "question": "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.",
        "answers": [
            [
                "Abscond or bolster",
                "AOB"
            ],
            [
                "Convoke and sanguine",
                "CAS"
            ],
            [
                "Riddle to exculpate",
                "RTE"
            ],
            [
                "Frugal not apropos",
                "FNA"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (reservations:`inn_1.Reservations`)\nWHERE reservations.FirstName = 'ROY' AND reservations.LastName = 'SWEAZY'\nRETURN reservations.Kids",
        "question": "How many kids stay in the rooms reserved by ROY SWEAZY?",
        "answers": [
            [
                1
            ],
            [
                1
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (reservations:`inn_1.Reservations`)\nWHERE reservations.FirstName = 'ROY' AND reservations.LastName = 'SWEAZY'\nRETURN reservations.Kids",
        "question": "Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ.",
        "answers": [
            [
                1
            ],
            [
                1
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (reservations:`inn_1.Reservations`)\nWHERE reservations.FirstName = 'ROY' AND reservations.LastName = 'SWEAZY'\nRETURN count(*)",
        "question": "How many times does ROY SWEAZY has reserved a room.",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (reservations:`inn_1.Reservations`)\nWHERE reservations.FirstName = 'ROY' AND reservations.LastName = 'SWEAZY'\nRETURN count(*)",
        "question": "Find the number of times ROY SWEAZY has reserved a room.",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (reservations:`inn_1.Reservations`)\nWHERE reservations.CheckIn = \"2010-10-23\" AND reservations.FirstName = 'CONRAD' AND reservations.LastName = 'SELBIG'\nRETURN reservations.Adults",
        "question": "How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?",
        "answers": []
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (reservations:`inn_1.Reservations`)\nWHERE reservations.CheckIn = \"2010-10-23\" AND reservations.FirstName = 'CONRAD' AND reservations.LastName = 'SELBIG'\nRETURN reservations.Adults",
        "question": "Find the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010.",
        "answers": []
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (reservations:`inn_1.Reservations`)\nWHERE reservations.CheckIn = \"2010-09-21\" AND reservations.FirstName = 'DAMIEN' AND reservations.LastName = 'TRACHSEL'\nRETURN reservations.Kids",
        "question": "How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010?",
        "answers": []
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (reservations:`inn_1.Reservations`)\nWHERE reservations.CheckIn = \"2010-09-21\" AND reservations.FirstName = 'DAMIEN' AND reservations.LastName = 'TRACHSEL'\nRETURN reservations.Kids",
        "question": "Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010.",
        "answers": []
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.bedType = 'King'\nRETURN rooms.roomName,rooms.decor\nORDER BY rooms.basePrice",
        "question": "List the names and decor of rooms that have a king bed. Sort the list by their price.",
        "answers": [
            [
                "Recluse and defiance",
                "modern"
            ],
            [
                "Interim but salutary",
                "traditional"
            ],
            [
                "Convoke and sanguine",
                "traditional"
            ],
            [
                "Frugal not apropos",
                "traditional"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.bedType = 'King'\nRETURN rooms.roomName,rooms.decor\nORDER BY rooms.basePrice",
        "question": "What are the names and decor of rooms with a king bed? Sort them by their price",
        "answers": [
            [
                "Recluse and defiance",
                "modern"
            ],
            [
                "Interim but salutary",
                "traditional"
            ],
            [
                "Convoke and sanguine",
                "traditional"
            ],
            [
                "Frugal not apropos",
                "traditional"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.roomName,rooms.basePrice\nORDER BY rooms.basePrice ASC\nLIMIT 1",
        "question": "Which room has cheapest base price? List the room's name and the base price.",
        "answers": [
            [
                "Thrift and accolade",
                75
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.roomName,rooms.basePrice\nORDER BY rooms.basePrice ASC\nLIMIT 1",
        "question": "What are the room name and base price of the room with the lowest base price?",
        "answers": [
            [
                "Thrift and accolade",
                75
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.roomName = 'Recluse and defiance'\nRETURN rooms.decor",
        "question": "What is the decor of room Recluse and defiance?",
        "answers": [
            [
                "modern"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.roomName = 'Recluse and defiance'\nRETURN rooms.decor",
        "question": "Return the decor of the room named \"Recluse and defiance\".",
        "answers": [
            [
                "modern"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.bedType,avg(rooms.basePrice)",
        "question": "What is the average base price of different bed type? List bed type and average base price.",
        "answers": [
            [
                "King",
                181.25
            ],
            [
                "Queen",
                150.0
            ],
            [
                "Double",
                100.0
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.bedType,avg(rooms.basePrice)",
        "question": "For each bed type, find the average base price of different bed type.",
        "answers": [
            [
                "King",
                181.25
            ],
            [
                "Queen",
                150.0
            ],
            [
                "Double",
                100.0
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (T1:`inn_1.Reservations`)-[]-(T2:`inn_1.Rooms`)\nWHERE T2.maxOccupancy = T1.Adults + T1.Kids\nRETURN count(*)",
        "question": "List how many times the number of people in the room reached the maximum occupancy of the room. The number of people include adults and kids.",
        "answers": [
            [
                204
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (T1:`inn_1.Reservations`)-[]-(T2:`inn_1.Rooms`)\nWHERE T2.maxOccupancy = T1.Adults + T1.Kids\nRETURN count(*)",
        "question": "How many times the number of adults and kids staying in a room reached the maximum capacity of the room?",
        "answers": [
            [
                204
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN count(*)",
        "question": "How many rooms are there?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN count(*)",
        "question": "What is the total number of rooms available in this inn?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.bedType = 'King'\nRETURN count(*)",
        "question": "Find the number of rooms with a king bed.",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.bedType = 'King'\nRETURN count(*)",
        "question": "How many rooms have a king bed?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.bedType,count(*)",
        "question": "Find the number of rooms for each bed type.",
        "answers": [
            [
                "King",
                4
            ],
            [
                "Queen",
                4
            ],
            [
                "Double",
                2
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.bedType,count(*)",
        "question": "What are the number of rooms for each bed type?",
        "answers": [
            [
                "King",
                4
            ],
            [
                "Queen",
                4
            ],
            [
                "Double",
                2
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.roomName\nORDER BY rooms.maxOccupancy DESC\nLIMIT 1",
        "question": "Find the name of the room with the maximum occupancy.",
        "answers": [
            [
                "Abscond or bolster"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.roomName\nORDER BY rooms.maxOccupancy DESC\nLIMIT 1",
        "question": "What is the name of the room that can accommodate the most people?",
        "answers": [
            [
                "Abscond or bolster"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.RoomId,rooms.roomName\nORDER BY rooms.basePrice DESC\nLIMIT 1",
        "question": "Find the id and name of the most expensive base price room.",
        "answers": [
            [
                "FNA",
                "Frugal not apropos"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.RoomId,rooms.roomName\nORDER BY rooms.basePrice DESC\nLIMIT 1",
        "question": "Which room has the highest base price?",
        "answers": [
            [
                "FNA",
                "Frugal not apropos"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.decor = 'traditional'\nRETURN rooms.roomName,rooms.bedType",
        "question": "List the type of bed and name of all traditional rooms.",
        "answers": [
            [
                "Interim but salutary",
                "King"
            ],
            [
                "Abscond or bolster",
                "Queen"
            ],
            [
                "Convoke and sanguine",
                "King"
            ],
            [
                "Frugal not apropos",
                "King"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.decor = 'traditional'\nRETURN rooms.roomName,rooms.bedType",
        "question": "What are the bed type and name of all the rooms with traditional decor?",
        "answers": [
            [
                "Interim but salutary",
                "King"
            ],
            [
                "Abscond or bolster",
                "Queen"
            ],
            [
                "Convoke and sanguine",
                "King"
            ],
            [
                "Frugal not apropos",
                "King"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.bedType = 'King'\nRETURN rooms.decor,count(*)",
        "question": "Find the number of rooms with king bed for each decor type.",
        "answers": [
            [
                "modern",
                1
            ],
            [
                "traditional",
                3
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.bedType = 'King'\nRETURN rooms.decor,count(*)",
        "question": "How many rooms have king beds? Report the number for each decor type.",
        "answers": [
            [
                "modern",
                1
            ],
            [
                "traditional",
                3
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.decor,avg(rooms.basePrice),min(rooms.basePrice)",
        "question": "Find the average and minimum price of the rooms in different decor.",
        "answers": [
            [
                "modern",
                112.5,
                75
            ],
            [
                "traditional",
                187.5,
                150
            ],
            [
                "rustic",
                162.5,
                150
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.decor,avg(rooms.basePrice),min(rooms.basePrice)",
        "question": "What is the average minimum and price of the rooms for each different decor.",
        "answers": [
            [
                "modern",
                112.5,
                75
            ],
            [
                "traditional",
                187.5,
                150
            ],
            [
                "rustic",
                162.5,
                150
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.roomName\nORDER BY rooms.basePrice",
        "question": "List the name of all rooms sorted by their prices.",
        "answers": [
            [
                "Thrift and accolade"
            ],
            [
                "Harbinger but bequest"
            ],
            [
                "Mendicant with cryptic"
            ],
            [
                "Recluse and defiance"
            ],
            [
                "Interim but salutary"
            ],
            [
                "Immutable before decorum"
            ],
            [
                "Abscond or bolster"
            ],
            [
                "Convoke and sanguine"
            ],
            [
                "Riddle to exculpate"
            ],
            [
                "Frugal not apropos"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.roomName\nORDER BY rooms.basePrice",
        "question": "Sort all the rooms according to the price. Just report the room names.",
        "answers": [
            [
                "Thrift and accolade"
            ],
            [
                "Harbinger but bequest"
            ],
            [
                "Mendicant with cryptic"
            ],
            [
                "Recluse and defiance"
            ],
            [
                "Interim but salutary"
            ],
            [
                "Immutable before decorum"
            ],
            [
                "Abscond or bolster"
            ],
            [
                "Convoke and sanguine"
            ],
            [
                "Riddle to exculpate"
            ],
            [
                "Frugal not apropos"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.basePrice > 120\nRETURN rooms.decor,count(*)",
        "question": "Find the number of rooms with price higher than 120 for different decor.",
        "answers": [
            [
                "modern",
                2
            ],
            [
                "traditional",
                4
            ],
            [
                "rustic",
                2
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.basePrice > 120\nRETURN rooms.decor,count(*)",
        "question": "How many rooms cost more than 120, for each different decor?",
        "answers": [
            [
                "modern",
                2
            ],
            [
                "traditional",
                4
            ],
            [
                "rustic",
                2
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.bedType,avg(rooms.basePrice)",
        "question": "For each bed type, find the average room price.",
        "answers": [
            [
                "King",
                181.25
            ],
            [
                "Queen",
                150.0
            ],
            [
                "Double",
                100.0
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.bedType,avg(rooms.basePrice)",
        "question": "What is the average base price of rooms, for each bed type?",
        "answers": [
            [
                "King",
                181.25
            ],
            [
                "Queen",
                150.0
            ],
            [
                "Double",
                100.0
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.bedType = 'King' OR rooms.bedType = 'Queen'\nRETURN rooms.roomName",
        "question": "List the name of rooms with king or queen bed.",
        "answers": [
            [
                "Recluse and defiance"
            ],
            [
                "Interim but salutary"
            ],
            [
                "Abscond or bolster"
            ],
            [
                "Harbinger but bequest"
            ],
            [
                "Immutable before decorum"
            ],
            [
                "Convoke and sanguine"
            ],
            [
                "Riddle to exculpate"
            ],
            [
                "Frugal not apropos"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.bedType = 'King' OR rooms.bedType = 'Queen'\nRETURN rooms.roomName",
        "question": "What are the names of rooms that have either king or queen bed?",
        "answers": [
            [
                "Recluse and defiance"
            ],
            [
                "Interim but salutary"
            ],
            [
                "Abscond or bolster"
            ],
            [
                "Harbinger but bequest"
            ],
            [
                "Immutable before decorum"
            ],
            [
                "Convoke and sanguine"
            ],
            [
                "Riddle to exculpate"
            ],
            [
                "Frugal not apropos"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN count(DISTINCT rooms.bedType)",
        "question": "How many different types of beds are there?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN count(DISTINCT rooms.bedType)",
        "question": "Find the number of distinct bed types available in this inn.",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.RoomId,rooms.roomName\nORDER BY rooms.basePrice DESC\nLIMIT 3",
        "question": "Find the name and id of the top 3 expensive rooms.",
        "answers": [
            [
                "FNA",
                "Frugal not apropos"
            ],
            [
                "AOB",
                "Abscond or bolster"
            ],
            [
                "CAS",
                "Convoke and sanguine"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.RoomId,rooms.roomName\nORDER BY rooms.basePrice DESC\nLIMIT 3",
        "question": "What are the name and id of the three highest priced rooms?",
        "answers": [
            [
                "FNA",
                "Frugal not apropos"
            ],
            [
                "AOB",
                "Abscond or bolster"
            ],
            [
                "CAS",
                "Convoke and sanguine"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWITH avg(rooms.basePrice) AS baseprice\nMATCH (rooms:`inn_1.Rooms`)\nWHERE  rooms.basePrice >  baseprice \nRETURN rooms.roomName",
        "question": "Find the name of rooms whose price is higher than the average price.",
        "answers": [
            [
                "Abscond or bolster"
            ],
            [
                "Convoke and sanguine"
            ],
            [
                "Riddle to exculpate"
            ],
            [
                "Frugal not apropos"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWITH avg(rooms.basePrice) AS baseprice\nMATCH (rooms:`inn_1.Rooms`)\nWHERE  rooms.basePrice >  baseprice \nRETURN rooms.roomName",
        "question": "What are the name of rooms that cost more than the average.",
        "answers": [
            [
                "Abscond or bolster"
            ],
            [
                "Convoke and sanguine"
            ],
            [
                "Riddle to exculpate"
            ],
            [
                "Frugal not apropos"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (T1:`inn_1.Reservations`)-[]-(T2:`inn_1.Rooms`)\nRETURN T2.roomName,count(*),T1.Room",
        "question": "Return the name and number of reservations made for each of the rooms.",
        "answers": [
            [
                "Recluse and defiance",
                62,
                "RND"
            ],
            [
                "Interim but salutary",
                59,
                "IBS"
            ],
            [
                "Abscond or bolster",
                51,
                "AOB"
            ],
            [
                "Mendicant with cryptic",
                56,
                "MWC"
            ],
            [
                "Harbinger but bequest",
                60,
                "HBB"
            ],
            [
                "Immutable before decorum",
                63,
                "IBD"
            ],
            [
                "Thrift and accolade",
                59,
                "TAA"
            ],
            [
                "Convoke and sanguine",
                69,
                "CAS"
            ],
            [
                "Riddle to exculpate",
                55,
                "RTE"
            ],
            [
                "Frugal not apropos",
                66,
                "FNA"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (T1:`inn_1.Reservations`)-[]-(T2:`inn_1.Rooms`)\nRETURN T2.roomName,count(*),T1.Room",
        "question": "For each room, find its name and the number of times reservations were made for it.",
        "answers": [
            [
                "Recluse and defiance",
                62,
                "RND"
            ],
            [
                "Interim but salutary",
                59,
                "IBS"
            ],
            [
                "Abscond or bolster",
                51,
                "AOB"
            ],
            [
                "Mendicant with cryptic",
                56,
                "MWC"
            ],
            [
                "Harbinger but bequest",
                60,
                "HBB"
            ],
            [
                "Immutable before decorum",
                63,
                "IBD"
            ],
            [
                "Thrift and accolade",
                59,
                "TAA"
            ],
            [
                "Convoke and sanguine",
                69,
                "CAS"
            ],
            [
                "Riddle to exculpate",
                55,
                "RTE"
            ],
            [
                "Frugal not apropos",
                66,
                "FNA"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (T1:`inn_1.Reservations`)-[]-(T2:`inn_1.Rooms`)\nWITH count(*) AS count, T2.roomName AS roomName\nWHERE count  > 60\nRETURN roomName",
        "question": "Find the names of rooms that have been reserved for more than 60 times.",
        "answers": [
            [
                "Recluse and defiance"
            ],
            [
                "Immutable before decorum"
            ],
            [
                "Convoke and sanguine"
            ],
            [
                "Frugal not apropos"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (T1:`inn_1.Reservations`)-[]-(T2:`inn_1.Rooms`)\nWITH count(*) AS count, T2.roomName AS roomName\nWHERE count  > 60\nRETURN roomName",
        "question": "What are the names of rooms whose reservation frequency exceeds 60 times?",
        "answers": [
            [
                "Recluse and defiance"
            ],
            [
                "Immutable before decorum"
            ],
            [
                "Convoke and sanguine"
            ],
            [
                "Frugal not apropos"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE 120<=rooms.basePrice<=150\nRETURN rooms.roomName",
        "question": "Find the name of rooms whose base price is between 120 and 150.",
        "answers": [
            [
                "Recluse and defiance"
            ],
            [
                "Interim but salutary"
            ],
            [
                "Mendicant with cryptic"
            ],
            [
                "Immutable before decorum"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE 120<=rooms.basePrice<=150\nRETURN rooms.roomName",
        "question": "Which rooms cost between 120 and 150? Give me the room names.",
        "answers": [
            [
                "Recluse and defiance"
            ],
            [
                "Interim but salutary"
            ],
            [
                "Mendicant with cryptic"
            ],
            [
                "Immutable before decorum"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (T1:`inn_1.Reservations`)-[]-(T2:`inn_1.Rooms`)\nWHERE T1.FirstName =~'.*[R|r]OY.*'\nRETURN T2.roomName",
        "question": "Find the name of rooms booked by some customers whose first name contains ROY.",
        "answers": [
            [
                "Harbinger but bequest"
            ],
            [
                "Harbinger but bequest"
            ],
            [
                "Harbinger but bequest"
            ],
            [
                "Thrift and accolade"
            ],
            [
                "Convoke and sanguine"
            ],
            [
                "Frugal not apropos"
            ],
            [
                "Frugal not apropos"
            ]
        ]
    },
    {
        "db_id": "inn_1",
        "query": "MATCH (T1:`inn_1.Reservations`)-[]-(T2:`inn_1.Rooms`)\nWHERE T1.FirstName =~'.*[R|r]OY.*'\nRETURN T2.roomName",
        "question": "What are the name of rooms booked by customers whose first name has \"ROY\" in part?",
        "answers": [
            [
                "Harbinger but bequest"
            ],
            [
                "Harbinger but bequest"
            ],
            [
                "Harbinger but bequest"
            ],
            [
                "Thrift and accolade"
            ],
            [
                "Convoke and sanguine"
            ],
            [
                "Frugal not apropos"
            ],
            [
                "Frugal not apropos"
            ]
        ]
    },
    {
        "db_id": "local_govt_mdm",
        "query": "MATCH (T1:`local_govt_mdm.Customer_Master_Index`)-[]-(T2:`local_govt_mdm.CMI_Cross_References`)\nWHERE T2.source_system_code = 'Tax'\nRETURN T1.cmi_details",
        "question": "what are the details of the cmi masters that have the cross reference code 'Tax'?",
        "answers": [
            [
                "Volkman, Mills and Ferry"
            ],
            [
                "Schmidt, Kertzmann and Lubowitz"
            ],
            [
                "Reynolds-McClure"
            ],
            [
                "Volkman, Mills and Ferry"
            ],
            [
                "Volkman, Mills and Ferry"
            ],
            [
                "Schmitt-Lang"
            ]
        ]
    },
    {
        "db_id": "local_govt_mdm",
        "query": "MATCH (T1:`local_govt_mdm.CMI_Cross_References`)-[]-(T2:`local_govt_mdm.Council_Tax`)\nWITH T1.cmi_cross_ref_id AS cmi_cross_ref_id, T1.source_system_code AS source_system_code, count(*) AS count\nWHERE count  >= 1\nRETURN cmi_cross_ref_id,source_system_code",
        "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.",
        "answers": [
            [
                101,
                "Tax"
            ],
            [
                103,
                "Tax"
            ],
            [
                104,
                "Tax"
            ],
            [
                102,
                "Tax"
            ],
            [
                106,
                "Tax"
            ],
            [
                105,
                "Tax"
            ]
        ]
    },
    {
        "db_id": "local_govt_mdm",
        "query": "MATCH (T1:`local_govt_mdm.Business_Rates`)-[]-(T2:`local_govt_mdm.CMI_Cross_References`)\nRETURN T2.cmi_cross_ref_id,T2.master_customer_id,count(*)",
        "question": "How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n",
        "answers": [
            [
                99,
                9,
                1
            ],
            [
                49,
                1,
                1
            ],
            [
                95,
                2,
                1
            ]
        ]
    },
    {
        "db_id": "local_govt_mdm",
        "query": "MATCH (T1:`local_govt_mdm.CMI_Cross_References`)-[]-(T2:`local_govt_mdm.Benefits_Overpayments`)\nRETURN T1.source_system_code,T2.council_tax_id\nORDER BY T2.council_tax_id",
        "question": "What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.",
        "answers": [
            [
                "Benefits",
                3
            ],
            [
                "Benefits",
                6
            ],
            [
                "Benefits",
                7
            ],
            [
                "Benefits",
                8
            ]
        ]
    },
    {
        "db_id": "local_govt_mdm",
        "query": "MATCH (T1:`local_govt_mdm.CMI_Cross_References`)-[]-(T2:`local_govt_mdm.Parking_Fines`)\nRETURN T1.source_system_code,T1.master_customer_id,T2.council_tax_id",
        "question": "Wat is the tax source system code and master customer id of the taxes related to each parking fine id?",
        "answers": [
            [
                "Parking",
                5,
                9
            ],
            [
                "Parking",
                9,
                10
            ]
        ]
    },
    {
        "db_id": "local_govt_mdm",
        "query": "MATCH (T1:`local_govt_mdm.Rent_Arrears`)-[]-(T2:`local_govt_mdm.CMI_Cross_References`)-[]-(T3:`local_govt_mdm.Customer_Master_Index`)\nWHERE T3.cmi_details <> 'Schmidt ,  Kertzmann and Lubowitz'\nRETURN T1.council_tax_id",
        "question": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?",
        "answers": [
            [
                1
            ],
            [
                2
            ],
            [
                6
            ],
            [
                7
            ]
        ]
    },
    {
        "db_id": "local_govt_mdm",
        "query": "MATCH (T1:`local_govt_mdm.Electoral_Register`)-[]-(T2:`local_govt_mdm.CMI_Cross_References`)\nWHERE T2.source_system_code = 'Electoral' OR T2.source_system_code = 'Tax'\nRETURN T1.electoral_register_id",
        "question": "What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "local_govt_mdm",
        "query": "MATCH (cmi_cross_references:`local_govt_mdm.CMI_Cross_References`)\nRETURN count(DISTINCT cmi_cross_references.source_system_code)",
        "question": "How many different source system code for the cmi cross references are there?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "local_govt_mdm",
        "query": "MATCH (parking_fines:`local_govt_mdm.Parking_Fines`)\nRETURN parking_fines.council_tax_id,parking_fines.cmi_cross_ref_id",
        "question": "List the council tax ids and their related cmi cross references of all the parking fines.",
        "answers": [
            [
                9,
                4
            ],
            [
                10,
                81
            ]
        ]
    },
    {
        "db_id": "local_govt_mdm",
        "query": "MATCH (rent_arrears:`local_govt_mdm.Rent_Arrears`)\nRETURN count(*)",
        "question": "How many council taxes are collected for renting arrears ?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "local_govt_mdm",
        "query": "MATCH (T1:`local_govt_mdm.Customer_Master_Index`)-[]-(T2:`local_govt_mdm.CMI_Cross_References`)\nWHERE T1.cmi_details = 'Gottlieb ,  Becker and Wyman'\nRETURN DISTINCT T2.source_system_code",
        "question": "What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?",
        "answers": []
    },
    {
        "db_id": "local_govt_mdm",
        "query": "MATCH (cmi_cross_references:`local_govt_mdm.CMI_Cross_References`)\nWHERE cmi_cross_references.source_system_code =~'.*[E|e]n.*'\nRETURN DISTINCT cmi_cross_references.source_system_code",
        "question": "Which distinct source system code includes the substring 'en'?",
        "answers": [
            [
                "Rent"
            ],
            [
                "Benefits"
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (party:`party_host.party`)\nRETURN count(*)",
        "question": "How many parties are there?",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (party:`party_host.party`)\nRETURN count(*)",
        "question": "Count the number of parties.",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (party:`party_host.party`)\nRETURN party.Party_Theme\nORDER BY party.Number_of_hosts ASC",
        "question": "List the themes of parties in ascending order of number of hosts.",
        "answers": [
            [
                "Hardcore Resurrection"
            ],
            [
                "QrimeTime"
            ],
            [
                "Spring"
            ],
            [
                "Teqnology"
            ],
            [
                "In Qontrol"
            ],
            [
                "Houseqlassics"
            ],
            [
                "Club Q-BASE"
            ],
            [
                "Qlubtempo"
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (party:`party_host.party`)\nRETURN party.Party_Theme\nORDER BY party.Number_of_hosts ASC",
        "question": "What are the themes of parties ordered by the number of hosts in ascending manner?",
        "answers": [
            [
                "Hardcore Resurrection"
            ],
            [
                "QrimeTime"
            ],
            [
                "Spring"
            ],
            [
                "Teqnology"
            ],
            [
                "In Qontrol"
            ],
            [
                "Houseqlassics"
            ],
            [
                "Club Q-BASE"
            ],
            [
                "Qlubtempo"
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (party:`party_host.party`)\nRETURN party.Party_Theme,party.Location",
        "question": "What are the themes and locations of parties?",
        "answers": [
            [
                "Spring",
                "Hemkade 48 Zaandam"
            ],
            [
                "Club Q-BASE",
                "Hemkade 48 Zaandam"
            ],
            [
                "Hardcore Resurrection",
                "Various locations"
            ],
            [
                "Teqnology",
                "Heineken Music Hall Amsterdam"
            ],
            [
                "Qlubtempo",
                "Hemkade 48 Zaandam, Heineken Music Hall Amsterdam"
            ],
            [
                "QrimeTime",
                "Heineken Music Hall Amsterdam"
            ],
            [
                "In Qontrol",
                "RAI Amsterdam"
            ],
            [
                "Houseqlassics",
                "Various locations"
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (party:`party_host.party`)\nRETURN party.Party_Theme,party.Location",
        "question": "Give me the theme and location of each party.",
        "answers": [
            [
                "Spring",
                "Hemkade 48 Zaandam"
            ],
            [
                "Club Q-BASE",
                "Hemkade 48 Zaandam"
            ],
            [
                "Hardcore Resurrection",
                "Various locations"
            ],
            [
                "Teqnology",
                "Heineken Music Hall Amsterdam"
            ],
            [
                "Qlubtempo",
                "Hemkade 48 Zaandam, Heineken Music Hall Amsterdam"
            ],
            [
                "QrimeTime",
                "Heineken Music Hall Amsterdam"
            ],
            [
                "In Qontrol",
                "RAI Amsterdam"
            ],
            [
                "Houseqlassics",
                "Various locations"
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (party:`party_host.party`)\nWHERE party.Party_Theme = 'Spring' OR party.Party_Theme = 'Teqnology'\nRETURN party.First_year,party.Last_year",
        "question": "Show the first year and last year of parties with theme \"Spring\" or \"Teqnology\".",
        "answers": [
            [
                "2000",
                "2001"
            ],
            [
                "2002",
                "2004"
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (party:`party_host.party`)\nWHERE party.Party_Theme = 'Spring' OR party.Party_Theme = 'Teqnology'\nRETURN party.First_year,party.Last_year",
        "question": "What are the first year and last year of the parties whose theme is \"Spring\" or \"Teqnology\"?",
        "answers": [
            [
                "2000",
                "2001"
            ],
            [
                "2002",
                "2004"
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (party:`party_host.party`)\nRETURN avg(party.Number_of_hosts)",
        "question": "What is the average number of hosts for parties?",
        "answers": [
            [
                12.25
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (party:`party_host.party`)\nRETURN avg(party.Number_of_hosts)",
        "question": "Compute the average number of hosts for parties.",
        "answers": [
            [
                12.25
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (party:`party_host.party`)\nRETURN party.Location\nORDER BY party.Number_of_hosts DESC\nLIMIT 1",
        "question": "What is the location of the party with the most hosts?",
        "answers": [
            [
                "Hemkade 48 Zaandam, Heineken Music Hall Amsterdam"
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (party:`party_host.party`)\nRETURN party.Location\nORDER BY party.Number_of_hosts DESC\nLIMIT 1",
        "question": "Which party had the most hosts? Give me the party location.",
        "answers": [
            [
                "Hemkade 48 Zaandam, Heineken Music Hall Amsterdam"
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (host:`party_host.host`)\nRETURN host.Nationality,count(*)",
        "question": "Show different nationalities along with the number of hosts of each nationality.",
        "answers": [
            [
                "United States",
                8
            ],
            [
                "Argentina",
                1
            ],
            [
                "Hungary",
                1
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (host:`party_host.host`)\nRETURN host.Nationality,count(*)",
        "question": "How many hosts does each nationality have? List the nationality and the count.",
        "answers": [
            [
                "United States",
                8
            ],
            [
                "Argentina",
                1
            ],
            [
                "Hungary",
                1
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (host:`party_host.host`)\nRETURN host.Nationality\nORDER BY host.Nationality DESC\nLIMIT 1",
        "question": "Show the most common nationality of hosts.",
        "answers": [
            [
                "United States"
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (host:`party_host.host`)\nRETURN host.Nationality\nORDER BY host.Nationality DESC\nLIMIT 1",
        "question": "Which nationality has the most hosts?",
        "answers": [
            [
                "United States"
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (T2:`party_host.host`)-[T1:`party_host.party_host`]-(T3:`party_host.party`)\nRETURN T3.Party_Theme,T2.Name",
        "question": "Show the themes of parties and the names of the party hosts.",
        "answers": [
            [
                "Spring",
                "Austin Daye"
            ],
            [
                "Club Q-BASE",
                "Ed Davis"
            ],
            [
                "Teqnology",
                "Lloyd Daniels"
            ],
            [
                "QrimeTime",
                "Kornel David"
            ],
            [
                "QrimeTime",
                "Derrick Dial"
            ],
            [
                "Houseqlassics",
                "Carlos Delfino"
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (T2:`party_host.host`)-[T1:`party_host.party_host`]-(T3:`party_host.party`)\nRETURN T3.Party_Theme,T2.Name",
        "question": "For each party, return its theme and the name of its host.",
        "answers": [
            [
                "Spring",
                "Austin Daye"
            ],
            [
                "Club Q-BASE",
                "Ed Davis"
            ],
            [
                "Teqnology",
                "Lloyd Daniels"
            ],
            [
                "QrimeTime",
                "Kornel David"
            ],
            [
                "QrimeTime",
                "Derrick Dial"
            ],
            [
                "Houseqlassics",
                "Carlos Delfino"
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (T2:`party_host.host`)-[T1:`party_host.party_host`]-(T3:`party_host.party`)\nRETURN T3.Location,T2.Name\nORDER BY T2.Age",
        "question": "Show the locations of parties and the names of the party hosts in ascending order of the age of the host.",
        "answers": [
            [
                "Various locations",
                "Carlos Delfino"
            ],
            [
                "Heineken Music Hall Amsterdam",
                "Kornel David"
            ],
            [
                "Heineken Music Hall Amsterdam",
                "Lloyd Daniels"
            ],
            [
                "Hemkade 48 Zaandam",
                "Austin Daye"
            ],
            [
                "Hemkade 48 Zaandam",
                "Ed Davis"
            ],
            [
                "Heineken Music Hall Amsterdam",
                "Derrick Dial"
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (T2:`party_host.host`)-[T1:`party_host.party_host`]-(T3:`party_host.party`)\nRETURN T3.Location,T2.Name\nORDER BY T2.Age",
        "question": "For each party, find its location and the name of its host. Sort the result in ascending order of the age of the host.",
        "answers": [
            [
                "Various locations",
                "Carlos Delfino"
            ],
            [
                "Heineken Music Hall Amsterdam",
                "Kornel David"
            ],
            [
                "Heineken Music Hall Amsterdam",
                "Lloyd Daniels"
            ],
            [
                "Hemkade 48 Zaandam",
                "Austin Daye"
            ],
            [
                "Hemkade 48 Zaandam",
                "Ed Davis"
            ],
            [
                "Heineken Music Hall Amsterdam",
                "Derrick Dial"
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (T2:`party_host.host`)-[T1:`party_host.party_host`]-(T3:`party_host.party`)\nWHERE T2.Age > '50'\nRETURN T3.Location",
        "question": "Show the locations of parties with hosts older than 50.",
        "answers": [
            [
                "Heineken Music Hall Amsterdam"
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (T2:`party_host.host`)-[T1:`party_host.party_host`]-(T3:`party_host.party`)\nWHERE T2.Age > '50'\nRETURN T3.Location",
        "question": "Which parties have hosts of age above 50? Give me the party locations.",
        "answers": [
            [
                "Heineken Music Hall Amsterdam"
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (T2:`party_host.host`)-[T1:`party_host.party_host`]-(T3:`party_host.party`)\nWHERE T3.Number_of_hosts > 20\nRETURN T2.Name",
        "question": "Show the host names for parties with number of hosts greater than 20.",
        "answers": [
            [
                "Ed Davis"
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (T2:`party_host.host`)-[T1:`party_host.party_host`]-(T3:`party_host.party`)\nWHERE T3.Number_of_hosts > 20\nRETURN T2.Name",
        "question": "Which parties have more than 20 hosts? Give me the host names for these parties.",
        "answers": [
            [
                "Ed Davis"
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (host:`party_host.host`)\nRETURN host.Name,host.Nationality\nORDER BY host.Age DESC\nLIMIT 1",
        "question": "Show the name and the nationality of the oldest host.",
        "answers": [
            [
                "Derrick Dial",
                "United States"
            ]
        ]
    },
    {
        "db_id": "party_host",
        "query": "MATCH (host:`party_host.host`)\nRETURN host.Name,host.Nationality\nORDER BY host.Age DESC\nLIMIT 1",
        "question": "What are the name and the nationality of the host of the highest age?",
        "answers": [
            [
                "Derrick Dial",
                "United States"
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (region:`storm_record.region`)\nRETURN count(*)",
        "question": "How many regions do we have?",
        "answers": [
            [
                13
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (region:`storm_record.region`)\nRETURN count(*)",
        "question": "Count the number of regions.",
        "answers": [
            [
                13
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (region:`storm_record.region`)\nRETURN region.Region_code,region.Region_name\nORDER BY region.Region_code",
        "question": "Show all region code and region name sorted by the codes.",
        "answers": [
            [
                "AD",
                "Andorra"
            ],
            [
                "AF",
                "Afghanistan"
            ],
            [
                "AG",
                "Antigua and Barbuda"
            ],
            [
                "AI",
                "Anguilla"
            ],
            [
                "AL",
                "Albania"
            ],
            [
                "AO",
                "Angola"
            ],
            [
                "AQ",
                "Antarctica"
            ],
            [
                "CY",
                "Cyprus"
            ],
            [
                "CZ",
                "Czech Republic"
            ],
            [
                "DJ",
                "Djibouti"
            ],
            [
                "DK",
                "Denmark"
            ],
            [
                "DS",
                "American Samoa"
            ],
            [
                "DZ",
                "Algeria"
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (region:`storm_record.region`)\nRETURN region.Region_code,region.Region_name\nORDER BY region.Region_code",
        "question": "What are the codes and names for all regions, sorted by codes?",
        "answers": [
            [
                "AD",
                "Andorra"
            ],
            [
                "AF",
                "Afghanistan"
            ],
            [
                "AG",
                "Antigua and Barbuda"
            ],
            [
                "AI",
                "Anguilla"
            ],
            [
                "AL",
                "Albania"
            ],
            [
                "AO",
                "Angola"
            ],
            [
                "AQ",
                "Antarctica"
            ],
            [
                "CY",
                "Cyprus"
            ],
            [
                "CZ",
                "Czech Republic"
            ],
            [
                "DJ",
                "Djibouti"
            ],
            [
                "DK",
                "Denmark"
            ],
            [
                "DS",
                "American Samoa"
            ],
            [
                "DZ",
                "Algeria"
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (region:`storm_record.region`)\nRETURN region.Region_name\nORDER BY region.Region_name",
        "question": "List all region names in alphabetical order.",
        "answers": [
            [
                "Afghanistan"
            ],
            [
                "Albania"
            ],
            [
                "Algeria"
            ],
            [
                "American Samoa"
            ],
            [
                "Andorra"
            ],
            [
                "Angola"
            ],
            [
                "Anguilla"
            ],
            [
                "Antarctica"
            ],
            [
                "Antigua and Barbuda"
            ],
            [
                "Cyprus"
            ],
            [
                "Czech Republic"
            ],
            [
                "Denmark"
            ],
            [
                "Djibouti"
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (region:`storm_record.region`)\nRETURN region.Region_name\nORDER BY region.Region_name",
        "question": "What are the names of the regions in alphabetical order?",
        "answers": [
            [
                "Afghanistan"
            ],
            [
                "Albania"
            ],
            [
                "Algeria"
            ],
            [
                "American Samoa"
            ],
            [
                "Andorra"
            ],
            [
                "Angola"
            ],
            [
                "Anguilla"
            ],
            [
                "Antarctica"
            ],
            [
                "Antigua and Barbuda"
            ],
            [
                "Cyprus"
            ],
            [
                "Czech Republic"
            ],
            [
                "Denmark"
            ],
            [
                "Djibouti"
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (region:`storm_record.region`)\nWHERE region.Region_name <> 'Denmark'\nRETURN region.Region_name",
        "question": "Show names for all regions except for Denmark.",
        "answers": [
            [
                "Afghanistan"
            ],
            [
                "Albania"
            ],
            [
                "Algeria"
            ],
            [
                "American Samoa"
            ],
            [
                "Andorra"
            ],
            [
                "Angola"
            ],
            [
                "Anguilla"
            ],
            [
                "Antarctica"
            ],
            [
                "Antigua and Barbuda"
            ],
            [
                "Cyprus"
            ],
            [
                "Czech Republic"
            ],
            [
                "Djibouti"
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (region:`storm_record.region`)\nWHERE region.Region_name <> 'Denmark'\nRETURN region.Region_name",
        "question": "Return the names of all regions other than Denmark.",
        "answers": [
            [
                "Afghanistan"
            ],
            [
                "Albania"
            ],
            [
                "Algeria"
            ],
            [
                "American Samoa"
            ],
            [
                "Andorra"
            ],
            [
                "Angola"
            ],
            [
                "Anguilla"
            ],
            [
                "Antarctica"
            ],
            [
                "Antigua and Barbuda"
            ],
            [
                "Cyprus"
            ],
            [
                "Czech Republic"
            ],
            [
                "Djibouti"
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (storm:`storm_record.storm`)\nWHERE storm.Number_Deaths > 0\nRETURN count(*)",
        "question": "How many storms had death records?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (storm:`storm_record.storm`)\nWHERE storm.Number_Deaths > 0\nRETURN count(*)",
        "question": "Count the number of storms in which at least 1 person died.",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (storm:`storm_record.storm`)\nWHERE storm.Number_Deaths >= 1\nRETURN storm.Name,storm.Dates_active,storm.Number_Deaths",
        "question": "List name, dates active, and number of deaths for all storms with at least 1 death.",
        "answers": [
            [
                "Two",
                "August3\u2013August10",
                7
            ],
            [
                "Three",
                "August5\u2013August14",
                52
            ],
            [
                "Four",
                "August26\u2013September2",
                7
            ],
            [
                "Five",
                "September7\u2013September17",
                3
            ],
            [
                "Six",
                "September18\u2013September25",
                2
            ],
            [
                "9 cyclones",
                "May19 \u2013October26",
                71
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (storm:`storm_record.storm`)\nWHERE storm.Number_Deaths >= 1\nRETURN storm.Name,storm.Dates_active,storm.Number_Deaths",
        "question": "What are the names, dates active, and number of deaths for storms that had 1 or more death?",
        "answers": [
            [
                "Two",
                "August3\u2013August10",
                7
            ],
            [
                "Three",
                "August5\u2013August14",
                52
            ],
            [
                "Four",
                "August26\u2013September2",
                7
            ],
            [
                "Five",
                "September7\u2013September17",
                3
            ],
            [
                "Six",
                "September18\u2013September25",
                2
            ],
            [
                "9 cyclones",
                "May19 \u2013October26",
                71
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (storm:`storm_record.storm`)\nWHERE storm.Max_speed > 1000\nRETURN avg(storm.Damage_millions_USD),max(storm.Damage_millions_USD)",
        "question": "Show the average and maximum damage for all storms with max speed higher than 1000.",
        "answers": [
            [
                6.5195,
                13.0
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (storm:`storm_record.storm`)\nWHERE storm.Max_speed > 1000\nRETURN avg(storm.Damage_millions_USD),max(storm.Damage_millions_USD)",
        "question": "What is the average and maximum damage in millions for storms that had a max speed over 1000?",
        "answers": [
            [
                6.5195,
                13.0
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (storm:`storm_record.storm`)\nRETURN storm.Name,storm.Damage_millions_USD\nORDER BY storm.Max_speed DESC",
        "question": "List name and damage for all storms in a descending order of max speed.",
        "answers": [
            [
                "Nine",
                13.0
            ],
            [
                "Six",
                0.039
            ],
            [
                "One",
                13.0
            ],
            [
                "Five",
                1.49
            ],
            [
                "Eight",
                13.0
            ],
            [
                "Seven",
                13.0
            ],
            [
                "Two",
                10.75
            ],
            [
                "Three",
                13.0
            ],
            [
                "Four",
                4.05
            ],
            [
                "9 cyclones",
                29.3
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (storm:`storm_record.storm`)\nRETURN storm.Name,storm.Damage_millions_USD\nORDER BY storm.Max_speed DESC",
        "question": "What are the names and damage in millions for storms, ordered by their max speeds descending?",
        "answers": [
            [
                "Nine",
                13.0
            ],
            [
                "Six",
                0.039
            ],
            [
                "One",
                13.0
            ],
            [
                "Five",
                1.49
            ],
            [
                "Eight",
                13.0
            ],
            [
                "Seven",
                13.0
            ],
            [
                "Two",
                10.75
            ],
            [
                "Three",
                13.0
            ],
            [
                "Four",
                4.05
            ],
            [
                "9 cyclones",
                29.3
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH ()-[affected_region:`storm_record.affected_region`]-()\nRETURN count(DISTINCT affected_region.Region_id)",
        "question": "How many regions are affected?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH ()-[affected_region:`storm_record.affected_region`]-()\nRETURN count(DISTINCT affected_region.Region_id)",
        "question": "Count the number of different affected regions.",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (T1:`storm_record.region`)-[T2:`storm_record.affected_region`]-()\nRETURN T1.Region_name,count(*)",
        "question": "Show the name for regions and the number of storms for each region.",
        "answers": [
            [
                "Afghanistan",
                2
            ],
            [
                "Albania",
                2
            ],
            [
                "Algeria",
                1
            ],
            [
                "Denmark",
                1
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (T1:`storm_record.region`)-[T2:`storm_record.affected_region`]-()\nRETURN T1.Region_name,count(*)",
        "question": "How many storms occured in each region?",
        "answers": [
            [
                "Afghanistan",
                2
            ],
            [
                "Albania",
                2
            ],
            [
                "Algeria",
                1
            ],
            [
                "Denmark",
                1
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (T1:`storm_record.storm`)-[T2:`storm_record.affected_region`]-()\nRETURN T1.Name,count(*)",
        "question": "List the name for storms and the number of affected regions for each storm.",
        "answers": [
            [
                "One",
                2
            ],
            [
                "Three",
                1
            ],
            [
                "Four",
                1
            ],
            [
                "Five",
                2
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (T1:`storm_record.storm`)-[T2:`storm_record.affected_region`]-()\nRETURN T1.Name,count(*)",
        "question": "How many regions were affected by each storm?",
        "answers": [
            [
                "One",
                2
            ],
            [
                "Three",
                1
            ],
            [
                "Four",
                1
            ],
            [
                "Five",
                2
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (T2:`storm_record.region`)-[T1:`storm_record.affected_region`]-(T3:`storm_record.storm`)\nWHERE T3.Number_Deaths >= 10\nRETURN T2.Region_name",
        "question": "What are the region names affected by the storm with a number of deaths of least 10?",
        "answers": [
            [
                "Algeria"
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (T2:`storm_record.region`)-[T1:`storm_record.affected_region`]-(T3:`storm_record.storm`)\nWHERE T3.Number_Deaths >= 10\nRETURN T2.Region_name",
        "question": "Return the names of the regions affected by storms that had a death count of at least 10.",
        "answers": [
            [
                "Algeria"
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (T2:`storm_record.region`)-[T1:`storm_record.affected_region`]-(T3:`storm_record.storm`)\nWHERE T2.Region_name = 'Denmark'\nRETURN T3.Name",
        "question": "Show all storm names affecting region \"Denmark\".",
        "answers": [
            [
                "Five"
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (T2:`storm_record.region`)-[T1:`storm_record.affected_region`]-(T3:`storm_record.storm`)\nWHERE T2.Region_name = 'Denmark'\nRETURN T3.Name",
        "question": "What are the names of the storms that affected Denmark?",
        "answers": [
            [
                "Five"
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (T1:`storm_record.region`)-[T2:`storm_record.affected_region`]-()\nWITH count(*) AS count, T1.Region_name AS Region_name\nWHERE count  >= 2\nRETURN Region_name",
        "question": "Show the region name with at least two storms.",
        "answers": [
            [
                "Afghanistan"
            ],
            [
                "Albania"
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (T1:`storm_record.region`)-[T2:`storm_record.affected_region`]-()\nWITH count(*) AS count, T1.Region_name AS Region_name\nWHERE count  >= 2\nRETURN Region_name",
        "question": "What are the names of regions with two or more storms?",
        "answers": [
            [
                "Afghanistan"
            ],
            [
                "Albania"
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (T2:`storm_record.region`)-[T1:`storm_record.affected_region`]-(T3:`storm_record.storm`)\nRETURN T2.Region_name\nORDER BY T3.Number_Deaths DESC\nLIMIT 1",
        "question": "Find the names of the regions which were affected by the storm that killed the greatest number of people.",
        "answers": [
            [
                "Algeria"
            ]
        ]
    },
    {
        "db_id": "storm_record",
        "query": "MATCH (T2:`storm_record.region`)-[T1:`storm_record.affected_region`]-(T3:`storm_record.storm`)\nRETURN T2.Region_name\nORDER BY T3.Number_Deaths DESC\nLIMIT 1",
        "question": "What are the names of regions that were affected by the storm in which the most people died?",
        "answers": [
            [
                "Algeria"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (county:`election.county`)\nRETURN count(*)",
        "question": "How many counties are there in total?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (county:`election.county`)\nRETURN count(*)",
        "question": "Count the total number of counties.",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (county:`election.county`)\nRETURN county.County_name,county.Population",
        "question": "Show the county name and population of all counties.",
        "answers": [
            [
                "Howard",
                21000.0
            ],
            [
                "Baltimore County",
                90000.0
            ],
            [
                "Colony",
                79000.0
            ],
            [
                "Mansfield",
                87200.0
            ],
            [
                "Manning",
                13300.0
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (county:`election.county`)\nRETURN county.County_name,county.Population",
        "question": "What are the name and population of each county?",
        "answers": [
            [
                "Howard",
                21000.0
            ],
            [
                "Baltimore County",
                90000.0
            ],
            [
                "Colony",
                79000.0
            ],
            [
                "Mansfield",
                87200.0
            ],
            [
                "Manning",
                13300.0
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (county:`election.county`)\nRETURN avg(county.Population)",
        "question": "Show the average population of all counties.",
        "answers": [
            [
                58100.0
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (county:`election.county`)\nRETURN avg(county.Population)",
        "question": "On average how large is the population of the counties?",
        "answers": [
            [
                58100.0
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (county:`election.county`)\nRETURN max(county.Population),min(county.Population)",
        "question": "Return the maximum and minimum population among all counties.",
        "answers": [
            [
                90000.0,
                13300.0
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (county:`election.county`)\nRETURN max(county.Population),min(county.Population)",
        "question": "What are the maximum and minimum population of the counties?",
        "answers": [
            [
                90000.0,
                13300.0
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (election:`election.election`)\nRETURN DISTINCT election.District",
        "question": "Show all the distinct districts for elections.",
        "answers": [
            [
                1
            ],
            [
                2
            ],
            [
                3
            ],
            [
                4
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (election:`election.election`)\nRETURN DISTINCT election.District",
        "question": "What are the distinct districts for elections?",
        "answers": [
            [
                1
            ],
            [
                2
            ],
            [
                3
            ],
            [
                4
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (county:`election.county`)\nWHERE county.County_name = 'Howard'\nRETURN county.Zip_code",
        "question": "Show the zip code of the county with name \"Howard\".",
        "answers": [
            [
                "D21"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (county:`election.county`)\nWHERE county.County_name = 'Howard'\nRETURN county.Zip_code",
        "question": "What is the zip code the county named \"Howard\" is located in?",
        "answers": [
            [
                "D21"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (election:`election.election`)\nWHERE election.District = 1\nRETURN election.Delegate",
        "question": "Show the delegate from district 1 in election.",
        "answers": [
            [
                "Bates, Gail H. Gail H. Bates"
            ],
            [
                "Miller, Warren E. Warren E. Miller"
            ],
            [
                "Pendergrass, Shane E. Shane Pendergrass"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (election:`election.election`)\nWHERE election.District = 1\nRETURN election.Delegate",
        "question": "Who is the delegate of district 1 in the elections?",
        "answers": [
            [
                "Bates, Gail H. Gail H. Bates"
            ],
            [
                "Miller, Warren E. Warren E. Miller"
            ],
            [
                "Pendergrass, Shane E. Shane Pendergrass"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (election:`election.election`)\nRETURN election.Delegate,election.Committee",
        "question": "Show the delegate and committee information of elections.",
        "answers": [
            [
                "Bates, Gail H. Gail H. Bates",
                "Appropriations"
            ],
            [
                "Miller, Warren E. Warren E. Miller",
                "Economic Matters"
            ],
            [
                "DeBoy, Steven J. Sr. Steven J. DeBoy, Sr.",
                "Appropriations"
            ],
            [
                "Malone, James E. Jr. James E. Malone, Jr.",
                "Environmental Matters (Vice-Chair)"
            ],
            [
                "Bobo, Elizabeth Elizabeth Bobo",
                "Environmental Matters"
            ],
            [
                "Pendergrass, Shane E. Shane Pendergrass",
                "Health and Government Operations"
            ],
            [
                "Guzzone, Guy Guy Guzzone",
                "Appropriations"
            ],
            [
                "Turner, Frank S. Frank S. Turner",
                "Ways and Means"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (election:`election.election`)\nRETURN election.Delegate,election.Committee",
        "question": "What are the delegate and committee information for each election record?",
        "answers": [
            [
                "Bates, Gail H. Gail H. Bates",
                "Appropriations"
            ],
            [
                "Miller, Warren E. Warren E. Miller",
                "Economic Matters"
            ],
            [
                "DeBoy, Steven J. Sr. Steven J. DeBoy, Sr.",
                "Appropriations"
            ],
            [
                "Malone, James E. Jr. James E. Malone, Jr.",
                "Environmental Matters (Vice-Chair)"
            ],
            [
                "Bobo, Elizabeth Elizabeth Bobo",
                "Environmental Matters"
            ],
            [
                "Pendergrass, Shane E. Shane Pendergrass",
                "Health and Government Operations"
            ],
            [
                "Guzzone, Guy Guy Guzzone",
                "Appropriations"
            ],
            [
                "Turner, Frank S. Frank S. Turner",
                "Ways and Means"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (party:`election.party`)\nRETURN count(DISTINCT party.Governor)",
        "question": "How many distinct governors are there?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (party:`election.party`)\nRETURN count(DISTINCT party.Governor)",
        "question": "Count the number of distinct governors.",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (party:`election.party`)\nWHERE party.Party = 'Democratic'\nRETURN party.Lieutenant_Governor,party.Comptroller",
        "question": "Show the lieutenant governor and comptroller from the democratic party.",
        "answers": [
            [
                "Sandra Frankel",
                "Carl McCall"
            ],
            [
                "Dennis Mehiel",
                "Alan Hevesi"
            ],
            [
                "David Paterson",
                "Alan Hevesi"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (party:`election.party`)\nWHERE party.Party = 'Democratic'\nRETURN party.Lieutenant_Governor,party.Comptroller",
        "question": "Who are the lieutenant governor and comptroller from the democratic party?",
        "answers": [
            [
                "Sandra Frankel",
                "Carl McCall"
            ],
            [
                "Dennis Mehiel",
                "Alan Hevesi"
            ],
            [
                "David Paterson",
                "Alan Hevesi"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (party:`election.party`)\nWHERE party.Governor = 'Eliot Spitzer'\nRETURN DISTINCT party.Year",
        "question": "In which distinct years was the governor \"Eliot Spitzer\"?",
        "answers": [
            [
                2006.0
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (party:`election.party`)\nWHERE party.Governor = 'Eliot Spitzer'\nRETURN DISTINCT party.Year",
        "question": "Find the distinct years when the governor was named \"Eliot Spitzer\".",
        "answers": [
            [
                2006.0
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (T1:`election.county`)-[]-(T2:`election.election`)\nRETURN T2.Delegate,T1.County_name",
        "question": "Show the delegates and the names of county they belong to.",
        "answers": [
            [
                "Miller, Warren E. Warren E. Miller",
                "Howard"
            ],
            [
                "Bates, Gail H. Gail H. Bates",
                "Howard"
            ],
            [
                "Pendergrass, Shane E. Shane Pendergrass",
                "Howard"
            ],
            [
                "DeBoy, Steven J. Sr. Steven J. DeBoy, Sr.",
                "Baltimore County"
            ],
            [
                "Bobo, Elizabeth Elizabeth Bobo",
                "Baltimore County"
            ],
            [
                "Turner, Frank S. Frank S. Turner",
                "Colony"
            ],
            [
                "Malone, James E. Jr. James E. Malone, Jr.",
                "Colony"
            ],
            [
                "Guzzone, Guy Guy Guzzone",
                "Mansfield"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (T1:`election.county`)-[]-(T2:`election.election`)\nRETURN T2.Delegate,T1.County_name",
        "question": "What are the delegate and name of the county they belong to, for each county?",
        "answers": [
            [
                "Miller, Warren E. Warren E. Miller",
                "Howard"
            ],
            [
                "Bates, Gail H. Gail H. Bates",
                "Howard"
            ],
            [
                "Pendergrass, Shane E. Shane Pendergrass",
                "Howard"
            ],
            [
                "DeBoy, Steven J. Sr. Steven J. DeBoy, Sr.",
                "Baltimore County"
            ],
            [
                "Bobo, Elizabeth Elizabeth Bobo",
                "Baltimore County"
            ],
            [
                "Turner, Frank S. Frank S. Turner",
                "Colony"
            ],
            [
                "Malone, James E. Jr. James E. Malone, Jr.",
                "Colony"
            ],
            [
                "Guzzone, Guy Guy Guzzone",
                "Mansfield"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (T1:`election.county`)-[]-(T2:`election.election`)\nWHERE T1.Population < 100000\nRETURN T2.Delegate",
        "question": "Which delegates are from counties with population smaller than 100000?",
        "answers": [
            [
                "Miller, Warren E. Warren E. Miller"
            ],
            [
                "Bates, Gail H. Gail H. Bates"
            ],
            [
                "Pendergrass, Shane E. Shane Pendergrass"
            ],
            [
                "DeBoy, Steven J. Sr. Steven J. DeBoy, Sr."
            ],
            [
                "Bobo, Elizabeth Elizabeth Bobo"
            ],
            [
                "Turner, Frank S. Frank S. Turner"
            ],
            [
                "Malone, James E. Jr. James E. Malone, Jr."
            ],
            [
                "Guzzone, Guy Guy Guzzone"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (T1:`election.county`)-[]-(T2:`election.election`)\nWHERE T1.Population < 100000\nRETURN T2.Delegate",
        "question": "Find the delegates who are from counties with population below 100000.",
        "answers": [
            [
                "Miller, Warren E. Warren E. Miller"
            ],
            [
                "Bates, Gail H. Gail H. Bates"
            ],
            [
                "Pendergrass, Shane E. Shane Pendergrass"
            ],
            [
                "DeBoy, Steven J. Sr. Steven J. DeBoy, Sr."
            ],
            [
                "Bobo, Elizabeth Elizabeth Bobo"
            ],
            [
                "Turner, Frank S. Frank S. Turner"
            ],
            [
                "Malone, James E. Jr. James E. Malone, Jr."
            ],
            [
                "Guzzone, Guy Guy Guzzone"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (T1:`election.county`)-[]-(T2:`election.election`)\nWHERE T1.Population > 50000\nRETURN count(DISTINCT T2.Delegate)",
        "question": "How many distinct delegates are from counties with population larger than 50000?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (T1:`election.county`)-[]-(T2:`election.election`)\nWHERE T1.Population > 50000\nRETURN count(DISTINCT T2.Delegate)",
        "question": "Count the number of distinct delegates who are from counties with population above 50000.",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (T1:`election.county`)-[]-(T2:`election.election`)\nWHERE T2.Committee = 'Appropriations'\nRETURN T1.County_name",
        "question": "What are the names of the county that the delegates on \"Appropriations\" committee belong to?",
        "answers": [
            [
                "Howard"
            ],
            [
                "Baltimore County"
            ],
            [
                "Mansfield"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (T1:`election.county`)-[]-(T2:`election.election`)\nWHERE T2.Committee = 'Appropriations'\nRETURN T1.County_name",
        "question": "Which county do the delegates on \"Appropriations\" committee belong to? Give me the county names.",
        "answers": [
            [
                "Howard"
            ],
            [
                "Baltimore County"
            ],
            [
                "Mansfield"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (T1:`election.election`)-[]-(T2:`election.party`)\nRETURN T1.Delegate,T2.Party",
        "question": "Show the delegates and the names of the party they belong to.",
        "answers": [
            [
                "Bates, Gail H. Gail H. Bates",
                "Democratic"
            ],
            [
                "Guzzone, Guy Guy Guzzone",
                "Democratic"
            ],
            [
                "Miller, Warren E. Warren E. Miller",
                "Democratic"
            ],
            [
                "Malone, James E. Jr. James E. Malone, Jr.",
                "Liberal"
            ],
            [
                "DeBoy, Steven J. Sr. Steven J. DeBoy, Sr.",
                "Liberal"
            ],
            [
                "Bobo, Elizabeth Elizabeth Bobo",
                "Democratic"
            ],
            [
                "Pendergrass, Shane E. Shane Pendergrass",
                "Independence"
            ],
            [
                "Turner, Frank S. Frank S. Turner",
                "Working Families"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (T1:`election.election`)-[]-(T2:`election.party`)\nRETURN T1.Delegate,T2.Party",
        "question": "For each delegate, find the names of the party they are part of.",
        "answers": [
            [
                "Bates, Gail H. Gail H. Bates",
                "Democratic"
            ],
            [
                "Guzzone, Guy Guy Guzzone",
                "Democratic"
            ],
            [
                "Miller, Warren E. Warren E. Miller",
                "Democratic"
            ],
            [
                "Malone, James E. Jr. James E. Malone, Jr.",
                "Liberal"
            ],
            [
                "DeBoy, Steven J. Sr. Steven J. DeBoy, Sr.",
                "Liberal"
            ],
            [
                "Bobo, Elizabeth Elizabeth Bobo",
                "Democratic"
            ],
            [
                "Pendergrass, Shane E. Shane Pendergrass",
                "Independence"
            ],
            [
                "Turner, Frank S. Frank S. Turner",
                "Working Families"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (T1:`election.election`)-[]-(T2:`election.party`)\nWHERE T1.District = 1\nRETURN T2.Governor",
        "question": "Who were the governors of the parties associated with delegates from district 1?",
        "answers": [
            [
                "Peter Vallone"
            ],
            [
                "Peter Vallone"
            ],
            [
                "Tom Golisano"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (T1:`election.election`)-[]-(T2:`election.party`)\nWHERE T1.District = 1\nRETURN T2.Governor",
        "question": "Find the parties associated with the delegates from district 1. Who served as governors of the parties?",
        "answers": [
            [
                "Peter Vallone"
            ],
            [
                "Peter Vallone"
            ],
            [
                "Tom Golisano"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (T1:`election.election`)-[]-(T2:`election.party`)\nWHERE T1.District = 1 OR T1.District = 2\nRETURN T2.Comptroller",
        "question": "Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?",
        "answers": [
            [
                "Carl McCall"
            ],
            [
                "Carl McCall"
            ],
            [
                "Carl McCall"
            ],
            [
                "Alan Hevesi"
            ],
            [
                "John Faso"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (T1:`election.election`)-[]-(T2:`election.party`)\nWHERE T1.District = 1 OR T1.District = 2\nRETURN T2.Comptroller",
        "question": "Find the parties associated with the delegates from district 1 or 2. Who served as comptrollers of the parties?",
        "answers": [
            [
                "Carl McCall"
            ],
            [
                "Carl McCall"
            ],
            [
                "Carl McCall"
            ],
            [
                "Alan Hevesi"
            ],
            [
                "John Faso"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (T1:`election.election`)-[]-(T2:`election.party`)\nWHERE T2.Party = 'Democratic'\nRETURN T1.Committee",
        "question": "Return all the committees that have delegates from Democratic party.",
        "answers": [
            [
                "Appropriations"
            ],
            [
                "Appropriations"
            ],
            [
                "Economic Matters"
            ],
            [
                "Environmental Matters"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (T1:`election.election`)-[]-(T2:`election.party`)\nWHERE T2.Party = 'Democratic'\nRETURN T1.Committee",
        "question": "Which committees have delegates from the Democratic party?",
        "answers": [
            [
                "Appropriations"
            ],
            [
                "Appropriations"
            ],
            [
                "Economic Matters"
            ],
            [
                "Environmental Matters"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (T1:`election.county`)-[]-(T2:`election.election`)\nRETURN T1.County_name,count(*)",
        "question": "Show the name of each county along with the corresponding number of delegates from that county.",
        "answers": [
            [
                "Howard",
                3
            ],
            [
                "Baltimore County",
                2
            ],
            [
                "Colony",
                2
            ],
            [
                "Mansfield",
                1
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (T1:`election.county`)-[]-(T2:`election.election`)\nRETURN T1.County_name,count(*)",
        "question": "For each county, find the name of the county and the number of delegates from that county.",
        "answers": [
            [
                "Howard",
                3
            ],
            [
                "Baltimore County",
                2
            ],
            [
                "Colony",
                2
            ],
            [
                "Mansfield",
                1
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (county:`election.county`)\nRETURN county.County_name\nORDER BY county.Population ASC",
        "question": "Return the names of all counties sorted by population in ascending order.",
        "answers": [
            [
                "Manning"
            ],
            [
                "Howard"
            ],
            [
                "Colony"
            ],
            [
                "Mansfield"
            ],
            [
                "Baltimore County"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (county:`election.county`)\nRETURN county.County_name\nORDER BY county.Population ASC",
        "question": "Sort the names of all counties in ascending order of population.",
        "answers": [
            [
                "Manning"
            ],
            [
                "Howard"
            ],
            [
                "Colony"
            ],
            [
                "Mansfield"
            ],
            [
                "Baltimore County"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (county:`election.county`)\nRETURN county.County_name\nORDER BY county.County_name DESC",
        "question": "Return the names of all counties sorted by county name in descending alphabetical order.",
        "answers": [
            [
                "Mansfield"
            ],
            [
                "Manning"
            ],
            [
                "Howard"
            ],
            [
                "Colony"
            ],
            [
                "Baltimore County"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (county:`election.county`)\nRETURN county.County_name\nORDER BY county.County_name DESC",
        "question": "Sort the names of all counties in descending alphabetical order.",
        "answers": [
            [
                "Mansfield"
            ],
            [
                "Manning"
            ],
            [
                "Howard"
            ],
            [
                "Colony"
            ],
            [
                "Baltimore County"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (county:`election.county`)\nRETURN county.County_name\nORDER BY county.Population DESC\nLIMIT 1",
        "question": "Show the name of the county with the biggest population.",
        "answers": [
            [
                "Baltimore County"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (county:`election.county`)\nRETURN county.County_name\nORDER BY county.Population DESC\nLIMIT 1",
        "question": "Which county has the largest population? Give me the name of the county.",
        "answers": [
            [
                "Baltimore County"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (county:`election.county`)\nRETURN county.County_name\nORDER BY county.Population ASC\nLIMIT 3",
        "question": "Show the 3 counties with the smallest population.",
        "answers": [
            [
                "Manning"
            ],
            [
                "Howard"
            ],
            [
                "Colony"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (county:`election.county`)\nRETURN county.County_name\nORDER BY county.Population ASC\nLIMIT 3",
        "question": "What are the 3 counties that have the smallest population? Give me the county names.",
        "answers": [
            [
                "Manning"
            ],
            [
                "Howard"
            ],
            [
                "Colony"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (T1:`election.county`)-[]-(T2:`election.election`)\nWITH count(*) AS count, T1.County_name AS County_name\nWHERE count  >= 2\nRETURN County_name",
        "question": "Show the names of counties that have at least two delegates.",
        "answers": [
            [
                "Howard"
            ],
            [
                "Baltimore County"
            ],
            [
                "Colony"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (T1:`election.county`)-[]-(T2:`election.election`)\nWITH count(*) AS count, T1.County_name AS County_name\nWHERE count  >= 2\nRETURN County_name",
        "question": "Which counties have two or more delegates? Give me the county names.",
        "answers": [
            [
                "Howard"
            ],
            [
                "Baltimore County"
            ],
            [
                "Colony"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (party:`election.party`)\nWITH count(*) AS count, party.Party AS Party\nWHERE count  >= 2\nRETURN Party",
        "question": "Show the name of the party that has at least two records.",
        "answers": [
            [
                "Democratic"
            ],
            [
                "Independence"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (party:`election.party`)\nWITH count(*) AS count, party.Party AS Party\nWHERE count  >= 2\nRETURN Party",
        "question": "Which party has two or more records?",
        "answers": [
            [
                "Democratic"
            ],
            [
                "Independence"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (T1:`election.election`)-[]-(T2:`election.party`)\nWITH count(T1.Party) AS cnt, T2\nRETURN T2.Party\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Show the name of the party that has the most delegates.",
        "answers": [
            [
                "Democratic"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (T1:`election.election`)-[]-(T2:`election.party`)\nWITH count(T1.Party) AS cnt, T2\nRETURN T2.Party\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Which party has the largest number of delegates?",
        "answers": [
            [
                "Democratic"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (party:`election.party`)\nWHERE NOT (party)-[]-(:`election.election`)    \nRETURN party.Party",
        "question": "What are the names of parties that do not have delegates in election?",
        "answers": [
            [
                "Democratic"
            ],
            [
                "Independence"
            ]
        ]
    },
    {
        "db_id": "election",
        "query": "MATCH (party:`election.party`)\nWHERE NOT (party)-[]-(:`election.election`)    \nRETURN party.Party",
        "question": "Which parties did not have any delegates in elections?",
        "answers": [
            [
                "Democratic"
            ],
            [
                "Independence"
            ]
        ]
    },
    {
        "db_id": "news_report",
        "query": "MATCH (journalist:`news_report.journalist`)\nRETURN count(*)",
        "question": "How many journalists are there?",
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "db_id": "news_report",
        "query": "MATCH (journalist:`news_report.journalist`)\nRETURN journalist.Name\nORDER BY journalist.Years_working ASC",
        "question": "List the names of journalists in ascending order of years working.",
        "answers": [
            [
                "Tom Briggs"
            ],
            [
                "Ray Ferris"
            ],
            [
                "Fred Keenor"
            ],
            [
                "George Gilchrist"
            ],
            [
                "Fred Chandler"
            ],
            [
                "John Meaney"
            ],
            [
                "Jack Meaney"
            ],
            [
                "Frank Mitcheson"
            ],
            [
                "Herbert Swindells"
            ],
            [
                "Tony Waddington"
            ],
            [
                "Jackie Waring"
            ]
        ]
    },
    {
        "db_id": "news_report",
        "query": "MATCH (journalist:`news_report.journalist`)\nRETURN journalist.Nationality,journalist.Age",
        "question": "What are the nationalities and ages of journalists?",
        "answers": [
            [
                "England",
                "37"
            ],
            [
                "Wales",
                "27"
            ],
            [
                "England",
                "28"
            ],
            [
                "England",
                "43"
            ],
            [
                "England",
                "34"
            ],
            [
                "Northern Ireland",
                "29"
            ],
            [
                "England",
                "28"
            ],
            [
                "England",
                "43"
            ],
            [
                "England",
                "37"
            ],
            [
                "England",
                "33"
            ],
            [
                "England",
                "25"
            ]
        ]
    },
    {
        "db_id": "news_report",
        "query": "MATCH (journalist:`news_report.journalist`)\nWHERE journalist.Nationality = 'England' OR journalist.Nationality = 'Wales'\nRETURN journalist.Name",
        "question": "Show the names of journalists from \"England\" or \"Wales\".",
        "answers": [
            [
                "Herbert Swindells"
            ],
            [
                "Fred Keenor"
            ],
            [
                "George Gilchrist"
            ],
            [
                "Jackie Waring"
            ],
            [
                "Fred Chandler"
            ],
            [
                "John Meaney"
            ],
            [
                "Tony Waddington"
            ],
            [
                "Jack Meaney"
            ],
            [
                "Frank Mitcheson"
            ],
            [
                "Tom Briggs"
            ]
        ]
    },
    {
        "db_id": "news_report",
        "query": "MATCH (journalist:`news_report.journalist`)\nRETURN journalist.Nationality\nORDER BY journalist.Years_working DESC\nLIMIT 1",
        "question": "What is the nationality of the journalist with the largest number of years working?",
        "answers": [
            [
                "England"
            ]
        ]
    },
    {
        "db_id": "news_report",
        "query": "MATCH (journalist:`news_report.journalist`)\nRETURN journalist.Nationality,count(*)",
        "question": "Show the different nationalities and the number of journalists of each nationality.",
        "answers": [
            [
                "England",
                9
            ],
            [
                "Wales",
                1
            ],
            [
                "Northern Ireland",
                1
            ]
        ]
    },
    {
        "db_id": "news_report",
        "query": "MATCH (event:`news_report.event`)\nRETURN event.Date,event.Name,event.Venue\nORDER BY event.Event_Attendance DESC",
        "question": "Show the dates, places, and names of events in descending order of the attendance.",
        "answers": [
            [
                "13 October 2008",
                "Olympia Games Openning",
                "Marathon"
            ],
            [
                "20 June 2018",
                "Global Awarding",
                "Platense"
            ],
            [
                "7 October 2010",
                "Public Debating",
                "Motagua"
            ],
            [
                "11 October 2007",
                "Government Hearing",
                "Victoria"
            ],
            [
                "9 April 2014",
                "Special Exhibition",
                "Hispano"
            ]
        ]
    },
    {
        "db_id": "news_report",
        "query": "MATCH (T2:`news_report.event`)-[T1:`news_report.news_report`]-(T3:`news_report.journalist`)\nRETURN T3.Name,T2.Date",
        "question": "Show the names of journalists and the dates of the events they reported.",
        "answers": [
            [
                "Ray Ferris",
                "13 October 2008"
            ],
            [
                "Jackie Waring",
                "13 October 2008"
            ],
            [
                "Jackie Waring",
                "11 October 2007"
            ],
            [
                "Herbert Swindells",
                "7 October 2010"
            ],
            [
                "Tony Waddington",
                "20 June 2018"
            ],
            [
                "Tom Briggs",
                "9 April 2014"
            ],
            [
                "John Meaney",
                "9 April 2014"
            ]
        ]
    },
    {
        "db_id": "news_report",
        "query": "MATCH (T2:`news_report.event`)-[T1:`news_report.news_report`]-(T3:`news_report.journalist`)\nRETURN T3.Name,T2.Name\nORDER BY T2.Event_Attendance ASC",
        "question": "Show the names of journalists and the names of the events they reported in ascending order",
        "answers": [
            [
                "Tom Briggs",
                "Special Exhibition"
            ],
            [
                "John Meaney",
                "Special Exhibition"
            ],
            [
                "Jackie Waring",
                "Government Hearing"
            ],
            [
                "Herbert Swindells",
                "Public Debating"
            ],
            [
                "Tony Waddington",
                "Global Awarding"
            ],
            [
                "Ray Ferris",
                "Olympia Games Openning"
            ],
            [
                "Jackie Waring",
                "Olympia Games Openning"
            ]
        ]
    },
    {
        "db_id": "news_report",
        "query": "MATCH (T2:`news_report.event`)-[T1:`news_report.news_report`]-(T3:`news_report.journalist`)\nRETURN T3.Name,count(*)",
        "question": "Show the names of journalists and the number of events they reported.",
        "answers": [
            [
                "Ray Ferris",
                1
            ],
            [
                "Jackie Waring",
                2
            ],
            [
                "Herbert Swindells",
                1
            ],
            [
                "Tony Waddington",
                1
            ],
            [
                "Tom Briggs",
                1
            ],
            [
                "John Meaney",
                1
            ]
        ]
    },
    {
        "db_id": "news_report",
        "query": "MATCH (T2:`news_report.event`)-[T1:`news_report.news_report`]-(T3:`news_report.journalist`)\nWITH T3.Name AS Name, count(*) AS count\nWHERE count  > 1\nRETURN Name",
        "question": "Show the names of journalists that have reported more than one event.",
        "answers": [
            [
                "Jackie Waring"
            ]
        ]
    },
    {
        "db_id": "news_report",
        "query": "MATCH (event:`news_report.event`)\nRETURN avg(event.Event_Attendance),max(event.Event_Attendance)",
        "question": "what are the average and maximum attendances of all events?",
        "answers": [
            [
                2255.0,
                6650
            ]
        ]
    },
    {
        "db_id": "news_report",
        "query": "MATCH (event:`news_report.event`)\nRETURN event.Venue,event.Name\nORDER BY event.Event_Attendance DESC\nLIMIT 2",
        "question": "List the event venues and names that have the top 2 most number of people attended.",
        "answers": [
            [
                "Marathon",
                "Olympia Games Openning"
            ],
            [
                "Platense",
                "Global Awarding"
            ]
        ]
    },
    {
        "db_id": "restaurant_1",
        "query": "MATCH (restaurant:`restaurant_1.Restaurant`)\nRETURN restaurant.ResName",
        "question": "Show me all the restaurants.",
        "answers": [
            [
                "Subway"
            ],
            [
                "Honeygrow"
            ]
        ]
    },
    {
        "db_id": "restaurant_1",
        "query": "MATCH (restaurant_type:`restaurant_1.Restaurant_Type`)\nRETURN restaurant_type.ResTypeName",
        "question": "List all restaurant types.",
        "answers": [
            [
                "Sandwich"
            ],
            [
                "Stir-fry"
            ]
        ]
    },
    {
        "db_id": "restaurant_1",
        "query": "MATCH (restaurant:`restaurant_1.Restaurant`)\nRETURN restaurant.ResName,restaurant.Rating\nORDER BY restaurant.Rating DESC\nLIMIT 1",
        "question": "Which restaurants have highest rating? List the restaurant name and its rating.",
        "answers": [
            [
                "Honeygrow",
                4
            ]
        ]
    },
    {
        "db_id": "restaurant_1",
        "query": "MATCH (student:`restaurant_1.Student`)\nWHERE student.Major = 600\nRETURN student.Fname,student.LName",
        "question": "List all students' first names and last names who majored in 600.",
        "answers": [
            [
                "Linda",
                "Smith"
            ],
            [
                "Tracy",
                "Kim"
            ],
            [
                "Shiela",
                "Jones"
            ],
            [
                "Dinesh",
                "Kumar"
            ],
            [
                "Paul",
                "Gompers"
            ],
            [
                "Andy",
                "Schultz"
            ],
            [
                "Lisa",
                "Apap"
            ],
            [
                "Jandy",
                "Nelson"
            ],
            [
                "Eric",
                "Tai"
            ],
            [
                "Derek",
                "Lee"
            ],
            [
                "David",
                "Adams"
            ],
            [
                "Steven",
                "Davis"
            ],
            [
                "Charles",
                "Norris"
            ],
            [
                "Susan",
                "Lee"
            ],
            [
                "Mark",
                "Schwartz"
            ],
            [
                "Bruce",
                "Wilson"
            ],
            [
                "Michael",
                "Leighton"
            ],
            [
                "Arthur",
                "Pang"
            ]
        ]
    },
    {
        "db_id": "restaurant_1",
        "query": "MATCH (student:`restaurant_1.Student`)\nWHERE student.Advisor = 1121\nRETURN count(*)",
        "question": "Advisor 1121 has how many students?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "restaurant_1",
        "query": "MATCH (student:`restaurant_1.Student`)\nWHERE student.Age > 18 AND student.Major = 600\nRETURN student.Fname,student.LName",
        "question": "Which student's age is older than 18 and is majoring in 600? List each student's first and last name.",
        "answers": [
            [
                "Tracy",
                "Kim"
            ],
            [
                "Shiela",
                "Jones"
            ],
            [
                "Dinesh",
                "Kumar"
            ],
            [
                "Paul",
                "Gompers"
            ],
            [
                "Jandy",
                "Nelson"
            ],
            [
                "Eric",
                "Tai"
            ],
            [
                "David",
                "Adams"
            ],
            [
                "Steven",
                "Davis"
            ],
            [
                "Bruce",
                "Wilson"
            ],
            [
                "Michael",
                "Leighton"
            ]
        ]
    },
    {
        "db_id": "restaurant_1",
        "query": "MATCH (student:`restaurant_1.Student`)\nWHERE student.Age > 18 AND student.Major <> 600 AND student.Sex = 'F'\nRETURN student.Fname,student.LName",
        "question": "List all female students age is older than 18 who is not majoring in 600. List students' first name and last name.",
        "answers": [
            [
                "Lisa",
                "Cheng"
            ],
            [
                "Sarah",
                "Smith"
            ],
            [
                "Sarah",
                "Schmidt"
            ]
        ]
    },
    {
        "db_id": "customer_deliveries",
        "query": "MATCH (actual_orders:`customer_deliveries.Actual_Orders`)\nWHERE actual_orders.order_status_code = 'Success'\nRETURN actual_orders.actual_order_id",
        "question": "Find the ids of orders whose status is 'Success'.",
        "answers": [
            [
                1
            ],
            [
                6
            ],
            [
                7
            ],
            [
                9
            ],
            [
                10
            ]
        ]
    },
    {
        "db_id": "customer_deliveries",
        "query": "MATCH (customers:`customer_deliveries.Customers`)\nRETURN count(*)",
        "question": "Find the number of customers in total.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "customer_deliveries",
        "query": "MATCH (customers:`customer_deliveries.Customers`)\nRETURN count(DISTINCT customers.payment_method)",
        "question": "How many different payment methods are there?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "customer_deliveries",
        "query": "MATCH (trucks:`customer_deliveries.Trucks`)\nRETURN trucks.truck_details\nORDER BY trucks.truck_licence_number",
        "question": "Show the details of all trucks in the order of their license number.",
        "answers": [
            [
                "Laverna"
            ],
            [
                "Kaya"
            ],
            [
                "Deon"
            ],
            [
                "Ricky"
            ],
            [
                "Randy"
            ],
            [
                "Holly"
            ],
            [
                "Rosamond"
            ],
            [
                "Frida"
            ],
            [
                "Queen"
            ],
            [
                "Rebeka"
            ],
            [
                "Luisa"
            ],
            [
                "Bud"
            ],
            [
                "Joanny"
            ],
            [
                "Efren"
            ],
            [
                "Stacy"
            ]
        ]
    },
    {
        "db_id": "customer_deliveries",
        "query": "MATCH (products:`customer_deliveries.Products`)\nRETURN products.product_name\nORDER BY products.product_price DESC\nLIMIT 1",
        "question": "Find the name of the most expensive product.",
        "answers": [
            [
                "books"
            ]
        ]
    },
    {
        "db_id": "customer_deliveries",
        "query": "MATCH (customers:`customer_deliveries.Customers`)\nWHERE customers.payment_method = 'Visa'\nRETURN customers.customer_email,customers.customer_name",
        "question": "List the names and emails of customers who payed by Visa card.",
        "answers": [
            [
                "shaniya45@example.net",
                "Ron Emard"
            ],
            [
                "dedric17@example.org",
                "Jaden Lang"
            ],
            [
                "elmira.langworth@example.org",
                "Geovanni Grady"
            ],
            [
                "reichel.winnifred@example.org",
                "Dr. Karine Farrell"
            ],
            [
                "leann.hamill@example.org",
                "Lila Howe"
            ],
            [
                "danika49@example.com",
                "Amalia Hudson DDS"
            ],
            [
                "adriana83@example.org",
                "Annabell Walsh"
            ],
            [
                "rollin95@example.net",
                "Aracely Borer V"
            ]
        ]
    },
    {
        "db_id": "customer_deliveries",
        "query": "MATCH (t1:`customer_deliveries.Customers`)-[t2:`customer_deliveries.Customer_Addresses`]-(t3:`customer_deliveries.Addresses`)\nWHERE t3.state_province_county = 'California'\nRETURN t1.customer_name,t1.customer_phone",
        "question": "Find the names and phone numbers of customers living in California state.",
        "answers": [
            [
                "Annabell Walsh",
                "(881)096-1281x6448"
            ],
            [
                "Verda Streich",
                "06730471330"
            ]
        ]
    },
    {
        "db_id": "customer_deliveries",
        "query": "MATCH (customers:`customer_deliveries.Customers`)\nRETURN customers.customer_name,customers.customer_phone,customers.customer_email\nORDER BY customers.date_became_customer",
        "question": "List the names, phone numbers, and emails of all customers sorted by their dates of becoming customers.",
        "answers": [
            [
                "Verda Streich",
                "06730471330",
                "xgraham@example.org"
            ],
            [
                "Jaden Lang",
                "361.151.3489x7272",
                "dedric17@example.org"
            ],
            [
                "Dr. Karine Farrell",
                "+49(2)0677806107",
                "reichel.winnifred@example.org"
            ],
            [
                "Ron Emard",
                "1-382-503-5179x53639",
                "shaniya45@example.net"
            ],
            [
                "Gabe Schroeder",
                "1-728-537-4293x0885",
                "alexandra91@example.net"
            ],
            [
                "Candace Schneider",
                "940.575.3682x7959",
                "tkassulke@example.com"
            ],
            [
                "Keenan Kuhic",
                "686-517-9923x348",
                "dallin76@example.org"
            ],
            [
                "Emmanuel Reilly",
                "129.959.6420",
                "gleichner.ethelyn@example.net"
            ],
            [
                "Lila Howe",
                "1-492-284-1097",
                "leann.hamill@example.org"
            ],
            [
                "Amalia Hudson DDS",
                "003-991-1506x483",
                "danika49@example.com"
            ],
            [
                "Rusty Morar",
                "1-123-197-9677x7194",
                "njenkins@example.org"
            ],
            [
                "Aracely Borer V",
                "531-617-3230",
                "rollin95@example.net"
            ],
            [
                "Patience Yundt",
                "969-208-8932x715",
                "kira82@example.com"
            ],
            [
                "Geovanni Grady",
                "1-005-644-2495",
                "elmira.langworth@example.org"
            ],
            [
                "Annabell Walsh",
                "(881)096-1281x6448",
                "adriana83@example.org"
            ]
        ]
    },
    {
        "db_id": "customer_deliveries",
        "query": "MATCH (customers:`customer_deliveries.Customers`)\nRETURN customers.customer_name\nORDER BY customers.date_became_customer\nLIMIT 5",
        "question": "Find the name of the first 5 customers.",
        "answers": [
            [
                "Verda Streich"
            ],
            [
                "Jaden Lang"
            ],
            [
                "Dr. Karine Farrell"
            ],
            [
                "Ron Emard"
            ],
            [
                "Gabe Schroeder"
            ]
        ]
    },
    {
        "db_id": "customer_deliveries",
        "query": "MATCH (customers:`customer_deliveries.Customers`)\nRETURN customers.payment_method\nORDER BY customers.payment_method DESC\nLIMIT 1",
        "question": "Find the payment method that is used most frequently.",
        "answers": [
            [
                "Visa"
            ]
        ]
    },
    {
        "db_id": "customer_deliveries",
        "query": "MATCH (delivery_routes:`customer_deliveries.Delivery_Routes`)\nRETURN delivery_routes.route_name\nORDER BY delivery_routes.route_name",
        "question": "List the names of all routes in alphabetic order.",
        "answers": [
            [
                "Abshire Ltd"
            ],
            [
                "Adams, Macejkovic and Carroll"
            ],
            [
                "Brekke, Powlowski and Fritsch"
            ],
            [
                "Gerhold Inc"
            ],
            [
                "Gorczany Group"
            ],
            [
                "Grady, King and Price"
            ],
            [
                "Hegmann-Waters"
            ],
            [
                "Heidenreich Group"
            ],
            [
                "Hermiston, Feeney and Daugherty"
            ],
            [
                "Huel, Armstrong and Senger"
            ],
            [
                "Nader, Leuschke and Huels"
            ],
            [
                "Renner-Kovacek"
            ],
            [
                "Schowalter Group"
            ],
            [
                "Streich, Spencer and Brakus"
            ],
            [
                "Torphy Ltd"
            ]
        ]
    },
    {
        "db_id": "customer_deliveries",
        "query": "MATCH (t2:`customer_deliveries.Addresses`)-[t1:`customer_deliveries.Customer_Addresses`]-()\nRETURN t2.state_province_county,count(*)",
        "question": "List the state names and the number of customers living in each state.",
        "answers": [
            [
                "Nebraska",
                1
            ],
            [
                "Colorado",
                2
            ],
            [
                "Idaho",
                1
            ],
            [
                "California",
                2
            ],
            [
                "Tennessee",
                4
            ],
            [
                "Maine",
                1
            ],
            [
                "Wyoming",
                1
            ],
            [
                "Illinois",
                1
            ],
            [
                "Michigan",
                2
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (authors:`icfp_1.Authors`)\nRETURN count(*)",
        "question": "How many authors are there?",
        "answers": [
            [
                13
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (authors:`icfp_1.Authors`)\nRETURN count(*)",
        "question": "Count the number of authors.",
        "answers": [
            [
                13
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (inst:`icfp_1.Inst`)\nRETURN count(*)",
        "question": "How many institutions are there?",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (inst:`icfp_1.Inst`)\nRETURN count(*)",
        "question": "Count the number of institutions.",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (papers:`icfp_1.Papers`)\nRETURN count(*)",
        "question": "How many papers are published in total?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (papers:`icfp_1.Papers`)\nRETURN count(*)",
        "question": "Count the number of total papers.",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Authors`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Papers`)\nWHERE t1.fname = 'Jeremy' AND t1.lname = 'Gibbons'\nRETURN t3.title",
        "question": "What are the titles of papers published by \"Jeremy Gibbons\"?",
        "answers": [
            [
                "Just do it: Simple Monadic Equational Reasoning"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Authors`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Papers`)\nWHERE t1.fname = 'Jeremy' AND t1.lname = 'Gibbons'\nRETURN t3.title",
        "question": "Find the titles of all the papers written by \"Jeremy Gibbons\"",
        "answers": [
            [
                "Just do it: Simple Monadic Equational Reasoning"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Authors`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Papers`)\nWHERE t1.fname = 'Aaron' AND t1.lname = 'Turon'\nRETURN t3.title",
        "question": "Find all the papers published by \"Aaron Turon\".",
        "answers": [
            [
                "Functional Pearl: Modular Rollback through Control Logging"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Authors`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Papers`)\nWHERE t1.fname = 'Aaron' AND t1.lname = 'Turon'\nRETURN t3.title",
        "question": "Find the titles of all the papers written by \"Aaron Turon\".",
        "answers": [
            [
                "Functional Pearl: Modular Rollback through Control Logging"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Authors`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Papers`)\nWHERE t1.fname = 'Atsushi' AND t1.lname = 'Ohori'\nRETURN count(*)",
        "question": "How many papers have \"Atsushi Ohori\" published?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Authors`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Papers`)\nWHERE t1.fname = 'Atsushi' AND t1.lname = 'Ohori'\nRETURN count(*)",
        "question": "How many papers are \"Atsushi Ohori\" the author of?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Authors`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Inst`)\nWHERE t1.fname = 'Matthias' AND t1.lname = 'Blume'\nRETURN DISTINCT t3.name",
        "question": "What is the name of the institution that \"Matthias Blume\" belongs to?",
        "answers": [
            [
                "Google"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Authors`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Inst`)\nWHERE t1.fname = 'Matthias' AND t1.lname = 'Blume'\nRETURN DISTINCT t3.name",
        "question": "Which institution is the author \"Matthias Blume\" belong to? Give me the name of the institution.",
        "answers": [
            [
                "Google"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Authors`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Inst`)\nWHERE t1.fname = 'Katsuhiro' AND t1.lname = 'Ueno'\nRETURN DISTINCT t3.name",
        "question": "Which institution does \"Katsuhiro Ueno\" belong to?",
        "answers": [
            [
                "Tohoku University"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Authors`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Inst`)\nWHERE t1.fname = 'Katsuhiro' AND t1.lname = 'Ueno'\nRETURN DISTINCT t3.name",
        "question": "What is the name of the institution the author \"Katsuhiro Ueno\" belongs to?",
        "answers": [
            [
                "Tohoku University"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Authors`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Inst`)\nWHERE t3.name = 'University of Oxford'\nRETURN DISTINCT t1.fname,t1.lname",
        "question": "Who belong to the institution \"University of Oxford\"? Show the first names and last names.",
        "answers": [
            [
                "Jeremy",
                "Gibbons"
            ],
            [
                "Ralf",
                "Hinze"
            ],
            [
                "Daniel W. H.",
                "James"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Authors`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Inst`)\nWHERE t3.name = 'University of Oxford'\nRETURN DISTINCT t1.fname,t1.lname",
        "question": "Find the first names and last names of the authors whose institution affiliation is \"University of Oxford\".",
        "answers": [
            [
                "Jeremy",
                "Gibbons"
            ],
            [
                "Ralf",
                "Hinze"
            ],
            [
                "Daniel W. H.",
                "James"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Authors`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Inst`)\nWHERE t3.name = 'Google'\nRETURN DISTINCT t1.fname,t1.lname",
        "question": "Which authors belong to the institution \"Google\"? Show the first names and last names.",
        "answers": [
            [
                "Matthias",
                "Blume"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Authors`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Inst`)\nWHERE t3.name = 'Google'\nRETURN DISTINCT t1.fname,t1.lname",
        "question": "Find the first names and last names of the authors whose institution affiliation is \"Google\".",
        "answers": [
            [
                "Matthias",
                "Blume"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Authors`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Papers`)\nWHERE t3.title = 'Binders Unbound'\nRETURN t1.lname",
        "question": "What are the last names of the author of the paper titled \"Binders Unbound\"?",
        "answers": [
            [
                "Yorgey"
            ],
            [
                "Weirich"
            ],
            [
                "Sheard"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Authors`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Papers`)\nWHERE t3.title = 'Binders Unbound'\nRETURN t1.lname",
        "question": "Who is the author of the paper titled \"Binders Unbound\"? Give me the last name.",
        "answers": [
            [
                "Yorgey"
            ],
            [
                "Weirich"
            ],
            [
                "Sheard"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Authors`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Papers`)\nWHERE t3.title = 'Nameless ,  Painless'\nRETURN t1.fname,t1.lname",
        "question": "Find the first and last name of the author(s) who wrote the paper \"Nameless, Painless\".",
        "answers": []
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Authors`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Papers`)\nWHERE t3.title = 'Nameless ,  Painless'\nRETURN t1.fname,t1.lname",
        "question": "What are the first and last name of the author who published the paper titled \"Nameless, Painless\"?",
        "answers": []
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Papers`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Inst`)\nWHERE t3.name = 'Indiana University'\nRETURN DISTINCT t1.title",
        "question": "What are the papers published under the institution \"Indiana University\"?",
        "answers": [
            [
                "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Papers`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Inst`)\nWHERE t3.name = 'Indiana University'\nRETURN DISTINCT t1.title",
        "question": "List the titles of the papers whose authors are from the institution \"Indiana University\".",
        "answers": [
            [
                "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Papers`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Inst`)\nWHERE t3.name = 'Google'\nRETURN DISTINCT t1.title",
        "question": "Find all the papers published by the institution \"Google\".",
        "answers": [
            [
                "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Papers`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Inst`)\nWHERE t3.name = 'Google'\nRETURN DISTINCT t1.title",
        "question": "Which papers were written by authors from the institution \"Google\"?",
        "answers": [
            [
                "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Papers`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Inst`)\nWHERE t3.name = 'Tokohu University'\nRETURN count(DISTINCT t1.title)",
        "question": "How many papers are published by the institution \"Tokohu University\"?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Papers`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Inst`)\nWHERE t3.name = 'Tokohu University'\nRETURN count(DISTINCT t1.title)",
        "question": "Find the number of papers published by authors from the institution \"Tokohu University\".",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Papers`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Inst`)\nWHERE t3.name = 'University of Pennsylvania'\nRETURN count(DISTINCT t1.title)",
        "question": "Find the number of papers published by the institution \"University of Pennsylvania\".",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Papers`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Inst`)\nWHERE t3.name = 'University of Pennsylvania'\nRETURN count(DISTINCT t1.title)",
        "question": "How many papers are written by authors from the institution \"University of Pennsylvania\"?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Authors`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Papers`)\nWHERE t1.fname = 'Olin' AND t1.lname = 'Shivers'\nRETURN t3.title",
        "question": "Find the papers which have \"Olin Shivers\" as an author.",
        "answers": [
            [
                "Functional Pearl: Modular Rollback through Control Logging"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Authors`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Papers`)\nWHERE t1.fname = 'Olin' AND t1.lname = 'Shivers'\nRETURN t3.title",
        "question": "Which papers did the author \"Olin Shivers\" write? Give me the paper titles.",
        "answers": [
            [
                "Functional Pearl: Modular Rollback through Control Logging"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Authors`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Papers`)\nWHERE t1.fname = 'Stephanie' AND t1.lname = 'Weirich'\nRETURN t3.title",
        "question": "Which papers have \"Stephanie Weirich\" as an author?",
        "answers": [
            [
                "Binders Unbound"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Authors`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Papers`)\nWHERE t1.fname = 'Stephanie' AND t1.lname = 'Weirich'\nRETURN t3.title",
        "question": "Find the titles of the papers the author \"Stephanie Weirich\" wrote.",
        "answers": [
            [
                "Binders Unbound"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Inst`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Papers`)\nWITH t1, count(t1.name) AS cnt\nRETURN t1.name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Find the name of the organization that has published the largest number of papers.",
        "answers": [
            [
                "University of Oxford"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (t1:`icfp_1.Inst`)-[]-(t2:`icfp_1.Authorship`)-[]-(t3:`icfp_1.Papers`)\nWITH t1, count(t1.name) AS cnt\nRETURN t1.name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Which institution has the most papers? Find the name of the institution.",
        "answers": [
            [
                "University of Oxford"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (authors:`icfp_1.Authors`)\nWHERE authors.lname = 'Ueno'\nRETURN authors.fname",
        "question": "What is the first name of the author with last name \"Ueno\"?",
        "answers": [
            [
                "Katsuhiro"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (authors:`icfp_1.Authors`)\nWHERE authors.lname = 'Ueno'\nRETURN authors.fname",
        "question": "Which authors have last name \"Ueno\"? List their first names.",
        "answers": [
            [
                "Katsuhiro"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (authors:`icfp_1.Authors`)\nWHERE authors.fname = 'Amal'\nRETURN authors.lname",
        "question": "Find the last name of the author with first name \"Amal\".",
        "answers": [
            [
                "Ahmed"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (authors:`icfp_1.Authors`)\nWHERE authors.fname = 'Amal'\nRETURN authors.lname",
        "question": "Which authors have first name \"Amal\"? List their last names.",
        "answers": [
            [
                "Ahmed"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (authors:`icfp_1.Authors`)\nRETURN authors.fname\nORDER BY authors.fname",
        "question": "Find the first names of all the authors ordered in alphabetical order.",
        "answers": [
            [
                "Aaron"
            ],
            [
                "Amal"
            ],
            [
                "Atsushi"
            ],
            [
                "Brent"
            ],
            [
                "Daniel W. H."
            ],
            [
                "Jeremy"
            ],
            [
                "Katsuhiro"
            ],
            [
                "Matthias"
            ],
            [
                "Nicolas"
            ],
            [
                "Olin"
            ],
            [
                "Ralf"
            ],
            [
                "Stephanie"
            ],
            [
                "Tim"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (authors:`icfp_1.Authors`)\nRETURN authors.fname\nORDER BY authors.fname",
        "question": "Sort the first names of all the authors in alphabetical order.",
        "answers": [
            [
                "Aaron"
            ],
            [
                "Amal"
            ],
            [
                "Atsushi"
            ],
            [
                "Brent"
            ],
            [
                "Daniel W. H."
            ],
            [
                "Jeremy"
            ],
            [
                "Katsuhiro"
            ],
            [
                "Matthias"
            ],
            [
                "Nicolas"
            ],
            [
                "Olin"
            ],
            [
                "Ralf"
            ],
            [
                "Stephanie"
            ],
            [
                "Tim"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (authors:`icfp_1.Authors`)\nRETURN authors.lname\nORDER BY authors.lname",
        "question": "Retrieve all the last names of authors in alphabetical order.",
        "answers": [
            [
                "Ahmed"
            ],
            [
                "Blume"
            ],
            [
                "Gibbons"
            ],
            [
                "Hinze"
            ],
            [
                "James"
            ],
            [
                "Ohori"
            ],
            [
                "Pouillard"
            ],
            [
                "Sheard"
            ],
            [
                "Shivers"
            ],
            [
                "Turon"
            ],
            [
                "Ueno"
            ],
            [
                "Weirich"
            ],
            [
                "Yorgey"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (authors:`icfp_1.Authors`)\nRETURN authors.lname\nORDER BY authors.lname",
        "question": "Give me a list of all the last names of authors sorted in alphabetical order",
        "answers": [
            [
                "Ahmed"
            ],
            [
                "Blume"
            ],
            [
                "Gibbons"
            ],
            [
                "Hinze"
            ],
            [
                "James"
            ],
            [
                "Ohori"
            ],
            [
                "Pouillard"
            ],
            [
                "Sheard"
            ],
            [
                "Shivers"
            ],
            [
                "Turon"
            ],
            [
                "Ueno"
            ],
            [
                "Weirich"
            ],
            [
                "Yorgey"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (authors:`icfp_1.Authors`)\nRETURN authors.fname,authors.lname\nORDER BY authors.lname",
        "question": "Retrieve all the first and last names of authors in the alphabetical order of last names.",
        "answers": [
            [
                "Amal",
                "Ahmed"
            ],
            [
                "Matthias",
                "Blume"
            ],
            [
                "Jeremy",
                "Gibbons"
            ],
            [
                "Ralf",
                "Hinze"
            ],
            [
                "Daniel W. H.",
                "James"
            ],
            [
                "Atsushi",
                "Ohori"
            ],
            [
                "Nicolas",
                "Pouillard"
            ],
            [
                "Tim",
                "Sheard"
            ],
            [
                "Olin",
                "Shivers"
            ],
            [
                "Aaron",
                "Turon"
            ],
            [
                "Katsuhiro",
                "Ueno"
            ],
            [
                "Stephanie",
                "Weirich"
            ],
            [
                "Brent",
                "Yorgey"
            ]
        ]
    },
    {
        "db_id": "icfp_1",
        "query": "MATCH (authors:`icfp_1.Authors`)\nRETURN authors.fname,authors.lname\nORDER BY authors.lname",
        "question": "Sort the list of all the first and last names of authors in alphabetical order of the last names.",
        "answers": [
            [
                "Amal",
                "Ahmed"
            ],
            [
                "Matthias",
                "Blume"
            ],
            [
                "Jeremy",
                "Gibbons"
            ],
            [
                "Ralf",
                "Hinze"
            ],
            [
                "Daniel W. H.",
                "James"
            ],
            [
                "Atsushi",
                "Ohori"
            ],
            [
                "Nicolas",
                "Pouillard"
            ],
            [
                "Tim",
                "Sheard"
            ],
            [
                "Olin",
                "Shivers"
            ],
            [
                "Aaron",
                "Turon"
            ],
            [
                "Katsuhiro",
                "Ueno"
            ],
            [
                "Stephanie",
                "Weirich"
            ],
            [
                "Brent",
                "Yorgey"
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (bank:`loan_1.bank`)\nRETURN count(*)",
        "question": "How many bank branches are there?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (bank:`loan_1.bank`)\nRETURN count(*)",
        "question": "Count the number of bank branches.",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (bank:`loan_1.bank`)\nWHERE bank.state = 'Utah'\nRETURN avg(bank.no_of_customers)",
        "question": "Find the average number of customers in all banks of Utah state.",
        "answers": [
            [
                123.0
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (bank:`loan_1.bank`)\nWHERE bank.state = 'Utah'\nRETURN avg(bank.no_of_customers)",
        "question": "What is the average number of customers across banks in the state of Utah?",
        "answers": [
            [
                123.0
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (bank:`loan_1.bank`)\nRETURN avg(bank.no_of_customers)",
        "question": "Find the average number of customers cross all banks.",
        "answers": [
            [
                286.5
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (bank:`loan_1.bank`)\nRETURN avg(bank.no_of_customers)",
        "question": "What is the average number of bank customers?",
        "answers": [
            [
                286.5
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (bank:`loan_1.bank`)\nWHERE bank.bname = 'morningside'\nRETURN bank.city,bank.state",
        "question": "Find the city and state of the bank branch named morningside.",
        "answers": [
            [
                "New York City",
                "New York"
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (bank:`loan_1.bank`)\nWHERE bank.bname = 'morningside'\nRETURN bank.city,bank.state",
        "question": "What city and state is the bank with the name morningside in?",
        "answers": [
            [
                "New York City",
                "New York"
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (bank:`loan_1.bank`)\nWHERE bank.state = 'New York'\nRETURN bank.bname",
        "question": "Find the branch names of banks in the New York state.",
        "answers": [
            [
                "morningside"
            ],
            [
                "broadway"
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (bank:`loan_1.bank`)\nWHERE bank.state = 'New York'\nRETURN bank.bname",
        "question": "What are the names of banks in the state of New York?",
        "answers": [
            [
                "morningside"
            ],
            [
                "broadway"
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (customer:`loan_1.customer`)\nRETURN customer.cust_name\nORDER BY customer.acc_bal",
        "question": "List the name of all customers sorted by their account balance in ascending order.",
        "answers": [
            [
                "Jack"
            ],
            [
                "Mary"
            ],
            [
                "Owen"
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (customer:`loan_1.customer`)\nRETURN customer.cust_name\nORDER BY customer.acc_bal",
        "question": "What are the names of all customers, ordered by account balance?",
        "answers": [
            [
                "Jack"
            ],
            [
                "Mary"
            ],
            [
                "Owen"
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (customer:`loan_1.customer`)\nWHERE customer.no_of_loans = 0\nRETURN customer.state,customer.acc_type,customer.credit_score",
        "question": "Find the state, account type, and credit score of the customer whose number of loan is 0.",
        "answers": [
            [
                "New York",
                "saving",
                210
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (customer:`loan_1.customer`)\nWHERE customer.no_of_loans = 0\nRETURN customer.state,customer.acc_type,customer.credit_score",
        "question": "What are the states, account types, and credit scores for customers who have 0 loans?",
        "answers": [
            [
                "New York",
                "saving",
                210
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (bank:`loan_1.bank`)\nRETURN count(DISTINCT bank.city)",
        "question": "Find the number of different cities which banks are located at.",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (bank:`loan_1.bank`)\nRETURN count(DISTINCT bank.city)",
        "question": "In how many different cities are banks located?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (bank:`loan_1.bank`)\nRETURN count(DISTINCT bank.state)",
        "question": "Find the number of different states which banks are located at.",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (bank:`loan_1.bank`)\nRETURN count(DISTINCT bank.state)",
        "question": "In how many different states are banks located?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (customer:`loan_1.customer`)\nRETURN count(DISTINCT customer.acc_type)",
        "question": "How many distinct types of accounts are there?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (customer:`loan_1.customer`)\nRETURN count(DISTINCT customer.acc_type)",
        "question": "Count the number of different account types.",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (customer:`loan_1.customer`)\nWHERE customer.cust_name =~'.*[A|a].*'\nRETURN customer.cust_name,customer.acc_bal",
        "question": "Find the name and account balance of the customer whose name includes the letter \u2018a\u2019.",
        "answers": [
            [
                "Mary",
                2000
            ],
            [
                "Jack",
                1000
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (customer:`loan_1.customer`)\nWHERE customer.cust_name =~'.*[A|a].*'\nRETURN customer.cust_name,customer.acc_bal",
        "question": "What are the names and account balances of customers with the letter a in their names?",
        "answers": [
            [
                "Mary",
                2000
            ],
            [
                "Jack",
                1000
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (customer:`loan_1.customer`)\nWITH avg(customer.credit_score) AS credit_score\nMATCH (customer:`loan_1.customer`)\nWHERE  customer.credit_score <  credit_score \nRETURN customer.cust_name",
        "question": "Find the name of customers whose credit score is below the average credit scores of all customers.",
        "answers": [
            [
                "Mary"
            ],
            [
                "Jack"
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (customer:`loan_1.customer`)\nWITH avg(customer.credit_score) AS credit_score\nMATCH (customer:`loan_1.customer`)\nWHERE  customer.credit_score <  credit_score \nRETURN customer.cust_name",
        "question": "What are the names of customers with credit score less than the average credit score across customers?",
        "answers": [
            [
                "Mary"
            ],
            [
                "Jack"
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (bank:`loan_1.bank`)\nRETURN bank.bname\nORDER BY bank.no_of_customers DESC\nLIMIT 1",
        "question": "Find the branch name of the bank that has the most number of customers.",
        "answers": [
            [
                "broadway"
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (bank:`loan_1.bank`)\nRETURN bank.bname\nORDER BY bank.no_of_customers DESC\nLIMIT 1",
        "question": "What is the name of the bank branch with the greatest number of customers?",
        "answers": [
            [
                "broadway"
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (customer:`loan_1.customer`)\nRETURN customer.cust_name\nORDER BY customer.credit_score\nLIMIT 1",
        "question": "Find the name of customer who has the lowest credit score.",
        "answers": [
            [
                "Jack"
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (customer:`loan_1.customer`)\nRETURN customer.cust_name\nORDER BY customer.credit_score\nLIMIT 1",
        "question": "What is the name of the customer with the worst credit score?",
        "answers": [
            [
                "Jack"
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (customer:`loan_1.customer`)\nRETURN customer.cust_name,customer.acc_type,customer.acc_bal\nORDER BY customer.credit_score DESC\nLIMIT 1",
        "question": "Find the name, account type, and account balance of the customer who has the highest credit score.",
        "answers": [
            [
                "Owen",
                "saving",
                800000
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (customer:`loan_1.customer`)\nRETURN customer.cust_name,customer.acc_type,customer.acc_bal\nORDER BY customer.credit_score DESC\nLIMIT 1",
        "question": "What is the name, account type, and account balance corresponding to the customer with the highest credit score?",
        "answers": [
            [
                "Owen",
                "saving",
                800000
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (customer:`loan_1.customer`)\nWHERE customer.credit_score < 50\nRETURN avg(customer.acc_bal),customer.acc_type",
        "question": "For each account type, find the average account balance of customers with credit score lower than 50.",
        "answers": [
            [
                2000.0,
                "saving"
            ],
            [
                1000.0,
                "checking"
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (customer:`loan_1.customer`)\nWHERE customer.credit_score < 50\nRETURN avg(customer.acc_bal),customer.acc_type",
        "question": "What is the average account balance of customers with credit score below 50 for the different account types?",
        "answers": [
            [
                2000.0,
                "saving"
            ],
            [
                1000.0,
                "checking"
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (T1:`loan_1.customer`)-[]-(T2:`loan_1.loan`)\nWITH count(*) AS count, T1.cust_name AS cust_name\nWHERE count  > 1\nRETURN cust_name",
        "question": "Find the name of customers who have more than one loan.",
        "answers": [
            [
                "Mary"
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (T1:`loan_1.customer`)-[]-(T2:`loan_1.loan`)\nWITH count(*) AS count, T1.cust_name AS cust_name\nWHERE count  > 1\nRETURN cust_name",
        "question": "What are the names of customers who have taken out more than one loan?",
        "answers": [
            [
                "Mary"
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (T1:`loan_1.bank`)-[]-(T2:`loan_1.loan`)\nRETURN DISTINCT T1.bname",
        "question": "Find the name of bank branches that provided some loans.",
        "answers": [
            [
                "morningside"
            ],
            [
                "downtown"
            ],
            [
                "broadway"
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (T1:`loan_1.bank`)-[]-(T2:`loan_1.loan`)\nRETURN DISTINCT T1.bname",
        "question": "What are the names of the different banks that have provided loans?",
        "answers": [
            [
                "morningside"
            ],
            [
                "downtown"
            ],
            [
                "broadway"
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (T1:`loan_1.customer`)-[]-(T2:`loan_1.loan`)\nRETURN DISTINCT T1.cust_name,T1.credit_score",
        "question": "Find the name and credit score of the customers who have some loans.",
        "answers": [
            [
                "Mary",
                30
            ],
            [
                "Owen",
                210
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (T1:`loan_1.customer`)-[]-(T2:`loan_1.loan`)\nRETURN DISTINCT T1.cust_name,T1.credit_score",
        "question": "What are the different names and credit scores of customers who have taken a loan?",
        "answers": [
            [
                "Mary",
                30
            ],
            [
                "Owen",
                210
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (T1:`loan_1.customer`)-[]-(T2:`loan_1.loan`)\nWHERE T2.amount > 3000\nRETURN T1.cust_name",
        "question": "Find the the name of the customers who have a loan with amount more than 3000.",
        "answers": [
            [
                "Owen"
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (T1:`loan_1.customer`)-[]-(T2:`loan_1.loan`)\nWHERE T2.amount > 3000\nRETURN T1.cust_name",
        "question": "What are the names of customers who have a loan of more than 3000 in amount?",
        "answers": [
            [
                "Owen"
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (T1:`loan_1.bank`)-[]-(T2:`loan_1.loan`)\nWHERE T2.loan_type = 'Business'\nRETURN T1.bname,T1.city",
        "question": "Find the city and name of bank branches that provide business loans.",
        "answers": [
            [
                "broadway",
                "New York City"
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (T1:`loan_1.bank`)-[]-(T2:`loan_1.loan`)\nWHERE T2.loan_type = 'Business'\nRETURN T1.bname,T1.city",
        "question": "What are the names and cities of bank branches that offer loans for business?",
        "answers": [
            [
                "broadway",
                "New York City"
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (T1:`loan_1.loan`)-[]-(T2:`loan_1.bank`)-[]-(T3:`loan_1.customer`)\nWHERE T3.credit_score < 100\nRETURN T2.bname",
        "question": "Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.",
        "answers": [
            [
                "downtown"
            ],
            [
                "morningside"
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (T1:`loan_1.loan`)-[]-(T2:`loan_1.bank`)-[]-(T3:`loan_1.customer`)\nWHERE T3.credit_score < 100\nRETURN T2.bname",
        "question": "What are the names of banks that have loaned money to customers with credit scores below 100?",
        "answers": [
            [
                "downtown"
            ],
            [
                "morningside"
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (customer:`loan_1.customer`)\nWHERE NOT (customer)-[]-(:`loan_1.loan`)    \nRETURN avg(customer.credit_score)",
        "question": "Find the average credit score of the customers who do not have any loan.",
        "answers": [
            [
                20.0
            ]
        ]
    },
    {
        "db_id": "loan_1",
        "query": "MATCH (customer:`loan_1.customer`)\nWHERE NOT (customer)-[]-(:`loan_1.loan`)    \nRETURN avg(customer.credit_score)",
        "question": "What is the average credit score for customers who have never taken a loan?",
        "answers": [
            [
                20.0
            ]
        ]
    },
    {
        "db_id": "behavior_monitoring",
        "query": "MATCH (addresses:`behavior_monitoring.Addresses`)\nWHERE addresses.zip_postcode = '197'\nRETURN count(*)",
        "question": "How many addresses have zip code 197?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "behavior_monitoring",
        "query": "MATCH (behavior_incident:`behavior_monitoring.Behavior_Incident`)\nRETURN count(DISTINCT behavior_incident.incident_type_code)",
        "question": "How many distinct incident type codes are there?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "behavior_monitoring",
        "query": "MATCH (detention:`behavior_monitoring.Detention`)\nRETURN DISTINCT detention.detention_type_code",
        "question": "Return all distinct detention type codes.",
        "answers": [
            [
                "AFTER"
            ],
            [
                "BREAK "
            ],
            [
                "LUNCH"
            ]
        ]
    },
    {
        "db_id": "behavior_monitoring",
        "query": "MATCH (detention:`behavior_monitoring.Detention`)\nRETURN detention.detention_summary",
        "question": "Return all detention summaries.",
        "answers": [
            [
                null
            ],
            [
                null
            ],
            [
                null
            ],
            [
                null
            ],
            [
                null
            ],
            [
                null
            ],
            [
                null
            ],
            [
                null
            ],
            [
                null
            ],
            [
                null
            ],
            [
                null
            ],
            [
                null
            ],
            [
                null
            ],
            [
                null
            ],
            [
                null
            ]
        ]
    },
    {
        "db_id": "behavior_monitoring",
        "query": "MATCH (students:`behavior_monitoring.Students`)\nRETURN students.cell_mobile_number,students.email_address",
        "question": "Return the cell phone number and email address for all students.",
        "answers": [
            [
                "235.899.9744",
                "derrick.jenkins@example.com"
            ],
            [
                "1-247-673-8446",
                "rohan.clarabelle@example.org"
            ],
            [
                "1-751-162-9676x115",
                "kkirlin@example.org"
            ],
            [
                "1-895-196-9979",
                "eolson@example.com"
            ],
            [
                "1-036-062-5465",
                "dicki.kathryne@example.org"
            ],
            [
                "(874)070-9495",
                "norwood.howell@example.org"
            ],
            [
                "763.072.5520x5907",
                "lisette.brekke@example.net"
            ],
            [
                "319.497.4575x2214",
                "jasmin.schuppe@example.com"
            ],
            [
                "(568)451-0917x3945",
                "dora.zboncak@example.org"
            ],
            [
                "08605192839",
                "frederique.mante@example.org"
            ],
            [
                "+60(5)3280072514",
                "qharvey@example.com"
            ],
            [
                "(921)011-7909x3518",
                "mitchel55@example.net"
            ],
            [
                "(062)892-7033",
                "gbeatty@example.com"
            ],
            [
                "(820)260-5721",
                "foster.zemlak@example.com"
            ],
            [
                "1-498-138-8088",
                "kertzmann.devon@example.net"
            ]
        ]
    },
    {
        "db_id": "behavior_monitoring",
        "query": "MATCH (students_in_detention:`behavior_monitoring.Students_in_Detention`)\nRETURN count(DISTINCT students_in_detention.student_id)",
        "question": "How many distinct students have been in detention?",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "behavior_monitoring",
        "query": "MATCH ()-[student_addresses:`behavior_monitoring.Student_Addresses`]-()\nRETURN max(student_addresses.monthly_rental),min(student_addresses.monthly_rental)",
        "question": "Find the maximum and minimum monthly rental for all student addresses.",
        "answers": [
            [
                1297.807,
                620.2801
            ]
        ]
    },
    {
        "db_id": "behavior_monitoring",
        "query": "MATCH (teachers:`behavior_monitoring.Teachers`)\nWHERE teachers.email_address =~'.*[M|m]an.*'\nRETURN teachers.first_name",
        "question": "Find the first names of teachers whose email address contains the word \"man\".",
        "answers": [
            [
                "Woodrow"
            ]
        ]
    },
    {
        "db_id": "behavior_monitoring",
        "query": "MATCH (addresses:`behavior_monitoring.Addresses`)\nRETURN addresses.city\nORDER BY addresses.city",
        "question": "List all cities of addresses in alphabetical order.",
        "answers": [
            [
                "Beierview"
            ],
            [
                "Caitlynstad"
            ],
            [
                "Corkeryborough"
            ],
            [
                "Edmundton"
            ],
            [
                "Elinoreport"
            ],
            [
                "Gleasonshire"
            ],
            [
                "Hegmannborough"
            ],
            [
                "Hintzport"
            ],
            [
                "Lake Ahmadland"
            ],
            [
                "Larkinport"
            ],
            [
                "Meganeland"
            ],
            [
                "New Annabellefort"
            ],
            [
                "North Fletcherside"
            ],
            [
                "North Jayceton"
            ],
            [
                "North Loyceville"
            ],
            [
                "North Orlobury"
            ],
            [
                "Tressamouth"
            ],
            [
                "Unachester"
            ],
            [
                "West Lianafurt"
            ],
            [
                "West Sean"
            ]
        ]
    },
    {
        "db_id": "behavior_monitoring",
        "query": "MATCH (teachers:`behavior_monitoring.Teachers`)\nRETURN teachers.first_name,teachers.last_name\nORDER BY teachers.last_name",
        "question": "Find the first names and last names of teachers in alphabetical order of last name.",
        "answers": [
            [
                "Aniya",
                "Becker"
            ],
            [
                "Hobart",
                "Bergnaum"
            ],
            [
                "Sid",
                "Brakus"
            ],
            [
                "Woodrow",
                "Goldner"
            ],
            [
                "Evelyn",
                "Hansen"
            ],
            [
                "Gregory",
                "Heller"
            ],
            [
                "Donnie",
                "Kuhic"
            ],
            [
                "Citlalli",
                "Kuhic"
            ],
            [
                "Edmond",
                "Lang"
            ],
            [
                "Lyla",
                "Medhurst"
            ],
            [
                "Camren",
                "Moore"
            ],
            [
                "Stephanie",
                "Price"
            ],
            [
                "Alvis",
                "Schultz"
            ],
            [
                "Trystan",
                "Schuster"
            ],
            [
                "Cecilia",
                "Ward"
            ]
        ]
    },
    {
        "db_id": "behavior_monitoring",
        "query": "MATCH (T1:`behavior_monitoring.Addresses`)-[T2:`behavior_monitoring.Student_Addresses`]-()\nRETURN T2.address_id,T1.zip_postcode\nORDER BY T2.monthly_rental DESC\nLIMIT 1",
        "question": "What are the id and zip code of the address with the highest monthly rental?",
        "answers": [
            [
                16,
                "637"
            ]
        ]
    },
    {
        "db_id": "behavior_monitoring",
        "query": "MATCH (T2:`behavior_monitoring.Students`)-[T1:`behavior_monitoring.Student_Addresses`]-()\nRETURN T2.cell_mobile_number\nORDER BY T1.monthly_rental ASC\nLIMIT 1",
        "question": "What is the cell phone number of the student whose address has the lowest monthly rental?",
        "answers": [
            [
                "08605192839"
            ]
        ]
    },
    {
        "db_id": "behavior_monitoring",
        "query": "MATCH (T1:`behavior_monitoring.Addresses`)-[]-(T2:`behavior_monitoring.Teachers`)\nWHERE T1.zip_postcode = '918'\nRETURN T2.email_address",
        "question": "What are the email addresses of teachers whose address has zip code \"918\"?",
        "answers": [
            [
                "everardo.lynch@example.net"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "query": "MATCH (T1:`assets_maintenance.Maintenance_Contracts`)-[]-(T2:`assets_maintenance.Assets`)\nRETURN count(*),T1.maintenance_contract_id",
        "question": "How many assets does each maintenance contract contain? List the number and the contract id.",
        "answers": [
            [
                2,
                2
            ],
            [
                2,
                6
            ],
            [
                2,
                7
            ],
            [
                2,
                8
            ],
            [
                1,
                10
            ],
            [
                2,
                11
            ],
            [
                1,
                12
            ],
            [
                1,
                13
            ],
            [
                1,
                14
            ],
            [
                1,
                15
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "query": "MATCH (T1:`assets_maintenance.Third_Party_Companies`)-[]-(T2:`assets_maintenance.Assets`)\nRETURN count(*),T1.company_id",
        "question": "How many assets does each third party company supply? List the count and the company id.",
        "answers": [
            [
                1,
                1
            ],
            [
                3,
                2
            ],
            [
                2,
                5
            ],
            [
                3,
                6
            ],
            [
                1,
                7
            ],
            [
                1,
                8
            ],
            [
                1,
                11
            ],
            [
                1,
                12
            ],
            [
                1,
                13
            ],
            [
                1,
                14
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "query": "MATCH (T1:`assets_maintenance.Third_Party_Companies`)-[]-(T2:`assets_maintenance.Maintenance_Engineers`)\nWITH T1.company_name AS company_name, T1.company_id AS company_id, count(*) AS count\nWHERE count  >= 2\nRETURN company_id,company_name \nUNION\nMATCH (T3:`assets_maintenance.Third_Party_Companies`)-[]-(T4:`assets_maintenance.Maintenance_Contracts`)\nWITH count(*) AS count, T3.company_name AS company_name, T3.company_id AS company_id\nWHERE count  >= 2\nRETURN company_id,company_name",
        "question": "Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.",
        "answers": [
            [
                2,
                "McDermott Group"
            ],
            [
                3,
                "Schuppe-Carroll"
            ],
            [
                4,
                "Dooley-Langosh"
            ],
            [
                11,
                "Kuvalis, Boehm and Hettinger"
            ],
            [
                15,
                "Rau, Ullrich and King"
            ],
            [
                13,
                "Greenholt-D'Amore"
            ],
            [
                6,
                "Grimes, Mosciski and Renner"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "query": "MATCH (T1:`assets_maintenance.Parts`)-[]-(T2:`assets_maintenance.Part_Faults`)\nWITH T1.part_id AS part_id, count(*) AS count, T1.part_name AS part_name\nWHERE count  > 2\nRETURN part_name,part_id",
        "question": "Which parts have more than 2 faults? Show the part name and id.",
        "answers": [
            [
                "top",
                1
            ],
            [
                "package",
                3
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "query": "MATCH (T1:`assets_maintenance.Maintenance_Engineers`)-[T2:`assets_maintenance.Engineer_Skills`]-(T3:`assets_maintenance.Skills`)\nRETURN T1.first_name,T1.last_name,T1.other_details,T3.skill_description",
        "question": "List all every engineer's first name, last name, details and coresponding skill description.",
        "answers": [
            [
                "Samanta",
                "Hauck",
                null,
                "Electrical"
            ],
            [
                "Manley",
                "Grady",
                null,
                "Electrical"
            ],
            [
                "Lorine",
                "Morar",
                null,
                "Electrical"
            ],
            [
                "Weston",
                "Hahn",
                null,
                "Electrical"
            ],
            [
                "Courtney",
                "Adams",
                null,
                "Electrical"
            ],
            [
                "Archibald",
                "Streich",
                null,
                "Electrical"
            ],
            [
                "Naomi",
                "Price",
                null,
                "Electrical"
            ],
            [
                "Nellie",
                "Hirthe",
                null,
                "Electrical"
            ],
            [
                "Alexys",
                "Simonis",
                null,
                "Mechanical"
            ],
            [
                "Manley",
                "Grady",
                null,
                "Mechanical"
            ],
            [
                "Clemens",
                "Orn",
                null,
                "Mechanical"
            ],
            [
                "Naomi",
                "Price",
                null,
                "Mechanical"
            ],
            [
                "Cullen",
                "Kunde",
                null,
                "Mechanical"
            ],
            [
                "Weston",
                "Hahn",
                null,
                "Mechanical"
            ],
            [
                "Archibald",
                "Streich",
                null,
                "TV, Video"
            ],
            [
                "Josie",
                "Harvey",
                "Skilled",
                "TV, Video"
            ],
            [
                "Nellie",
                "Hirthe",
                null,
                "TV, Video"
            ],
            [
                "Brian",
                "Stamm",
                null,
                "TV, Video"
            ],
            [
                "Courtney",
                "Adams",
                null,
                "TV, Video"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "query": "MATCH (T1:`assets_maintenance.Part_Faults`)-[T2:`assets_maintenance.Skills_Required_To_Fix`]-(T3:`assets_maintenance.Skills`)\nRETURN T1.fault_short_name,T3.skill_description",
        "question": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.",
        "answers": [
            [
                "PW",
                "Electrical"
            ],
            [
                "PW",
                "Electrical"
            ],
            [
                "PW",
                "Electrical"
            ],
            [
                "TW",
                "Mechanical"
            ],
            [
                "MW",
                "Mechanical"
            ],
            [
                "TW",
                "Mechanical"
            ],
            [
                "PW",
                "Mechanical"
            ],
            [
                "PW",
                "Mechanical"
            ],
            [
                "TW",
                "TV, Video"
            ],
            [
                "MW",
                "TV, Video"
            ],
            [
                "PW",
                "TV, Video"
            ],
            [
                "MW",
                "TV, Video"
            ],
            [
                "MW",
                "TV, Video"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "query": "MATCH (T1:`assets_maintenance.Fault_Log`)-[T2:`assets_maintenance.Fault_Log_Parts`]-()\nRETURN T1.fault_description,T2.fault_status",
        "question": "What are all the fault descriptions and the fault status of all the faults recoreded in the logs?",
        "answers": [
            [
                "system error",
                "Fixed"
            ],
            [
                "system error",
                "Fixed"
            ],
            [
                "system error",
                "Return"
            ],
            [
                "system error",
                "Fixed"
            ],
            [
                "system error",
                "Return"
            ],
            [
                "failed parts",
                "Reported"
            ],
            [
                "failed parts",
                "Waiting"
            ],
            [
                "failed parts",
                "Waiting"
            ],
            [
                "system error",
                "Reported"
            ],
            [
                "failed parts",
                "Reported"
            ],
            [
                "failed parts",
                "Reported"
            ],
            [
                "system error",
                "Reported"
            ],
            [
                "system error",
                "Fixed"
            ],
            [
                "system error",
                "Fixed"
            ],
            [
                "failed parts",
                "Waiting"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "query": "MATCH (maintenance_engineers:`assets_maintenance.Maintenance_Engineers`)\nRETURN DISTINCT maintenance_engineers.last_name",
        "question": "What are all the distinct last names of all the engineers?",
        "answers": [
            [
                "Reinger"
            ],
            [
                "Orn"
            ],
            [
                "Hauck"
            ],
            [
                "Morar"
            ],
            [
                "Grady"
            ],
            [
                "Adams"
            ],
            [
                "Harvey"
            ],
            [
                "Hirthe"
            ],
            [
                "Stamm"
            ],
            [
                "Price"
            ],
            [
                "Kunde"
            ],
            [
                "Simonis"
            ],
            [
                "Hahn"
            ],
            [
                "Goldner"
            ],
            [
                "Streich"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "query": "MATCH ()-[fault_log_parts:`assets_maintenance.Fault_Log_Parts`]-()\nRETURN DISTINCT fault_log_parts.fault_status",
        "question": "How many fault status codes are recorded in the fault log parts table?",
        "answers": [
            [
                "Reported"
            ],
            [
                "Return"
            ],
            [
                "Fixed"
            ],
            [
                "Waiting"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "query": "MATCH (assets:`assets_maintenance.Assets`)\nRETURN assets.asset_id,assets.asset_details,assets.asset_make,assets.asset_model",
        "question": "List the asset id, details, make and model for every asset.",
        "answers": [
            [
                1,
                "dell laptop1",
                "PT",
                "58 ub"
            ],
            [
                2,
                "dell laptop2",
                "IN",
                "35 xt"
            ],
            [
                3,
                "dell laptop3",
                "IT",
                "63 ok"
            ],
            [
                4,
                "dell laptop4",
                "RU",
                "69 uv"
            ],
            [
                5,
                "dell laptop5",
                "DE",
                "90 oq"
            ],
            [
                6,
                "monitor1",
                "CN",
                "91 ub"
            ],
            [
                7,
                "monitor2",
                "CN",
                "27 du"
            ],
            [
                8,
                "monitor3",
                "GB",
                "94 kg"
            ],
            [
                9,
                "machine1",
                "RU",
                "07 yt"
            ],
            [
                10,
                "machine2",
                "FR",
                "20 tl"
            ],
            [
                11,
                "machine3",
                "FR",
                "11 wi"
            ],
            [
                12,
                "machine4",
                "RU",
                "95 vn"
            ],
            [
                13,
                "system1",
                "DE",
                "08 yy"
            ],
            [
                14,
                "system2",
                "IN",
                "66 xm"
            ],
            [
                15,
                "system3",
                "IE",
                "24 ak"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "query": "MATCH (assets:`assets_maintenance.Assets`)\nRETURN assets.asset_acquired_date\nORDER BY assets.asset_acquired_date ASC\nLIMIT 1",
        "question": "When was the first asset acquired?",
        "answers": [
            [
                "2017-04-16 12:19:25"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "query": "MATCH (T1:`assets_maintenance.Parts`)-[]-(T2:`assets_maintenance.Part_Faults`)\nWITH count(T1.part_name) AS cnt, T1\nRETURN T1.part_name\nORDER BY cnt ASC\nLIMIT 1",
        "question": "Which kind of part has the least number of faults? List the part name.",
        "answers": [
            [
                "middle"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "query": "MATCH (T1:`assets_maintenance.Staff`)-[]-(T2:`assets_maintenance.Engineer_Visits`)-[]-(T3:`assets_maintenance.Maintenance_Engineers`)\nRETURN T1.staff_name,T3.first_name,T3.last_name",
        "question": "Which staff have contacted which engineers? List the staff name and the engineer first name and last name.",
        "answers": [
            [
                "Berneice",
                "Etha",
                "Reinger"
            ],
            [
                "Berneice",
                "Lorine",
                "Morar"
            ],
            [
                "Edmond",
                "Cullen",
                "Kunde"
            ],
            [
                "Edmond",
                "Archibald",
                "Streich"
            ],
            [
                "Edmond",
                "Naomi",
                "Price"
            ],
            [
                "Rodger",
                "Archibald",
                "Streich"
            ],
            [
                "Kadin",
                "Archibald",
                "Streich"
            ],
            [
                "Kadin",
                "Archibald",
                "Streich"
            ],
            [
                "Kadin",
                "Archibald",
                "Streich"
            ],
            [
                "Kadin",
                "Archibald",
                "Streich"
            ],
            [
                "Christophe",
                "Nellie",
                "Hirthe"
            ],
            [
                "Bernice",
                "Lorine",
                "Morar"
            ],
            [
                "Bernice",
                "Courtney",
                "Adams"
            ],
            [
                "Oren",
                "Alexys",
                "Simonis"
            ],
            [
                "Cyrus",
                "Naomi",
                "Price"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "query": "MATCH (T1:`assets_maintenance.Fault_Log`)-[T2:`assets_maintenance.Fault_Log_Parts`]-()\nWITH T1, count(T1.fault_log_entry_id) AS cnt\nRETURN T1.fault_log_entry_id,T1.fault_description,T1.fault_log_entry_datetime\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Which fault log included the most number of faulty parts? List the fault log id, description and record time.",
        "answers": [
            [
                1,
                "system error",
                "2018-03-21 04:25:00"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "query": "MATCH (assets:`assets_maintenance.Assets`)\nRETURN DISTINCT assets.asset_model",
        "question": "What are all the distinct asset models?",
        "answers": [
            [
                "58 ub"
            ],
            [
                "35 xt"
            ],
            [
                "63 ok"
            ],
            [
                "69 uv"
            ],
            [
                "90 oq"
            ],
            [
                "91 ub"
            ],
            [
                "27 du"
            ],
            [
                "94 kg"
            ],
            [
                "07 yt"
            ],
            [
                "20 tl"
            ],
            [
                "11 wi"
            ],
            [
                "95 vn"
            ],
            [
                "08 yy"
            ],
            [
                "66 xm"
            ],
            [
                "24 ak"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "query": "MATCH (assets:`assets_maintenance.Assets`)\nRETURN assets.asset_make,assets.asset_model,assets.asset_details\nORDER BY assets.asset_disposed_date ASC",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "answers": [
            [
                "IE",
                "24 ak",
                "system3"
            ],
            [
                "DE",
                "90 oq",
                "dell laptop5"
            ],
            [
                "RU",
                "95 vn",
                "machine4"
            ],
            [
                "GB",
                "94 kg",
                "monitor3"
            ],
            [
                "FR",
                "20 tl",
                "machine2"
            ],
            [
                "DE",
                "08 yy",
                "system1"
            ],
            [
                "RU",
                "07 yt",
                "machine1"
            ],
            [
                "IT",
                "63 ok",
                "dell laptop3"
            ],
            [
                "CN",
                "91 ub",
                "monitor1"
            ],
            [
                "PT",
                "58 ub",
                "dell laptop1"
            ],
            [
                "RU",
                "69 uv",
                "dell laptop4"
            ],
            [
                "FR",
                "11 wi",
                "machine3"
            ],
            [
                "IN",
                "35 xt",
                "dell laptop2"
            ],
            [
                "CN",
                "27 du",
                "monitor2"
            ],
            [
                "IN",
                "66 xm",
                "system2"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "query": "MATCH (parts:`assets_maintenance.Parts`)\nRETURN parts.part_id,parts.chargeable_amount\nORDER BY parts.chargeable_amount ASC\nLIMIT 1",
        "question": "Which part has the least chargeable amount? List the part id and amount.",
        "answers": [
            [
                1,
                "4"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "query": "MATCH (T1:`assets_maintenance.Third_Party_Companies`)-[]-(T2:`assets_maintenance.Maintenance_Contracts`)\nRETURN T1.company_name\nORDER BY T2.contract_start_date ASC\nLIMIT 1",
        "question": "Which company started the earliest the maintenance contract? Show the company name.",
        "answers": [
            [
                "Grimes, Mosciski and Renner"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "query": "MATCH (staff:`assets_maintenance.Staff`)\nRETURN staff.gender\nORDER BY staff.gender DESC\nLIMIT 1",
        "question": "Which gender makes up the majority of the staff?",
        "answers": [
            [
                "1"
            ]
        ]
    },
    {
        "db_id": "assets_maintenance",
        "query": "MATCH (T1:`assets_maintenance.Staff`)-[]-(T2:`assets_maintenance.Engineer_Visits`)\nRETURN T1.staff_name,count(*)",
        "question": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.",
        "answers": [
            [
                "Berneice",
                2
            ],
            [
                "Edmond",
                3
            ],
            [
                "Rodger",
                1
            ],
            [
                "Kadin",
                4
            ],
            [
                "Christophe",
                1
            ],
            [
                "Bernice",
                2
            ],
            [
                "Oren",
                1
            ],
            [
                "Cyrus",
                1
            ]
        ]
    },
    {
        "db_id": "station_weather",
        "query": "MATCH (station:`station_weather.station`)\nRETURN station.local_authority,station.services",
        "question": "list the local authorities and services provided by all stations.",
        "answers": [
            [
                "Chiltern",
                "Metropolitan line and Chiltern Railways"
            ],
            [
                "Watford",
                "London Overground and London Midland"
            ],
            [
                "Brentwood",
                "Greater Anglia"
            ],
            [
                "Broxbourne",
                "Greater Anglia"
            ],
            [
                "Three Rivers",
                "London Overground"
            ],
            [
                "Thurrock",
                "c2c"
            ],
            [
                "Chiltern",
                "Metropolitan line and Chiltern Railways"
            ],
            [
                "Chiltern",
                "Metropolitan line"
            ],
            [
                "Broxbourne",
                "Greater Anglia"
            ],
            [
                "Three Rivers",
                "Metropolitan line and Chiltern Railways"
            ],
            [
                "Three Rivers",
                "Metropolitan line"
            ]
        ]
    },
    {
        "db_id": "station_weather",
        "query": "MATCH (train:`station_weather.train`)\nRETURN train.train_number,train.name\nORDER BY train.time",
        "question": "show all train numbers and names ordered by their time from early to late.",
        "answers": [
            [
                16650,
                "Parasuram Express"
            ],
            [
                56700,
                "Quilon Fast Passenger"
            ],
            [
                16382,
                "Jayanthi Janatha Express"
            ],
            [
                16381,
                "Jayanthi Janatha Express"
            ],
            [
                16525,
                "Island Express"
            ],
            [
                16723,
                "Ananthapuri Express"
            ],
            [
                16526,
                "Island Express"
            ],
            [
                16724,
                "Ananthapuri Express"
            ],
            [
                56701,
                "Madurai Fast Passenger"
            ],
            [
                16127,
                "Guruvayur Express"
            ],
            [
                16128,
                "Guruvayur Express"
            ]
        ]
    },
    {
        "db_id": "station_weather",
        "query": "MATCH (train:`station_weather.train`)\nWHERE train.destination = 'Chennai'\nRETURN train.time,train.train_number\nORDER BY train.time",
        "question": "Give me the times and numbers of all trains that go to Chennai, ordered by time.",
        "answers": [
            [
                "17:15",
                16724
            ],
            [
                "4:49",
                16128
            ]
        ]
    },
    {
        "db_id": "station_weather",
        "query": "MATCH (train:`station_weather.train`)\nWHERE train.origin = 'Chennai' AND train.destination = 'Guruvayur'\nRETURN train.train_number,train.time",
        "question": "Find the number and time of the train that goes from Chennai to Guruvayur.",
        "answers": [
            [
                16127,
                "22:10"
            ]
        ]
    },
    {
        "db_id": "station_weather",
        "query": "MATCH (train:`station_weather.train`)\nRETURN train.origin,count(*)",
        "question": "Find the number of trains starting from each origin.",
        "answers": [
            [
                "Trivandrum",
                1
            ],
            [
                "Chennai",
                2
            ],
            [
                "Guruvayur",
                1
            ],
            [
                "Kanniyakumari",
                2
            ],
            [
                "Quilon",
                1
            ],
            [
                "Madurai",
                1
            ],
            [
                "Bangalore",
                1
            ],
            [
                "Mumbai",
                1
            ],
            [
                "Nagercoil",
                1
            ]
        ]
    },
    {
        "db_id": "station_weather",
        "query": "MATCH (t1:`station_weather.train`)-[t2:`station_weather.route`]-()\nWITH t1, count(t2.None) AS cnt\nRETURN t1.name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Find the name of the train whose route runs through greatest number of stations.",
        "answers": [
            [
                "Ananthapuri Express"
            ]
        ]
    },
    {
        "db_id": "station_weather",
        "query": "MATCH (t1:`station_weather.station`)-[t2:`station_weather.route`]-()\nRETURN count(*),t1.network_name,t1.services",
        "question": "Find the number of trains for each station, as well as the station network name and services.",
        "answers": [
            [
                3,
                "Amersham",
                "Metropolitan line and Chiltern Railways"
            ],
            [
                2,
                "Bushey",
                "London Overground and London Midland"
            ],
            [
                2,
                "Brentwood",
                "Greater Anglia"
            ],
            [
                2,
                "Broxbourne",
                "Greater Anglia"
            ],
            [
                2,
                "Carpenders Park",
                "London Overground"
            ],
            [
                1,
                "Chafford Hundred",
                "c2c"
            ],
            [
                2,
                "Chalfont & Latimer",
                "Metropolitan line and Chiltern Railways"
            ],
            [
                3,
                "Chesham",
                "Metropolitan line"
            ],
            [
                1,
                "Cheshunt",
                "Greater Anglia"
            ]
        ]
    },
    {
        "db_id": "station_weather",
        "query": "MATCH (weekly_weather:`station_weather.weekly_weather`)\nRETURN avg(weekly_weather.high_temperature),weekly_weather.day_of_week",
        "question": "What is the average high temperature for each day of week?",
        "answers": [
            [
                56.0,
                "Monday"
            ],
            [
                58.0,
                "Tuesday"
            ],
            [
                58.0,
                "Wednesday"
            ],
            [
                57.0,
                "Thursday"
            ],
            [
                55.0,
                "Friday"
            ],
            [
                55.0,
                "Saturday"
            ],
            [
                54.0,
                "Sunday"
            ]
        ]
    },
    {
        "db_id": "station_weather",
        "query": "MATCH (t1:`station_weather.station`)-[t2:`station_weather.route`]-(t3:`station_weather.train`)\nWHERE t1.local_authority = 'Chiltern'\nRETURN t3.name,t3.time",
        "question": "Find names and times of trains that run through stations for the local authority Chiltern.",
        "answers": [
            [
                "Ananthapuri Express",
                "17:15"
            ],
            [
                "Jayanthi Janatha Express",
                "06:30"
            ],
            [
                "Guruvayur Express",
                "22:10"
            ],
            [
                "Island Express",
                "16:59"
            ],
            [
                "Guruvayur Express",
                "22:10"
            ],
            [
                "Island Express",
                "16:59"
            ],
            [
                "Quilon Fast Passenger",
                "04:55"
            ],
            [
                "Madurai Fast Passenger",
                "21:49"
            ]
        ]
    },
    {
        "db_id": "station_weather",
        "query": "MATCH (station:`station_weather.station`)\nRETURN count(DISTINCT station.services)",
        "question": "How many different services are provided by all stations?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "station_weather",
        "query": "MATCH (weekly_weather:`station_weather.weekly_weather`)\nRETURN min(weekly_weather.low_temperature),max(weekly_weather.wind_speed_mph)",
        "question": "show the lowest low temperature and highest wind speed in miles per hour.",
        "answers": [
            [
                46,
                24
            ]
        ]
    },
    {
        "db_id": "station_weather",
        "query": "MATCH (train:`station_weather.train`)\nWITH count(*) AS count, train.origin AS origin\nWHERE count  > 1\nRETURN origin",
        "question": "Find the origins from which more than 1 train starts.",
        "answers": [
            [
                "Chennai"
            ],
            [
                "Kanniyakumari"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (class:`college_1.CLASS`)\nWHERE class.CRS_CODE = \"ACCT-211\"\nRETURN count(DISTINCT class.PROF_NUM)",
        "question": "How many professors are teaching class with code ACCT-211?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (class:`college_1.CLASS`)\nWHERE class.CRS_CODE = \"ACCT-211\"\nRETURN count(DISTINCT class.PROF_NUM)",
        "question": "How many professors teach a class with the code ACCT-211?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.EMPLOYEE`)-[]-(T2:`college_1.CLASS`)\nWHERE T2.CRS_CODE = \"ACCT-211\"\nRETURN DISTINCT T1.EMP_FNAME,T1.EMP_DOB",
        "question": "What are the first names and date of birth of professors teaching course ACCT-211?",
        "answers": [
            [
                "Arnelle",
                "1950-11-2"
            ],
            [
                "Robert",
                "1937-12-30"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.EMPLOYEE`)-[]-(T2:`college_1.CLASS`)\nWHERE T2.CRS_CODE = \"ACCT-211\"\nRETURN DISTINCT T1.EMP_FNAME,T1.EMP_DOB",
        "question": "What are the first names and birthdates of the professors in charge of ACCT-211?",
        "answers": [
            [
                "Arnelle",
                "1950-11-2"
            ],
            [
                "Robert",
                "1937-12-30"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.EMPLOYEE`)-[]-(T2:`college_1.CLASS`)\nWHERE T1.EMP_LNAME = 'Graztevski'\nRETURN count(*)",
        "question": "How many classes are professor whose last name is Graztevski has?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.EMPLOYEE`)-[]-(T2:`college_1.CLASS`)\nWHERE T1.EMP_LNAME = 'Graztevski'\nRETURN count(*)",
        "question": "How many classes does the professor whose last name is Graztevski teach?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (course:`college_1.COURSE`)\nWHERE course.CRS_CODE = 'CIS-220'\nRETURN course.CRS_CREDIT,course.CRS_DESCRIPTION",
        "question": "How many credits does course CIS-220 have, and what its description?",
        "answers": [
            [
                3.0,
                "Intro. to Microcomputing"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (course:`college_1.COURSE`)\nWHERE course.CRS_CODE = 'CIS-220'\nRETURN course.CRS_CREDIT,course.CRS_DESCRIPTION",
        "question": "What is the description for the CIS-220 and how many credits does it have?",
        "answers": [
            [
                3.0,
                "Intro. to Microcomputing"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nWHERE department.DEPT_NAME = 'History'\nRETURN department.DEPT_ADDRESS",
        "question": "what is the address of history department?",
        "answers": [
            [
                "DRE 156, Box 284"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nWHERE department.DEPT_NAME = 'History'\nRETURN department.DEPT_ADDRESS",
        "question": "Where is the history department?",
        "answers": [
            [
                "DRE 156, Box 284"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nWHERE department.SCHOOL_CODE = 'BUS'\nRETURN count(DISTINCT department.DEPT_ADDRESS)",
        "question": "How many different locations does the school with code BUS has?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nWHERE department.SCHOOL_CODE = 'BUS'\nRETURN count(DISTINCT department.DEPT_ADDRESS)",
        "question": "What are the different locations of the school with the code BUS?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nRETURN count(DISTINCT department.DEPT_ADDRESS),department.SCHOOL_CODE",
        "question": "How many different locations does each school have?",
        "answers": [
            [
                4,
                "BUS"
            ],
            [
                7,
                "A&SCI"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nRETURN count(DISTINCT department.DEPT_ADDRESS),department.SCHOOL_CODE",
        "question": "Count different addresses of each school.",
        "answers": [
            [
                4,
                "BUS"
            ],
            [
                7,
                "A&SCI"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (course:`college_1.COURSE`)\nWHERE course.CRS_CODE = 'QM-261'\nRETURN course.CRS_CREDIT,course.CRS_DESCRIPTION",
        "question": "Find the description and credit for the course QM-261?",
        "answers": [
            [
                3.0,
                "Intro. to Statistics"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (course:`college_1.COURSE`)\nWHERE course.CRS_CODE = 'QM-261'\nRETURN course.CRS_CREDIT,course.CRS_DESCRIPTION",
        "question": "What is the course description and number of credits for QM-261?",
        "answers": [
            [
                3.0,
                "Intro. to Statistics"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nRETURN count(DISTINCT department.DEPT_NAME),department.SCHOOL_CODE",
        "question": "Find the number of departments in each school.",
        "answers": [
            [
                4,
                "BUS"
            ],
            [
                7,
                "A&SCI"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nRETURN count(DISTINCT department.DEPT_NAME),department.SCHOOL_CODE",
        "question": "How many departments are in each school?",
        "answers": [
            [
                4,
                "BUS"
            ],
            [
                7,
                "A&SCI"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (class:`college_1.CLASS`)\nRETURN count(*),class.CRS_CODE",
        "question": "How many sections does each course has?",
        "answers": [
            [
                3,
                "ACCT-211"
            ],
            [
                2,
                "ACCT-212"
            ],
            [
                3,
                "CIS-220"
            ],
            [
                1,
                "CIS-420"
            ],
            [
                2,
                "QM-261"
            ],
            [
                2,
                "QM-362"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (class:`college_1.CLASS`)\nRETURN count(*),class.CRS_CODE",
        "question": "How many sections does each course have?",
        "answers": [
            [
                3,
                "ACCT-211"
            ],
            [
                2,
                "ACCT-212"
            ],
            [
                3,
                "CIS-220"
            ],
            [
                1,
                "CIS-420"
            ],
            [
                2,
                "QM-261"
            ],
            [
                2,
                "QM-362"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (class:`college_1.CLASS`)\nWITH count(*) AS count, class.CLASS_ROOM AS CLASS_ROOM\nWHERE count  >= 2\nRETURN count,CLASS_ROOM",
        "question": "Find the number of classes offered for all class rooms that held at least 2 classes.",
        "answers": [
            [
                2,
                "BUS311"
            ],
            [
                2,
                "BUS252"
            ],
            [
                3,
                "KLR209"
            ],
            [
                4,
                "KLR200"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (class:`college_1.CLASS`)\nWITH count(*) AS count, class.CLASS_ROOM AS CLASS_ROOM\nWHERE count  >= 2\nRETURN count,CLASS_ROOM",
        "question": "For each classroom with at least 2 classes, how many classes are offered?",
        "answers": [
            [
                2,
                "BUS311"
            ],
            [
                2,
                "BUS252"
            ],
            [
                3,
                "KLR209"
            ],
            [
                4,
                "KLR200"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.CLASS`)-[]-(T2:`college_1.COURSE`)-[]-(T3:`college_1.DEPARTMENT`)\nRETURN count(*),T3.SCHOOL_CODE",
        "question": "Find the number of classes in each school.",
        "answers": [
            [
                13,
                "BUS"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.CLASS`)-[]-(T2:`college_1.COURSE`)-[]-(T3:`college_1.DEPARTMENT`)\nRETURN count(*),T3.SCHOOL_CODE",
        "question": "How many classes exist for each school?",
        "answers": [
            [
                13,
                "BUS"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.DEPARTMENT`)-[T2:`college_1.PROFESSOR`]-()\nRETURN count(*),T1.SCHOOL_CODE",
        "question": "What is the number of professors for different school?",
        "answers": [
            [
                10,
                "BUS"
            ],
            [
                12,
                "A&SCI"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.DEPARTMENT`)-[T2:`college_1.PROFESSOR`]-()\nRETURN count(*),T1.SCHOOL_CODE",
        "question": "How many different professors are there for the different schools?",
        "answers": [
            [
                10,
                "BUS"
            ],
            [
                12,
                "A&SCI"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (student:`college_1.STUDENT`)\nRETURN count(*),student.DEPT_CODE",
        "question": "Find the number of students for each department.",
        "answers": [
            [
                1,
                "BIOL"
            ],
            [
                2,
                "CIS"
            ],
            [
                3,
                "ACCT"
            ],
            [
                1,
                "ENGL"
            ],
            [
                1,
                "EDU"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (student:`college_1.STUDENT`)\nRETURN count(*),student.DEPT_CODE",
        "question": "How many students are in each department?",
        "answers": [
            [
                1,
                "BIOL"
            ],
            [
                2,
                "CIS"
            ],
            [
                3,
                "ACCT"
            ],
            [
                1,
                "ENGL"
            ],
            [
                1,
                "EDU"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (student:`college_1.STUDENT`)\nRETURN max(student.STU_GPA),avg(student.STU_GPA),min(student.STU_GPA),student.DEPT_CODE",
        "question": "Find the max, average, and minimum gpa of all students in each department.",
        "answers": [
            [
                2.84,
                2.84,
                2.84,
                "BIOL"
            ],
            [
                3.27,
                3.1799999999999997,
                3.09,
                "CIS"
            ],
            [
                3.15,
                2.776666666666667,
                2.26,
                "ACCT"
            ],
            [
                2.11,
                2.11,
                2.11,
                "ENGL"
            ],
            [
                3.87,
                3.87,
                3.87,
                "EDU"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (student:`college_1.STUDENT`)\nRETURN max(student.STU_GPA),avg(student.STU_GPA),min(student.STU_GPA),student.DEPT_CODE",
        "question": "What is the highest, lowest, and average student GPA for every department?",
        "answers": [
            [
                2.84,
                2.84,
                2.84,
                "BIOL"
            ],
            [
                3.27,
                3.1799999999999997,
                3.09,
                "CIS"
            ],
            [
                3.15,
                2.776666666666667,
                2.26,
                "ACCT"
            ],
            [
                2.11,
                2.11,
                2.11,
                "ENGL"
            ],
            [
                3.87,
                3.87,
                3.87,
                "EDU"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nRETURN count(DISTINCT department.SCHOOL_CODE)",
        "question": "how many schools exist in total?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nRETURN count(DISTINCT department.SCHOOL_CODE)",
        "question": "How many schools are there in the department?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (class:`college_1.CLASS`)\nRETURN count(DISTINCT class.CLASS_CODE)",
        "question": "How many different classes are there?",
        "answers": [
            [
                13
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (class:`college_1.CLASS`)\nRETURN count(DISTINCT class.CLASS_CODE)",
        "question": "How many unique classes are offered?",
        "answers": [
            [
                13
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (class:`college_1.CLASS`)\nRETURN count(DISTINCT class.CRS_CODE)",
        "question": "How many courses are offered?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (class:`college_1.CLASS`)\nRETURN count(DISTINCT class.CRS_CODE)",
        "question": "What are the number of different course codes?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nRETURN count(DISTINCT department.DEPT_NAME)",
        "question": "How many departments does the college has?",
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nRETURN count(DISTINCT department.DEPT_NAME)",
        "question": "How many different departments are there?",
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.CLASS`)-[T2:`college_1.ENROLL`]-()\nWHERE T1.CRS_CODE = 'ACCT-211'\nRETURN count(*)",
        "question": "How many students enrolled in class ACCT-211?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.CLASS`)-[T2:`college_1.ENROLL`]-()\nWHERE T1.CRS_CODE = 'ACCT-211'\nRETURN count(*)",
        "question": "What are the total number of students enrolled in ACCT-211?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.CLASS`)-[T2:`college_1.ENROLL`]-(T3:`college_1.STUDENT`)\nWHERE T1.CRS_CODE = 'ACCT-211'\nRETURN T3.STU_FNAME",
        "question": "What is the first name of each student enrolled in class ACCT-211?",
        "answers": [
            [
                "Anne"
            ],
            [
                "William"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.CLASS`)-[T2:`college_1.ENROLL`]-(T3:`college_1.STUDENT`)\nWHERE T1.CRS_CODE = 'ACCT-211'\nRETURN T3.STU_FNAME",
        "question": "What are the first names of all students in course ACCT-211?",
        "answers": [
            [
                "Anne"
            ],
            [
                "William"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.CLASS`)-[T2:`college_1.ENROLL`]-(T3:`college_1.STUDENT`)\nWHERE T1.CRS_CODE = 'ACCT-211' AND T2.ENROLL_GRADE = 'C'\nRETURN T3.STU_FNAME",
        "question": "What is the first name of students enrolled in class ACCT-211 and got grade C?",
        "answers": [
            [
                "William"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.CLASS`)-[T2:`college_1.ENROLL`]-(T3:`college_1.STUDENT`)\nWHERE T1.CRS_CODE = 'ACCT-211' AND T2.ENROLL_GRADE = 'C'\nRETURN T3.STU_FNAME",
        "question": "What are the first names of all students who took ACCT-211 and received a C?",
        "answers": [
            [
                "William"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (employee:`college_1.EMPLOYEE`)\nRETURN count(*)",
        "question": "Find the total number of employees.",
        "answers": [
            [
                37
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (employee:`college_1.EMPLOYEE`)\nRETURN count(*)",
        "question": "How many employees are there all together?",
        "answers": [
            [
                37
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nRETURN department.DEPT_NAME\nORDER BY department.DEPT_NAME",
        "question": "list names of all departments ordered by their names.",
        "answers": [
            [
                "Accounting"
            ],
            [
                "Biology"
            ],
            [
                "Computer Info. Systems"
            ],
            [
                "Economics/Finance"
            ],
            [
                "English"
            ],
            [
                "Fine Arts"
            ],
            [
                "History"
            ],
            [
                "Marketing/Management"
            ],
            [
                "Mathematics"
            ],
            [
                "Psychology"
            ],
            [
                "Sociology"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nRETURN department.DEPT_NAME\nORDER BY department.DEPT_NAME",
        "question": "What are the names of all departments in alphabetical order?",
        "answers": [
            [
                "Accounting"
            ],
            [
                "Biology"
            ],
            [
                "Computer Info. Systems"
            ],
            [
                "Economics/Finance"
            ],
            [
                "English"
            ],
            [
                "Fine Arts"
            ],
            [
                "History"
            ],
            [
                "Marketing/Management"
            ],
            [
                "Mathematics"
            ],
            [
                "Psychology"
            ],
            [
                "Sociology"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (class:`college_1.CLASS`)\nWHERE class.CLASS_ROOM = 'KLR209'\nRETURN class.CLASS_CODE",
        "question": "List the codes of all courses that take place in room KLR209.",
        "answers": [
            [
                "10017"
            ],
            [
                "10019"
            ],
            [
                "10020"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (class:`college_1.CLASS`)\nWHERE class.CLASS_ROOM = 'KLR209'\nRETURN class.CLASS_CODE",
        "question": "What are the codes of all the courses that are located in room KLR209?",
        "answers": [
            [
                "10017"
            ],
            [
                "10019"
            ],
            [
                "10020"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (employee:`college_1.EMPLOYEE`)\nWHERE employee.EMP_JOBCODE = 'PROF'\nRETURN employee.EMP_FNAME\nORDER BY employee.EMP_DOB",
        "question": "List the first name of all employees with job code PROF ordered by their date of birth.",
        "answers": [
            [
                "Robert"
            ],
            [
                "Gerald"
            ],
            [
                "Peter"
            ],
            [
                "Ross"
            ],
            [
                "Ronald"
            ],
            [
                "James"
            ],
            [
                "Melanie"
            ],
            [
                "George"
            ],
            [
                "Preston"
            ],
            [
                "Carlos"
            ],
            [
                "Arnelle"
            ],
            [
                "Hermine"
            ],
            [
                "Van"
            ],
            [
                "Ronald"
            ],
            [
                "Ismael"
            ],
            [
                "Willa"
            ],
            [
                "Herman"
            ],
            [
                "Robert"
            ],
            [
                "Annelise"
            ],
            [
                "Doreen"
            ],
            [
                "Anne"
            ],
            [
                "Ralph"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (employee:`college_1.EMPLOYEE`)\nWHERE employee.EMP_JOBCODE = 'PROF'\nRETURN employee.EMP_FNAME\nORDER BY employee.EMP_DOB",
        "question": "What are the first names of all employees that are professors ordered by date of birth?",
        "answers": [
            [
                "Robert"
            ],
            [
                "Gerald"
            ],
            [
                "Peter"
            ],
            [
                "Ross"
            ],
            [
                "Ronald"
            ],
            [
                "James"
            ],
            [
                "Melanie"
            ],
            [
                "George"
            ],
            [
                "Preston"
            ],
            [
                "Carlos"
            ],
            [
                "Arnelle"
            ],
            [
                "Hermine"
            ],
            [
                "Van"
            ],
            [
                "Ronald"
            ],
            [
                "Ismael"
            ],
            [
                "Willa"
            ],
            [
                "Herman"
            ],
            [
                "Robert"
            ],
            [
                "Annelise"
            ],
            [
                "Doreen"
            ],
            [
                "Anne"
            ],
            [
                "Ralph"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T2:`college_1.EMPLOYEE`)-[T1:`college_1.PROFESSOR`]-()\nRETURN T2.EMP_FNAME,T1.PROF_OFFICE\nORDER BY T2.EMP_FNAME",
        "question": "Find the first names and offices of all professors sorted by alphabetical order of their first name.",
        "answers": [
            [
                "Anne",
                "BBG 185"
            ],
            [
                "Annelise",
                "AAK 201"
            ],
            [
                "Arnelle",
                "KLR 229D"
            ],
            [
                "Carlos",
                "KLR 300"
            ],
            [
                "Doreen",
                "KLR 284"
            ],
            [
                "George",
                "AAK 230"
            ],
            [
                "Gerald",
                "KLR 211"
            ],
            [
                "Herman",
                "AAK 297"
            ],
            [
                "Hermine",
                "AAK 194"
            ],
            [
                "Ismael",
                "KLR 244"
            ],
            [
                "James",
                "DRE 156"
            ],
            [
                "Melanie",
                "KLR 333"
            ],
            [
                "Peter",
                "KLR 203E"
            ],
            [
                "Preston",
                "DRE 102"
            ],
            [
                "Ralph",
                "KLR 284"
            ],
            [
                "Robert",
                "DRE 102"
            ],
            [
                "Robert",
                "BBG 208"
            ],
            [
                "Ronald",
                "DRE 156"
            ],
            [
                "Ronald",
                "DRE 208"
            ],
            [
                "Ross",
                "KLR 126"
            ],
            [
                "Van",
                "AAK 160"
            ],
            [
                "Willa",
                "KLR 409B"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T2:`college_1.EMPLOYEE`)-[T1:`college_1.PROFESSOR`]-()\nRETURN T2.EMP_FNAME,T1.PROF_OFFICE\nORDER BY T2.EMP_FNAME",
        "question": "What are the first names and office locations for all professors sorted alphabetically by first name?",
        "answers": [
            [
                "Anne",
                "BBG 185"
            ],
            [
                "Annelise",
                "AAK 201"
            ],
            [
                "Arnelle",
                "KLR 229D"
            ],
            [
                "Carlos",
                "KLR 300"
            ],
            [
                "Doreen",
                "KLR 284"
            ],
            [
                "George",
                "AAK 230"
            ],
            [
                "Gerald",
                "KLR 211"
            ],
            [
                "Herman",
                "AAK 297"
            ],
            [
                "Hermine",
                "AAK 194"
            ],
            [
                "Ismael",
                "KLR 244"
            ],
            [
                "James",
                "DRE 156"
            ],
            [
                "Melanie",
                "KLR 333"
            ],
            [
                "Peter",
                "KLR 203E"
            ],
            [
                "Preston",
                "DRE 102"
            ],
            [
                "Ralph",
                "KLR 284"
            ],
            [
                "Robert",
                "DRE 102"
            ],
            [
                "Robert",
                "BBG 208"
            ],
            [
                "Ronald",
                "DRE 156"
            ],
            [
                "Ronald",
                "DRE 208"
            ],
            [
                "Ross",
                "KLR 126"
            ],
            [
                "Van",
                "AAK 160"
            ],
            [
                "Willa",
                "KLR 409B"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (employee:`college_1.EMPLOYEE`)\nRETURN employee.EMP_FNAME,employee.EMP_LNAME\nORDER BY employee.EMP_DOB\nLIMIT 1",
        "question": "What is the first and last name of the oldest employee?",
        "answers": [
            [
                "Robert",
                "Smith"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (employee:`college_1.EMPLOYEE`)\nRETURN employee.EMP_FNAME,employee.EMP_LNAME\nORDER BY employee.EMP_DOB\nLIMIT 1",
        "question": "What are the first and last names of the employee with the earliest date of birth?",
        "answers": [
            [
                "Robert",
                "Smith"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (student:`college_1.STUDENT`)\nWHERE student.STU_GPA > 3\nRETURN student.STU_FNAME,student.STU_LNAME,student.STU_GPA\nORDER BY student.STU_DOB DESC\nLIMIT 1",
        "question": "What is the first, last name, gpa of the youngest one among students whose GPA is above 3?",
        "answers": [
            [
                "Anne",
                "Smithson",
                3.27
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (student:`college_1.STUDENT`)\nWHERE student.STU_GPA > 3\nRETURN student.STU_FNAME,student.STU_LNAME,student.STU_GPA\nORDER BY student.STU_DOB DESC\nLIMIT 1",
        "question": "What is the first and last name of the youngest student with a GPA above 3, and what is their GPA?",
        "answers": [
            [
                "Anne",
                "Smithson",
                3.27
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T2:`college_1.DEPARTMENT`)-[T1:`college_1.PROFESSOR`]-()\nWITH count(T1.DEPT_CODE) AS cnt, T2\nRETURN T2.DEPT_NAME\nORDER BY cnt\nLIMIT 1",
        "question": "What is the name of department where has the smallest number of professors?",
        "answers": [
            [
                "Fine Arts"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T2:`college_1.DEPARTMENT`)-[T1:`college_1.PROFESSOR`]-()\nWITH count(T1.DEPT_CODE) AS cnt, T2\nRETURN T2.DEPT_NAME\nORDER BY cnt\nLIMIT 1",
        "question": "What is the name of the department with the fewest professors?",
        "answers": [
            [
                "Fine Arts"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.EMPLOYEE`)-[T2:`college_1.PROFESSOR`]-(T3:`college_1.DEPARTMENT`)\nWHERE T3.DEPT_NAME = 'History'\nRETURN T1.EMP_LNAME,T2.PROF_OFFICE",
        "question": "What is the last name and office of the professor from the history department?",
        "answers": [
            [
                "Blalock",
                "DRE 156"
            ],
            [
                "Donelly",
                "DRE 156"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.EMPLOYEE`)-[T2:`college_1.PROFESSOR`]-(T3:`college_1.DEPARTMENT`)\nWHERE T3.DEPT_NAME = 'History'\nRETURN T1.EMP_LNAME,T2.PROF_OFFICE",
        "question": "What are the last name and office of all history professors?",
        "answers": [
            [
                "Blalock",
                "DRE 156"
            ],
            [
                "Donelly",
                "DRE 156"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.EMPLOYEE`)-[T2:`college_1.PROFESSOR`]-(T3:`college_1.DEPARTMENT`)\nWHERE T1.EMP_LNAME = 'Heffington'\nRETURN T3.DEPT_NAME,T2.PROF_OFFICE",
        "question": "What is department name and office for the professor whose last name is Heffington?",
        "answers": [
            [
                "Accounting",
                "KLR 229D"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.EMPLOYEE`)-[T2:`college_1.PROFESSOR`]-(T3:`college_1.DEPARTMENT`)\nWHERE T1.EMP_LNAME = 'Heffington'\nRETURN T3.DEPT_NAME,T2.PROF_OFFICE",
        "question": "What is the name of the department and office location for the professor with the last name of Heffington?",
        "answers": [
            [
                "Accounting",
                "KLR 229D"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.EMPLOYEE`)-[T2:`college_1.PROFESSOR`]-()\nWHERE T2.PROF_OFFICE = 'DRE 102'\nRETURN T1.EMP_LNAME,T1.EMP_HIREDATE",
        "question": "Find the last name and hire date of the professor who is in office DRE 102.",
        "answers": [
            [
                "Yukon",
                "1992-5-1"
            ],
            [
                "Smith",
                "1992-8-1"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.EMPLOYEE`)-[T2:`college_1.PROFESSOR`]-()\nWHERE T2.PROF_OFFICE = 'DRE 102'\nRETURN T1.EMP_LNAME,T1.EMP_HIREDATE",
        "question": "What is the last name of the professor whose office is located in DRE 102, and when were they hired?",
        "answers": [
            [
                "Yukon",
                "1992-5-1"
            ],
            [
                "Smith",
                "1992-8-1"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.CLASS`)-[T2:`college_1.ENROLL`]-(T3:`college_1.STUDENT`)\nWHERE T3.STU_LNAME = 'Smithson'\nRETURN T1.CRS_CODE",
        "question": "What is the code of the course which the student whose last name is Smithson took?",
        "answers": [
            [
                "ACCT-211"
            ],
            [
                "CIS-220"
            ],
            [
                "QM-261"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.CLASS`)-[T2:`college_1.ENROLL`]-(T3:`college_1.STUDENT`)\nWHERE T3.STU_LNAME = 'Smithson'\nRETURN T1.CRS_CODE",
        "question": "What are the course codes for every class that the student with the last name Smithson took?",
        "answers": [
            [
                "ACCT-211"
            ],
            [
                "CIS-220"
            ],
            [
                "QM-261"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T2:`college_1.DEPARTMENT`)-[T1:`college_1.PROFESSOR`]-()\nWHERE T2.DEPT_NAME = 'Accounting' OR T2.DEPT_NAME = 'Biology'\nRETURN count(*)",
        "question": "How many professors who are from either Accounting or Biology department?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T2:`college_1.DEPARTMENT`)-[T1:`college_1.PROFESSOR`]-()\nWHERE T2.DEPT_NAME = 'Accounting' OR T2.DEPT_NAME = 'Biology'\nRETURN count(*)",
        "question": "What is the number of professors who are in the Accounting or Biology departments?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (student:`college_1.STUDENT`)\nRETURN student.STU_GPA,student.STU_PHONE,student.STU_FNAME\nORDER BY student.STU_GPA DESC\nLIMIT 5",
        "question": "What is the first name, gpa and phone number of the top 5 students with highest gpa?",
        "answers": [
            [
                3.87,
                "2267",
                "Gerald"
            ],
            [
                3.27,
                "2256",
                "Anne"
            ],
            [
                3.15,
                "2267",
                "Raphael"
            ],
            [
                3.09,
                "2114",
                "Walter"
            ],
            [
                2.92,
                "2315",
                "John"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (student:`college_1.STUDENT`)\nRETURN student.STU_GPA,student.STU_PHONE,student.STU_FNAME\nORDER BY student.STU_GPA DESC\nLIMIT 5",
        "question": "What is the first name, GPA, and phone number of the students with the top 5 GPAs?",
        "answers": [
            [
                3.87,
                "2267",
                "Gerald"
            ],
            [
                3.27,
                "2256",
                "Anne"
            ],
            [
                3.15,
                "2267",
                "Raphael"
            ],
            [
                3.09,
                "2114",
                "Walter"
            ],
            [
                2.92,
                "2315",
                "John"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.STUDENT`)-[]-(T2:`college_1.DEPARTMENT`)\nRETURN T2.DEPT_NAME\nORDER BY T1.STU_GPA\nLIMIT 1",
        "question": "What is the department name of the students with lowest gpa belongs to?",
        "answers": [
            [
                "Accounting"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.STUDENT`)-[]-(T2:`college_1.DEPARTMENT`)\nRETURN T2.DEPT_NAME\nORDER BY T1.STU_GPA\nLIMIT 1",
        "question": "What is the name of the department with the student that has the lowest GPA?",
        "answers": [
            [
                "Accounting"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (student:`college_1.STUDENT`)\nWITH avg(student.STU_GPA) AS stu_gpa\nMATCH (student:`college_1.STUDENT`)\nWHERE  student.STU_GPA <  stu_gpa \nRETURN student.STU_FNAME,student.STU_GPA",
        "question": "Find the first name and gpa of the students whose gpa is lower than the average gpa of all students.",
        "answers": [
            [
                "William",
                2.84
            ],
            [
                "Juliette",
                2.26
            ],
            [
                "John",
                2.11
            ],
            [
                "John",
                2.92
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (student:`college_1.STUDENT`)\nWITH avg(student.STU_GPA) AS stu_gpa\nMATCH (student:`college_1.STUDENT`)\nWHERE  student.STU_GPA <  stu_gpa \nRETURN student.STU_FNAME,student.STU_GPA",
        "question": "What is the first name and GPA of every student that has a GPA lower than average?",
        "answers": [
            [
                "William",
                2.84
            ],
            [
                "Juliette",
                2.26
            ],
            [
                "John",
                2.11
            ],
            [
                "John",
                2.92
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.STUDENT`)-[]-(T2:`college_1.DEPARTMENT`)\nWITH count(T1.DEPT_CODE) AS cnt, T2\nRETURN T2.DEPT_NAME,T2.DEPT_ADDRESS\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Find the name and address of the department that has the highest number of students.",
        "answers": [
            [
                "Accounting",
                "KLR 211, Box 52"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.STUDENT`)-[]-(T2:`college_1.DEPARTMENT`)\nWITH count(T1.DEPT_CODE) AS cnt, T2\nRETURN T2.DEPT_NAME,T2.DEPT_ADDRESS\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the name and address of the department with the most students?",
        "answers": [
            [
                "Accounting",
                "KLR 211, Box 52"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.CLASS`)-[]-(T2:`college_1.EMPLOYEE`)\nRETURN T2.EMP_FNAME,T1.CRS_CODE",
        "question": "Find the first names of all instructors who have taught some course and the course code.",
        "answers": [
            [
                "Arnelle",
                "ACCT-211"
            ],
            [
                "Arnelle",
                "ACCT-211"
            ],
            [
                "Robert",
                "ACCT-211"
            ],
            [
                "Ismael",
                "ACCT-212"
            ],
            [
                "Ismael",
                "ACCT-212"
            ],
            [
                "Carlos",
                "CIS-220"
            ],
            [
                "Gerald",
                "CIS-220"
            ],
            [
                "Carlos",
                "CIS-220"
            ],
            [
                "Peter",
                "CIS-420"
            ],
            [
                "Gerald",
                "QM-261"
            ],
            [
                "Gerald",
                "QM-261"
            ],
            [
                "Peter",
                "QM-362"
            ],
            [
                "Peter",
                "QM-362"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.CLASS`)-[]-(T2:`college_1.EMPLOYEE`)\nRETURN T2.EMP_FNAME,T1.CRS_CODE",
        "question": "What are the first names of all teachers who have taught a course and the corresponding course codes?",
        "answers": [
            [
                "Arnelle",
                "ACCT-211"
            ],
            [
                "Arnelle",
                "ACCT-211"
            ],
            [
                "Robert",
                "ACCT-211"
            ],
            [
                "Ismael",
                "ACCT-212"
            ],
            [
                "Ismael",
                "ACCT-212"
            ],
            [
                "Carlos",
                "CIS-220"
            ],
            [
                "Gerald",
                "CIS-220"
            ],
            [
                "Carlos",
                "CIS-220"
            ],
            [
                "Peter",
                "CIS-420"
            ],
            [
                "Gerald",
                "QM-261"
            ],
            [
                "Gerald",
                "QM-261"
            ],
            [
                "Peter",
                "QM-362"
            ],
            [
                "Peter",
                "QM-362"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.STUDENT`)-[T2:`college_1.ENROLL`]-()\nWHERE T2.ENROLL_GRADE = 'C' OR T2.ENROLL_GRADE = 'A'\nRETURN T1.STU_FNAME,T1.STU_LNAME",
        "question": "Find names of all students who took some course and got A or C.",
        "answers": [
            [
                "William",
                "Bowser"
            ],
            [
                "William",
                "Bowser"
            ],
            [
                "William",
                "Bowser"
            ],
            [
                "Anne",
                "Smithson"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.STUDENT`)-[T2:`college_1.ENROLL`]-()\nWHERE T2.ENROLL_GRADE = 'C' OR T2.ENROLL_GRADE = 'A'\nRETURN T1.STU_FNAME,T1.STU_LNAME",
        "question": "What are the names of all students taking a course who received an A or C?",
        "answers": [
            [
                "William",
                "Bowser"
            ],
            [
                "William",
                "Bowser"
            ],
            [
                "William",
                "Bowser"
            ],
            [
                "Anne",
                "Smithson"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.CLASS`)-[]-(T2:`college_1.EMPLOYEE`)\nWITH count(*) AS count, T2.EMP_FNAME AS EMP_FNAME\nWHERE count  > 1\nRETURN EMP_FNAME",
        "question": "Find the first names of professors who are teaching more than one class.",
        "answers": [
            [
                "Arnelle"
            ],
            [
                "Ismael"
            ],
            [
                "Carlos"
            ],
            [
                "Gerald"
            ],
            [
                "Peter"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.CLASS`)-[]-(T2:`college_1.EMPLOYEE`)\nWITH count(*) AS count, T2.EMP_FNAME AS EMP_FNAME\nWHERE count  > 1\nRETURN EMP_FNAME",
        "question": "What are the first names of all professors who teach more than one class?",
        "answers": [
            [
                "Arnelle"
            ],
            [
                "Ismael"
            ],
            [
                "Carlos"
            ],
            [
                "Gerald"
            ],
            [
                "Peter"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.STUDENT`)-[T2:`college_1.ENROLL`]-()\nWITH count(*) AS count, T1.STU_FNAME AS STU_FNAME\nWHERE count  = 1\nRETURN STU_FNAME",
        "question": "Find the first names of students who took exactly one class.",
        "answers": []
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.STUDENT`)-[T2:`college_1.ENROLL`]-()\nWITH count(*) AS count, T1.STU_FNAME AS STU_FNAME\nWHERE count  = 1\nRETURN STU_FNAME",
        "question": "What are the first names of student who only took one course?",
        "answers": []
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.COURSE`)-[]-(T2:`college_1.DEPARTMENT`)\nWHERE T1.CRS_DESCRIPTION =~'.*[S|s]tatistics.*'\nRETURN T2.DEPT_NAME",
        "question": "Find the name of department that offers the class whose description has the word \"Statistics\".",
        "answers": [
            [
                "Computer Info. Systems"
            ]
        ]
    },
    {
        "db_id": "college_1",
        "query": "MATCH (T1:`college_1.COURSE`)-[]-(T2:`college_1.DEPARTMENT`)\nWHERE T1.CRS_DESCRIPTION =~'.*[S|s]tatistics.*'\nRETURN T2.DEPT_NAME",
        "question": "What is the name of the department that offers a course that has a description including the word \"Statistics\"?",
        "answers": [
            [
                "Computer Info. Systems"
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (club:`sports_competition.club`)\nRETURN count(*)",
        "question": "How many clubs are there?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (club:`sports_competition.club`)\nRETURN count(*)",
        "question": "What is the total number of clubs?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (club:`sports_competition.club`)\nRETURN DISTINCT club.Region\nORDER BY club.Region ASC",
        "question": "List the distinct region of clubs in ascending alphabetical order.",
        "answers": [
            [
                "Brazil"
            ],
            [
                "China"
            ],
            [
                "England"
            ],
            [
                "Japan"
            ],
            [
                "UK"
            ],
            [
                "USA"
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (club:`sports_competition.club`)\nRETURN DISTINCT club.Region\nORDER BY club.Region ASC",
        "question": "What are the different regions of clubs in ascending alphabetical order?",
        "answers": [
            [
                "Brazil"
            ],
            [
                "China"
            ],
            [
                "England"
            ],
            [
                "Japan"
            ],
            [
                "UK"
            ],
            [
                "USA"
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (club_rank:`sports_competition.club_rank`)\nRETURN avg(club_rank.Gold)",
        "question": "What is the average number of gold medals for clubs?",
        "answers": [
            [
                5.833333333333333
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (club_rank:`sports_competition.club_rank`)\nRETURN avg(club_rank.Gold)",
        "question": "What is the average number of gold medals for a club?",
        "answers": [
            [
                5.833333333333333
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (competition:`sports_competition.competition`)\nRETURN competition.Competition_type,competition.Country",
        "question": "What are the types and countries of competitions?",
        "answers": [
            [
                "Friendly",
                "Italy"
            ],
            [
                "Friendly",
                "Spain"
            ],
            [
                "Friendly",
                "Australia"
            ],
            [
                "Friendly",
                "Russia"
            ],
            [
                "Friendly",
                "Russia"
            ],
            [
                "Friendly",
                "Australia"
            ],
            [
                "Tournament",
                "Russia"
            ],
            [
                "Tournament",
                "Slovenia"
            ],
            [
                "Tournament",
                "Slovenia"
            ],
            [
                "Friendly",
                "Italy"
            ],
            [
                "Friendly",
                "Ireland"
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (competition:`sports_competition.competition`)\nRETURN competition.Competition_type,competition.Country",
        "question": "What are the types of every competition and in which countries are they located?",
        "answers": [
            [
                "Friendly",
                "Italy"
            ],
            [
                "Friendly",
                "Spain"
            ],
            [
                "Friendly",
                "Australia"
            ],
            [
                "Friendly",
                "Russia"
            ],
            [
                "Friendly",
                "Russia"
            ],
            [
                "Friendly",
                "Australia"
            ],
            [
                "Tournament",
                "Russia"
            ],
            [
                "Tournament",
                "Slovenia"
            ],
            [
                "Tournament",
                "Slovenia"
            ],
            [
                "Friendly",
                "Italy"
            ],
            [
                "Friendly",
                "Ireland"
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (competition:`sports_competition.competition`)\nWHERE competition.Competition_type <> 'Tournament'\nRETURN DISTINCT competition.Year",
        "question": "What are the distinct years in which the competitions type is not \"Tournament\"?",
        "answers": [
            [
                2006.0
            ],
            [
                2007.0
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (competition:`sports_competition.competition`)\nWHERE competition.Competition_type <> 'Tournament'\nRETURN DISTINCT competition.Year",
        "question": "What are the different years for all competitions that are not of type equal to tournament?",
        "answers": [
            [
                2006.0
            ],
            [
                2007.0
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (club_rank:`sports_competition.club_rank`)\nRETURN max(club_rank.Silver),min(club_rank.Silver)",
        "question": "What are the maximum and minimum number of silver medals for clubs.",
        "answers": [
            [
                11.0,
                1.0
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (club_rank:`sports_competition.club_rank`)\nRETURN max(club_rank.Silver),min(club_rank.Silver)",
        "question": "What are the maximum and minimum number of silver medals for all the clubs?",
        "answers": [
            [
                11.0,
                1.0
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (club_rank:`sports_competition.club_rank`)\nWHERE club_rank.Total < 10\nRETURN count(*)",
        "question": "How many clubs have total medals less than 10?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (club_rank:`sports_competition.club_rank`)\nWHERE club_rank.Total < 10\nRETURN count(*)",
        "question": "What is the total number of clubs that have less than 10 medals in total?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (club:`sports_competition.club`)\nRETURN club.name\nORDER BY club.Start_year ASC",
        "question": "List all club names in ascending order of start year.",
        "answers": [
            [
                "BK Slide"
            ],
            [
                "HGS2"
            ],
            [
                "ASC"
            ],
            [
                "IFG"
            ],
            [
                "AIB"
            ],
            [
                "HSBIF"
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (club:`sports_competition.club`)\nRETURN club.name\nORDER BY club.Start_year ASC",
        "question": "What are the names of all the clubs starting with the oldest?",
        "answers": [
            [
                "BK Slide"
            ],
            [
                "HGS2"
            ],
            [
                "ASC"
            ],
            [
                "IFG"
            ],
            [
                "AIB"
            ],
            [
                "HSBIF"
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (club:`sports_competition.club`)\nRETURN club.name\nORDER BY club.name DESC",
        "question": "List all club names in descending alphabetical order.",
        "answers": [
            [
                "IFG"
            ],
            [
                "HSBIF"
            ],
            [
                "HGS2"
            ],
            [
                "BK Slide"
            ],
            [
                "ASC"
            ],
            [
                "AIB"
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (club:`sports_competition.club`)\nRETURN club.name\nORDER BY club.name DESC",
        "question": "What are the names of all the clubs ordered in descending alphabetical order?",
        "answers": [
            [
                "IFG"
            ],
            [
                "HSBIF"
            ],
            [
                "HGS2"
            ],
            [
                "BK Slide"
            ],
            [
                "ASC"
            ],
            [
                "AIB"
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (T1:`sports_competition.club`)-[]-(T2:`sports_competition.player`)\nRETURN T1.name,T2.Player_ID",
        "question": "Please show the names and the players of clubs.",
        "answers": [
            [
                "AIB",
                1
            ],
            [
                "BK Slide",
                2
            ],
            [
                "AIB",
                3
            ],
            [
                "BK Slide",
                4
            ],
            [
                "ASC",
                5
            ],
            [
                "ASC",
                6
            ],
            [
                "HGS2",
                7
            ],
            [
                "HGS2",
                8
            ],
            [
                "BK Slide",
                9
            ],
            [
                "BK Slide",
                10
            ],
            [
                "BK Slide",
                11
            ],
            [
                "BK Slide",
                12
            ],
            [
                "IFG",
                13
            ],
            [
                "ASC",
                14
            ],
            [
                "ASC",
                15
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (T1:`sports_competition.club`)-[]-(T2:`sports_competition.player`)\nRETURN T1.name,T2.Player_ID",
        "question": "What are the names and players of all the clubs?",
        "answers": [
            [
                "AIB",
                1
            ],
            [
                "BK Slide",
                2
            ],
            [
                "AIB",
                3
            ],
            [
                "BK Slide",
                4
            ],
            [
                "ASC",
                5
            ],
            [
                "ASC",
                6
            ],
            [
                "HGS2",
                7
            ],
            [
                "HGS2",
                8
            ],
            [
                "BK Slide",
                9
            ],
            [
                "BK Slide",
                10
            ],
            [
                "BK Slide",
                11
            ],
            [
                "BK Slide",
                12
            ],
            [
                "IFG",
                13
            ],
            [
                "ASC",
                14
            ],
            [
                "ASC",
                15
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (T1:`sports_competition.club`)-[]-(T2:`sports_competition.player`)\nWHERE T2.Position = 'Right Wing'\nRETURN T1.name",
        "question": "Show the names of clubs that have players with position \"Right Wing\".",
        "answers": [
            [
                "BK Slide"
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (T1:`sports_competition.club`)-[]-(T2:`sports_competition.player`)\nWHERE T2.Position = 'Right Wing'\nRETURN T1.name",
        "question": "What are the names of the clubs that have players in the position of \"Right Wing\"?",
        "answers": [
            [
                "BK Slide"
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (player:`sports_competition.player`)\nRETURN player.Position,avg(player.Points)",
        "question": "List the position of players and the average number of points of players of each position.",
        "answers": [
            [
                "Full Back",
                20.0
            ],
            [
                "Right Wing",
                36.0
            ],
            [
                "Right Centre",
                36.0
            ],
            [
                "Left Wing",
                12.0
            ],
            [
                "Stand Off",
                110.0
            ],
            [
                "Scrum Half",
                188.0
            ],
            [
                "Prop",
                9.333333333333334
            ],
            [
                "Hooker",
                36.0
            ],
            [
                "Second Row",
                20.0
            ],
            [
                "Loose Forward",
                20.0
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (player:`sports_competition.player`)\nRETURN player.Position,avg(player.Points)",
        "question": "For each position, what is the average number of points for players in that position?",
        "answers": [
            [
                "Full Back",
                20.0
            ],
            [
                "Right Wing",
                36.0
            ],
            [
                "Right Centre",
                36.0
            ],
            [
                "Left Wing",
                12.0
            ],
            [
                "Stand Off",
                110.0
            ],
            [
                "Scrum Half",
                188.0
            ],
            [
                "Prop",
                9.333333333333334
            ],
            [
                "Hooker",
                36.0
            ],
            [
                "Second Row",
                20.0
            ],
            [
                "Loose Forward",
                20.0
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (competition:`sports_competition.competition`)\nRETURN competition.Competition_type,count(*)",
        "question": "List the types of competition and the number of competitions of each type.",
        "answers": [
            [
                "Friendly",
                8
            ],
            [
                "Tournament",
                3
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (competition:`sports_competition.competition`)\nRETURN competition.Competition_type,count(*)",
        "question": "What are the types of competition and number of competitions for that type?",
        "answers": [
            [
                "Friendly",
                8
            ],
            [
                "Tournament",
                3
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (competition:`sports_competition.competition`)\nWITH count(*) AS count, competition.Competition_type AS Competition_type\nWHERE count  <= 5\nRETURN Competition_type",
        "question": "List the types of competition that have at most five competitions of that type.",
        "answers": [
            [
                "Tournament"
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (competition:`sports_competition.competition`)\nWITH count(*) AS count, competition.Competition_type AS Competition_type\nWHERE count  <= 5\nRETURN Competition_type",
        "question": "What are the types of competition that have most 5 competitions for that type?",
        "answers": [
            [
                "Tournament"
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (club:`sports_competition.club`)\nWHERE NOT (club)-[]-(:`sports_competition.player`)    \nRETURN club.name",
        "question": "List the names of clubs that do not have any players.",
        "answers": [
            [
                "HSBIF"
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (club:`sports_competition.club`)\nWHERE NOT (club)-[]-(:`sports_competition.player`)    \nRETURN club.name",
        "question": "What are the names of all clubs that do not have any players?",
        "answers": [
            [
                "HSBIF"
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (player:`sports_competition.player`)\nRETURN count(DISTINCT player.Position)",
        "question": "how many different positions are there?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (player:`sports_competition.player`)\nRETURN count(DISTINCT player.Position)",
        "question": "How many different position for players are listed?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (player:`sports_competition.player`)\nWITH avg(player.Points) AS points\nMATCH (player:`sports_competition.player`)\nWHERE  player.Points >  points \nRETURN player.name",
        "question": "what are the name of players who get more than the average points.",
        "answers": [
            [
                "Iestyn Harris"
            ],
            [
                "Paul Deacon (c)"
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (player:`sports_competition.player`)\nWITH avg(player.Points) AS points\nMATCH (player:`sports_competition.player`)\nWHERE  player.Points >  points \nRETURN player.name",
        "question": "What are the names of all players that got more than the average number of points?",
        "answers": [
            [
                "Iestyn Harris"
            ],
            [
                "Paul Deacon (c)"
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (player:`sports_competition.player`)\nWHERE player.Points < 30\nRETURN count(*),player.Position",
        "question": "find the number of players whose points are lower than 30 in each position.",
        "answers": [
            [
                1,
                "Full Back"
            ],
            [
                1,
                "Left Wing"
            ],
            [
                3,
                "Prop"
            ],
            [
                3,
                "Second Row"
            ],
            [
                1,
                "Loose Forward"
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (player:`sports_competition.player`)\nWHERE player.Points < 30\nRETURN count(*),player.Position",
        "question": "What is the number of players who have points less than 30 for each position?",
        "answers": [
            [
                1,
                "Full Back"
            ],
            [
                1,
                "Left Wing"
            ],
            [
                3,
                "Prop"
            ],
            [
                3,
                "Second Row"
            ],
            [
                1,
                "Loose Forward"
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (competition:`sports_competition.competition`)\nWHERE competition.Competition_type = 'Tournament'\nRETURN competition.Country\nORDER BY competition.Country DESC\nLIMIT 1",
        "question": "which country did participated in the most number of Tournament competitions?",
        "answers": [
            [
                "Slovenia"
            ]
        ]
    },
    {
        "db_id": "sports_competition",
        "query": "MATCH (competition:`sports_competition.competition`)\nWHERE competition.Competition_type = 'Tournament'\nRETURN competition.Country\nORDER BY competition.Country DESC\nLIMIT 1",
        "question": "what is the name of the country that participated in the most tournament competitions?",
        "answers": [
            [
                "Slovenia"
            ]
        ]
    },
    {
        "db_id": "manufacturer",
        "query": "MATCH (furniture:`manufacturer.furniture`)\nRETURN furniture.Name,furniture.Furniture_ID\nORDER BY furniture.Market_Rate DESC\nLIMIT 1",
        "question": "Return the name and id of the furniture with the highest market rate.",
        "answers": [
            [
                "Billiard table",
                1
            ]
        ]
    },
    {
        "db_id": "manufacturer",
        "query": "MATCH (furniture:`manufacturer.furniture`)\nWHERE furniture.Num_of_Component > 10\nRETURN furniture.Num_of_Component,furniture.Name",
        "question": "Find the component amounts and names of all furnitures that have more than 10 components.",
        "answers": [
            [
                14,
                "Billiard table"
            ],
            [
                12,
                "Dining set"
            ]
        ]
    },
    {
        "db_id": "manufacturer",
        "query": "MATCH (furniture:`manufacturer.furniture`)\nRETURN furniture.Name,furniture.Num_of_Component\nORDER BY furniture.Market_Rate\nLIMIT 1",
        "question": "Find the name and component amount of the least popular furniture.",
        "answers": [
            [
                "Hatstand",
                5
            ]
        ]
    },
    {
        "db_id": "manufacturer",
        "query": "MATCH (manufacturer:`manufacturer.manufacturer`)\nRETURN manufacturer.Open_Year,manufacturer.Name\nORDER BY manufacturer.Num_of_Shops DESC\nLIMIT 1",
        "question": "Which manufacturer has the most number of shops? List its name and year of opening.",
        "answers": [
            [
                1992.0,
                "Jiaju"
            ]
        ]
    },
    {
        "db_id": "manufacturer",
        "query": "MATCH (manufacturer:`manufacturer.manufacturer`)\nWHERE manufacturer.Num_of_Shops > 20\nRETURN avg(manufacturer.Num_of_Factories)",
        "question": "Find the average number of factories for the manufacturers that have more than 20 shops.",
        "answers": [
            [
                19.5
            ]
        ]
    },
    {
        "db_id": "manufacturer",
        "query": "MATCH (manufacturer:`manufacturer.manufacturer`)\nRETURN manufacturer.Name,manufacturer.Manufacturer_ID\nORDER BY manufacturer.Open_Year",
        "question": "List all manufacturer names and ids ordered by their opening year.",
        "answers": [
            [
                "Chevrolet House",
                1
            ],
            [
                "IKEA",
                2
            ],
            [
                "Ford Make",
                3
            ],
            [
                "Jiaju",
                4
            ],
            [
                "Chevrolet",
                5
            ],
            [
                "Dodge",
                6
            ],
            [
                "Tomorrow",
                7
            ]
        ]
    },
    {
        "db_id": "manufacturer",
        "query": "MATCH (manufacturer:`manufacturer.manufacturer`)\nWHERE manufacturer.Num_of_Shops > 10 OR manufacturer.Num_of_Factories < 10\nRETURN manufacturer.Name,manufacturer.Open_Year",
        "question": "Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops.",
        "answers": [
            [
                "IKEA",
                1990.0
            ],
            [
                "Jiaju",
                1992.0
            ],
            [
                "Chevrolet",
                2000.0
            ],
            [
                "Dodge",
                2001.0
            ]
        ]
    },
    {
        "db_id": "manufacturer",
        "query": "MATCH (manufacturer:`manufacturer.manufacturer`)\nWHERE manufacturer.Open_Year < 1990\nRETURN max(manufacturer.Num_of_Shops),avg(manufacturer.Num_of_Factories)",
        "question": "what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.",
        "answers": [
            [
                8,
                36.0
            ]
        ]
    },
    {
        "db_id": "manufacturer",
        "query": "MATCH (t1:`manufacturer.manufacturer`)-[t2:`manufacturer.furniture_manufacte`]-()\nRETURN t1.Manufacturer_ID,t1.Num_of_Shops\nORDER BY t2.Price_in_Dollar DESC\nLIMIT 1",
        "question": "Find the id and number of shops for the company that produces the most expensive furniture.",
        "answers": [
            [
                7,
                4
            ]
        ]
    },
    {
        "db_id": "manufacturer",
        "query": "MATCH (t1:`manufacturer.manufacturer`)-[t2:`manufacturer.furniture_manufacte`]-()\nRETURN count(*),t1.Name",
        "question": "Find the number of funiture types produced by each manufacturer as well as the company names.",
        "answers": [
            [
                1,
                "Chevrolet House"
            ],
            [
                1,
                "Jiaju"
            ],
            [
                1,
                "Chevrolet"
            ],
            [
                2,
                "Tomorrow"
            ]
        ]
    },
    {
        "db_id": "manufacturer",
        "query": "MATCH (t1:`manufacturer.furniture`)-[t2:`manufacturer.furniture_manufacte`]-()\nRETURN t1.Name,t2.Price_in_Dollar",
        "question": "Give me the names and prices of furnitures which some companies are manufacturing.",
        "answers": [
            [
                "Billiard table",
                443.0
            ],
            [
                "Chabudai",
                450.0
            ],
            [
                "Bookcase",
                239.0
            ],
            [
                "Hatstand",
                1234.0
            ],
            [
                "Dining set",
                2124.0
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (T1:`hr_1.employees`)-[]-(T2:`hr_1.departments`)\nRETURN T1.FIRST_NAME,T2.DEPARTMENT_NAME",
        "question": "Display the first name and department name for each employee.",
        "answers": [
            [
                "Jennifer",
                "Administration"
            ],
            [
                "Michael",
                "Marketing"
            ],
            [
                "Pat",
                "Marketing"
            ],
            [
                "Alexander",
                "Purchasing"
            ],
            [
                "Karen",
                "Purchasing"
            ],
            [
                "Shelli",
                "Purchasing"
            ],
            [
                "Den",
                "Purchasing"
            ],
            [
                "Sigal",
                "Purchasing"
            ],
            [
                "Guy",
                "Purchasing"
            ],
            [
                "Susan",
                "Human Resources"
            ],
            [
                "Martha",
                "Shipping"
            ],
            [
                "Trenna",
                "Shipping"
            ],
            [
                "Joshua",
                "Shipping"
            ],
            [
                "Sarah",
                "Shipping"
            ],
            [
                "Randall",
                "Shipping"
            ],
            [
                "Jean",
                "Shipping"
            ],
            [
                "Michael",
                "Shipping"
            ],
            [
                "Vance",
                "Shipping"
            ],
            [
                "Timothy",
                "Shipping"
            ],
            [
                "Douglas",
                "Shipping"
            ],
            [
                "Kevin",
                "Shipping"
            ],
            [
                "Girard",
                "Shipping"
            ],
            [
                "Donald",
                "Shipping"
            ],
            [
                "Laura",
                "Shipping"
            ],
            [
                "Ki",
                "Shipping"
            ],
            [
                "Winston",
                "Shipping"
            ],
            [
                "Kelly",
                "Shipping"
            ],
            [
                "Alexis",
                "Shipping"
            ],
            [
                "Matthew",
                "Shipping"
            ],
            [
                "Jason",
                "Shipping"
            ],
            [
                "John",
                "Shipping"
            ],
            [
                "Renske",
                "Shipping"
            ],
            [
                "Peter",
                "Shipping"
            ],
            [
                "Adam",
                "Shipping"
            ],
            [
                "Julia",
                "Shipping"
            ],
            [
                "Irene",
                "Shipping"
            ],
            [
                "Randall",
                "Shipping"
            ],
            [
                "TJ",
                "Shipping"
            ],
            [
                "Julia",
                "Shipping"
            ],
            [
                "Samuel",
                "Shipping"
            ],
            [
                "Steven",
                "Shipping"
            ],
            [
                "Curtis",
                "Shipping"
            ],
            [
                "Jennifer",
                "Shipping"
            ],
            [
                "Britney",
                "Shipping"
            ],
            [
                "Mozhe",
                "Shipping"
            ],
            [
                "Kevin",
                "Shipping"
            ],
            [
                "Alana",
                "Shipping"
            ],
            [
                "Anthony",
                "Shipping"
            ],
            [
                "James",
                "Shipping"
            ],
            [
                "Shanta",
                "Shipping"
            ],
            [
                "Hazel",
                "Shipping"
            ],
            [
                "Payam",
                "Shipping"
            ],
            [
                "James",
                "Shipping"
            ],
            [
                "Stephen",
                "Shipping"
            ],
            [
                "Nandita",
                "Shipping"
            ],
            [
                "Valli",
                "IT"
            ],
            [
                "Alexander",
                "IT"
            ],
            [
                "David",
                "IT"
            ],
            [
                "Diana",
                "IT"
            ],
            [
                "Bruce",
                "IT"
            ],
            [
                "Hermann",
                "Public Relations"
            ],
            [
                "Janette",
                "Sales"
            ],
            [
                "Christopher",
                "Sales"
            ],
            [
                "Amit",
                "Sales"
            ],
            [
                "Alberto",
                "Sales"
            ],
            [
                "Elizabeth",
                "Sales"
            ],
            [
                "Lindsey",
                "Sales"
            ],
            [
                "Harrison",
                "Sales"
            ],
            [
                "Patrick",
                "Sales"
            ],
            [
                "Jack",
                "Sales"
            ],
            [
                "Sundita",
                "Sales"
            ],
            [
                "Peter",
                "Sales"
            ],
            [
                "Karen",
                "Sales"
            ],
            [
                "Gerald",
                "Sales"
            ],
            [
                "Sarath",
                "Sales"
            ],
            [
                "David",
                "Sales"
            ],
            [
                "Jonathon",
                "Sales"
            ],
            [
                "David",
                "Sales"
            ],
            [
                "Alyssa",
                "Sales"
            ],
            [
                "William",
                "Sales"
            ],
            [
                "Eleni",
                "Sales"
            ],
            [
                "Nanette",
                "Sales"
            ],
            [
                "John",
                "Sales"
            ],
            [
                "Mattea",
                "Sales"
            ],
            [
                "Danielle",
                "Sales"
            ],
            [
                "Ellen",
                "Sales"
            ],
            [
                "Tayler",
                "Sales"
            ],
            [
                "Peter",
                "Sales"
            ],
            [
                "Sundar",
                "Sales"
            ],
            [
                "Oliver",
                "Sales"
            ],
            [
                "Allan",
                "Sales"
            ],
            [
                "Charles",
                "Sales"
            ],
            [
                "Clara",
                "Sales"
            ],
            [
                "Louise",
                "Sales"
            ],
            [
                "Lisa",
                "Sales"
            ],
            [
                "Lex",
                "Executive"
            ],
            [
                "Neena",
                "Executive"
            ],
            [
                "Steven",
                "Executive"
            ],
            [
                "Jose Manuel",
                "Finance"
            ],
            [
                "Luis",
                "Finance"
            ],
            [
                "Daniel",
                "Finance"
            ],
            [
                "John",
                "Finance"
            ],
            [
                "Nancy",
                "Finance"
            ],
            [
                "Ismael",
                "Finance"
            ],
            [
                "William",
                "Accounting"
            ],
            [
                "Shelley",
                "Accounting"
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (T1:`hr_1.employees`)-[]-(T2:`hr_1.departments`)\nRETURN T1.FIRST_NAME,T2.DEPARTMENT_NAME",
        "question": "What are the first name and department name of all employees?",
        "answers": [
            [
                "Jennifer",
                "Administration"
            ],
            [
                "Michael",
                "Marketing"
            ],
            [
                "Pat",
                "Marketing"
            ],
            [
                "Alexander",
                "Purchasing"
            ],
            [
                "Karen",
                "Purchasing"
            ],
            [
                "Shelli",
                "Purchasing"
            ],
            [
                "Den",
                "Purchasing"
            ],
            [
                "Sigal",
                "Purchasing"
            ],
            [
                "Guy",
                "Purchasing"
            ],
            [
                "Susan",
                "Human Resources"
            ],
            [
                "Martha",
                "Shipping"
            ],
            [
                "Trenna",
                "Shipping"
            ],
            [
                "Joshua",
                "Shipping"
            ],
            [
                "Sarah",
                "Shipping"
            ],
            [
                "Randall",
                "Shipping"
            ],
            [
                "Jean",
                "Shipping"
            ],
            [
                "Michael",
                "Shipping"
            ],
            [
                "Vance",
                "Shipping"
            ],
            [
                "Timothy",
                "Shipping"
            ],
            [
                "Douglas",
                "Shipping"
            ],
            [
                "Kevin",
                "Shipping"
            ],
            [
                "Girard",
                "Shipping"
            ],
            [
                "Donald",
                "Shipping"
            ],
            [
                "Laura",
                "Shipping"
            ],
            [
                "Ki",
                "Shipping"
            ],
            [
                "Winston",
                "Shipping"
            ],
            [
                "Kelly",
                "Shipping"
            ],
            [
                "Alexis",
                "Shipping"
            ],
            [
                "Matthew",
                "Shipping"
            ],
            [
                "Jason",
                "Shipping"
            ],
            [
                "John",
                "Shipping"
            ],
            [
                "Renske",
                "Shipping"
            ],
            [
                "Peter",
                "Shipping"
            ],
            [
                "Adam",
                "Shipping"
            ],
            [
                "Julia",
                "Shipping"
            ],
            [
                "Irene",
                "Shipping"
            ],
            [
                "Randall",
                "Shipping"
            ],
            [
                "TJ",
                "Shipping"
            ],
            [
                "Julia",
                "Shipping"
            ],
            [
                "Samuel",
                "Shipping"
            ],
            [
                "Steven",
                "Shipping"
            ],
            [
                "Curtis",
                "Shipping"
            ],
            [
                "Jennifer",
                "Shipping"
            ],
            [
                "Britney",
                "Shipping"
            ],
            [
                "Mozhe",
                "Shipping"
            ],
            [
                "Kevin",
                "Shipping"
            ],
            [
                "Alana",
                "Shipping"
            ],
            [
                "Anthony",
                "Shipping"
            ],
            [
                "James",
                "Shipping"
            ],
            [
                "Shanta",
                "Shipping"
            ],
            [
                "Hazel",
                "Shipping"
            ],
            [
                "Payam",
                "Shipping"
            ],
            [
                "James",
                "Shipping"
            ],
            [
                "Stephen",
                "Shipping"
            ],
            [
                "Nandita",
                "Shipping"
            ],
            [
                "Valli",
                "IT"
            ],
            [
                "Alexander",
                "IT"
            ],
            [
                "David",
                "IT"
            ],
            [
                "Diana",
                "IT"
            ],
            [
                "Bruce",
                "IT"
            ],
            [
                "Hermann",
                "Public Relations"
            ],
            [
                "Janette",
                "Sales"
            ],
            [
                "Christopher",
                "Sales"
            ],
            [
                "Amit",
                "Sales"
            ],
            [
                "Alberto",
                "Sales"
            ],
            [
                "Elizabeth",
                "Sales"
            ],
            [
                "Lindsey",
                "Sales"
            ],
            [
                "Harrison",
                "Sales"
            ],
            [
                "Patrick",
                "Sales"
            ],
            [
                "Jack",
                "Sales"
            ],
            [
                "Sundita",
                "Sales"
            ],
            [
                "Peter",
                "Sales"
            ],
            [
                "Karen",
                "Sales"
            ],
            [
                "Gerald",
                "Sales"
            ],
            [
                "Sarath",
                "Sales"
            ],
            [
                "David",
                "Sales"
            ],
            [
                "Jonathon",
                "Sales"
            ],
            [
                "David",
                "Sales"
            ],
            [
                "Alyssa",
                "Sales"
            ],
            [
                "William",
                "Sales"
            ],
            [
                "Eleni",
                "Sales"
            ],
            [
                "Nanette",
                "Sales"
            ],
            [
                "John",
                "Sales"
            ],
            [
                "Mattea",
                "Sales"
            ],
            [
                "Danielle",
                "Sales"
            ],
            [
                "Ellen",
                "Sales"
            ],
            [
                "Tayler",
                "Sales"
            ],
            [
                "Peter",
                "Sales"
            ],
            [
                "Sundar",
                "Sales"
            ],
            [
                "Oliver",
                "Sales"
            ],
            [
                "Allan",
                "Sales"
            ],
            [
                "Charles",
                "Sales"
            ],
            [
                "Clara",
                "Sales"
            ],
            [
                "Louise",
                "Sales"
            ],
            [
                "Lisa",
                "Sales"
            ],
            [
                "Lex",
                "Executive"
            ],
            [
                "Neena",
                "Executive"
            ],
            [
                "Steven",
                "Executive"
            ],
            [
                "Jose Manuel",
                "Finance"
            ],
            [
                "Luis",
                "Finance"
            ],
            [
                "Daniel",
                "Finance"
            ],
            [
                "John",
                "Finance"
            ],
            [
                "Nancy",
                "Finance"
            ],
            [
                "Ismael",
                "Finance"
            ],
            [
                "William",
                "Accounting"
            ],
            [
                "Shelley",
                "Accounting"
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE employees.SALARY < 6000\nRETURN employees.FIRST_NAME,employees.LAST_NAME,employees.SALARY",
        "question": "List the full name (first and last name), and salary for those employees who earn below 6000.",
        "answers": [
            [
                "David",
                "Austin",
                4800
            ],
            [
                "Valli",
                "Pataballa",
                4800
            ],
            [
                "Diana",
                "Lorentz",
                4200
            ],
            [
                "Alexander",
                "Khoo",
                3100
            ],
            [
                "Shelli",
                "Baida",
                2900
            ],
            [
                "Sigal",
                "Tobias",
                2800
            ],
            [
                "Guy",
                "Himuro",
                2600
            ],
            [
                "Karen",
                "Colmenares",
                2500
            ],
            [
                "Kevin",
                "Mourgos",
                5800
            ],
            [
                "Julia",
                "Nayer",
                3200
            ],
            [
                "Irene",
                "Mikkilineni",
                2700
            ],
            [
                "James",
                "Landry",
                2400
            ],
            [
                "Steven",
                "Markle",
                2200
            ],
            [
                "Laura",
                "Bissot",
                3300
            ],
            [
                "Mozhe",
                "Atkinson",
                2800
            ],
            [
                "James",
                "Marlow",
                2500
            ],
            [
                "TJ",
                "Olson",
                2100
            ],
            [
                "Jason",
                "Mallin",
                3300
            ],
            [
                "Michael",
                "Rogers",
                2900
            ],
            [
                "Ki",
                "Gee",
                2400
            ],
            [
                "Hazel",
                "Philtanker",
                2200
            ],
            [
                "Renske",
                "Ladwig",
                3600
            ],
            [
                "Stephen",
                "Stiles",
                3200
            ],
            [
                "John",
                "Seo",
                2700
            ],
            [
                "Joshua",
                "Patel",
                2500
            ],
            [
                "Trenna",
                "Rajs",
                3500
            ],
            [
                "Curtis",
                "Davies",
                3100
            ],
            [
                "Randall",
                "Matos",
                2600
            ],
            [
                "Peter",
                "Vargas",
                2500
            ],
            [
                "Winston",
                "Taylor",
                3200
            ],
            [
                "Jean",
                "Fleaur",
                3100
            ],
            [
                "Martha",
                "Sullivan",
                2500
            ],
            [
                "Girard",
                "Geoni",
                2800
            ],
            [
                "Nandita",
                "Sarchand",
                4200
            ],
            [
                "Alexis",
                "Bull",
                4100
            ],
            [
                "Julia",
                "Dellinger",
                3400
            ],
            [
                "Anthony",
                "Cabrio",
                3000
            ],
            [
                "Kelly",
                "Chung",
                3800
            ],
            [
                "Jennifer",
                "Dilly",
                3600
            ],
            [
                "Timothy",
                "Gates",
                2900
            ],
            [
                "Randall",
                "Perkins",
                2500
            ],
            [
                "Sarah",
                "Bell",
                4000
            ],
            [
                "Britney",
                "Everett",
                3900
            ],
            [
                "Samuel",
                "McCain",
                3200
            ],
            [
                "Vance",
                "Jones",
                2800
            ],
            [
                "Alana",
                "Walsh",
                3100
            ],
            [
                "Kevin",
                "Feeney",
                3000
            ],
            [
                "Donald",
                "OConnell",
                2600
            ],
            [
                "Douglas",
                "Grant",
                2600
            ],
            [
                "Jennifer",
                "Whalen",
                4400
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE employees.SALARY < 6000\nRETURN employees.FIRST_NAME,employees.LAST_NAME,employees.SALARY",
        "question": "What are the full names and salaries for any employees earning less than 6000?",
        "answers": [
            [
                "David",
                "Austin",
                4800
            ],
            [
                "Valli",
                "Pataballa",
                4800
            ],
            [
                "Diana",
                "Lorentz",
                4200
            ],
            [
                "Alexander",
                "Khoo",
                3100
            ],
            [
                "Shelli",
                "Baida",
                2900
            ],
            [
                "Sigal",
                "Tobias",
                2800
            ],
            [
                "Guy",
                "Himuro",
                2600
            ],
            [
                "Karen",
                "Colmenares",
                2500
            ],
            [
                "Kevin",
                "Mourgos",
                5800
            ],
            [
                "Julia",
                "Nayer",
                3200
            ],
            [
                "Irene",
                "Mikkilineni",
                2700
            ],
            [
                "James",
                "Landry",
                2400
            ],
            [
                "Steven",
                "Markle",
                2200
            ],
            [
                "Laura",
                "Bissot",
                3300
            ],
            [
                "Mozhe",
                "Atkinson",
                2800
            ],
            [
                "James",
                "Marlow",
                2500
            ],
            [
                "TJ",
                "Olson",
                2100
            ],
            [
                "Jason",
                "Mallin",
                3300
            ],
            [
                "Michael",
                "Rogers",
                2900
            ],
            [
                "Ki",
                "Gee",
                2400
            ],
            [
                "Hazel",
                "Philtanker",
                2200
            ],
            [
                "Renske",
                "Ladwig",
                3600
            ],
            [
                "Stephen",
                "Stiles",
                3200
            ],
            [
                "John",
                "Seo",
                2700
            ],
            [
                "Joshua",
                "Patel",
                2500
            ],
            [
                "Trenna",
                "Rajs",
                3500
            ],
            [
                "Curtis",
                "Davies",
                3100
            ],
            [
                "Randall",
                "Matos",
                2600
            ],
            [
                "Peter",
                "Vargas",
                2500
            ],
            [
                "Winston",
                "Taylor",
                3200
            ],
            [
                "Jean",
                "Fleaur",
                3100
            ],
            [
                "Martha",
                "Sullivan",
                2500
            ],
            [
                "Girard",
                "Geoni",
                2800
            ],
            [
                "Nandita",
                "Sarchand",
                4200
            ],
            [
                "Alexis",
                "Bull",
                4100
            ],
            [
                "Julia",
                "Dellinger",
                3400
            ],
            [
                "Anthony",
                "Cabrio",
                3000
            ],
            [
                "Kelly",
                "Chung",
                3800
            ],
            [
                "Jennifer",
                "Dilly",
                3600
            ],
            [
                "Timothy",
                "Gates",
                2900
            ],
            [
                "Randall",
                "Perkins",
                2500
            ],
            [
                "Sarah",
                "Bell",
                4000
            ],
            [
                "Britney",
                "Everett",
                3900
            ],
            [
                "Samuel",
                "McCain",
                3200
            ],
            [
                "Vance",
                "Jones",
                2800
            ],
            [
                "Alana",
                "Walsh",
                3100
            ],
            [
                "Kevin",
                "Feeney",
                3000
            ],
            [
                "Donald",
                "OConnell",
                2600
            ],
            [
                "Douglas",
                "Grant",
                2600
            ],
            [
                "Jennifer",
                "Whalen",
                4400
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE employees.LAST_NAME = 'McEwen'\nRETURN employees.FIRST_NAME,employees.DEPARTMENT_ID",
        "question": "Display the first name, and department number for all employees whose last name is \"McEwen\".",
        "answers": [
            [
                "Allan",
                80
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE employees.LAST_NAME = 'McEwen'\nRETURN employees.FIRST_NAME,employees.DEPARTMENT_ID",
        "question": "What are the first names and department numbers for employees with last name McEwen?",
        "answers": [
            [
                "Allan",
                80
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE 8000<=employees.SALARY<=12000\nRETURN employees.PHONE_NUMBER",
        "question": "what is the phone number of employees whose salary is in the range of 8000 and 12000?",
        "answers": [
            [
                "590.423.4567"
            ],
            [
                "515.124.4569"
            ],
            [
                "515.124.4169"
            ],
            [
                "515.124.4269"
            ],
            [
                "515.127.4561"
            ],
            [
                "650.123.1234"
            ],
            [
                "650.123.2234"
            ],
            [
                "011.44.1344.429278"
            ],
            [
                "011.44.1344.619268"
            ],
            [
                "011.44.1344.429018"
            ],
            [
                "011.44.1344.129268"
            ],
            [
                "011.44.1344.345268"
            ],
            [
                "011.44.1344.478968"
            ],
            [
                "011.44.1344.498718"
            ],
            [
                "011.44.1345.429268"
            ],
            [
                "011.44.1345.929268"
            ],
            [
                "011.44.1345.829268"
            ],
            [
                "011.44.1345.729268"
            ],
            [
                "011.44.1346.129268"
            ],
            [
                "011.44.1346.229268"
            ],
            [
                "011.44.1343.929268"
            ],
            [
                "011.44.1343.829268"
            ],
            [
                "011.44.1343.729268"
            ],
            [
                "011.44.1644.429267"
            ],
            [
                "011.44.1644.429266"
            ],
            [
                "011.44.1644.429265"
            ],
            [
                "011.44.1644.429264"
            ],
            [
                "515.123.8888"
            ],
            [
                "515.123.8080"
            ],
            [
                "515.123.8181"
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE 8000<=employees.SALARY<=12000\nRETURN employees.PHONE_NUMBER",
        "question": "Return the phone numbers of employees with salaries between 8000 and 12000.",
        "answers": [
            [
                "590.423.4567"
            ],
            [
                "515.124.4569"
            ],
            [
                "515.124.4169"
            ],
            [
                "515.124.4269"
            ],
            [
                "515.127.4561"
            ],
            [
                "650.123.1234"
            ],
            [
                "650.123.2234"
            ],
            [
                "011.44.1344.429278"
            ],
            [
                "011.44.1344.619268"
            ],
            [
                "011.44.1344.429018"
            ],
            [
                "011.44.1344.129268"
            ],
            [
                "011.44.1344.345268"
            ],
            [
                "011.44.1344.478968"
            ],
            [
                "011.44.1344.498718"
            ],
            [
                "011.44.1345.429268"
            ],
            [
                "011.44.1345.929268"
            ],
            [
                "011.44.1345.829268"
            ],
            [
                "011.44.1345.729268"
            ],
            [
                "011.44.1346.129268"
            ],
            [
                "011.44.1346.229268"
            ],
            [
                "011.44.1343.929268"
            ],
            [
                "011.44.1343.829268"
            ],
            [
                "011.44.1343.729268"
            ],
            [
                "011.44.1644.429267"
            ],
            [
                "011.44.1644.429266"
            ],
            [
                "011.44.1644.429265"
            ],
            [
                "011.44.1644.429264"
            ],
            [
                "515.123.8888"
            ],
            [
                "515.123.8080"
            ],
            [
                "515.123.8181"
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE '2007-11-05'<=employees.HIRE_DATE<='2009-07-05'\nRETURN employees.JOB_ID,employees.HIRE_DATE",
        "question": "Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.",
        "answers": []
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE '2007-11-05'<=employees.HIRE_DATE<='2009-07-05'\nRETURN employees.JOB_ID,employees.HIRE_DATE",
        "question": "What are the job ids and dates of hire for employees hired after November 5th, 2007 and before July 5th, 2009?",
        "answers": []
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE employees.DEPARTMENT_ID = 70 OR employees.DEPARTMENT_ID = 90\nRETURN employees.FIRST_NAME,employees.LAST_NAME",
        "question": "What are the first and last name for those employees who works either in department 70 or 90?",
        "answers": [
            [
                "Steven",
                "King"
            ],
            [
                "Neena",
                "Kochhar"
            ],
            [
                "Lex",
                "De Haan"
            ],
            [
                "Hermann",
                "Baer"
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE employees.DEPARTMENT_ID = 70 OR employees.DEPARTMENT_ID = 90\nRETURN employees.FIRST_NAME,employees.LAST_NAME",
        "question": "What are the full names of employees who with in department 70 or 90?",
        "answers": [
            [
                "Steven",
                "King"
            ],
            [
                "Neena",
                "Kochhar"
            ],
            [
                "Lex",
                "De Haan"
            ],
            [
                "Hermann",
                "Baer"
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE exists(employees.MANAGER_ID)\nRETURN employees.SALARY,employees.MANAGER_ID",
        "question": "Find the salary and manager number for those employees who is working under a manager.",
        "answers": [
            [
                24000,
                0
            ],
            [
                17000,
                100
            ],
            [
                17000,
                100
            ],
            [
                9000,
                102
            ],
            [
                6000,
                103
            ],
            [
                4800,
                103
            ],
            [
                4800,
                103
            ],
            [
                4200,
                103
            ],
            [
                12000,
                101
            ],
            [
                9000,
                108
            ],
            [
                8200,
                108
            ],
            [
                7700,
                108
            ],
            [
                7800,
                108
            ],
            [
                6900,
                108
            ],
            [
                11000,
                100
            ],
            [
                3100,
                114
            ],
            [
                2900,
                114
            ],
            [
                2800,
                114
            ],
            [
                2600,
                114
            ],
            [
                2500,
                114
            ],
            [
                8000,
                100
            ],
            [
                8200,
                100
            ],
            [
                7900,
                100
            ],
            [
                6500,
                100
            ],
            [
                5800,
                100
            ],
            [
                3200,
                120
            ],
            [
                2700,
                120
            ],
            [
                2400,
                120
            ],
            [
                2200,
                120
            ],
            [
                3300,
                121
            ],
            [
                2800,
                121
            ],
            [
                2500,
                121
            ],
            [
                2100,
                121
            ],
            [
                3300,
                122
            ],
            [
                2900,
                122
            ],
            [
                2400,
                122
            ],
            [
                2200,
                122
            ],
            [
                3600,
                123
            ],
            [
                3200,
                123
            ],
            [
                2700,
                123
            ],
            [
                2500,
                123
            ],
            [
                3500,
                124
            ],
            [
                3100,
                124
            ],
            [
                2600,
                124
            ],
            [
                2500,
                124
            ],
            [
                14000,
                100
            ],
            [
                13500,
                100
            ],
            [
                12000,
                100
            ],
            [
                11000,
                100
            ],
            [
                10500,
                100
            ],
            [
                10000,
                145
            ],
            [
                9500,
                145
            ],
            [
                9000,
                145
            ],
            [
                8000,
                145
            ],
            [
                7500,
                145
            ],
            [
                7000,
                145
            ],
            [
                10000,
                146
            ],
            [
                9500,
                146
            ],
            [
                9000,
                146
            ],
            [
                8000,
                146
            ],
            [
                7500,
                146
            ],
            [
                7000,
                146
            ],
            [
                10500,
                147
            ],
            [
                9500,
                147
            ],
            [
                7200,
                147
            ],
            [
                6800,
                147
            ],
            [
                6400,
                147
            ],
            [
                6200,
                147
            ],
            [
                11500,
                148
            ],
            [
                10000,
                148
            ],
            [
                9600,
                148
            ],
            [
                7400,
                148
            ],
            [
                7300,
                148
            ],
            [
                6100,
                148
            ],
            [
                11000,
                149
            ],
            [
                8800,
                149
            ],
            [
                8600,
                149
            ],
            [
                8400,
                149
            ],
            [
                7000,
                149
            ],
            [
                6200,
                149
            ],
            [
                3200,
                120
            ],
            [
                3100,
                120
            ],
            [
                2500,
                120
            ],
            [
                2800,
                120
            ],
            [
                4200,
                121
            ],
            [
                4100,
                121
            ],
            [
                3400,
                121
            ],
            [
                3000,
                121
            ],
            [
                3800,
                122
            ],
            [
                3600,
                122
            ],
            [
                2900,
                122
            ],
            [
                2500,
                122
            ],
            [
                4000,
                123
            ],
            [
                3900,
                123
            ],
            [
                3200,
                123
            ],
            [
                2800,
                123
            ],
            [
                3100,
                124
            ],
            [
                3000,
                124
            ],
            [
                2600,
                124
            ],
            [
                2600,
                124
            ],
            [
                4400,
                101
            ],
            [
                13000,
                100
            ],
            [
                6000,
                201
            ],
            [
                6500,
                101
            ],
            [
                10000,
                101
            ],
            [
                12000,
                101
            ],
            [
                8300,
                205
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE exists(employees.MANAGER_ID)\nRETURN employees.SALARY,employees.MANAGER_ID",
        "question": "What are the salaries and manager ids for employees who have managers?",
        "answers": [
            [
                24000,
                0
            ],
            [
                17000,
                100
            ],
            [
                17000,
                100
            ],
            [
                9000,
                102
            ],
            [
                6000,
                103
            ],
            [
                4800,
                103
            ],
            [
                4800,
                103
            ],
            [
                4200,
                103
            ],
            [
                12000,
                101
            ],
            [
                9000,
                108
            ],
            [
                8200,
                108
            ],
            [
                7700,
                108
            ],
            [
                7800,
                108
            ],
            [
                6900,
                108
            ],
            [
                11000,
                100
            ],
            [
                3100,
                114
            ],
            [
                2900,
                114
            ],
            [
                2800,
                114
            ],
            [
                2600,
                114
            ],
            [
                2500,
                114
            ],
            [
                8000,
                100
            ],
            [
                8200,
                100
            ],
            [
                7900,
                100
            ],
            [
                6500,
                100
            ],
            [
                5800,
                100
            ],
            [
                3200,
                120
            ],
            [
                2700,
                120
            ],
            [
                2400,
                120
            ],
            [
                2200,
                120
            ],
            [
                3300,
                121
            ],
            [
                2800,
                121
            ],
            [
                2500,
                121
            ],
            [
                2100,
                121
            ],
            [
                3300,
                122
            ],
            [
                2900,
                122
            ],
            [
                2400,
                122
            ],
            [
                2200,
                122
            ],
            [
                3600,
                123
            ],
            [
                3200,
                123
            ],
            [
                2700,
                123
            ],
            [
                2500,
                123
            ],
            [
                3500,
                124
            ],
            [
                3100,
                124
            ],
            [
                2600,
                124
            ],
            [
                2500,
                124
            ],
            [
                14000,
                100
            ],
            [
                13500,
                100
            ],
            [
                12000,
                100
            ],
            [
                11000,
                100
            ],
            [
                10500,
                100
            ],
            [
                10000,
                145
            ],
            [
                9500,
                145
            ],
            [
                9000,
                145
            ],
            [
                8000,
                145
            ],
            [
                7500,
                145
            ],
            [
                7000,
                145
            ],
            [
                10000,
                146
            ],
            [
                9500,
                146
            ],
            [
                9000,
                146
            ],
            [
                8000,
                146
            ],
            [
                7500,
                146
            ],
            [
                7000,
                146
            ],
            [
                10500,
                147
            ],
            [
                9500,
                147
            ],
            [
                7200,
                147
            ],
            [
                6800,
                147
            ],
            [
                6400,
                147
            ],
            [
                6200,
                147
            ],
            [
                11500,
                148
            ],
            [
                10000,
                148
            ],
            [
                9600,
                148
            ],
            [
                7400,
                148
            ],
            [
                7300,
                148
            ],
            [
                6100,
                148
            ],
            [
                11000,
                149
            ],
            [
                8800,
                149
            ],
            [
                8600,
                149
            ],
            [
                8400,
                149
            ],
            [
                7000,
                149
            ],
            [
                6200,
                149
            ],
            [
                3200,
                120
            ],
            [
                3100,
                120
            ],
            [
                2500,
                120
            ],
            [
                2800,
                120
            ],
            [
                4200,
                121
            ],
            [
                4100,
                121
            ],
            [
                3400,
                121
            ],
            [
                3000,
                121
            ],
            [
                3800,
                122
            ],
            [
                3600,
                122
            ],
            [
                2900,
                122
            ],
            [
                2500,
                122
            ],
            [
                4000,
                123
            ],
            [
                3900,
                123
            ],
            [
                3200,
                123
            ],
            [
                2800,
                123
            ],
            [
                3100,
                124
            ],
            [
                3000,
                124
            ],
            [
                2600,
                124
            ],
            [
                2600,
                124
            ],
            [
                4400,
                101
            ],
            [
                13000,
                100
            ],
            [
                6000,
                201
            ],
            [
                6500,
                101
            ],
            [
                10000,
                101
            ],
            [
                12000,
                101
            ],
            [
                8300,
                205
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (jobs:`hr_1.jobs`)\nWHERE jobs.MIN_SALARY > 9000\nRETURN jobs.JOB_TITLE",
        "question": "display the job title of jobs which minimum salary is greater than 9000.",
        "answers": [
            [
                "President"
            ],
            [
                "Administration Vice President"
            ],
            [
                "Sales Manager"
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (jobs:`hr_1.jobs`)\nWHERE jobs.MIN_SALARY > 9000\nRETURN jobs.JOB_TITLE",
        "question": "Which job titles correspond to jobs with salaries over 9000?",
        "answers": [
            [
                "President"
            ],
            [
                "Administration Vice President"
            ],
            [
                "Sales Manager"
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (job_history:`hr_1.job_history`)\nRETURN job_history.EMPLOYEE_ID,max(job_history.END_DATE)",
        "question": "display the employee ID for each employee and the date on which he ended his previous job.",
        "answers": [
            [
                102,
                "1998-07-24"
            ],
            [
                101,
                "1997-03-15"
            ],
            [
                201,
                "1999-12-19"
            ],
            [
                114,
                "1999-12-31"
            ],
            [
                122,
                "1999-12-31"
            ],
            [
                200,
                "1998-12-31"
            ],
            [
                176,
                "1999-12-31"
            ],
            [
                0,
                "0000-00-00"
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (job_history:`hr_1.job_history`)\nRETURN job_history.EMPLOYEE_ID,max(job_history.END_DATE)",
        "question": "What are the employee ids for each employee and final dates of employment at their last job?",
        "answers": [
            [
                102,
                "1998-07-24"
            ],
            [
                101,
                "1997-03-15"
            ],
            [
                201,
                "1999-12-19"
            ],
            [
                114,
                "1999-12-31"
            ],
            [
                122,
                "1999-12-31"
            ],
            [
                200,
                "1998-12-31"
            ],
            [
                176,
                "1999-12-31"
            ],
            [
                0,
                "0000-00-00"
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWITH count(employees.COMMISSION_PCT) AS count, employees.DEPARTMENT_ID AS DEPARTMENT_ID\nWHERE count > 10\nRETURN DEPARTMENT_ID",
        "question": "display those departments where more than ten employees work who got a commission percentage.",
        "answers": [
            [
                50
            ],
            [
                80
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWITH count(employees.COMMISSION_PCT) AS count, employees.DEPARTMENT_ID AS DEPARTMENT_ID\nWHERE count > 10\nRETURN DEPARTMENT_ID",
        "question": "What are the department ids for which more than 10 employees had a commission?",
        "answers": [
            [
                50
            ],
            [
                80
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWITH employees.DEPARTMENT_ID AS DEPARTMENT_ID, count(employees.EMPLOYEE_ID) AS count\nWHERE count >= 4\nRETURN DISTINCT DEPARTMENT_ID",
        "question": "Find the ids of the departments where any manager is managing 4 or more employees.",
        "answers": [
            [
                60
            ],
            [
                100
            ],
            [
                30
            ],
            [
                50
            ],
            [
                80
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWITH employees.DEPARTMENT_ID AS DEPARTMENT_ID, count(employees.EMPLOYEE_ID) AS count\nWHERE count >= 4\nRETURN DISTINCT DEPARTMENT_ID",
        "question": "What are department ids for departments with managers managing more than 3 employees?",
        "answers": [
            [
                60
            ],
            [
                100
            ],
            [
                30
            ],
            [
                50
            ],
            [
                80
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE exists(employees.COMMISSION_PCT)\nRETURN employees.DEPARTMENT_ID,avg(employees.SALARY)",
        "question": "display the average salary of employees for each department who gets a commission percentage.",
        "answers": [
            [
                90,
                19333.333333333332
            ],
            [
                60,
                5760.0
            ],
            [
                100,
                8600.0
            ],
            [
                30,
                4150.0
            ],
            [
                50,
                3475.5555555555557
            ],
            [
                80,
                8955.882352941177
            ],
            [
                0,
                7000.0
            ],
            [
                10,
                4400.0
            ],
            [
                20,
                9500.0
            ],
            [
                40,
                6500.0
            ],
            [
                70,
                10000.0
            ],
            [
                110,
                10150.0
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE exists(employees.COMMISSION_PCT)\nRETURN employees.DEPARTMENT_ID,avg(employees.SALARY)",
        "question": "What is the average salary of employees who have a commission percentage that is not null?",
        "answers": [
            [
                90,
                19333.333333333332
            ],
            [
                60,
                5760.0
            ],
            [
                100,
                8600.0
            ],
            [
                30,
                4150.0
            ],
            [
                50,
                3475.5555555555557
            ],
            [
                80,
                8955.882352941177
            ],
            [
                0,
                7000.0
            ],
            [
                10,
                4400.0
            ],
            [
                20,
                9500.0
            ],
            [
                40,
                6500.0
            ],
            [
                70,
                10000.0
            ],
            [
                110,
                10150.0
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (locations:`hr_1.locations`)\nRETURN locations.COUNTRY_ID,count(*)",
        "question": "display the country ID and number of cities for each country.",
        "answers": [
            [
                "IT",
                2
            ],
            [
                "JP",
                2
            ],
            [
                "US",
                4
            ],
            [
                "CA",
                2
            ],
            [
                "CN",
                1
            ],
            [
                "IN",
                1
            ],
            [
                "AU",
                1
            ],
            [
                "SG",
                1
            ],
            [
                "UK",
                2
            ],
            [
                "Ox",
                1
            ],
            [
                "DE",
                1
            ],
            [
                "BR",
                1
            ],
            [
                "CH",
                2
            ],
            [
                "NL",
                1
            ],
            [
                "\"",
                1
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (locations:`hr_1.locations`)\nRETURN locations.COUNTRY_ID,count(*)",
        "question": "Give the country id and corresponding count of cities in each country.",
        "answers": [
            [
                "IT",
                2
            ],
            [
                "JP",
                2
            ],
            [
                "US",
                4
            ],
            [
                "CA",
                2
            ],
            [
                "CN",
                1
            ],
            [
                "IN",
                1
            ],
            [
                "AU",
                1
            ],
            [
                "SG",
                1
            ],
            [
                "UK",
                2
            ],
            [
                "Ox",
                1
            ],
            [
                "DE",
                1
            ],
            [
                "BR",
                1
            ],
            [
                "CH",
                2
            ],
            [
                "NL",
                1
            ],
            [
                "\"",
                1
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (job_history:`hr_1.job_history`)\nWITH count(*) AS count, job_history.EMPLOYEE_ID AS EMPLOYEE_ID\nWHERE count  >= 2\nRETURN EMPLOYEE_ID",
        "question": "display the ID for those employees who did two or more jobs in the past.",
        "answers": [
            [
                101
            ],
            [
                200
            ],
            [
                176
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (job_history:`hr_1.job_history`)\nWITH count(*) AS count, job_history.EMPLOYEE_ID AS EMPLOYEE_ID\nWHERE count  >= 2\nRETURN EMPLOYEE_ID",
        "question": "What are the employee ids for employees who have held two or more jobs?",
        "answers": [
            [
                101
            ],
            [
                200
            ],
            [
                176
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (T1:`hr_1.employees`)-[]-(T2:`hr_1.departments`)\nRETURN T2.DEPARTMENT_NAME,count(*)",
        "question": "display the department name and number of employees in each of the department.",
        "answers": [
            [
                "Administration",
                1
            ],
            [
                "Marketing",
                2
            ],
            [
                "Purchasing",
                6
            ],
            [
                "Human Resources",
                1
            ],
            [
                "Shipping",
                45
            ],
            [
                "IT",
                5
            ],
            [
                "Public Relations",
                1
            ],
            [
                "Sales",
                34
            ],
            [
                "Executive",
                3
            ],
            [
                "Finance",
                6
            ],
            [
                "Accounting",
                2
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (T1:`hr_1.employees`)-[]-(T2:`hr_1.departments`)\nRETURN T2.DEPARTMENT_NAME,count(*)",
        "question": "Give the name of each department and the number of employees in each.",
        "answers": [
            [
                "Administration",
                1
            ],
            [
                "Marketing",
                2
            ],
            [
                "Purchasing",
                6
            ],
            [
                "Human Resources",
                1
            ],
            [
                "Shipping",
                45
            ],
            [
                "IT",
                5
            ],
            [
                "Public Relations",
                1
            ],
            [
                "Sales",
                34
            ],
            [
                "Executive",
                3
            ],
            [
                "Finance",
                6
            ],
            [
                "Accounting",
                2
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nRETURN min(employees.SALARY),employees.DEPARTMENT_ID",
        "question": "return the smallest salary for every departments.",
        "answers": [
            [
                17000,
                90
            ],
            [
                4200,
                60
            ],
            [
                6900,
                100
            ],
            [
                2500,
                30
            ],
            [
                2100,
                50
            ],
            [
                6100,
                80
            ],
            [
                7000,
                0
            ],
            [
                4400,
                10
            ],
            [
                6000,
                20
            ],
            [
                6500,
                40
            ],
            [
                10000,
                70
            ],
            [
                8300,
                110
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nRETURN min(employees.SALARY),employees.DEPARTMENT_ID",
        "question": "What is the minimum salary in each department?",
        "answers": [
            [
                17000,
                90
            ],
            [
                4200,
                60
            ],
            [
                6900,
                100
            ],
            [
                2500,
                30
            ],
            [
                2100,
                50
            ],
            [
                6100,
                80
            ],
            [
                7000,
                0
            ],
            [
                4400,
                10
            ],
            [
                6000,
                20
            ],
            [
                6500,
                40
            ],
            [
                10000,
                70
            ],
            [
                8300,
                110
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWITH avg(employees.SALARY) AS salary\nMATCH (employees:`hr_1.employees`)\nWHERE  employees.SALARY >  salary \nRETURN employees.EMPLOYEE_ID",
        "question": "Find the employee id for all employees who earn more than the average salary.",
        "answers": [
            [
                100
            ],
            [
                101
            ],
            [
                102
            ],
            [
                103
            ],
            [
                108
            ],
            [
                109
            ],
            [
                110
            ],
            [
                111
            ],
            [
                112
            ],
            [
                113
            ],
            [
                114
            ],
            [
                120
            ],
            [
                121
            ],
            [
                122
            ],
            [
                123
            ],
            [
                145
            ],
            [
                146
            ],
            [
                147
            ],
            [
                148
            ],
            [
                149
            ],
            [
                150
            ],
            [
                151
            ],
            [
                152
            ],
            [
                153
            ],
            [
                154
            ],
            [
                155
            ],
            [
                156
            ],
            [
                157
            ],
            [
                158
            ],
            [
                159
            ],
            [
                160
            ],
            [
                161
            ],
            [
                162
            ],
            [
                163
            ],
            [
                164
            ],
            [
                165
            ],
            [
                168
            ],
            [
                169
            ],
            [
                170
            ],
            [
                171
            ],
            [
                172
            ],
            [
                174
            ],
            [
                175
            ],
            [
                176
            ],
            [
                177
            ],
            [
                178
            ],
            [
                201
            ],
            [
                203
            ],
            [
                204
            ],
            [
                205
            ],
            [
                206
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWITH avg(employees.SALARY) AS salary\nMATCH (employees:`hr_1.employees`)\nWHERE  employees.SALARY >  salary \nRETURN employees.EMPLOYEE_ID",
        "question": "What are the employee ids for employees who make more than the average?",
        "answers": [
            [
                100
            ],
            [
                101
            ],
            [
                102
            ],
            [
                103
            ],
            [
                108
            ],
            [
                109
            ],
            [
                110
            ],
            [
                111
            ],
            [
                112
            ],
            [
                113
            ],
            [
                114
            ],
            [
                120
            ],
            [
                121
            ],
            [
                122
            ],
            [
                123
            ],
            [
                145
            ],
            [
                146
            ],
            [
                147
            ],
            [
                148
            ],
            [
                149
            ],
            [
                150
            ],
            [
                151
            ],
            [
                152
            ],
            [
                153
            ],
            [
                154
            ],
            [
                155
            ],
            [
                156
            ],
            [
                157
            ],
            [
                158
            ],
            [
                159
            ],
            [
                160
            ],
            [
                161
            ],
            [
                162
            ],
            [
                163
            ],
            [
                164
            ],
            [
                165
            ],
            [
                168
            ],
            [
                169
            ],
            [
                170
            ],
            [
                171
            ],
            [
                172
            ],
            [
                174
            ],
            [
                175
            ],
            [
                176
            ],
            [
                177
            ],
            [
                178
            ],
            [
                201
            ],
            [
                203
            ],
            [
                204
            ],
            [
                205
            ],
            [
                206
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (T1:`hr_1.employees`)-[]-(T2:`hr_1.departments`)\nRETURN DISTINCT T2.DEPARTMENT_NAME",
        "question": "find the name of all departments that do actually have one or more employees assigned to them.",
        "answers": [
            [
                "Administration"
            ],
            [
                "Marketing"
            ],
            [
                "Purchasing"
            ],
            [
                "Human Resources"
            ],
            [
                "Shipping"
            ],
            [
                "IT"
            ],
            [
                "Public Relations"
            ],
            [
                "Sales"
            ],
            [
                "Executive"
            ],
            [
                "Finance"
            ],
            [
                "Accounting"
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (T1:`hr_1.employees`)-[]-(T2:`hr_1.departments`)\nRETURN DISTINCT T2.DEPARTMENT_NAME",
        "question": "What are the names of departments that have at least one employee.",
        "answers": [
            [
                "Administration"
            ],
            [
                "Marketing"
            ],
            [
                "Purchasing"
            ],
            [
                "Human Resources"
            ],
            [
                "Shipping"
            ],
            [
                "IT"
            ],
            [
                "Public Relations"
            ],
            [
                "Sales"
            ],
            [
                "Executive"
            ],
            [
                "Finance"
            ],
            [
                "Accounting"
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (job_history:`hr_1.job_history`)\nWITH count(*) AS count, job_history.EMPLOYEE_ID AS EMPLOYEE_ID\nWHERE count  >= 2\nRETURN EMPLOYEE_ID",
        "question": "display the ID for those employees who did two or more jobs in the past.",
        "answers": [
            [
                101
            ],
            [
                200
            ],
            [
                176
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (job_history:`hr_1.job_history`)\nWITH count(*) AS count, job_history.EMPLOYEE_ID AS EMPLOYEE_ID\nWHERE count  >= 2\nRETURN EMPLOYEE_ID",
        "question": "What are the employee ids for those who had two or more jobs.",
        "answers": [
            [
                101
            ],
            [
                200
            ],
            [
                176
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWITH employees.DEPARTMENT_ID AS DEPARTMENT_ID, count(employees.EMPLOYEE_ID) AS count\nWHERE count >= 4\nRETURN DISTINCT DEPARTMENT_ID",
        "question": "What are the unique ids of those departments where any manager is managing 4 or more employees.",
        "answers": [
            [
                60
            ],
            [
                100
            ],
            [
                30
            ],
            [
                50
            ],
            [
                80
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWITH employees.DEPARTMENT_ID AS DEPARTMENT_ID, count(employees.EMPLOYEE_ID) AS count\nWHERE count >= 4\nRETURN DISTINCT DEPARTMENT_ID",
        "question": "Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?",
        "answers": [
            [
                60
            ],
            [
                100
            ],
            [
                30
            ],
            [
                50
            ],
            [
                80
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWITH employees.JOB_ID AS JOB_ID, avg(employees.SALARY) AS avg\nWHERE avg > 8000\nRETURN JOB_ID",
        "question": "Find the job ID for those jobs which average salary is above 8000.",
        "answers": [
            [
                "AD_PRES"
            ],
            [
                "AD_VP"
            ],
            [
                "FI_MGR"
            ],
            [
                "PU_MAN"
            ],
            [
                "SA_MAN"
            ],
            [
                "SA_REP"
            ],
            [
                "MK_MAN"
            ],
            [
                "PR_REP"
            ],
            [
                "AC_MGR"
            ],
            [
                "AC_ACCOUNT"
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWITH employees.JOB_ID AS JOB_ID, avg(employees.SALARY) AS avg\nWHERE avg > 8000\nRETURN JOB_ID",
        "question": "What are the job ids corresponding to jobs with average salary above 8000?",
        "answers": [
            [
                "AD_PRES"
            ],
            [
                "AD_VP"
            ],
            [
                "FI_MGR"
            ],
            [
                "PU_MAN"
            ],
            [
                "SA_MAN"
            ],
            [
                "SA_REP"
            ],
            [
                "MK_MAN"
            ],
            [
                "PR_REP"
            ],
            [
                "AC_MGR"
            ],
            [
                "AC_ACCOUNT"
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (T1:`hr_1.employees`)-[]-(T2:`hr_1.jobs`)\nWHERE T1.DEPARTMENT_ID = 80\nRETURN T1.EMPLOYEE_ID,T2.JOB_TITLE",
        "question": "display the employee ID and job name for all those jobs in department 80.",
        "answers": [
            [
                145,
                "Sales Manager"
            ],
            [
                146,
                "Sales Manager"
            ],
            [
                147,
                "Sales Manager"
            ],
            [
                148,
                "Sales Manager"
            ],
            [
                149,
                "Sales Manager"
            ],
            [
                150,
                "Sales Representative"
            ],
            [
                151,
                "Sales Representative"
            ],
            [
                152,
                "Sales Representative"
            ],
            [
                153,
                "Sales Representative"
            ],
            [
                154,
                "Sales Representative"
            ],
            [
                155,
                "Sales Representative"
            ],
            [
                156,
                "Sales Representative"
            ],
            [
                157,
                "Sales Representative"
            ],
            [
                158,
                "Sales Representative"
            ],
            [
                159,
                "Sales Representative"
            ],
            [
                160,
                "Sales Representative"
            ],
            [
                161,
                "Sales Representative"
            ],
            [
                162,
                "Sales Representative"
            ],
            [
                163,
                "Sales Representative"
            ],
            [
                164,
                "Sales Representative"
            ],
            [
                165,
                "Sales Representative"
            ],
            [
                166,
                "Sales Representative"
            ],
            [
                167,
                "Sales Representative"
            ],
            [
                168,
                "Sales Representative"
            ],
            [
                169,
                "Sales Representative"
            ],
            [
                170,
                "Sales Representative"
            ],
            [
                171,
                "Sales Representative"
            ],
            [
                172,
                "Sales Representative"
            ],
            [
                173,
                "Sales Representative"
            ],
            [
                174,
                "Sales Representative"
            ],
            [
                175,
                "Sales Representative"
            ],
            [
                176,
                "Sales Representative"
            ],
            [
                177,
                "Sales Representative"
            ],
            [
                179,
                "Sales Representative"
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (T1:`hr_1.employees`)-[]-(T2:`hr_1.jobs`)\nWHERE T1.DEPARTMENT_ID = 80\nRETURN T1.EMPLOYEE_ID,T2.JOB_TITLE",
        "question": "what are the employee ids and job titles for employees in department 80?",
        "answers": [
            [
                145,
                "Sales Manager"
            ],
            [
                146,
                "Sales Manager"
            ],
            [
                147,
                "Sales Manager"
            ],
            [
                148,
                "Sales Manager"
            ],
            [
                149,
                "Sales Manager"
            ],
            [
                150,
                "Sales Representative"
            ],
            [
                151,
                "Sales Representative"
            ],
            [
                152,
                "Sales Representative"
            ],
            [
                153,
                "Sales Representative"
            ],
            [
                154,
                "Sales Representative"
            ],
            [
                155,
                "Sales Representative"
            ],
            [
                156,
                "Sales Representative"
            ],
            [
                157,
                "Sales Representative"
            ],
            [
                158,
                "Sales Representative"
            ],
            [
                159,
                "Sales Representative"
            ],
            [
                160,
                "Sales Representative"
            ],
            [
                161,
                "Sales Representative"
            ],
            [
                162,
                "Sales Representative"
            ],
            [
                163,
                "Sales Representative"
            ],
            [
                164,
                "Sales Representative"
            ],
            [
                165,
                "Sales Representative"
            ],
            [
                166,
                "Sales Representative"
            ],
            [
                167,
                "Sales Representative"
            ],
            [
                168,
                "Sales Representative"
            ],
            [
                169,
                "Sales Representative"
            ],
            [
                170,
                "Sales Representative"
            ],
            [
                171,
                "Sales Representative"
            ],
            [
                172,
                "Sales Representative"
            ],
            [
                173,
                "Sales Representative"
            ],
            [
                174,
                "Sales Representative"
            ],
            [
                175,
                "Sales Representative"
            ],
            [
                176,
                "Sales Representative"
            ],
            [
                177,
                "Sales Representative"
            ],
            [
                179,
                "Sales Representative"
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (T1:`hr_1.employees`)-[]-(T2:`hr_1.departments`)\nWHERE T2.DEPARTMENT_NAME = 'Finance'\nRETURN T1.FIRST_NAME,T1.JOB_ID",
        "question": "What is the first name and job id for all employees in the Finance department?",
        "answers": [
            [
                "Jose Manuel",
                "FI_ACCOUNT"
            ],
            [
                "Luis",
                "FI_ACCOUNT"
            ],
            [
                "Daniel",
                "FI_ACCOUNT"
            ],
            [
                "John",
                "FI_ACCOUNT"
            ],
            [
                "Nancy",
                "FI_MGR"
            ],
            [
                "Ismael",
                "FI_ACCOUNT"
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (T1:`hr_1.employees`)-[]-(T2:`hr_1.departments`)\nWHERE T2.DEPARTMENT_NAME = 'Finance'\nRETURN T1.FIRST_NAME,T1.JOB_ID",
        "question": "Give the first name and job id for all employees in the Finance department.",
        "answers": [
            [
                "Jose Manuel",
                "FI_ACCOUNT"
            ],
            [
                "Luis",
                "FI_ACCOUNT"
            ],
            [
                "Daniel",
                "FI_ACCOUNT"
            ],
            [
                "John",
                "FI_ACCOUNT"
            ],
            [
                "Nancy",
                "FI_MGR"
            ],
            [
                "Ismael",
                "FI_ACCOUNT"
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE employees.JOB_ID = 'MK_MAN'\nWITH min(employees.SALARY) AS salary\nMATCH (employees:`hr_1.employees`)\nWHERE  employees.SALARY <  salary \nRETURN employees.EMPLOYEE_ID,employees.JOB_ID",
        "question": "display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN.",
        "answers": [
            [
                103,
                "IT_PROG"
            ],
            [
                104,
                "IT_PROG"
            ],
            [
                105,
                "IT_PROG"
            ],
            [
                106,
                "IT_PROG"
            ],
            [
                107,
                "IT_PROG"
            ],
            [
                108,
                "FI_MGR"
            ],
            [
                109,
                "FI_ACCOUNT"
            ],
            [
                110,
                "FI_ACCOUNT"
            ],
            [
                111,
                "FI_ACCOUNT"
            ],
            [
                112,
                "FI_ACCOUNT"
            ],
            [
                113,
                "FI_ACCOUNT"
            ],
            [
                114,
                "PU_MAN"
            ],
            [
                115,
                "PU_CLERK"
            ],
            [
                116,
                "PU_CLERK"
            ],
            [
                117,
                "PU_CLERK"
            ],
            [
                118,
                "PU_CLERK"
            ],
            [
                119,
                "PU_CLERK"
            ],
            [
                120,
                "ST_MAN"
            ],
            [
                121,
                "ST_MAN"
            ],
            [
                122,
                "ST_MAN"
            ],
            [
                123,
                "ST_MAN"
            ],
            [
                124,
                "ST_MAN"
            ],
            [
                125,
                "ST_CLERK"
            ],
            [
                126,
                "ST_CLERK"
            ],
            [
                127,
                "ST_CLERK"
            ],
            [
                128,
                "ST_CLERK"
            ],
            [
                129,
                "ST_CLERK"
            ],
            [
                130,
                "ST_CLERK"
            ],
            [
                131,
                "ST_CLERK"
            ],
            [
                132,
                "ST_CLERK"
            ],
            [
                133,
                "ST_CLERK"
            ],
            [
                134,
                "ST_CLERK"
            ],
            [
                135,
                "ST_CLERK"
            ],
            [
                136,
                "ST_CLERK"
            ],
            [
                137,
                "ST_CLERK"
            ],
            [
                138,
                "ST_CLERK"
            ],
            [
                139,
                "ST_CLERK"
            ],
            [
                140,
                "ST_CLERK"
            ],
            [
                141,
                "ST_CLERK"
            ],
            [
                142,
                "ST_CLERK"
            ],
            [
                143,
                "ST_CLERK"
            ],
            [
                144,
                "ST_CLERK"
            ],
            [
                147,
                "SA_MAN"
            ],
            [
                148,
                "SA_MAN"
            ],
            [
                149,
                "SA_MAN"
            ],
            [
                150,
                "SA_REP"
            ],
            [
                151,
                "SA_REP"
            ],
            [
                152,
                "SA_REP"
            ],
            [
                153,
                "SA_REP"
            ],
            [
                154,
                "SA_REP"
            ],
            [
                155,
                "SA_REP"
            ],
            [
                156,
                "SA_REP"
            ],
            [
                157,
                "SA_REP"
            ],
            [
                158,
                "SA_REP"
            ],
            [
                159,
                "SA_REP"
            ],
            [
                160,
                "SA_REP"
            ],
            [
                161,
                "SA_REP"
            ],
            [
                162,
                "SA_REP"
            ],
            [
                163,
                "SA_REP"
            ],
            [
                164,
                "SA_REP"
            ],
            [
                165,
                "SA_REP"
            ],
            [
                166,
                "SA_REP"
            ],
            [
                167,
                "SA_REP"
            ],
            [
                168,
                "SA_REP"
            ],
            [
                169,
                "SA_REP"
            ],
            [
                170,
                "SA_REP"
            ],
            [
                171,
                "SA_REP"
            ],
            [
                172,
                "SA_REP"
            ],
            [
                173,
                "SA_REP"
            ],
            [
                174,
                "SA_REP"
            ],
            [
                175,
                "SA_REP"
            ],
            [
                176,
                "SA_REP"
            ],
            [
                177,
                "SA_REP"
            ],
            [
                178,
                "SA_REP"
            ],
            [
                179,
                "SA_REP"
            ],
            [
                180,
                "SH_CLERK"
            ],
            [
                181,
                "SH_CLERK"
            ],
            [
                182,
                "SH_CLERK"
            ],
            [
                183,
                "SH_CLERK"
            ],
            [
                184,
                "SH_CLERK"
            ],
            [
                185,
                "SH_CLERK"
            ],
            [
                186,
                "SH_CLERK"
            ],
            [
                187,
                "SH_CLERK"
            ],
            [
                188,
                "SH_CLERK"
            ],
            [
                189,
                "SH_CLERK"
            ],
            [
                190,
                "SH_CLERK"
            ],
            [
                191,
                "SH_CLERK"
            ],
            [
                192,
                "SH_CLERK"
            ],
            [
                193,
                "SH_CLERK"
            ],
            [
                194,
                "SH_CLERK"
            ],
            [
                195,
                "SH_CLERK"
            ],
            [
                196,
                "SH_CLERK"
            ],
            [
                197,
                "SH_CLERK"
            ],
            [
                198,
                "SH_CLERK"
            ],
            [
                199,
                "SH_CLERK"
            ],
            [
                200,
                "AD_ASST"
            ],
            [
                202,
                "MK_REP"
            ],
            [
                203,
                "HR_REP"
            ],
            [
                204,
                "PR_REP"
            ],
            [
                205,
                "AC_MGR"
            ],
            [
                206,
                "AC_ACCOUNT"
            ]
        ]
    },
    {
        "db_id": "hr_1",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE employees.JOB_ID = 'MK_MAN'\nWITH min(employees.SALARY) AS salary\nMATCH (employees:`hr_1.employees`)\nWHERE  employees.SALARY <  salary \nRETURN employees.EMPLOYEE_ID,employees.JOB_ID",
        "question": "What are the employee ids and job ids for employees who make less than the lowest earning employee with title MK_MAN?",
        "answers": [
            [
                103,
                "IT_PROG"
            ],
            [
                104,
                "IT_PROG"
            ],
            [
                105,
                "IT_PROG"
            ],
            [
                106,
                "IT_PROG"
            ],
            [
                107,
                "IT_PROG"
            ],
            [
                108,
                "FI_MGR"
            ],
            [
                109,
                "FI_ACCOUNT"
            ],
            [
                110,
                "FI_ACCOUNT"
            ],
            [
                111,
                "FI_ACCOUNT"
            ],
            [
                112,
                "FI_ACCOUNT"
            ],
            [
                113,
                "FI_ACCOUNT"
            ],
            [
                114,
                "PU_MAN"
            ],
            [
                115,
                "PU_CLERK"
            ],
            [
                116,
                "PU_CLERK"
            ],
            [
                117,
                "PU_CLERK"
            ],
            [
                118,
                "PU_CLERK"
            ],
            [
                119,
                "PU_CLERK"
            ],
            [
                120,
                "ST_MAN"
            ],
            [
                121,
                "ST_MAN"
            ],
            [
                122,
                "ST_MAN"
            ],
            [
                123,
                "ST_MAN"
            ],
            [
                124,
                "ST_MAN"
            ],
            [
                125,
                "ST_CLERK"
            ],
            [
                126,
                "ST_CLERK"
            ],
            [
                127,
                "ST_CLERK"
            ],
            [
                128,
                "ST_CLERK"
            ],
            [
                129,
                "ST_CLERK"
            ],
            [
                130,
                "ST_CLERK"
            ],
            [
                131,
                "ST_CLERK"
            ],
            [
                132,
                "ST_CLERK"
            ],
            [
                133,
                "ST_CLERK"
            ],
            [
                134,
                "ST_CLERK"
            ],
            [
                135,
                "ST_CLERK"
            ],
            [
                136,
                "ST_CLERK"
            ],
            [
                137,
                "ST_CLERK"
            ],
            [
                138,
                "ST_CLERK"
            ],
            [
                139,
                "ST_CLERK"
            ],
            [
                140,
                "ST_CLERK"
            ],
            [
                141,
                "ST_CLERK"
            ],
            [
                142,
                "ST_CLERK"
            ],
            [
                143,
                "ST_CLERK"
            ],
            [
                144,
                "ST_CLERK"
            ],
            [
                147,
                "SA_MAN"
            ],
            [
                148,
                "SA_MAN"
            ],
            [
                149,
                "SA_MAN"
            ],
            [
                150,
                "SA_REP"
            ],
            [
                151,
                "SA_REP"
            ],
            [
                152,
                "SA_REP"
            ],
            [
                153,
                "SA_REP"
            ],
            [
                154,
                "SA_REP"
            ],
            [
                155,
                "SA_REP"
            ],
            [
                156,
                "SA_REP"
            ],
            [
                157,
                "SA_REP"
            ],
            [
                158,
                "SA_REP"
            ],
            [
                159,
                "SA_REP"
            ],
            [
                160,
                "SA_REP"
            ],
            [
                161,
                "SA_REP"
            ],
            [
                162,
                "SA_REP"
            ],
            [
                163,
                "SA_REP"
            ],
            [
                164,
                "SA_REP"
            ],
            [
                165,
                "SA_REP"
            ],
            [
                166,
                "SA_REP"
            ],
            [
                167,
                "SA_REP"
            ],
            [
                168,
                "SA_REP"
            ],
            [
                169,
                "SA_REP"
            ],
            [
                170,
                "SA_REP"
            ],
            [
                171,
                "SA_REP"
            ],
            [
                172,
                "SA_REP"
            ],
            [
                173,
                "SA_REP"
            ],
            [
                174,
                "SA_REP"
            ],
            [
                175,
                "SA_REP"
            ],
            [
                176,
                "SA_REP"
            ],
            [
                177,
                "SA_REP"
            ],
            [
                178,
                "SA_REP"
            ],
            [
                179,
                "SA_REP"
            ],
            [
                180,
                "SH_CLERK"
            ],
            [
                181,
                "SH_CLERK"
            ],
            [
                182,
                "SH_CLERK"
            ],
            [
                183,
                "SH_CLERK"
            ],
            [
                184,
                "SH_CLERK"
            ],
            [
                185,
                "SH_CLERK"
            ],
            [
                186,
                "SH_CLERK"
            ],
            [
                187,
                "SH_CLERK"
            ],
            [
                188,
                "SH_CLERK"
            ],
            [
                189,
                "SH_CLERK"
            ],
            [
                190,
                "SH_CLERK"
            ],
            [
                191,
                "SH_CLERK"
            ],
            [
                192,
                "SH_CLERK"
            ],
            [
                193,
                "SH_CLERK"
            ],
            [
                194,
                "SH_CLERK"
            ],
            [
                195,
                "SH_CLERK"
            ],
            [
                196,
                "SH_CLERK"
            ],
            [
                197,
                "SH_CLERK"
            ],
            [
                198,
                "SH_CLERK"
            ],
            [
                199,
                "SH_CLERK"
            ],
            [
                200,
                "AD_ASST"
            ],
            [
                202,
                "MK_REP"
            ],
            [
                203,
                "HR_REP"
            ],
            [
                204,
                "PR_REP"
            ],
            [
                205,
                "AC_MGR"
            ],
            [
                206,
                "AC_ACCOUNT"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (song:`music_1.song`)\nRETURN song.song_name,song.releasedate\nORDER BY song.releasedate DESC\nLIMIT 1",
        "question": "What is the name of the song that was released in the most recent year?",
        "answers": [
            [
                "Ami opar hoye",
                "7-APR-2001"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (song:`music_1.song`)\nRETURN song.song_name,song.releasedate\nORDER BY song.releasedate DESC\nLIMIT 1",
        "question": "What is the name of the song that was released most recently?",
        "answers": [
            [
                "Ami opar hoye",
                "7-APR-2001"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (files:`music_1.files`)\nRETURN files.f_id\nORDER BY files.duration DESC\nLIMIT 1",
        "question": "What is the id of the longest song?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (files:`music_1.files`)\nRETURN files.f_id\nORDER BY files.duration DESC\nLIMIT 1",
        "question": "Find the id of the song that lasts the longest.",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (T1:`music_1.artist`)-[]-(T2:`music_1.song`)\nWHERE T2.rating > 9\nRETURN DISTINCT T1.artist_name,T1.country",
        "question": "List the name and country of origin for all singers who have produced songs with rating above 9.",
        "answers": [
            [
                "Topu",
                "India"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (T1:`music_1.artist`)-[]-(T2:`music_1.song`)\nWHERE T2.rating > 9\nRETURN DISTINCT T1.artist_name,T1.country",
        "question": "What are the different names and countries of origins for all artists whose song ratings are above 9?",
        "answers": [
            [
                "Topu",
                "India"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (T1:`music_1.files`)-[]-(T2:`music_1.song`)\nWHERE T2.resolution < 800\nRETURN DISTINCT T1.file_size,T1.formats",
        "question": "List the file size and format for all songs that have resolution lower than 800.",
        "answers": [
            [
                "4.12 MB",
                "mp3"
            ],
            [
                "3.69 MB",
                "mp4"
            ],
            [
                "5.10 MB",
                "mp3"
            ],
            [
                "4.10 MB",
                "mp4"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (T1:`music_1.files`)-[]-(T2:`music_1.song`)\nWHERE T2.resolution < 800\nRETURN DISTINCT T1.file_size,T1.formats",
        "question": "What are the file sizes and formats for all songs with a resolution lower than 800?",
        "answers": [
            [
                "4.12 MB",
                "mp3"
            ],
            [
                "3.69 MB",
                "mp4"
            ],
            [
                "5.10 MB",
                "mp3"
            ],
            [
                "4.10 MB",
                "mp4"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (T1:`music_1.song`)-[]-(T2:`music_1.files`)\nRETURN T1.artist_name\nORDER BY T2.duration\nLIMIT 1",
        "question": "What is the name of the artist who produced the shortest song?",
        "answers": [
            [
                "Prity"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (T1:`music_1.song`)-[]-(T2:`music_1.files`)\nRETURN T1.artist_name\nORDER BY T2.duration\nLIMIT 1",
        "question": "What are the names of the artists who sang the shortest song?",
        "answers": [
            [
                "Prity"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (T1:`music_1.artist`)-[]-(T2:`music_1.song`)\nRETURN T1.artist_name,T1.country\nORDER BY T2.rating DESC\nLIMIT 3",
        "question": "What are the names and countries of origin for the artists who produced the top three highly rated songs.",
        "answers": [
            [
                "Topu",
                "India"
            ],
            [
                "Shrikanta",
                "India"
            ],
            [
                "Michel",
                "UK"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (T1:`music_1.artist`)-[]-(T2:`music_1.song`)\nRETURN T1.artist_name,T1.country\nORDER BY T2.rating DESC\nLIMIT 3",
        "question": "What are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from?",
        "answers": [
            [
                "Topu",
                "India"
            ],
            [
                "Shrikanta",
                "India"
            ],
            [
                "Michel",
                "UK"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (files:`music_1.files`)\nRETURN files.formats\nORDER BY files.formats DESC\nLIMIT 1",
        "question": "What is the most popular file format?",
        "answers": [
            [
                "mp4"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (files:`music_1.files`)\nRETURN files.formats\nORDER BY files.formats DESC\nLIMIT 1",
        "question": "Find the file format that is used by the most files.",
        "answers": [
            [
                "mp4"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (artist:`music_1.artist`)\nRETURN count(*),artist.gender",
        "question": "What is the number of artists for each gender?",
        "answers": [
            [
                3,
                "Male"
            ],
            [
                3,
                "Female"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (artist:`music_1.artist`)\nRETURN count(*),artist.gender",
        "question": "How many artists are male and how many are female?",
        "answers": [
            [
                3,
                "Male"
            ],
            [
                3,
                "Female"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (song:`music_1.song`)\nRETURN avg(song.rating),song.languages",
        "question": "What is the average rating of songs for each language?",
        "answers": [
            [
                7.5,
                "bangla"
            ],
            [
                7.0,
                "english"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (song:`music_1.song`)\nRETURN avg(song.rating),song.languages",
        "question": "What is the average song rating for each language?",
        "answers": [
            [
                7.5,
                "bangla"
            ],
            [
                7.0,
                "english"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (T1:`music_1.artist`)-[]-(T2:`music_1.song`)\nRETURN T1.gender,T1.artist_name\nORDER BY T2.resolution\nLIMIT 1",
        "question": "Return the gender and name of artist who produced the song with the lowest resolution.",
        "answers": [
            [
                "Female",
                "Farida"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (T1:`music_1.artist`)-[]-(T2:`music_1.song`)\nRETURN T1.gender,T1.artist_name\nORDER BY T2.resolution\nLIMIT 1",
        "question": "What is the gender and name of the artist who sang the song with the smallest resolution?",
        "answers": [
            [
                "Female",
                "Farida"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (files:`music_1.files`)\nRETURN count(*),files.formats",
        "question": "For each file format, return the number of artists who released songs in that format.",
        "answers": [
            [
                4,
                "mp4"
            ],
            [
                2,
                "mp3"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (files:`music_1.files`)\nRETURN count(*),files.formats",
        "question": "How many songs were released for each format?",
        "answers": [
            [
                4,
                "mp4"
            ],
            [
                2,
                "mp3"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (genre:`music_1.genre`)\nRETURN genre.g_name,genre.rating\nORDER BY genre.g_name",
        "question": "List the names of all genres in alphabetical oder, together with its ratings.",
        "answers": [
            [
                "blues",
                "7"
            ],
            [
                "folk",
                "9"
            ],
            [
                "modern",
                "8"
            ],
            [
                "nazrul",
                "7"
            ],
            [
                "pop",
                "9"
            ],
            [
                "tagore",
                "8"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (genre:`music_1.genre`)\nRETURN genre.g_name,genre.rating\nORDER BY genre.g_name",
        "question": "What are the names of all genres in alphabetical order, combined with its ratings?",
        "answers": [
            [
                "blues",
                "7"
            ],
            [
                "folk",
                "9"
            ],
            [
                "modern",
                "8"
            ],
            [
                "nazrul",
                "7"
            ],
            [
                "pop",
                "9"
            ],
            [
                "tagore",
                "8"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (song:`music_1.song`)\nRETURN song.song_name\nORDER BY song.resolution",
        "question": "Give me a list of the names of all songs ordered by their resolution.",
        "answers": [
            [
                "Ami opar hoye"
            ],
            [
                "Aj ei akash"
            ],
            [
                "Shukno patar nupur pae"
            ],
            [
                "Just beat it"
            ],
            [
                "Tumi robe nirobe"
            ],
            [
                "My love"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (song:`music_1.song`)\nRETURN song.song_name\nORDER BY song.resolution",
        "question": "What are the names of all songs that are ordered by their resolution numbers?",
        "answers": [
            [
                "Ami opar hoye"
            ],
            [
                "Aj ei akash"
            ],
            [
                "Shukno patar nupur pae"
            ],
            [
                "Just beat it"
            ],
            [
                "Tumi robe nirobe"
            ],
            [
                "My love"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (song:`music_1.song`)\nWHERE song.resolution > 500\nRETURN song.artist_name\nORDER BY song.languages DESC\nLIMIT 1",
        "question": "What is the language that was used most often in songs with resolution above 500?",
        "answers": [
            [
                "Enrique"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (song:`music_1.song`)\nWHERE song.resolution > 500\nRETURN song.artist_name\nORDER BY song.languages DESC\nLIMIT 1",
        "question": "What is the name of the artist, for each language, that has the most songs with a higher resolution than 500?",
        "answers": [
            [
                "Enrique"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (T1:`music_1.artist`)-[]-(T2:`music_1.song`)\nWHERE T2.resolution > 900\nWITH count(*) AS count, T1.country AS country, T1.artist_name AS artist_name\nWHERE count  >= 1\nRETURN artist_name,country",
        "question": "Find the name and country of origin for all artists who have release at least one song of resolution above 900.",
        "answers": [
            [
                "Shrikanta",
                "India"
            ],
            [
                "Enrique",
                "USA"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (T1:`music_1.artist`)-[]-(T2:`music_1.song`)\nWHERE T2.resolution > 900\nWITH count(*) AS count, T1.country AS country, T1.artist_name AS artist_name\nWHERE count  >= 1\nRETURN artist_name,country",
        "question": "What is the name and country of origin for each artist who has released a song with a resolution higher than 900?",
        "answers": [
            [
                "Shrikanta",
                "India"
            ],
            [
                "Enrique",
                "USA"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (song:`music_1.song`)\nWHERE song.languages = 'english'\nWITH min(song.rating) AS rating\nMATCH (song:`music_1.song`)\nWHERE  song.rating <  rating \nRETURN song.song_name",
        "question": "What are the names of the songs whose rating is below the rating of all songs in English?",
        "answers": [
            [
                "Shukno patar nupur pae"
            ]
        ]
    },
    {
        "db_id": "music_1",
        "query": "MATCH (song:`music_1.song`)\nWHERE song.languages = 'english'\nWITH min(song.rating) AS rating\nMATCH (song:`music_1.song`)\nWHERE  song.rating <  rating \nRETURN song.song_name",
        "question": "What are the song names for every song whose rating is less than the minimum rating for English songs?",
        "answers": [
            [
                "Shukno patar nupur pae"
            ]
        ]
    },
    {
        "db_id": "mountain_photos",
        "query": "MATCH (camera_lens:`mountain_photos.camera_lens`)\nWHERE camera_lens.focal_length_mm > 15\nRETURN count(*)",
        "question": "How many camera lenses have a focal length longer than 15 mm?",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "mountain_photos",
        "query": "MATCH (camera_lens:`mountain_photos.camera_lens`)\nRETURN camera_lens.brand,camera_lens.name\nORDER BY camera_lens.max_aperture DESC",
        "question": "Find the brand and name for each camera lens, and sort in descending order of maximum aperture.",
        "answers": [
            [
                "Olympus",
                "Olympus 15mm f/8.0 Body Cap"
            ],
            [
                "Panasonic",
                "Panasonic Lumix G 150mm f /2.8"
            ],
            [
                "Sigma",
                "Sigma 19mm f2.8 DN"
            ],
            [
                "Sigma",
                "Sigma 19mm f2.8 EX DN"
            ],
            [
                "Sigma",
                "Sigma 30mm f2.8 DN"
            ],
            [
                "Schneider Kreuznach",
                "Schneider Kreuznach Super Angulon 14mm f /2.0"
            ],
            [
                "Olympus",
                "Olympus M.Zuiko Digital ED 45mm f/1.8"
            ],
            [
                "Olympus",
                "Olympus M.Zuiko Digital ED 75mm f/1.8"
            ],
            [
                "Panasonic",
                "Panasonic Leica DG Summilux 25mm f /1.4 Asph."
            ],
            [
                "Schneider Kreuznach",
                "Schneider Kreuznach Xenon 30mm f /1.4"
            ],
            [
                "Panasonic",
                "Panasonic Leica DG Nocticron 42.5mm f /1.2"
            ]
        ]
    },
    {
        "db_id": "mountain_photos",
        "query": "MATCH (photos:`mountain_photos.photos`)\nRETURN photos.id,photos.color,photos.name",
        "question": "List the id, color scheme, and name for all the photos.",
        "answers": [
            [
                1,
                "RBG",
                "monkey"
            ],
            [
                2,
                "RBG",
                "rabbits"
            ],
            [
                3,
                "Black/White",
                "deers"
            ],
            [
                4,
                "RBG",
                "grass"
            ],
            [
                5,
                "RBG",
                "cloud"
            ],
            [
                6,
                "RBG",
                "sunset"
            ],
            [
                7,
                "RBG",
                "river"
            ],
            [
                8,
                "Black/White",
                "wolfs"
            ],
            [
                9,
                "RBG",
                "the mountain"
            ],
            [
                10,
                "RBG",
                "life"
            ]
        ]
    },
    {
        "db_id": "mountain_photos",
        "query": "MATCH (mountain:`mountain_photos.mountain`)\nWHERE mountain.Country = 'Morocco'\nRETURN avg(mountain.Prominence)",
        "question": "What are the average prominence of the mountains in country 'Morocco'?",
        "answers": [
            [
                1316.5
            ]
        ]
    },
    {
        "db_id": "mountain_photos",
        "query": "MATCH (mountain:`mountain_photos.mountain`)\nWHERE mountain.Range <> 'Aberdare Range'\nRETURN mountain.name,mountain.Height,mountain.Prominence",
        "question": "What are the name, height and prominence of mountains which do not belong to the range 'Aberdare Range'?",
        "answers": [
            [
                "Abune Yosef / Guliba Amba",
                4260.0,
                1909.0
            ],
            [
                "Ioll / Yoll",
                4220.0,
                350.0
            ],
            [
                "Bada",
                4195.0,
                1605.0
            ],
            [
                "Kaka / Kecha / Chiqe",
                4193.0,
                1215.0
            ],
            [
                "Jbel Toubkal",
                4167.0,
                3755.0
            ],
            [
                "Muhavura",
                4127.0,
                1530.0
            ],
            [
                "Hey / Hay",
                4125.0,
                660.0
            ],
            [
                "Guna",
                4120.0,
                1510.0
            ],
            [
                "Choqa / Choke / Birhan",
                4100.0,
                2225.0
            ],
            [
                "Ouanoukrim",
                4088.0,
                420.0
            ],
            [
                "Chilalo",
                4071.0,
                610.0
            ],
            [
                "Mount Cameroon",
                4070.0,
                3931.0
            ],
            [
                "Inatye",
                4070.0,
                500.0
            ],
            [
                "Ighil Mgoun",
                4068.0,
                1904.0
            ],
            [
                "Weshema / Wasema?",
                4030.0,
                420.0
            ],
            [
                "Jebel n'Tarourt / Tifnout / Iferouane",
                3996.0,
                910.0
            ],
            [
                "Muggia",
                3950.0,
                500.0
            ],
            [
                "Dubbai",
                3941.0,
                1540.0
            ],
            [
                "Taska n\u2019Zat",
                3912.0,
                460.0
            ],
            [
                "Aksou\u00e2l",
                3903.0,
                450.0
            ],
            [
                "Cimbia",
                3900.0,
                590.0
            ]
        ]
    },
    {
        "db_id": "mountain_photos",
        "query": "MATCH (T1:`mountain_photos.mountain`)-[]-(T2:`mountain_photos.photos`)\nWHERE T1.Height > 4000\nRETURN T1.id,T1.name",
        "question": "What are the id and name of the photos for mountains?",
        "answers": [
            [
                1,
                "Abune Yosef / Guliba Amba"
            ],
            [
                2,
                "Ioll / Yoll"
            ],
            [
                10,
                "Ouanoukrim"
            ],
            [
                12,
                "Mount Cameroon"
            ],
            [
                12,
                "Mount Cameroon"
            ],
            [
                12,
                "Mount Cameroon"
            ],
            [
                14,
                "Ighil Mgoun"
            ],
            [
                14,
                "Ighil Mgoun"
            ]
        ]
    },
    {
        "db_id": "mountain_photos",
        "query": "MATCH (T1:`mountain_photos.mountain`)-[]-(T2:`mountain_photos.photos`)\nWITH T1.name AS name, count(*) AS count, T1.id AS id\nWHERE count  >= 2\nRETURN id,name",
        "question": "What are the id and name of the mountains that have at least 2 photos?",
        "answers": [
            [
                20,
                "Taska n\u2019Zat"
            ],
            [
                14,
                "Ighil Mgoun"
            ],
            [
                12,
                "Mount Cameroon"
            ]
        ]
    },
    {
        "db_id": "mountain_photos",
        "query": "MATCH (T1:`mountain_photos.photos`)-[]-(T2:`mountain_photos.camera_lens`)\nWITH count(T1.id) AS cnt, T2\nRETURN T2.name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What are the names of the cameras that have taken picture of the most mountains?",
        "answers": [
            [
                "Sigma 19mm f2.8 EX DN"
            ]
        ]
    },
    {
        "db_id": "mountain_photos",
        "query": "MATCH (T1:`mountain_photos.camera_lens`)-[]-(T2:`mountain_photos.photos`)\nWHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus'\nRETURN T1.name",
        "question": "What are the names of photos taken with the lens brand 'Sigma' or 'Olympus'?",
        "answers": [
            [
                "Olympus 15mm f/8.0 Body Cap"
            ],
            [
                "Olympus 15mm f/8.0 Body Cap"
            ],
            [
                "Sigma 19mm f2.8 EX DN"
            ],
            [
                "Sigma 19mm f2.8 EX DN"
            ],
            [
                "Sigma 19mm f2.8 EX DN"
            ],
            [
                "Sigma 19mm f2.8 EX DN"
            ]
        ]
    },
    {
        "db_id": "mountain_photos",
        "query": "MATCH (camera_lens:`mountain_photos.camera_lens`)\nRETURN count(DISTINCT camera_lens.brand)",
        "question": "How many different kinds of lens brands are there?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "mountain_photos",
        "query": "MATCH (camera_lens:`mountain_photos.camera_lens`)\nWHERE NOT (camera_lens)-[]-(:`mountain_photos.photos`)    \nRETURN count(*)",
        "question": "How many camera lenses are not used in taking any photos?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "mountain_photos",
        "query": "MATCH (T1:`mountain_photos.mountain`)-[]-(T2:`mountain_photos.photos`)\nWHERE T1.Country = 'Ethiopia'\nRETURN count(DISTINCT T2.camera_lens_id)",
        "question": "How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH (channel:`program_share.channel`)\nWHERE channel.Owner <> 'CCTV'\nRETURN channel.Name",
        "question": "Find the names of channels that are not owned by CCTV.",
        "answers": [
            [
                "Hunan Satellite TV"
            ],
            [
                "Anhui Satellite TV"
            ],
            [
                "Shandong Satellite TV"
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH (channel:`program_share.channel`)\nWHERE channel.Owner <> 'CCTV'\nRETURN channel.Name",
        "question": "Which channels are not owned by CCTV? Give me the channel names.",
        "answers": [
            [
                "Hunan Satellite TV"
            ],
            [
                "Anhui Satellite TV"
            ],
            [
                "Shandong Satellite TV"
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH (channel:`program_share.channel`)\nRETURN channel.Name\nORDER BY channel.Rating_in_percent DESC",
        "question": "List all channel names ordered by their rating in percent from big to small.",
        "answers": [
            [
                "CCTV-1"
            ],
            [
                "Hunan Satellite TV"
            ],
            [
                "CCTV-8"
            ],
            [
                "CCTV-13"
            ],
            [
                "CCTV-3"
            ],
            [
                "CCTV-6"
            ],
            [
                "CCTV-14"
            ],
            [
                "CCTV-4"
            ],
            [
                "Anhui Satellite TV"
            ],
            [
                "Shandong Satellite TV"
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH (channel:`program_share.channel`)\nRETURN channel.Name\nORDER BY channel.Rating_in_percent DESC",
        "question": "Give me a list of all the channel names sorted by the channel rating in descending order.",
        "answers": [
            [
                "CCTV-1"
            ],
            [
                "Hunan Satellite TV"
            ],
            [
                "CCTV-8"
            ],
            [
                "CCTV-13"
            ],
            [
                "CCTV-3"
            ],
            [
                "CCTV-6"
            ],
            [
                "CCTV-14"
            ],
            [
                "CCTV-4"
            ],
            [
                "Anhui Satellite TV"
            ],
            [
                "Shandong Satellite TV"
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH (channel:`program_share.channel`)\nRETURN channel.Owner\nORDER BY channel.Rating_in_percent DESC\nLIMIT 1",
        "question": "What is the owner of the channel that has the highest rating ratio?",
        "answers": [
            [
                "CCTV"
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH (channel:`program_share.channel`)\nRETURN channel.Owner\nORDER BY channel.Rating_in_percent DESC\nLIMIT 1",
        "question": "Show me the owner of the channel with the highest rating.",
        "answers": [
            [
                "CCTV"
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH (program:`program_share.program`)\nRETURN count(*)",
        "question": "how many programs are there?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH (program:`program_share.program`)\nRETURN count(*)",
        "question": "Count the number of programs.",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH (program:`program_share.program`)\nRETURN program.Name\nORDER BY program.Launch",
        "question": "list all the names of programs, ordering by launch time.",
        "answers": [
            [
                "Kaku"
            ],
            [
                "Aniworld"
            ],
            [
                "Toonmax"
            ],
            [
                "Jiajia"
            ],
            [
                "Youman"
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH (program:`program_share.program`)\nRETURN program.Name\nORDER BY program.Launch",
        "question": "What is the list of program names, sorted by the order of launch date?",
        "answers": [
            [
                "Kaku"
            ],
            [
                "Aniworld"
            ],
            [
                "Toonmax"
            ],
            [
                "Jiajia"
            ],
            [
                "Youman"
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH (program:`program_share.program`)\nRETURN program.Name,program.Origin,program.Owner",
        "question": "List the name, origin and owner of each program.",
        "answers": [
            [
                "Aniworld",
                "Hunan",
                "Hunan Broadcasting System (HBS)"
            ],
            [
                "Kaku",
                "Beijing",
                "Beijing Television (BTV)"
            ],
            [
                "Toonmax",
                "Shanghai",
                "Shanghai Media Group (SMG)"
            ],
            [
                "Jiajia",
                "Guangdong",
                "Southern Media Corporation (SMC)"
            ],
            [
                "Youman",
                "Jiangsu",
                "Jiangsu Broadcasting Corporation (JSBC)"
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH (program:`program_share.program`)\nRETURN program.Name,program.Origin,program.Owner",
        "question": "What are the name, origin and owner of each program?",
        "answers": [
            [
                "Aniworld",
                "Hunan",
                "Hunan Broadcasting System (HBS)"
            ],
            [
                "Kaku",
                "Beijing",
                "Beijing Television (BTV)"
            ],
            [
                "Toonmax",
                "Shanghai",
                "Shanghai Media Group (SMG)"
            ],
            [
                "Jiajia",
                "Guangdong",
                "Southern Media Corporation (SMC)"
            ],
            [
                "Youman",
                "Jiangsu",
                "Jiangsu Broadcasting Corporation (JSBC)"
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH (program:`program_share.program`)\nRETURN program.Name\nORDER BY program.Launch DESC\nLIMIT 1",
        "question": "find the name of the program that was launched most recently.",
        "answers": [
            [
                "Youman"
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH (program:`program_share.program`)\nRETURN program.Name\nORDER BY program.Launch DESC\nLIMIT 1",
        "question": "Which program was launched most recently? Return the program name.",
        "answers": [
            [
                "Youman"
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH (t1:`program_share.channel`)-[t2:`program_share.broadcast`]-()\nWHERE t2.Time_of_day = 'Morning'\nRETURN t1.Name",
        "question": "Find the names of the channels that are broadcast in the morning.",
        "answers": [
            [
                "CCTV-1"
            ],
            [
                "CCTV-8"
            ],
            [
                "CCTV-3"
            ],
            [
                "CCTV-6"
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH (t1:`program_share.channel`)-[t2:`program_share.broadcast`]-()\nWHERE t2.Time_of_day = 'Morning'\nRETURN t1.Name",
        "question": "Which channels are broadcast in the morning? Give me the channel names.",
        "answers": [
            [
                "CCTV-1"
            ],
            [
                "CCTV-8"
            ],
            [
                "CCTV-3"
            ],
            [
                "CCTV-6"
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH ()-[broadcast:`program_share.broadcast`]-()\nWHERE broadcast.Time_of_day = 'Night'\nRETURN count(DISTINCT broadcast.Program_ID)",
        "question": "find the number of different programs that are broadcast during night time.",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH ()-[broadcast:`program_share.broadcast`]-()\nWHERE broadcast.Time_of_day = 'Night'\nRETURN count(DISTINCT broadcast.Program_ID)",
        "question": "How many distinct programs are broadcast at \"Night\" time?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH (program:`program_share.program`)\nRETURN program.Origin\nORDER BY program.Origin",
        "question": "List all program origins in the alphabetical order.",
        "answers": [
            [
                "Beijing"
            ],
            [
                "Guangdong"
            ],
            [
                "Hunan"
            ],
            [
                "Jiangsu"
            ],
            [
                "Shanghai"
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH (program:`program_share.program`)\nRETURN program.Origin\nORDER BY program.Origin",
        "question": "What is the list of program origins ordered alphabetically?",
        "answers": [
            [
                "Beijing"
            ],
            [
                "Guangdong"
            ],
            [
                "Hunan"
            ],
            [
                "Jiangsu"
            ],
            [
                "Shanghai"
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH (channel:`program_share.channel`)\nRETURN count(DISTINCT channel.Owner)",
        "question": "what is the number of different channel owners?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH (channel:`program_share.channel`)\nRETURN count(DISTINCT channel.Owner)",
        "question": "Count the number of distinct channel owners.",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH (program:`program_share.program`)\nWHERE program.Origin <> 'Beijing'\nRETURN program.Name",
        "question": "find the names of programs whose origin is not in Beijing.",
        "answers": [
            [
                "Aniworld"
            ],
            [
                "Toonmax"
            ],
            [
                "Jiajia"
            ],
            [
                "Youman"
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH (program:`program_share.program`)\nWHERE program.Origin <> 'Beijing'\nRETURN program.Name",
        "question": "Which programs' origins are not \"Beijing\"? Give me the program names.",
        "answers": [
            [
                "Aniworld"
            ],
            [
                "Toonmax"
            ],
            [
                "Jiajia"
            ],
            [
                "Youman"
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH (channel:`program_share.channel`)\nWHERE channel.Owner = 'CCTV' OR channel.Owner = 'HBS'\nRETURN channel.Name",
        "question": "What are the names of the channels owned by CCTV or HBS?",
        "answers": [
            [
                "CCTV-1"
            ],
            [
                "Hunan Satellite TV"
            ],
            [
                "CCTV-8"
            ],
            [
                "CCTV-13"
            ],
            [
                "CCTV-3"
            ],
            [
                "CCTV-6"
            ],
            [
                "CCTV-14"
            ],
            [
                "CCTV-4"
            ]
        ]
    },
    {
        "db_id": "program_share",
        "query": "MATCH (channel:`program_share.channel`)\nWHERE channel.Owner = 'CCTV' OR channel.Owner = 'HBS'\nRETURN channel.Name",
        "question": "List the names of all the channels owned by either CCTV or HBS",
        "answers": [
            [
                "CCTV-1"
            ],
            [
                "Hunan Satellite TV"
            ],
            [
                "CCTV-8"
            ],
            [
                "CCTV-13"
            ],
            [
                "CCTV-3"
            ],
            [
                "CCTV-6"
            ],
            [
                "CCTV-14"
            ],
            [
                "CCTV-4"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (courses:`e_learning.Courses`)\nRETURN count(*)",
        "question": "How many courses are there in total?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (courses:`e_learning.Courses`)\nRETURN count(*)",
        "question": "Find the total number of courses offered.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (course_authors_and_tutors:`e_learning.Course_Authors_and_Tutors`)\nRETURN course_authors_and_tutors.address_line_1",
        "question": "List the addresses of all the course authors or tutors.",
        "answers": [
            [
                "756 Monahan Mews\nSpinkashire, NJ 64230-5098"
            ],
            [
                "98623 Huels Manor\nJasttown, DE 31611"
            ],
            [
                "99296 Keeling Courts\nNorth Audreanne, IL 28272"
            ],
            [
                "644 Montana Hill Suite 489\nDaijamouth, CA 19587-4254"
            ],
            [
                "5284 Champlin Roads\nCassinport, WY 54636"
            ],
            [
                "92220 Hellen Skyway Apt. 635\nRennerview, MS 81036"
            ],
            [
                "67541 Osborne Creek Suite 532\nBernhardview, WV 30288-1050"
            ],
            [
                "0256 Walter Meadows Suite 523\nNorbertoborough, AZ 49193"
            ],
            [
                "445 Quigley Fall\nPort Antonette, IN 81992-1255"
            ],
            [
                "22575 Effertz Neck Apt. 046\nPort Scotty, NY 67108-9197"
            ],
            [
                "425 White Brooks\nEmmaleefort, IN 97850-2510"
            ],
            [
                "513 Collins Plain Apt. 829\nClementinaville, VT 59908-2793"
            ],
            [
                "139 O'Conner Circles\nVirginieland, KS 23365"
            ],
            [
                "3602 Boehm Forest\nZulaufton, DC 35229-0366"
            ],
            [
                "8928 Kunze Valley Apt. 747\nSouth Jedidiahmouth, DE 28167"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (course_authors_and_tutors:`e_learning.Course_Authors_and_Tutors`)\nRETURN course_authors_and_tutors.address_line_1",
        "question": "What is the address of each course author or tutor?",
        "answers": [
            [
                "756 Monahan Mews\nSpinkashire, NJ 64230-5098"
            ],
            [
                "98623 Huels Manor\nJasttown, DE 31611"
            ],
            [
                "99296 Keeling Courts\nNorth Audreanne, IL 28272"
            ],
            [
                "644 Montana Hill Suite 489\nDaijamouth, CA 19587-4254"
            ],
            [
                "5284 Champlin Roads\nCassinport, WY 54636"
            ],
            [
                "92220 Hellen Skyway Apt. 635\nRennerview, MS 81036"
            ],
            [
                "67541 Osborne Creek Suite 532\nBernhardview, WV 30288-1050"
            ],
            [
                "0256 Walter Meadows Suite 523\nNorbertoborough, AZ 49193"
            ],
            [
                "445 Quigley Fall\nPort Antonette, IN 81992-1255"
            ],
            [
                "22575 Effertz Neck Apt. 046\nPort Scotty, NY 67108-9197"
            ],
            [
                "425 White Brooks\nEmmaleefort, IN 97850-2510"
            ],
            [
                "513 Collins Plain Apt. 829\nClementinaville, VT 59908-2793"
            ],
            [
                "139 O'Conner Circles\nVirginieland, KS 23365"
            ],
            [
                "3602 Boehm Forest\nZulaufton, DC 35229-0366"
            ],
            [
                "8928 Kunze Valley Apt. 747\nSouth Jedidiahmouth, DE 28167"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (course_authors_and_tutors:`e_learning.Course_Authors_and_Tutors`)\nRETURN course_authors_and_tutors.login_name,course_authors_and_tutors.family_name",
        "question": "List all the login names and family names of course author and tutors.",
        "answers": [
            [
                "jmckenzie",
                "Grant"
            ],
            [
                "heidenreich.ara",
                "Armstrong"
            ],
            [
                "clementina29",
                "Reichel"
            ],
            [
                "wlehner",
                "Nader"
            ],
            [
                "nyundt",
                "Barrows"
            ],
            [
                "al75",
                "Rohan"
            ],
            [
                "marty.bergnaum",
                "Treutel"
            ],
            [
                "medhurst.alvah",
                "Rowe"
            ],
            [
                "antonetta19",
                "Zboncak"
            ],
            [
                "adam.rippin",
                "Champlin"
            ],
            [
                "dschaefer",
                "Greenholt"
            ],
            [
                "nellie.mosciski",
                "Kreiger"
            ],
            [
                "qking",
                "Effertz"
            ],
            [
                "fiona77",
                "Crist"
            ],
            [
                "ekshlerin",
                "Haley"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (course_authors_and_tutors:`e_learning.Course_Authors_and_Tutors`)\nRETURN course_authors_and_tutors.login_name,course_authors_and_tutors.family_name",
        "question": "What are the login names and family names of course author and tutors?",
        "answers": [
            [
                "jmckenzie",
                "Grant"
            ],
            [
                "heidenreich.ara",
                "Armstrong"
            ],
            [
                "clementina29",
                "Reichel"
            ],
            [
                "wlehner",
                "Nader"
            ],
            [
                "nyundt",
                "Barrows"
            ],
            [
                "al75",
                "Rohan"
            ],
            [
                "marty.bergnaum",
                "Treutel"
            ],
            [
                "medhurst.alvah",
                "Rowe"
            ],
            [
                "antonetta19",
                "Zboncak"
            ],
            [
                "adam.rippin",
                "Champlin"
            ],
            [
                "dschaefer",
                "Greenholt"
            ],
            [
                "nellie.mosciski",
                "Kreiger"
            ],
            [
                "qking",
                "Effertz"
            ],
            [
                "fiona77",
                "Crist"
            ],
            [
                "ekshlerin",
                "Haley"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (student_course_enrolment:`e_learning.Student_Course_Enrolment`)\nRETURN student_course_enrolment.date_of_enrolment,student_course_enrolment.date_of_completion",
        "question": "List all the dates of enrollment and completion of students.",
        "answers": [
            [
                "2017-10-09 07:09:02",
                "2018-02-26 07:48:52"
            ],
            [
                "2017-11-13 12:49:33",
                "2018-03-04 01:24:56"
            ],
            [
                "2017-10-17 13:50:40",
                "2018-03-22 02:53:01"
            ],
            [
                "2017-09-06 06:27:15",
                "2018-03-07 09:45:48"
            ],
            [
                "2017-08-20 01:07:18",
                "2018-03-06 00:27:09"
            ],
            [
                "2017-09-24 15:17:26",
                "2018-03-01 00:08:30"
            ],
            [
                "2017-09-21 07:05:01",
                "2018-03-04 22:34:37"
            ],
            [
                "2017-12-07 02:21:13",
                "2018-02-27 20:06:06"
            ],
            [
                "2017-08-02 17:21:44",
                "2018-03-07 00:39:37"
            ],
            [
                "2017-10-10 10:05:03",
                "2018-03-19 07:34:05"
            ],
            [
                "2017-08-17 00:16:46",
                "2018-03-16 09:00:44"
            ],
            [
                "2017-11-30 11:40:56",
                "2018-03-02 14:38:49"
            ],
            [
                "2017-10-26 20:42:34",
                "2018-03-10 16:38:28"
            ],
            [
                "2017-07-15 12:48:43",
                "2018-03-18 03:23:54"
            ],
            [
                "2017-12-09 20:49:23",
                "2018-02-28 09:34:51"
            ],
            [
                "2017-12-16 15:53:06",
                "2018-03-22 18:04:54"
            ],
            [
                "2017-10-29 15:39:31",
                "2018-03-01 07:12:39"
            ],
            [
                "2017-11-22 18:29:18",
                "2018-03-09 17:56:18"
            ],
            [
                "2017-10-23 08:23:22",
                "2018-02-26 23:46:25"
            ],
            [
                "2017-12-04 12:16:10",
                "2018-03-14 23:33:47"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (student_course_enrolment:`e_learning.Student_Course_Enrolment`)\nRETURN student_course_enrolment.date_of_enrolment,student_course_enrolment.date_of_completion",
        "question": "What are all the dates of enrollment and completion in record?",
        "answers": [
            [
                "2017-10-09 07:09:02",
                "2018-02-26 07:48:52"
            ],
            [
                "2017-11-13 12:49:33",
                "2018-03-04 01:24:56"
            ],
            [
                "2017-10-17 13:50:40",
                "2018-03-22 02:53:01"
            ],
            [
                "2017-09-06 06:27:15",
                "2018-03-07 09:45:48"
            ],
            [
                "2017-08-20 01:07:18",
                "2018-03-06 00:27:09"
            ],
            [
                "2017-09-24 15:17:26",
                "2018-03-01 00:08:30"
            ],
            [
                "2017-09-21 07:05:01",
                "2018-03-04 22:34:37"
            ],
            [
                "2017-12-07 02:21:13",
                "2018-02-27 20:06:06"
            ],
            [
                "2017-08-02 17:21:44",
                "2018-03-07 00:39:37"
            ],
            [
                "2017-10-10 10:05:03",
                "2018-03-19 07:34:05"
            ],
            [
                "2017-08-17 00:16:46",
                "2018-03-16 09:00:44"
            ],
            [
                "2017-11-30 11:40:56",
                "2018-03-02 14:38:49"
            ],
            [
                "2017-10-26 20:42:34",
                "2018-03-10 16:38:28"
            ],
            [
                "2017-07-15 12:48:43",
                "2018-03-18 03:23:54"
            ],
            [
                "2017-12-09 20:49:23",
                "2018-02-28 09:34:51"
            ],
            [
                "2017-12-16 15:53:06",
                "2018-03-22 18:04:54"
            ],
            [
                "2017-10-29 15:39:31",
                "2018-03-01 07:12:39"
            ],
            [
                "2017-11-22 18:29:18",
                "2018-03-09 17:56:18"
            ],
            [
                "2017-10-23 08:23:22",
                "2018-02-26 23:46:25"
            ],
            [
                "2017-12-04 12:16:10",
                "2018-03-14 23:33:47"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (student_course_enrolment:`e_learning.Student_Course_Enrolment`)\nRETURN count(DISTINCT student_course_enrolment.student_id)",
        "question": "How many distinct students are enrolled in courses?",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (student_course_enrolment:`e_learning.Student_Course_Enrolment`)\nRETURN count(DISTINCT student_course_enrolment.student_id)",
        "question": "Find the number of distinct students enrolled in courses.",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (student_course_enrolment:`e_learning.Student_Course_Enrolment`)\nRETURN count(student_course_enrolment.course_id)",
        "question": "How many distinct courses are enrolled in by students?",
        "answers": [
            [
                20
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (student_course_enrolment:`e_learning.Student_Course_Enrolment`)\nRETURN count(student_course_enrolment.course_id)",
        "question": "Find the number of distinct courses that have enrolled students.",
        "answers": [
            [
                20
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (subjects:`e_learning.Subjects`)\nRETURN subjects.subject_name",
        "question": "List all the subject names.",
        "answers": [
            [
                "Computer Science"
            ],
            [
                "Arts"
            ],
            [
                "Language"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (subjects:`e_learning.Subjects`)\nRETURN subjects.subject_name",
        "question": "What are the names of all the subjects.",
        "answers": [
            [
                "Computer Science"
            ],
            [
                "Arts"
            ],
            [
                "Language"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (students:`e_learning.Students`)\nRETURN students.personal_name,students.family_name\nORDER BY students.family_name",
        "question": "List the personal names and family names of all the students in alphabetical order of family name.",
        "answers": [
            [
                "Alicia",
                "Carroll"
            ],
            [
                "Else",
                "Hartmann"
            ],
            [
                "Jewel",
                "Hodkiewicz"
            ],
            [
                "Karson",
                "Jaskolski"
            ],
            [
                "Marshall",
                "Johns"
            ],
            [
                "Krystel",
                "Langosh"
            ],
            [
                "Eliza",
                "Leannon"
            ],
            [
                "Mariela",
                "Legros"
            ],
            [
                "Claudia",
                "Mitchell"
            ],
            [
                "Cary",
                "O'Reilly"
            ],
            [
                "Autumn",
                "Schumm"
            ],
            [
                "Wilson",
                "Ward"
            ],
            [
                "Clotilde",
                "Windler"
            ],
            [
                "Prince",
                "Ziemann"
            ],
            [
                "Bernie",
                "Zieme"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (students:`e_learning.Students`)\nRETURN students.personal_name,students.family_name\nORDER BY students.family_name",
        "question": "What are the personal names and family names of the students? Sort the result in alphabetical order of the family name.",
        "answers": [
            [
                "Alicia",
                "Carroll"
            ],
            [
                "Else",
                "Hartmann"
            ],
            [
                "Jewel",
                "Hodkiewicz"
            ],
            [
                "Karson",
                "Jaskolski"
            ],
            [
                "Marshall",
                "Johns"
            ],
            [
                "Krystel",
                "Langosh"
            ],
            [
                "Eliza",
                "Leannon"
            ],
            [
                "Mariela",
                "Legros"
            ],
            [
                "Claudia",
                "Mitchell"
            ],
            [
                "Cary",
                "O'Reilly"
            ],
            [
                "Autumn",
                "Schumm"
            ],
            [
                "Wilson",
                "Ward"
            ],
            [
                "Clotilde",
                "Windler"
            ],
            [
                "Prince",
                "Ziemann"
            ],
            [
                "Bernie",
                "Zieme"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (student_tests_taken:`e_learning.Student_Tests_Taken`)\nRETURN student_tests_taken.test_result,count(*)\nORDER BY student_tests_taken.test_result DESC",
        "question": "List each test result and its count in descending order of count.",
        "answers": [
            [
                "Pass",
                8
            ],
            [
                "Fail",
                7
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (student_tests_taken:`e_learning.Student_Tests_Taken`)\nRETURN student_tests_taken.test_result,count(*)\nORDER BY student_tests_taken.test_result DESC",
        "question": "For each distinct test result, find the number of students who got the result.",
        "answers": [
            [
                "Pass",
                8
            ],
            [
                "Fail",
                7
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (T1:`e_learning.Course_Authors_and_Tutors`)-[]-(T2:`e_learning.Courses`)\nWHERE T2.course_name = \"advanced database\"\nRETURN T1.login_name",
        "question": "Find the login name of the course author that teaches the course with name \"advanced database\".",
        "answers": [
            [
                "al75"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (T1:`e_learning.Course_Authors_and_Tutors`)-[]-(T2:`e_learning.Courses`)\nWHERE T2.course_name = \"advanced database\"\nRETURN T1.login_name",
        "question": "Which course author teaches the \"advanced database\" course? Give me his or her login name.",
        "answers": [
            [
                "al75"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (T1:`e_learning.Course_Authors_and_Tutors`)-[]-(T2:`e_learning.Courses`)\nWHERE T2.course_name = \"operating system\" OR T2.course_name = \"data structure\"\nRETURN T1.address_line_1",
        "question": "Find the addresses of the course authors who teach the course with name \"operating system\" or \"data structure\".",
        "answers": [
            [
                "8928 Kunze Valley Apt. 747\nSouth Jedidiahmouth, DE 28167"
            ],
            [
                "425 White Brooks\nEmmaleefort, IN 97850-2510"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (T1:`e_learning.Course_Authors_and_Tutors`)-[]-(T2:`e_learning.Courses`)\nWHERE T2.course_name = \"operating system\" OR T2.course_name = \"data structure\"\nRETURN T1.address_line_1",
        "question": "What are the addresses of the course authors who teach either \"operating system\" or \"data structure\" course.",
        "answers": [
            [
                "8928 Kunze Valley Apt. 747\nSouth Jedidiahmouth, DE 28167"
            ],
            [
                "425 White Brooks\nEmmaleefort, IN 97850-2510"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (T1:`e_learning.Course_Authors_and_Tutors`)-[]-(T2:`e_learning.Courses`)\nWITH T2.author_id AS author_id, count(*) AS count, T1.address_line_1 AS address_line_1\nWHERE count  >= 2\nRETURN address_line_1,author_id",
        "question": "Find the addresses and author IDs of the course authors that teach at least two courses.",
        "answers": [
            [
                "5284 Champlin Roads\nCassinport, WY 54636",
                5
            ],
            [
                "92220 Hellen Skyway Apt. 635\nRennerview, MS 81036",
                6
            ],
            [
                "0256 Walter Meadows Suite 523\nNorbertoborough, AZ 49193",
                8
            ],
            [
                "139 O'Conner Circles\nVirginieland, KS 23365",
                13
            ],
            [
                "3602 Boehm Forest\nZulaufton, DC 35229-0366",
                14
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (T1:`e_learning.Course_Authors_and_Tutors`)-[]-(T2:`e_learning.Courses`)\nWITH T2.author_id AS author_id, count(*) AS count, T1.address_line_1 AS address_line_1\nWHERE count  >= 2\nRETURN address_line_1,author_id",
        "question": "Which course authors teach two or more courses? Give me their addresses and author IDs.",
        "answers": [
            [
                "5284 Champlin Roads\nCassinport, WY 54636",
                5
            ],
            [
                "92220 Hellen Skyway Apt. 635\nRennerview, MS 81036",
                6
            ],
            [
                "0256 Walter Meadows Suite 523\nNorbertoborough, AZ 49193",
                8
            ],
            [
                "139 O'Conner Circles\nVirginieland, KS 23365",
                13
            ],
            [
                "3602 Boehm Forest\nZulaufton, DC 35229-0366",
                14
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (T1:`e_learning.Courses`)-[]-(T2:`e_learning.Subjects`)\nWHERE T2.subject_name = \"Computer Science\"\nRETURN T1.course_name,T1.course_description",
        "question": "Find the names and descriptions of courses that belong to the subject named \"Computer Science\".",
        "answers": [
            [
                "AI",
                "AI"
            ],
            [
                "operating system",
                "operating system"
            ],
            [
                "machine learning",
                "machine learning"
            ],
            [
                "database",
                "database"
            ],
            [
                "data structure",
                "data structure"
            ],
            [
                "advanced database",
                "advanced database"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (T1:`e_learning.Courses`)-[]-(T2:`e_learning.Subjects`)\nWHERE T2.subject_name = \"Computer Science\"\nRETURN T1.course_name,T1.course_description",
        "question": "What are the names and descriptions of the all courses under the \"Computer Science\" subject?",
        "answers": [
            [
                "AI",
                "AI"
            ],
            [
                "operating system",
                "operating system"
            ],
            [
                "machine learning",
                "machine learning"
            ],
            [
                "database",
                "database"
            ],
            [
                "data structure",
                "data structure"
            ],
            [
                "advanced database",
                "advanced database"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (T1:`e_learning.Courses`)-[]-(T2:`e_learning.Subjects`)\nRETURN T1.subject_id,T2.subject_name,count(*)",
        "question": "Find the subject ID, subject name, and the corresponding number of available courses for each subject.",
        "answers": [
            [
                1,
                "Computer Science",
                6
            ],
            [
                2,
                "Arts",
                4
            ],
            [
                3,
                "Language",
                5
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (T1:`e_learning.Courses`)-[]-(T2:`e_learning.Subjects`)\nRETURN T1.subject_id,T2.subject_name,count(*)",
        "question": "What are the subject ID, subject name, and the number of available courses for each subject?",
        "answers": [
            [
                1,
                "Computer Science",
                6
            ],
            [
                2,
                "Arts",
                4
            ],
            [
                3,
                "Language",
                5
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (T1:`e_learning.Courses`)-[]-(T2:`e_learning.Student_Course_Enrolment`)\nWITH count(T1.course_name) AS cnt, T1\nRETURN T1.course_name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the name of the course that has the most student enrollment?",
        "answers": [
            [
                "French"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (T1:`e_learning.Courses`)-[]-(T2:`e_learning.Student_Course_Enrolment`)\nWITH count(T1.course_name) AS cnt, T1\nRETURN T1.course_name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Which course is enrolled in by the most students? Give me the course name.",
        "answers": [
            [
                "French"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (T1:`e_learning.Courses`)-[]-(T2:`e_learning.Student_Course_Enrolment`)\nWITH count(*) AS count, T1.course_name AS course_name\nWHERE count  = 1\nRETURN course_name",
        "question": "What are the names of the courses that have exactly 1 student enrollment?",
        "answers": [
            [
                "Chinese Painting"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (T1:`e_learning.Courses`)-[]-(T2:`e_learning.Student_Course_Enrolment`)\nWITH count(*) AS count, T1.course_name AS course_name\nWHERE count  = 1\nRETURN course_name",
        "question": "Find the names of the courses that have just one student enrollment.",
        "answers": [
            [
                "Chinese Painting"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (T1:`e_learning.Courses`)-[]-(T2:`e_learning.Student_Course_Enrolment`)\nWITH count(*) AS count, T1.course_name AS course_name, T1.course_description AS course_description\nWHERE count  > 2\nRETURN course_description,course_name",
        "question": "What are the descriptions and names of the courses that have student enrollment bigger than 2?",
        "answers": [
            [
                "French",
                "French"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (T1:`e_learning.Courses`)-[]-(T2:`e_learning.Student_Course_Enrolment`)\nWITH count(*) AS count, T1.course_name AS course_name, T1.course_description AS course_description\nWHERE count  > 2\nRETURN course_description,course_name",
        "question": "Return the descriptions and names of the courses that have more than two students enrolled in.",
        "answers": [
            [
                "French",
                "French"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (T1:`e_learning.Courses`)-[]-(T2:`e_learning.Student_Course_Enrolment`)\nRETURN T1.course_name,count(*)",
        "question": "What is the name of each course and the corresponding number of student enrollment?",
        "answers": [
            [
                "database",
                2
            ],
            [
                "advanced database",
                2
            ],
            [
                "Art history",
                2
            ],
            [
                "French",
                3
            ],
            [
                "Japanese",
                2
            ],
            [
                "AI",
                2
            ],
            [
                "Writing in French",
                2
            ],
            [
                "Spanish",
                2
            ],
            [
                "modern Arts",
                2
            ],
            [
                "Chinese Painting",
                1
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (T1:`e_learning.Courses`)-[]-(T2:`e_learning.Student_Course_Enrolment`)\nRETURN T1.course_name,count(*)",
        "question": "List the name and the number of enrolled student for each course.",
        "answers": [
            [
                "database",
                2
            ],
            [
                "advanced database",
                2
            ],
            [
                "Art history",
                2
            ],
            [
                "French",
                3
            ],
            [
                "Japanese",
                2
            ],
            [
                "AI",
                2
            ],
            [
                "Writing in French",
                2
            ],
            [
                "Spanish",
                2
            ],
            [
                "modern Arts",
                2
            ],
            [
                "Chinese Painting",
                1
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (T1:`e_learning.Student_Course_Enrolment`)-[]-(T2:`e_learning.Students`)\nWITH T1.student_id AS student_id, count(*) AS count, T2.personal_name AS personal_name\nWHERE count  >= 2\nRETURN student_id,personal_name",
        "question": "Find the student ID and personal name of the student with at least two enrollments.",
        "answers": [
            [
                8,
                "Marshall"
            ],
            [
                10,
                "Alicia"
            ],
            [
                14,
                "Cary"
            ],
            [
                15,
                "Eliza"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (T1:`e_learning.Student_Course_Enrolment`)-[]-(T2:`e_learning.Students`)\nWITH T1.student_id AS student_id, count(*) AS count, T2.personal_name AS personal_name\nWHERE count  >= 2\nRETURN student_id,personal_name",
        "question": "Which student are enrolled in at least two courses? Give me the student ID and personal name.",
        "answers": [
            [
                8,
                "Marshall"
            ],
            [
                10,
                "Alicia"
            ],
            [
                14,
                "Cary"
            ],
            [
                15,
                "Eliza"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (T1:`e_learning.Student_Course_Enrolment`)-[]-(T2:`e_learning.Students`)\nWITH T2.middle_name AS middle_name, T1.student_id AS student_id, count(*) AS count\nWHERE count  <= 2\nRETURN student_id,middle_name",
        "question": "Find the student ID and middle name for all the students with at most two enrollments.",
        "answers": [
            [
                2,
                "Luella"
            ],
            [
                3,
                "Brandt"
            ],
            [
                4,
                "Casimir"
            ],
            [
                6,
                "Asa"
            ],
            [
                9,
                "Kailey"
            ],
            [
                10,
                "Vicente"
            ],
            [
                11,
                "Kolby"
            ],
            [
                12,
                "Karley"
            ],
            [
                13,
                "Camilla"
            ],
            [
                14,
                "Ursula"
            ]
        ]
    },
    {
        "db_id": "e_learning",
        "query": "MATCH (T1:`e_learning.Student_Course_Enrolment`)-[]-(T2:`e_learning.Students`)\nWITH T2.middle_name AS middle_name, T1.student_id AS student_id, count(*) AS count\nWHERE count  <= 2\nRETURN student_id,middle_name",
        "question": "What are the student IDs and middle names of the students enrolled in at most two courses?",
        "answers": [
            [
                2,
                "Luella"
            ],
            [
                3,
                "Brandt"
            ],
            [
                4,
                "Casimir"
            ],
            [
                6,
                "Asa"
            ],
            [
                9,
                "Kailey"
            ],
            [
                10,
                "Vicente"
            ],
            [
                11,
                "Kolby"
            ],
            [
                12,
                "Karley"
            ],
            [
                13,
                "Camilla"
            ],
            [
                14,
                "Ursula"
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (payments:`insurance_policies.Payments`)\nRETURN payments.Payment_Method_Code,payments.Date_Payment_Made,payments.Amount_Payment\nORDER BY payments.Date_Payment_Made ASC",
        "question": "List the method, date and amount of all the payments, in ascending order of date.",
        "answers": [
            [
                "Visa",
                "2017-05-03",
                172309
            ],
            [
                "Discover Card",
                "2017-05-04",
                123255
            ],
            [
                "MasterCard",
                "2017-05-28",
                448613
            ],
            [
                "Visa",
                "2017-05-28",
                155654
            ],
            [
                "MasterCard",
                "2017-06-24",
                456098
            ],
            [
                "MasterCard",
                "2017-07-31",
                423154
            ],
            [
                "Discover Card",
                "2017-08-06",
                38324
            ],
            [
                "Discover Card",
                "2017-10-07",
                71246
            ],
            [
                "Visa",
                "2017-12-16",
                459407
            ],
            [
                "MasterCard",
                "2018-01-10",
                407235
            ],
            [
                "American Express",
                "2018-01-19",
                177130
            ],
            [
                "MasterCard",
                "2018-01-28",
                319142
            ],
            [
                "MasterCard",
                "2018-02-16",
                241730
            ],
            [
                "MasterCard",
                "2018-02-18",
                235893
            ],
            [
                "Visa",
                "2018-02-24",
                7343
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (payments:`insurance_policies.Payments`)\nRETURN payments.Payment_Method_Code,payments.Date_Payment_Made,payments.Amount_Payment\nORDER BY payments.Date_Payment_Made ASC",
        "question": "What are the method, date and amount of each payment? Sort the list in ascending order of date.",
        "answers": [
            [
                "Visa",
                "2017-05-03",
                172309
            ],
            [
                "Discover Card",
                "2017-05-04",
                123255
            ],
            [
                "MasterCard",
                "2017-05-28",
                448613
            ],
            [
                "Visa",
                "2017-05-28",
                155654
            ],
            [
                "MasterCard",
                "2017-06-24",
                456098
            ],
            [
                "MasterCard",
                "2017-07-31",
                423154
            ],
            [
                "Discover Card",
                "2017-08-06",
                38324
            ],
            [
                "Discover Card",
                "2017-10-07",
                71246
            ],
            [
                "Visa",
                "2017-12-16",
                459407
            ],
            [
                "MasterCard",
                "2018-01-10",
                407235
            ],
            [
                "American Express",
                "2018-01-19",
                177130
            ],
            [
                "MasterCard",
                "2018-01-28",
                319142
            ],
            [
                "MasterCard",
                "2018-02-16",
                241730
            ],
            [
                "MasterCard",
                "2018-02-18",
                235893
            ],
            [
                "Visa",
                "2018-02-24",
                7343
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (claims:`insurance_policies.Claims`)\nRETURN claims.Amount_Settled,claims.Amount_Claimed\nORDER BY claims.Amount_Claimed DESC\nLIMIT 1",
        "question": "Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount.",
        "answers": [
            [
                1528,
                89632
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (claims:`insurance_policies.Claims`)\nRETURN claims.Amount_Settled,claims.Amount_Claimed\nORDER BY claims.Amount_Claimed DESC\nLIMIT 1",
        "question": "Find the settlement amount of the claim with the largest claim amount. Show both the settlement amount and claim amount.",
        "answers": [
            [
                1528,
                89632
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (claims:`insurance_policies.Claims`)\nRETURN claims.Amount_Settled,claims.Amount_Claimed\nORDER BY claims.Amount_Settled ASC\nLIMIT 1",
        "question": "Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount.",
        "answers": [
            [
                930,
                49743
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (claims:`insurance_policies.Claims`)\nRETURN claims.Amount_Settled,claims.Amount_Claimed\nORDER BY claims.Amount_Settled ASC\nLIMIT 1",
        "question": "Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount.",
        "answers": [
            [
                930,
                49743
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (claims:`insurance_policies.Claims`)\nWITH avg(claims.Amount_Claimed) AS amount_claimed\nMATCH (claims:`insurance_policies.Claims`)\nWHERE  claims.Amount_Claimed >  amount_claimed \nRETURN claims.Date_Claim_Made,claims.Date_Claim_Settled",
        "question": "Among all the claims, which claims have a claimed amount larger than the average? List the date the claim was made and the date it was settled.",
        "answers": [
            [
                "2016-08-12",
                "2018-01-27"
            ],
            [
                "2017-02-24",
                "2018-01-21"
            ],
            [
                "2018-06-14",
                "2017-12-20"
            ],
            [
                "2017-08-03",
                "2018-02-18"
            ],
            [
                "2016-08-26",
                "2017-09-04"
            ],
            [
                "2018-07-13",
                "2017-11-22"
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (claims:`insurance_policies.Claims`)\nWITH avg(claims.Amount_Claimed) AS amount_claimed\nMATCH (claims:`insurance_policies.Claims`)\nWHERE  claims.Amount_Claimed >  amount_claimed \nRETURN claims.Date_Claim_Made,claims.Date_Claim_Settled",
        "question": "Give me the claim date, settlement date for all the claims whose claimed amount is larger than the average.",
        "answers": [
            [
                "2016-08-12",
                "2018-01-27"
            ],
            [
                "2017-02-24",
                "2018-01-21"
            ],
            [
                "2018-06-14",
                "2017-12-20"
            ],
            [
                "2017-08-03",
                "2018-02-18"
            ],
            [
                "2016-08-26",
                "2017-09-04"
            ],
            [
                "2018-07-13",
                "2017-11-22"
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (T1:`insurance_policies.Claims`)-[]-(T2:`insurance_policies.Settlements`)\nRETURN T1.Claim_ID,count(*)",
        "question": "How many settlements does each claim correspond to? List the claim id and the number of settlements.",
        "answers": [
            [
                486,
                2
            ],
            [
                563,
                1
            ],
            [
                569,
                1
            ],
            [
                571,
                1
            ],
            [
                621,
                2
            ],
            [
                761,
                2
            ],
            [
                801,
                4
            ],
            [
                843,
                1
            ],
            [
                957,
                1
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (T1:`insurance_policies.Claims`)-[]-(T2:`insurance_policies.Settlements`)\nRETURN T1.Claim_ID,count(*)",
        "question": "Find the number of settlements each claim corresponds to. Show the number together with the claim id.",
        "answers": [
            [
                486,
                2
            ],
            [
                563,
                1
            ],
            [
                569,
                1
            ],
            [
                571,
                1
            ],
            [
                621,
                2
            ],
            [
                761,
                2
            ],
            [
                801,
                4
            ],
            [
                843,
                1
            ],
            [
                957,
                1
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (claims:`insurance_policies.Claims`)\nRETURN claims.Date_Claim_Made\nORDER BY claims.Date_Claim_Made ASC\nLIMIT 1",
        "question": "Of all the claims, what was the earliest date when any claim was made?",
        "answers": [
            [
                "2016-08-02"
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (claims:`insurance_policies.Claims`)\nRETURN claims.Date_Claim_Made\nORDER BY claims.Date_Claim_Made ASC\nLIMIT 1",
        "question": "Tell me the the date when the first claim was made.",
        "answers": [
            [
                "2016-08-02"
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (T1:`insurance_policies.Customers`)-[]-(T2:`insurance_policies.Customer_Policies`)\nWITH T1.Customer_ID AS Customer_ID, count(*) AS count, T1.Customer_Details AS Customer_Details\nWHERE count  > 1\nRETURN Customer_Details,Customer_ID",
        "question": "Who are the customers that had more than 1 policy? List the customer details and id.",
        "answers": [
            [
                "Ellsworth Paucek",
                2
            ],
            [
                "Mrs. Hanna Willms",
                3
            ],
            [
                "Dr. Diana Rath",
                4
            ],
            [
                "Lauriane Ferry PhD",
                6
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (T1:`insurance_policies.Customers`)-[]-(T2:`insurance_policies.Customer_Policies`)\nWITH T1.Customer_ID AS Customer_ID, count(*) AS count, T1.Customer_Details AS Customer_Details\nWHERE count  > 1\nRETURN Customer_Details,Customer_ID",
        "question": "Find the the customer details and id for the customers who had more than one policy.",
        "answers": [
            [
                "Ellsworth Paucek",
                2
            ],
            [
                "Mrs. Hanna Willms",
                3
            ],
            [
                "Dr. Diana Rath",
                4
            ],
            [
                "Lauriane Ferry PhD",
                6
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (settlements:`insurance_policies.Settlements`)\nRETURN settlements.Date_Claim_Made,settlements.Date_Claim_Settled",
        "question": "What are the claim dates and settlement dates of all the settlements?",
        "answers": [
            [
                "2018-08-07",
                "2018-01-16"
            ],
            [
                "2017-08-27",
                "2018-02-04"
            ],
            [
                "2016-09-05",
                "2018-03-02"
            ],
            [
                "2016-05-18",
                "2018-02-11"
            ],
            [
                "2017-05-19",
                "2017-10-06"
            ],
            [
                "2018-11-10",
                "2018-02-15"
            ],
            [
                "2018-05-12",
                "2017-11-30"
            ],
            [
                "2016-07-04",
                "2018-02-20"
            ],
            [
                "2017-04-18",
                "2017-12-24"
            ],
            [
                "2017-07-31",
                "2018-01-27"
            ],
            [
                "2017-09-22",
                "2018-02-14"
            ],
            [
                "2017-03-04",
                "2018-02-20"
            ],
            [
                "2017-04-14",
                "2017-11-15"
            ],
            [
                "2017-03-29",
                "2018-02-20"
            ],
            [
                "2016-07-19",
                "2017-11-04"
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (settlements:`insurance_policies.Settlements`)\nRETURN settlements.Date_Claim_Made,settlements.Date_Claim_Settled",
        "question": "Tell me the the claim date and settlement date for each settlement case.",
        "answers": [
            [
                "2018-08-07",
                "2018-01-16"
            ],
            [
                "2017-08-27",
                "2018-02-04"
            ],
            [
                "2016-09-05",
                "2018-03-02"
            ],
            [
                "2016-05-18",
                "2018-02-11"
            ],
            [
                "2017-05-19",
                "2017-10-06"
            ],
            [
                "2018-11-10",
                "2018-02-15"
            ],
            [
                "2018-05-12",
                "2017-11-30"
            ],
            [
                "2016-07-04",
                "2018-02-20"
            ],
            [
                "2017-04-18",
                "2017-12-24"
            ],
            [
                "2017-07-31",
                "2018-01-27"
            ],
            [
                "2017-09-22",
                "2018-02-14"
            ],
            [
                "2017-03-04",
                "2018-02-20"
            ],
            [
                "2017-04-14",
                "2017-11-15"
            ],
            [
                "2017-03-29",
                "2018-02-20"
            ],
            [
                "2016-07-19",
                "2017-11-04"
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (payments:`insurance_policies.Payments`)\nRETURN payments.Payment_Method_Code\nORDER BY payments.Payment_Method_Code ASC\nLIMIT 1",
        "question": "With which kind of payment method were the least number of payments processed?",
        "answers": [
            [
                "American Express"
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (payments:`insurance_policies.Payments`)\nRETURN payments.Payment_Method_Code\nORDER BY payments.Payment_Method_Code ASC\nLIMIT 1",
        "question": "What is the payment method that were used the least often?",
        "answers": [
            [
                "American Express"
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (customers:`insurance_policies.Customers`)\nRETURN DISTINCT customers.Customer_Details",
        "question": "What are all the distinct details of the customers?",
        "answers": [
            [
                "America Jaskolski"
            ],
            [
                "Ellsworth Paucek"
            ],
            [
                "Mrs. Hanna Willms"
            ],
            [
                "Dr. Diana Rath"
            ],
            [
                "Selena Gerhold"
            ],
            [
                "Lauriane Ferry PhD"
            ],
            [
                "Sydnie Friesen"
            ],
            [
                "Dayana Robel"
            ],
            [
                "Mr. Edwardo Blanda I"
            ],
            [
                "Augustine Kerluke"
            ],
            [
                "Buddy Marquardt"
            ],
            [
                "Mr. Randal Lynch III"
            ],
            [
                "Mrs. Liza Heller V"
            ],
            [
                "Mrs. Lilly Graham III"
            ],
            [
                "Miss Felicita Reichel"
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (customers:`insurance_policies.Customers`)\nRETURN DISTINCT customers.Customer_Details",
        "question": "Return the distinct customer details.",
        "answers": [
            [
                "America Jaskolski"
            ],
            [
                "Ellsworth Paucek"
            ],
            [
                "Mrs. Hanna Willms"
            ],
            [
                "Dr. Diana Rath"
            ],
            [
                "Selena Gerhold"
            ],
            [
                "Lauriane Ferry PhD"
            ],
            [
                "Sydnie Friesen"
            ],
            [
                "Dayana Robel"
            ],
            [
                "Mr. Edwardo Blanda I"
            ],
            [
                "Augustine Kerluke"
            ],
            [
                "Buddy Marquardt"
            ],
            [
                "Mr. Randal Lynch III"
            ],
            [
                "Mrs. Liza Heller V"
            ],
            [
                "Mrs. Lilly Graham III"
            ],
            [
                "Miss Felicita Reichel"
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (customer_policies:`insurance_policies.Customer_Policies`)\nRETURN customer_policies.Policy_Type_Code\nORDER BY customer_policies.Policy_Type_Code DESC\nLIMIT 1",
        "question": "Which kind of policy type was chosen by the most customers?",
        "answers": [
            [
                "Travel"
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (customer_policies:`insurance_policies.Customer_Policies`)\nRETURN customer_policies.Policy_Type_Code\nORDER BY customer_policies.Policy_Type_Code DESC\nLIMIT 1",
        "question": "Find the policy type the most customers choose.",
        "answers": [
            [
                "Travel"
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (settlements:`insurance_policies.Settlements`)\nRETURN count(*)",
        "question": "How many settlements are there in total?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (settlements:`insurance_policies.Settlements`)\nRETURN count(*)",
        "question": "Count the total number of settlements made.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (payments:`insurance_policies.Payments`)\nWHERE payments.Payment_Method_Code = 'Visa'\nRETURN payments.Payment_ID,payments.Date_Payment_Made,payments.Amount_Payment",
        "question": "Which Payments were processed with Visa? List the payment Id, the date and the amount.",
        "answers": [
            [
                678,
                "2017-12-16",
                459407
            ],
            [
                754,
                "2018-02-24",
                7343
            ],
            [
                779,
                "2017-05-28",
                155654
            ],
            [
                791,
                "2017-05-03",
                172309
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (payments:`insurance_policies.Payments`)\nWHERE payments.Payment_Method_Code = 'Visa'\nRETURN payments.Payment_ID,payments.Date_Payment_Made,payments.Amount_Payment",
        "question": "Give me the payment Id, the date and the amount for all the payments processed with Visa.",
        "answers": [
            [
                678,
                "2017-12-16",
                459407
            ],
            [
                754,
                "2018-02-24",
                7343
            ],
            [
                779,
                "2017-05-28",
                155654
            ],
            [
                791,
                "2017-05-03",
                172309
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (T1:`insurance_policies.Claims`)-[]-(T2:`insurance_policies.Settlements`)\nWITH T1.Date_Claim_Settled AS Date_Claim_Settled, count(*) AS count, T1.Date_Claim_Made AS Date_Claim_Made, T1.Claim_ID AS Claim_ID\nWHERE count  = 1\nRETURN Claim_ID,Date_Claim_Made,Date_Claim_Settled",
        "question": "List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement.",
        "answers": [
            [
                563,
                "2016-08-02",
                "2017-09-04"
            ],
            [
                569,
                "2018-07-15",
                "2017-11-19"
            ],
            [
                571,
                "2017-08-03",
                "2018-02-18"
            ],
            [
                843,
                "2017-10-14",
                "2018-02-20"
            ],
            [
                957,
                "2018-11-08",
                "2017-09-15"
            ]
        ]
    },
    {
        "db_id": "insurance_policies",
        "query": "MATCH (T1:`insurance_policies.Claims`)-[]-(T2:`insurance_policies.Settlements`)\nWITH T1.Date_Claim_Settled AS Date_Claim_Settled, count(*) AS count, T1.Date_Claim_Made AS Date_Claim_Made, T1.Claim_ID AS Claim_ID\nWHERE count  = 1\nRETURN Claim_ID,Date_Claim_Made,Date_Claim_Settled",
        "question": "Which claims had exactly one settlement? For each, tell me the the date the claim was made, the date it was settled and the amount settled.",
        "answers": [
            [
                563,
                "2016-08-02",
                "2017-09-04"
            ],
            [
                569,
                "2018-07-15",
                "2017-11-19"
            ],
            [
                571,
                "2017-08-03",
                "2018-02-18"
            ],
            [
                843,
                "2017-10-14",
                "2018-02-20"
            ],
            [
                957,
                "2018-11-08",
                "2017-09-15"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (appointment:`hospital_1.Appointment`)\nRETURN appointment.AppointmentID\nORDER BY appointment.Start DESC\nLIMIT 1",
        "question": "Find the id of the appointment with the most recent start date?",
        "answers": [
            [
                86213939
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (appointment:`hospital_1.Appointment`)\nRETURN appointment.AppointmentID\nORDER BY appointment.Start DESC\nLIMIT 1",
        "question": "What is the id of the appointment that started most recently?",
        "answers": [
            [
                86213939
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Appointment`)-[]-(T2:`hospital_1.Physician`)\nRETURN T2.Name",
        "question": "List the name of physicians who took some appointment.",
        "answers": [
            [
                "John Dorian"
            ],
            [
                "Elliot Reid"
            ],
            [
                "John Dorian"
            ],
            [
                "Percival Cox"
            ],
            [
                "Percival Cox"
            ],
            [
                "Elliot Reid"
            ],
            [
                "Christopher Turk"
            ],
            [
                "Molly Clock"
            ],
            [
                "Elliot Reid"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Appointment`)-[]-(T2:`hospital_1.Physician`)\nRETURN T2.Name",
        "question": "What are the names of all the physicians who took appointments.",
        "answers": [
            [
                "John Dorian"
            ],
            [
                "Elliot Reid"
            ],
            [
                "John Dorian"
            ],
            [
                "Percival Cox"
            ],
            [
                "Percival Cox"
            ],
            [
                "Elliot Reid"
            ],
            [
                "Christopher Turk"
            ],
            [
                "Molly Clock"
            ],
            [
                "Elliot Reid"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Affiliated_With`]-(T3:`hospital_1.Department`)\nWHERE T2.PrimaryAffiliation = 1\nRETURN T1.Name,T3.Name",
        "question": "Find the names of all physicians and their primary affiliated departments' names.",
        "answers": [
            [
                "Percival Cox",
                "General Medicine"
            ],
            [
                "Elliot Reid",
                "General Medicine"
            ],
            [
                "Bob Kelso",
                "General Medicine"
            ],
            [
                "John Dorian",
                "General Medicine"
            ],
            [
                "Keith Dudemeister",
                "General Medicine"
            ],
            [
                "Christopher Turk",
                "Surgery"
            ],
            [
                "John Wen",
                "Surgery"
            ],
            [
                "Todd Quinlan",
                "Surgery"
            ],
            [
                "Molly Clock",
                "Psychiatry"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Affiliated_With`]-(T3:`hospital_1.Department`)\nWHERE T2.PrimaryAffiliation = 1\nRETURN T1.Name,T3.Name",
        "question": "What are the name and primarily affiliated department name of each physician?",
        "answers": [
            [
                "Percival Cox",
                "General Medicine"
            ],
            [
                "Elliot Reid",
                "General Medicine"
            ],
            [
                "Bob Kelso",
                "General Medicine"
            ],
            [
                "John Dorian",
                "General Medicine"
            ],
            [
                "Keith Dudemeister",
                "General Medicine"
            ],
            [
                "Christopher Turk",
                "Surgery"
            ],
            [
                "John Wen",
                "Surgery"
            ],
            [
                "Todd Quinlan",
                "Surgery"
            ],
            [
                "Molly Clock",
                "Psychiatry"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Patient`)-[]-(T2:`hospital_1.Appointment`)\nRETURN T1.Name\nORDER BY T2.Start DESC\nLIMIT 1",
        "question": "What is the name of the patient who made the most recent appointment?",
        "answers": [
            [
                "Dennis Doe"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Patient`)-[]-(T2:`hospital_1.Appointment`)\nRETURN T1.Name\nORDER BY T2.Start DESC\nLIMIT 1",
        "question": "Find the name of the patient who made the appointment with the most recent start date.",
        "answers": [
            [
                "Dennis Doe"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (stay:`hospital_1.Stay`)\nWHERE stay.Room = 112\nRETURN count(stay.Patient)",
        "question": "How many patients stay in room 112?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (stay:`hospital_1.Stay`)\nWHERE stay.Room = 112\nRETURN count(stay.Patient)",
        "question": "Count the number of patients who stayed in room 112.",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Stay`)-[]-(T2:`hospital_1.Patient`)-[]-(T3:`hospital_1.Prescribes`)-[]-(T4:`hospital_1.Medication`)\nWHERE T1.Room = 111\nRETURN T4.Name",
        "question": "Find the name of medication used on the patient who stays in room 111?",
        "answers": [
            [
                "Procrastin-X"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Stay`)-[]-(T2:`hospital_1.Patient`)-[]-(T3:`hospital_1.Prescribes`)-[]-(T4:`hospital_1.Medication`)\nWHERE T1.Room = 111\nRETURN T4.Name",
        "question": "What is the name of the medication used for the patient staying in room 111?",
        "answers": [
            [
                "Procrastin-X"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (stay:`hospital_1.Stay`)\nWHERE stay.Room = 111\nRETURN stay.Patient\nORDER BY stay.StayStart DESC\nLIMIT 1",
        "question": "Find the patient who most recently stayed in room 111.",
        "answers": [
            [
                100000001
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (stay:`hospital_1.Stay`)\nWHERE stay.Room = 111\nRETURN stay.Patient\nORDER BY stay.StayStart DESC\nLIMIT 1",
        "question": "What is the id of the patient who stayed in room 111 most recently?",
        "answers": [
            [
                100000001
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Physician`)-[]-(T2:`hospital_1.Patient`)\nRETURN T1.Name,count(*)",
        "question": "How many patients do each physician take care of? List their names and number of patients they take care of.",
        "answers": [
            [
                "John Dorian",
                1
            ],
            [
                "Elliot Reid",
                2
            ],
            [
                "Christopher Turk",
                1
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Physician`)-[]-(T2:`hospital_1.Patient`)\nRETURN T1.Name,count(*)",
        "question": "Return the name of each physician and the number of patients he or she treats.",
        "answers": [
            [
                "John Dorian",
                1
            ],
            [
                "Elliot Reid",
                2
            ],
            [
                "Christopher Turk",
                1
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Physician`)-[]-(T2:`hospital_1.Patient`)\nWITH T1.Name AS Name, count(*) AS count\nWHERE count  > 1\nRETURN Name",
        "question": "Find the name of physicians who are in charge of more than one patient.",
        "answers": [
            [
                "Elliot Reid"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Physician`)-[]-(T2:`hospital_1.Patient`)\nWITH T1.Name AS Name, count(*) AS count\nWHERE count  > 1\nRETURN Name",
        "question": "Which physicians are in charge of more than one patient? Give me their names.",
        "answers": [
            [
                "Elliot Reid"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Block`)-[]-(T2:`hospital_1.Room`)\nRETURN count(*),T1.BlockFloor",
        "question": "Find the number of rooms located on each block floor.",
        "answers": [
            [
                9,
                1
            ],
            [
                9,
                2
            ],
            [
                9,
                3
            ],
            [
                9,
                4
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Block`)-[]-(T2:`hospital_1.Room`)\nRETURN count(*),T1.BlockFloor",
        "question": "How many rooms does each block floor have?",
        "answers": [
            [
                9,
                1
            ],
            [
                9,
                2
            ],
            [
                9,
                3
            ],
            [
                9,
                4
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Block`)-[]-(T2:`hospital_1.Room`)\nRETURN count(*),T1.BlockCode",
        "question": "Find the number of rooms for different block code?",
        "answers": [
            [
                12,
                1
            ],
            [
                12,
                2
            ],
            [
                12,
                3
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Block`)-[]-(T2:`hospital_1.Room`)\nRETURN count(*),T1.BlockCode",
        "question": "How many rooms are located for each block code?",
        "answers": [
            [
                12,
                1
            ],
            [
                12,
                2
            ],
            [
                12,
                3
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (room:`hospital_1.Room`)\nWHERE room.Unavailable = 0\nRETURN DISTINCT room.BlockCode",
        "question": "What are the unique block codes that have available rooms?",
        "answers": [
            [
                1
            ],
            [
                2
            ],
            [
                3
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (room:`hospital_1.Room`)\nWHERE room.Unavailable = 0\nRETURN DISTINCT room.BlockCode",
        "question": "Tell me the distinct block codes where some rooms are available.",
        "answers": [
            [
                1
            ],
            [
                2
            ],
            [
                3
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (room:`hospital_1.Room`)\nRETURN count(DISTINCT room.RoomType)",
        "question": "How many different types of rooms are there?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (room:`hospital_1.Room`)\nRETURN count(DISTINCT room.RoomType)",
        "question": "Find the number of distinct room types available.",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Medication`)-[]-(T2:`hospital_1.Prescribes`)\nRETURN count(*),T1.Name",
        "question": "Find the number of medications prescribed for each brand.",
        "answers": [
            [
                1,
                "Procrastin-X"
            ],
            [
                2,
                "Thesisin"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Medication`)-[]-(T2:`hospital_1.Prescribes`)\nRETURN count(*),T1.Name",
        "question": "How many medications are prescribed for each brand?",
        "answers": [
            [
                1,
                "Procrastin-X"
            ],
            [
                2,
                "Thesisin"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (physician:`hospital_1.Physician`)\nWHERE physician.Position =~'.*[S|s]enior.*'\nRETURN physician.Name",
        "question": "Find the name of physicians whose position title contains the word 'senior'.",
        "answers": [
            [
                "Percival Cox"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (physician:`hospital_1.Physician`)\nWHERE physician.Position =~'.*[S|s]enior.*'\nRETURN physician.Name",
        "question": "What are the names of the physicians who have 'senior' in their titles.",
        "answers": [
            [
                "Percival Cox"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (undergoes:`hospital_1.Undergoes`)\nRETURN undergoes.Patient\nORDER BY undergoes.DateUndergoes\nLIMIT 1",
        "question": "Find the patient who has the most recent undergoing treatment?",
        "answers": [
            [
                100000001
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (undergoes:`hospital_1.Undergoes`)\nRETURN undergoes.Patient\nORDER BY undergoes.DateUndergoes\nLIMIT 1",
        "question": "Which patient is undergoing the most recent treatment?",
        "answers": [
            [
                100000001
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Undergoes`)-[]-(T2:`hospital_1.Patient`)-[]-(T3:`hospital_1.Stay`)\nWHERE T3.Room = 111\nRETURN DISTINCT T2.Name",
        "question": "Find the names of all patients who have an undergoing treatment and are staying in room 111.",
        "answers": [
            [
                "John Smith"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Undergoes`)-[]-(T2:`hospital_1.Patient`)-[]-(T3:`hospital_1.Stay`)\nWHERE T3.Room = 111\nRETURN DISTINCT T2.Name",
        "question": "What are the names of patients who are staying in room 111 and have an undergoing treatment?",
        "answers": [
            [
                "John Smith"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (nurse:`hospital_1.Nurse`)\nRETURN DISTINCT nurse.Name\nORDER BY nurse.Name",
        "question": "List the names of all distinct nurses ordered by alphabetical order?",
        "answers": [
            [
                "Carla Espinosa"
            ],
            [
                "Laverne Roberts"
            ],
            [
                "Paul Flowers"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (nurse:`hospital_1.Nurse`)\nRETURN DISTINCT nurse.Name\nORDER BY nurse.Name",
        "question": "What is the alphabetically ordered list of all the distinct names of nurses?",
        "answers": [
            [
                "Carla Espinosa"
            ],
            [
                "Laverne Roberts"
            ],
            [
                "Paul Flowers"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Undergoes`)-[]-(T2:`hospital_1.Nurse`)\nRETURN DISTINCT T2.Name",
        "question": "Find the names of nurses who are nursing an undergoing treatment.",
        "answers": [
            [
                "Carla Espinosa"
            ],
            [
                "Laverne Roberts"
            ],
            [
                "Paul Flowers"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Undergoes`)-[]-(T2:`hospital_1.Nurse`)\nRETURN DISTINCT T2.Name",
        "question": "Which nurses are in charge of patients undergoing treatments?",
        "answers": [
            [
                "Carla Espinosa"
            ],
            [
                "Laverne Roberts"
            ],
            [
                "Paul Flowers"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (medication:`hospital_1.Medication`)\nRETURN DISTINCT medication.Name\nORDER BY medication.Name",
        "question": "List the names of all distinct medications, ordered in an alphabetical order.",
        "answers": [
            [
                "Awakin"
            ],
            [
                "Crescavitin"
            ],
            [
                "Melioraurin"
            ],
            [
                "Procrastin-X"
            ],
            [
                "Thesisin"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (medication:`hospital_1.Medication`)\nRETURN DISTINCT medication.Name\nORDER BY medication.Name",
        "question": "What is the alphabetically ordered list of all distinct medications?",
        "answers": [
            [
                "Awakin"
            ],
            [
                "Crescavitin"
            ],
            [
                "Melioraurin"
            ],
            [
                "Procrastin-X"
            ],
            [
                "Thesisin"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Physician`)-[]-(T2:`hospital_1.Prescribes`)\nRETURN T1.Name\nORDER BY T2.Dose DESC\nLIMIT 1",
        "question": "What are the names of the physician who prescribed the highest dose?",
        "answers": [
            [
                "John Dorian"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Physician`)-[]-(T2:`hospital_1.Prescribes`)\nRETURN T1.Name\nORDER BY T2.Dose DESC\nLIMIT 1",
        "question": "Find the physician who prescribed the highest dose. What is his or her name?",
        "answers": [
            [
                "John Dorian"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH ()-[affiliated_with:`hospital_1.Affiliated_With`]-()\nWHERE affiliated_with.PrimaryAffiliation = 1\nRETURN affiliated_with.Physician,affiliated_with.Department",
        "question": "List the physicians' employee ids together with their primary affiliation departments' ids.",
        "answers": [
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                3,
                2
            ],
            [
                3,
                2
            ],
            [
                4,
                1
            ],
            [
                4,
                1
            ],
            [
                5,
                1
            ],
            [
                5,
                1
            ],
            [
                6,
                2
            ],
            [
                6,
                2
            ],
            [
                7,
                2
            ],
            [
                7,
                2
            ],
            [
                8,
                1
            ],
            [
                8,
                1
            ],
            [
                9,
                3
            ],
            [
                9,
                3
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH ()-[affiliated_with:`hospital_1.Affiliated_With`]-()\nWHERE affiliated_with.PrimaryAffiliation = 1\nRETURN affiliated_with.Physician,affiliated_with.Department",
        "question": "What are each physician's employee id and department id primarily affiliated.",
        "answers": [
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                3,
                2
            ],
            [
                3,
                2
            ],
            [
                4,
                1
            ],
            [
                4,
                1
            ],
            [
                5,
                1
            ],
            [
                5,
                1
            ],
            [
                6,
                2
            ],
            [
                6,
                2
            ],
            [
                7,
                2
            ],
            [
                7,
                2
            ],
            [
                8,
                1
            ],
            [
                8,
                1
            ],
            [
                9,
                3
            ],
            [
                9,
                3
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T2:`hospital_1.Department`)-[T1:`hospital_1.Affiliated_With`]-()\nWHERE T1.PrimaryAffiliation = 1\nRETURN DISTINCT T2.Name",
        "question": "List the names of departments where some physicians are primarily affiliated with.",
        "answers": [
            [
                "General Medicine"
            ],
            [
                "Surgery"
            ],
            [
                "Psychiatry"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T2:`hospital_1.Department`)-[T1:`hospital_1.Affiliated_With`]-()\nWHERE T1.PrimaryAffiliation = 1\nRETURN DISTINCT T2.Name",
        "question": "What are the names of departments that have primarily affiliated physicians.",
        "answers": [
            [
                "General Medicine"
            ],
            [
                "Surgery"
            ],
            [
                "Psychiatry"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH ()-[on_call:`hospital_1.On_Call`]-()\nWHERE on_call.BlockFloor = 1 AND on_call.BlockCode = 1\nRETURN on_call.Nurse",
        "question": "What nurses are on call with block floor 1 and block code 1? Tell me their names.",
        "answers": [
            [
                101
            ],
            [
                101
            ],
            [
                103
            ],
            [
                103
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH ()-[on_call:`hospital_1.On_Call`]-()\nWHERE on_call.BlockFloor = 1 AND on_call.BlockCode = 1\nRETURN on_call.Nurse",
        "question": "Find the ids of the nurses who are on call in block floor 1 and block code 1.",
        "answers": [
            [
                101
            ],
            [
                101
            ],
            [
                103
            ],
            [
                103
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (procedures:`hospital_1.Procedures`)\nRETURN max(procedures.Cost),min(procedures.Cost),avg(procedures.Cost)",
        "question": "What are the highest cost, lowest cost and average cost of procedures?",
        "answers": [
            [
                10000.0,
                25.0,
                4324.857142857143
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (procedures:`hospital_1.Procedures`)\nRETURN max(procedures.Cost),min(procedures.Cost),avg(procedures.Cost)",
        "question": "Tell me the highest, lowest, and average cost of procedures.",
        "answers": [
            [
                10000.0,
                25.0,
                4324.857142857143
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (procedures:`hospital_1.Procedures`)\nRETURN procedures.Name,procedures.Cost\nORDER BY procedures.Cost DESC",
        "question": "List the name and cost of all procedures sorted by the cost from the highest to the lowest.",
        "answers": [
            [
                "Complete Walletectomy",
                10000.0
            ],
            [
                "Reversible Pancreomyoplasty",
                5600.0
            ],
            [
                "Obfuscated Dermogastrotomy",
                4899.0
            ],
            [
                "Folded Demiophtalmectomy",
                4500.0
            ],
            [
                "Obtuse Pyloric Recombobulation",
                3750.0
            ],
            [
                "Reverse Rhinopodoplasty",
                1500.0
            ],
            [
                "Follicular Demiectomy",
                25.0
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (procedures:`hospital_1.Procedures`)\nRETURN procedures.Name,procedures.Cost\nORDER BY procedures.Cost DESC",
        "question": "Sort the list of names and costs of all procedures in the descending order of cost.",
        "answers": [
            [
                "Complete Walletectomy",
                10000.0
            ],
            [
                "Reversible Pancreomyoplasty",
                5600.0
            ],
            [
                "Obfuscated Dermogastrotomy",
                4899.0
            ],
            [
                "Folded Demiophtalmectomy",
                4500.0
            ],
            [
                "Obtuse Pyloric Recombobulation",
                3750.0
            ],
            [
                "Reverse Rhinopodoplasty",
                1500.0
            ],
            [
                "Follicular Demiectomy",
                25.0
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (procedures:`hospital_1.Procedures`)\nRETURN procedures.Name\nORDER BY procedures.Cost\nLIMIT 3",
        "question": "Find the three most expensive procedures.",
        "answers": [
            [
                "Follicular Demiectomy"
            ],
            [
                "Reverse Rhinopodoplasty"
            ],
            [
                "Obtuse Pyloric Recombobulation"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (procedures:`hospital_1.Procedures`)\nRETURN procedures.Name\nORDER BY procedures.Cost\nLIMIT 3",
        "question": "What are the three most costly procedures?",
        "answers": [
            [
                "Follicular Demiectomy"
            ],
            [
                "Reverse Rhinopodoplasty"
            ],
            [
                "Obtuse Pyloric Recombobulation"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Trained_In`]-(T3:`hospital_1.Procedures`)\nWHERE T3.Cost > 5000\nRETURN T1.Name",
        "question": "Find the physicians who are trained in a procedure that costs more than 5000.",
        "answers": [
            [
                "John Wen"
            ],
            [
                "Todd Quinlan"
            ],
            [
                "John Wen"
            ],
            [
                "Christopher Turk"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Trained_In`]-(T3:`hospital_1.Procedures`)\nWHERE T3.Cost > 5000\nRETURN T1.Name",
        "question": "Which physicians are trained in procedures that are more expensive than 5000?",
        "answers": [
            [
                "John Wen"
            ],
            [
                "Todd Quinlan"
            ],
            [
                "John Wen"
            ],
            [
                "Christopher Turk"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Trained_In`]-(T3:`hospital_1.Procedures`)\nRETURN T1.Name\nORDER BY T3.Cost DESC\nLIMIT 1",
        "question": "Find the physician who was trained in the most expensive procedure?",
        "answers": [
            [
                "John Wen"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Trained_In`]-(T3:`hospital_1.Procedures`)\nRETURN T1.Name\nORDER BY T3.Cost DESC\nLIMIT 1",
        "question": "Which physician was trained in the procedure that costs the most.",
        "answers": [
            [
                "John Wen"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Trained_In`]-(T3:`hospital_1.Procedures`)\nWHERE T1.Name = \"John Wen\"\nRETURN T3.Name",
        "question": "Find the names of procedures which physician John Wen was trained in.",
        "answers": [
            [
                "Obfuscated Dermogastrotomy"
            ],
            [
                "Complete Walletectomy"
            ],
            [
                "Reversible Pancreomyoplasty"
            ],
            [
                "Follicular Demiectomy"
            ],
            [
                "Obtuse Pyloric Recombobulation"
            ],
            [
                "Reverse Rhinopodoplasty"
            ],
            [
                "Folded Demiophtalmectomy"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Trained_In`]-(T3:`hospital_1.Procedures`)\nWHERE T1.Name = \"John Wen\"\nRETURN T3.Name",
        "question": "What are the names of procedures physician John Wen was trained in?",
        "answers": [
            [
                "Obfuscated Dermogastrotomy"
            ],
            [
                "Complete Walletectomy"
            ],
            [
                "Reversible Pancreomyoplasty"
            ],
            [
                "Follicular Demiectomy"
            ],
            [
                "Obtuse Pyloric Recombobulation"
            ],
            [
                "Reverse Rhinopodoplasty"
            ],
            [
                "Folded Demiophtalmectomy"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (procedures:`hospital_1.Procedures`)\nWHERE procedures.Cost > 1000\nRETURN procedures.Name  AS name \nUNION\nMATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Trained_In`]-(T3:`hospital_1.Procedures`)\nWHERE T1.Name = \"John Wen\"\nRETURN T3.Name  AS name",
        "question": "Find all procedures which cost more than 1000 or which physician John Wen was trained in.",
        "answers": [
            [
                "Reverse Rhinopodoplasty"
            ],
            [
                "Obtuse Pyloric Recombobulation"
            ],
            [
                "Folded Demiophtalmectomy"
            ],
            [
                "Complete Walletectomy"
            ],
            [
                "Obfuscated Dermogastrotomy"
            ],
            [
                "Reversible Pancreomyoplasty"
            ],
            [
                "Follicular Demiectomy"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (procedures:`hospital_1.Procedures`)\nWHERE procedures.Cost > 1000\nRETURN procedures.Name  AS name \nUNION\nMATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Trained_In`]-(T3:`hospital_1.Procedures`)\nWHERE T1.Name = \"John Wen\"\nRETURN T3.Name  AS name",
        "question": "What are the procedures that cost more than 1000 or are specialized in by physician John Wen?",
        "answers": [
            [
                "Reverse Rhinopodoplasty"
            ],
            [
                "Obtuse Pyloric Recombobulation"
            ],
            [
                "Folded Demiophtalmectomy"
            ],
            [
                "Complete Walletectomy"
            ],
            [
                "Obfuscated Dermogastrotomy"
            ],
            [
                "Reversible Pancreomyoplasty"
            ],
            [
                "Follicular Demiectomy"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Affiliated_With`]-(T3:`hospital_1.Department`)\nWHERE T3.Name = 'Surgery' OR T3.Name = 'Psychiatry'\nRETURN T1.Name",
        "question": "Find the name of physicians who are affiliated with Surgery or Psychiatry department.",
        "answers": [
            [
                "Christopher Turk"
            ],
            [
                "John Wen"
            ],
            [
                "Todd Quinlan"
            ],
            [
                "Molly Clock"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Affiliated_With`]-(T3:`hospital_1.Department`)\nWHERE T3.Name = 'Surgery' OR T3.Name = 'Psychiatry'\nRETURN T1.Name",
        "question": "Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names.",
        "answers": [
            [
                "Christopher Turk"
            ],
            [
                "John Wen"
            ],
            [
                "Todd Quinlan"
            ],
            [
                "Molly Clock"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (appointment:`hospital_1.Appointment`)\nRETURN count(*)",
        "question": "How many appointments are there?",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (appointment:`hospital_1.Appointment`)\nRETURN count(*)",
        "question": "Count how many appointments have been made in total.",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Nurse`)-[T2:`hospital_1.On_Call`]-()\nRETURN DISTINCT T1.Name",
        "question": "Find the names of nurses who are on call.",
        "answers": [
            [
                "Carla Espinosa"
            ],
            [
                "Laverne Roberts"
            ],
            [
                "Paul Flowers"
            ]
        ]
    },
    {
        "db_id": "hospital_1",
        "query": "MATCH (T1:`hospital_1.Nurse`)-[T2:`hospital_1.On_Call`]-()\nRETURN DISTINCT T1.Name",
        "question": "What are the distinct names of nurses on call?",
        "answers": [
            [
                "Carla Espinosa"
            ],
            [
                "Laverne Roberts"
            ],
            [
                "Paul Flowers"
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (ship:`ship_mission.ship`)\nRETURN count(*)",
        "question": "How many ships are there?",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (ship:`ship_mission.ship`)\nRETURN count(*)",
        "question": "What is the number of ships?",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (ship:`ship_mission.ship`)\nRETURN ship.Name\nORDER BY ship.Tonnage ASC",
        "question": "List the name of ships in ascending order of tonnage.",
        "answers": [
            [
                "Ariadne"
            ],
            [
                "Farringford"
            ],
            [
                "Author"
            ],
            [
                "Trader"
            ],
            [
                "Dromonby"
            ],
            [
                "Corbridge"
            ],
            [
                "Clan McTavish"
            ],
            [
                "Appam"
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (ship:`ship_mission.ship`)\nRETURN ship.Name\nORDER BY ship.Tonnage ASC",
        "question": "what are the names of the ships ordered by ascending tonnage?",
        "answers": [
            [
                "Ariadne"
            ],
            [
                "Farringford"
            ],
            [
                "Author"
            ],
            [
                "Trader"
            ],
            [
                "Dromonby"
            ],
            [
                "Corbridge"
            ],
            [
                "Clan McTavish"
            ],
            [
                "Appam"
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (ship:`ship_mission.ship`)\nRETURN ship.Type,ship.Nationality",
        "question": "What are the type and nationality of ships?",
        "answers": [
            [
                "Cargo ship",
                "United Kingdom"
            ],
            [
                "Battle ship",
                "United States"
            ],
            [
                "Cargo ship",
                "United Kingdom"
            ],
            [
                "Cargo ship",
                "United Kingdom"
            ],
            [
                "Battle ship",
                "United Kingdom"
            ],
            [
                "Cargo ship",
                "United States"
            ],
            [
                "Battle ship",
                "United Kingdom"
            ],
            [
                "Cargo ship",
                "United States"
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (ship:`ship_mission.ship`)\nRETURN ship.Type,ship.Nationality",
        "question": "What are the types and nationalities of every ship?",
        "answers": [
            [
                "Cargo ship",
                "United Kingdom"
            ],
            [
                "Battle ship",
                "United States"
            ],
            [
                "Cargo ship",
                "United Kingdom"
            ],
            [
                "Cargo ship",
                "United Kingdom"
            ],
            [
                "Battle ship",
                "United Kingdom"
            ],
            [
                "Cargo ship",
                "United States"
            ],
            [
                "Battle ship",
                "United Kingdom"
            ],
            [
                "Cargo ship",
                "United States"
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (ship:`ship_mission.ship`)\nWHERE ship.Nationality <> 'United States'\nRETURN ship.Name",
        "question": "List the name of ships whose nationality is not \"United States\".",
        "answers": [
            [
                "Corbridge"
            ],
            [
                "Dromonby"
            ],
            [
                "Author"
            ],
            [
                "Trader"
            ],
            [
                "Appam"
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (ship:`ship_mission.ship`)\nWHERE ship.Nationality <> 'United States'\nRETURN ship.Name",
        "question": "What are the names of the ships that are not from the United States?",
        "answers": [
            [
                "Corbridge"
            ],
            [
                "Dromonby"
            ],
            [
                "Author"
            ],
            [
                "Trader"
            ],
            [
                "Appam"
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (ship:`ship_mission.ship`)\nWHERE ship.Nationality = 'United States' OR ship.Nationality = 'United Kingdom'\nRETURN ship.Name",
        "question": "Show the name of ships whose nationality is either United States or United Kingdom.",
        "answers": [
            [
                "Corbridge"
            ],
            [
                "Farringford"
            ],
            [
                "Dromonby"
            ],
            [
                "Author"
            ],
            [
                "Trader"
            ],
            [
                "Ariadne"
            ],
            [
                "Appam"
            ],
            [
                "Clan McTavish"
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (ship:`ship_mission.ship`)\nWHERE ship.Nationality = 'United States' OR ship.Nationality = 'United Kingdom'\nRETURN ship.Name",
        "question": "What are the names of the ships  that are from either the US or the UK?",
        "answers": [
            [
                "Corbridge"
            ],
            [
                "Farringford"
            ],
            [
                "Dromonby"
            ],
            [
                "Author"
            ],
            [
                "Trader"
            ],
            [
                "Ariadne"
            ],
            [
                "Appam"
            ],
            [
                "Clan McTavish"
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (ship:`ship_mission.ship`)\nRETURN ship.Name\nORDER BY ship.Tonnage DESC\nLIMIT 1",
        "question": "What is the name of the ship with the largest tonnage?",
        "answers": [
            [
                "Appam"
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (ship:`ship_mission.ship`)\nRETURN ship.Name\nORDER BY ship.Tonnage DESC\nLIMIT 1",
        "question": "What is the ship with the largest amount of tonnage called?",
        "answers": [
            [
                "Appam"
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (ship:`ship_mission.ship`)\nRETURN ship.Type,count(*)",
        "question": "Show different types of ships and the number of ships of each type.",
        "answers": [
            [
                "Cargo ship",
                5
            ],
            [
                "Battle ship",
                3
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (ship:`ship_mission.ship`)\nRETURN ship.Type,count(*)",
        "question": "For each type, how many ships are there?",
        "answers": [
            [
                "Cargo ship",
                5
            ],
            [
                "Battle ship",
                3
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (ship:`ship_mission.ship`)\nRETURN ship.Type\nORDER BY ship.Type DESC\nLIMIT 1",
        "question": "Please show the most common type of ships.",
        "answers": [
            [
                "Cargo ship"
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (ship:`ship_mission.ship`)\nRETURN ship.Type\nORDER BY ship.Type DESC\nLIMIT 1",
        "question": "What is the most common type of ships?",
        "answers": [
            [
                "Cargo ship"
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (ship:`ship_mission.ship`)\nWITH ship.Nationality AS Nationality, count(*) AS count\nWHERE count  > 2\nRETURN Nationality",
        "question": "List the nations that have more than two ships.",
        "answers": [
            [
                "United Kingdom"
            ],
            [
                "United States"
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (ship:`ship_mission.ship`)\nWITH ship.Nationality AS Nationality, count(*) AS count\nWHERE count  > 2\nRETURN Nationality",
        "question": "What are the nations that have more than two ships?",
        "answers": [
            [
                "United Kingdom"
            ],
            [
                "United States"
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (ship:`ship_mission.ship`)\nRETURN ship.Type,avg(ship.Tonnage)",
        "question": "Show different types of ships and the average tonnage of ships of each type.",
        "answers": [
            [
                "Cargo ship",
                3932.2
            ],
            [
                "Battle ship",
                4845.0
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (ship:`ship_mission.ship`)\nRETURN ship.Type,avg(ship.Tonnage)",
        "question": "For each type, what is the average tonnage?",
        "answers": [
            [
                "Cargo ship",
                3932.2
            ],
            [
                "Battle ship",
                4845.0
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (T1:`ship_mission.mission`)-[]-(T2:`ship_mission.ship`)\nRETURN T1.Code,T1.Fate,T2.Name",
        "question": "Show codes and fates of missions, and names of ships involved.",
        "answers": [
            [
                "VMV-1",
                "Decommissioned 1950",
                "Corbridge"
            ],
            [
                "VMV-2",
                "Decommissioned 1950",
                "Farringford"
            ],
            [
                "VMV-3",
                "Lost (burned) 1931",
                "Dromonby"
            ],
            [
                "VMV-4 Former: Sterling",
                "Retired 1939",
                "Trader"
            ],
            [
                "VMV-5",
                "Decommissioned 1959",
                "Ariadne"
            ],
            [
                "VMV-6",
                "Decommissioned 1960",
                "Appam"
            ],
            [
                "VMV-7",
                "Lost (burned and sunk) 1933",
                "Clan McTavish"
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (T1:`ship_mission.mission`)-[]-(T2:`ship_mission.ship`)\nRETURN T1.Code,T1.Fate,T2.Name",
        "question": "What are the mission codes, fates, and names of the ships involved?",
        "answers": [
            [
                "VMV-1",
                "Decommissioned 1950",
                "Corbridge"
            ],
            [
                "VMV-2",
                "Decommissioned 1950",
                "Farringford"
            ],
            [
                "VMV-3",
                "Lost (burned) 1931",
                "Dromonby"
            ],
            [
                "VMV-4 Former: Sterling",
                "Retired 1939",
                "Trader"
            ],
            [
                "VMV-5",
                "Decommissioned 1959",
                "Ariadne"
            ],
            [
                "VMV-6",
                "Decommissioned 1960",
                "Appam"
            ],
            [
                "VMV-7",
                "Lost (burned and sunk) 1933",
                "Clan McTavish"
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (T1:`ship_mission.mission`)-[]-(T2:`ship_mission.ship`)\nWHERE T1.Launched_Year > 1928\nRETURN T2.Name",
        "question": "Show names of ships involved in a mission launched after 1928.",
        "answers": [
            [
                "Corbridge"
            ],
            [
                "Farringford"
            ],
            [
                "Dromonby"
            ],
            [
                "Ariadne"
            ],
            [
                "Appam"
            ],
            [
                "Clan McTavish"
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (T1:`ship_mission.mission`)-[]-(T2:`ship_mission.ship`)\nWHERE T1.Launched_Year > 1928\nRETURN T2.Name",
        "question": "What are the names of ships that were involved in a mission launched after 1928?",
        "answers": [
            [
                "Corbridge"
            ],
            [
                "Farringford"
            ],
            [
                "Dromonby"
            ],
            [
                "Ariadne"
            ],
            [
                "Appam"
            ],
            [
                "Clan McTavish"
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (T1:`ship_mission.mission`)-[]-(T2:`ship_mission.ship`)\nWHERE T2.Nationality = 'United States'\nRETURN DISTINCT T1.Fate",
        "question": "Show the distinct fate of missions that involve ships with nationality \"United States\"",
        "answers": [
            [
                "Decommissioned 1950"
            ],
            [
                "Decommissioned 1959"
            ],
            [
                "Lost (burned and sunk) 1933"
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (T1:`ship_mission.mission`)-[]-(T2:`ship_mission.ship`)\nWHERE T2.Nationality = 'United States'\nRETURN DISTINCT T1.Fate",
        "question": "What are the different fates of the mission that involved ships from the United States?",
        "answers": [
            [
                "Decommissioned 1950"
            ],
            [
                "Decommissioned 1959"
            ],
            [
                "Lost (burned and sunk) 1933"
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (ship:`ship_mission.ship`)\nWHERE NOT (ship)-[]-(:`ship_mission.mission`)    \nRETURN ship.Name",
        "question": "List the name of ships that are not involved in any mission",
        "answers": [
            [
                "Author"
            ]
        ]
    },
    {
        "db_id": "ship_mission",
        "query": "MATCH (ship:`ship_mission.ship`)\nWHERE NOT (ship)-[]-(:`ship_mission.mission`)    \nRETURN ship.Name",
        "question": "What are the names of the ships that are not involved in any missions?",
        "answers": [
            [
                "Author"
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nRETURN count(*)",
        "question": "Find the number of students in total.",
        "answers": [
            [
                60
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nRETURN count(*)",
        "question": "How many students are there?",
        "answers": [
            [
                60
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Classroom = 111\nRETURN list.LastName",
        "question": "Find the last names of students studying in room 111.",
        "answers": [
            [
                "DANESE"
            ],
            [
                "GOODNOE"
            ],
            [
                "LEAPER"
            ],
            [
                "FULVIO"
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Classroom = 111\nRETURN list.LastName",
        "question": "What are the last names of students in room 111?",
        "answers": [
            [
                "DANESE"
            ],
            [
                "GOODNOE"
            ],
            [
                "LEAPER"
            ],
            [
                "FULVIO"
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Classroom = 108\nRETURN list.FirstName",
        "question": "Find the first names of students studying in room 108.",
        "answers": [
            [
                " LYNNETTE"
            ],
            [
                " BRITT"
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Classroom = 108\nRETURN list.FirstName",
        "question": "What are the first names of students in room 108?",
        "answers": [
            [
                " LYNNETTE"
            ],
            [
                " BRITT"
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Classroom = 107\nRETURN DISTINCT list.FirstName",
        "question": "What are the first names of students studying in room 107?",
        "answers": [
            [
                " SHERWOOD"
            ],
            [
                " ROBBY"
            ],
            [
                " CRYSTA"
            ],
            [
                " VERTIE"
            ],
            [
                " CHRISSY"
            ],
            [
                " JORDON"
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Classroom = 107\nRETURN DISTINCT list.FirstName",
        "question": "List the first names of all the students in room 107.",
        "answers": [
            [
                " SHERWOOD"
            ],
            [
                " ROBBY"
            ],
            [
                " CRYSTA"
            ],
            [
                " VERTIE"
            ],
            [
                " CHRISSY"
            ],
            [
                " JORDON"
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nRETURN DISTINCT list.Classroom,list.Grade",
        "question": "For each classroom report the grade that is taught in it. Report just the classroom number and the grade number.",
        "answers": [
            [
                101,
                2
            ],
            [
                112,
                6
            ],
            [
                107,
                3
            ],
            [
                105,
                0
            ],
            [
                111,
                4
            ],
            [
                102,
                1
            ],
            [
                104,
                0
            ],
            [
                109,
                5
            ],
            [
                110,
                4
            ],
            [
                103,
                1
            ],
            [
                106,
                0
            ],
            [
                108,
                4
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nRETURN DISTINCT list.Classroom,list.Grade",
        "question": "What are the grade number and classroom number of each class in the list?",
        "answers": [
            [
                101,
                2
            ],
            [
                112,
                6
            ],
            [
                107,
                3
            ],
            [
                105,
                0
            ],
            [
                111,
                4
            ],
            [
                102,
                1
            ],
            [
                104,
                0
            ],
            [
                109,
                5
            ],
            [
                110,
                4
            ],
            [
                103,
                1
            ],
            [
                106,
                0
            ],
            [
                108,
                4
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Classroom = 103\nRETURN DISTINCT list.Grade",
        "question": "Which grade is studying in classroom 103?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Classroom = 103\nRETURN DISTINCT list.Grade",
        "question": "Find the grade taught in classroom 103.",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Classroom = 105\nRETURN DISTINCT list.Grade",
        "question": "Find the grade studying in room 105.",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Classroom = 105\nRETURN DISTINCT list.Grade",
        "question": "Which grade is studying in room 105?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Grade = 4\nRETURN DISTINCT list.Classroom",
        "question": "Which classrooms are used by grade 4?",
        "answers": [
            [
                111
            ],
            [
                110
            ],
            [
                108
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Grade = 4\nRETURN DISTINCT list.Classroom",
        "question": "Find the classrooms in which grade 4 is studying.",
        "answers": [
            [
                111
            ],
            [
                110
            ],
            [
                108
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Grade = 5\nRETURN DISTINCT list.Classroom",
        "question": "Which classrooms are used by grade 5?",
        "answers": [
            [
                109
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Grade = 5\nRETURN DISTINCT list.Classroom",
        "question": "Show me the classrooms grade 5 is using.",
        "answers": [
            [
                109
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (teachers:`student_1.teachers`)\nWHERE teachers.Classroom = 110\nRETURN teachers.FirstName",
        "question": "Find the first names of all the teachers that teach in classroom 110.",
        "answers": [
            [
                " GEORGETTA"
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (teachers:`student_1.teachers`)\nWHERE teachers.Classroom = 110\nRETURN teachers.FirstName",
        "question": "Which teachers teach in classroom 110? Give me their first names.",
        "answers": [
            [
                " GEORGETTA"
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (teachers:`student_1.teachers`)\nWHERE teachers.Classroom = 109\nRETURN teachers.LastName",
        "question": "Find the last names of teachers teaching in classroom 109.",
        "answers": [
            [
                "KAWA"
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (teachers:`student_1.teachers`)\nWHERE teachers.Classroom = 109\nRETURN teachers.LastName",
        "question": "Which teachers teach in classroom 109? Give me their last names.",
        "answers": [
            [
                "KAWA"
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (teachers:`student_1.teachers`)\nRETURN DISTINCT teachers.FirstName,teachers.LastName",
        "question": "Report the first name and last name of all the teachers.",
        "answers": [
            [
                " MIN",
                "MACROSTIE"
            ],
            [
                " JEROME",
                "COVIN"
            ],
            [
                " OTHA",
                "MOYER"
            ],
            [
                " JERLENE",
                "NIBLER"
            ],
            [
                " KIRK",
                "MARROTTE"
            ],
            [
                " LEIA",
                "TARRING"
            ],
            [
                " CHARMAINE",
                "URSERY"
            ],
            [
                " LORIA",
                "ONDERSMA"
            ],
            [
                " GORDON",
                "KAWA"
            ],
            [
                " GEORGETTA",
                "SUMPTION"
            ],
            [
                " BILLIE",
                "KRIENER"
            ],
            [
                " ALFREDA",
                "SUGAI"
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (teachers:`student_1.teachers`)\nRETURN DISTINCT teachers.FirstName,teachers.LastName",
        "question": "What are the first name and last name of all the teachers?",
        "answers": [
            [
                " MIN",
                "MACROSTIE"
            ],
            [
                " JEROME",
                "COVIN"
            ],
            [
                " OTHA",
                "MOYER"
            ],
            [
                " JERLENE",
                "NIBLER"
            ],
            [
                " KIRK",
                "MARROTTE"
            ],
            [
                " LEIA",
                "TARRING"
            ],
            [
                " CHARMAINE",
                "URSERY"
            ],
            [
                " LORIA",
                "ONDERSMA"
            ],
            [
                " GORDON",
                "KAWA"
            ],
            [
                " GEORGETTA",
                "SUMPTION"
            ],
            [
                " BILLIE",
                "KRIENER"
            ],
            [
                " ALFREDA",
                "SUGAI"
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nRETURN DISTINCT list.FirstName,list.LastName",
        "question": "Report the first name and last name of all the students.",
        "answers": [
            [
                " MAUDE",
                "CAR"
            ],
            [
                " STORMY",
                "KRISTENSEN"
            ],
            [
                " SHERWOOD",
                "VANDERWOUDE"
            ],
            [
                " ISMAEL",
                "NOGODA"
            ],
            [
                " JANEE",
                "DANESE"
            ],
            [
                " PATRINA",
                "AMY"
            ],
            [
                " SHANEL",
                "PREHM"
            ],
            [
                " EMILE",
                "GRUNIN"
            ],
            [
                " TAMI",
                "GELL"
            ],
            [
                " RAY",
                "MADLOCK"
            ],
            [
                " DARLEEN",
                "SUDA"
            ],
            [
                " SHERMAN",
                "DROP"
            ],
            [
                " ROBBY",
                "PINNELL"
            ],
            [
                " EVELINA",
                "BROMLEY"
            ],
            [
                " ANIKA",
                "YUEN"
            ],
            [
                " HILMA",
                "BUSTILLOS"
            ],
            [
                " GAYLE",
                "GOODNOE"
            ],
            [
                " MEL",
                "BALBOA"
            ],
            [
                " REYNALDO",
                "BARTKUS"
            ],
            [
                " CRYSTA",
                "GROENEWEG"
            ],
            [
                " THEO",
                "HOUTCHENS"
            ],
            [
                " AL",
                "GERSTEIN"
            ],
            [
                " CHET",
                "MACIAG"
            ],
            [
                " TOBIE",
                "SAADE"
            ],
            [
                " FRANKLYN",
                "BRINE"
            ],
            [
                " CHANTAL",
                "HANNEMANN"
            ],
            [
                " BENNIE",
                "BYRUM"
            ],
            [
                " JODY",
                "NETZEL"
            ],
            [
                " COLLIN",
                "VANVLIET"
            ],
            [
                " GUILLERMINA",
                "HONES"
            ],
            [
                " JEFFRY",
                "FLACHS"
            ],
            [
                " JULIENNE",
                "GRABILL"
            ],
            [
                " VERTIE",
                "AREHART"
            ],
            [
                " MARCUS",
                "RUNKLE"
            ],
            [
                " KITTIE",
                "MOWATT"
            ],
            [
                " LANCE",
                "HOOSOCK"
            ],
            [
                " ADRIAN",
                "LEAPER"
            ],
            [
                " RAYLENE",
                "PASSEY"
            ],
            [
                " SHERON",
                "NAKAHARA"
            ],
            [
                " SHIRLEY",
                "STIRE"
            ],
            [
                " CYRUS",
                "RODDEY"
            ],
            [
                " CAREY",
                "CRANMER"
            ],
            [
                " LANELLE",
                "SCHUTZE"
            ],
            [
                " ELTON",
                "FULVIO"
            ],
            [
                " LYNNETTE",
                "HOESCHEN"
            ],
            [
                " BRODERICK",
                "SOLOMAN"
            ],
            [
                " SUMMER",
                "LAPLANT"
            ],
            [
                " BRITT",
                "LUSKEY"
            ],
            [
                " ELVIRA",
                "JAGNEAUX"
            ],
            [
                " SHANAE",
                "BIBB"
            ],
            [
                " DELORAS",
                "WIRTZFELD"
            ],
            [
                " RODGER",
                "RANSLER"
            ],
            [
                " CHRISSY",
                "NABOZNY"
            ],
            [
                " BETHEL",
                "ATWOOD"
            ],
            [
                " NOVELLA",
                "CHIARAMONTE"
            ],
            [
                " KERI",
                "TRAYWICK"
            ],
            [
                " ANTONY",
                "BRIGHTBILL"
            ],
            [
                " TAWANNA",
                "HUANG"
            ],
            [
                " JORDON",
                "SANTORY"
            ],
            [
                " GAYLE",
                "LARKINS"
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nRETURN DISTINCT list.FirstName,list.LastName",
        "question": "Show each student's first name and last name.",
        "answers": [
            [
                " MAUDE",
                "CAR"
            ],
            [
                " STORMY",
                "KRISTENSEN"
            ],
            [
                " SHERWOOD",
                "VANDERWOUDE"
            ],
            [
                " ISMAEL",
                "NOGODA"
            ],
            [
                " JANEE",
                "DANESE"
            ],
            [
                " PATRINA",
                "AMY"
            ],
            [
                " SHANEL",
                "PREHM"
            ],
            [
                " EMILE",
                "GRUNIN"
            ],
            [
                " TAMI",
                "GELL"
            ],
            [
                " RAY",
                "MADLOCK"
            ],
            [
                " DARLEEN",
                "SUDA"
            ],
            [
                " SHERMAN",
                "DROP"
            ],
            [
                " ROBBY",
                "PINNELL"
            ],
            [
                " EVELINA",
                "BROMLEY"
            ],
            [
                " ANIKA",
                "YUEN"
            ],
            [
                " HILMA",
                "BUSTILLOS"
            ],
            [
                " GAYLE",
                "GOODNOE"
            ],
            [
                " MEL",
                "BALBOA"
            ],
            [
                " REYNALDO",
                "BARTKUS"
            ],
            [
                " CRYSTA",
                "GROENEWEG"
            ],
            [
                " THEO",
                "HOUTCHENS"
            ],
            [
                " AL",
                "GERSTEIN"
            ],
            [
                " CHET",
                "MACIAG"
            ],
            [
                " TOBIE",
                "SAADE"
            ],
            [
                " FRANKLYN",
                "BRINE"
            ],
            [
                " CHANTAL",
                "HANNEMANN"
            ],
            [
                " BENNIE",
                "BYRUM"
            ],
            [
                " JODY",
                "NETZEL"
            ],
            [
                " COLLIN",
                "VANVLIET"
            ],
            [
                " GUILLERMINA",
                "HONES"
            ],
            [
                " JEFFRY",
                "FLACHS"
            ],
            [
                " JULIENNE",
                "GRABILL"
            ],
            [
                " VERTIE",
                "AREHART"
            ],
            [
                " MARCUS",
                "RUNKLE"
            ],
            [
                " KITTIE",
                "MOWATT"
            ],
            [
                " LANCE",
                "HOOSOCK"
            ],
            [
                " ADRIAN",
                "LEAPER"
            ],
            [
                " RAYLENE",
                "PASSEY"
            ],
            [
                " SHERON",
                "NAKAHARA"
            ],
            [
                " SHIRLEY",
                "STIRE"
            ],
            [
                " CYRUS",
                "RODDEY"
            ],
            [
                " CAREY",
                "CRANMER"
            ],
            [
                " LANELLE",
                "SCHUTZE"
            ],
            [
                " ELTON",
                "FULVIO"
            ],
            [
                " LYNNETTE",
                "HOESCHEN"
            ],
            [
                " BRODERICK",
                "SOLOMAN"
            ],
            [
                " SUMMER",
                "LAPLANT"
            ],
            [
                " BRITT",
                "LUSKEY"
            ],
            [
                " ELVIRA",
                "JAGNEAUX"
            ],
            [
                " SHANAE",
                "BIBB"
            ],
            [
                " DELORAS",
                "WIRTZFELD"
            ],
            [
                " RODGER",
                "RANSLER"
            ],
            [
                " CHRISSY",
                "NABOZNY"
            ],
            [
                " BETHEL",
                "ATWOOD"
            ],
            [
                " NOVELLA",
                "CHIARAMONTE"
            ],
            [
                " KERI",
                "TRAYWICK"
            ],
            [
                " ANTONY",
                "BRIGHTBILL"
            ],
            [
                " TAWANNA",
                "HUANG"
            ],
            [
                " JORDON",
                "SANTORY"
            ],
            [
                " GAYLE",
                "LARKINS"
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T2.FirstName = 'OTHA' AND T2.LastName = 'MOYER'\nRETURN T1.FirstName,T1.LastName",
        "question": "Find all students taught by OTHA MOYER. Output the first and last names of the students.",
        "answers": []
    },
    {
        "db_id": "student_1",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T2.FirstName = 'OTHA' AND T2.LastName = 'MOYER'\nRETURN T1.FirstName,T1.LastName",
        "question": "Which students study under the teacher named OTHA MOYER? Give me the first and last names of the students.",
        "answers": []
    },
    {
        "db_id": "student_1",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T2.FirstName = 'MARROTTE' AND T2.LastName = 'KIRK'\nRETURN T1.FirstName,T1.LastName",
        "question": "Find all students taught by MARROTTE KIRK. Output first and last names of students.",
        "answers": []
    },
    {
        "db_id": "student_1",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T2.FirstName = 'MARROTTE' AND T2.LastName = 'KIRK'\nRETURN T1.FirstName,T1.LastName",
        "question": "Which are the first and last names of the students taught by MARROTTE KIRK?",
        "answers": []
    },
    {
        "db_id": "student_1",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T1.FirstName = 'EVELINA' AND T1.LastName = 'BROMLEY'\nRETURN T2.FirstName,T2.LastName",
        "question": "Find the first and last name of all the teachers that teach EVELINA BROMLEY.",
        "answers": []
    },
    {
        "db_id": "student_1",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T1.FirstName = 'EVELINA' AND T1.LastName = 'BROMLEY'\nRETURN T2.FirstName,T2.LastName",
        "question": "Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers.",
        "answers": []
    },
    {
        "db_id": "student_1",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T1.FirstName = 'GELL' AND T1.LastName = 'TAMI'\nRETURN T2.LastName",
        "question": "Find the last names of all the teachers that teach GELL TAMI.",
        "answers": []
    },
    {
        "db_id": "student_1",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T1.FirstName = 'GELL' AND T1.LastName = 'TAMI'\nRETURN T2.LastName",
        "question": "What are the last names of the teachers who teach the student called GELL TAMI?",
        "answers": []
    },
    {
        "db_id": "student_1",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T2.FirstName = 'LORIA' AND T2.LastName = 'ONDERSMA'\nRETURN count(*)",
        "question": "How many students does LORIA ONDERSMA teaches?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T2.FirstName = 'LORIA' AND T2.LastName = 'ONDERSMA'\nRETURN count(*)",
        "question": "Count the number of students the teacher LORIA ONDERSMA teaches.",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T2.FirstName = 'KAWA' AND T2.LastName = 'GORDON'\nRETURN count(*)",
        "question": "How many students does KAWA GORDON teaches?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T2.FirstName = 'KAWA' AND T2.LastName = 'GORDON'\nRETURN count(*)",
        "question": "Find the number of students taught by the teacher KAWA GORDON.",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T2.FirstName = 'TARRING' AND T2.LastName = 'LEIA'\nRETURN count(*)",
        "question": "Find the number of students taught by TARRING LEIA.",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T2.FirstName = 'TARRING' AND T2.LastName = 'LEIA'\nRETURN count(*)",
        "question": "How many students are taught by teacher TARRING LEIA?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T1.FirstName = 'CHRISSY' AND T1.LastName = 'NABOZNY'\nRETURN count(*)",
        "question": "How many teachers does the student named CHRISSY NABOZNY have?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T1.FirstName = 'CHRISSY' AND T1.LastName = 'NABOZNY'\nRETURN count(*)",
        "question": "Find the number of teachers who teach the student called CHRISSY NABOZNY.",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T1.FirstName = 'MADLOCK' AND T1.LastName = 'RAY'\nRETURN count(*)",
        "question": "How many teachers does the student named MADLOCK RAY have?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T1.FirstName = 'MADLOCK' AND T1.LastName = 'RAY'\nRETURN count(*)",
        "question": "Find the number of teachers who teach the student called MADLOCK RAY.",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nRETURN list.Grade,count(DISTINCT list.Classroom),count(*)",
        "question": "For each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade.",
        "answers": [
            [
                2,
                1,
                3
            ],
            [
                6,
                1,
                3
            ],
            [
                3,
                1,
                6
            ],
            [
                0,
                3,
                16
            ],
            [
                4,
                3,
                12
            ],
            [
                1,
                2,
                12
            ],
            [
                5,
                1,
                8
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nRETURN list.Grade,count(DISTINCT list.Classroom),count(*)",
        "question": "For each grade, return the grade number, the number of classrooms used for the grade, and the total number of students enrolled in the grade.",
        "answers": [
            [
                2,
                1,
                3
            ],
            [
                6,
                1,
                3
            ],
            [
                3,
                1,
                6
            ],
            [
                0,
                3,
                16
            ],
            [
                4,
                3,
                12
            ],
            [
                1,
                2,
                12
            ],
            [
                5,
                1,
                8
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nRETURN list.Classroom,count(DISTINCT list.Grade)",
        "question": "For each classroom, report the classroom number and the number of grades using it.",
        "answers": [
            [
                101,
                1
            ],
            [
                112,
                1
            ],
            [
                107,
                1
            ],
            [
                105,
                1
            ],
            [
                111,
                1
            ],
            [
                102,
                1
            ],
            [
                104,
                1
            ],
            [
                109,
                1
            ],
            [
                110,
                1
            ],
            [
                103,
                1
            ],
            [
                106,
                1
            ],
            [
                108,
                1
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nRETURN list.Classroom,count(DISTINCT list.Grade)",
        "question": "For each classroom, show the classroom number and count the number of distinct grades that use the room.",
        "answers": [
            [
                101,
                1
            ],
            [
                112,
                1
            ],
            [
                107,
                1
            ],
            [
                105,
                1
            ],
            [
                111,
                1
            ],
            [
                102,
                1
            ],
            [
                104,
                1
            ],
            [
                109,
                1
            ],
            [
                110,
                1
            ],
            [
                103,
                1
            ],
            [
                106,
                1
            ],
            [
                108,
                1
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nRETURN list.Classroom,count(*)",
        "question": "Report the number of students in each classroom.",
        "answers": [
            [
                101,
                3
            ],
            [
                112,
                3
            ],
            [
                107,
                6
            ],
            [
                105,
                5
            ],
            [
                111,
                4
            ],
            [
                102,
                7
            ],
            [
                104,
                4
            ],
            [
                109,
                8
            ],
            [
                110,
                6
            ],
            [
                103,
                5
            ],
            [
                106,
                7
            ],
            [
                108,
                2
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nRETURN list.Classroom,count(*)",
        "question": "For each classroom, show the classroom number and find how many students are using it.",
        "answers": [
            [
                101,
                3
            ],
            [
                112,
                3
            ],
            [
                107,
                6
            ],
            [
                105,
                5
            ],
            [
                111,
                4
            ],
            [
                102,
                7
            ],
            [
                104,
                4
            ],
            [
                109,
                8
            ],
            [
                110,
                6
            ],
            [
                103,
                5
            ],
            [
                106,
                7
            ],
            [
                108,
                2
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Grade = 0\nRETURN list.Classroom,count(*)",
        "question": "For each grade 0 classroom, report the total number of students.",
        "answers": [
            [
                105,
                5
            ],
            [
                104,
                4
            ],
            [
                106,
                7
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Grade = 0\nRETURN list.Classroom,count(*)",
        "question": "For each grade 0 classroom, return the classroom number and the count of students.",
        "answers": [
            [
                105,
                5
            ],
            [
                104,
                4
            ],
            [
                106,
                7
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Grade = 4\nRETURN list.Classroom,count(*)",
        "question": "Report the total number of students for each fourth-grade classroom.",
        "answers": [
            [
                111,
                4
            ],
            [
                110,
                6
            ],
            [
                108,
                2
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Grade = 4\nRETURN list.Classroom,count(*)",
        "question": "For each fourth-grade classroom, show the classroom number and the total number of students using it.",
        "answers": [
            [
                111,
                4
            ],
            [
                110,
                6
            ],
            [
                108,
                2
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nRETURN count(*),list.Classroom",
        "question": "Find the number of students in one classroom.",
        "answers": [
            [
                3,
                101
            ],
            [
                3,
                112
            ],
            [
                6,
                107
            ],
            [
                5,
                105
            ],
            [
                4,
                111
            ],
            [
                7,
                102
            ],
            [
                4,
                104
            ],
            [
                8,
                109
            ],
            [
                6,
                110
            ],
            [
                5,
                103
            ],
            [
                7,
                106
            ],
            [
                2,
                108
            ]
        ]
    },
    {
        "db_id": "student_1",
        "query": "MATCH (list:`student_1.list`)\nRETURN count(*),list.Classroom",
        "question": "How many students does one classroom have?",
        "answers": [
            [
                3,
                101
            ],
            [
                3,
                112
            ],
            [
                6,
                107
            ],
            [
                5,
                105
            ],
            [
                4,
                111
            ],
            [
                7,
                102
            ],
            [
                4,
                104
            ],
            [
                8,
                109
            ],
            [
                6,
                110
            ],
            [
                5,
                103
            ],
            [
                7,
                106
            ],
            [
                2,
                108
            ]
        ]
    },
    {
        "db_id": "company_employee",
        "query": "MATCH (company:`company_employee.company`)\nWHERE company.Headquarters = 'USA'\nRETURN count(*)",
        "question": "How many companies are headquartered in the US?",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "company_employee",
        "query": "MATCH (company:`company_employee.company`)\nRETURN company.Name\nORDER BY company.Sales_in_Billion ASC",
        "question": "List the names of companies by ascending number of sales.",
        "answers": [
            [
                "Agricultural Bank of China"
            ],
            [
                "China Construction Bank"
            ],
            [
                "Industrial and Commercial Bank of China"
            ],
            [
                "Wells Fargo"
            ],
            [
                "HSBC"
            ],
            [
                "Citigroup"
            ],
            [
                "JPMorgan Chase"
            ],
            [
                "Gazprom"
            ],
            [
                "Berkshire Hathaway"
            ],
            [
                "Petrobras"
            ],
            [
                "General Electric"
            ],
            [
                "Total"
            ],
            [
                "Volkswagen Group"
            ],
            [
                "Chevron"
            ],
            [
                "PetroChina"
            ],
            [
                "BP"
            ],
            [
                "ExxonMobil"
            ],
            [
                "Walmart"
            ],
            [
                "Royal Dutch Shell"
            ]
        ]
    },
    {
        "db_id": "company_employee",
        "query": "MATCH (company:`company_employee.company`)\nRETURN company.Headquarters,company.Industry",
        "question": "What are the headquarters and industries of all companies?",
        "answers": [
            [
                "USA",
                "Oil and gas"
            ],
            [
                "USA",
                "Banking"
            ],
            [
                "USA",
                "Conglomerate"
            ],
            [
                "Netherlands",
                "Oil and gas"
            ],
            [
                "China",
                "Banking"
            ],
            [
                "UK",
                "Banking"
            ],
            [
                "China",
                "Oil and gas"
            ],
            [
                "USA",
                "Conglomerate"
            ],
            [
                "USA",
                "Banking"
            ],
            [
                "Brazil",
                "Oil and gas"
            ],
            [
                "UK",
                "Oil and gas"
            ],
            [
                "USA",
                "Oil and gas"
            ],
            [
                "China",
                "Banking"
            ],
            [
                "USA",
                "Banking"
            ],
            [
                "Russia",
                "Oil and gas"
            ],
            [
                "USA",
                "Retailing"
            ],
            [
                "Germany",
                "Automotive"
            ],
            [
                "France",
                "Oil and gas"
            ],
            [
                "China",
                "Banking"
            ]
        ]
    },
    {
        "db_id": "company_employee",
        "query": "MATCH (company:`company_employee.company`)\nWHERE company.Industry = 'Banking' OR company.Industry = 'Retailing'\nRETURN company.Name",
        "question": "Show the names of companies in the banking or retailing industry?",
        "answers": [
            [
                "JPMorgan Chase"
            ],
            [
                "Industrial and Commercial Bank of China"
            ],
            [
                "HSBC"
            ],
            [
                "Wells Fargo"
            ],
            [
                "China Construction Bank"
            ],
            [
                "Citigroup"
            ],
            [
                "Walmart"
            ],
            [
                "Agricultural Bank of China"
            ]
        ]
    },
    {
        "db_id": "company_employee",
        "query": "MATCH (company:`company_employee.company`)\nRETURN max(company.Market_Value_in_Billion),min(company.Market_Value_in_Billion)",
        "question": "What is the maximum and minimum market value of companies?",
        "answers": [
            [
                407.4,
                79.5
            ]
        ]
    },
    {
        "db_id": "company_employee",
        "query": "MATCH (company:`company_employee.company`)\nRETURN company.Headquarters\nORDER BY company.Sales_in_Billion DESC\nLIMIT 1",
        "question": "What is the headquarter of the company with the largest sales?",
        "answers": [
            [
                "Netherlands"
            ]
        ]
    },
    {
        "db_id": "company_employee",
        "query": "MATCH (company:`company_employee.company`)\nRETURN company.Headquarters,count(*)",
        "question": "Show the different headquarters and number of companies at each headquarter.",
        "answers": [
            [
                "USA",
                8
            ],
            [
                "Netherlands",
                1
            ],
            [
                "China",
                4
            ],
            [
                "UK",
                2
            ],
            [
                "Brazil",
                1
            ],
            [
                "Russia",
                1
            ],
            [
                "Germany",
                1
            ],
            [
                "France",
                1
            ]
        ]
    },
    {
        "db_id": "company_employee",
        "query": "MATCH (company:`company_employee.company`)\nRETURN company.Headquarters\nORDER BY company.Headquarters DESC\nLIMIT 1",
        "question": "Show the most common headquarter for companies.",
        "answers": [
            [
                "USA"
            ]
        ]
    },
    {
        "db_id": "company_employee",
        "query": "MATCH (company:`company_employee.company`)\nWITH count(*) AS count, company.Headquarters AS Headquarters\nWHERE count  >= 2\nRETURN Headquarters",
        "question": "Show the headquarters that have at least two companies.",
        "answers": [
            [
                "USA"
            ],
            [
                "China"
            ],
            [
                "UK"
            ]
        ]
    },
    {
        "db_id": "company_employee",
        "query": "MATCH (company:`company_employee.company`)\nWHERE company.Sales_in_Billion > 200\nRETURN company.Name\nORDER BY company.Sales_in_Billion,company.Profits_in_Billion DESC",
        "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "answers": [
            [
                "Total"
            ],
            [
                "Volkswagen Group"
            ],
            [
                "Chevron"
            ],
            [
                "PetroChina"
            ],
            [
                "BP"
            ],
            [
                "ExxonMobil"
            ],
            [
                "Walmart"
            ],
            [
                "Royal Dutch Shell"
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (film:`film_rank.film`)\nRETURN count(*)",
        "question": "How many film are there?",
        "answers": [
            [
                13
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (film:`film_rank.film`)\nRETURN count(*)",
        "question": "Count the number of films.",
        "answers": [
            [
                13
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (film:`film_rank.film`)\nRETURN DISTINCT film.Director",
        "question": "List the distinct director of all films.",
        "answers": [
            [
                "Steven Spielberg"
            ],
            [
                "Sydney Pollack"
            ],
            [
                "Taylor Hackford"
            ],
            [
                "Sylvester Stallone"
            ],
            [
                "Bob Clark"
            ],
            [
                "Nicholas Meyer"
            ],
            [
                "Walter Hill"
            ],
            [
                "Tobe Hooper"
            ],
            [
                "Colin Higgins"
            ],
            [
                "John Huston"
            ],
            [
                "Sidney Lumet"
            ],
            [
                "Richard Attenborough"
            ],
            [
                "Ted Kotcheff"
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (film:`film_rank.film`)\nRETURN DISTINCT film.Director",
        "question": "What are the different film Directors?",
        "answers": [
            [
                "Steven Spielberg"
            ],
            [
                "Sydney Pollack"
            ],
            [
                "Taylor Hackford"
            ],
            [
                "Sylvester Stallone"
            ],
            [
                "Bob Clark"
            ],
            [
                "Nicholas Meyer"
            ],
            [
                "Walter Hill"
            ],
            [
                "Tobe Hooper"
            ],
            [
                "Colin Higgins"
            ],
            [
                "John Huston"
            ],
            [
                "Sidney Lumet"
            ],
            [
                "Richard Attenborough"
            ],
            [
                "Ted Kotcheff"
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (film:`film_rank.film`)\nRETURN avg(film.Gross_in_dollar)",
        "question": "What is the average ticket sales gross in dollars of films?",
        "answers": [
            [
                114827242.38461539
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (film:`film_rank.film`)\nRETURN avg(film.Gross_in_dollar)",
        "question": "Return the average gross sales in dollars across all films.",
        "answers": [
            [
                114827242.38461539
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (film_market_estimation:`film_rank.film_market_estimation`)\nRETURN film_market_estimation.Low_Estimate,film_market_estimation.High_Estimate",
        "question": "What are the low and high estimates of film markets?",
        "answers": [
            [
                80000.0,
                80400.0
            ],
            [
                8000.0,
                8000.0
            ],
            [
                3000.0,
                80400.0
            ],
            [
                960.0,
                960.0
            ],
            [
                913.0,
                913.0
            ],
            [
                300.0,
                1000.0
            ],
            [
                53.0,
                53.0
            ],
            [
                39.0,
                39.0
            ],
            [
                16.0,
                16.0
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (film_market_estimation:`film_rank.film_market_estimation`)\nRETURN film_market_estimation.Low_Estimate,film_market_estimation.High_Estimate",
        "question": "Return the low and high estimates for all film markets.",
        "answers": [
            [
                80000.0,
                80400.0
            ],
            [
                8000.0,
                8000.0
            ],
            [
                3000.0,
                80400.0
            ],
            [
                960.0,
                960.0
            ],
            [
                913.0,
                913.0
            ],
            [
                300.0,
                1000.0
            ],
            [
                53.0,
                53.0
            ],
            [
                39.0,
                39.0
            ],
            [
                16.0,
                16.0
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (film_market_estimation:`film_rank.film_market_estimation`)\nWHERE film_market_estimation.Year = 1995\nRETURN film_market_estimation.Type",
        "question": "What are the types of film market estimations in year 1995?",
        "answers": [
            [
                "Mass suicide"
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (film_market_estimation:`film_rank.film_market_estimation`)\nWHERE film_market_estimation.Year = 1995\nRETURN film_market_estimation.Type",
        "question": "Return the types of film market estimations in 1995.",
        "answers": [
            [
                "Mass suicide"
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (market:`film_rank.market`)\nRETURN max(market.Number_cities),min(market.Number_cities)",
        "question": "What are the maximum and minimum number of cities in all markets.",
        "answers": [
            [
                700,
                209
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (market:`film_rank.market`)\nRETURN max(market.Number_cities),min(market.Number_cities)",
        "question": "Return the maximum and minimum number of cities across all markets.",
        "answers": [
            [
                700,
                209
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (market:`film_rank.market`)\nWHERE market.Number_cities < 300\nRETURN count(*)",
        "question": "How many markets have number of cities smaller than 300?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (market:`film_rank.market`)\nWHERE market.Number_cities < 300\nRETURN count(*)",
        "question": "Count the number of markets that have a number of cities lower than 300.",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (market:`film_rank.market`)\nRETURN market.Country\nORDER BY market.Country ASC",
        "question": "List all countries of markets in ascending alphabetical order.",
        "answers": [
            [
                "China"
            ],
            [
                "France"
            ],
            [
                "Japan"
            ],
            [
                "Poland"
            ],
            [
                "Russia"
            ],
            [
                "USA"
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (market:`film_rank.market`)\nRETURN market.Country\nORDER BY market.Country ASC",
        "question": "What are the countries for each market, ordered alphabetically?",
        "answers": [
            [
                "China"
            ],
            [
                "France"
            ],
            [
                "Japan"
            ],
            [
                "Poland"
            ],
            [
                "Russia"
            ],
            [
                "USA"
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (market:`film_rank.market`)\nRETURN market.Country\nORDER BY market.Number_cities DESC",
        "question": "List all countries of markets in descending order of number of cities.",
        "answers": [
            [
                "USA"
            ],
            [
                "China"
            ],
            [
                "Poland"
            ],
            [
                "Russia"
            ],
            [
                "France"
            ],
            [
                "Japan"
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (market:`film_rank.market`)\nRETURN market.Country\nORDER BY market.Number_cities DESC",
        "question": "What are the countries for each market ordered by decreasing number of cities?",
        "answers": [
            [
                "USA"
            ],
            [
                "China"
            ],
            [
                "Poland"
            ],
            [
                "Russia"
            ],
            [
                "France"
            ],
            [
                "Japan"
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (T1:`film_rank.film`)-[]-(T2:`film_rank.film_market_estimation`)\nRETURN T1.Title,T2.Type",
        "question": "Please show the titles of films and the types of market estimations.",
        "answers": [
            [
                "ET the Extra-Terrestrial",
                "Mass suicide"
            ],
            [
                "ET the Extra-Terrestrial",
                "Mass suicide"
            ],
            [
                "ET the Extra-Terrestrial",
                "Mass suicide murder"
            ],
            [
                "Tootsie",
                "Mass suicide"
            ],
            [
                "An Officer and a Gentleman",
                "Mass human sacrifice"
            ],
            [
                "Rocky III",
                "Mass suicide"
            ],
            [
                "Rocky III",
                "Mass suicide murder"
            ],
            [
                "Rocky III",
                "Mass suicide"
            ],
            [
                "Rocky III",
                "Mass suicide"
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (T1:`film_rank.film`)-[]-(T2:`film_rank.film_market_estimation`)\nRETURN T1.Title,T2.Type",
        "question": "What are the titles of films and corresponding types of market estimations?",
        "answers": [
            [
                "ET the Extra-Terrestrial",
                "Mass suicide"
            ],
            [
                "ET the Extra-Terrestrial",
                "Mass suicide"
            ],
            [
                "ET the Extra-Terrestrial",
                "Mass suicide murder"
            ],
            [
                "Tootsie",
                "Mass suicide"
            ],
            [
                "An Officer and a Gentleman",
                "Mass human sacrifice"
            ],
            [
                "Rocky III",
                "Mass suicide"
            ],
            [
                "Rocky III",
                "Mass suicide murder"
            ],
            [
                "Rocky III",
                "Mass suicide"
            ],
            [
                "Rocky III",
                "Mass suicide"
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (T1:`film_rank.film`)-[]-(T2:`film_rank.film_market_estimation`)\nWHERE T2.Year = 1995\nRETURN DISTINCT T1.Director",
        "question": "Show the distinct director of films with market estimation in the year of 1995.",
        "answers": [
            [
                "Steven Spielberg"
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (T1:`film_rank.film`)-[]-(T2:`film_rank.film_market_estimation`)\nWHERE T2.Year = 1995\nRETURN DISTINCT T1.Director",
        "question": "Who are the different directors of films which had market estimation in 1995?",
        "answers": [
            [
                "Steven Spielberg"
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (T1:`film_rank.film_market_estimation`)-[]-(T2:`film_rank.market`)\nRETURN T2.Country,T1.Year",
        "question": "Please list the countries and years of film market estimations.",
        "answers": [
            [
                "Japan",
                2000
            ],
            [
                "Japan",
                1994
            ],
            [
                "Japan",
                1945
            ],
            [
                "Japan",
                1978
            ],
            [
                "China",
                1944
            ],
            [
                "China",
                1973
            ],
            [
                "China",
                1997
            ],
            [
                "USA",
                1487
            ],
            [
                "USA",
                1995
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (T1:`film_rank.film_market_estimation`)-[]-(T2:`film_rank.market`)\nRETURN T2.Country,T1.Year",
        "question": "What are the countries of markets and their corresponding years of market estimation?",
        "answers": [
            [
                "Japan",
                2000
            ],
            [
                "Japan",
                1994
            ],
            [
                "Japan",
                1945
            ],
            [
                "Japan",
                1978
            ],
            [
                "China",
                1944
            ],
            [
                "China",
                1973
            ],
            [
                "China",
                1997
            ],
            [
                "USA",
                1487
            ],
            [
                "USA",
                1995
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (T1:`film_rank.film_market_estimation`)-[]-(T2:`film_rank.market`)\nWHERE T2.Country = 'Japan'\nRETURN T1.Year\nORDER BY T1.Year DESC",
        "question": "Please list the years of film market estimations when the market is in country \"Japan\" in descending order.",
        "answers": [
            [
                2000
            ],
            [
                1994
            ],
            [
                1978
            ],
            [
                1945
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (T1:`film_rank.film_market_estimation`)-[]-(T2:`film_rank.market`)\nWHERE T2.Country = 'Japan'\nRETURN T1.Year\nORDER BY T1.Year DESC",
        "question": "What are the years of film market estimation for the market of Japan, ordered by year descending?",
        "answers": [
            [
                2000
            ],
            [
                1994
            ],
            [
                1978
            ],
            [
                1945
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (film:`film_rank.film`)\nRETURN film.Studio,count(*)",
        "question": "List the studios of each film and the number of films produced by that studio.",
        "answers": [
            [
                "Universal",
                1
            ],
            [
                "Columbia",
                2
            ],
            [
                "Paramount / Lorimar",
                1
            ],
            [
                "United Artists",
                1
            ],
            [
                "20th Century Fox",
                2
            ],
            [
                "Paramount",
                2
            ],
            [
                "MGM",
                1
            ],
            [
                "Universal / RKO",
                1
            ],
            [
                "Columbia / Rastar",
                1
            ],
            [
                "Orion / Carolco",
                1
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (film:`film_rank.film`)\nRETURN film.Studio,count(*)",
        "question": "How films are produced by each studio?",
        "answers": [
            [
                "Universal",
                1
            ],
            [
                "Columbia",
                2
            ],
            [
                "Paramount / Lorimar",
                1
            ],
            [
                "United Artists",
                1
            ],
            [
                "20th Century Fox",
                2
            ],
            [
                "Paramount",
                2
            ],
            [
                "MGM",
                1
            ],
            [
                "Universal / RKO",
                1
            ],
            [
                "Columbia / Rastar",
                1
            ],
            [
                "Orion / Carolco",
                1
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (film:`film_rank.film`)\nWITH count(*) AS count, film.Studio AS Studio\nWHERE count  >= 2\nRETURN Studio",
        "question": "List the names of studios that have at least two films.",
        "answers": [
            [
                "Columbia"
            ],
            [
                "20th Century Fox"
            ],
            [
                "Paramount"
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (film:`film_rank.film`)\nWITH count(*) AS count, film.Studio AS Studio\nWHERE count  >= 2\nRETURN Studio",
        "question": "What are the names of studios that have made two or more films?",
        "answers": [
            [
                "Columbia"
            ],
            [
                "20th Century Fox"
            ],
            [
                "Paramount"
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (film:`film_rank.film`)\nWHERE NOT (film)-[]-(:`film_rank.film_market_estimation`)    \nRETURN film.Title",
        "question": "List the title of films that do not have any market estimation.",
        "answers": [
            [
                "Porky's"
            ],
            [
                "Star Trek II: The Wrath of Khan"
            ],
            [
                "48 Hrs"
            ],
            [
                "Poltergeist"
            ],
            [
                "The Best Little Whorehouse in Texas"
            ],
            [
                "Annie"
            ],
            [
                "The Verdict"
            ],
            [
                "Gandhi"
            ],
            [
                "First Blood"
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (film:`film_rank.film`)\nWHERE NOT (film)-[]-(:`film_rank.film_market_estimation`)    \nRETURN film.Title",
        "question": "What are the titles of films that do not have a film market estimation?",
        "answers": [
            [
                "Porky's"
            ],
            [
                "Star Trek II: The Wrath of Khan"
            ],
            [
                "48 Hrs"
            ],
            [
                "Poltergeist"
            ],
            [
                "The Best Little Whorehouse in Texas"
            ],
            [
                "Annie"
            ],
            [
                "The Verdict"
            ],
            [
                "Gandhi"
            ],
            [
                "First Blood"
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (film:`film_rank.film`)\nWITH film.Studio AS Studio, avg(film.Gross_in_dollar) AS avg\nWHERE avg >= 4500000\nRETURN Studio",
        "question": "List the studios which average gross is above 4500000.",
        "answers": [
            [
                "Universal"
            ],
            [
                "Columbia"
            ],
            [
                "Paramount / Lorimar"
            ],
            [
                "United Artists"
            ],
            [
                "20th Century Fox"
            ],
            [
                "Paramount"
            ],
            [
                "MGM"
            ],
            [
                "Universal / RKO"
            ],
            [
                "Columbia / Rastar"
            ],
            [
                "Orion / Carolco"
            ]
        ]
    },
    {
        "db_id": "film_rank",
        "query": "MATCH (film:`film_rank.film`)\nWITH film.Studio AS Studio, avg(film.Gross_in_dollar) AS avg\nWHERE avg >= 4500000\nRETURN Studio",
        "question": "Which studios have an average gross of over 4500000?",
        "answers": [
            [
                "Universal"
            ],
            [
                "Columbia"
            ],
            [
                "Paramount / Lorimar"
            ],
            [
                "United Artists"
            ],
            [
                "20th Century Fox"
            ],
            [
                "Paramount"
            ],
            [
                "MGM"
            ],
            [
                "Universal / RKO"
            ],
            [
                "Columbia / Rastar"
            ],
            [
                "Orion / Carolco"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (ref_calendar:`cre_Doc_Tracking_DB.Ref_Calendar`)\nRETURN count(*)",
        "question": "How many calendar items do we have?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (ref_calendar:`cre_Doc_Tracking_DB.Ref_Calendar`)\nRETURN count(*)",
        "question": "Count the number of all the calendar items.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (ref_calendar:`cre_Doc_Tracking_DB.Ref_Calendar`)\nRETURN ref_calendar.Calendar_Date,ref_calendar.Day_Number",
        "question": "Show all calendar dates and day Numbers.",
        "answers": [
            [
                "1972-03-31 09:47:22",
                5
            ],
            [
                "1976-06-15 03:40:06",
                7
            ],
            [
                "1985-05-13 12:19:43",
                7
            ],
            [
                "1986-10-14 17:53:39",
                1
            ],
            [
                "1987-11-05 06:11:22",
                3
            ],
            [
                "1988-02-01 14:41:52",
                8
            ],
            [
                "1994-11-15 03:49:54",
                9
            ],
            [
                "1995-01-01 03:52:11",
                1
            ],
            [
                "1997-03-10 15:24:00",
                7
            ],
            [
                "2007-05-28 16:28:48",
                2
            ],
            [
                "2008-06-08 12:45:38",
                3
            ],
            [
                "2009-08-18 03:29:08",
                8
            ],
            [
                "2010-11-26 19:22:50",
                7
            ],
            [
                "2012-07-03 09:48:46",
                7
            ],
            [
                "2017-01-06 23:17:22",
                8
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (ref_calendar:`cre_Doc_Tracking_DB.Ref_Calendar`)\nRETURN ref_calendar.Calendar_Date,ref_calendar.Day_Number",
        "question": "What are all the calendar dates and day Numbers?",
        "answers": [
            [
                "1972-03-31 09:47:22",
                5
            ],
            [
                "1976-06-15 03:40:06",
                7
            ],
            [
                "1985-05-13 12:19:43",
                7
            ],
            [
                "1986-10-14 17:53:39",
                1
            ],
            [
                "1987-11-05 06:11:22",
                3
            ],
            [
                "1988-02-01 14:41:52",
                8
            ],
            [
                "1994-11-15 03:49:54",
                9
            ],
            [
                "1995-01-01 03:52:11",
                1
            ],
            [
                "1997-03-10 15:24:00",
                7
            ],
            [
                "2007-05-28 16:28:48",
                2
            ],
            [
                "2008-06-08 12:45:38",
                3
            ],
            [
                "2009-08-18 03:29:08",
                8
            ],
            [
                "2010-11-26 19:22:50",
                7
            ],
            [
                "2012-07-03 09:48:46",
                7
            ],
            [
                "2017-01-06 23:17:22",
                8
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (ref_document_types:`cre_Doc_Tracking_DB.Ref_Document_Types`)\nRETURN count(*)",
        "question": "Show the number of document types.",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (ref_document_types:`cre_Doc_Tracking_DB.Ref_Document_Types`)\nRETURN count(*)",
        "question": "How many document types are there?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (ref_document_types:`cre_Doc_Tracking_DB.Ref_Document_Types`)\nRETURN ref_document_types.Document_Type_Code,ref_document_types.Document_Type_Name",
        "question": "List all document type codes and document type names.",
        "answers": [
            [
                "CV",
                "CV"
            ],
            [
                "BK",
                "Book"
            ],
            [
                "PR",
                "Paper"
            ],
            [
                "RV",
                "Review"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (ref_document_types:`cre_Doc_Tracking_DB.Ref_Document_Types`)\nRETURN ref_document_types.Document_Type_Code,ref_document_types.Document_Type_Name",
        "question": "What are all the document type codes and document type names?",
        "answers": [
            [
                "CV",
                "CV"
            ],
            [
                "BK",
                "Book"
            ],
            [
                "PR",
                "Paper"
            ],
            [
                "RV",
                "Review"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (all_documents:`cre_Doc_Tracking_DB.All_Documents`)\nWHERE all_documents.Document_Name = \"Marry CV\"\nRETURN all_documents.Date_Stored",
        "question": "What is the date when the document \"Marry CV\" was stored?",
        "answers": [
            [
                "1986-10-14 17:53:39"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (all_documents:`cre_Doc_Tracking_DB.All_Documents`)\nWHERE all_documents.Document_Name = \"Marry CV\"\nRETURN all_documents.Date_Stored",
        "question": "When was the document named \"Marry CV\" stored? Give me the date.",
        "answers": [
            [
                "1986-10-14 17:53:39"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (T1:`cre_Doc_Tracking_DB.All_Documents`)-[]-(T2:`cre_Doc_Tracking_DB.Ref_Calendar`)\nRETURN T2.Day_Number,T1.Date_Stored",
        "question": "What is the day Number and date of all the documents?",
        "answers": [
            [
                7,
                "1976-06-15 03:40:06"
            ],
            [
                1,
                "1986-10-14 17:53:39"
            ],
            [
                3,
                "2008-06-08 12:45:38"
            ],
            [
                7,
                "2012-07-03 09:48:46"
            ],
            [
                7,
                "2012-07-03 09:48:46"
            ],
            [
                1,
                "1995-01-01 03:52:11"
            ],
            [
                3,
                "2008-06-08 12:45:38"
            ],
            [
                3,
                "1987-11-05 06:11:22"
            ],
            [
                3,
                "2008-06-08 12:45:38"
            ],
            [
                7,
                "1997-03-10 15:24:00"
            ],
            [
                7,
                "1997-03-10 15:24:00"
            ],
            [
                8,
                "2009-08-18 03:29:08"
            ],
            [
                7,
                "1976-06-15 03:40:06"
            ],
            [
                7,
                "1976-06-15 03:40:06"
            ],
            [
                7,
                "1997-03-10 15:24:00"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (T1:`cre_Doc_Tracking_DB.All_Documents`)-[]-(T2:`cre_Doc_Tracking_DB.Ref_Calendar`)\nRETURN T2.Day_Number,T1.Date_Stored",
        "question": "Return the day Number and stored date for all the documents.",
        "answers": [
            [
                7,
                "1976-06-15 03:40:06"
            ],
            [
                1,
                "1986-10-14 17:53:39"
            ],
            [
                3,
                "2008-06-08 12:45:38"
            ],
            [
                7,
                "2012-07-03 09:48:46"
            ],
            [
                7,
                "2012-07-03 09:48:46"
            ],
            [
                1,
                "1995-01-01 03:52:11"
            ],
            [
                3,
                "2008-06-08 12:45:38"
            ],
            [
                3,
                "1987-11-05 06:11:22"
            ],
            [
                3,
                "2008-06-08 12:45:38"
            ],
            [
                7,
                "1997-03-10 15:24:00"
            ],
            [
                7,
                "1997-03-10 15:24:00"
            ],
            [
                8,
                "2009-08-18 03:29:08"
            ],
            [
                7,
                "1976-06-15 03:40:06"
            ],
            [
                7,
                "1976-06-15 03:40:06"
            ],
            [
                7,
                "1997-03-10 15:24:00"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (T1:`cre_Doc_Tracking_DB.All_Documents`)-[]-(T2:`cre_Doc_Tracking_DB.Ref_Document_Types`)\nWHERE T1.Document_Name = \"How to read a book\"\nRETURN T2.Document_Type_Name",
        "question": "What is the document type name for the document with name \"How to read a book\"?",
        "answers": [
            [
                "Book"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (T1:`cre_Doc_Tracking_DB.All_Documents`)-[]-(T2:`cre_Doc_Tracking_DB.Ref_Document_Types`)\nWHERE T1.Document_Name = \"How to read a book\"\nRETURN T2.Document_Type_Name",
        "question": "Find the document type name of the document named \"How to read a book\".",
        "answers": [
            [
                "Book"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (ref_locations:`cre_Doc_Tracking_DB.Ref_Locations`)\nRETURN count(*)",
        "question": "Show the number of locations.",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (ref_locations:`cre_Doc_Tracking_DB.Ref_Locations`)\nRETURN count(*)",
        "question": "How many locations are listed in the database?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (ref_locations:`cre_Doc_Tracking_DB.Ref_Locations`)\nRETURN ref_locations.Location_Code,ref_locations.Location_Name",
        "question": "List all location codes and location names.",
        "answers": [
            [
                "b",
                "Brazil"
            ],
            [
                "c",
                "Canada"
            ],
            [
                "e",
                "Edinburgh"
            ],
            [
                "n",
                "Nanjing"
            ],
            [
                "x",
                "Xiamen"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (ref_locations:`cre_Doc_Tracking_DB.Ref_Locations`)\nRETURN ref_locations.Location_Code,ref_locations.Location_Name",
        "question": "What are all the location codes and location names?",
        "answers": [
            [
                "b",
                "Brazil"
            ],
            [
                "c",
                "Canada"
            ],
            [
                "e",
                "Edinburgh"
            ],
            [
                "n",
                "Nanjing"
            ],
            [
                "x",
                "Xiamen"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (roles:`cre_Doc_Tracking_DB.Roles`)\nRETURN count(*)",
        "question": "How many roles are there?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (roles:`cre_Doc_Tracking_DB.Roles`)\nRETURN count(*)",
        "question": "Count the total number of roles listed.",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (roles:`cre_Doc_Tracking_DB.Roles`)\nRETURN roles.Role_Code,roles.Role_Name,roles.Role_Description",
        "question": "List all role codes, role names, and role descriptions.",
        "answers": [
            [
                "MG",
                "Manager",
                "Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti."
            ],
            [
                "ED",
                "Editor",
                "Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos."
            ],
            [
                "PT",
                "Photo",
                "Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt."
            ],
            [
                "PR",
                "Proof Reader",
                "Ut sed quae eaque mollitia qui hic. Natus ea expedita et odio illum fugiat qui natus. Consequatur velit ut dolorem cum ullam esse deserunt dignissimos. Enim non non rem officiis quis."
            ],
            [
                "HR",
                "Human Resource",
                "Et totam est quibusdam aspernatur ut. Vitae perferendis eligendi voluptatem molestiae rem ut enim. Ipsum expedita quae earum unde est. Repellendus ut ipsam nihil accusantium sit. Magni accusantium numquam quod et."
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (roles:`cre_Doc_Tracking_DB.Roles`)\nRETURN roles.Role_Code,roles.Role_Name,roles.Role_Description",
        "question": "What are all the role codes, role names, and role descriptions?",
        "answers": [
            [
                "MG",
                "Manager",
                "Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti."
            ],
            [
                "ED",
                "Editor",
                "Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos."
            ],
            [
                "PT",
                "Photo",
                "Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt."
            ],
            [
                "PR",
                "Proof Reader",
                "Ut sed quae eaque mollitia qui hic. Natus ea expedita et odio illum fugiat qui natus. Consequatur velit ut dolorem cum ullam esse deserunt dignissimos. Enim non non rem officiis quis."
            ],
            [
                "HR",
                "Human Resource",
                "Et totam est quibusdam aspernatur ut. Vitae perferendis eligendi voluptatem molestiae rem ut enim. Ipsum expedita quae earum unde est. Repellendus ut ipsam nihil accusantium sit. Magni accusantium numquam quod et."
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (roles:`cre_Doc_Tracking_DB.Roles`)\nWHERE roles.Role_Name = \"Proof Reader\"\nRETURN roles.Role_Description",
        "question": "Show the description for role name \"Proof Reader\".",
        "answers": [
            [
                "Ut sed quae eaque mollitia qui hic. Natus ea expedita et odio illum fugiat qui natus. Consequatur velit ut dolorem cum ullam esse deserunt dignissimos. Enim non non rem officiis quis."
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (roles:`cre_Doc_Tracking_DB.Roles`)\nWHERE roles.Role_Name = \"Proof Reader\"\nRETURN roles.Role_Description",
        "question": "What is the description of the role named \"Proof Reader\"?",
        "answers": [
            [
                "Ut sed quae eaque mollitia qui hic. Natus ea expedita et odio illum fugiat qui natus. Consequatur velit ut dolorem cum ullam esse deserunt dignissimos. Enim non non rem officiis quis."
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (employees:`cre_Doc_Tracking_DB.Employees`)\nRETURN count(*)",
        "question": "How many employees do we have?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (employees:`cre_Doc_Tracking_DB.Employees`)\nRETURN count(*)",
        "question": "Find the number of employees we have.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (employees:`cre_Doc_Tracking_DB.Employees`)\nWHERE employees.Employee_Name = 'Armani'\nRETURN employees.Employee_Name,employees.Role_Code,employees.Date_of_Birth",
        "question": "Show the name, role code, and date of birth for the employee with name 'Armani'.",
        "answers": [
            [
                "Armani",
                "ED",
                "1988-12-08 06:13:33"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (employees:`cre_Doc_Tracking_DB.Employees`)\nWHERE employees.Employee_Name = 'Armani'\nRETURN employees.Employee_Name,employees.Role_Code,employees.Date_of_Birth",
        "question": "What are the name, role code, and date of birth of the employee named 'Armani'?",
        "answers": [
            [
                "Armani",
                "ED",
                "1988-12-08 06:13:33"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (employees:`cre_Doc_Tracking_DB.Employees`)\nRETURN employees.Role_Code,count(*)",
        "question": "Show all role codes and the number of employees in each role.",
        "answers": [
            [
                "HR",
                1
            ],
            [
                "MG",
                1
            ],
            [
                "ED",
                7
            ],
            [
                "PT",
                1
            ],
            [
                "PR",
                5
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (employees:`cre_Doc_Tracking_DB.Employees`)\nRETURN employees.Role_Code,count(*)",
        "question": "What is the code of each role and the number of employees in each role?",
        "answers": [
            [
                "HR",
                1
            ],
            [
                "MG",
                1
            ],
            [
                "ED",
                7
            ],
            [
                "PT",
                1
            ],
            [
                "PR",
                5
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (employees:`cre_Doc_Tracking_DB.Employees`)\nWITH employees.Role_Code AS Role_Code, count(*) AS count\nWHERE count  >= 3\nRETURN Role_Code",
        "question": "Show all role codes with at least 3 employees.",
        "answers": [
            [
                "ED"
            ],
            [
                "PR"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (employees:`cre_Doc_Tracking_DB.Employees`)\nWITH employees.Role_Code AS Role_Code, count(*) AS count\nWHERE count  >= 3\nRETURN Role_Code",
        "question": "What are the roles with three or more employees? Give me the role codes.",
        "answers": [
            [
                "ED"
            ],
            [
                "PR"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (document_locations:`cre_Doc_Tracking_DB.Document_Locations`)\nRETURN DISTINCT document_locations.Location_Code",
        "question": "What are the different location codes for documents?",
        "answers": [
            [
                "e"
            ],
            [
                "x"
            ],
            [
                "c"
            ],
            [
                "b"
            ],
            [
                "n"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (document_locations:`cre_Doc_Tracking_DB.Document_Locations`)\nRETURN DISTINCT document_locations.Location_Code",
        "question": "Give me all the distinct location codes for documents.",
        "answers": [
            [
                "e"
            ],
            [
                "x"
            ],
            [
                "c"
            ],
            [
                "b"
            ],
            [
                "n"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (T1:`cre_Doc_Tracking_DB.All_Documents`)-[]-(T2:`cre_Doc_Tracking_DB.Document_Locations`)-[]-(T3:`cre_Doc_Tracking_DB.Ref_Locations`)\nWHERE T1.Document_Name = \"Robin CV\"\nRETURN T3.Location_Name",
        "question": "Show the location name for document \"Robin CV\".",
        "answers": [
            [
                "Edinburgh"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (T1:`cre_Doc_Tracking_DB.All_Documents`)-[]-(T2:`cre_Doc_Tracking_DB.Document_Locations`)-[]-(T3:`cre_Doc_Tracking_DB.Ref_Locations`)\nWHERE T1.Document_Name = \"Robin CV\"\nRETURN T3.Location_Name",
        "question": "What is the location name of the document \"Robin CV\"?",
        "answers": [
            [
                "Edinburgh"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (document_locations:`cre_Doc_Tracking_DB.Document_Locations`)\nRETURN document_locations.Location_Code,document_locations.Date_in_Location_From,document_locations.Date_in_Locaton_To",
        "question": "Show the location code, the starting date and ending data in that location for all the documents.",
        "answers": [
            [
                "e",
                "2017-01-06 23:17:22",
                "2008-06-08 12:45:38"
            ],
            [
                "x",
                "2017-01-06 23:17:22",
                "2012-07-03 09:48:46"
            ],
            [
                "c",
                "1972-03-31 09:47:22",
                "1987-11-05 06:11:22"
            ],
            [
                "c",
                "2017-01-06 23:17:22",
                "2010-11-26 19:22:50"
            ],
            [
                "x",
                "2008-06-08 12:45:38",
                "1976-06-15 03:40:06"
            ],
            [
                "x",
                "1986-10-14 17:53:39",
                "2010-11-26 19:22:50"
            ],
            [
                "b",
                "2017-01-06 23:17:22",
                "1995-01-01 03:52:11"
            ],
            [
                "b",
                "1985-05-13 12:19:43",
                "1986-10-14 17:53:39"
            ],
            [
                "b",
                "1986-10-14 17:53:39",
                "2010-11-26 19:22:50"
            ],
            [
                "x",
                "1997-03-10 15:24:00",
                "1976-06-15 03:40:06"
            ],
            [
                "e",
                "1972-03-31 09:47:22",
                "1987-11-05 06:11:22"
            ],
            [
                "e",
                "2010-11-26 19:22:50",
                "2017-01-06 23:17:22"
            ],
            [
                "n",
                "2017-01-06 23:17:22",
                "1997-03-10 15:24:00"
            ],
            [
                "x",
                "1972-03-31 09:47:22",
                "2009-08-18 03:29:08"
            ],
            [
                "e",
                "2009-08-18 03:29:08",
                "1986-10-14 17:53:39"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (document_locations:`cre_Doc_Tracking_DB.Document_Locations`)\nRETURN document_locations.Location_Code,document_locations.Date_in_Location_From,document_locations.Date_in_Locaton_To",
        "question": "What are each document's location code, and starting date and ending data in that location?",
        "answers": [
            [
                "e",
                "2017-01-06 23:17:22",
                "2008-06-08 12:45:38"
            ],
            [
                "x",
                "2017-01-06 23:17:22",
                "2012-07-03 09:48:46"
            ],
            [
                "c",
                "1972-03-31 09:47:22",
                "1987-11-05 06:11:22"
            ],
            [
                "c",
                "2017-01-06 23:17:22",
                "2010-11-26 19:22:50"
            ],
            [
                "x",
                "2008-06-08 12:45:38",
                "1976-06-15 03:40:06"
            ],
            [
                "x",
                "1986-10-14 17:53:39",
                "2010-11-26 19:22:50"
            ],
            [
                "b",
                "2017-01-06 23:17:22",
                "1995-01-01 03:52:11"
            ],
            [
                "b",
                "1985-05-13 12:19:43",
                "1986-10-14 17:53:39"
            ],
            [
                "b",
                "1986-10-14 17:53:39",
                "2010-11-26 19:22:50"
            ],
            [
                "x",
                "1997-03-10 15:24:00",
                "1976-06-15 03:40:06"
            ],
            [
                "e",
                "1972-03-31 09:47:22",
                "1987-11-05 06:11:22"
            ],
            [
                "e",
                "2010-11-26 19:22:50",
                "2017-01-06 23:17:22"
            ],
            [
                "n",
                "2017-01-06 23:17:22",
                "1997-03-10 15:24:00"
            ],
            [
                "x",
                "1972-03-31 09:47:22",
                "2009-08-18 03:29:08"
            ],
            [
                "e",
                "2009-08-18 03:29:08",
                "1986-10-14 17:53:39"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (document_locations:`cre_Doc_Tracking_DB.Document_Locations`)\nRETURN document_locations.Location_Code,count(*)",
        "question": "Show the location codes and the number of documents in each location.",
        "answers": [
            [
                "e",
                4
            ],
            [
                "x",
                5
            ],
            [
                "c",
                2
            ],
            [
                "b",
                3
            ],
            [
                "n",
                1
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (document_locations:`cre_Doc_Tracking_DB.Document_Locations`)\nRETURN document_locations.Location_Code,count(*)",
        "question": "What is the code of each location and the number of documents in that location?",
        "answers": [
            [
                "e",
                4
            ],
            [
                "x",
                5
            ],
            [
                "c",
                2
            ],
            [
                "b",
                3
            ],
            [
                "n",
                1
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (document_locations:`cre_Doc_Tracking_DB.Document_Locations`)\nRETURN document_locations.Location_Code\nORDER BY document_locations.Location_Code DESC\nLIMIT 1",
        "question": "What is the location code with the most documents?",
        "answers": [
            [
                "x"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (document_locations:`cre_Doc_Tracking_DB.Document_Locations`)\nRETURN document_locations.Location_Code\nORDER BY document_locations.Location_Code DESC\nLIMIT 1",
        "question": "Find the code of the location with the largest number of documents.",
        "answers": [
            [
                "x"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (document_locations:`cre_Doc_Tracking_DB.Document_Locations`)\nWITH count(*) AS count, document_locations.Location_Code AS Location_Code\nWHERE count  >= 3\nRETURN Location_Code",
        "question": "Show the location codes with at least 3 documents.",
        "answers": [
            [
                "e"
            ],
            [
                "x"
            ],
            [
                "b"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (document_locations:`cre_Doc_Tracking_DB.Document_Locations`)\nWITH count(*) AS count, document_locations.Location_Code AS Location_Code\nWHERE count  >= 3\nRETURN Location_Code",
        "question": "What are the codes of the locations with at least three documents?",
        "answers": [
            [
                "e"
            ],
            [
                "x"
            ],
            [
                "b"
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (documents_to_be_destroyed:`cre_Doc_Tracking_DB.Documents_to_be_Destroyed`)\nRETURN documents_to_be_destroyed.Destruction_Authorised_by_Employee_ID,count(*)",
        "question": "Show the id of each employee and the number of document destruction authorised by that employee.",
        "answers": [
            [
                156,
                2
            ],
            [
                55,
                3
            ],
            [
                183,
                3
            ],
            [
                38,
                1
            ],
            [
                123,
                1
            ],
            [
                30,
                1
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (documents_to_be_destroyed:`cre_Doc_Tracking_DB.Documents_to_be_Destroyed`)\nRETURN documents_to_be_destroyed.Destruction_Authorised_by_Employee_ID,count(*)",
        "question": "What are the id of each employee and the number of document destruction authorised by that employee?",
        "answers": [
            [
                156,
                2
            ],
            [
                55,
                3
            ],
            [
                183,
                3
            ],
            [
                38,
                1
            ],
            [
                123,
                1
            ],
            [
                30,
                1
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (documents_to_be_destroyed:`cre_Doc_Tracking_DB.Documents_to_be_Destroyed`)\nRETURN documents_to_be_destroyed.Destroyed_by_Employee_ID,count(*)",
        "question": "Show the employee ids and the number of documents destroyed by each employee.",
        "answers": [
            [
                138,
                1
            ],
            [
                173,
                3
            ],
            [
                156,
                1
            ],
            [
                136,
                2
            ],
            [
                99,
                2
            ],
            [
                38,
                1
            ],
            [
                55,
                1
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (documents_to_be_destroyed:`cre_Doc_Tracking_DB.Documents_to_be_Destroyed`)\nRETURN documents_to_be_destroyed.Destroyed_by_Employee_ID,count(*)",
        "question": "What are the id of each employee and the number of document destroyed by that employee?",
        "answers": [
            [
                138,
                1
            ],
            [
                173,
                3
            ],
            [
                156,
                1
            ],
            [
                136,
                2
            ],
            [
                99,
                2
            ],
            [
                38,
                1
            ],
            [
                55,
                1
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (documents_to_be_destroyed:`cre_Doc_Tracking_DB.Documents_to_be_Destroyed`)\nRETURN DISTINCT documents_to_be_destroyed.Destruction_Authorised_by_Employee_ID",
        "question": "Show the ids of all employees who have authorized destruction.",
        "answers": [
            [
                156
            ],
            [
                55
            ],
            [
                183
            ],
            [
                38
            ],
            [
                123
            ],
            [
                30
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (documents_to_be_destroyed:`cre_Doc_Tracking_DB.Documents_to_be_Destroyed`)\nRETURN DISTINCT documents_to_be_destroyed.Destruction_Authorised_by_Employee_ID",
        "question": "What are the ids of all the employees who authorize document destruction?",
        "answers": [
            [
                156
            ],
            [
                55
            ],
            [
                183
            ],
            [
                38
            ],
            [
                123
            ],
            [
                30
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (documents_to_be_destroyed:`cre_Doc_Tracking_DB.Documents_to_be_Destroyed`)\nRETURN DISTINCT documents_to_be_destroyed.Destroyed_by_Employee_ID",
        "question": "Show the ids of all employees who have destroyed a document.",
        "answers": [
            [
                138
            ],
            [
                173
            ],
            [
                156
            ],
            [
                136
            ],
            [
                99
            ],
            [
                38
            ],
            [
                55
            ]
        ]
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "MATCH (documents_to_be_destroyed:`cre_Doc_Tracking_DB.Documents_to_be_Destroyed`)\nRETURN DISTINCT documents_to_be_destroyed.Destroyed_by_Employee_ID",
        "question": "What are the ids of all the employees who have destroyed documents?",
        "answers": [
            [
                138
            ],
            [
                173
            ],
            [
                156
            ],
            [
                136
            ],
            [
                99
            ],
            [
                38
            ],
            [
                55
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (club:`club_1.Club`)\nRETURN count(*)",
        "question": "How many clubs are there?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (club:`club_1.Club`)\nRETURN count(*)",
        "question": "Count the total number of clubs.",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (club:`club_1.Club`)\nRETURN club.ClubName",
        "question": "What are the names of all clubs?",
        "answers": [
            [
                "Bootup Baltimore"
            ],
            [
                "Hopkins Student Enterprises"
            ],
            [
                "Pen and Paper Gaming"
            ],
            [
                "Tennis Club"
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (club:`club_1.Club`)\nRETURN club.ClubName",
        "question": "Give me the name of each club.",
        "answers": [
            [
                "Bootup Baltimore"
            ],
            [
                "Hopkins Student Enterprises"
            ],
            [
                "Pen and Paper Gaming"
            ],
            [
                "Tennis Club"
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (student:`club_1.Student`)\nRETURN count(*)",
        "question": "How many students are there?",
        "answers": [
            [
                34
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (student:`club_1.Student`)\nRETURN count(*)",
        "question": "Count the total number of students.",
        "answers": [
            [
                34
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (student:`club_1.Student`)\nRETURN DISTINCT student.Fname",
        "question": "What are the first names of all the students?",
        "answers": [
            [
                "Linda"
            ],
            [
                "Tracy"
            ],
            [
                "Shiela"
            ],
            [
                "Dinesh"
            ],
            [
                "Paul"
            ],
            [
                "Andy"
            ],
            [
                "Lisa"
            ],
            [
                "Jandy"
            ],
            [
                "Eric"
            ],
            [
                "Derek"
            ],
            [
                "David"
            ],
            [
                "Steven"
            ],
            [
                "Charles"
            ],
            [
                "Susan"
            ],
            [
                "Mark"
            ],
            [
                "Bruce"
            ],
            [
                "Michael"
            ],
            [
                "Arthur"
            ],
            [
                "Ian"
            ],
            [
                "George"
            ],
            [
                "Stacy"
            ],
            [
                "Jun"
            ],
            [
                "Sarah"
            ],
            [
                "William"
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (student:`club_1.Student`)\nRETURN DISTINCT student.Fname",
        "question": "Find each student's first name.",
        "answers": [
            [
                "Linda"
            ],
            [
                "Tracy"
            ],
            [
                "Shiela"
            ],
            [
                "Dinesh"
            ],
            [
                "Paul"
            ],
            [
                "Andy"
            ],
            [
                "Lisa"
            ],
            [
                "Jandy"
            ],
            [
                "Eric"
            ],
            [
                "Derek"
            ],
            [
                "David"
            ],
            [
                "Steven"
            ],
            [
                "Charles"
            ],
            [
                "Susan"
            ],
            [
                "Mark"
            ],
            [
                "Bruce"
            ],
            [
                "Michael"
            ],
            [
                "Arthur"
            ],
            [
                "Ian"
            ],
            [
                "George"
            ],
            [
                "Stacy"
            ],
            [
                "Jun"
            ],
            [
                "Sarah"
            ],
            [
                "William"
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (t1:`club_1.Club`)-[t2:`club_1.Member_of_club`]-(t3:`club_1.Student`)\nWHERE t1.ClubName = \"Bootup Baltimore\"\nRETURN t3.LName",
        "question": "Find the last names of the members of the club \"Bootup Baltimore\".",
        "answers": [
            [
                "Lee"
            ],
            [
                "Smith"
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (t1:`club_1.Club`)-[t2:`club_1.Member_of_club`]-(t3:`club_1.Student`)\nWHERE t1.ClubName = \"Bootup Baltimore\"\nRETURN t3.LName",
        "question": "Who are the members of the club named \"Bootup Baltimore\"? Give me their last names.",
        "answers": [
            [
                "Lee"
            ],
            [
                "Smith"
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (t1:`club_1.Club`)-[t2:`club_1.Member_of_club`]-(t3:`club_1.Student`)\nWHERE t1.ClubName = \"Hopkins Student Enterprises\"\nRETURN t3.LName",
        "question": "Who are the members of the club named \"Hopkins Student Enterprises\"? Show the last name.",
        "answers": [
            [
                "Nelson"
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (t1:`club_1.Club`)-[t2:`club_1.Member_of_club`]-(t3:`club_1.Student`)\nWHERE t1.ClubName = \"Hopkins Student Enterprises\"\nRETURN t3.LName",
        "question": "Return the last name for the members of the club named \"Hopkins Student Enterprises\".",
        "answers": [
            [
                "Nelson"
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (t1:`club_1.Club`)-[t2:`club_1.Member_of_club`]-(t3:`club_1.Student`)\nWHERE t1.ClubName = \"Tennis Club\"\nRETURN count(*)",
        "question": "How many members does the club \"Tennis Club\" has?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (t1:`club_1.Club`)-[t2:`club_1.Member_of_club`]-(t3:`club_1.Student`)\nWHERE t1.ClubName = \"Tennis Club\"\nRETURN count(*)",
        "question": "Count the members of the club \"Tennis Club\".",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (t1:`club_1.Club`)-[t2:`club_1.Member_of_club`]-(t3:`club_1.Student`)\nWHERE t1.ClubName = \"Pen and Paper Gaming\"\nRETURN count(*)",
        "question": "Find the number of members of club \"Pen and Paper Gaming\".",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (t1:`club_1.Club`)-[t2:`club_1.Member_of_club`]-(t3:`club_1.Student`)\nWHERE t1.ClubName = \"Pen and Paper Gaming\"\nRETURN count(*)",
        "question": "How many people have membership in the club \"Pen and Paper Gaming\"?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (t1:`club_1.Club`)-[t2:`club_1.Member_of_club`]-(t3:`club_1.Student`)\nWHERE t1.ClubName = \"Bootup Baltimore\" AND t3.Major = 600\nRETURN t3.Fname,t3.LName",
        "question": "Find all members of \"Bootup Baltimore\" whose major is \"600\". Show the first name and last name.",
        "answers": [
            [
                "Derek",
                "Lee"
            ],
            [
                "Linda",
                "Smith"
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (t1:`club_1.Club`)-[t2:`club_1.Member_of_club`]-(t3:`club_1.Student`)\nWHERE t1.ClubName = \"Bootup Baltimore\" AND t3.Major = 600\nRETURN t3.Fname,t3.LName",
        "question": "Which members of \"Bootup Baltimore\" major in \"600\"? Give me their first names and last names.",
        "answers": [
            [
                "Derek",
                "Lee"
            ],
            [
                "Linda",
                "Smith"
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (t1:`club_1.Club`)-[t2:`club_1.Member_of_club`]-(t3:`club_1.Student`)\nWHERE t3.Major = 600\nWITH t1, count(t1.ClubName) AS cnt\nRETURN t1.ClubName\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Which club has the most members majoring in \"600\"?",
        "answers": [
            [
                "Bootup Baltimore"
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (t1:`club_1.Club`)-[t2:`club_1.Member_of_club`]-(t3:`club_1.Student`)\nWHERE t3.Major = 600\nWITH t1, count(t1.ClubName) AS cnt\nRETURN t1.ClubName\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Find the club which has the largest number of members majoring in \"600\".",
        "answers": [
            [
                "Bootup Baltimore"
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (club:`club_1.Club`)\nWHERE club.ClubName = \"Tennis Club\"\nRETURN club.ClubDesc",
        "question": "What is the description of the club named \"Tennis Club\"?",
        "answers": [
            [
                "A competitive tennis club."
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (club:`club_1.Club`)\nWHERE club.ClubName = \"Tennis Club\"\nRETURN club.ClubDesc",
        "question": "Find the description of the club called \"Tennis Club\".",
        "answers": [
            [
                "A competitive tennis club."
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (club:`club_1.Club`)\nWHERE club.ClubName = \"Pen and Paper Gaming\"\nRETURN club.ClubDesc",
        "question": "Find the description of the club \"Pen and Paper Gaming\".",
        "answers": [
            [
                "Play pen and paper games on campus."
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (club:`club_1.Club`)\nWHERE club.ClubName = \"Pen and Paper Gaming\"\nRETURN club.ClubDesc",
        "question": "What is the description of the club \"Pen and Paper Gaming\"?",
        "answers": [
            [
                "Play pen and paper games on campus."
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (club:`club_1.Club`)\nWHERE club.ClubName = \"Tennis Club\"\nRETURN club.ClubLocation",
        "question": "What is the location of the club named \"Tennis Club\"?",
        "answers": [
            [
                "AKW"
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (club:`club_1.Club`)\nWHERE club.ClubName = \"Tennis Club\"\nRETURN club.ClubLocation",
        "question": "Where us the club named \"Tennis Club\" located?",
        "answers": [
            [
                "AKW"
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (club:`club_1.Club`)\nWHERE club.ClubName = \"Pen and Paper Gaming\"\nRETURN club.ClubLocation",
        "question": "Find the location of the club \"Pen and Paper Gaming\".",
        "answers": [
            [
                "HHH"
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (club:`club_1.Club`)\nWHERE club.ClubName = \"Pen and Paper Gaming\"\nRETURN club.ClubLocation",
        "question": "Where is the club \"Pen and Paper Gaming\" located?",
        "answers": [
            [
                "HHH"
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (club:`club_1.Club`)\nWHERE club.ClubName = \"Hopkins Student Enterprises\"\nRETURN club.ClubLocation",
        "question": "Where is the club \"Hopkins Student Enterprises\" located?",
        "answers": [
            [
                "AKW"
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (club:`club_1.Club`)\nWHERE club.ClubName = \"Hopkins Student Enterprises\"\nRETURN club.ClubLocation",
        "question": "Tell me the location of the club \"Hopkins Student Enterprises\".",
        "answers": [
            [
                "AKW"
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (t1:`club_1.Club`)-[t2:`club_1.Member_of_club`]-(t3:`club_1.Student`)\nWHERE t1.ClubName = \"Bootup Baltimore\" AND t3.Age > 18\nRETURN count(*)",
        "question": "How many members of \"Bootup Baltimore\" are older than 18?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (t1:`club_1.Club`)-[t2:`club_1.Member_of_club`]-(t3:`club_1.Student`)\nWHERE t1.ClubName = \"Bootup Baltimore\" AND t3.Age > 18\nRETURN count(*)",
        "question": "Count the number of members in club \"Bootup Baltimore\" whose age is above 18.",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (t1:`club_1.Club`)-[t2:`club_1.Member_of_club`]-(t3:`club_1.Student`)\nWHERE t1.ClubName = \"Bootup Baltimore\" AND t3.Age < 18\nRETURN count(*)",
        "question": "How many members of club \"Bootup Baltimore\" are younger than 18?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (t1:`club_1.Club`)-[t2:`club_1.Member_of_club`]-(t3:`club_1.Student`)\nWHERE t1.ClubName = \"Bootup Baltimore\" AND t3.Age < 18\nRETURN count(*)",
        "question": "Count the number of members in club \"Bootup Baltimore\" whose age is below 18.",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (t1:`club_1.Club`)-[t2:`club_1.Member_of_club`]-(t3:`club_1.Student`)\nWHERE t3.Advisor = 1121\nRETURN DISTINCT t1.ClubName",
        "question": "List the clubs that have at least a member with advisor \"1121\".",
        "answers": [
            [
                "Bootup Baltimore"
            ]
        ]
    },
    {
        "db_id": "club_1",
        "query": "MATCH (t1:`club_1.Club`)-[t2:`club_1.Member_of_club`]-(t3:`club_1.Student`)\nWHERE t3.Advisor = 1121\nRETURN DISTINCT t1.ClubName",
        "question": "Which clubs have one or more members whose advisor is \"1121\"?",
        "answers": [
            [
                "Bootup Baltimore"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (T1:`tracking_grants_for_research.Organisations`)-[]-(T2:`tracking_grants_for_research.Research_Staff`)\nWITH T1, count(T1.organisation_id) AS cnt\nRETURN T1.organisation_type,T1.organisation_id\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the organisation type and id of the organisation which has the most number of research staff?",
        "answers": [
            [
                "SPON",
                5
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (T1:`tracking_grants_for_research.Organisations`)-[]-(T2:`tracking_grants_for_research.Research_Staff`)\nWITH T1, count(T1.organisation_id) AS cnt\nRETURN T1.organisation_type,T1.organisation_id\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the type and id of the organization that has the most research staff?",
        "answers": [
            [
                "SPON",
                5
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (T1:`tracking_grants_for_research.Documents`)-[]-(T2:`tracking_grants_for_research.Grants`)-[]-(T3:`tracking_grants_for_research.Organisations`)-[]-(T4:`tracking_grants_for_research.Organisation_Types`)\nWHERE T2.grant_amount > 5000 AND T4.organisation_type_description = 'Research'\nRETURN T1.sent_date",
        "question": "Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described",
        "answers": [
            [
                "1993-02-19 16:31:12"
            ],
            [
                "2001-06-18 06:35:49"
            ],
            [
                "2000-06-06 01:03:46"
            ],
            [
                "1979-07-04 08:54:23"
            ],
            [
                "1986-11-30 07:56:35"
            ],
            [
                "2002-07-26 15:50:28"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (T1:`tracking_grants_for_research.Documents`)-[]-(T2:`tracking_grants_for_research.Grants`)-[]-(T3:`tracking_grants_for_research.Organisations`)-[]-(T4:`tracking_grants_for_research.Organisation_Types`)\nWHERE T2.grant_amount > 5000 AND T4.organisation_type_description = 'Research'\nRETURN T1.sent_date",
        "question": "What are the send dates for all documents that have a grant amount of more than 5000 and are involved in research?",
        "answers": [
            [
                "1993-02-19 16:31:12"
            ],
            [
                "2001-06-18 06:35:49"
            ],
            [
                "2000-06-06 01:03:46"
            ],
            [
                "1979-07-04 08:54:23"
            ],
            [
                "1986-11-30 07:56:35"
            ],
            [
                "2002-07-26 15:50:28"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (project_staff:`tracking_grants_for_research.Project_Staff`)\nRETURN count(DISTINCT project_staff.role_code)",
        "question": "How many kinds of roles are there for the staff?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (project_staff:`tracking_grants_for_research.Project_Staff`)\nRETURN count(DISTINCT project_staff.role_code)",
        "question": "How many different roles are there on the project staff?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (T1:`tracking_grants_for_research.Projects`)-[T2:`tracking_grants_for_research.Project_Outcomes`]-(T3:`tracking_grants_for_research.Research_Outcomes`)\nWHERE T3.outcome_description =~'.*[P|p]ublished.*'\nRETURN T1.project_details",
        "question": "List the project details of the projects with the research outcome described with the substring 'Published'.",
        "answers": [
            [
                "non"
            ],
            [
                "impedit"
            ],
            [
                "deleniti"
            ],
            [
                "deserunt"
            ],
            [
                "sed"
            ],
            [
                "doloremque"
            ],
            [
                "beatae"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (T1:`tracking_grants_for_research.Projects`)-[T2:`tracking_grants_for_research.Project_Outcomes`]-(T3:`tracking_grants_for_research.Research_Outcomes`)\nWHERE T3.outcome_description =~'.*[P|p]ublished.*'\nRETURN T1.project_details",
        "question": "What are the details for the project whose research has been published?",
        "answers": [
            [
                "non"
            ],
            [
                "impedit"
            ],
            [
                "deleniti"
            ],
            [
                "deserunt"
            ],
            [
                "sed"
            ],
            [
                "doloremque"
            ],
            [
                "beatae"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (staff_roles:`tracking_grants_for_research.Staff_Roles`)\nWHERE staff_roles.role_code = 'researcher'\nRETURN staff_roles.role_description",
        "question": "What is the complete description of the researcher role.",
        "answers": [
            [
                "Project Researcher"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (staff_roles:`tracking_grants_for_research.Staff_Roles`)\nWHERE staff_roles.role_code = 'researcher'\nRETURN staff_roles.role_description",
        "question": "What is the complete description of the job of a researcher?",
        "answers": [
            [
                "Project Researcher"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (project_staff:`tracking_grants_for_research.Project_Staff`)\nRETURN project_staff.date_from\nORDER BY project_staff.date_from ASC\nLIMIT 1",
        "question": "When did the first staff for the projects started working?",
        "answers": [
            [
                "1970-01-02 15:35:05"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (project_staff:`tracking_grants_for_research.Project_Staff`)\nRETURN project_staff.date_from\nORDER BY project_staff.date_from ASC\nLIMIT 1",
        "question": "When did the first staff member start working?",
        "answers": [
            [
                "1970-01-02 15:35:05"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (T1:`tracking_grants_for_research.Organisations`)-[]-(T2:`tracking_grants_for_research.Research_Staff`)\nWITH T1, count(T1.organisation_id) AS cnt\nRETURN T1.organisation_id,T1.organisation_type,T1.organisation_details\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Which organisation hired the most number of research staff? List the organisation id, type and detail.",
        "answers": [
            [
                5,
                "SPON",
                "tenetur"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (T1:`tracking_grants_for_research.Organisations`)-[]-(T2:`tracking_grants_for_research.Research_Staff`)\nWITH T1, count(T1.organisation_id) AS cnt\nRETURN T1.organisation_id,T1.organisation_type,T1.organisation_details\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What are the ids, types, and details of the organization with the most research staff?",
        "answers": [
            [
                5,
                "SPON",
                "tenetur"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (document_types:`tracking_grants_for_research.Document_Types`)\nWHERE document_types.document_description =~'.*[I|i]nitial.*'\nRETURN document_types.document_type_code",
        "question": "Which document type is described with the prefix 'Initial'?",
        "answers": [
            [
                "APP"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (document_types:`tracking_grants_for_research.Document_Types`)\nWHERE document_types.document_description =~'.*[I|i]nitial.*'\nRETURN document_types.document_type_code",
        "question": "What is the type of the document whose description starts with the word 'Initial'?",
        "answers": [
            [
                "APP"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (T1:`tracking_grants_for_research.Organisation_Types`)-[]-(T2:`tracking_grants_for_research.Organisations`)\nWHERE T2.organisation_details = 'quo'\nRETURN T1.organisation_type_description",
        "question": "Find the organisation type description of the organisation detailed as 'quo'.",
        "answers": [
            [
                "Research"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (T1:`tracking_grants_for_research.Organisation_Types`)-[]-(T2:`tracking_grants_for_research.Organisations`)\nWHERE T2.organisation_details = 'quo'\nRETURN T1.organisation_type_description",
        "question": "What is the type description of the organization whose detail is listed as 'quo'?",
        "answers": [
            [
                "Research"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (project_staff:`tracking_grants_for_research.Project_Staff`)\nRETURN project_staff.date_to\nORDER BY project_staff.date_to DESC\nLIMIT 1",
        "question": "What is the last date of the staff leaving the projects?",
        "answers": [
            [
                "2016-03-15 00:33:18"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (project_staff:`tracking_grants_for_research.Project_Staff`)\nRETURN project_staff.date_to\nORDER BY project_staff.date_to DESC\nLIMIT 1",
        "question": "What is the last date that a staff member left a project?",
        "answers": [
            [
                "2016-03-15 00:33:18"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (T1:`tracking_grants_for_research.Research_Outcomes`)-[T2:`tracking_grants_for_research.Project_Outcomes`]-(T3:`tracking_grants_for_research.Projects`)\nWHERE T3.project_details = 'sint'\nRETURN T1.outcome_description",
        "question": "What are the result description of the project whose detail is 'sint'?",
        "answers": [
            [
                "Research Patent"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (T1:`tracking_grants_for_research.Research_Outcomes`)-[T2:`tracking_grants_for_research.Project_Outcomes`]-(T3:`tracking_grants_for_research.Projects`)\nWHERE T3.project_details = 'sint'\nRETURN T1.outcome_description",
        "question": "What is the description for the results whose project detail is 'sint'?",
        "answers": [
            [
                "Research Patent"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (research_staff:`tracking_grants_for_research.Research_Staff`)\nRETURN research_staff.staff_details\nORDER BY research_staff.staff_details ASC",
        "question": "List the research staff details, and order in ascending order.",
        "answers": [
            [
                "ab"
            ],
            [
                "accusamus"
            ],
            [
                "animi"
            ],
            [
                "aspernatur"
            ],
            [
                "consequatur"
            ],
            [
                "consequatur"
            ],
            [
                "dicta"
            ],
            [
                "dolor"
            ],
            [
                "doloribus"
            ],
            [
                "est"
            ],
            [
                "iure"
            ],
            [
                "nulla"
            ],
            [
                "quo"
            ],
            [
                "sint"
            ],
            [
                "voluptatibus"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (research_staff:`tracking_grants_for_research.Research_Staff`)\nRETURN research_staff.staff_details\nORDER BY research_staff.staff_details ASC",
        "question": "What details are there on the research staff? List the result in ascending alphabetical order.",
        "answers": [
            [
                "ab"
            ],
            [
                "accusamus"
            ],
            [
                "animi"
            ],
            [
                "aspernatur"
            ],
            [
                "consequatur"
            ],
            [
                "consequatur"
            ],
            [
                "dicta"
            ],
            [
                "dolor"
            ],
            [
                "doloribus"
            ],
            [
                "est"
            ],
            [
                "iure"
            ],
            [
                "nulla"
            ],
            [
                "quo"
            ],
            [
                "sint"
            ],
            [
                "voluptatibus"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (tasks:`tracking_grants_for_research.Tasks`)\nRETURN count(*)",
        "question": "How many tasks are there in total?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (tasks:`tracking_grants_for_research.Tasks`)\nRETURN count(*)",
        "question": "How many tasks are there?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (T1:`tracking_grants_for_research.Projects`)-[]-(T2:`tracking_grants_for_research.Tasks`)\nRETURN count(*),T1.project_details",
        "question": "How many tasks does each project have? List the task count and the project detail.",
        "answers": [
            [
                1,
                "porro"
            ],
            [
                1,
                "et"
            ],
            [
                1,
                "sint"
            ],
            [
                1,
                "doloremque"
            ],
            [
                1,
                "vel"
            ],
            [
                1,
                "deserunt"
            ],
            [
                1,
                "deleniti"
            ],
            [
                1,
                "ad"
            ],
            [
                1,
                "sed"
            ],
            [
                1,
                "consectetur"
            ],
            [
                1,
                "impedit"
            ],
            [
                1,
                "omnis"
            ],
            [
                1,
                "non"
            ],
            [
                1,
                "beatae"
            ],
            [
                1,
                "dolorem"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (T1:`tracking_grants_for_research.Projects`)-[]-(T2:`tracking_grants_for_research.Tasks`)\nRETURN count(*),T1.project_details",
        "question": "For each project id, how many tasks are there?",
        "answers": [
            [
                1,
                "porro"
            ],
            [
                1,
                "et"
            ],
            [
                1,
                "sint"
            ],
            [
                1,
                "doloremque"
            ],
            [
                1,
                "vel"
            ],
            [
                1,
                "deserunt"
            ],
            [
                1,
                "deleniti"
            ],
            [
                1,
                "ad"
            ],
            [
                1,
                "sed"
            ],
            [
                1,
                "consectetur"
            ],
            [
                1,
                "impedit"
            ],
            [
                1,
                "omnis"
            ],
            [
                1,
                "non"
            ],
            [
                1,
                "beatae"
            ],
            [
                1,
                "dolorem"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (T1:`tracking_grants_for_research.Research_Outcomes`)-[T2:`tracking_grants_for_research.Project_Outcomes`]-()\nRETURN T1.outcome_description",
        "question": "What are the descriptions of all the project outcomes?",
        "answers": [
            [
                "Published Research Paper"
            ],
            [
                "Published Research Paper"
            ],
            [
                "Published Research Paper"
            ],
            [
                "Published Research Paper"
            ],
            [
                "Published Research Paper"
            ],
            [
                "Published Research Paper"
            ],
            [
                "Published Research Paper"
            ],
            [
                "Research Patent"
            ],
            [
                "Research Patent"
            ],
            [
                "Research Patent"
            ],
            [
                "Research Patent"
            ],
            [
                "Research Patent"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (T1:`tracking_grants_for_research.Research_Outcomes`)-[T2:`tracking_grants_for_research.Project_Outcomes`]-()\nRETURN T1.outcome_description",
        "question": "List the description of the outcomes for all projects.",
        "answers": [
            [
                "Published Research Paper"
            ],
            [
                "Published Research Paper"
            ],
            [
                "Published Research Paper"
            ],
            [
                "Published Research Paper"
            ],
            [
                "Published Research Paper"
            ],
            [
                "Published Research Paper"
            ],
            [
                "Published Research Paper"
            ],
            [
                "Research Patent"
            ],
            [
                "Research Patent"
            ],
            [
                "Research Patent"
            ],
            [
                "Research Patent"
            ],
            [
                "Research Patent"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (project_staff:`tracking_grants_for_research.Project_Staff`)\nRETURN project_staff.role_code\nORDER BY project_staff.role_code DESC\nLIMIT 1",
        "question": "Which role is most common for the staff?",
        "answers": [
            [
                "researcher"
            ]
        ]
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "MATCH (project_staff:`tracking_grants_for_research.Project_Staff`)\nRETURN project_staff.role_code\nORDER BY project_staff.role_code DESC\nLIMIT 1",
        "question": "What is the most common role for the staff?",
        "answers": [
            [
                "researcher"
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.gender = 'female'\nRETURN count(*)",
        "question": "How many females does this network has?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.gender = 'female'\nRETURN count(*)",
        "question": "How many females are in the network?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nRETURN avg(person.age)",
        "question": "What is the average age for all person?",
        "answers": [
            [
                32.75
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nRETURN avg(person.age)",
        "question": "What is the average age for all people in the table?",
        "answers": [
            [
                32.75
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nRETURN count(DISTINCT person.city)",
        "question": "How many different cities are they from?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nRETURN count(DISTINCT person.city)",
        "question": "How many different cities do people originate from?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nRETURN count(DISTINCT person.job)",
        "question": "How many type of jobs do they have?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nRETURN count(DISTINCT person.job)",
        "question": "How many different jobs are listed?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nWITH max(person.age) AS age\nMATCH (person:`network_2.Person`)\nWHERE  person.age =  age \nRETURN person.name",
        "question": "Who is the oldest person?",
        "answers": [
            [
                "Zach"
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nWITH max(person.age) AS age\nMATCH (person:`network_2.Person`)\nWHERE  person.age =  age \nRETURN person.name",
        "question": "What is the name of the person who is the oldest?",
        "answers": [
            [
                "Zach"
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.job = 'doctor' AND person.name = 'Zach'\nRETURN person.age",
        "question": "How old is the doctor named Zach?",
        "answers": [
            [
                45
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.job = 'doctor' AND person.name = 'Zach'\nRETURN person.age",
        "question": "What is the age of the doctor named Zach?",
        "answers": [
            [
                45
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.age < 30\nRETURN person.name",
        "question": "Who is the person whose age is below 30?",
        "answers": [
            [
                "Alice"
            ],
            [
                "Dan"
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.age < 30\nRETURN person.name",
        "question": "What is the name of the person whose age is below 30?",
        "answers": [
            [
                "Alice"
            ],
            [
                "Dan"
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.age > 30 AND person.job = 'engineer'\nRETURN count(*)",
        "question": "How many people whose age is greater 30 and job is engineer?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.age > 30 AND person.job = 'engineer'\nRETURN count(*)",
        "question": "HOw many engineers are older than 30?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nRETURN avg(person.age),person.gender",
        "question": "What is the average age for each gender?",
        "answers": [
            [
                25.5,
                "female"
            ],
            [
                40.0,
                "male"
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nRETURN avg(person.age),person.gender",
        "question": "How old is each gender, on average?",
        "answers": [
            [
                25.5,
                "female"
            ],
            [
                40.0,
                "male"
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nRETURN avg(person.age),person.job",
        "question": "What is average age for different job title?",
        "answers": [
            [
                25.5,
                "student"
            ],
            [
                35.0,
                "engineer"
            ],
            [
                45.0,
                "doctor"
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nRETURN avg(person.age),person.job",
        "question": "How old is the average person for each job?",
        "answers": [
            [
                25.5,
                "student"
            ],
            [
                35.0,
                "engineer"
            ],
            [
                45.0,
                "doctor"
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.gender = 'male'\nRETURN avg(person.age),person.job",
        "question": "What is average age of male for different job title?",
        "answers": [
            [
                35.0,
                "engineer"
            ],
            [
                45.0,
                "doctor"
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.gender = 'male'\nRETURN avg(person.age),person.job",
        "question": "What is the average age for a male in each job?",
        "answers": [
            [
                35.0,
                "engineer"
            ],
            [
                45.0,
                "doctor"
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nRETURN min(person.age),person.job",
        "question": "What is minimum age for different job title?",
        "answers": [
            [
                25,
                "student"
            ],
            [
                35,
                "engineer"
            ],
            [
                45,
                "doctor"
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nRETURN min(person.age),person.job",
        "question": "How old is the youngest person for each job?",
        "answers": [
            [
                25,
                "student"
            ],
            [
                35,
                "engineer"
            ],
            [
                45,
                "doctor"
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.age < 40\nRETURN count(*),person.gender",
        "question": "Find the number of people who is under 40 for each gender.",
        "answers": [
            [
                2,
                "female"
            ],
            [
                1,
                "male"
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.age < 40\nRETURN count(*),person.gender",
        "question": "How many people are under 40 for each gender?",
        "answers": [
            [
                2,
                "female"
            ],
            [
                1,
                "male"
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nRETURN person.name,person.job\nORDER BY person.name",
        "question": "list the name, job title of all people ordered by their names.",
        "answers": [
            [
                "Alice",
                "student"
            ],
            [
                "Bob",
                "engineer"
            ],
            [
                "Dan",
                "student"
            ],
            [
                "Zach",
                "doctor"
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nRETURN person.name,person.job\nORDER BY person.name",
        "question": "What are the names and job titles of every person ordered alphabetically by name?",
        "answers": [
            [
                "Alice",
                "student"
            ],
            [
                "Bob",
                "engineer"
            ],
            [
                "Dan",
                "student"
            ],
            [
                "Zach",
                "doctor"
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nRETURN person.name\nORDER BY person.age DESC",
        "question": "Find the names of all person sorted in the descending order using age.",
        "answers": [
            [
                "Zach"
            ],
            [
                "Bob"
            ],
            [
                "Dan"
            ],
            [
                "Alice"
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nRETURN person.name\nORDER BY person.age DESC",
        "question": "What are the names of everybody sorted by age in descending order?",
        "answers": [
            [
                "Zach"
            ],
            [
                "Bob"
            ],
            [
                "Dan"
            ],
            [
                "Alice"
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.gender = 'male'\nRETURN person.name\nORDER BY person.age",
        "question": "Find the name and age of all males in order of their age.",
        "answers": [
            [
                "Bob"
            ],
            [
                "Zach"
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.gender = 'male'\nRETURN person.name\nORDER BY person.age",
        "question": "What is the name and age of every male? Order the results by age.",
        "answers": [
            [
                "Bob"
            ],
            [
                "Zach"
            ]
        ]
    },
    {
        "db_id": "network_2",
        "query": "MATCH (T1:`network_2.Person`)-[]-(T2:`network_2.PersonFriend`)\nWHERE T2.friend = 'Zach' AND T1.gender = 'female'\nRETURN T1.name",
        "question": "Find the names of females who are friends with Zach",
        "answers": []
    },
    {
        "db_id": "network_2",
        "query": "MATCH (T1:`network_2.Person`)-[]-(T2:`network_2.PersonFriend`)\nWHERE T2.friend = 'Zach' AND T1.gender = 'female'\nRETURN T1.name",
        "question": "What are the names of all females who are friends with Zach?",
        "answers": []
    },
    {
        "db_id": "network_2",
        "query": "MATCH (T1:`network_2.Person`)-[]-(T2:`network_2.PersonFriend`)\nWHERE T2.name = 'Alice' AND T1.gender = 'female'\nRETURN T2.friend",
        "question": "Find the female friends of Alice.",
        "answers": []
    },
    {
        "db_id": "network_2",
        "query": "MATCH (T1:`network_2.Person`)-[]-(T2:`network_2.PersonFriend`)\nWHERE T2.name = 'Alice' AND T1.gender = 'female'\nRETURN T2.friend",
        "question": "What are all the friends of Alice who are female?",
        "answers": []
    },
    {
        "db_id": "network_2",
        "query": "MATCH (T1:`network_2.Person`)-[]-(T2:`network_2.PersonFriend`)\nWHERE T2.name = 'Alice' AND T1.gender = 'male' AND T1.job = 'doctor'\nRETURN T2.friend",
        "question": "Find the male friend of Alice whose job is a doctor?",
        "answers": []
    },
    {
        "db_id": "network_2",
        "query": "MATCH (T1:`network_2.Person`)-[]-(T2:`network_2.PersonFriend`)\nWHERE T2.name = 'Alice' AND T1.gender = 'male' AND T1.job = 'doctor'\nRETURN T2.friend",
        "question": "Who are the friends of Alice that are doctors?",
        "answers": []
    },
    {
        "db_id": "decoration_competition",
        "query": "MATCH (member:`decoration_competition.member`)\nRETURN count(*)",
        "question": "How many members are there?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "decoration_competition",
        "query": "MATCH (member:`decoration_competition.member`)\nRETURN member.Name\nORDER BY member.Name ASC",
        "question": "List the names of members in ascending alphabetical order.",
        "answers": [
            [
                "Arnold Palmer"
            ],
            [
                "Billy Casper"
            ],
            [
                "Bobby Nichols"
            ],
            [
                "Homero Blancas"
            ],
            [
                "J. C. Snead"
            ],
            [
                "Jack Nicklaus"
            ],
            [
                "Lee Trevino"
            ],
            [
                "Pat Fitzsimons"
            ],
            [
                "Tom Watson"
            ],
            [
                "Tom Weiskopf"
            ]
        ]
    },
    {
        "db_id": "decoration_competition",
        "query": "MATCH (member:`decoration_competition.member`)\nRETURN member.Name,member.Country",
        "question": "What are the names and countries of members?",
        "answers": [
            [
                "Jack Nicklaus",
                "United States"
            ],
            [
                "Billy Casper",
                "United States"
            ],
            [
                "Arnold Palmer",
                "Canada"
            ],
            [
                "Tom Watson",
                "United States"
            ],
            [
                "Homero Blancas",
                "United States"
            ],
            [
                "Pat Fitzsimons",
                "Canada"
            ],
            [
                "Bobby Nichols",
                "Canada"
            ],
            [
                "J. C. Snead",
                "Canada"
            ],
            [
                "Lee Trevino",
                "United States"
            ],
            [
                "Tom Weiskopf",
                "United States"
            ]
        ]
    },
    {
        "db_id": "decoration_competition",
        "query": "MATCH (member:`decoration_competition.member`)\nWHERE member.Country = 'United States' OR member.Country = 'Canada'\nRETURN member.Name",
        "question": "Show the names of members whose country is \"United States\" or \"Canada\".",
        "answers": [
            [
                "Jack Nicklaus"
            ],
            [
                "Billy Casper"
            ],
            [
                "Arnold Palmer"
            ],
            [
                "Tom Watson"
            ],
            [
                "Homero Blancas"
            ],
            [
                "Pat Fitzsimons"
            ],
            [
                "Bobby Nichols"
            ],
            [
                "J. C. Snead"
            ],
            [
                "Lee Trevino"
            ],
            [
                "Tom Weiskopf"
            ]
        ]
    },
    {
        "db_id": "decoration_competition",
        "query": "MATCH (member:`decoration_competition.member`)\nRETURN member.Country,count(*)",
        "question": "Show the different countries and the number of members from each.",
        "answers": [
            [
                "United States",
                6
            ],
            [
                "Canada",
                4
            ]
        ]
    },
    {
        "db_id": "decoration_competition",
        "query": "MATCH (member:`decoration_competition.member`)\nRETURN member.Country\nORDER BY member.Country DESC\nLIMIT 1",
        "question": "Show the most common country across members.",
        "answers": [
            [
                "United States"
            ]
        ]
    },
    {
        "db_id": "decoration_competition",
        "query": "MATCH (member:`decoration_competition.member`)\nWITH member.Country AS Country, count(*) AS count\nWHERE count  > 2\nRETURN Country",
        "question": "Which countries have more than two members?",
        "answers": [
            [
                "United States"
            ],
            [
                "Canada"
            ]
        ]
    },
    {
        "db_id": "decoration_competition",
        "query": "MATCH (college:`decoration_competition.college`)\nRETURN college.Leader_Name,college.College_Location",
        "question": "Show the leader names and locations of colleges.",
        "answers": [
            [
                "Ousame Tounkara",
                "Ottawa"
            ],
            [
                "Ryan Thelwell",
                "Minnesota"
            ],
            [
                "Andre Arlain",
                "St. Francis Xavier"
            ],
            [
                "Samir Chahine",
                "McGill"
            ],
            [
                "Roger Dunbrack",
                "Western Ontario"
            ]
        ]
    },
    {
        "db_id": "decoration_competition",
        "query": "MATCH (T1:`decoration_competition.college`)-[]-(T2:`decoration_competition.member`)\nRETURN T2.Name,T1.Name",
        "question": "Show the names of members and names of colleges they go to.",
        "answers": [
            [
                "Billy Casper",
                "Saskatchewan School"
            ],
            [
                "Jack Nicklaus",
                "Saskatchewan School"
            ],
            [
                "Homero Blancas",
                "B.C. School"
            ],
            [
                "Lee Trevino",
                "Calgary School"
            ],
            [
                "Tom Weiskopf",
                "Calgary School"
            ],
            [
                "Arnold Palmer",
                "Edmonton School"
            ],
            [
                "J. C. Snead",
                "Edmonton School"
            ],
            [
                "Tom Watson",
                "Edmonton School"
            ],
            [
                "Bobby Nichols",
                "Toronto School"
            ],
            [
                "Pat Fitzsimons",
                "Toronto School"
            ]
        ]
    },
    {
        "db_id": "decoration_competition",
        "query": "MATCH (T1:`decoration_competition.college`)-[]-(T2:`decoration_competition.member`)\nRETURN T2.Name,T1.College_Location\nORDER BY T2.Name ASC",
        "question": "Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.",
        "answers": [
            [
                "Arnold Palmer",
                "McGill"
            ],
            [
                "Billy Casper",
                "Ottawa"
            ],
            [
                "Bobby Nichols",
                "Western Ontario"
            ],
            [
                "Homero Blancas",
                "Minnesota"
            ],
            [
                "J. C. Snead",
                "McGill"
            ],
            [
                "Jack Nicklaus",
                "Ottawa"
            ],
            [
                "Lee Trevino",
                "St. Francis Xavier"
            ],
            [
                "Pat Fitzsimons",
                "Western Ontario"
            ],
            [
                "Tom Watson",
                "McGill"
            ],
            [
                "Tom Weiskopf",
                "St. Francis Xavier"
            ]
        ]
    },
    {
        "db_id": "decoration_competition",
        "query": "MATCH (T1:`decoration_competition.college`)-[]-(T2:`decoration_competition.member`)\nWHERE T2.Country = 'Canada'\nRETURN DISTINCT T1.Leader_Name",
        "question": "Show the distinct leader names of colleges associated with members from country \"Canada\".",
        "answers": [
            [
                "Samir Chahine"
            ],
            [
                "Roger Dunbrack"
            ]
        ]
    },
    {
        "db_id": "decoration_competition",
        "query": "MATCH (T1:`decoration_competition.member`)-[]-(T2:`decoration_competition.round`)\nRETURN T1.Name,T2.Decoration_Theme",
        "question": "Show the names of members and the decoration themes they have.",
        "answers": [
            [
                "Jack Nicklaus",
                "Walk on the Moon"
            ],
            [
                "Billy Casper",
                "Soft Dream"
            ],
            [
                "Tom Weiskopf",
                "Dark Nights"
            ],
            [
                "Tom Watson",
                "Sweetie"
            ],
            [
                "Pat Fitzsimons",
                "Summer"
            ],
            [
                "Lee Trevino",
                "Happiness"
            ]
        ]
    },
    {
        "db_id": "decoration_competition",
        "query": "MATCH (T1:`decoration_competition.member`)-[]-(T2:`decoration_competition.round`)\nWHERE T2.Rank_in_Round > 3\nRETURN T1.Name",
        "question": "Show the names of members that have a rank in round higher than 3.",
        "answers": [
            [
                "Tom Weiskopf"
            ]
        ]
    },
    {
        "db_id": "decoration_competition",
        "query": "MATCH (T1:`decoration_competition.member`)-[]-(T2:`decoration_competition.round`)\nRETURN T1.Name\nORDER BY T2.Rank_in_Round ASC",
        "question": "Show the names of members in ascending order of their rank in rounds.",
        "answers": [
            [
                "Jack Nicklaus"
            ],
            [
                "Lee Trevino"
            ],
            [
                "Billy Casper"
            ],
            [
                "Pat Fitzsimons"
            ],
            [
                "Tom Watson"
            ],
            [
                "Tom Weiskopf"
            ]
        ]
    },
    {
        "db_id": "decoration_competition",
        "query": "MATCH (member:`decoration_competition.member`)\nWHERE NOT (member)-[]-(:`decoration_competition.round`)    \nRETURN member.Name",
        "question": "List the names of members who did not participate in any round.",
        "answers": [
            [
                "Arnold Palmer"
            ],
            [
                "Homero Blancas"
            ],
            [
                "Bobby Nichols"
            ],
            [
                "J. C. Snead"
            ]
        ]
    },
    {
        "db_id": "document_management",
        "query": "MATCH (documents:`document_management.Documents`)\nRETURN documents.document_name,documents.access_count\nORDER BY documents.document_name",
        "question": "Find the name and access counts of all documents, in alphabetic order of the document name.",
        "answers": [
            [
                "David CV",
                6345
            ],
            [
                "Fall Sails",
                7509
            ],
            [
                "How to cook pasta",
                2045
            ],
            [
                "Humanity: a fact",
                3479
            ],
            [
                "Joe CV",
                2294
            ],
            [
                "John CV",
                5924
            ],
            [
                "Learning Database",
                3769
            ],
            [
                "Learning English",
                1864
            ],
            [
                "Learning Japanese",
                2910
            ],
            [
                "Life about Claude Monet",
                1219
            ],
            [
                "Relationships between History and Arts",
                9948
            ],
            [
                "Research about Art history",
                8208
            ],
            [
                "Spring Sails",
                3289
            ],
            [
                "Summer Sails",
                6661
            ],
            [
                "Winter Sails",
                8623
            ]
        ]
    },
    {
        "db_id": "document_management",
        "query": "MATCH (documents:`document_management.Documents`)\nRETURN documents.document_name,documents.access_count\nORDER BY documents.document_name",
        "question": "What are the names of all the documents, as well as the access counts of each, ordered alphabetically?",
        "answers": [
            [
                "David CV",
                6345
            ],
            [
                "Fall Sails",
                7509
            ],
            [
                "How to cook pasta",
                2045
            ],
            [
                "Humanity: a fact",
                3479
            ],
            [
                "Joe CV",
                2294
            ],
            [
                "John CV",
                5924
            ],
            [
                "Learning Database",
                3769
            ],
            [
                "Learning English",
                1864
            ],
            [
                "Learning Japanese",
                2910
            ],
            [
                "Life about Claude Monet",
                1219
            ],
            [
                "Relationships between History and Arts",
                9948
            ],
            [
                "Research about Art history",
                8208
            ],
            [
                "Spring Sails",
                3289
            ],
            [
                "Summer Sails",
                6661
            ],
            [
                "Winter Sails",
                8623
            ]
        ]
    },
    {
        "db_id": "document_management",
        "query": "MATCH (documents:`document_management.Documents`)\nRETURN documents.document_name,documents.access_count\nORDER BY documents.access_count DESC\nLIMIT 1",
        "question": "Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?",
        "answers": [
            [
                "Relationships between History and Arts",
                9948
            ]
        ]
    },
    {
        "db_id": "document_management",
        "query": "MATCH (documents:`document_management.Documents`)\nRETURN documents.document_name,documents.access_count\nORDER BY documents.access_count DESC\nLIMIT 1",
        "question": "What is the name of the document which has been accessed the most times, as well as the number of times it has been accessed?",
        "answers": [
            [
                "Relationships between History and Arts",
                9948
            ]
        ]
    },
    {
        "db_id": "document_management",
        "query": "MATCH (documents:`document_management.Documents`)\nWITH count(*) AS count, documents.document_type_code AS document_type_code\nWHERE count  > 4\nRETURN document_type_code",
        "question": "Find the types of documents with more than 4 documents.",
        "answers": [
            [
                "Book"
            ]
        ]
    },
    {
        "db_id": "document_management",
        "query": "MATCH (documents:`document_management.Documents`)\nWITH count(*) AS count, documents.document_type_code AS document_type_code\nWHERE count  > 4\nRETURN document_type_code",
        "question": "What are the codes of types of documents of which there are for or more?",
        "answers": [
            [
                "Book"
            ]
        ]
    },
    {
        "db_id": "document_management",
        "query": "MATCH (documents:`document_management.Documents`)\nRETURN avg(documents.access_count)",
        "question": "What is the average access count of documents?",
        "answers": [
            [
                4939.133333333333
            ]
        ]
    },
    {
        "db_id": "document_management",
        "query": "MATCH (documents:`document_management.Documents`)\nRETURN avg(documents.access_count)",
        "question": "Find the average access count across all documents?",
        "answers": [
            [
                4939.133333333333
            ]
        ]
    },
    {
        "db_id": "document_management",
        "query": "MATCH (t1:`document_management.Documents`)-[]-(t2:`document_management.Document_Structures`)\nWITH count(t1.document_structure_code) AS cnt, t2\nRETURN t2.document_structure_description\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the structure of the document with the least number of accesses?",
        "answers": [
            [
                "Author section"
            ]
        ]
    },
    {
        "db_id": "document_management",
        "query": "MATCH (t1:`document_management.Documents`)-[]-(t2:`document_management.Document_Structures`)\nWITH count(t1.document_structure_code) AS cnt, t2\nRETURN t2.document_structure_description\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Return the structure description of the document that has been accessed the fewest number of times.",
        "answers": [
            [
                "Author section"
            ]
        ]
    },
    {
        "db_id": "document_management",
        "query": "MATCH (documents:`document_management.Documents`)\nWHERE documents.document_name = \"David CV\"\nRETURN documents.document_type_code",
        "question": "What is the type of the document named \"David CV\"?",
        "answers": [
            [
                "CV"
            ]
        ]
    },
    {
        "db_id": "document_management",
        "query": "MATCH (documents:`document_management.Documents`)\nWHERE documents.document_name = \"David CV\"\nRETURN documents.document_type_code",
        "question": "Return the type code of the document named \"David CV\".",
        "answers": [
            [
                "CV"
            ]
        ]
    },
    {
        "db_id": "document_management",
        "query": "MATCH (t1:`document_management.Documents`)-[]-(t2:`document_management.Document_Sections`)\nWHERE t1.document_name = \"David CV\"\nRETURN t2.section_title",
        "question": "What are all the section titles of the document named \"David CV\"?",
        "answers": [
            [
                "after"
            ]
        ]
    },
    {
        "db_id": "document_management",
        "query": "MATCH (t1:`document_management.Documents`)-[]-(t2:`document_management.Document_Sections`)\nWHERE t1.document_name = \"David CV\"\nRETURN t2.section_title",
        "question": "Give the section titles of the document with the name \"David CV\".",
        "answers": [
            [
                "after"
            ]
        ]
    },
    {
        "db_id": "document_management",
        "query": "MATCH (t1:`document_management.Documents`)-[]-(t2:`document_management.Document_Sections`)\nWITH t1, count(t1.document_code) AS cnt\nRETURN t1.document_name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the name of the document with the most number of sections?",
        "answers": [
            [
                "Fall Sails"
            ]
        ]
    },
    {
        "db_id": "document_management",
        "query": "MATCH (t1:`document_management.Documents`)-[]-(t2:`document_management.Document_Sections`)\nWITH t1, count(t1.document_code) AS cnt\nRETURN t1.document_name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Return the name of the document that has the most sections.",
        "answers": [
            [
                "Fall Sails"
            ]
        ]
    },
    {
        "db_id": "document_management",
        "query": "MATCH (images:`document_management.Images`)\nRETURN images.image_name,images.image_url\nORDER BY images.image_name",
        "question": "List all the image name and URLs in the order of their names.",
        "answers": [
            [
                "chapter1",
                "http://gaylord.info/1.jpg"
            ],
            [
                "chapter2",
                "http://www.hellerreinger.com/1.jpg"
            ],
            [
                "chapter3",
                "http://faycummerata.net/1.jpg"
            ],
            [
                "chapter4",
                "http://haleychamplin.net/1.jpg"
            ],
            [
                "chapter5",
                "http://www.fritsch.net/1.jpg"
            ],
            [
                "data1",
                "http://sauer.com/1.jpg"
            ],
            [
                "data2",
                "http://www.heller.com/1.jpg"
            ],
            [
                "data3",
                "http://www.hermann.com/1.jpg"
            ],
            [
                "data4",
                "http://rowelakin.com/1.jpg"
            ],
            [
                "data5",
                "http://andersonluettgen.net/1.jpg"
            ],
            [
                "data6",
                "http://www.beahan.biz/1.jpg"
            ],
            [
                "top1",
                "http://www.rempelnader.com/1.jpg"
            ],
            [
                "top2",
                "http://connellykertzmann.org/1.jpg"
            ],
            [
                "top3",
                "http://www.bernierconnelly.com/1.jpg"
            ],
            [
                "top4",
                "http://abernathyboehm.com/1.jpg"
            ]
        ]
    },
    {
        "db_id": "document_management",
        "query": "MATCH (images:`document_management.Images`)\nRETURN images.image_name,images.image_url\nORDER BY images.image_name",
        "question": "What are the names and urls of images, sorted alphabetically?",
        "answers": [
            [
                "chapter1",
                "http://gaylord.info/1.jpg"
            ],
            [
                "chapter2",
                "http://www.hellerreinger.com/1.jpg"
            ],
            [
                "chapter3",
                "http://faycummerata.net/1.jpg"
            ],
            [
                "chapter4",
                "http://haleychamplin.net/1.jpg"
            ],
            [
                "chapter5",
                "http://www.fritsch.net/1.jpg"
            ],
            [
                "data1",
                "http://sauer.com/1.jpg"
            ],
            [
                "data2",
                "http://www.heller.com/1.jpg"
            ],
            [
                "data3",
                "http://www.hermann.com/1.jpg"
            ],
            [
                "data4",
                "http://rowelakin.com/1.jpg"
            ],
            [
                "data5",
                "http://andersonluettgen.net/1.jpg"
            ],
            [
                "data6",
                "http://www.beahan.biz/1.jpg"
            ],
            [
                "top1",
                "http://www.rempelnader.com/1.jpg"
            ],
            [
                "top2",
                "http://connellykertzmann.org/1.jpg"
            ],
            [
                "top3",
                "http://www.bernierconnelly.com/1.jpg"
            ],
            [
                "top4",
                "http://abernathyboehm.com/1.jpg"
            ]
        ]
    },
    {
        "db_id": "document_management",
        "query": "MATCH (users:`document_management.Users`)\nRETURN count(*),users.role_code",
        "question": "Find the number of users in each role.",
        "answers": [
            [
                7,
                "PROJ-MGR"
            ],
            [
                8,
                "DBA"
            ]
        ]
    },
    {
        "db_id": "document_management",
        "query": "MATCH (users:`document_management.Users`)\nRETURN count(*),users.role_code",
        "question": "What are the different role codes for users, and how many users have each?",
        "answers": [
            [
                7,
                "PROJ-MGR"
            ],
            [
                8,
                "DBA"
            ]
        ]
    },
    {
        "db_id": "document_management",
        "query": "MATCH (documents:`document_management.Documents`)\nWITH count(*) AS count, documents.document_type_code AS document_type_code\nWHERE count  > 2\nRETURN document_type_code",
        "question": "What document types have more than 2 corresponding documents?",
        "answers": [
            [
                "Book"
            ],
            [
                "Paper"
            ],
            [
                "Advertisement"
            ],
            [
                "CV"
            ]
        ]
    },
    {
        "db_id": "document_management",
        "query": "MATCH (documents:`document_management.Documents`)\nWITH count(*) AS count, documents.document_type_code AS document_type_code\nWHERE count  > 2\nRETURN document_type_code",
        "question": "Give the codes of document types that have more than 2 corresponding documents.",
        "answers": [
            [
                "Book"
            ],
            [
                "Paper"
            ],
            [
                "Advertisement"
            ],
            [
                "CV"
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (companies:`company_office.Companies`)\nRETURN count(*)",
        "question": "How many companies are there?",
        "answers": [
            [
                19
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (companies:`company_office.Companies`)\nRETURN count(*)",
        "question": "Count the number of companies.",
        "answers": [
            [
                19
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (companies:`company_office.Companies`)\nRETURN companies.name\nORDER BY companies.Market_Value_billion DESC",
        "question": "List the names of companies in descending order of market value.",
        "answers": [
            [
                "Santander Group"
            ],
            [
                "BNP Paribas"
            ],
            [
                "ExxonMobil"
            ],
            [
                "PetroChina"
            ],
            [
                "Industrial and Commercial Bank of China"
            ],
            [
                "Petrobras"
            ],
            [
                "China Construction Bank"
            ],
            [
                "General Electric"
            ],
            [
                "Royal Dutch Shell"
            ],
            [
                "Berkshire Hathaway"
            ],
            [
                "Chevron"
            ],
            [
                "Walmart"
            ],
            [
                "HSBC"
            ],
            [
                "JPMorgan Chase"
            ],
            [
                "Gazprom"
            ],
            [
                "Wells Fargo"
            ],
            [
                "AT&T Inc."
            ],
            [
                "Total"
            ],
            [
                "Citigroup"
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (companies:`company_office.Companies`)\nRETURN companies.name\nORDER BY companies.Market_Value_billion DESC",
        "question": "Sort the company names in descending order of the company's market value.",
        "answers": [
            [
                "Santander Group"
            ],
            [
                "BNP Paribas"
            ],
            [
                "ExxonMobil"
            ],
            [
                "PetroChina"
            ],
            [
                "Industrial and Commercial Bank of China"
            ],
            [
                "Petrobras"
            ],
            [
                "China Construction Bank"
            ],
            [
                "General Electric"
            ],
            [
                "Royal Dutch Shell"
            ],
            [
                "Berkshire Hathaway"
            ],
            [
                "Chevron"
            ],
            [
                "Walmart"
            ],
            [
                "HSBC"
            ],
            [
                "JPMorgan Chase"
            ],
            [
                "Gazprom"
            ],
            [
                "Wells Fargo"
            ],
            [
                "AT&T Inc."
            ],
            [
                "Total"
            ],
            [
                "Citigroup"
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (companies:`company_office.Companies`)\nWHERE companies.Headquarters <> 'USA'\nRETURN companies.name",
        "question": "What are the names of companies whose headquarters are not \"USA\"?",
        "answers": [
            [
                "HSBC"
            ],
            [
                "Royal Dutch Shell"
            ],
            [
                "PetroChina"
            ],
            [
                "Industrial and Commercial Bank of China"
            ],
            [
                "Petrobras"
            ],
            [
                "BNP Paribas"
            ],
            [
                "Santander Group"
            ],
            [
                "Gazprom"
            ],
            [
                "China Construction Bank"
            ],
            [
                "Total"
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (companies:`company_office.Companies`)\nWHERE companies.Headquarters <> 'USA'\nRETURN companies.name",
        "question": "Find the names of the companies whose headquarters are not located in \"USA\".",
        "answers": [
            [
                "HSBC"
            ],
            [
                "Royal Dutch Shell"
            ],
            [
                "PetroChina"
            ],
            [
                "Industrial and Commercial Bank of China"
            ],
            [
                "Petrobras"
            ],
            [
                "BNP Paribas"
            ],
            [
                "Santander Group"
            ],
            [
                "Gazprom"
            ],
            [
                "China Construction Bank"
            ],
            [
                "Total"
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (companies:`company_office.Companies`)\nRETURN companies.name,companies.Assets_billion\nORDER BY companies.name ASC",
        "question": "What are the name and assets of each company, sorted in ascending order of company name?",
        "answers": [
            [
                "AT&T Inc.",
                268.5
            ],
            [
                "BNP Paribas",
                2680.7
            ],
            [
                "Berkshire Hathaway",
                372.2
            ],
            [
                "Chevron",
                184.8
            ],
            [
                "China Construction Bank",
                1408.0
            ],
            [
                "Citigroup",
                1913.9
            ],
            [
                "ExxonMobil",
                302.5
            ],
            [
                "Gazprom",
                275.9
            ],
            [
                "General Electric",
                751.2
            ],
            [
                "HSBC",
                2467.9
            ],
            [
                "Industrial and Commercial Bank of China",
                1723.5
            ],
            [
                "JPMorgan Chase",
                2117.6
            ],
            [
                "PetroChina",
                251.3
            ],
            [
                "Petrobras",
                313.2
            ],
            [
                "Royal Dutch Shell",
                317.2
            ],
            [
                "Santander Group",
                1570.6
            ],
            [
                "Total",
                192.8
            ],
            [
                "Walmart",
                180.7
            ],
            [
                "Wells Fargo",
                1258.1
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (companies:`company_office.Companies`)\nRETURN companies.name,companies.Assets_billion\nORDER BY companies.name ASC",
        "question": "List the name and assets of each company in ascending order of company name.",
        "answers": [
            [
                "AT&T Inc.",
                268.5
            ],
            [
                "BNP Paribas",
                2680.7
            ],
            [
                "Berkshire Hathaway",
                372.2
            ],
            [
                "Chevron",
                184.8
            ],
            [
                "China Construction Bank",
                1408.0
            ],
            [
                "Citigroup",
                1913.9
            ],
            [
                "ExxonMobil",
                302.5
            ],
            [
                "Gazprom",
                275.9
            ],
            [
                "General Electric",
                751.2
            ],
            [
                "HSBC",
                2467.9
            ],
            [
                "Industrial and Commercial Bank of China",
                1723.5
            ],
            [
                "JPMorgan Chase",
                2117.6
            ],
            [
                "PetroChina",
                251.3
            ],
            [
                "Petrobras",
                313.2
            ],
            [
                "Royal Dutch Shell",
                317.2
            ],
            [
                "Santander Group",
                1570.6
            ],
            [
                "Total",
                192.8
            ],
            [
                "Walmart",
                180.7
            ],
            [
                "Wells Fargo",
                1258.1
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (companies:`company_office.Companies`)\nWHERE companies.Industry <> 'Banking'\nRETURN max(companies.Sales_billion),min(companies.Sales_billion)",
        "question": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\".",
        "answers": [
            [
                421.8,
                98.7
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (companies:`company_office.Companies`)\nWHERE companies.Industry <> 'Banking'\nRETURN max(companies.Sales_billion),min(companies.Sales_billion)",
        "question": "Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry.",
        "answers": [
            [
                421.8,
                98.7
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (companies:`company_office.Companies`)\nRETURN count(DISTINCT companies.Industry)",
        "question": "How many different industries are the companies in?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (companies:`company_office.Companies`)\nRETURN count(DISTINCT companies.Industry)",
        "question": "Count the number of distinct company industries.",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (buildings:`company_office.buildings`)\nRETURN buildings.name\nORDER BY buildings.Height DESC",
        "question": "List the names of buildings in descending order of building height.",
        "answers": [
            [
                "Torre Reforma"
            ],
            [
                "Reforma 432"
            ],
            [
                "Torre KOI"
            ],
            [
                "Corporativo BBVA Bancomer"
            ],
            [
                "Torre Mitikah"
            ],
            [
                "Punto Chapultepec"
            ],
            [
                "Residencial Vidalta Torre Altaire 3"
            ],
            [
                "Reforma 90"
            ],
            [
                "Residencial Vidalta Torre Altaire 2"
            ],
            [
                "Ritz-Carlton Mexico City"
            ],
            [
                "LIU East"
            ],
            [
                "Torre New York Life"
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (buildings:`company_office.buildings`)\nRETURN buildings.name\nORDER BY buildings.Height DESC",
        "question": "What are the names of buildings sorted in descending order of building height?",
        "answers": [
            [
                "Torre Reforma"
            ],
            [
                "Reforma 432"
            ],
            [
                "Torre KOI"
            ],
            [
                "Corporativo BBVA Bancomer"
            ],
            [
                "Torre Mitikah"
            ],
            [
                "Punto Chapultepec"
            ],
            [
                "Residencial Vidalta Torre Altaire 3"
            ],
            [
                "Reforma 90"
            ],
            [
                "Residencial Vidalta Torre Altaire 2"
            ],
            [
                "Ritz-Carlton Mexico City"
            ],
            [
                "LIU East"
            ],
            [
                "Torre New York Life"
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (buildings:`company_office.buildings`)\nRETURN buildings.Stories\nORDER BY buildings.Height DESC\nLIMIT 1",
        "question": "Find the stories of the building with the largest height.",
        "answers": [
            [
                57
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (buildings:`company_office.buildings`)\nRETURN buildings.Stories\nORDER BY buildings.Height DESC\nLIMIT 1",
        "question": "What is the stories of highest building?",
        "answers": [
            [
                57
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (T2:`company_office.buildings`)-[T1:`company_office.Office_locations`]-(T3:`company_office.Companies`)\nRETURN T3.name,T2.name",
        "question": "List the name of a building along with the name of a company whose office is in the building.",
        "answers": [
            [
                "JPMorgan Chase",
                "Torre KOI"
            ],
            [
                "HSBC",
                "Torre Mitikah"
            ],
            [
                "BNP Paribas",
                "Torre Mitikah"
            ],
            [
                "BNP Paribas",
                "Punto Chapultepec"
            ],
            [
                "ExxonMobil",
                "Punto Chapultepec"
            ],
            [
                "HSBC",
                "Punto Chapultepec"
            ],
            [
                "Petrobras",
                "Punto Chapultepec"
            ],
            [
                "General Electric",
                "Torre Reforma"
            ],
            [
                "Industrial and Commercial Bank of China",
                "Corporativo BBVA Bancomer"
            ],
            [
                "General Electric",
                "Corporativo BBVA Bancomer"
            ],
            [
                "Petrobras",
                "Reforma 432"
            ],
            [
                "ExxonMobil",
                "Torre New York Life"
            ],
            [
                "Total",
                "LIU East"
            ],
            [
                "Citigroup",
                "Residencial Vidalta Torre Altaire 2"
            ],
            [
                "Petrobras",
                "Residencial Vidalta Torre Altaire 3"
            ],
            [
                "Royal Dutch Shell",
                "Reforma 90"
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (T2:`company_office.buildings`)-[T1:`company_office.Office_locations`]-(T3:`company_office.Companies`)\nRETURN T3.name,T2.name",
        "question": "For each company, return the company name and the name of the building its office is located in.",
        "answers": [
            [
                "JPMorgan Chase",
                "Torre KOI"
            ],
            [
                "HSBC",
                "Torre Mitikah"
            ],
            [
                "BNP Paribas",
                "Torre Mitikah"
            ],
            [
                "BNP Paribas",
                "Punto Chapultepec"
            ],
            [
                "ExxonMobil",
                "Punto Chapultepec"
            ],
            [
                "HSBC",
                "Punto Chapultepec"
            ],
            [
                "Petrobras",
                "Punto Chapultepec"
            ],
            [
                "General Electric",
                "Torre Reforma"
            ],
            [
                "Industrial and Commercial Bank of China",
                "Corporativo BBVA Bancomer"
            ],
            [
                "General Electric",
                "Corporativo BBVA Bancomer"
            ],
            [
                "Petrobras",
                "Reforma 432"
            ],
            [
                "ExxonMobil",
                "Torre New York Life"
            ],
            [
                "Total",
                "LIU East"
            ],
            [
                "Citigroup",
                "Residencial Vidalta Torre Altaire 2"
            ],
            [
                "Petrobras",
                "Residencial Vidalta Torre Altaire 3"
            ],
            [
                "Royal Dutch Shell",
                "Reforma 90"
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (T2:`company_office.buildings`)-[T1:`company_office.Office_locations`]-(T3:`company_office.Companies`)\nWITH count(*) AS count, T2.name AS name\nWHERE count  > 1\nRETURN name",
        "question": "Show the names of the buildings that have more than one company offices.",
        "answers": [
            [
                "Torre Mitikah"
            ],
            [
                "Punto Chapultepec"
            ],
            [
                "Corporativo BBVA Bancomer"
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (T2:`company_office.buildings`)-[T1:`company_office.Office_locations`]-(T3:`company_office.Companies`)\nWITH count(*) AS count, T2.name AS name\nWHERE count  > 1\nRETURN name",
        "question": "Which buildings have more than one company offices? Give me the building names.",
        "answers": [
            [
                "Torre Mitikah"
            ],
            [
                "Punto Chapultepec"
            ],
            [
                "Corporativo BBVA Bancomer"
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (buildings:`company_office.buildings`)\nWHERE buildings.Status = \"on-hold\"\nRETURN buildings.name\nORDER BY buildings.Stories ASC",
        "question": "Please show the names of the buildings whose status is \"on-hold\", in ascending order of stories.",
        "answers": [
            [
                "Ritz-Carlton Mexico City"
            ],
            [
                "Reforma 90"
            ],
            [
                "Residencial Vidalta Torre Altaire 2"
            ],
            [
                "Residencial Vidalta Torre Altaire 3"
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (buildings:`company_office.buildings`)\nWHERE buildings.Status = \"on-hold\"\nRETURN buildings.name\nORDER BY buildings.Stories ASC",
        "question": "Find the names of the buildings in \"on-hold\" status, and sort them in ascending order of building stories.",
        "answers": [
            [
                "Ritz-Carlton Mexico City"
            ],
            [
                "Reforma 90"
            ],
            [
                "Residencial Vidalta Torre Altaire 2"
            ],
            [
                "Residencial Vidalta Torre Altaire 3"
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (companies:`company_office.Companies`)\nRETURN companies.Industry,count(*)",
        "question": "Please show each industry and the corresponding number of companies in that industry.",
        "answers": [
            [
                "Banking",
                8
            ],
            [
                "Conglomerate",
                2
            ],
            [
                "Oil and gas",
                7
            ],
            [
                "Telecommunications",
                1
            ],
            [
                "Retailing",
                1
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (companies:`company_office.Companies`)\nRETURN companies.Industry,count(*)",
        "question": "Whah are the name of each industry and the number of companies in that industry?",
        "answers": [
            [
                "Banking",
                8
            ],
            [
                "Conglomerate",
                2
            ],
            [
                "Oil and gas",
                7
            ],
            [
                "Telecommunications",
                1
            ],
            [
                "Retailing",
                1
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (companies:`company_office.Companies`)\nRETURN companies.Industry\nORDER BY companies.Industry DESC",
        "question": "Please show the industries of companies in descending order of the number of companies.",
        "answers": [
            [
                "Telecommunications"
            ],
            [
                "Retailing"
            ],
            [
                "Oil and gas"
            ],
            [
                "Oil and gas"
            ],
            [
                "Oil and gas"
            ],
            [
                "Oil and gas"
            ],
            [
                "Oil and gas"
            ],
            [
                "Oil and gas"
            ],
            [
                "Oil and gas"
            ],
            [
                "Conglomerate"
            ],
            [
                "Conglomerate"
            ],
            [
                "Banking"
            ],
            [
                "Banking"
            ],
            [
                "Banking"
            ],
            [
                "Banking"
            ],
            [
                "Banking"
            ],
            [
                "Banking"
            ],
            [
                "Banking"
            ],
            [
                "Banking"
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (companies:`company_office.Companies`)\nRETURN companies.Industry\nORDER BY companies.Industry DESC",
        "question": "Sort all the industries in descending order of the count of companies in each industry",
        "answers": [
            [
                "Telecommunications"
            ],
            [
                "Retailing"
            ],
            [
                "Oil and gas"
            ],
            [
                "Oil and gas"
            ],
            [
                "Oil and gas"
            ],
            [
                "Oil and gas"
            ],
            [
                "Oil and gas"
            ],
            [
                "Oil and gas"
            ],
            [
                "Oil and gas"
            ],
            [
                "Conglomerate"
            ],
            [
                "Conglomerate"
            ],
            [
                "Banking"
            ],
            [
                "Banking"
            ],
            [
                "Banking"
            ],
            [
                "Banking"
            ],
            [
                "Banking"
            ],
            [
                "Banking"
            ],
            [
                "Banking"
            ],
            [
                "Banking"
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (companies:`company_office.Companies`)\nWHERE companies.Industry = 'Banking' OR companies.Industry = 'Conglomerate'\nRETURN count(*)",
        "question": "Find the number of companies whose industry is \"Banking\" or \"Conglomerate\",",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (companies:`company_office.Companies`)\nWHERE companies.Industry = 'Banking' OR companies.Industry = 'Conglomerate'\nRETURN count(*)",
        "question": "How many companies are in either \"Banking\" industry or \"Conglomerate\" industry?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (companies:`company_office.Companies`)\nWITH count(*) AS count, companies.Headquarters AS Headquarters\nWHERE count  > 2\nRETURN Headquarters",
        "question": "Show the headquarters shared by more than two companies.",
        "answers": [
            [
                "USA"
            ],
            [
                "China"
            ]
        ]
    },
    {
        "db_id": "company_office",
        "query": "MATCH (companies:`company_office.Companies`)\nWITH count(*) AS count, companies.Headquarters AS Headquarters\nWHERE count  > 2\nRETURN Headquarters",
        "question": "Which headquarter locations are used by more than 2 companies?",
        "answers": [
            [
                "USA"
            ],
            [
                "China"
            ]
        ]
    },
    {
        "db_id": "solvency_ii",
        "query": "MATCH (products:`solvency_ii.Products`)\nRETURN count(*)",
        "question": "How many products are there?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "solvency_ii",
        "query": "MATCH (products:`solvency_ii.Products`)\nRETURN products.Product_Name\nORDER BY products.Product_Price ASC",
        "question": "List the name of products in ascending order of price.",
        "answers": [
            [
                "Special Dinning"
            ],
            [
                "TV Equipments"
            ],
            [
                "TV Equipments"
            ],
            [
                "Business Policy"
            ],
            [
                "Dinning"
            ],
            [
                "Special Dinning"
            ],
            [
                "Business Policy B"
            ],
            [
                "Trading Policy"
            ],
            [
                "Conference Equipments"
            ],
            [
                "Men suits"
            ],
            [
                "Men suits"
            ],
            [
                "Dinning"
            ],
            [
                "Trading Policy B"
            ],
            [
                "TV Equipments"
            ],
            [
                "Dinning"
            ]
        ]
    },
    {
        "db_id": "solvency_ii",
        "query": "MATCH (products:`solvency_ii.Products`)\nRETURN products.Product_Name,products.Product_Type_Code",
        "question": "What are the names and type codes of products?",
        "answers": [
            [
                "Business Policy",
                "Books"
            ],
            [
                "Special Dinning",
                "Food"
            ],
            [
                "Men suits",
                "Clothes"
            ],
            [
                "TV Equipments",
                "Electronics"
            ],
            [
                "Business Policy B",
                "Books"
            ],
            [
                "TV Equipments",
                "Electronics"
            ],
            [
                "Conference Equipments",
                "Electronics"
            ],
            [
                "Trading Policy",
                "Books"
            ],
            [
                "Trading Policy B",
                "Books"
            ],
            [
                "Dinning",
                "Food"
            ],
            [
                "Dinning",
                "Food"
            ],
            [
                "Dinning",
                "Food"
            ],
            [
                "Special Dinning",
                "Food"
            ],
            [
                "TV Equipments",
                "Electronics"
            ],
            [
                "Men suits",
                "Clothes"
            ]
        ]
    },
    {
        "db_id": "solvency_ii",
        "query": "MATCH (products:`solvency_ii.Products`)\nRETURN products.Product_Name\nORDER BY products.Product_Price DESC\nLIMIT 1",
        "question": "What is the name of the product with the highest price?",
        "answers": [
            [
                "Dinning"
            ]
        ]
    },
    {
        "db_id": "solvency_ii",
        "query": "MATCH (products:`solvency_ii.Products`)\nRETURN products.Product_Type_Code,count(*)",
        "question": "Show different type codes of products and the number of products with each type code.",
        "answers": [
            [
                "Books",
                4
            ],
            [
                "Food",
                5
            ],
            [
                "Clothes",
                2
            ],
            [
                "Electronics",
                4
            ]
        ]
    },
    {
        "db_id": "solvency_ii",
        "query": "MATCH (products:`solvency_ii.Products`)\nRETURN products.Product_Type_Code\nORDER BY products.Product_Type_Code DESC\nLIMIT 1",
        "question": "Show the most common type code across products.",
        "answers": [
            [
                "Food"
            ]
        ]
    },
    {
        "db_id": "solvency_ii",
        "query": "MATCH (products:`solvency_ii.Products`)\nWITH count(*) AS count, products.Product_Type_Code AS Product_Type_Code\nWHERE count  >= 2\nRETURN Product_Type_Code",
        "question": "Show the product type codes that have at least two products.",
        "answers": [
            [
                "Books"
            ],
            [
                "Food"
            ],
            [
                "Clothes"
            ],
            [
                "Electronics"
            ]
        ]
    },
    {
        "db_id": "solvency_ii",
        "query": "MATCH (T1:`solvency_ii.Products`)-[]-(T2:`solvency_ii.Products_in_Events`)\nRETURN T1.Product_Name,count(*)",
        "question": "Show the names of products and the number of events they are in.",
        "answers": [
            [
                "Special Dinning",
                4
            ],
            [
                "TV Equipments",
                5
            ],
            [
                "Conference Equipments",
                1
            ],
            [
                "Trading Policy",
                1
            ],
            [
                "Trading Policy B",
                1
            ],
            [
                "Dinning",
                1
            ],
            [
                "Men suits",
                2
            ]
        ]
    },
    {
        "db_id": "solvency_ii",
        "query": "MATCH (T1:`solvency_ii.Products`)-[]-(T2:`solvency_ii.Products_in_Events`)\nWITH count(*) AS count, T1.Product_Name AS Product_Name\nWHERE count  >= 2\nRETURN Product_Name",
        "question": "Show the names of products that are in at least two events.",
        "answers": [
            [
                "Special Dinning"
            ],
            [
                "TV Equipments"
            ],
            [
                "Men suits"
            ]
        ]
    },
    {
        "db_id": "entertainment_awards",
        "query": "MATCH (artwork:`entertainment_awards.artwork`)\nRETURN count(*)",
        "question": "How many artworks are there?",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "entertainment_awards",
        "query": "MATCH (artwork:`entertainment_awards.artwork`)\nRETURN artwork.Name\nORDER BY artwork.Name ASC",
        "question": "List the name of artworks in ascending alphabetical order.",
        "answers": [
            [
                "Back Home"
            ],
            [
                "Boys"
            ],
            [
                "Cats"
            ],
            [
                "Daniel Mananta"
            ],
            [
                "I Know"
            ],
            [
                "Indonesian Idol"
            ],
            [
                "Loving you"
            ],
            [
                "Martin"
            ],
            [
                "Why"
            ]
        ]
    },
    {
        "db_id": "entertainment_awards",
        "query": "MATCH (artwork:`entertainment_awards.artwork`)\nWHERE artwork.Type <> 'Program Talent Show'\nRETURN artwork.Name",
        "question": "List the name of artworks whose type is not \"Program Talent Show\".",
        "answers": [
            [
                "Indonesian Idol"
            ],
            [
                "I Know"
            ],
            [
                "Loving you"
            ],
            [
                "Why"
            ],
            [
                "Boys"
            ],
            [
                "Daniel Mananta"
            ],
            [
                "Back Home"
            ]
        ]
    },
    {
        "db_id": "entertainment_awards",
        "query": "MATCH (festival_detail:`entertainment_awards.festival_detail`)\nRETURN festival_detail.Festival_Name,festival_detail.Location",
        "question": "What are the names and locations of festivals?",
        "answers": [
            [
                "Panasonic Awards",
                "United States"
            ],
            [
                "Flower Awards",
                "United States"
            ],
            [
                "Cherry Awards",
                "United States"
            ],
            [
                "Gobel Awards",
                "United States"
            ],
            [
                "LA Awards",
                "United States"
            ]
        ]
    },
    {
        "db_id": "entertainment_awards",
        "query": "MATCH (festival_detail:`entertainment_awards.festival_detail`)\nRETURN festival_detail.Chair_Name\nORDER BY festival_detail.Year ASC",
        "question": "What are the names of the chairs of festivals, sorted in ascending order of the year held?",
        "answers": [
            [
                "Raymond Floyd"
            ],
            [
                "Charles Coody"
            ],
            [
                "Doug Ford"
            ],
            [
                "Arnold Palmer"
            ],
            [
                "Lucy Lu"
            ]
        ]
    },
    {
        "db_id": "entertainment_awards",
        "query": "MATCH (festival_detail:`entertainment_awards.festival_detail`)\nRETURN festival_detail.Location\nORDER BY festival_detail.Num_of_Audience DESC\nLIMIT 1",
        "question": "What is the location of the festival with the largest number of audience?",
        "answers": [
            [
                "United States"
            ]
        ]
    },
    {
        "db_id": "entertainment_awards",
        "query": "MATCH (festival_detail:`entertainment_awards.festival_detail`)\nWHERE festival_detail.Year = 2007\nRETURN festival_detail.Festival_Name",
        "question": "What are the names of festivals held in year 2007?",
        "answers": [
            [
                "Flower Awards"
            ],
            [
                "Cherry Awards"
            ]
        ]
    },
    {
        "db_id": "entertainment_awards",
        "query": "MATCH (festival_detail:`entertainment_awards.festival_detail`)\nRETURN avg(festival_detail.Num_of_Audience)",
        "question": "What is the average number of audience for festivals?",
        "answers": [
            [
                157.6
            ]
        ]
    },
    {
        "db_id": "entertainment_awards",
        "query": "MATCH (T2:`entertainment_awards.artwork`)-[T1:`entertainment_awards.nomination`]-(T3:`entertainment_awards.festival_detail`)\nRETURN T2.Name,T3.Festival_Name",
        "question": "For each nomination, show the name of the artwork and name of the festival where it is nominated.",
        "answers": [
            [
                "Indonesian Idol",
                "Flower Awards"
            ],
            [
                "I Know",
                "Flower Awards"
            ],
            [
                "Loving you",
                "Panasonic Awards"
            ],
            [
                "Why",
                "Panasonic Awards"
            ],
            [
                "Martin",
                "LA Awards"
            ],
            [
                "Back Home",
                "LA Awards"
            ]
        ]
    },
    {
        "db_id": "entertainment_awards",
        "query": "MATCH (T2:`entertainment_awards.artwork`)-[T1:`entertainment_awards.nomination`]-(T3:`entertainment_awards.festival_detail`)\nWHERE T3.Year = 2007\nRETURN DISTINCT T2.Type",
        "question": "Show distinct types of artworks that are nominated in festivals in 2007.",
        "answers": [
            [
                "Program Music/Variety Show"
            ]
        ]
    },
    {
        "db_id": "entertainment_awards",
        "query": "MATCH (T2:`entertainment_awards.artwork`)-[T1:`entertainment_awards.nomination`]-(T3:`entertainment_awards.festival_detail`)\nRETURN T2.Name\nORDER BY T3.Year",
        "question": "Show the names of artworks in ascending order of the year they are nominated in.",
        "answers": [
            [
                "Loving you"
            ],
            [
                "Why"
            ],
            [
                "Indonesian Idol"
            ],
            [
                "I Know"
            ],
            [
                "Martin"
            ],
            [
                "Back Home"
            ]
        ]
    },
    {
        "db_id": "entertainment_awards",
        "query": "MATCH (T2:`entertainment_awards.artwork`)-[T1:`entertainment_awards.nomination`]-(T3:`entertainment_awards.festival_detail`)\nWHERE T2.Type = 'Program Talent Show'\nRETURN T3.Festival_Name",
        "question": "Show the names of festivals that have nominated artworks of type \"Program Talent Show\".",
        "answers": [
            [
                "LA Awards"
            ]
        ]
    },
    {
        "db_id": "entertainment_awards",
        "query": "MATCH (T2:`entertainment_awards.artwork`)-[T1:`entertainment_awards.nomination`]-(T3:`entertainment_awards.festival_detail`)\nWITH count(*) AS count, T1.Festival_ID AS Festival_ID, T3.Festival_Name AS Festival_Name\nWHERE count  >= 2\nRETURN Festival_ID,Festival_Name",
        "question": "Show the ids and names of festivals that have at least two nominations for artworks.",
        "answers": [
            [
                2,
                "Flower Awards"
            ],
            [
                1,
                "Panasonic Awards"
            ],
            [
                5,
                "LA Awards"
            ]
        ]
    },
    {
        "db_id": "entertainment_awards",
        "query": "MATCH (T2:`entertainment_awards.artwork`)-[T1:`entertainment_awards.nomination`]-(T3:`entertainment_awards.festival_detail`)\nRETURN T1.Festival_ID,T3.Festival_Name,count(*)",
        "question": "Show the id, name of each festival and the number of artworks it has nominated.",
        "answers": [
            [
                2,
                "Flower Awards",
                2
            ],
            [
                1,
                "Panasonic Awards",
                2
            ],
            [
                5,
                "LA Awards",
                2
            ]
        ]
    },
    {
        "db_id": "entertainment_awards",
        "query": "MATCH (artwork:`entertainment_awards.artwork`)\nRETURN artwork.Type,count(*)",
        "question": "Please show different types of artworks with the corresponding number of artworks of each type.",
        "answers": [
            [
                "Program Music/Variety Show",
                3
            ],
            [
                "Presenter Music/Variety Show",
                2
            ],
            [
                "Program Talent Show",
                2
            ],
            [
                "Presenter Talent Show",
                2
            ]
        ]
    },
    {
        "db_id": "entertainment_awards",
        "query": "MATCH (festival_detail:`entertainment_awards.festival_detail`)\nWITH festival_detail.Year AS Year, count(*) AS count\nWHERE count  > 1\nRETURN Year",
        "question": "List the year in which there are more than one festivals.",
        "answers": [
            [
                2007
            ]
        ]
    },
    {
        "db_id": "entertainment_awards",
        "query": "MATCH (festival_detail:`entertainment_awards.festival_detail`)\nWHERE festival_detail.Year = 2008 OR festival_detail.Year = 2010\nRETURN festival_detail.Num_of_Audience",
        "question": "Show the number of audience in year 2008 or 2010.",
        "answers": [
            [
                160
            ],
            [
                161
            ]
        ]
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "MATCH (premises:`customers_campaigns_ecommerce.Premises`)\nRETURN count(*)",
        "question": "How many premises are there?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "MATCH (premises:`customers_campaigns_ecommerce.Premises`)\nRETURN DISTINCT premises.premises_type",
        "question": "What are all the distinct premise types?",
        "answers": [
            [
                "Warehouse"
            ],
            [
                "Residence"
            ],
            [
                "Office"
            ]
        ]
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "MATCH (premises:`customers_campaigns_ecommerce.Premises`)\nRETURN premises.premises_type,premises.premise_details\nORDER BY premises.premises_type",
        "question": "Find the types and details for all premises and order by the premise type.",
        "answers": [
            [
                "Office",
                "38291 Jerde Light Apt. 713"
            ],
            [
                "Office",
                "5585 Abbott Walk"
            ],
            [
                "Office",
                "07318 Annetta Motorway"
            ],
            [
                "Office",
                "00100 Green Mountains Apt. 653"
            ],
            [
                "Office",
                "33294 William Lodge Apt. 953"
            ],
            [
                "Office",
                "2760 Austin Station"
            ],
            [
                "Office",
                "867 Emard Drives Apt. 066"
            ],
            [
                "Residence",
                "27839 Carissa Tunnel Suite 048"
            ],
            [
                "Residence",
                "2219 Barrows Tunnel Apt. 893"
            ],
            [
                "Residence",
                "5510 Veum Green"
            ],
            [
                "Residence",
                "5109 Jules Squares Apt. 082"
            ],
            [
                "Warehouse",
                "036 Lueilwitz Harbor"
            ],
            [
                "Warehouse",
                "676 Kelly Spur"
            ],
            [
                "Warehouse",
                "7230 Tillman Glens Suite 202"
            ],
            [
                "Warehouse",
                "62282 Wiza Glen Apt. 430"
            ]
        ]
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "MATCH (premises:`customers_campaigns_ecommerce.Premises`)\nRETURN premises.premises_type,count(*)",
        "question": "Show each premise type and the number of premises in that type.",
        "answers": [
            [
                "Warehouse",
                4
            ],
            [
                "Residence",
                4
            ],
            [
                "Office",
                7
            ]
        ]
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "MATCH (mailshot_campaigns:`customers_campaigns_ecommerce.Mailshot_Campaigns`)\nRETURN mailshot_campaigns.product_category,count(*)",
        "question": "Show all distinct product categories along with the number of mailshots in each category.",
        "answers": [
            [
                "food",
                11
            ],
            [
                "clothes",
                9
            ]
        ]
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "MATCH (T1:`customers_campaigns_ecommerce.Customers`)-[T2:`customers_campaigns_ecommerce.Mailshot_Customers`]-()\nWHERE T2.outcome_code = 'No Response'\nRETURN T1.customer_name,T1.customer_phone",
        "question": "Show the name and phone for customers with a mailshot with outcome code 'No Response'.",
        "answers": [
            [
                "Wendell",
                "(773)971-9411x759"
            ],
            [
                "Wendell",
                "(773)971-9411x759"
            ],
            [
                "Stella",
                "+43(3)1861877192"
            ],
            [
                "Carlotta",
                "+66(7)1491041398"
            ],
            [
                "Donnie",
                "(030)521-0681x0191"
            ]
        ]
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "MATCH (T2:`customers_campaigns_ecommerce.Premises`)-[T1:`customers_campaigns_ecommerce.Customer_Addresses`]-()\nRETURN T2.premises_type,T1.address_type_code",
        "question": "Show the premise type and address type code for all customer addresses.",
        "answers": [
            [
                "Warehouse",
                "Billing"
            ],
            [
                "Warehouse",
                "Shipping"
            ],
            [
                "Warehouse",
                "Billing"
            ],
            [
                "Warehouse",
                "Shipping"
            ],
            [
                "Warehouse",
                "Billing"
            ],
            [
                "Residence",
                "Shipping"
            ],
            [
                "Residence",
                "Shipping"
            ],
            [
                "Office",
                "Shipping"
            ],
            [
                "Office",
                "Shipping"
            ],
            [
                "Office",
                "Billing"
            ],
            [
                "Office",
                "Billing"
            ],
            [
                "Warehouse",
                "Shipping"
            ],
            [
                "Office",
                "Billing"
            ],
            [
                "Office",
                "Billing"
            ],
            [
                "Residence",
                "Billing"
            ]
        ]
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "MATCH ()-[customer_addresses:`customers_campaigns_ecommerce.Customer_Addresses`]-()\nRETURN DISTINCT customer_addresses.address_type_code",
        "question": "What are the distinct address type codes for all customer addresses?",
        "answers": [
            [
                "Billing"
            ],
            [
                "Shipping"
            ]
        ]
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "MATCH (customer_orders:`customers_campaigns_ecommerce.Customer_Orders`)\nWHERE customer_orders.order_status_code = 'Cancelled' OR customer_orders.order_status_code = 'Paid'\nRETURN customer_orders.order_shipping_charges,customer_orders.customer_id",
        "question": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.",
        "answers": [
            [
                "85.79",
                2
            ],
            [
                "98.4",
                8
            ],
            [
                "36.87",
                9
            ],
            [
                "35.63",
                7
            ],
            [
                "99.26",
                2
            ],
            [
                "26.56",
                15
            ],
            [
                "57.36",
                1
            ],
            [
                "33.58",
                14
            ],
            [
                "22.84",
                1
            ],
            [
                "21.24",
                12
            ],
            [
                "31.33",
                12
            ],
            [
                "46.4",
                14
            ]
        ]
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "MATCH (T1:`customers_campaigns_ecommerce.Customers`)-[]-(T2:`customers_campaigns_ecommerce.Customer_Orders`)\nWHERE T2.shipping_method_code = 'FedEx' AND T2.order_status_code = 'Paid'\nRETURN T1.customer_name",
        "question": "Show the names of customers having an order with shipping method FedEx and order status Paid.",
        "answers": [
            [
                "Leanna"
            ],
            [
                "Kyle"
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (course:`college_3.Course`)\nRETURN count(*)",
        "question": "How many courses are there in total?",
        "answers": [
            [
                76
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (course:`college_3.Course`)\nRETURN count(*)",
        "question": "Count the number of courses.",
        "answers": [
            [
                76
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (course:`college_3.Course`)\nWHERE course.Credits > 2\nRETURN count(*)",
        "question": "How many courses have more than 2 credits?",
        "answers": [
            [
                71
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (course:`college_3.Course`)\nWHERE course.Credits > 2\nRETURN count(*)",
        "question": "Count the number of courses with more than 2 credits.",
        "answers": [
            [
                71
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (course:`college_3.Course`)\nWHERE course.Credits = 1\nRETURN course.CName",
        "question": "List all names of courses with 1 credit?",
        "answers": [
            [
                "INTRODUCTION TO COMPUTER SCIENCE"
            ],
            [
                "SUPERCOMPUTING"
            ],
            [
                "COMPUTER SCIENCE SEMINAR"
            ],
            [
                "RESEARCH SEMINAR IN COGNITIVE PROCESSES"
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (course:`college_3.Course`)\nWHERE course.Credits = 1\nRETURN course.CName",
        "question": "What are the names of courses with 1 credit?",
        "answers": [
            [
                "INTRODUCTION TO COMPUTER SCIENCE"
            ],
            [
                "SUPERCOMPUTING"
            ],
            [
                "COMPUTER SCIENCE SEMINAR"
            ],
            [
                "RESEARCH SEMINAR IN COGNITIVE PROCESSES"
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (gradeconversion:`college_3.Gradeconversion`)\nRETURN max(gradeconversion.gradepoint),min(gradeconversion.gradepoint)",
        "question": "Find the max and min grade point for all letter grade.",
        "answers": [
            [
                4.0,
                0.0
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (gradeconversion:`college_3.Gradeconversion`)\nRETURN max(gradeconversion.gradepoint),min(gradeconversion.gradepoint)",
        "question": "What are the maximum and minumum grade points?",
        "answers": [
            [
                4.0,
                0.0
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (student:`college_3.Student`)\nWHERE student.Fname =~'.*[A|a].*'\nRETURN DISTINCT student.Fname",
        "question": "Find the first names of students whose first names contain letter \"a\".",
        "answers": [
            [
                "Linda"
            ],
            [
                "Tracy"
            ],
            [
                "Shiela"
            ],
            [
                "Paul"
            ],
            [
                "Andy"
            ],
            [
                "Lisa"
            ],
            [
                "Jandy"
            ],
            [
                "David"
            ],
            [
                "Charles"
            ],
            [
                "Susan"
            ],
            [
                "Mark"
            ],
            [
                "Michael"
            ],
            [
                "Arthur"
            ],
            [
                "Ian"
            ],
            [
                "Stacy"
            ],
            [
                "Sarah"
            ],
            [
                "William"
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (student:`college_3.Student`)\nWHERE student.Fname =~'.*[A|a].*'\nRETURN DISTINCT student.Fname",
        "question": "What are the first names for students who have an \"a\" in their first name?",
        "answers": [
            [
                "Linda"
            ],
            [
                "Tracy"
            ],
            [
                "Shiela"
            ],
            [
                "Paul"
            ],
            [
                "Andy"
            ],
            [
                "Lisa"
            ],
            [
                "Jandy"
            ],
            [
                "David"
            ],
            [
                "Charles"
            ],
            [
                "Susan"
            ],
            [
                "Mark"
            ],
            [
                "Michael"
            ],
            [
                "Arthur"
            ],
            [
                "Ian"
            ],
            [
                "Stacy"
            ],
            [
                "Sarah"
            ],
            [
                "William"
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (course:`college_3.Course`)\nRETURN course.CName\nORDER BY course.Credits",
        "question": "List the course name of courses sorted by credits.",
        "answers": [
            [
                "INTRODUCTION TO COMPUTER SCIENCE"
            ],
            [
                "SUPERCOMPUTING"
            ],
            [
                "COMPUTER SCIENCE SEMINAR"
            ],
            [
                "RESEARCH SEMINAR IN COGNITIVE PROCESSES"
            ],
            [
                "TOPICS IN APPLIED MATH"
            ],
            [
                "COMPUTER LITERACY"
            ],
            [
                "INTRO TO PROGRAMMING IN JAVA"
            ],
            [
                "INTRO TO PROGRAMMING IN C/C++"
            ],
            [
                "EXPLORING THE INTERNET"
            ],
            [
                "JAVA PROGRAMMING"
            ],
            [
                "UNIX SYSTEMS PROGRAMMING"
            ],
            [
                "DATA STRUCTURES in JAVA"
            ],
            [
                "MULTIMEDIA COMPUTING"
            ],
            [
                "COMPUTATIONAL MODELS"
            ],
            [
                "DATABASE SYSTEMS"
            ],
            [
                "COMPUTER SYSTEM FUNDAMENTALS"
            ],
            [
                "DISTRIBUTED SYSTEMS"
            ],
            [
                "INTRODUCTION TO ALGORITHMS"
            ],
            [
                "DATABASE SYSTEMS"
            ],
            [
                "COMPUTER SYSTEMS"
            ],
            [
                "DISTRIBUTED SYSTEMS"
            ],
            [
                "QUANTITATIVE MEDICAL COMPUTING"
            ],
            [
                "COMPUTER VISION"
            ],
            [
                "ALGORITHMS I"
            ],
            [
                "INTRO TO NATURAL LANGUAGE PROCESSING"
            ],
            [
                "COMPUTER SCIENCE INTERNSHIP"
            ],
            [
                "HIGH PERFORMANCE GRAPHICS AND MODELING"
            ],
            [
                "SEMINAR ON COMPUTATIONAL GEOMETRY"
            ],
            [
                "ACCOUNTING I"
            ],
            [
                "ACCOUNTING II"
            ],
            [
                "BUSINESS LAW I"
            ],
            [
                "BUSINESS LAW II"
            ],
            [
                "PROBABILITY THEORY I"
            ],
            [
                "STOCHASTIC PROCESSES II"
            ],
            [
                "STATISTICAL INFERENCE"
            ],
            [
                "FOUNDATIONS OF OPTIMIZATION"
            ],
            [
                "COMBINATORIAL ANALYSIS"
            ],
            [
                "NUMERICAL ANALYSIS"
            ],
            [
                "PERCOLATION THEORY"
            ],
            [
                "TOPICS IN OPERATIONS RESEARCH"
            ],
            [
                "INTRODUCTION TO ECE"
            ],
            [
                "FIELDS, MATTER AND WAVES"
            ],
            [
                "INTEGRATED ELECTRONICS"
            ],
            [
                "ECE LABORATORY"
            ],
            [
                "MICROPROCESSOR LAB I"
            ],
            [
                "CONTROL SYSTEMS"
            ],
            [
                "BASIC COMMUNICATIONS"
            ],
            [
                "FIBER OPTICS AND PHOTONICS"
            ],
            [
                "ITERATIVE ALGORITHMS"
            ],
            [
                "INTRODUCTION TO NON-LINEAR SYSTEMS"
            ],
            [
                "TOPICS IN MEDICAL IMAGING SYSTEMS"
            ],
            [
                "PROCESSING AND RECOGNITION OF SPEECH"
            ],
            [
                "ANALOG AND DIGITAL VLSI SYSTEMS"
            ],
            [
                "SOLID STATE PHYSICS"
            ],
            [
                "NONLINEAR TECHNICAL IMAGE PROCESSING"
            ],
            [
                "RANDOM SIGNAL ANALYSIS"
            ],
            [
                "LANGUAGE AND MIND"
            ],
            [
                "MIND, BRAIN, COMPUTERS"
            ],
            [
                "SOUND STRUCTURES IN NATURAL LANGUAGE"
            ],
            [
                "FORMAL METHODS IN COGNITIVE SCIENCE"
            ],
            [
                "LANGUAGE DEVELOPMENT"
            ],
            [
                "THE HISTORY OF ROMANCE LANGUAGES"
            ],
            [
                "FORMAL METHODS IN COGNITIVE SCIENCE"
            ],
            [
                "COMP. MODELS OF SENTENCE PROCESSING"
            ],
            [
                "STATISTICAL ANALYSIS"
            ],
            [
                "DISCRETE MATHEMATICS"
            ],
            [
                "LINEAR ALGEBRA AND DIFFERENTIAL EQNS"
            ],
            [
                "PROBABILITY AND STATISTICS"
            ],
            [
                "INTRODUCTION TO OPTIMIZATION"
            ],
            [
                "APPLIED STATISTICS AND DATA ANALYSIS"
            ],
            [
                "INTRODUCTION TO PROBABILITY"
            ],
            [
                "COMBINATORIAL ANALYSIS"
            ],
            [
                "CIRCUITS"
            ],
            [
                "DIGITAL SIGNAL PROCESSING"
            ],
            [
                "ELECTROMAGNETIC WAVES"
            ],
            [
                "COGNITIVE NEUROSCIENCE"
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (course:`college_3.Course`)\nRETURN course.CName\nORDER BY course.Credits",
        "question": "What are the course names, ordered by credits?",
        "answers": [
            [
                "INTRODUCTION TO COMPUTER SCIENCE"
            ],
            [
                "SUPERCOMPUTING"
            ],
            [
                "COMPUTER SCIENCE SEMINAR"
            ],
            [
                "RESEARCH SEMINAR IN COGNITIVE PROCESSES"
            ],
            [
                "TOPICS IN APPLIED MATH"
            ],
            [
                "COMPUTER LITERACY"
            ],
            [
                "INTRO TO PROGRAMMING IN JAVA"
            ],
            [
                "INTRO TO PROGRAMMING IN C/C++"
            ],
            [
                "EXPLORING THE INTERNET"
            ],
            [
                "JAVA PROGRAMMING"
            ],
            [
                "UNIX SYSTEMS PROGRAMMING"
            ],
            [
                "DATA STRUCTURES in JAVA"
            ],
            [
                "MULTIMEDIA COMPUTING"
            ],
            [
                "COMPUTATIONAL MODELS"
            ],
            [
                "DATABASE SYSTEMS"
            ],
            [
                "COMPUTER SYSTEM FUNDAMENTALS"
            ],
            [
                "DISTRIBUTED SYSTEMS"
            ],
            [
                "INTRODUCTION TO ALGORITHMS"
            ],
            [
                "DATABASE SYSTEMS"
            ],
            [
                "COMPUTER SYSTEMS"
            ],
            [
                "DISTRIBUTED SYSTEMS"
            ],
            [
                "QUANTITATIVE MEDICAL COMPUTING"
            ],
            [
                "COMPUTER VISION"
            ],
            [
                "ALGORITHMS I"
            ],
            [
                "INTRO TO NATURAL LANGUAGE PROCESSING"
            ],
            [
                "COMPUTER SCIENCE INTERNSHIP"
            ],
            [
                "HIGH PERFORMANCE GRAPHICS AND MODELING"
            ],
            [
                "SEMINAR ON COMPUTATIONAL GEOMETRY"
            ],
            [
                "ACCOUNTING I"
            ],
            [
                "ACCOUNTING II"
            ],
            [
                "BUSINESS LAW I"
            ],
            [
                "BUSINESS LAW II"
            ],
            [
                "PROBABILITY THEORY I"
            ],
            [
                "STOCHASTIC PROCESSES II"
            ],
            [
                "STATISTICAL INFERENCE"
            ],
            [
                "FOUNDATIONS OF OPTIMIZATION"
            ],
            [
                "COMBINATORIAL ANALYSIS"
            ],
            [
                "NUMERICAL ANALYSIS"
            ],
            [
                "PERCOLATION THEORY"
            ],
            [
                "TOPICS IN OPERATIONS RESEARCH"
            ],
            [
                "INTRODUCTION TO ECE"
            ],
            [
                "FIELDS, MATTER AND WAVES"
            ],
            [
                "INTEGRATED ELECTRONICS"
            ],
            [
                "ECE LABORATORY"
            ],
            [
                "MICROPROCESSOR LAB I"
            ],
            [
                "CONTROL SYSTEMS"
            ],
            [
                "BASIC COMMUNICATIONS"
            ],
            [
                "FIBER OPTICS AND PHOTONICS"
            ],
            [
                "ITERATIVE ALGORITHMS"
            ],
            [
                "INTRODUCTION TO NON-LINEAR SYSTEMS"
            ],
            [
                "TOPICS IN MEDICAL IMAGING SYSTEMS"
            ],
            [
                "PROCESSING AND RECOGNITION OF SPEECH"
            ],
            [
                "ANALOG AND DIGITAL VLSI SYSTEMS"
            ],
            [
                "SOLID STATE PHYSICS"
            ],
            [
                "NONLINEAR TECHNICAL IMAGE PROCESSING"
            ],
            [
                "RANDOM SIGNAL ANALYSIS"
            ],
            [
                "LANGUAGE AND MIND"
            ],
            [
                "MIND, BRAIN, COMPUTERS"
            ],
            [
                "SOUND STRUCTURES IN NATURAL LANGUAGE"
            ],
            [
                "FORMAL METHODS IN COGNITIVE SCIENCE"
            ],
            [
                "LANGUAGE DEVELOPMENT"
            ],
            [
                "THE HISTORY OF ROMANCE LANGUAGES"
            ],
            [
                "FORMAL METHODS IN COGNITIVE SCIENCE"
            ],
            [
                "COMP. MODELS OF SENTENCE PROCESSING"
            ],
            [
                "STATISTICAL ANALYSIS"
            ],
            [
                "DISCRETE MATHEMATICS"
            ],
            [
                "LINEAR ALGEBRA AND DIFFERENTIAL EQNS"
            ],
            [
                "PROBABILITY AND STATISTICS"
            ],
            [
                "INTRODUCTION TO OPTIMIZATION"
            ],
            [
                "APPLIED STATISTICS AND DATA ANALYSIS"
            ],
            [
                "INTRODUCTION TO PROBABILITY"
            ],
            [
                "COMBINATORIAL ANALYSIS"
            ],
            [
                "CIRCUITS"
            ],
            [
                "DIGITAL SIGNAL PROCESSING"
            ],
            [
                "ELECTROMAGNETIC WAVES"
            ],
            [
                "COGNITIVE NEUROSCIENCE"
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (student:`college_3.Student`)\nRETURN student.Fname\nORDER BY student.Age DESC",
        "question": "Find the first name of students in the descending order of age.",
        "answers": [
            [
                "Bruce"
            ],
            [
                "Paul"
            ],
            [
                "Sarah"
            ],
            [
                "David"
            ],
            [
                "Ian"
            ],
            [
                "Shiela"
            ],
            [
                "Lisa"
            ],
            [
                "Dinesh"
            ],
            [
                "Jandy"
            ],
            [
                "Steven"
            ],
            [
                "Michael"
            ],
            [
                "David"
            ],
            [
                "Eric"
            ],
            [
                "Sarah"
            ],
            [
                "Eric"
            ],
            [
                "Tracy"
            ],
            [
                "Eric"
            ],
            [
                "George"
            ],
            [
                "Eric"
            ],
            [
                "Linda"
            ],
            [
                "Andy"
            ],
            [
                "Lisa"
            ],
            [
                "Charles"
            ],
            [
                "Arthur"
            ],
            [
                "Stacy"
            ],
            [
                "Mark"
            ],
            [
                "Paul"
            ],
            [
                "William"
            ],
            [
                "Eric"
            ],
            [
                "Derek"
            ],
            [
                "Mark"
            ],
            [
                "Michael"
            ],
            [
                "Jun"
            ],
            [
                "Susan"
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (student:`college_3.Student`)\nRETURN student.Fname\nORDER BY student.Age DESC",
        "question": "What are the first names of students, ordered by age from greatest to least?",
        "answers": [
            [
                "Bruce"
            ],
            [
                "Paul"
            ],
            [
                "Sarah"
            ],
            [
                "David"
            ],
            [
                "Ian"
            ],
            [
                "Shiela"
            ],
            [
                "Lisa"
            ],
            [
                "Dinesh"
            ],
            [
                "Jandy"
            ],
            [
                "Steven"
            ],
            [
                "Michael"
            ],
            [
                "David"
            ],
            [
                "Eric"
            ],
            [
                "Sarah"
            ],
            [
                "Eric"
            ],
            [
                "Tracy"
            ],
            [
                "Eric"
            ],
            [
                "George"
            ],
            [
                "Eric"
            ],
            [
                "Linda"
            ],
            [
                "Andy"
            ],
            [
                "Lisa"
            ],
            [
                "Charles"
            ],
            [
                "Arthur"
            ],
            [
                "Stacy"
            ],
            [
                "Mark"
            ],
            [
                "Paul"
            ],
            [
                "William"
            ],
            [
                "Eric"
            ],
            [
                "Derek"
            ],
            [
                "Mark"
            ],
            [
                "Michael"
            ],
            [
                "Jun"
            ],
            [
                "Susan"
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (T1:`college_3.Department`)-[T2:`college_3.Member_of`]-()\nWITH T1, count(T1.DNO) AS cnt\nRETURN T1.DName\nORDER BY cnt ASC\nLIMIT 1",
        "question": "Find the name of the department that has the fewest members.",
        "answers": [
            [
                "Cognitive Science"
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (T1:`college_3.Department`)-[T2:`college_3.Member_of`]-()\nWITH T1, count(T1.DNO) AS cnt\nRETURN T1.DName\nORDER BY cnt ASC\nLIMIT 1",
        "question": "What is the name of the department with the fewest members?",
        "answers": [
            [
                "Cognitive Science"
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (faculty:`college_3.Faculty`)\nRETURN faculty.Rank\nORDER BY faculty.Rank ASC\nLIMIT 1",
        "question": "Find the rank of the faculty that the fewest faculties belong to.",
        "answers": [
            [
                "AssocProf"
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (faculty:`college_3.Faculty`)\nRETURN faculty.Rank\nORDER BY faculty.Rank ASC\nLIMIT 1",
        "question": "What is the least common faculty rank?",
        "answers": [
            [
                "AssocProf"
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (T1:`college_3.Course`)-[]-(T2:`college_3.Enrolled_in`)\nWITH count(*) AS count, T1.CName AS CName\nWHERE count  >= 5\nRETURN CName",
        "question": "What are the name of courses that have at least five enrollments?",
        "answers": [
            [
                "INTRO TO PROGRAMMING IN JAVA"
            ],
            [
                "EXPLORING THE INTERNET"
            ],
            [
                "DATA STRUCTURES in JAVA"
            ],
            [
                "MULTIMEDIA COMPUTING"
            ],
            [
                "SUPERCOMPUTING"
            ],
            [
                "DATABASE SYSTEMS"
            ],
            [
                "COMPUTER SYSTEM FUNDAMENTALS"
            ],
            [
                "DISTRIBUTED SYSTEMS"
            ],
            [
                "QUANTITATIVE MEDICAL COMPUTING"
            ],
            [
                "COMPUTER VISION"
            ],
            [
                "ALGORITHMS I"
            ],
            [
                "INTRO TO NATURAL LANGUAGE PROCESSING"
            ],
            [
                "APPLIED STATISTICS AND DATA ANALYSIS"
            ],
            [
                "INTRODUCTION TO PROBABILITY"
            ],
            [
                "COMBINATORIAL ANALYSIS"
            ],
            [
                "CIRCUITS"
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (T1:`college_3.Course`)-[]-(T2:`college_3.Enrolled_in`)\nWITH count(*) AS count, T1.CName AS CName\nWHERE count  >= 5\nRETURN CName",
        "question": "Give the names of the courses with at least five enrollments.",
        "answers": [
            [
                "INTRO TO PROGRAMMING IN JAVA"
            ],
            [
                "EXPLORING THE INTERNET"
            ],
            [
                "DATA STRUCTURES in JAVA"
            ],
            [
                "MULTIMEDIA COMPUTING"
            ],
            [
                "SUPERCOMPUTING"
            ],
            [
                "DATABASE SYSTEMS"
            ],
            [
                "COMPUTER SYSTEM FUNDAMENTALS"
            ],
            [
                "DISTRIBUTED SYSTEMS"
            ],
            [
                "QUANTITATIVE MEDICAL COMPUTING"
            ],
            [
                "COMPUTER VISION"
            ],
            [
                "ALGORITHMS I"
            ],
            [
                "INTRO TO NATURAL LANGUAGE PROCESSING"
            ],
            [
                "APPLIED STATISTICS AND DATA ANALYSIS"
            ],
            [
                "INTRODUCTION TO PROBABILITY"
            ],
            [
                "COMBINATORIAL ANALYSIS"
            ],
            [
                "CIRCUITS"
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (T1:`college_3.Course`)-[]-(T2:`college_3.Faculty`)\nWHERE T1.CName = \"COMPUTER LITERACY\"\nRETURN T2.Fname,T2.Lname",
        "question": "Find the first name and last name of the instructor of course that has course name",
        "answers": [
            [
                "Louis",
                "Beach"
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (T1:`college_3.Course`)-[]-(T2:`college_3.Faculty`)\nWHERE T1.CName = \"COMPUTER LITERACY\"\nRETURN T2.Fname,T2.Lname",
        "question": "What is the full name of the instructor who has a course named COMPUTER LITERACY?",
        "answers": [
            [
                "Louis",
                "Beach"
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (T1:`college_3.Course`)-[]-(T2:`college_3.Department`)\nWHERE T1.CName = \"INTRODUCTION TO COMPUTER SCIENCE\"\nRETURN T2.DName,T2.Room",
        "question": "Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE.",
        "answers": [
            [
                "Computer Science",
                "224"
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (T1:`college_3.Course`)-[]-(T2:`college_3.Department`)\nWHERE T1.CName = \"INTRODUCTION TO COMPUTER SCIENCE\"\nRETURN T2.DName,T2.Room",
        "question": "What are the department name and room for the course INTRODUCTION TO COMPUTER SCIENCE?",
        "answers": [
            [
                "Computer Science",
                "224"
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (T1:`college_3.Faculty`)-[T2:`college_3.Member_of`]-()\nWHERE T2.DNO = 520\nRETURN T1.Fname,T1.Lname",
        "question": "Find the full names of faculties who are members of department with department number 520.",
        "answers": [
            [
                "Thordur",
                "Runolfsson"
            ],
            [
                "Frederic",
                "Davidson"
            ],
            [
                "William",
                "Brody"
            ],
            [
                "Gerard",
                "Meyer"
            ],
            [
                "Alexander",
                "Kaplan"
            ],
            [
                "William",
                "Byrne"
            ],
            [
                "Pablo",
                "Iglesias"
            ],
            [
                "John",
                "Goutsias"
            ],
            [
                "Wilson",
                "Rugh"
            ],
            [
                "Frederick",
                "Jelinek"
            ],
            [
                "Charles",
                "Westgate"
            ],
            [
                "Howard",
                "Weinert"
            ],
            [
                "Lawrence",
                "Wolff"
            ],
            [
                "Gert",
                "Cauwenberghs"
            ],
            [
                "Andreas",
                "Andreou"
            ],
            [
                "Oliver",
                "Collins"
            ],
            [
                "Brian",
                "Hughes"
            ],
            [
                "Richard",
                "Joseph"
            ],
            [
                "Jacob",
                "Khurgin"
            ],
            [
                "Jerry",
                "Prince"
            ],
            [
                "Robert",
                "Glaser"
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (T1:`college_3.Faculty`)-[T2:`college_3.Member_of`]-()\nWHERE T2.DNO = 520\nRETURN T1.Fname,T1.Lname",
        "question": "What are the full names of faculty members who are a part of department 520?",
        "answers": [
            [
                "Thordur",
                "Runolfsson"
            ],
            [
                "Frederic",
                "Davidson"
            ],
            [
                "William",
                "Brody"
            ],
            [
                "Gerard",
                "Meyer"
            ],
            [
                "Alexander",
                "Kaplan"
            ],
            [
                "William",
                "Byrne"
            ],
            [
                "Pablo",
                "Iglesias"
            ],
            [
                "John",
                "Goutsias"
            ],
            [
                "Wilson",
                "Rugh"
            ],
            [
                "Frederick",
                "Jelinek"
            ],
            [
                "Charles",
                "Westgate"
            ],
            [
                "Howard",
                "Weinert"
            ],
            [
                "Lawrence",
                "Wolff"
            ],
            [
                "Gert",
                "Cauwenberghs"
            ],
            [
                "Andreas",
                "Andreou"
            ],
            [
                "Oliver",
                "Collins"
            ],
            [
                "Brian",
                "Hughes"
            ],
            [
                "Richard",
                "Joseph"
            ],
            [
                "Jacob",
                "Khurgin"
            ],
            [
                "Jerry",
                "Prince"
            ],
            [
                "Robert",
                "Glaser"
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (T2:`college_3.Student`)-[T1:`college_3.Minor_in`]-()\nWHERE T1.DNO = 140\nRETURN T2.Fname,T2.LName",
        "question": "What are the first names and last names of the students that minor in the department with DNO 140.",
        "answers": [
            [
                "Susan",
                "Lee"
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (T2:`college_3.Student`)-[T1:`college_3.Minor_in`]-()\nWHERE T1.DNO = 140\nRETURN T2.Fname,T2.LName",
        "question": "What are the full names of students minoring in department 140?",
        "answers": [
            [
                "Susan",
                "Lee"
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (T1:`college_3.Department`)-[T3:`college_3.Member_of`]-(T2:`college_3.Faculty`)\nWHERE T1.DName = \"Computer Science\"\nRETURN T2.Lname",
        "question": "Find the last names of faculties who are members of computer science department.",
        "answers": [
            [
                "Yarowsky"
            ],
            [
                "Smith"
            ],
            [
                "Kumar"
            ],
            [
                "Houlahan"
            ],
            [
                "Angelopoulou"
            ],
            [
                "Wolff"
            ],
            [
                "Salzberg"
            ],
            [
                "Jelinek"
            ],
            [
                "Jones"
            ],
            [
                "Delcher"
            ],
            [
                "Masson"
            ],
            [
                "Brill"
            ],
            [
                "Giuliano"
            ],
            [
                "Amir"
            ],
            [
                "Awerbuch"
            ],
            [
                "Beach"
            ],
            [
                "Kosaraju"
            ],
            [
                "Goodrich"
            ],
            [
                "Brent"
            ],
            [
                "Taylor"
            ]
        ]
    },
    {
        "db_id": "college_3",
        "query": "MATCH (T1:`college_3.Department`)-[T3:`college_3.Member_of`]-(T2:`college_3.Faculty`)\nWHERE T1.DName = \"Computer Science\"\nRETURN T2.Lname",
        "question": "What are the last names of faculty who are part of the computer science department?",
        "answers": [
            [
                "Yarowsky"
            ],
            [
                "Smith"
            ],
            [
                "Kumar"
            ],
            [
                "Houlahan"
            ],
            [
                "Angelopoulou"
            ],
            [
                "Wolff"
            ],
            [
                "Salzberg"
            ],
            [
                "Jelinek"
            ],
            [
                "Jones"
            ],
            [
                "Delcher"
            ],
            [
                "Masson"
            ],
            [
                "Brill"
            ],
            [
                "Giuliano"
            ],
            [
                "Amir"
            ],
            [
                "Awerbuch"
            ],
            [
                "Beach"
            ],
            [
                "Kosaraju"
            ],
            [
                "Goodrich"
            ],
            [
                "Brent"
            ],
            [
                "Taylor"
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (products:`department_store.Products`)\nRETURN products.product_id,products.product_type_code\nORDER BY products.product_price\nLIMIT 1",
        "question": "What are the product id and product type of the cheapest product?",
        "answers": [
            [
                6,
                "Clothes"
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (products:`department_store.Products`)\nRETURN products.product_id,products.product_type_code\nORDER BY products.product_price\nLIMIT 1",
        "question": "Give the id and product type of the product with the lowest price.",
        "answers": [
            [
                6,
                "Clothes"
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (products:`department_store.Products`)\nRETURN count(DISTINCT products.product_type_code)",
        "question": "Find the number of different product types.",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (products:`department_store.Products`)\nRETURN count(DISTINCT products.product_type_code)",
        "question": "Count the number of distinct product types.",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (T1:`department_store.Addresses`)-[T2:`department_store.Customer_Addresses`]-()\nWHERE T2.customer_id = 10\nRETURN T1.address_details",
        "question": "Return the address of customer 10.",
        "answers": [
            [
                "36594 O'Keefe Lock\nNew Cali, RI 42319"
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (T1:`department_store.Addresses`)-[T2:`department_store.Customer_Addresses`]-()\nWHERE T2.customer_id = 10\nRETURN T1.address_details",
        "question": "What is the address for the customer with id 10?",
        "answers": [
            [
                "36594 O'Keefe Lock\nNew Cali, RI 42319"
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (T1:`department_store.Staff`)-[T2:`department_store.Staff_Department_Assignments`]-()\nWHERE T2.job_title_code = \"Department Manager\"\nRETURN T1.staff_id,T1.staff_gender",
        "question": "What are the staff ids and genders of all staffs whose job title is Department Manager?",
        "answers": [
            [
                5,
                "0"
            ],
            [
                6,
                "1"
            ],
            [
                15,
                "1"
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (T1:`department_store.Staff`)-[T2:`department_store.Staff_Department_Assignments`]-()\nWHERE T2.job_title_code = \"Department Manager\"\nRETURN T1.staff_id,T1.staff_gender",
        "question": "Return the staff ids and genders for any staff with the title Department Manager.",
        "answers": [
            [
                5,
                "0"
            ],
            [
                6,
                "1"
            ],
            [
                15,
                "1"
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (customers:`department_store.Customers`)\nRETURN customers.payment_method_code,count(*)",
        "question": "For each payment method, return how many customers use it.",
        "answers": [
            [
                "Credit Card",
                10
            ],
            [
                "Direct Debit",
                5
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (customers:`department_store.Customers`)\nRETURN customers.payment_method_code,count(*)",
        "question": "How many customers use each payment method?",
        "answers": [
            [
                "Credit Card",
                10
            ],
            [
                "Direct Debit",
                5
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (T1:`department_store.Customers`)-[]-(T2:`department_store.Customer_Orders`)\nWITH T1, count(T1.customer_id) AS cnt\nRETURN T1.customer_name,T1.customer_phone,T1.customer_email\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What are the name, phone number and email address of the customer who made the largest number of orders?",
        "answers": [
            [
                "Lexus",
                "+08(3)8056580281",
                "gbrekke@example.com"
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (T1:`department_store.Customers`)-[]-(T2:`department_store.Customer_Orders`)\nWITH T1, count(T1.customer_id) AS cnt\nRETURN T1.customer_name,T1.customer_phone,T1.customer_email\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Return the name, phone number and email address for the customer with the most orders.",
        "answers": [
            [
                "Lexus",
                "+08(3)8056580281",
                "gbrekke@example.com"
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (products:`department_store.Products`)\nRETURN products.product_type_code,avg(products.product_price)",
        "question": "What is the average price for each type of product?",
        "answers": [
            [
                "Clothes",
                715.5366666666666
            ],
            [
                "Hardware",
                796.0416666666666
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (products:`department_store.Products`)\nRETURN products.product_type_code,avg(products.product_price)",
        "question": "Return the average price for each product type.",
        "answers": [
            [
                "Clothes",
                715.5366666666666
            ],
            [
                "Hardware",
                796.0416666666666
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (T1:`department_store.Staff`)-[T2:`department_store.Staff_Department_Assignments`]-()\nRETURN T1.staff_name,T2.job_title_code\nORDER BY T2.date_assigned_to DESC\nLIMIT 1",
        "question": "What is the name and job title of the staff who was assigned the latest?",
        "answers": [
            [
                "Katelynn",
                "Clerical Staff"
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (T1:`department_store.Staff`)-[T2:`department_store.Staff_Department_Assignments`]-()\nRETURN T1.staff_name,T2.job_title_code\nORDER BY T2.date_assigned_to DESC\nLIMIT 1",
        "question": "Return the name and job title of the staff with the latest date assigned.",
        "answers": [
            [
                "Katelynn",
                "Clerical Staff"
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (T2:`department_store.Products`)-[T1:`department_store.Product_Suppliers`]-()\nWHERE T1.supplier_id = 3\nRETURN T2.product_type_code,T2.product_name,T2.product_price",
        "question": "Give me the product type, name and price for all the products supplied by supplier id 3.",
        "answers": [
            [
                "Clothes",
                "black jeans",
                695.16
            ],
            [
                "Clothes",
                "blue jeans",
                939.57
            ],
            [
                "Hardware",
                "mouse",
                803.74
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (T2:`department_store.Products`)-[T1:`department_store.Product_Suppliers`]-()\nWHERE T1.supplier_id = 3\nRETURN T2.product_type_code,T2.product_name,T2.product_price",
        "question": "Return the product type, name, and price for products supplied by supplier 3.",
        "answers": [
            [
                "Clothes",
                "black jeans",
                695.16
            ],
            [
                "Clothes",
                "blue jeans",
                939.57
            ],
            [
                "Hardware",
                "mouse",
                803.74
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH ()-[staff_department_assignments:`department_store.Staff_Department_Assignments`]-()\nRETURN staff_department_assignments.department_id\nORDER BY staff_department_assignments.department_id\nLIMIT 1",
        "question": "What is the id of the department with the least number of staff?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH ()-[staff_department_assignments:`department_store.Staff_Department_Assignments`]-()\nRETURN staff_department_assignments.department_id\nORDER BY staff_department_assignments.department_id\nLIMIT 1",
        "question": "Return the id of the department with the fewest staff assignments.",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (products:`department_store.Products`)\nRETURN products.product_type_code,max(products.product_price),min(products.product_price)",
        "question": "For each product type, return the maximum and minimum price.",
        "answers": [
            [
                "Clothes",
                939.57,
                408.82
            ],
            [
                "Hardware",
                971.44,
                612.46
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (products:`department_store.Products`)\nRETURN products.product_type_code,max(products.product_price),min(products.product_price)",
        "question": "What are the maximum and minimum product prices for each product type?",
        "answers": [
            [
                "Clothes",
                939.57,
                408.82
            ],
            [
                "Hardware",
                971.44,
                612.46
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (products:`department_store.Products`)\nWHERE 600<=products.product_price<=700\nRETURN products.product_name,products.product_id",
        "question": "Return the names and ids of all products whose price is between 600 and 700.",
        "answers": [
            [
                "yellow jeans",
                2
            ],
            [
                "black jeans",
                3
            ],
            [
                "blue topping",
                9
            ],
            [
                "keyboard",
                13
            ],
            [
                "speaker",
                14
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (products:`department_store.Products`)\nWHERE 600<=products.product_price<=700\nRETURN products.product_name,products.product_id",
        "question": "What are the names and ids of products costing between 600 and 700?",
        "answers": [
            [
                "yellow jeans",
                2
            ],
            [
                "black jeans",
                3
            ],
            [
                "blue topping",
                9
            ],
            [
                "keyboard",
                13
            ],
            [
                "speaker",
                14
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (T1:`department_store.Staff`)-[T2:`department_store.Staff_Department_Assignments`]-()\nWITH count(*) AS count, T1.staff_name AS staff_name\nWHERE count  > 1\nRETURN staff_name",
        "question": "List the name of staff who has been assigned multiple jobs.",
        "answers": [
            [
                "Malika"
            ],
            [
                "Tyson"
            ],
            [
                "Vito"
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (T1:`department_store.Staff`)-[T2:`department_store.Staff_Department_Assignments`]-()\nWITH count(*) AS count, T1.staff_name AS staff_name\nWHERE count  > 1\nRETURN staff_name",
        "question": "What are the names of staff who have been assigned multiple jobs?",
        "answers": [
            [
                "Malika"
            ],
            [
                "Tyson"
            ],
            [
                "Vito"
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (T1:`department_store.Suppliers`)-[T2:`department_store.Supplier_Addresses`]-(T3:`department_store.Addresses`)\nRETURN T1.supplier_name,T1.supplier_phone\nORDER BY T3.address_details",
        "question": "List the name and phone number of all suppliers in the alphabetical order of their addresses.",
        "answers": [
            [
                "AB Store",
                "1-483-283-4742"
            ],
            [
                "Tesco",
                "287-071-1153x254"
            ],
            [
                "Audi",
                "1-432-960-2402x1734"
            ],
            [
                "Tesco",
                "287-071-1153x254"
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (T1:`department_store.Suppliers`)-[T2:`department_store.Supplier_Addresses`]-(T3:`department_store.Addresses`)\nRETURN T1.supplier_name,T1.supplier_phone\nORDER BY T3.address_details",
        "question": "What are the names and phone numbers for all suppliers, sorted in alphabetical order of their addressed?",
        "answers": [
            [
                "AB Store",
                "1-483-283-4742"
            ],
            [
                "Tesco",
                "287-071-1153x254"
            ],
            [
                "Audi",
                "1-432-960-2402x1734"
            ],
            [
                "Tesco",
                "287-071-1153x254"
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (products:`department_store.Products`)\nWHERE products.product_price < 600 OR products.product_price > 900\nRETURN products.product_id,products.product_name",
        "question": "What are id and name of the products whose price is lower than 600 or higher than 900?",
        "answers": [
            [
                4,
                "blue jeans"
            ],
            [
                5,
                "red jeans"
            ],
            [
                6,
                "red topping"
            ],
            [
                7,
                "black topping"
            ],
            [
                8,
                "yellow topping"
            ],
            [
                12,
                "drive"
            ],
            [
                15,
                "mic"
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (products:`department_store.Products`)\nWHERE products.product_price < 600 OR products.product_price > 900\nRETURN products.product_id,products.product_name",
        "question": "Give the ids and names of products with price lower than 600 or higher than 900.",
        "answers": [
            [
                4,
                "blue jeans"
            ],
            [
                5,
                "red jeans"
            ],
            [
                6,
                "red topping"
            ],
            [
                7,
                "black topping"
            ],
            [
                8,
                "yellow topping"
            ],
            [
                12,
                "drive"
            ],
            [
                15,
                "mic"
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (customers:`department_store.Customers`)\nRETURN max(customers.customer_code),min(customers.customer_code)",
        "question": "What is the largest and smallest customer codes?",
        "answers": [
            [
                "980",
                "172"
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (customers:`department_store.Customers`)\nRETURN max(customers.customer_code),min(customers.customer_code)",
        "question": "Return the maximum and minimum customer codes.",
        "answers": [
            [
                "980",
                "172"
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (T1:`department_store.Suppliers`)-[T2:`department_store.Product_Suppliers`]-(T3:`department_store.Products`)\nWHERE T3.product_name = \"red jeans\"\nRETURN DISTINCT T1.supplier_name,T1.supplier_phone",
        "question": "List the names and phone numbers of all the distinct suppliers who supply red jeans.",
        "answers": [
            [
                "AB Store",
                "1-483-283-4742"
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (T1:`department_store.Suppliers`)-[T2:`department_store.Product_Suppliers`]-(T3:`department_store.Products`)\nWHERE T3.product_name = \"red jeans\"\nRETURN DISTINCT T1.supplier_name,T1.supplier_phone",
        "question": "What are the distinct names and phone numbers for suppliers who have red jeans?",
        "answers": [
            [
                "AB Store",
                "1-483-283-4742"
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (products:`department_store.Products`)\nRETURN max(products.product_price),min(products.product_price),products.product_type_code\nORDER BY products.product_type_code",
        "question": "What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?",
        "answers": [
            [
                939.57,
                408.82,
                "Clothes"
            ],
            [
                971.44,
                612.46,
                "Hardware"
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (products:`department_store.Products`)\nRETURN max(products.product_price),min(products.product_price),products.product_type_code\nORDER BY products.product_type_code",
        "question": "Give the maximum and minimum product prices for each product type, grouped and ordered by product type.",
        "answers": [
            [
                939.57,
                408.82,
                "Clothes"
            ],
            [
                971.44,
                612.46,
                "Hardware"
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (products:`department_store.Products`)\nWHERE products.product_type_code = 'Clothes'\nRETURN avg(products.product_price)",
        "question": "Find the average price of all product clothes.",
        "answers": [
            [
                715.5366666666666
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (products:`department_store.Products`)\nWHERE products.product_type_code = 'Clothes'\nRETURN avg(products.product_price)",
        "question": "What is the average price of clothes?",
        "answers": [
            [
                715.5366666666666
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (products:`department_store.Products`)\nWHERE products.product_type_code = 'Hardware'\nRETURN products.product_name\nORDER BY products.product_price DESC\nLIMIT 1",
        "question": "Find the name of the most expensive hardware product.",
        "answers": [
            [
                "mic"
            ]
        ]
    },
    {
        "db_id": "department_store",
        "query": "MATCH (products:`department_store.Products`)\nWHERE products.product_type_code = 'Hardware'\nRETURN products.product_name\nORDER BY products.product_price DESC\nLIMIT 1",
        "question": "What is the name of the hardware product with the greatest price?",
        "answers": [
            [
                "mic"
            ]
        ]
    },
    {
        "db_id": "aircraft",
        "query": "MATCH (aircraft:`aircraft.aircraft`)\nRETURN count(*)",
        "question": "How many aircrafts are there?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "aircraft",
        "query": "MATCH (aircraft:`aircraft.aircraft`)\nRETURN count(*)",
        "question": "What is the number of aircraft?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "aircraft",
        "query": "MATCH (aircraft:`aircraft.aircraft`)\nRETURN aircraft.Description",
        "question": "List the description of all aircrafts.",
        "answers": [
            [
                "Light utility helicopter"
            ],
            [
                "Turboshaft utility helicopter"
            ],
            [
                "Tandem rotor helicopter"
            ],
            [
                "Heavy-lift helicopter"
            ],
            [
                "Heavy-lift helicopter"
            ]
        ]
    },
    {
        "db_id": "aircraft",
        "query": "MATCH (aircraft:`aircraft.aircraft`)\nRETURN aircraft.Description",
        "question": "What are the descriptions for the aircrafts?",
        "answers": [
            [
                "Light utility helicopter"
            ],
            [
                "Turboshaft utility helicopter"
            ],
            [
                "Tandem rotor helicopter"
            ],
            [
                "Heavy-lift helicopter"
            ],
            [
                "Heavy-lift helicopter"
            ]
        ]
    },
    {
        "db_id": "aircraft",
        "query": "MATCH (airport:`aircraft.airport`)\nRETURN avg(airport.International_Passengers)",
        "question": "What is the average number of international passengers of all airports?",
        "answers": [
            [
                16443156.6
            ]
        ]
    },
    {
        "db_id": "aircraft",
        "query": "MATCH (airport:`aircraft.airport`)\nRETURN avg(airport.International_Passengers)",
        "question": "What is the average number of international passengers for an airport?",
        "answers": [
            [
                16443156.6
            ]
        ]
    },
    {
        "db_id": "aircraft",
        "query": "MATCH (airport:`aircraft.airport`)\nWHERE airport.Airport_Name = 'London Heathrow'\nRETURN airport.International_Passengers,airport.Domestic_Passengers",
        "question": "What are the number of international and domestic passengers of the airport named London \"Heathrow\"?",
        "answers": [
            [
                61344438.0,
                5562516.0
            ]
        ]
    },
    {
        "db_id": "aircraft",
        "query": "MATCH (airport:`aircraft.airport`)\nWHERE airport.Airport_Name = 'London Heathrow'\nRETURN airport.International_Passengers,airport.Domestic_Passengers",
        "question": "How many international and domestic passengers are there in the airport London Heathrow?",
        "answers": [
            [
                61344438.0,
                5562516.0
            ]
        ]
    },
    {
        "db_id": "aircraft",
        "query": "MATCH (airport:`aircraft.airport`)\nRETURN max(airport.Transit_Passengers),min(airport.Transit_Passengers)",
        "question": "What are the maximum and minimum number of transit passengers of all aiports.",
        "answers": [
            [
                156246.0,
                4395.0
            ]
        ]
    },
    {
        "db_id": "aircraft",
        "query": "MATCH (airport:`aircraft.airport`)\nRETURN max(airport.Transit_Passengers),min(airport.Transit_Passengers)",
        "question": "What is the maximum and mininum number of transit passengers for all airports?",
        "answers": [
            [
                156246.0,
                4395.0
            ]
        ]
    },
    {
        "db_id": "aircraft",
        "query": "MATCH (pilot:`aircraft.pilot`)\nWHERE pilot.Age >= 25\nRETURN pilot.Name",
        "question": "What are the name of pilots aged 25 or older?",
        "answers": [
            [
                "Ayana Spencer"
            ],
            [
                "Ellen Ledner III"
            ],
            [
                "Elisha Hickle V"
            ],
            [
                "Dr. Jade Bradtke V"
            ],
            [
                "Winnifred Boyle"
            ],
            [
                "Della Lindgren"
            ],
            [
                "Maxwell Graham"
            ],
            [
                "Blaise Muller"
            ],
            [
                "Baylee Steuber"
            ]
        ]
    },
    {
        "db_id": "aircraft",
        "query": "MATCH (pilot:`aircraft.pilot`)\nWHERE pilot.Age >= 25\nRETURN pilot.Name",
        "question": "what is the name of every pilot who is at least 25 years old?",
        "answers": [
            [
                "Ayana Spencer"
            ],
            [
                "Ellen Ledner III"
            ],
            [
                "Elisha Hickle V"
            ],
            [
                "Dr. Jade Bradtke V"
            ],
            [
                "Winnifred Boyle"
            ],
            [
                "Della Lindgren"
            ],
            [
                "Maxwell Graham"
            ],
            [
                "Blaise Muller"
            ],
            [
                "Baylee Steuber"
            ]
        ]
    },
    {
        "db_id": "aircraft",
        "query": "MATCH (pilot:`aircraft.pilot`)\nRETURN pilot.Name\nORDER BY pilot.Name ASC",
        "question": "List all pilot names in ascending alphabetical order.",
        "answers": [
            [
                "Ayana Spencer"
            ],
            [
                "Baylee Steuber"
            ],
            [
                "Blaise Muller"
            ],
            [
                "Della Lindgren"
            ],
            [
                "Dr. Jade Bradtke V"
            ],
            [
                "Elisha Hickle V"
            ],
            [
                "Ellen Ledner III"
            ],
            [
                "Katheryn Gorczany IV"
            ],
            [
                "Maxwell Graham"
            ],
            [
                "Mr. Cristian Halvorson II"
            ],
            [
                "Prof. Zackery Collins"
            ],
            [
                "Winnifred Boyle"
            ]
        ]
    },
    {
        "db_id": "aircraft",
        "query": "MATCH (pilot:`aircraft.pilot`)\nRETURN pilot.Name\nORDER BY pilot.Name ASC",
        "question": "What are the names of the pilots in alphabetical order?",
        "answers": [
            [
                "Ayana Spencer"
            ],
            [
                "Baylee Steuber"
            ],
            [
                "Blaise Muller"
            ],
            [
                "Della Lindgren"
            ],
            [
                "Dr. Jade Bradtke V"
            ],
            [
                "Elisha Hickle V"
            ],
            [
                "Ellen Ledner III"
            ],
            [
                "Katheryn Gorczany IV"
            ],
            [
                "Maxwell Graham"
            ],
            [
                "Mr. Cristian Halvorson II"
            ],
            [
                "Prof. Zackery Collins"
            ],
            [
                "Winnifred Boyle"
            ]
        ]
    },
    {
        "db_id": "aircraft",
        "query": "MATCH (pilot:`aircraft.pilot`)\nWHERE pilot.Age <= 30\nRETURN pilot.Name\nORDER BY pilot.Name DESC",
        "question": "List names of all pilot aged 30 or younger in descending alphabetical order.",
        "answers": [
            [
                "Winnifred Boyle"
            ],
            [
                "Prof. Zackery Collins"
            ],
            [
                "Mr. Cristian Halvorson II"
            ],
            [
                "Maxwell Graham"
            ],
            [
                "Katheryn Gorczany IV"
            ],
            [
                "Dr. Jade Bradtke V"
            ],
            [
                "Della Lindgren"
            ],
            [
                "Baylee Steuber"
            ],
            [
                "Ayana Spencer"
            ]
        ]
    },
    {
        "db_id": "aircraft",
        "query": "MATCH (pilot:`aircraft.pilot`)\nWHERE pilot.Age <= 30\nRETURN pilot.Name\nORDER BY pilot.Name DESC",
        "question": "What are the names of all pilots 30 years old or young in descending alphabetical order?",
        "answers": [
            [
                "Winnifred Boyle"
            ],
            [
                "Prof. Zackery Collins"
            ],
            [
                "Mr. Cristian Halvorson II"
            ],
            [
                "Maxwell Graham"
            ],
            [
                "Katheryn Gorczany IV"
            ],
            [
                "Dr. Jade Bradtke V"
            ],
            [
                "Della Lindgren"
            ],
            [
                "Baylee Steuber"
            ],
            [
                "Ayana Spencer"
            ]
        ]
    },
    {
        "db_id": "aircraft",
        "query": "MATCH (T1:`aircraft.aircraft`)-[T2:`aircraft.airport_aircraft`]-(T3:`aircraft.airport`)\nWHERE T3.Airport_Name = 'London Gatwick'\nRETURN T1.Aircraft",
        "question": "Please show the names of aircrafts associated with airport with name \"London Gatwick\".",
        "answers": [
            [
                "Robinson R-22"
            ]
        ]
    },
    {
        "db_id": "aircraft",
        "query": "MATCH (T1:`aircraft.aircraft`)-[T2:`aircraft.airport_aircraft`]-(T3:`aircraft.airport`)\nWHERE T3.Airport_Name = 'London Gatwick'\nRETURN T1.Aircraft",
        "question": "What are the names of all the aircrafts associated with London Gatwick airport?",
        "answers": [
            [
                "Robinson R-22"
            ]
        ]
    },
    {
        "db_id": "aircraft",
        "query": "MATCH (T1:`aircraft.aircraft`)-[T2:`aircraft.airport_aircraft`]-(T3:`aircraft.airport`)\nWHERE T3.Total_Passengers > 10000000\nRETURN T1.Aircraft,T1.Description",
        "question": "Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000.",
        "answers": [
            [
                "Robinson R-22",
                "Light utility helicopter"
            ],
            [
                "Bell 206B3 JetRanger",
                "Turboshaft utility helicopter"
            ]
        ]
    },
    {
        "db_id": "aircraft",
        "query": "MATCH (T1:`aircraft.aircraft`)-[T2:`aircraft.airport_aircraft`]-(T3:`aircraft.airport`)\nWHERE T3.Total_Passengers > 10000000\nRETURN T1.Aircraft,T1.Description",
        "question": "What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?",
        "answers": [
            [
                "Robinson R-22",
                "Light utility helicopter"
            ],
            [
                "Bell 206B3 JetRanger",
                "Turboshaft utility helicopter"
            ]
        ]
    },
    {
        "db_id": "aircraft",
        "query": "MATCH (pilot:`aircraft.pilot`)\nRETURN pilot.Name\nORDER BY pilot.Age DESC",
        "question": "List names of all pilot in descending order of age.",
        "answers": [
            [
                "Elisha Hickle V"
            ],
            [
                "Blaise Muller"
            ],
            [
                "Ellen Ledner III"
            ],
            [
                "Winnifred Boyle"
            ],
            [
                "Baylee Steuber"
            ],
            [
                "Della Lindgren"
            ],
            [
                "Dr. Jade Bradtke V"
            ],
            [
                "Maxwell Graham"
            ],
            [
                "Ayana Spencer"
            ],
            [
                "Prof. Zackery Collins"
            ],
            [
                "Mr. Cristian Halvorson II"
            ],
            [
                "Katheryn Gorczany IV"
            ]
        ]
    },
    {
        "db_id": "aircraft",
        "query": "MATCH (pilot:`aircraft.pilot`)\nRETURN pilot.Name\nORDER BY pilot.Age DESC",
        "question": "What are the names of all pilots listed by descending age?",
        "answers": [
            [
                "Elisha Hickle V"
            ],
            [
                "Blaise Muller"
            ],
            [
                "Ellen Ledner III"
            ],
            [
                "Winnifred Boyle"
            ],
            [
                "Baylee Steuber"
            ],
            [
                "Della Lindgren"
            ],
            [
                "Dr. Jade Bradtke V"
            ],
            [
                "Maxwell Graham"
            ],
            [
                "Ayana Spencer"
            ],
            [
                "Prof. Zackery Collins"
            ],
            [
                "Mr. Cristian Halvorson II"
            ],
            [
                "Katheryn Gorczany IV"
            ]
        ]
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "MATCH (T1:`local_govt_and_lot.Properties`)-[]-(T2:`local_govt_and_lot.Residents`)\nRETURN T1.property_id,count(*)",
        "question": "How many residents does each property have? List property id and resident count.",
        "answers": [
            [
                107,
                2
            ],
            [
                108,
                1
            ],
            [
                120,
                1
            ],
            [
                373,
                1
            ],
            [
                445,
                1
            ],
            [
                605,
                1
            ],
            [
                629,
                1
            ],
            [
                669,
                2
            ],
            [
                748,
                2
            ],
            [
                879,
                1
            ],
            [
                954,
                2
            ]
        ]
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "MATCH (T1:`local_govt_and_lot.Services`)-[]-(T2:`local_govt_and_lot.Organizations`)\nWHERE T2.organization_details = 'Denesik and Sons Party'\nRETURN DISTINCT T1.service_type_code",
        "question": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
        "answers": [
            [
                "Check"
            ],
            [
                "Pay bills"
            ],
            [
                "Cleanning"
            ],
            [
                "Moving Out"
            ]
        ]
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "MATCH (T1:`local_govt_and_lot.Things`)-[]-(T2:`local_govt_and_lot.Organizations`)\nRETURN T1.thing_id,T1.Type_of_Thing_Code,T2.organization_details",
        "question": "List the id and type of each thing, and the details of the organization that owns it.",
        "answers": [
            [
                35,
                "Electronics",
                "Reinger, Hudson and Nolan Group"
            ],
            [
                92,
                "Commen",
                "Reinger, Hudson and Nolan Group"
            ],
            [
                46,
                "Commen",
                "Denesik and Sons Party"
            ],
            [
                10,
                "Commen",
                "Denesik and Sons Party"
            ],
            [
                2,
                "Electronics",
                "Denesik and Sons Party"
            ],
            [
                58,
                "Electronics",
                "Denesik and Sons Party"
            ],
            [
                80,
                "Furniture",
                "Denesik and Sons Party"
            ],
            [
                85,
                "Commen",
                "Denesik and Sons Party"
            ],
            [
                45,
                "Commen",
                "Denesik and Sons Party"
            ],
            [
                1,
                "Electronics",
                "Denesik and Sons Party"
            ],
            [
                26,
                "Electronics",
                "Denesik and Sons Party"
            ],
            [
                84,
                "Commen",
                "Denesik and Sons Party"
            ],
            [
                47,
                "Commen",
                "Robel-Schulist Group"
            ],
            [
                68,
                "Commen",
                "Robel-Schulist Group"
            ],
            [
                14,
                "Furniture",
                "Robel-Schulist Group"
            ]
        ]
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "MATCH (T1:`local_govt_and_lot.Customers`)-[]-(T2:`local_govt_and_lot.Customer_Events`)\nWITH count(*) AS count, T1.customer_details AS customer_details, T1.customer_id AS customer_id\nWHERE count  >= 3\nRETURN customer_id,customer_details",
        "question": "What are the id and details of the customers who have at least 3 events?",
        "answers": [
            [
                19,
                "Sabryna Moore PhD"
            ]
        ]
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "MATCH (T1:`local_govt_and_lot.Customers`)-[]-(T2:`local_govt_and_lot.Customer_Events`)\nRETURN T2.date_moved_in,T1.customer_id,T1.customer_details",
        "question": "What is each customer's move in date, and the corresponding customer id and details?",
        "answers": [
            [
                "2015-03-27 12:00:00",
                4,
                "Mr. Raul Prosacco"
            ],
            [
                "2015-03-27 12:00:00",
                5,
                "Esteban Senger"
            ],
            [
                "2015-03-27 12:00:00",
                16,
                "Tyrique Durgan II"
            ],
            [
                "2016-09-27 12:00:00",
                19,
                "Sabryna Moore PhD"
            ],
            [
                "2015-03-27 12:00:00",
                19,
                "Sabryna Moore PhD"
            ],
            [
                "2015-03-27 12:00:00",
                19,
                "Sabryna Moore PhD"
            ],
            [
                "2015-03-27 12:00:00",
                19,
                "Sabryna Moore PhD"
            ],
            [
                "2016-09-27 12:00:00",
                31,
                "Monty Sauer III"
            ],
            [
                "2015-03-27 12:00:00",
                63,
                "Vincenza Price"
            ],
            [
                "2015-03-27 12:00:00",
                79,
                "Oma Smith"
            ],
            [
                "2015-03-27 12:00:00",
                79,
                "Oma Smith"
            ],
            [
                "2016-09-27 12:00:00",
                91,
                "Mackenzie Hettinger V"
            ],
            [
                "2016-09-27 12:00:00",
                91,
                "Mackenzie Hettinger V"
            ]
        ]
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "MATCH (T1:`local_govt_and_lot.Timed_Status_of_Things`)-[]-(T2:`local_govt_and_lot.Things`)\nWHERE T1.Status_of_Thing_Code = 'Close' OR T1.Date_and_Date < '2017-06-19 02:59:21'\nRETURN DISTINCT T2.thing_id,T2.Type_of_Thing_Code",
        "question": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'",
        "answers": [
            [
                2,
                "Electronics"
            ],
            [
                10,
                "Commen"
            ],
            [
                26,
                "Electronics"
            ],
            [
                47,
                "Commen"
            ],
            [
                58,
                "Electronics"
            ],
            [
                80,
                "Furniture"
            ],
            [
                85,
                "Commen"
            ],
            [
                92,
                "Commen"
            ]
        ]
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "MATCH (T1:`local_govt_and_lot.Things`)-[]-(T2:`local_govt_and_lot.Timed_Locations_of_Things`)\nWHERE T1.service_details = 'Unsatisfied'\nRETURN count(DISTINCT T2.Location_Code)",
        "question": "How many distinct locations have the things with service detail 'Unsatisfied' been located in?",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "MATCH (timed_status_of_things:`local_govt_and_lot.Timed_Status_of_Things`)\nRETURN count(DISTINCT timed_status_of_things.Status_of_Thing_Code)",
        "question": "How many different status codes of things are there?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "MATCH (residents:`local_govt_and_lot.Residents`)\nRETURN max(residents.date_moved_in)",
        "question": "When is the last day any resident moved in?",
        "answers": [
            [
                "2017-06-17 15:43:33"
            ]
        ]
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "MATCH (residents:`local_govt_and_lot.Residents`)\nWHERE residents.other_details =~'.*[M|m]iss.*'\nRETURN residents.other_details",
        "question": "What are the resident details containing the substring 'Miss'?",
        "answers": [
            [
                "Miss Naomie Osinski"
            ],
            [
                "Miss Alanis Lockman"
            ]
        ]
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "MATCH (customer_events:`local_govt_and_lot.Customer_Events`)\nRETURN customer_events.Customer_Event_ID,customer_events.date_moved_in,customer_events.property_id",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "answers": [
            [
                70,
                "2015-03-27 12:00:00",
                605
            ],
            [
                160,
                "2015-03-27 12:00:00",
                879
            ],
            [
                166,
                "2015-03-27 12:00:00",
                629
            ],
            [
                216,
                "2015-03-27 12:00:00",
                669
            ],
            [
                226,
                "2015-03-27 12:00:00",
                748
            ],
            [
                256,
                "2015-03-27 12:00:00",
                108
            ],
            [
                428,
                "2015-03-27 12:00:00",
                954
            ],
            [
                530,
                "2015-03-27 12:00:00",
                669
            ],
            [
                559,
                "2015-03-27 12:00:00",
                107
            ],
            [
                591,
                "2016-09-27 12:00:00",
                120
            ],
            [
                606,
                "2016-09-27 12:00:00",
                445
            ],
            [
                627,
                "2016-09-27 12:00:00",
                748
            ],
            [
                817,
                "2016-09-27 12:00:00",
                107
            ]
        ]
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "MATCH (residents:`local_govt_and_lot.Residents`)\nRETURN DISTINCT residents.date_moved_in",
        "question": "What are the distinct move in dates of the residents?",
        "answers": [
            [
                "2017-06-17 15:43:33"
            ],
            [
                "2015-03-27 12:00:00"
            ],
            [
                "2016-09-27 12:00:00"
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (school:`school_player.school`)\nRETURN count(*)",
        "question": "How many schools are there?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (school:`school_player.school`)\nRETURN count(*)",
        "question": "Count the number of schools.",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (school:`school_player.school`)\nRETURN school.Location\nORDER BY school.Enrollment ASC",
        "question": "List the locations of schools in ascending order of enrollment.",
        "answers": [
            [
                "Bellevue Hill"
            ],
            [
                "Milsons Point"
            ],
            [
                "Waverley"
            ],
            [
                "Wahroonga"
            ],
            [
                "Summer Hill"
            ],
            [
                "Hornsby"
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (school:`school_player.school`)\nRETURN school.Location\nORDER BY school.Enrollment ASC",
        "question": "What is the list of school locations sorted in ascending order of school enrollment?",
        "answers": [
            [
                "Bellevue Hill"
            ],
            [
                "Milsons Point"
            ],
            [
                "Waverley"
            ],
            [
                "Wahroonga"
            ],
            [
                "Summer Hill"
            ],
            [
                "Hornsby"
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (school:`school_player.school`)\nRETURN school.Location\nORDER BY school.Founded DESC",
        "question": "List the locations of schools in descending order of founded year.",
        "answers": [
            [
                "Wahroonga"
            ],
            [
                "Bellevue Hill"
            ],
            [
                "Summer Hill"
            ],
            [
                "Waverley"
            ],
            [
                "Hornsby"
            ],
            [
                "Milsons Point"
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (school:`school_player.school`)\nRETURN school.Location\nORDER BY school.Founded DESC",
        "question": "What is the list of school locations sorted in descending order of school foundation year?",
        "answers": [
            [
                "Wahroonga"
            ],
            [
                "Bellevue Hill"
            ],
            [
                "Summer Hill"
            ],
            [
                "Waverley"
            ],
            [
                "Hornsby"
            ],
            [
                "Milsons Point"
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (school:`school_player.school`)\nWHERE school.Denomination <> 'Catholic'\nRETURN school.Enrollment",
        "question": "What are the enrollments of schools whose denomination is not \"Catholic\"?",
        "answers": [
            [
                2300.0
            ],
            [
                1000.0
            ],
            [
                1850.0
            ],
            [
                2200.0
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (school:`school_player.school`)\nWHERE school.Denomination <> 'Catholic'\nRETURN school.Enrollment",
        "question": "List the enrollment for each school that does not have \"Catholic\" as denomination.",
        "answers": [
            [
                2300.0
            ],
            [
                1000.0
            ],
            [
                1850.0
            ],
            [
                2200.0
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (school:`school_player.school`)\nRETURN avg(school.Enrollment)",
        "question": "What is the average enrollment of schools?",
        "answers": [
            [
                1663.3333333333333
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (school:`school_player.school`)\nRETURN avg(school.Enrollment)",
        "question": "Take the average of the school enrollment.",
        "answers": [
            [
                1663.3333333333333
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (player:`school_player.player`)\nRETURN player.Team\nORDER BY player.Team ASC",
        "question": "What are the teams of the players, sorted in ascending alphabetical order?",
        "answers": [
            [
                "Baltimore Orioles"
            ],
            [
                "Chicago Cubs"
            ],
            [
                "Chicago White Sox"
            ],
            [
                "Cincinnati Reds"
            ],
            [
                "Detroit Tigers"
            ],
            [
                "Florida Marlins"
            ],
            [
                "Houston Astros"
            ],
            [
                "Kansas City Royals"
            ],
            [
                "Los Angeles Dodgers"
            ],
            [
                "Milwaukee Brewers"
            ],
            [
                "Minnesota Twins"
            ],
            [
                "New York Mets"
            ],
            [
                "New York Mets"
            ],
            [
                "Oakland Athletics"
            ],
            [
                "Pittsburgh Pirates"
            ],
            [
                "San Diego Padres"
            ],
            [
                "San Francisco Giants"
            ],
            [
                "Seattle Mariners"
            ],
            [
                "St. Louis Cardinals"
            ],
            [
                "Tampa Bay Devil Rays"
            ],
            [
                "Texas Rangers"
            ],
            [
                "Toronto Blue Jays"
            ],
            [
                "Washington Nationals"
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (player:`school_player.player`)\nRETURN player.Team\nORDER BY player.Team ASC",
        "question": "Find the team of each player and sort them in ascending alphabetical order.",
        "answers": [
            [
                "Baltimore Orioles"
            ],
            [
                "Chicago Cubs"
            ],
            [
                "Chicago White Sox"
            ],
            [
                "Cincinnati Reds"
            ],
            [
                "Detroit Tigers"
            ],
            [
                "Florida Marlins"
            ],
            [
                "Houston Astros"
            ],
            [
                "Kansas City Royals"
            ],
            [
                "Los Angeles Dodgers"
            ],
            [
                "Milwaukee Brewers"
            ],
            [
                "Minnesota Twins"
            ],
            [
                "New York Mets"
            ],
            [
                "New York Mets"
            ],
            [
                "Oakland Athletics"
            ],
            [
                "Pittsburgh Pirates"
            ],
            [
                "San Diego Padres"
            ],
            [
                "San Francisco Giants"
            ],
            [
                "Seattle Mariners"
            ],
            [
                "St. Louis Cardinals"
            ],
            [
                "Tampa Bay Devil Rays"
            ],
            [
                "Texas Rangers"
            ],
            [
                "Toronto Blue Jays"
            ],
            [
                "Washington Nationals"
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (player:`school_player.player`)\nRETURN count(DISTINCT player.Position)",
        "question": "How many different positions of players are there?",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (player:`school_player.player`)\nRETURN count(DISTINCT player.Position)",
        "question": "Count the number of distinct player positions.",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (player:`school_player.player`)\nRETURN player.Team\nORDER BY player.Age DESC\nLIMIT 1",
        "question": "Find the team of the player of the highest age.",
        "answers": [
            [
                "New York Mets"
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (player:`school_player.player`)\nRETURN player.Team\nORDER BY player.Age DESC\nLIMIT 1",
        "question": "Which team has the oldest player?",
        "answers": [
            [
                "New York Mets"
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (player:`school_player.player`)\nRETURN player.Team\nORDER BY player.Age DESC\nLIMIT 5",
        "question": "List the teams of the players with the top 5 largest ages.",
        "answers": [
            [
                "New York Mets"
            ],
            [
                "Detroit Tigers"
            ],
            [
                "Baltimore Orioles"
            ],
            [
                "St. Louis Cardinals"
            ],
            [
                "Toronto Blue Jays"
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (player:`school_player.player`)\nRETURN player.Team\nORDER BY player.Age DESC\nLIMIT 5",
        "question": "What are the teams that have the 5 oldest players?",
        "answers": [
            [
                "New York Mets"
            ],
            [
                "Detroit Tigers"
            ],
            [
                "Baltimore Orioles"
            ],
            [
                "St. Louis Cardinals"
            ],
            [
                "Toronto Blue Jays"
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (T1:`school_player.player`)-[]-(T2:`school_player.school`)\nRETURN T1.Team,T2.Location",
        "question": "For each player, show the team and the location of school they belong to.",
        "answers": [
            [
                "Los Angeles Dodgers",
                "Milsons Point"
            ],
            [
                "Kansas City Royals",
                "Milsons Point"
            ],
            [
                "Texas Rangers",
                "Milsons Point"
            ],
            [
                "Washington Nationals",
                "Milsons Point"
            ],
            [
                "Cincinnati Reds",
                "Milsons Point"
            ],
            [
                "Baltimore Orioles",
                "Milsons Point"
            ],
            [
                "Chicago White Sox",
                "Milsons Point"
            ],
            [
                "Milwaukee Brewers",
                "Milsons Point"
            ],
            [
                "Houston Astros",
                "Milsons Point"
            ],
            [
                "Tampa Bay Devil Rays",
                "Milsons Point"
            ],
            [
                "Toronto Blue Jays",
                "Milsons Point"
            ],
            [
                "Oakland Athletics",
                "Hornsby"
            ],
            [
                "Florida Marlins",
                "Hornsby"
            ],
            [
                "San Francisco Giants",
                "Hornsby"
            ],
            [
                "Pittsburgh Pirates",
                "Hornsby"
            ],
            [
                "Detroit Tigers",
                "Bellevue Hill"
            ],
            [
                "Seattle Mariners",
                "Wahroonga"
            ],
            [
                "Chicago Cubs",
                "Wahroonga"
            ],
            [
                "New York Mets",
                "Wahroonga"
            ],
            [
                "San Diego Padres",
                "Summer Hill"
            ],
            [
                "New York Mets",
                "Summer Hill"
            ],
            [
                "St. Louis Cardinals",
                "Summer Hill"
            ],
            [
                "Minnesota Twins",
                "Waverley"
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (T1:`school_player.player`)-[]-(T2:`school_player.school`)\nRETURN T1.Team,T2.Location",
        "question": "What are the team and the location of school each player belongs to?",
        "answers": [
            [
                "Los Angeles Dodgers",
                "Milsons Point"
            ],
            [
                "Kansas City Royals",
                "Milsons Point"
            ],
            [
                "Texas Rangers",
                "Milsons Point"
            ],
            [
                "Washington Nationals",
                "Milsons Point"
            ],
            [
                "Cincinnati Reds",
                "Milsons Point"
            ],
            [
                "Baltimore Orioles",
                "Milsons Point"
            ],
            [
                "Chicago White Sox",
                "Milsons Point"
            ],
            [
                "Milwaukee Brewers",
                "Milsons Point"
            ],
            [
                "Houston Astros",
                "Milsons Point"
            ],
            [
                "Tampa Bay Devil Rays",
                "Milsons Point"
            ],
            [
                "Toronto Blue Jays",
                "Milsons Point"
            ],
            [
                "Oakland Athletics",
                "Hornsby"
            ],
            [
                "Florida Marlins",
                "Hornsby"
            ],
            [
                "San Francisco Giants",
                "Hornsby"
            ],
            [
                "Pittsburgh Pirates",
                "Hornsby"
            ],
            [
                "Detroit Tigers",
                "Bellevue Hill"
            ],
            [
                "Seattle Mariners",
                "Wahroonga"
            ],
            [
                "Chicago Cubs",
                "Wahroonga"
            ],
            [
                "New York Mets",
                "Wahroonga"
            ],
            [
                "San Diego Padres",
                "Summer Hill"
            ],
            [
                "New York Mets",
                "Summer Hill"
            ],
            [
                "St. Louis Cardinals",
                "Summer Hill"
            ],
            [
                "Minnesota Twins",
                "Waverley"
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (T1:`school_player.player`)-[]-(T2:`school_player.school`)\nWITH T2.Location AS Location, count(*) AS count\nWHERE count  > 1\nRETURN Location",
        "question": "Show the locations of schools that have more than 1 player.",
        "answers": [
            [
                "Milsons Point"
            ],
            [
                "Hornsby"
            ],
            [
                "Wahroonga"
            ],
            [
                "Summer Hill"
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (T1:`school_player.player`)-[]-(T2:`school_player.school`)\nWITH T2.Location AS Location, count(*) AS count\nWHERE count  > 1\nRETURN Location",
        "question": "Which schools have more than 1 player? Give me the school locations.",
        "answers": [
            [
                "Milsons Point"
            ],
            [
                "Hornsby"
            ],
            [
                "Wahroonga"
            ],
            [
                "Summer Hill"
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (T1:`school_player.player`)-[]-(T2:`school_player.school`)\nWITH count(T1.School_ID) AS cnt, T2\nRETURN T2.Denomination\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Show the denomination of the school that has the most players.",
        "answers": [
            [
                "Catholic"
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (T1:`school_player.player`)-[]-(T2:`school_player.school`)\nWITH count(T1.School_ID) AS cnt, T2\nRETURN T2.Denomination\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the denomination of the school the most players belong to?",
        "answers": [
            [
                "Catholic"
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (T1:`school_player.school`)-[]-(T2:`school_player.school_details`)\nRETURN T1.Location,T2.Nickname",
        "question": "Show locations and nicknames of schools.",
        "answers": [
            [
                "Milsons Point",
                "Tigers"
            ],
            [
                "Hornsby",
                "Auks"
            ],
            [
                "Bellevue Hill",
                "Buccaneers"
            ],
            [
                "Wahroonga",
                "Raiders"
            ],
            [
                "Summer Hill",
                "Seahawks"
            ],
            [
                "Waverley",
                "Silver Eagles"
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (T1:`school_player.school`)-[]-(T2:`school_player.school_details`)\nRETURN T1.Location,T2.Nickname",
        "question": "What are the location and nickname of each school?",
        "answers": [
            [
                "Milsons Point",
                "Tigers"
            ],
            [
                "Hornsby",
                "Auks"
            ],
            [
                "Bellevue Hill",
                "Buccaneers"
            ],
            [
                "Wahroonga",
                "Raiders"
            ],
            [
                "Summer Hill",
                "Seahawks"
            ],
            [
                "Waverley",
                "Silver Eagles"
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (school:`school_player.school`)\nRETURN school.Denomination,count(*)",
        "question": "Please show different denominations and the corresponding number of schools.",
        "answers": [
            [
                "Catholic",
                2
            ],
            [
                "Anglican",
                3
            ],
            [
                "Uniting Church",
                1
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (school:`school_player.school`)\nRETURN school.Denomination,count(*)",
        "question": "For each denomination, return the denomination and the count of schools with that denomination.",
        "answers": [
            [
                "Catholic",
                2
            ],
            [
                "Anglican",
                3
            ],
            [
                "Uniting Church",
                1
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (school:`school_player.school`)\nRETURN school.Denomination,count(*)\nORDER BY school.Denomination DESC",
        "question": "Please show different denominations and the corresponding number of schools in descending order.",
        "answers": [
            [
                "Uniting Church",
                1
            ],
            [
                "Catholic",
                2
            ],
            [
                "Anglican",
                3
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (school:`school_player.school`)\nRETURN school.Denomination,count(*)\nORDER BY school.Denomination DESC",
        "question": "Order denominations in descending order of the count of schools with the denomination. Return each denomination with the count of schools.",
        "answers": [
            [
                "Uniting Church",
                1
            ],
            [
                "Catholic",
                2
            ],
            [
                "Anglican",
                3
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (school:`school_player.school`)\nRETURN school.School_Colors\nORDER BY school.Enrollment DESC\nLIMIT 1",
        "question": "List the school color of the school that has the largest enrollment.",
        "answers": [
            [
                "Red & Blue"
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (school:`school_player.school`)\nRETURN school.School_Colors\nORDER BY school.Enrollment DESC\nLIMIT 1",
        "question": "What is the school color of the school with the largest enrollment?",
        "answers": [
            [
                "Red & Blue"
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (school:`school_player.school`)\nWHERE NOT (school)-[]-(:`school_player.player`)    \nRETURN school.Location",
        "question": "List the locations of schools that do not have any player.",
        "answers": []
    },
    {
        "db_id": "school_player",
        "query": "MATCH (school:`school_player.school`)\nWHERE NOT (school)-[]-(:`school_player.player`)    \nRETURN school.Location",
        "question": "Which schools do not have any player? Give me the school locations.",
        "answers": []
    },
    {
        "db_id": "school_player",
        "query": "MATCH (school_details:`school_player.school_details`)\nWHERE school_details.Division <> 'Division 1'\nRETURN school_details.Nickname",
        "question": "Show the nicknames of schools that are not in division 1.",
        "answers": [
            [
                "Auks"
            ],
            [
                "Raiders"
            ],
            [
                "Seahawks"
            ],
            [
                "Silver Eagles"
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (school_details:`school_player.school_details`)\nWHERE school_details.Division <> 'Division 1'\nRETURN school_details.Nickname",
        "question": "What are the nicknames of schools whose division is not 1?",
        "answers": [
            [
                "Auks"
            ],
            [
                "Raiders"
            ],
            [
                "Seahawks"
            ],
            [
                "Silver Eagles"
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (school:`school_player.school`)\nWITH school.Denomination AS Denomination, count(*) AS count\nWHERE count  > 1\nRETURN Denomination",
        "question": "Show the denomination shared by more than one school.",
        "answers": [
            [
                "Catholic"
            ],
            [
                "Anglican"
            ]
        ]
    },
    {
        "db_id": "school_player",
        "query": "MATCH (school:`school_player.school`)\nWITH school.Denomination AS Denomination, count(*) AS count\nWHERE count  > 1\nRETURN Denomination",
        "question": "What are the denomination more than one school have?",
        "answers": [
            [
                "Catholic"
            ],
            [
                "Anglican"
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (product:`store_product.product`)\nWITH count(*) AS count, product.max_page_size AS max_page_size\nWHERE count  > 3\nRETURN max_page_size",
        "question": "Find the list of page size which have more than 3 product listed",
        "answers": [
            [
                "A4"
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (product:`store_product.product`)\nWITH count(*) AS count, product.max_page_size AS max_page_size\nWHERE count  > 3\nRETURN max_page_size",
        "question": "What is the maximum page size for everything that has more than 3 products listed?",
        "answers": [
            [
                "A4"
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (district:`store_product.district`)\nWHERE 200000<=district.City_Population<=2000000\nRETURN district.District_name,district.City_Population",
        "question": "Find the name and population of district with population between 200000 and 2000000",
        "answers": [
            [
                "Bahawalpur District",
                530438.0
            ],
            [
                "Chiniot District",
                219254.0
            ],
            [
                "Dera Ghazi Khan District",
                464742.0
            ],
            [
                "Gujranwala District",
                1526168.0
            ],
            [
                "Gujrat District",
                328512.0
            ],
            [
                "Jhang District",
                365198.0
            ],
            [
                "Kasur District",
                314617.0
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (district:`store_product.district`)\nWHERE 200000<=district.City_Population<=2000000\nRETURN district.District_name,district.City_Population",
        "question": "What are the district names and city populations for all districts that between 200,000 and 2,000,000 residents?",
        "answers": [
            [
                "Bahawalpur District",
                530438.0
            ],
            [
                "Chiniot District",
                219254.0
            ],
            [
                "Dera Ghazi Khan District",
                464742.0
            ],
            [
                "Gujranwala District",
                1526168.0
            ],
            [
                "Gujrat District",
                328512.0
            ],
            [
                "Jhang District",
                365198.0
            ],
            [
                "Kasur District",
                314617.0
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (district:`store_product.district`)\nWHERE district.City_Area > 10 OR district.City_Population > 100000\nRETURN district.District_name",
        "question": "Find the name all districts with city area greater than 10 or population larger than 100000",
        "answers": [
            [
                "Attock District"
            ],
            [
                "Bahawalnagar District"
            ],
            [
                "Bahawalpur District"
            ],
            [
                "Bhakkar District"
            ],
            [
                "Chakwal District"
            ],
            [
                "Chiniot District"
            ],
            [
                "Dera Ghazi Khan District"
            ],
            [
                "Faisalabad District"
            ],
            [
                "Gujranwala District"
            ],
            [
                "Gujrat District"
            ],
            [
                "Hafizabad District"
            ],
            [
                "Jhang District"
            ],
            [
                "Jhelum District"
            ],
            [
                "Kasur District"
            ],
            [
                "Khanewal District"
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (district:`store_product.district`)\nWHERE district.City_Area > 10 OR district.City_Population > 100000\nRETURN district.District_name",
        "question": "What are the names of all districts with a city area greater than 10 or have more than 100000 people living there?",
        "answers": [
            [
                "Attock District"
            ],
            [
                "Bahawalnagar District"
            ],
            [
                "Bahawalpur District"
            ],
            [
                "Bhakkar District"
            ],
            [
                "Chakwal District"
            ],
            [
                "Chiniot District"
            ],
            [
                "Dera Ghazi Khan District"
            ],
            [
                "Faisalabad District"
            ],
            [
                "Gujranwala District"
            ],
            [
                "Gujrat District"
            ],
            [
                "Hafizabad District"
            ],
            [
                "Jhang District"
            ],
            [
                "Jhelum District"
            ],
            [
                "Kasur District"
            ],
            [
                "Khanewal District"
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (district:`store_product.district`)\nRETURN district.District_name\nORDER BY district.City_Population DESC\nLIMIT 1",
        "question": "Which district has the largest population?",
        "answers": [
            [
                "Faisalabad District"
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (district:`store_product.district`)\nRETURN district.District_name\nORDER BY district.City_Population DESC\nLIMIT 1",
        "question": "What is the name of the district with the most residents?",
        "answers": [
            [
                "Faisalabad District"
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (district:`store_product.district`)\nRETURN district.District_name\nORDER BY district.City_Area ASC\nLIMIT 1",
        "question": "Which district has the least area?",
        "answers": [
            [
                "Chakwal District"
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (district:`store_product.district`)\nRETURN district.District_name\nORDER BY district.City_Area ASC\nLIMIT 1",
        "question": "What is the name of the district with the smallest area?",
        "answers": [
            [
                "Chakwal District"
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (store:`store_product.store`)\nRETURN store.Type,count(*)",
        "question": "Find all types of store and number of them.",
        "answers": [
            [
                "City Mall",
                2
            ],
            [
                "Village Store",
                3
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (store:`store_product.store`)\nRETURN store.Type,count(*)",
        "question": "For each type of store, how many of them are there?",
        "answers": [
            [
                "City Mall",
                2
            ],
            [
                "Village Store",
                3
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (t1:`store_product.store`)-[]-(t2:`store_product.store_district`)-[]-(t3:`store_product.district`)\nWHERE t3.District_name = 'Khanewal District'\nRETURN t1.Store_Name",
        "question": "Find the names of all stores in Khanewal District.",
        "answers": [
            [
                "Neguac"
            ],
            [
                "Miramichi"
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (t1:`store_product.store`)-[]-(t2:`store_product.store_district`)-[]-(t3:`store_product.district`)\nWHERE t3.District_name = 'Khanewal District'\nRETURN t1.Store_Name",
        "question": "What are the names of all the stores located in Khanewal District?",
        "answers": [
            [
                "Neguac"
            ],
            [
                "Miramichi"
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (t1:`store_product.store`)-[]-(t2:`store_product.store_district`)-[]-(t3:`store_product.district`)\nWHERE t1.Store_Name = 'Blackville'\nRETURN t3.Headquartered_City",
        "question": "Which city is the headquarter of the store named \"Blackville\" in?",
        "answers": [
            [
                "Bhakkar City"
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (t1:`store_product.store`)-[]-(t2:`store_product.store_district`)-[]-(t3:`store_product.district`)\nWHERE t1.Store_Name = 'Blackville'\nRETURN t3.Headquartered_City",
        "question": "What city is the headquarter of the store Blackville?",
        "answers": [
            [
                "Bhakkar City"
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (t1:`store_product.store`)-[]-(t2:`store_product.store_district`)-[]-(t3:`store_product.district`)\nRETURN t3.Headquartered_City,count(*)",
        "question": "Find the number of stores in each city.",
        "answers": [
            [
                "Khanewal City",
                2
            ],
            [
                "Hafizabad City",
                1
            ],
            [
                "Bhakkar City",
                1
            ],
            [
                "Bahawalpur City",
                1
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (t1:`store_product.store`)-[]-(t2:`store_product.store_district`)-[]-(t3:`store_product.district`)\nRETURN t3.Headquartered_City,count(*)",
        "question": "How many stores are headquarted in each city?",
        "answers": [
            [
                "Khanewal City",
                2
            ],
            [
                "Hafizabad City",
                1
            ],
            [
                "Bhakkar City",
                1
            ],
            [
                "Bahawalpur City",
                1
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (t1:`store_product.store`)-[]-(t2:`store_product.store_district`)-[]-(t3:`store_product.district`)\nWITH count(t3.Headquartered_City) AS cnt, t3\nRETURN t3.Headquartered_City\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Find the city with the most number of stores.",
        "answers": [
            [
                "Khanewal City"
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (t1:`store_product.store`)-[]-(t2:`store_product.store_district`)-[]-(t3:`store_product.district`)\nWITH count(t3.Headquartered_City) AS cnt, t3\nRETURN t3.Headquartered_City\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the city with the most number of flagship stores?",
        "answers": [
            [
                "Khanewal City"
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (product:`store_product.product`)\nRETURN avg(product.pages_per_minute_color)",
        "question": "What is the average pages per minute color?",
        "answers": [
            [
                18.5
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (product:`store_product.product`)\nRETURN avg(product.pages_per_minute_color)",
        "question": "What is the average number of pages per minute color?",
        "answers": [
            [
                18.5
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (t1:`store_product.product`)-[t2:`store_product.store_product`]-(t3:`store_product.store`)\nWHERE t3.Store_Name = 'Miramichi'\nRETURN t1.product",
        "question": "What products are available at store named \"Miramichi\"?",
        "answers": [
            [
                "Fujitsu fi-6130 A4 Series Scanner"
            ],
            [
                "Canon DR-2080C"
            ],
            [
                "Xerox Travel Scanner 100"
            ],
            [
                "Plustek MobileOffice D28 Corporate"
            ],
            [
                "ScanShell 3000DN"
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (t1:`store_product.product`)-[t2:`store_product.store_product`]-(t3:`store_product.store`)\nWHERE t3.Store_Name = 'Miramichi'\nRETURN t1.product",
        "question": "What products are sold at the store named Miramichi?",
        "answers": [
            [
                "Fujitsu fi-6130 A4 Series Scanner"
            ],
            [
                "Canon DR-2080C"
            ],
            [
                "Xerox Travel Scanner 100"
            ],
            [
                "Plustek MobileOffice D28 Corporate"
            ],
            [
                "ScanShell 3000DN"
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (product:`store_product.product`)\nWHERE product.max_page_size = 'A4' AND product.pages_per_minute_color < 5\nRETURN product.product",
        "question": "Find products with max page size as \"A4\" and pages per minute color smaller than 5.",
        "answers": [
            [
                "Xerox Travel Scanner 100"
            ],
            [
                "ScanShell 3000DN"
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (product:`store_product.product`)\nWHERE product.max_page_size = 'A4' AND product.pages_per_minute_color < 5\nRETURN product.product",
        "question": "What are the products with the maximum page size A4 that also have a pages per minute color smaller than 5?",
        "answers": [
            [
                "Xerox Travel Scanner 100"
            ],
            [
                "ScanShell 3000DN"
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (product:`store_product.product`)\nWHERE product.max_page_size = 'A4' OR product.pages_per_minute_color < 5\nRETURN product.product",
        "question": "Find products with max page size as \"A4\" or pages per minute color smaller than 5.",
        "answers": [
            [
                "Fujitsu fi-6130 A4 Series Scanner"
            ],
            [
                "Plustek MobileOffice D28 Corporate"
            ],
            [
                "Xerox Travel Scanner 100"
            ],
            [
                "ScanShell 3000DN"
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (product:`store_product.product`)\nWHERE product.max_page_size = 'A4' OR product.pages_per_minute_color < 5\nRETURN product.product",
        "question": "What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?",
        "answers": [
            [
                "Fujitsu fi-6130 A4 Series Scanner"
            ],
            [
                "Plustek MobileOffice D28 Corporate"
            ],
            [
                "Xerox Travel Scanner 100"
            ],
            [
                "ScanShell 3000DN"
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (product:`store_product.product`)\nRETURN product.max_page_size\nORDER BY product.max_page_size DESC\nLIMIT 1",
        "question": "Find the most prominent max page size among all the products.",
        "answers": [
            [
                "A4"
            ]
        ]
    },
    {
        "db_id": "store_product",
        "query": "MATCH (product:`store_product.product`)\nRETURN product.max_page_size\nORDER BY product.max_page_size DESC\nLIMIT 1",
        "question": "What is the most common maximum page size?",
        "answers": [
            [
                "A4"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (college:`soccer_2.College`)\nRETURN avg(college.enr)",
        "question": "What is the average enrollment number?",
        "answers": [
            [
                17750.0
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (college:`soccer_2.College`)\nRETURN avg(college.enr)",
        "question": "How many students, on average, does each college have enrolled?",
        "answers": [
            [
                17750.0
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (college:`soccer_2.College`)\nRETURN count(*)",
        "question": "How many colleges in total?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (college:`soccer_2.College`)\nRETURN count(*)",
        "question": "How many different colleges are there?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (player:`soccer_2.Player`)\nWHERE player.HS > 1000\nRETURN count(*)",
        "question": "How many players have more than 1000 hours of training?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (player:`soccer_2.Player`)\nWHERE player.HS > 1000\nRETURN count(*)",
        "question": "How many different players trained for more than 1000 hours?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (college:`soccer_2.College`)\nWHERE college.enr > 15000\nRETURN count(*)",
        "question": "How many colleges has more than 15000 students?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (college:`soccer_2.College`)\nWHERE college.enr > 15000\nRETURN count(*)",
        "question": "What is the number of colleges with a student population greater than 15000?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (player:`soccer_2.Player`)\nRETURN avg(player.HS)",
        "question": "What is the average training hours of all players?",
        "answers": [
            [
                1150.0
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (player:`soccer_2.Player`)\nRETURN avg(player.HS)",
        "question": "How many hours do the players train on average?",
        "answers": [
            [
                1150.0
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (player:`soccer_2.Player`)\nWHERE player.HS < 1500\nRETURN player.pName,player.HS",
        "question": "Find the name and training hours of players whose hours are below 1500.",
        "answers": [
            [
                "Andrew",
                1200
            ],
            [
                "Charles",
                300
            ],
            [
                "Eddie",
                600
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (player:`soccer_2.Player`)\nWHERE player.HS < 1500\nRETURN player.pName,player.HS",
        "question": "What are the names and number of hours spent training for each player who trains for less than 1500 hours?",
        "answers": [
            [
                "Andrew",
                1200
            ],
            [
                "Charles",
                300
            ],
            [
                "Eddie",
                600
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH ()-[tryout:`soccer_2.Tryout`]-()\nRETURN count(DISTINCT tryout.cName)",
        "question": "How many different colleges do attend the tryout test?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH ()-[tryout:`soccer_2.Tryout`]-()\nRETURN count(DISTINCT tryout.cName)",
        "question": "How many different colleges were represented at tryouts?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH ()-[tryout:`soccer_2.Tryout`]-()\nRETURN count(DISTINCT tryout.pPos)",
        "question": "What are the unique types of player positions in the tryout?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH ()-[tryout:`soccer_2.Tryout`]-()\nRETURN count(DISTINCT tryout.pPos)",
        "question": "What are the different types of player positions?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (player:`soccer_2.Player`)\nRETURN avg(player.HS),max(player.HS),min(player.HS)",
        "question": "Find the max, average and min training hours of all players.",
        "answers": [
            [
                1150.0,
                1600,
                300
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (player:`soccer_2.Player`)\nRETURN avg(player.HS),max(player.HS),min(player.HS)",
        "question": "What is the average, maximum, and minimum for the number of hours spent training?",
        "answers": [
            [
                1150.0,
                1600,
                300
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (college:`soccer_2.College`)\nWHERE college.state = 'FL'\nRETURN avg(college.enr)",
        "question": "What is average enrollment of colleges in the state FL?",
        "answers": [
            [
                19000.0
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (college:`soccer_2.College`)\nWHERE college.state = 'FL'\nRETURN avg(college.enr)",
        "question": "What is average number of students enrolled in Florida colleges?",
        "answers": [
            [
                19000.0
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (player:`soccer_2.Player`)\nWHERE 500<=player.HS<=1500\nRETURN player.pName",
        "question": "What are the names of players whose training hours is between 500 and 1500?",
        "answers": [
            [
                "Andrew"
            ],
            [
                "Eddie"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (player:`soccer_2.Player`)\nWHERE 500<=player.HS<=1500\nRETURN player.pName",
        "question": "What are the names of players who train between 500 and 1500 hours?",
        "answers": [
            [
                "Andrew"
            ],
            [
                "Eddie"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (player:`soccer_2.Player`)\nWHERE player.pName =~'.*[A|a].*'\nRETURN DISTINCT player.pName",
        "question": "Find the players whose names contain letter 'a'.",
        "answers": [
            [
                "Andrew"
            ],
            [
                "Blake"
            ],
            [
                "Charles"
            ],
            [
                "David"
            ],
            [
                "Drago"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (player:`soccer_2.Player`)\nWHERE player.pName =~'.*[A|a].*'\nRETURN DISTINCT player.pName",
        "question": "Who are the players that have names containing the letter a?",
        "answers": [
            [
                "Andrew"
            ],
            [
                "Blake"
            ],
            [
                "Charles"
            ],
            [
                "David"
            ],
            [
                "Drago"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (college:`soccer_2.College`)\nWHERE college.enr > 18000\nRETURN college.cName\nORDER BY college.cName",
        "question": "List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.",
        "answers": [
            [
                "FSU"
            ],
            [
                "OU"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (college:`soccer_2.College`)\nWHERE college.enr > 18000\nRETURN college.cName\nORDER BY college.cName",
        "question": "What is the name of every college in alphabetical order that has more than 18000 students enrolled?",
        "answers": [
            [
                "FSU"
            ],
            [
                "OU"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (player:`soccer_2.Player`)\nWHERE player.yCard = 'yes'\nRETURN player.pName\nORDER BY player.HS DESC",
        "question": "Find the name of players whose card is yes in the descending order of training hours.",
        "answers": [
            [
                "David"
            ],
            [
                "Drago"
            ],
            [
                "Eddie"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (player:`soccer_2.Player`)\nWHERE player.yCard = 'yes'\nRETURN player.pName\nORDER BY player.HS DESC",
        "question": "What are the name of the players who received a card in descending order of the hours of training?",
        "answers": [
            [
                "David"
            ],
            [
                "Drago"
            ],
            [
                "Eddie"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH ()-[tryout:`soccer_2.Tryout`]-()\nRETURN DISTINCT tryout.cName\nORDER BY tryout.cName",
        "question": "Find the name of different colleges involved in the tryout in alphabetical order.",
        "answers": [
            [
                "ASU"
            ],
            [
                "FSU"
            ],
            [
                "LSU"
            ],
            [
                "OU"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH ()-[tryout:`soccer_2.Tryout`]-()\nRETURN DISTINCT tryout.cName\nORDER BY tryout.cName",
        "question": "What are the different names of the colleges involved in the tryout in alphabetical order?",
        "answers": [
            [
                "ASU"
            ],
            [
                "FSU"
            ],
            [
                "LSU"
            ],
            [
                "OU"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (college:`soccer_2.College`)\nRETURN college.cName\nORDER BY college.enr DESC\nLIMIT 3",
        "question": "What are the names of schools with the top 3 largest size?",
        "answers": [
            [
                "OU"
            ],
            [
                "FSU"
            ],
            [
                "LSU"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (college:`soccer_2.College`)\nRETURN college.cName\nORDER BY college.enr DESC\nLIMIT 3",
        "question": "What are the names of the schools with the top 3 largest class sizes?",
        "answers": [
            [
                "OU"
            ],
            [
                "FSU"
            ],
            [
                "LSU"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (college:`soccer_2.College`)\nRETURN college.cName,college.state,min(college.enr)",
        "question": "What is the name of school that has the smallest enrollment in each state?",
        "answers": [
            [
                "LSU",
                "LA",
                18000
            ],
            [
                "ASU",
                "AZ",
                12000
            ],
            [
                "OU",
                "OK",
                22000
            ],
            [
                "FSU",
                "FL",
                19000
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (college:`soccer_2.College`)\nRETURN college.cName,college.state,min(college.enr)",
        "question": "What is the name of the school with smallest enrollment size per state?",
        "answers": [
            [
                "LSU",
                "LA",
                18000
            ],
            [
                "ASU",
                "AZ",
                12000
            ],
            [
                "OU",
                "OK",
                22000
            ],
            [
                "FSU",
                "FL",
                19000
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (T1:`soccer_2.College`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.decision = 'yes'\nRETURN DISTINCT T1.state",
        "question": "Find the states where have some college students in tryout and their decisions are yes.",
        "answers": [
            [
                "AZ"
            ],
            [
                "FL"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (T1:`soccer_2.College`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.decision = 'yes'\nRETURN DISTINCT T1.state",
        "question": "What are the different states that had students successfully try out?",
        "answers": [
            [
                "AZ"
            ],
            [
                "FL"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (T1:`soccer_2.Player`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.decision = 'yes'\nRETURN T1.pName,T2.cName",
        "question": "Find the name and college of students whose decisions are yes in the tryout.",
        "answers": [
            [
                "Andrew",
                "ASU"
            ],
            [
                "Blake",
                "FSU"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (T1:`soccer_2.Player`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.decision = 'yes'\nRETURN T1.pName,T2.cName",
        "question": "What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges?",
        "answers": [
            [
                "Andrew",
                "ASU"
            ],
            [
                "Blake",
                "FSU"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (T1:`soccer_2.Player`)-[T2:`soccer_2.Tryout`]-()\nRETURN T1.pName\nORDER BY T1.pName",
        "question": "Find the name of all students who were in the tryout sorted in alphabetic order.",
        "answers": [
            [
                "Andrew"
            ],
            [
                "Andrew"
            ],
            [
                "Blake"
            ],
            [
                "Charles"
            ],
            [
                "David"
            ],
            [
                "Eddie"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (T1:`soccer_2.Player`)-[T2:`soccer_2.Tryout`]-()\nRETURN T1.pName\nORDER BY T1.pName",
        "question": "What are the names of all students who tried out in alphabetical order?",
        "answers": [
            [
                "Andrew"
            ],
            [
                "Andrew"
            ],
            [
                "Blake"
            ],
            [
                "Charles"
            ],
            [
                "David"
            ],
            [
                "Eddie"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (T1:`soccer_2.Player`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.decision = 'yes'\nRETURN T1.pName,T1.HS",
        "question": "Find the name and hours of the students whose tryout decision is yes.",
        "answers": [
            [
                "Andrew",
                1200
            ],
            [
                "Blake",
                1600
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (T1:`soccer_2.Player`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.decision = 'yes'\nRETURN T1.pName,T1.HS",
        "question": "What are the names and hours spent practicing of every student who received a yes at tryouts?",
        "answers": [
            [
                "Andrew",
                1200
            ],
            [
                "Blake",
                1600
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (T1:`soccer_2.College`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.pPos = 'striker'\nRETURN T1.state",
        "question": "Find the states of the colleges that have students in the tryout who played in striker position.",
        "answers": [
            [
                "FL"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (T1:`soccer_2.College`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.pPos = 'striker'\nRETURN T1.state",
        "question": "What are the states of the colleges where students who tried out for the striker position attend?",
        "answers": [
            [
                "FL"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (T1:`soccer_2.Player`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.decision = 'yes' AND T2.pPos = 'striker'\nRETURN T1.pName",
        "question": "Find the names of the students who are in the position of striker and got a yes tryout decision.",
        "answers": [
            [
                "Blake"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (T1:`soccer_2.Player`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.decision = 'yes' AND T2.pPos = 'striker'\nRETURN T1.pName",
        "question": "What are the names of all students who successfully tried out for the position of striker?",
        "answers": [
            [
                "Blake"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (T1:`soccer_2.College`)-[T2:`soccer_2.Tryout`]-(T3:`soccer_2.Player`)\nWHERE T3.pName = 'Charles'\nRETURN T1.state",
        "question": "Find the state of the college which player Charles is attending.",
        "answers": [
            [
                "OK"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (T1:`soccer_2.College`)-[T2:`soccer_2.Tryout`]-(T3:`soccer_2.Player`)\nWHERE T3.pName = 'Charles'\nRETURN T1.state",
        "question": "In which state is the college that Charles attends?",
        "answers": [
            [
                "OK"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH ()-[tryout:`soccer_2.Tryout`]-()\nWHERE tryout.decision = 'yes' AND tryout.pPos = 'goalie'\nRETURN tryout.cName",
        "question": "Which college has any student who is a goalie and succeeded in the tryout.",
        "answers": [
            [
                "ASU"
            ],
            [
                "ASU"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH ()-[tryout:`soccer_2.Tryout`]-()\nWHERE tryout.decision = 'yes' AND tryout.pPos = 'goalie'\nRETURN tryout.cName",
        "question": "What college has a student who successfully made the team in the role of a goalie?",
        "answers": [
            [
                "ASU"
            ],
            [
                "ASU"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (T1:`soccer_2.College`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.decision = 'yes'\nRETURN DISTINCT T1.state,T1.enr",
        "question": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.",
        "answers": [
            [
                "AZ",
                12000
            ],
            [
                "FL",
                19000
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (T1:`soccer_2.College`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.decision = 'yes'\nRETURN DISTINCT T1.state,T1.enr",
        "question": "How many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges?",
        "answers": [
            [
                "AZ",
                12000
            ],
            [
                "FL",
                19000
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (college:`soccer_2.College`)\nWITH max(college.enr) AS enr\nMATCH (college:`soccer_2.College`)\nWHERE  college.enr <  enr \nRETURN DISTINCT college.state",
        "question": "Find the states where have the colleges whose enrollments are less than the largest size.",
        "answers": [
            [
                "LA"
            ],
            [
                "AZ"
            ],
            [
                "FL"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (college:`soccer_2.College`)\nWITH max(college.enr) AS enr\nMATCH (college:`soccer_2.College`)\nWHERE  college.enr <  enr \nRETURN DISTINCT college.state",
        "question": "What are the states with colleges that have enrollments less than the some other college?",
        "answers": [
            [
                "LA"
            ],
            [
                "AZ"
            ],
            [
                "FL"
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (college:`soccer_2.College`)\nWITH avg(college.enr) AS enr\nMATCH (college:`soccer_2.College`)\nWHERE  college.enr >  enr \nRETURN count(DISTINCT college.state)",
        "question": "What is the number of states that has some college whose enrollment is larger than the average enrollment?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (college:`soccer_2.College`)\nWITH avg(college.enr) AS enr\nMATCH (college:`soccer_2.College`)\nWHERE  college.enr >  enr \nRETURN count(DISTINCT college.state)",
        "question": "How many states have a college with more students than average?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (college:`soccer_2.College`)\nWITH avg(college.enr) AS enr\nMATCH (college:`soccer_2.College`)\nWHERE  college.enr <  enr \nRETURN count(DISTINCT college.state)",
        "question": "What is the number of states that has some colleges whose enrollment is smaller than the average enrollment?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "soccer_2",
        "query": "MATCH (college:`soccer_2.College`)\nWITH avg(college.enr) AS enr\nMATCH (college:`soccer_2.College`)\nWHERE  college.enr <  enr \nRETURN count(DISTINCT college.state)",
        "question": "How many states have smaller colleges than average?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (device:`device.device`)\nRETURN count(*)",
        "question": "How many devices are there?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (device:`device.device`)\nRETURN count(*)",
        "question": "Count the number of devices.",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (device:`device.device`)\nRETURN device.Carrier\nORDER BY device.Carrier ASC",
        "question": "List the carriers of devices in ascending alphabetical order.",
        "answers": [
            [
                "Bell Mobility"
            ],
            [
                "Iusacell"
            ],
            [
                "MTS Mobility"
            ],
            [
                "Telus Mobility"
            ],
            [
                "Verizon Wireless"
            ],
            [
                "Vodafone AU"
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (device:`device.device`)\nRETURN device.Carrier\nORDER BY device.Carrier ASC",
        "question": "What are the different carriers for devices, listed in alphabetical order?",
        "answers": [
            [
                "Bell Mobility"
            ],
            [
                "Iusacell"
            ],
            [
                "MTS Mobility"
            ],
            [
                "Telus Mobility"
            ],
            [
                "Verizon Wireless"
            ],
            [
                "Vodafone AU"
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (device:`device.device`)\nWHERE device.Software_Platform <> 'Android'\nRETURN device.Carrier",
        "question": "What are the carriers of devices whose software platforms are not \"Android\"?",
        "answers": [
            [
                "Verizon Wireless"
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (device:`device.device`)\nWHERE device.Software_Platform <> 'Android'\nRETURN device.Carrier",
        "question": "Return the device carriers that do not have Android as their software platform.",
        "answers": [
            [
                "Verizon Wireless"
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (shop:`device.shop`)\nRETURN shop.Shop_Name\nORDER BY shop.Open_Year ASC",
        "question": "What are the names of shops in ascending order of open year?",
        "answers": [
            [
                "Best Buy"
            ],
            [
                "Tynewydd repair"
            ],
            [
                "Ferndale"
            ],
            [
                "Apple"
            ],
            [
                "Dinas store"
            ],
            [
                "Naval repair"
            ],
            [
                "Pentre store"
            ],
            [
                "Gelli repair"
            ],
            [
                "Dinas Device"
            ],
            [
                "Naval's shop"
            ],
            [
                "ATnT"
            ],
            [
                "National Cellphone"
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (shop:`device.shop`)\nRETURN shop.Shop_Name\nORDER BY shop.Open_Year ASC",
        "question": "Return the names of shops, ordered by year of opening ascending.",
        "answers": [
            [
                "Best Buy"
            ],
            [
                "Tynewydd repair"
            ],
            [
                "Ferndale"
            ],
            [
                "Apple"
            ],
            [
                "Dinas store"
            ],
            [
                "Naval repair"
            ],
            [
                "Pentre store"
            ],
            [
                "Gelli repair"
            ],
            [
                "Dinas Device"
            ],
            [
                "Naval's shop"
            ],
            [
                "ATnT"
            ],
            [
                "National Cellphone"
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH ()-[stock:`device.stock`]-()\nRETURN avg(stock.Quantity)",
        "question": "What is the average quantity of stocks?",
        "answers": [
            [
                110.875
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH ()-[stock:`device.stock`]-()\nRETURN avg(stock.Quantity)",
        "question": "Give the average quantity of stocks.",
        "answers": [
            [
                110.875
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (shop:`device.shop`)\nRETURN shop.Shop_Name,shop.Location\nORDER BY shop.Shop_Name ASC",
        "question": "What are the names and location of the shops in ascending alphabetical order of name.",
        "answers": [
            [
                "ATnT",
                "Maerdy"
            ],
            [
                "Apple",
                "Blaenllechau"
            ],
            [
                "Best Buy",
                "Cymmer"
            ],
            [
                "Dinas Device",
                "Dinas"
            ],
            [
                "Dinas store",
                "Dinas"
            ],
            [
                "Ferndale",
                "Blaenllechau"
            ],
            [
                "Gelli repair",
                "Gelli"
            ],
            [
                "National Cellphone",
                "Wattstown"
            ],
            [
                "Naval repair",
                "Penygraig"
            ],
            [
                "Naval's shop",
                "Penygraig"
            ],
            [
                "Pentre store",
                "Pentre"
            ],
            [
                "Tynewydd repair",
                "Porth"
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (shop:`device.shop`)\nRETURN shop.Shop_Name,shop.Location\nORDER BY shop.Shop_Name ASC",
        "question": "Return the names and locations of shops, ordered by name in alphabetical order.",
        "answers": [
            [
                "ATnT",
                "Maerdy"
            ],
            [
                "Apple",
                "Blaenllechau"
            ],
            [
                "Best Buy",
                "Cymmer"
            ],
            [
                "Dinas Device",
                "Dinas"
            ],
            [
                "Dinas store",
                "Dinas"
            ],
            [
                "Ferndale",
                "Blaenllechau"
            ],
            [
                "Gelli repair",
                "Gelli"
            ],
            [
                "National Cellphone",
                "Wattstown"
            ],
            [
                "Naval repair",
                "Penygraig"
            ],
            [
                "Naval's shop",
                "Penygraig"
            ],
            [
                "Pentre store",
                "Pentre"
            ],
            [
                "Tynewydd repair",
                "Porth"
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (device:`device.device`)\nRETURN count(DISTINCT device.Software_Platform)",
        "question": "How many different software platforms are there for devices?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (device:`device.device`)\nRETURN count(DISTINCT device.Software_Platform)",
        "question": "Count the number of different software platforms.",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (shop:`device.shop`)\nWHERE shop.Shop_Name = 'Apple'\nRETURN shop.Open_Date,shop.Open_Year",
        "question": "List the open date of open year of the shop named \"Apple\".",
        "answers": [
            [
                "10 June",
                2009
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (shop:`device.shop`)\nWHERE shop.Shop_Name = 'Apple'\nRETURN shop.Open_Date,shop.Open_Year",
        "question": "What are the open dates and years for the shop named Apple?",
        "answers": [
            [
                "10 June",
                2009
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (shop:`device.shop`)\nRETURN shop.Shop_Name\nORDER BY shop.Open_Year DESC\nLIMIT 1",
        "question": "List the name of the shop with the latest open year.",
        "answers": [
            [
                "National Cellphone"
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (shop:`device.shop`)\nRETURN shop.Shop_Name\nORDER BY shop.Open_Year DESC\nLIMIT 1",
        "question": "What is the shop name corresponding to the shop that opened in the most recent year?",
        "answers": [
            [
                "National Cellphone"
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (T2:`device.device`)-[T1:`device.stock`]-(T3:`device.shop`)\nRETURN T3.Shop_Name,T2.Carrier",
        "question": "Show names of shops and the carriers of devices they have in stock.",
        "answers": [
            [
                "Gelli repair",
                "Bell Mobility"
            ],
            [
                "Dinas Device",
                "Bell Mobility"
            ],
            [
                "Ferndale",
                "Bell Mobility"
            ],
            [
                "Ferndale",
                "Vodafone AU"
            ],
            [
                "ATnT",
                "Vodafone AU"
            ],
            [
                "Dinas Device",
                "Vodafone AU"
            ],
            [
                "Apple",
                "Vodafone AU"
            ],
            [
                "Best Buy",
                "Vodafone AU"
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (T2:`device.device`)-[T1:`device.stock`]-(T3:`device.shop`)\nRETURN T3.Shop_Name,T2.Carrier",
        "question": "What are the names of device shops, and what are the carriers that they carry devices in stock for?",
        "answers": [
            [
                "Gelli repair",
                "Bell Mobility"
            ],
            [
                "Dinas Device",
                "Bell Mobility"
            ],
            [
                "Ferndale",
                "Bell Mobility"
            ],
            [
                "Ferndale",
                "Vodafone AU"
            ],
            [
                "ATnT",
                "Vodafone AU"
            ],
            [
                "Dinas Device",
                "Vodafone AU"
            ],
            [
                "Apple",
                "Vodafone AU"
            ],
            [
                "Best Buy",
                "Vodafone AU"
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (T2:`device.shop`)-[T1:`device.stock`]-()\nWITH T2.Shop_Name AS Shop_Name, count(*) AS count\nWHERE count  > 1\nRETURN Shop_Name",
        "question": "Show names of shops that have more than one kind of device in stock.",
        "answers": [
            [
                "Dinas Device"
            ],
            [
                "Ferndale"
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (T2:`device.shop`)-[T1:`device.stock`]-()\nWITH T2.Shop_Name AS Shop_Name, count(*) AS count\nWHERE count  > 1\nRETURN Shop_Name",
        "question": "What are the names of shops that have more than a single kind of device in stock?",
        "answers": [
            [
                "Dinas Device"
            ],
            [
                "Ferndale"
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (T2:`device.shop`)-[T1:`device.stock`]-()\nWITH count(T1.Shop_ID) AS cnt, T2\nRETURN T2.Shop_Name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Show the name of the shop that has the most kind of devices in stock.",
        "answers": [
            [
                "Dinas Device"
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (T2:`device.shop`)-[T1:`device.stock`]-()\nWITH count(T1.Shop_ID) AS cnt, T2\nRETURN T2.Shop_Name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the name of the shop that has the most different kinds of devices in stock?",
        "answers": [
            [
                "Dinas Device"
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (device:`device.device`)\nRETURN device.Software_Platform,count(*)",
        "question": "Please show different software platforms and the corresponding number of devices using each.",
        "answers": [
            [
                "Android",
                5
            ],
            [
                "iOS",
                1
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (device:`device.device`)\nRETURN device.Software_Platform,count(*)",
        "question": "What are the different software platforms for devices, and how many devices have each?",
        "answers": [
            [
                "Android",
                5
            ],
            [
                "iOS",
                1
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (device:`device.device`)\nRETURN device.Software_Platform\nORDER BY device.Software_Platform DESC",
        "question": "Please show the software platforms of devices in descending order of the count.",
        "answers": [
            [
                "iOS"
            ],
            [
                "Android"
            ],
            [
                "Android"
            ],
            [
                "Android"
            ],
            [
                "Android"
            ],
            [
                "Android"
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (device:`device.device`)\nRETURN device.Software_Platform\nORDER BY device.Software_Platform DESC",
        "question": "What are the different software platforms for devices, ordered by frequency descending?",
        "answers": [
            [
                "iOS"
            ],
            [
                "Android"
            ],
            [
                "Android"
            ],
            [
                "Android"
            ],
            [
                "Android"
            ],
            [
                "Android"
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (T2:`device.device`)-[T1:`device.stock`]-()\nWITH count(*) AS count, T2.Carrier AS Carrier\nWHERE count  > 1\nRETURN Carrier",
        "question": "Show the carriers of devices in stock at more than one shop.",
        "answers": [
            [
                "Bell Mobility"
            ],
            [
                "Vodafone AU"
            ]
        ]
    },
    {
        "db_id": "device",
        "query": "MATCH (T2:`device.device`)-[T1:`device.stock`]-()\nWITH count(*) AS count, T2.Carrier AS Carrier\nWHERE count  > 1\nRETURN Carrier",
        "question": "What are the carriers of devices that are in stock in more than a single shop?",
        "answers": [
            [
                "Bell Mobility"
            ],
            [
                "Vodafone AU"
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (bookings:`cre_Drama_Workshop_Groups.Bookings`)\nRETURN count(*)",
        "question": "How many bookings do we have?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (bookings:`cre_Drama_Workshop_Groups.Bookings`)\nRETURN count(*)",
        "question": "Count the total number of bookings made.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (bookings:`cre_Drama_Workshop_Groups.Bookings`)\nRETURN bookings.Order_Date",
        "question": "List the order dates of all the bookings.",
        "answers": [
            [
                "2016-12-12 10:43:01"
            ],
            [
                "1976-08-20 00:33:08"
            ],
            [
                "1975-11-23 06:28:47"
            ],
            [
                "1995-02-02 15:52:57"
            ],
            [
                "1995-05-10 14:49:47"
            ],
            [
                "1992-11-26 18:11:10"
            ],
            [
                "1975-12-30 14:12:32"
            ],
            [
                "1992-05-11 23:22:41"
            ],
            [
                "1971-05-11 06:53:01"
            ],
            [
                "1982-05-19 05:37:51"
            ],
            [
                "1991-10-11 17:24:15"
            ],
            [
                "1984-12-17 12:53:51"
            ],
            [
                "1996-09-14 10:17:55"
            ],
            [
                "2007-08-05 15:46:29"
            ],
            [
                "1976-10-24 07:40:47"
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (bookings:`cre_Drama_Workshop_Groups.Bookings`)\nRETURN bookings.Order_Date",
        "question": "What is the order date of each booking?",
        "answers": [
            [
                "2016-12-12 10:43:01"
            ],
            [
                "1976-08-20 00:33:08"
            ],
            [
                "1975-11-23 06:28:47"
            ],
            [
                "1995-02-02 15:52:57"
            ],
            [
                "1995-05-10 14:49:47"
            ],
            [
                "1992-11-26 18:11:10"
            ],
            [
                "1975-12-30 14:12:32"
            ],
            [
                "1992-05-11 23:22:41"
            ],
            [
                "1971-05-11 06:53:01"
            ],
            [
                "1982-05-19 05:37:51"
            ],
            [
                "1991-10-11 17:24:15"
            ],
            [
                "1984-12-17 12:53:51"
            ],
            [
                "1996-09-14 10:17:55"
            ],
            [
                "2007-08-05 15:46:29"
            ],
            [
                "1976-10-24 07:40:47"
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (bookings:`cre_Drama_Workshop_Groups.Bookings`)\nRETURN bookings.Planned_Delivery_Date,bookings.Actual_Delivery_Date",
        "question": "Show all the planned delivery dates and actual delivery dates of bookings.",
        "answers": [
            [
                "2013-03-10 18:47:05",
                "1997-11-21 10:07:40"
            ],
            [
                "2009-07-09 09:18:38",
                "1976-01-08 07:19:23"
            ],
            [
                "1989-01-05 19:24:45",
                "1990-03-16 19:38:47"
            ],
            [
                "2017-04-27 00:16:00",
                "1996-10-24 21:15:27"
            ],
            [
                "1979-07-19 19:44:01",
                "1971-01-13 13:24:52"
            ],
            [
                "2016-06-06 20:35:14",
                "2016-04-30 11:45:39"
            ],
            [
                "2008-07-18 18:15:40",
                "1983-10-09 10:48:48"
            ],
            [
                "1973-04-02 03:10:21",
                "1983-07-01 22:10:19"
            ],
            [
                "1974-05-07 21:40:39",
                "1986-10-04 13:31:10"
            ],
            [
                "1999-05-11 01:26:06",
                "1989-11-17 00:32:13"
            ],
            [
                "1978-04-10 12:23:59",
                "1983-02-07 20:27:10"
            ],
            [
                "2014-06-05 10:19:46",
                "1985-09-02 11:34:39"
            ],
            [
                "1993-04-17 23:53:01",
                "1982-04-18 02:59:08"
            ],
            [
                "1971-06-29 03:04:47",
                "1995-12-21 05:01:38"
            ],
            [
                "1972-06-25 15:51:34",
                "2004-02-22 04:37:14"
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (bookings:`cre_Drama_Workshop_Groups.Bookings`)\nRETURN bookings.Planned_Delivery_Date,bookings.Actual_Delivery_Date",
        "question": "What are the planned delivery date and actual delivery date for each booking?",
        "answers": [
            [
                "2013-03-10 18:47:05",
                "1997-11-21 10:07:40"
            ],
            [
                "2009-07-09 09:18:38",
                "1976-01-08 07:19:23"
            ],
            [
                "1989-01-05 19:24:45",
                "1990-03-16 19:38:47"
            ],
            [
                "2017-04-27 00:16:00",
                "1996-10-24 21:15:27"
            ],
            [
                "1979-07-19 19:44:01",
                "1971-01-13 13:24:52"
            ],
            [
                "2016-06-06 20:35:14",
                "2016-04-30 11:45:39"
            ],
            [
                "2008-07-18 18:15:40",
                "1983-10-09 10:48:48"
            ],
            [
                "1973-04-02 03:10:21",
                "1983-07-01 22:10:19"
            ],
            [
                "1974-05-07 21:40:39",
                "1986-10-04 13:31:10"
            ],
            [
                "1999-05-11 01:26:06",
                "1989-11-17 00:32:13"
            ],
            [
                "1978-04-10 12:23:59",
                "1983-02-07 20:27:10"
            ],
            [
                "2014-06-05 10:19:46",
                "1985-09-02 11:34:39"
            ],
            [
                "1993-04-17 23:53:01",
                "1982-04-18 02:59:08"
            ],
            [
                "1971-06-29 03:04:47",
                "1995-12-21 05:01:38"
            ],
            [
                "1972-06-25 15:51:34",
                "2004-02-22 04:37:14"
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (customers:`cre_Drama_Workshop_Groups.Customers`)\nRETURN count(*)",
        "question": "How many customers do we have?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (customers:`cre_Drama_Workshop_Groups.Customers`)\nRETURN count(*)",
        "question": "Count the number of customers recorded.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (drama_workshop_groups:`cre_Drama_Workshop_Groups.Drama_Workshop_Groups`)\nRETURN drama_workshop_groups.Store_Name",
        "question": "Show all the Store_Name of drama workshop groups.",
        "answers": [
            [
                "Amely Cafe"
            ],
            [
                "Veda Film"
            ],
            [
                "Queen Art"
            ],
            [
                "Kole Photo"
            ],
            [
                "WAT Food"
            ],
            [
                "Hansen Print"
            ],
            [
                "Roo Place"
            ],
            [
                "Uhuels Fruit"
            ],
            [
                "Harry Beef"
            ],
            [
                "Welch Flower"
            ],
            [
                "Kling Workshop"
            ],
            [
                "Orn News"
            ],
            [
                "Bednar Film"
            ],
            [
                "Kessler Exploration"
            ],
            [
                "Warino Photo"
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (drama_workshop_groups:`cre_Drama_Workshop_Groups.Drama_Workshop_Groups`)\nRETURN drama_workshop_groups.Store_Name",
        "question": "What are the store names of drama workshop groups?",
        "answers": [
            [
                "Amely Cafe"
            ],
            [
                "Veda Film"
            ],
            [
                "Queen Art"
            ],
            [
                "Kole Photo"
            ],
            [
                "WAT Food"
            ],
            [
                "Hansen Print"
            ],
            [
                "Roo Place"
            ],
            [
                "Uhuels Fruit"
            ],
            [
                "Harry Beef"
            ],
            [
                "Welch Flower"
            ],
            [
                "Kling Workshop"
            ],
            [
                "Orn News"
            ],
            [
                "Bednar Film"
            ],
            [
                "Kessler Exploration"
            ],
            [
                "Warino Photo"
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (invoices:`cre_Drama_Workshop_Groups.Invoices`)\nRETURN DISTINCT invoices.payment_method_code",
        "question": "What are the distinct payment method codes in all the invoices?",
        "answers": [
            [
                "MasterCard"
            ],
            [
                "Visa"
            ],
            [
                "American E"
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (invoices:`cre_Drama_Workshop_Groups.Invoices`)\nRETURN DISTINCT invoices.payment_method_code",
        "question": "Show me the distinct payment method codes from the invoice record.",
        "answers": [
            [
                "MasterCard"
            ],
            [
                "Visa"
            ],
            [
                "American E"
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (products:`cre_Drama_Workshop_Groups.Products`)\nWITH avg(products.Product_Price) AS product_price\nMATCH (products:`cre_Drama_Workshop_Groups.Products`)\nWHERE  products.Product_Price >  product_price \nRETURN DISTINCT products.Product_Name",
        "question": "Show all the distinct product names with price higher than the average.",
        "answers": [
            [
                "film"
            ],
            [
                "photo"
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (products:`cre_Drama_Workshop_Groups.Products`)\nWITH avg(products.Product_Price) AS product_price\nMATCH (products:`cre_Drama_Workshop_Groups.Products`)\nWHERE  products.Product_Price >  product_price \nRETURN DISTINCT products.Product_Name",
        "question": "What are the distinct names of the products that cost more than the average?",
        "answers": [
            [
                "film"
            ],
            [
                "photo"
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (products:`cre_Drama_Workshop_Groups.Products`)\nRETURN products.Product_Name\nORDER BY products.Product_Price DESC\nLIMIT 1",
        "question": "What is the name of the most expensive product?",
        "answers": [
            [
                "film"
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (products:`cre_Drama_Workshop_Groups.Products`)\nRETURN products.Product_Name\nORDER BY products.Product_Price DESC\nLIMIT 1",
        "question": "Tell me the name of the most pricy product.",
        "answers": [
            [
                "film"
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (products:`cre_Drama_Workshop_Groups.Products`)\nRETURN products.Product_Name\nORDER BY products.Product_Price ASC",
        "question": "List all product names in ascending order of price.",
        "answers": [
            [
                "photo"
            ],
            [
                "photo"
            ],
            [
                "film"
            ],
            [
                "photo"
            ],
            [
                "film"
            ],
            [
                "dinning"
            ],
            [
                "dinning"
            ],
            [
                "film"
            ],
            [
                "dinning"
            ],
            [
                "film"
            ],
            [
                "photo"
            ],
            [
                "photo"
            ],
            [
                "film"
            ],
            [
                "photo"
            ],
            [
                "film"
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (products:`cre_Drama_Workshop_Groups.Products`)\nRETURN products.Product_Name\nORDER BY products.Product_Price ASC",
        "question": "Sort the names of products in ascending order of their price.",
        "answers": [
            [
                "photo"
            ],
            [
                "photo"
            ],
            [
                "film"
            ],
            [
                "photo"
            ],
            [
                "film"
            ],
            [
                "dinning"
            ],
            [
                "dinning"
            ],
            [
                "film"
            ],
            [
                "dinning"
            ],
            [
                "film"
            ],
            [
                "photo"
            ],
            [
                "photo"
            ],
            [
                "film"
            ],
            [
                "photo"
            ],
            [
                "film"
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (invoices:`cre_Drama_Workshop_Groups.Invoices`)\nRETURN invoices.payment_method_code,count(*)",
        "question": "Show all payment method codes and the number of orders for each code.",
        "answers": [
            [
                "MasterCard",
                6
            ],
            [
                "Visa",
                5
            ],
            [
                "American E",
                4
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (invoices:`cre_Drama_Workshop_Groups.Invoices`)\nRETURN invoices.payment_method_code,count(*)",
        "question": "List the distinct payment method codes with the number of orders made",
        "answers": [
            [
                "MasterCard",
                6
            ],
            [
                "Visa",
                5
            ],
            [
                "American E",
                4
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (T1:`cre_Drama_Workshop_Groups.Marketing_Regions`)-[]-(T2:`cre_Drama_Workshop_Groups.Stores`)\nWHERE T2.Store_Name = \"Rob Dinning\"\nRETURN T1.Marketing_Region_Name",
        "question": "What is the name of the marketing region that the store Rob Dinning belongs to?",
        "answers": [
            [
                "Canada"
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (T1:`cre_Drama_Workshop_Groups.Marketing_Regions`)-[]-(T2:`cre_Drama_Workshop_Groups.Stores`)\nWHERE T2.Store_Name = \"Rob Dinning\"\nRETURN T1.Marketing_Region_Name",
        "question": "Return the name of the marketing region the store Rob Dinning is located in.",
        "answers": [
            [
                "Canada"
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (T1:`cre_Drama_Workshop_Groups.Ref_Service_Types`)-[]-(T2:`cre_Drama_Workshop_Groups.Services`)\nWHERE T2.Product_Price > 100\nRETURN T1.Service_Type_Description",
        "question": "What are the descriptions of the service types with product price above 100?",
        "answers": [
            [
                "provide photo service"
            ],
            [
                "provide dinning service"
            ],
            [
                "provide photo service"
            ],
            [
                "provide filming service"
            ],
            [
                "provide dinning service"
            ],
            [
                "provide filming service"
            ],
            [
                "provide adv promoting service"
            ],
            [
                "provide dinning service"
            ],
            [
                "provide adv promoting service"
            ],
            [
                "provide dinning service"
            ],
            [
                "provide dinning service"
            ],
            [
                "provide filming service"
            ],
            [
                "provide photo service"
            ],
            [
                "provide photo service"
            ],
            [
                "provide photo service"
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (T1:`cre_Drama_Workshop_Groups.Ref_Service_Types`)-[]-(T2:`cre_Drama_Workshop_Groups.Services`)\nWHERE T2.Product_Price > 100\nRETURN T1.Service_Type_Description",
        "question": "Give me the descriptions of the service types that cost more than 100.",
        "answers": [
            [
                "provide photo service"
            ],
            [
                "provide dinning service"
            ],
            [
                "provide photo service"
            ],
            [
                "provide filming service"
            ],
            [
                "provide dinning service"
            ],
            [
                "provide filming service"
            ],
            [
                "provide adv promoting service"
            ],
            [
                "provide dinning service"
            ],
            [
                "provide adv promoting service"
            ],
            [
                "provide dinning service"
            ],
            [
                "provide dinning service"
            ],
            [
                "provide filming service"
            ],
            [
                "provide photo service"
            ],
            [
                "provide photo service"
            ],
            [
                "provide photo service"
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (T1:`cre_Drama_Workshop_Groups.Ref_Service_Types`)-[]-(T2:`cre_Drama_Workshop_Groups.Services`)\nRETURN T1.Service_Type_Description,T2.Service_Type_Code,count(*)",
        "question": "What is the description, code and the corresponding count of each service type?",
        "answers": [
            [
                "provide photo service",
                "1",
                5
            ],
            [
                "provide dinning service",
                "2",
                5
            ],
            [
                "provide filming service",
                "3",
                3
            ],
            [
                "provide adv promoting service",
                "4",
                2
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (T1:`cre_Drama_Workshop_Groups.Ref_Service_Types`)-[]-(T2:`cre_Drama_Workshop_Groups.Services`)\nRETURN T1.Service_Type_Description,T2.Service_Type_Code,count(*)",
        "question": "List the description, code and the number of services for each service type.",
        "answers": [
            [
                "provide photo service",
                "1",
                5
            ],
            [
                "provide dinning service",
                "2",
                5
            ],
            [
                "provide filming service",
                "3",
                3
            ],
            [
                "provide adv promoting service",
                "4",
                2
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (T1:`cre_Drama_Workshop_Groups.Drama_Workshop_Groups`)-[]-(T2:`cre_Drama_Workshop_Groups.Services`)\nRETURN T1.Store_Phone,T1.Store_Email_Address",
        "question": "What are the phones and emails of workshop groups in which services are performed?",
        "answers": [
            [
                "492-463-5967",
                "quigley.queen@example.org"
            ],
            [
                "492-463-5967",
                "quigley.queen@example.org"
            ],
            [
                "(256)743-0310",
                "kole.torp@example.org"
            ],
            [
                "(411)133-9128",
                "watsica.hettie@example.com"
            ],
            [
                "1-764-337-3453",
                "hansen.krista@example.net"
            ],
            [
                "(422)705-5633",
                "roosevelt61@example.com"
            ],
            [
                "(636)443-4067",
                "uhuels@example.net"
            ],
            [
                "(904)958-9909x0087",
                "harry.nicolas@example.org"
            ],
            [
                "499-032-2149",
                "katherine.kling@example.org"
            ],
            [
                "+60(6)8081312118",
                "arturo.orn@example.org"
            ],
            [
                "+60(6)8081312118",
                "arturo.orn@example.org"
            ],
            [
                "1-351-773-1587x95545",
                "bednar.michael@example.org"
            ],
            [
                "1-351-773-1587x95545",
                "bednar.michael@example.org"
            ],
            [
                "1-811-875-3222",
                "waino.king@example.com"
            ],
            [
                "1-811-875-3222",
                "waino.king@example.com"
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (T1:`cre_Drama_Workshop_Groups.Drama_Workshop_Groups`)-[]-(T2:`cre_Drama_Workshop_Groups.Services`)\nRETURN T1.Store_Phone,T1.Store_Email_Address",
        "question": "Give me all the phone numbers and email addresses of the workshop groups where services are performed.",
        "answers": [
            [
                "492-463-5967",
                "quigley.queen@example.org"
            ],
            [
                "492-463-5967",
                "quigley.queen@example.org"
            ],
            [
                "(256)743-0310",
                "kole.torp@example.org"
            ],
            [
                "(411)133-9128",
                "watsica.hettie@example.com"
            ],
            [
                "1-764-337-3453",
                "hansen.krista@example.net"
            ],
            [
                "(422)705-5633",
                "roosevelt61@example.com"
            ],
            [
                "(636)443-4067",
                "uhuels@example.net"
            ],
            [
                "(904)958-9909x0087",
                "harry.nicolas@example.org"
            ],
            [
                "499-032-2149",
                "katherine.kling@example.org"
            ],
            [
                "+60(6)8081312118",
                "arturo.orn@example.org"
            ],
            [
                "+60(6)8081312118",
                "arturo.orn@example.org"
            ],
            [
                "1-351-773-1587x95545",
                "bednar.michael@example.org"
            ],
            [
                "1-351-773-1587x95545",
                "bednar.michael@example.org"
            ],
            [
                "1-811-875-3222",
                "waino.king@example.com"
            ],
            [
                "1-811-875-3222",
                "waino.king@example.com"
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (products:`cre_Drama_Workshop_Groups.Products`)\nWITH products.Product_Name AS Product_Name, avg(products.Product_Price) AS avg\nWHERE avg < 1000000\nRETURN Product_Name",
        "question": "What are the product names with average product price smaller than 1000000?",
        "answers": [
            [
                "dinning"
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (products:`cre_Drama_Workshop_Groups.Products`)\nWITH products.Product_Name AS Product_Name, avg(products.Product_Price) AS avg\nWHERE avg < 1000000\nRETURN Product_Name",
        "question": "Find the product names whose average product price is below 1000000.",
        "answers": [
            [
                "dinning"
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (drama_workshop_groups:`cre_Drama_Workshop_Groups.Drama_Workshop_Groups`)\nRETURN count(DISTINCT drama_workshop_groups.Currency_Code)",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "MATCH (drama_workshop_groups:`cre_Drama_Workshop_Groups.Drama_Workshop_Groups`)\nRETURN count(DISTINCT drama_workshop_groups.Currency_Code)",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "music_2",
        "query": "MATCH (albums:`music_2.Albums`)\nWHERE albums.Year = 2012\nRETURN properties(albums)",
        "question": "Find all the albums in 2012.",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (albums:`music_2.Albums`)\nWHERE albums.Year = 2012\nRETURN properties(albums)",
        "question": "return all columns of the albums created in the year of 2012.",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Band`)-[T1:`music_2.Performance`]-()\nWHERE T2.Firstname = 'Solveig'\nRETURN DISTINCT T1.StagePosition",
        "question": "Find all the stage positions of the musicians with first name \"Solveig\"",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Band`)-[T1:`music_2.Performance`]-()\nWHERE T2.Firstname = 'Solveig'\nRETURN DISTINCT T1.StagePosition",
        "question": "What are the different stage positions for all musicians whose first name is \"Solveig\"?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Band`)-[T1:`music_2.Performance`]-(T3:`music_2.Songs`)\nWHERE T2.Lastname = 'Heilo'\nRETURN T3.Title",
        "question": "Find all the songs performed by artist with last name \"Heilo\"",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Band`)-[T1:`music_2.Performance`]-(T3:`music_2.Songs`)\nWHERE T2.Lastname = 'Heilo'\nRETURN T3.Title",
        "question": "What are the names of the songs by the artist whose last name is \"Heilo\"?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Band`)-[T1:`music_2.Performance`]-(T3:`music_2.Songs`)\nWHERE T3.Title = 'Flash'\nRETURN count(*)",
        "question": "Hom many musicians performed in the song \"Flash\"?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Band`)-[T1:`music_2.Performance`]-(T3:`music_2.Songs`)\nWHERE T3.Title = 'Flash'\nRETURN count(*)",
        "question": "How many musicians play in the song \"Flash\"?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Band`)-[T1:`music_2.Performance`]-(T3:`music_2.Songs`)\nWHERE T2.Firstname = 'Marianne'\nRETURN T3.Title",
        "question": "Find all the songs produced by artists with first name \"Marianne\".",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Band`)-[T1:`music_2.Performance`]-(T3:`music_2.Songs`)\nWHERE T2.Firstname = 'Marianne'\nRETURN T3.Title",
        "question": "What are the names of all songs produced by the artist with the first name \"Marianne\"?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Band`)-[T1:`music_2.Performance`]-(T3:`music_2.Songs`)\nWHERE T3.Title = 'Badlands'\nRETURN T2.Firstname,T2.Lastname",
        "question": "Who performed the song named \"Badlands\"? Show the first name and the last name.",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Band`)-[T1:`music_2.Performance`]-(T3:`music_2.Songs`)\nWHERE T3.Title = 'Badlands'\nRETURN T2.Firstname,T2.Lastname",
        "question": "What are the first and last names of the artist who perfomed the song \"Badlands\"?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Band`)-[T1:`music_2.Performance`]-(T3:`music_2.Songs`)\nWHERE T3.Title = 'Badlands' AND T1.StagePosition = 'back'\nRETURN T2.Firstname,T2.Lastname",
        "question": "Who is performing in the back stage position for the song \"Badlands\"? Show the first name and the last name.",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Band`)-[T1:`music_2.Performance`]-(T3:`music_2.Songs`)\nWHERE T3.Title = 'Badlands' AND T1.StagePosition = 'back'\nRETURN T2.Firstname,T2.Lastname",
        "question": "What are the first and last names of the performer who was in the back stage position for the song \"Badlands\"?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Band`)-[T1:`music_2.Performance`]-(T3:`music_2.Songs`)\nWITH count(T2.Lastname) AS cnt, T2\nRETURN T2.Lastname\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the last name of the musician that have produced the most number of songs?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Band`)-[T1:`music_2.Performance`]-(T3:`music_2.Songs`)\nWITH count(T2.Lastname) AS cnt, T2\nRETURN T2.Lastname\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the last name of the musician who was in the most songs?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Band`)-[T1:`music_2.Performance`]-()\nWHERE T1.StagePosition = 'back'\nWITH count(T2.Lastname) AS cnt, T2\nRETURN T2.Lastname\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the last name of the musician that has been at the back position the most?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Band`)-[T1:`music_2.Performance`]-()\nWHERE T1.StagePosition = 'back'\nWITH count(T2.Lastname) AS cnt, T2\nRETURN T2.Lastname\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the last name of the musicians who has played back position the most?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (songs:`music_2.Songs`)\nWHERE songs.Title =~'.*[ | ]the .*'\nRETURN songs.Title",
        "question": "Find all the songs whose name contains the word \"the\".",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (songs:`music_2.Songs`)\nWHERE songs.Title =~'.*[ | ]the .*'\nRETURN songs.Title",
        "question": "What are the names of the songs whose title has the word \"the\"?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH ()-[instruments:`music_2.Instruments`]-()\nRETURN DISTINCT instruments.Instrument",
        "question": "What are all the instruments used?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH ()-[instruments:`music_2.Instruments`]-()\nRETURN DISTINCT instruments.Instrument",
        "question": "What are the different instruments listed in the database?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH ()-[instruments:`music_2.Instruments`]-()\nRETURN instruments.Instrument\nORDER BY instruments.Instrument DESC\nLIMIT 1",
        "question": "What is the most used instrument?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH ()-[instruments:`music_2.Instruments`]-()\nRETURN instruments.Instrument\nORDER BY instruments.Instrument DESC\nLIMIT 1",
        "question": "What instrument is used the most?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH ()-[instruments:`music_2.Instruments`]-()\nWHERE instruments.Instrument = 'drums'\nRETURN count(*)",
        "question": "How many songs have used the instrument \"drums\"?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "music_2",
        "query": "MATCH ()-[instruments:`music_2.Instruments`]-()\nWHERE instruments.Instrument = 'drums'\nRETURN count(*)",
        "question": "How many songs use drums as an instrument?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "music_2",
        "query": "MATCH ()-[vocals:`music_2.Vocals`]-()\nRETURN vocals.Type\nORDER BY vocals.Type DESC\nLIMIT 1",
        "question": "Which vocal type is the most frequently appearring type?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH ()-[vocals:`music_2.Vocals`]-()\nRETURN vocals.Type\nORDER BY vocals.Type DESC\nLIMIT 1",
        "question": "What is the type of vocables that appears most frequently?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Songs`)-[T1:`music_2.Vocals`]-()\nWHERE T2.Title = 'Demon Kitty Rag'\nRETURN count(*)",
        "question": "Find the number of vocal types used in song \"Demon Kitty Rag\"?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Songs`)-[T1:`music_2.Vocals`]-()\nWHERE T2.Title = 'Demon Kitty Rag'\nRETURN count(*)",
        "question": "What are the types of vocals used in the song \"Demon Kitty Rag\"?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "music_2",
        "query": "MATCH ()-[vocals:`music_2.Vocals`]-()\nRETURN DISTINCT vocals.Type",
        "question": "Find all the vocal types.",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH ()-[vocals:`music_2.Vocals`]-()\nRETURN DISTINCT vocals.Type",
        "question": "What are the different types of vocals?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (albums:`music_2.Albums`)\nWHERE albums.Year = 2010\nRETURN properties(albums)",
        "question": "What are the albums produced in year 2010?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (albums:`music_2.Albums`)\nWHERE albums.Year = 2010\nRETURN properties(albums)",
        "question": "What information is there on albums from 2010?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Band`)-[T1:`music_2.Performance`]-(T3:`music_2.Songs`)\nWHERE T3.Title = 'Le Pop'\nRETURN T2.Firstname,T2.Lastname",
        "question": "Who performed the song named \"Le Pop\"?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Band`)-[T1:`music_2.Performance`]-(T3:`music_2.Songs`)\nWHERE T3.Title = 'Le Pop'\nRETURN T2.Firstname,T2.Lastname",
        "question": "What is the first and last name of artist who performed \"Le Pop\"?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Band`)-[T1:`music_2.Performance`]-(T3:`music_2.Songs`)\nWITH count(T2.Lastname) AS cnt, T2\nRETURN T2.Lastname\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the last name of the musician that have produced the most songs?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Band`)-[T1:`music_2.Performance`]-(T3:`music_2.Songs`)\nWITH count(T2.Lastname) AS cnt, T2\nRETURN T2.Lastname\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the last name of the artist who sang the most songs?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Songs`)-[T1:`music_2.Vocals`]-()\nWHERE T2.Title = 'Le Pop'\nRETURN count(*)",
        "question": "Find the number of vocal types used in song \"Le Pop\"",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Songs`)-[T1:`music_2.Vocals`]-()\nWHERE T2.Title = 'Le Pop'\nRETURN count(*)",
        "question": "How many vocal types are used in the song \"Le Pop\"?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "music_2",
        "query": "MATCH (t2:`music_2.Band`)-[t1:`music_2.Performance`]-(T3:`music_2.Songs`)\nWITH count(t2.Firstname) AS cnt, t2\nRETURN t2.Firstname\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Find the first name of the band mate that has performed in most songs.",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (t2:`music_2.Band`)-[t1:`music_2.Performance`]-(T3:`music_2.Songs`)\nWITH count(t2.Firstname) AS cnt, t2\nRETURN t2.Firstname\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the first name of the band mate who perfomed in the most songs?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Band`)-[T1:`music_2.Performance`]-(T3:`music_2.Songs`)\nWHERE T3.Title = 'Der Kapitan' AND T1.StagePosition = 'back'\nRETURN T2.Firstname,T2.Lastname",
        "question": "Who is performing in the back stage position for the song \"Der Kapitan\"? Show the first name and last name.",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T2:`music_2.Band`)-[T1:`music_2.Performance`]-(T3:`music_2.Songs`)\nWHERE T3.Title = 'Der Kapitan' AND T1.StagePosition = 'back'\nRETURN T2.Firstname,T2.Lastname",
        "question": "What is the first and last name of the artist who performed back stage for the song \"Der Kapitan\"?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T1:`music_2.Albums`)-[T2:`music_2.Tracklists`]-(T3:`music_2.Songs`)\nWHERE T1.Title = 'A Kiss Before You Go: Live in Hamburg'\nRETURN T3.Title",
        "question": "What are the songs in album \"A Kiss Before You Go: Live in Hamburg\"?",
        "answers": []
    },
    {
        "db_id": "music_2",
        "query": "MATCH (T1:`music_2.Albums`)-[T2:`music_2.Tracklists`]-(T3:`music_2.Songs`)\nWHERE T1.Title = 'A Kiss Before You Go: Live in Hamburg'\nRETURN T3.Title",
        "question": "What are the song titles on the album \"A Kiss Before You Go: Live in Hamburg\"?",
        "answers": []
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE manufacturers.Name = 'Sony'\nRETURN manufacturers.Founder",
        "question": "Who is the founder of Sony?",
        "answers": [
            [
                "Andy"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE manufacturers.Name = 'Sony'\nRETURN manufacturers.Founder",
        "question": "Return the founder of Sony.",
        "answers": [
            [
                "Andy"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE manufacturers.Founder = 'James'\nRETURN manufacturers.Headquarter",
        "question": "Where is the headquarter of the company founded by James?",
        "answers": [
            [
                "Los Angeles"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE manufacturers.Founder = 'James'\nRETURN manufacturers.Headquarter",
        "question": "What is the headquarter of the company whose founder is James?",
        "answers": [
            [
                "Los Angeles"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nRETURN manufacturers.Name,manufacturers.Headquarter\nORDER BY manufacturers.Revenue DESC",
        "question": "Find all manufacturers' names and their headquarters, sorted by the ones with highest revenue first.",
        "answers": [
            [
                "Iomega",
                "Beijing"
            ],
            [
                "Fujitsu",
                "Taiwan"
            ],
            [
                "Sony",
                "Tokyo"
            ],
            [
                "Creative Labs",
                "Austin"
            ],
            [
                "Hewlett-Packard",
                "Los Angeles"
            ],
            [
                "Winchester",
                "Paris"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nRETURN manufacturers.Name,manufacturers.Headquarter\nORDER BY manufacturers.Revenue DESC",
        "question": "What are the names and headquarters of all manufacturers, ordered by revenue descending?",
        "answers": [
            [
                "Iomega",
                "Beijing"
            ],
            [
                "Fujitsu",
                "Taiwan"
            ],
            [
                "Sony",
                "Tokyo"
            ],
            [
                "Creative Labs",
                "Austin"
            ],
            [
                "Hewlett-Packard",
                "Los Angeles"
            ],
            [
                "Winchester",
                "Paris"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE manufacturers.Founder = 'Andy'\nRETURN count(*)",
        "question": "How many companies were created by Andy?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE manufacturers.Founder = 'Andy'\nRETURN count(*)",
        "question": "Return the number of companies created by Andy.",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nRETURN DISTINCT manufacturers.Headquarter",
        "question": "What are the different cities listed?",
        "answers": [
            [
                "Tokyo"
            ],
            [
                "Austin"
            ],
            [
                "Los Angeles"
            ],
            [
                "Beijing"
            ],
            [
                "Taiwan"
            ],
            [
                "Paris"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nRETURN DISTINCT manufacturers.Headquarter",
        "question": "Give the distinct headquarters of manufacturers.",
        "answers": [
            [
                "Tokyo"
            ],
            [
                "Austin"
            ],
            [
                "Los Angeles"
            ],
            [
                "Beijing"
            ],
            [
                "Taiwan"
            ],
            [
                "Paris"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE manufacturers.Headquarter = 'Tokyo' OR manufacturers.Headquarter = 'Beijing'\nRETURN count(*)",
        "question": "Find the number of manufactures that are based in Tokyo or Beijing.",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE manufacturers.Headquarter = 'Tokyo' OR manufacturers.Headquarter = 'Beijing'\nRETURN count(*)",
        "question": "How many manufacturers have headquarters in either Tokyo or Beijing?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE 100<=manufacturers.Revenue<=150\nRETURN manufacturers.Name",
        "question": "Find the name of companies whose revenue is between 100 and 150.",
        "answers": [
            [
                "Sony"
            ],
            [
                "Creative Labs"
            ],
            [
                "Fujitsu"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE 100<=manufacturers.Revenue<=150\nRETURN manufacturers.Name",
        "question": "What are the names of companies with revenue between 100 and 150?",
        "answers": [
            [
                "Sony"
            ],
            [
                "Creative Labs"
            ],
            [
                "Fujitsu"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nRETURN manufacturers.Name,manufacturers.Headquarter,manufacturers.Founder\nORDER BY manufacturers.Revenue DESC\nLIMIT 1",
        "question": "Find the name, headquarter and founder of the manufacturer that has the highest revenue.",
        "answers": [
            [
                "Iomega",
                "Beijing",
                "Mary"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nRETURN manufacturers.Name,manufacturers.Headquarter,manufacturers.Founder\nORDER BY manufacturers.Revenue DESC\nLIMIT 1",
        "question": "What are the names, headquarters and founders of the company with the highest revenue?",
        "answers": [
            [
                "Iomega",
                "Beijing",
                "Mary"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nRETURN manufacturers.Name,manufacturers.Headquarter,manufacturers.Revenue\nORDER BY manufacturers.Revenue DESC",
        "question": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order.",
        "answers": [
            [
                "Iomega",
                "Beijing",
                200.0
            ],
            [
                "Fujitsu",
                "Taiwan",
                130.0
            ],
            [
                "Sony",
                "Tokyo",
                120.0
            ],
            [
                "Creative Labs",
                "Austin",
                100.0
            ],
            [
                "Hewlett-Packard",
                "Los Angeles",
                50.0
            ],
            [
                "Winchester",
                "Paris",
                30.0
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nRETURN manufacturers.Name,manufacturers.Headquarter,manufacturers.Revenue\nORDER BY manufacturers.Revenue DESC",
        "question": "What are the names, headquarters and revenues for manufacturers, sorted by revenue descending?",
        "answers": [
            [
                "Iomega",
                "Beijing",
                200.0
            ],
            [
                "Fujitsu",
                "Taiwan",
                130.0
            ],
            [
                "Sony",
                "Tokyo",
                120.0
            ],
            [
                "Creative Labs",
                "Austin",
                100.0
            ],
            [
                "Hewlett-Packard",
                "Los Angeles",
                50.0
            ],
            [
                "Winchester",
                "Paris",
                30.0
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nWITH avg(manufacturers.Revenue) AS revenue\nMATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE  manufacturers.Revenue >  revenue \nRETURN manufacturers.Name",
        "question": "Find the name of companies whose revenue is greater than the average revenue of all companies.",
        "answers": [
            [
                "Sony"
            ],
            [
                "Iomega"
            ],
            [
                "Fujitsu"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nWITH avg(manufacturers.Revenue) AS revenue\nMATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE  manufacturers.Revenue >  revenue \nRETURN manufacturers.Name",
        "question": "What are the names of manufacturers with revenue greater than the average of all revenues?",
        "answers": [
            [
                "Sony"
            ],
            [
                "Iomega"
            ],
            [
                "Fujitsu"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE manufacturers.Headquarter = 'Austin'\nWITH min(manufacturers.Revenue) AS revenue\nMATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE  manufacturers.Revenue <  revenue \nRETURN manufacturers.Name",
        "question": "Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.",
        "answers": [
            [
                "Hewlett-Packard"
            ],
            [
                "Winchester"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE manufacturers.Headquarter = 'Austin'\nWITH min(manufacturers.Revenue) AS revenue\nMATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE  manufacturers.Revenue <  revenue \nRETURN manufacturers.Name",
        "question": "What are the names of companies with revenue less than the lowest revenue of any manufacturer in Austin?",
        "answers": [
            [
                "Hewlett-Packard"
            ],
            [
                "Winchester"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nRETURN manufacturers.Name,max(manufacturers.Revenue),manufacturers.Headquarter",
        "question": "Find the name and revenue of the company that earns the highest revenue in each city.",
        "answers": [
            [
                "Sony",
                120.0,
                "Tokyo"
            ],
            [
                "Creative Labs",
                100.0,
                "Austin"
            ],
            [
                "Hewlett-Packard",
                50.0,
                "Los Angeles"
            ],
            [
                "Iomega",
                200.0,
                "Beijing"
            ],
            [
                "Fujitsu",
                130.0,
                "Taiwan"
            ],
            [
                "Winchester",
                30.0,
                "Paris"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nRETURN manufacturers.Name,max(manufacturers.Revenue),manufacturers.Headquarter",
        "question": "What are the names and revenues of the companies with the highest revenues in each headquarter city?",
        "answers": [
            [
                "Sony",
                120.0,
                "Tokyo"
            ],
            [
                "Creative Labs",
                100.0,
                "Austin"
            ],
            [
                "Hewlett-Packard",
                50.0,
                "Los Angeles"
            ],
            [
                "Iomega",
                200.0,
                "Beijing"
            ],
            [
                "Fujitsu",
                130.0,
                "Taiwan"
            ],
            [
                "Winchester",
                30.0,
                "Paris"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (T1:`manufactory_1.Products`)-[]-(T2:`manufactory_1.Manufacturers`)\nRETURN count(DISTINCT T1.Name),T2.Headquarter",
        "question": "Find the number of different products that are produced by companies at different headquarter cities.",
        "answers": [
            [
                1,
                "Tokyo"
            ],
            [
                3,
                "Austin"
            ],
            [
                3,
                "Los Angeles"
            ],
            [
                1,
                "Beijing"
            ],
            [
                1,
                "Taiwan"
            ],
            [
                2,
                "Paris"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (T1:`manufactory_1.Products`)-[]-(T2:`manufactory_1.Manufacturers`)\nRETURN count(DISTINCT T1.Name),T2.Headquarter",
        "question": "How many different products are produced in each headquarter city?",
        "answers": [
            [
                1,
                "Tokyo"
            ],
            [
                3,
                "Austin"
            ],
            [
                3,
                "Los Angeles"
            ],
            [
                1,
                "Beijing"
            ],
            [
                1,
                "Taiwan"
            ],
            [
                2,
                "Paris"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (T1:`manufactory_1.Products`)-[]-(T2:`manufactory_1.Manufacturers`)\nRETURN count(*),T2.Name",
        "question": "Find the number of products for each manufacturer, showing the name of each company.",
        "answers": [
            [
                1,
                "Sony"
            ],
            [
                3,
                "Creative Labs"
            ],
            [
                3,
                "Hewlett-Packard"
            ],
            [
                1,
                "Iomega"
            ],
            [
                1,
                "Fujitsu"
            ],
            [
                2,
                "Winchester"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (T1:`manufactory_1.Products`)-[]-(T2:`manufactory_1.Manufacturers`)\nRETURN count(*),T2.Name",
        "question": "How many products are there for each manufacturer?",
        "answers": [
            [
                1,
                "Sony"
            ],
            [
                3,
                "Creative Labs"
            ],
            [
                3,
                "Hewlett-Packard"
            ],
            [
                1,
                "Iomega"
            ],
            [
                1,
                "Fujitsu"
            ],
            [
                2,
                "Winchester"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (products:`manufactory_1.Products`)\nRETURN products.Name",
        "question": "Select the names of all the products in the store.",
        "answers": [
            [
                "Hard drive"
            ],
            [
                "Memory"
            ],
            [
                "ZIP drive"
            ],
            [
                "Floppy disk"
            ],
            [
                "Monitor"
            ],
            [
                "DVD drive"
            ],
            [
                "CD drive"
            ],
            [
                "Printer"
            ],
            [
                "Toner cartridge"
            ],
            [
                "DVD burner"
            ],
            [
                "DVD drive"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (products:`manufactory_1.Products`)\nRETURN products.Name",
        "question": "What are the names of all products?",
        "answers": [
            [
                "Hard drive"
            ],
            [
                "Memory"
            ],
            [
                "ZIP drive"
            ],
            [
                "Floppy disk"
            ],
            [
                "Monitor"
            ],
            [
                "DVD drive"
            ],
            [
                "CD drive"
            ],
            [
                "Printer"
            ],
            [
                "Toner cartridge"
            ],
            [
                "DVD burner"
            ],
            [
                "DVD drive"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (products:`manufactory_1.Products`)\nRETURN products.Name,products.Price",
        "question": "Select the names and the prices of all the products in the store.",
        "answers": [
            [
                "Hard drive",
                240
            ],
            [
                "Memory",
                120
            ],
            [
                "ZIP drive",
                150
            ],
            [
                "Floppy disk",
                5
            ],
            [
                "Monitor",
                240
            ],
            [
                "DVD drive",
                180
            ],
            [
                "CD drive",
                90
            ],
            [
                "Printer",
                270
            ],
            [
                "Toner cartridge",
                66
            ],
            [
                "DVD burner",
                180
            ],
            [
                "DVD drive",
                150
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (products:`manufactory_1.Products`)\nRETURN products.Name,products.Price",
        "question": "What are the names and prices of all products in the store?",
        "answers": [
            [
                "Hard drive",
                240
            ],
            [
                "Memory",
                120
            ],
            [
                "ZIP drive",
                150
            ],
            [
                "Floppy disk",
                5
            ],
            [
                "Monitor",
                240
            ],
            [
                "DVD drive",
                180
            ],
            [
                "CD drive",
                90
            ],
            [
                "Printer",
                270
            ],
            [
                "Toner cartridge",
                66
            ],
            [
                "DVD burner",
                180
            ],
            [
                "DVD drive",
                150
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (products:`manufactory_1.Products`)\nWHERE products.Price <= 200\nRETURN products.Name",
        "question": "Select the name of the products with a price less than or equal to $200.",
        "answers": [
            [
                "Memory"
            ],
            [
                "ZIP drive"
            ],
            [
                "Floppy disk"
            ],
            [
                "DVD drive"
            ],
            [
                "CD drive"
            ],
            [
                "Toner cartridge"
            ],
            [
                "DVD burner"
            ],
            [
                "DVD drive"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (products:`manufactory_1.Products`)\nWHERE products.Price <= 200\nRETURN products.Name",
        "question": "What are the names of products with price at most 200?",
        "answers": [
            [
                "Memory"
            ],
            [
                "ZIP drive"
            ],
            [
                "Floppy disk"
            ],
            [
                "DVD drive"
            ],
            [
                "CD drive"
            ],
            [
                "Toner cartridge"
            ],
            [
                "DVD burner"
            ],
            [
                "DVD drive"
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (products:`manufactory_1.Products`)\nRETURN avg(products.Price)",
        "question": "Compute the average price of all the products.",
        "answers": [
            [
                153.72727272727272
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (products:`manufactory_1.Products`)\nRETURN avg(products.Price)",
        "question": "What is the average price across all products?",
        "answers": [
            [
                153.72727272727272
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (products:`manufactory_1.Products`)\nWHERE products.Manufacturer = 2\nRETURN avg(products.Price)",
        "question": "Compute the average price of all products with manufacturer code equal to 2.",
        "answers": [
            [
                150.0
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (products:`manufactory_1.Products`)\nWHERE products.Manufacturer = 2\nRETURN avg(products.Price)",
        "question": "What is the average price of products with manufacturer codes equal to 2?",
        "answers": [
            [
                150.0
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (products:`manufactory_1.Products`)\nWHERE products.Price >= 180\nRETURN count(*)",
        "question": "Compute the number of products with a price larger than or equal to $180.",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (products:`manufactory_1.Products`)\nWHERE products.Price >= 180\nRETURN count(*)",
        "question": "How many products have prices of at least 180?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (products:`manufactory_1.Products`)\nWHERE products.Price >= 180\nRETURN products.Name,products.Price\nORDER BY products.Price DESC,products.Name ASC",
        "question": "Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).",
        "answers": [
            [
                "Printer",
                270
            ],
            [
                "Hard drive",
                240
            ],
            [
                "Monitor",
                240
            ],
            [
                "DVD burner",
                180
            ],
            [
                "DVD drive",
                180
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (products:`manufactory_1.Products`)\nWHERE products.Price >= 180\nRETURN products.Name,products.Price\nORDER BY products.Price DESC,products.Name ASC",
        "question": "What are the names and prices of products that cost at least 180, sorted by price decreasing and name ascending?",
        "answers": [
            [
                "Printer",
                270
            ],
            [
                "Hard drive",
                240
            ],
            [
                "Monitor",
                240
            ],
            [
                "DVD burner",
                180
            ],
            [
                "DVD drive",
                180
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (products:`manufactory_1.Products`)\nRETURN avg(products.Price),products.Manufacturer",
        "question": "Select the average price of each manufacturer's products, showing only the manufacturer's code.",
        "answers": [
            [
                240.0,
                5
            ],
            [
                62.5,
                6
            ],
            [
                150.0,
                4
            ],
            [
                240.0,
                1
            ],
            [
                150.0,
                2
            ],
            [
                162.0,
                3
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (products:`manufactory_1.Products`)\nRETURN avg(products.Price),products.Manufacturer",
        "question": "What are the average prices of products, grouped by manufacturer code?",
        "answers": [
            [
                240.0,
                5
            ],
            [
                62.5,
                6
            ],
            [
                150.0,
                4
            ],
            [
                240.0,
                1
            ],
            [
                150.0,
                2
            ],
            [
                162.0,
                3
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (products:`manufactory_1.Products`)\nRETURN products.Name,products.Price\nORDER BY products.Price ASC\nLIMIT 1",
        "question": "Select the name and price of the cheapest product.",
        "answers": [
            [
                "Floppy disk",
                5
            ]
        ]
    },
    {
        "db_id": "manufactory_1",
        "query": "MATCH (products:`manufactory_1.Products`)\nRETURN products.Name,products.Price\nORDER BY products.Price ASC\nLIMIT 1",
        "question": "What is the name and price of the cheapest product?",
        "answers": [
            [
                "Floppy disk",
                5
            ]
        ]
    },
    {
        "db_id": "tracking_software_problems",
        "query": "MATCH (problem_log:`tracking_software_problems.Problem_Log`)\nRETURN problem_log.problem_log_id\nORDER BY problem_log.log_entry_date DESC\nLIMIT 1",
        "question": "What is the id of the problem log that is created most recently?",
        "answers": [
            [
                14
            ]
        ]
    },
    {
        "db_id": "tracking_software_problems",
        "query": "MATCH (problem_log:`tracking_software_problems.Problem_Log`)\nRETURN problem_log.problem_log_id\nORDER BY problem_log.log_entry_date DESC\nLIMIT 1",
        "question": "Which problem log was created most recently? Give me the log id.",
        "answers": [
            [
                14
            ]
        ]
    },
    {
        "db_id": "tracking_software_problems",
        "query": "MATCH (problem_log:`tracking_software_problems.Problem_Log`)\nRETURN problem_log.problem_log_id,problem_log.problem_id\nORDER BY problem_log.log_entry_date\nLIMIT 1",
        "question": "What is the oldest log id and its corresponding problem id?",
        "answers": [
            [
                11,
                8
            ]
        ]
    },
    {
        "db_id": "tracking_software_problems",
        "query": "MATCH (problem_log:`tracking_software_problems.Problem_Log`)\nRETURN problem_log.problem_log_id,problem_log.problem_id\nORDER BY problem_log.log_entry_date\nLIMIT 1",
        "question": "Find the oldest log id and its corresponding problem id.",
        "answers": [
            [
                11,
                8
            ]
        ]
    },
    {
        "db_id": "tracking_software_problems",
        "query": "MATCH (problem_log:`tracking_software_problems.Problem_Log`)\nWHERE problem_log.problem_id = 10\nRETURN problem_log.problem_log_id,problem_log.log_entry_date",
        "question": "Find all the ids and dates of the logs for the problem whose id is 10.",
        "answers": [
            [
                12,
                "1997-08-31 08:19:12"
            ],
            [
                13,
                "2009-04-10 19:09:30"
            ]
        ]
    },
    {
        "db_id": "tracking_software_problems",
        "query": "MATCH (problem_log:`tracking_software_problems.Problem_Log`)\nWHERE problem_log.problem_id = 10\nRETURN problem_log.problem_log_id,problem_log.log_entry_date",
        "question": "For the problem with id 10, return the ids and dates of its problem logs.",
        "answers": [
            [
                12,
                "1997-08-31 08:19:12"
            ],
            [
                13,
                "2009-04-10 19:09:30"
            ]
        ]
    },
    {
        "db_id": "tracking_software_problems",
        "query": "MATCH (problem_log:`tracking_software_problems.Problem_Log`)\nRETURN problem_log.problem_log_id,problem_log.log_entry_description",
        "question": "List all the log ids and their descriptions from the problem logs.",
        "answers": [
            [
                1,
                "t"
            ],
            [
                2,
                "a"
            ],
            [
                3,
                "b"
            ],
            [
                4,
                "a"
            ],
            [
                5,
                "c"
            ],
            [
                6,
                "h"
            ],
            [
                7,
                "s"
            ],
            [
                8,
                "j"
            ],
            [
                9,
                "p"
            ],
            [
                10,
                "d"
            ],
            [
                11,
                "w"
            ],
            [
                12,
                "c"
            ],
            [
                13,
                "q"
            ],
            [
                14,
                "a"
            ],
            [
                15,
                "v"
            ]
        ]
    },
    {
        "db_id": "tracking_software_problems",
        "query": "MATCH (problem_log:`tracking_software_problems.Problem_Log`)\nRETURN problem_log.problem_log_id,problem_log.log_entry_description",
        "question": "What are the log id and entry description of each problem?",
        "answers": [
            [
                1,
                "t"
            ],
            [
                2,
                "a"
            ],
            [
                3,
                "b"
            ],
            [
                4,
                "a"
            ],
            [
                5,
                "c"
            ],
            [
                6,
                "h"
            ],
            [
                7,
                "s"
            ],
            [
                8,
                "j"
            ],
            [
                9,
                "p"
            ],
            [
                10,
                "d"
            ],
            [
                11,
                "w"
            ],
            [
                12,
                "c"
            ],
            [
                13,
                "q"
            ],
            [
                14,
                "a"
            ],
            [
                15,
                "v"
            ]
        ]
    },
    {
        "db_id": "tracking_software_problems",
        "query": "MATCH (problems:`tracking_software_problems.Problems`)\nWHERE problems.date_problem_reported > \"1978-06-26\"\nRETURN problems.problem_id",
        "question": "What are the ids of the problems which are reported after 1978-06-26?",
        "answers": [
            [
                1
            ],
            [
                2
            ],
            [
                3
            ],
            [
                5
            ],
            [
                6
            ],
            [
                7
            ],
            [
                9
            ],
            [
                10
            ]
        ]
    },
    {
        "db_id": "tracking_software_problems",
        "query": "MATCH (problems:`tracking_software_problems.Problems`)\nWHERE problems.date_problem_reported > \"1978-06-26\"\nRETURN problems.problem_id",
        "question": "Find the ids of the problems reported after 1978-06-26.",
        "answers": [
            [
                1
            ],
            [
                2
            ],
            [
                3
            ],
            [
                5
            ],
            [
                6
            ],
            [
                7
            ],
            [
                9
            ],
            [
                10
            ]
        ]
    },
    {
        "db_id": "tracking_software_problems",
        "query": "MATCH (problems:`tracking_software_problems.Problems`)\nWHERE problems.date_problem_reported < \"1978-06-26\"\nRETURN problems.problem_id",
        "question": "What are the ids of the problems which are reported before 1978-06-26?",
        "answers": [
            [
                4
            ],
            [
                8
            ],
            [
                11
            ],
            [
                12
            ],
            [
                13
            ],
            [
                14
            ],
            [
                15
            ]
        ]
    },
    {
        "db_id": "tracking_software_problems",
        "query": "MATCH (problems:`tracking_software_problems.Problems`)\nWHERE problems.date_problem_reported < \"1978-06-26\"\nRETURN problems.problem_id",
        "question": "Which problems are reported before 1978-06-26? Give me the ids of the problems.",
        "answers": [
            [
                4
            ],
            [
                8
            ],
            [
                11
            ],
            [
                12
            ],
            [
                13
            ],
            [
                14
            ],
            [
                15
            ]
        ]
    },
    {
        "db_id": "tracking_software_problems",
        "query": "MATCH (T1:`tracking_software_problems.Problems`)-[]-(T2:`tracking_software_problems.Product`)\nRETURN count(*),T2.product_id",
        "question": "For each product which has problems, what are the number of problems and the product id?",
        "answers": [
            [
                4,
                1
            ],
            [
                2,
                2
            ],
            [
                3,
                4
            ],
            [
                1,
                5
            ],
            [
                1,
                6
            ],
            [
                1,
                7
            ],
            [
                1,
                8
            ],
            [
                1,
                13
            ],
            [
                1,
                15
            ]
        ]
    },
    {
        "db_id": "tracking_software_problems",
        "query": "MATCH (T1:`tracking_software_problems.Problems`)-[]-(T2:`tracking_software_problems.Product`)\nRETURN count(*),T2.product_id",
        "question": "For each product with some problems, list the count of problems and the product id.",
        "answers": [
            [
                4,
                1
            ],
            [
                2,
                2
            ],
            [
                3,
                4
            ],
            [
                1,
                5
            ],
            [
                1,
                6
            ],
            [
                1,
                7
            ],
            [
                1,
                8
            ],
            [
                1,
                13
            ],
            [
                1,
                15
            ]
        ]
    },
    {
        "db_id": "tracking_software_problems",
        "query": "MATCH (T1:`tracking_software_problems.Problems`)-[]-(T2:`tracking_software_problems.Product`)\nWHERE T1.date_problem_reported > \"1986-11-13\"\nRETURN count(*),T2.product_id",
        "question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",
        "answers": [
            [
                1,
                8
            ],
            [
                2,
                1
            ],
            [
                2,
                4
            ],
            [
                1,
                2
            ],
            [
                1,
                15
            ]
        ]
    },
    {
        "db_id": "tracking_software_problems",
        "query": "MATCH (T1:`tracking_software_problems.Problems`)-[]-(T2:`tracking_software_problems.Product`)\nWHERE T1.date_problem_reported > \"1986-11-13\"\nRETURN count(*),T2.product_id",
        "question": "What are the products that have problems reported after 1986-11-13? Give me the product id and the count of problems reported after 1986-11-13.",
        "answers": [
            [
                1,
                8
            ],
            [
                2,
                1
            ],
            [
                2,
                4
            ],
            [
                1,
                2
            ],
            [
                1,
                15
            ]
        ]
    },
    {
        "db_id": "tracking_software_problems",
        "query": "MATCH (product:`tracking_software_problems.Product`)\nRETURN DISTINCT product.product_name\nORDER BY product.product_name",
        "question": "List the names of all the distinct product names in alphabetical order?",
        "answers": [
            [
                "blog"
            ],
            [
                "chat"
            ],
            [
                "doulingo"
            ],
            [
                "game"
            ],
            [
                "hangout"
            ],
            [
                "keep"
            ],
            [
                "learn"
            ],
            [
                "life"
            ],
            [
                "messager"
            ],
            [
                "rose"
            ],
            [
                "snapchat"
            ],
            [
                "teach"
            ],
            [
                "twitter"
            ],
            [
                "wechat"
            ],
            [
                "yellow"
            ]
        ]
    },
    {
        "db_id": "tracking_software_problems",
        "query": "MATCH (product:`tracking_software_problems.Product`)\nRETURN DISTINCT product.product_name\nORDER BY product.product_name",
        "question": "Sort all the distinct product names in alphabetical order.",
        "answers": [
            [
                "blog"
            ],
            [
                "chat"
            ],
            [
                "doulingo"
            ],
            [
                "game"
            ],
            [
                "hangout"
            ],
            [
                "keep"
            ],
            [
                "learn"
            ],
            [
                "life"
            ],
            [
                "messager"
            ],
            [
                "rose"
            ],
            [
                "snapchat"
            ],
            [
                "teach"
            ],
            [
                "twitter"
            ],
            [
                "wechat"
            ],
            [
                "yellow"
            ]
        ]
    },
    {
        "db_id": "tracking_software_problems",
        "query": "MATCH (T1:`tracking_software_problems.Problems`)-[]-(T2:`tracking_software_problems.Product`)\nWITH count(T2.product_name) AS cnt, T2\nRETURN T2.product_name\nORDER BY cnt DESC\nLIMIT 3",
        "question": "Find the top 3 products which have the largest number of problems?",
        "answers": [
            [
                "rose"
            ],
            [
                "wechat"
            ],
            [
                "yellow"
            ]
        ]
    },
    {
        "db_id": "tracking_software_problems",
        "query": "MATCH (T1:`tracking_software_problems.Problems`)-[]-(T2:`tracking_software_problems.Product`)\nWITH count(T2.product_name) AS cnt, T2\nRETURN T2.product_name\nORDER BY cnt DESC\nLIMIT 3",
        "question": "What are the three products that have the most problems?s",
        "answers": [
            [
                "rose"
            ],
            [
                "wechat"
            ],
            [
                "yellow"
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (branch:`shop_membership.branch`)\nRETURN branch.Name,branch.Address_road,branch.City\nORDER BY branch.Open_year",
        "question": "Show name, address road, and city for all branches sorted by open year.",
        "answers": [
            [
                "Alexandre",
                "Valleys Place",
                "London"
            ],
            [
                "Popert",
                "Oaks Crescent",
                "London"
            ],
            [
                "Zytogorski",
                "Abbey Rise",
                "Oxford"
            ],
            [
                "Brooke Greville",
                "Glebe Street",
                "Oxford"
            ],
            [
                "Cochrane",
                "Brampton Road",
                "London"
            ],
            [
                "Stanley",
                "Abbott Street",
                "London"
            ],
            [
                "Taverner",
                "Cecilia Avenue",
                "Oxford"
            ],
            [
                "Saint Amant",
                "Concord Road",
                "London"
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (branch:`shop_membership.branch`)\nRETURN branch.Name,branch.Address_road,branch.City\nORDER BY branch.Open_year",
        "question": "What are the names, address roads, and cities of the branches ordered by opening year?",
        "answers": [
            [
                "Alexandre",
                "Valleys Place",
                "London"
            ],
            [
                "Popert",
                "Oaks Crescent",
                "London"
            ],
            [
                "Zytogorski",
                "Abbey Rise",
                "Oxford"
            ],
            [
                "Brooke Greville",
                "Glebe Street",
                "Oxford"
            ],
            [
                "Cochrane",
                "Brampton Road",
                "London"
            ],
            [
                "Stanley",
                "Abbott Street",
                "London"
            ],
            [
                "Taverner",
                "Cecilia Avenue",
                "Oxford"
            ],
            [
                "Saint Amant",
                "Concord Road",
                "London"
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (branch:`shop_membership.branch`)\nRETURN branch.Name\nORDER BY branch.membership_amount DESC\nLIMIT 3",
        "question": "What are names for top three branches with most number of membership?",
        "answers": [
            [
                "Saint Amant"
            ],
            [
                "Zytogorski"
            ],
            [
                "Stanley"
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (branch:`shop_membership.branch`)\nRETURN branch.Name\nORDER BY branch.membership_amount DESC\nLIMIT 3",
        "question": "What are the names for the 3 branches that have the most memberships?",
        "answers": [
            [
                "Saint Amant"
            ],
            [
                "Zytogorski"
            ],
            [
                "Stanley"
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (branch:`shop_membership.branch`)\nWHERE branch.membership_amount >= '100'\nRETURN DISTINCT branch.City",
        "question": "Show all distinct city where branches with at least 100 memberships are located.",
        "answers": [
            [
                "London"
            ],
            [
                "Oxford"
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (branch:`shop_membership.branch`)\nWHERE branch.membership_amount >= '100'\nRETURN DISTINCT branch.City",
        "question": "What are the different cities that have more than 100 memberships?",
        "answers": [
            [
                "London"
            ],
            [
                "Oxford"
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (branch:`shop_membership.branch`)\nWITH count(*) AS count, branch.Open_year AS Open_year\nWHERE count  >= 2\nRETURN Open_year",
        "question": "List all open years when at least two shops are opened.",
        "answers": [
            [
                "2009"
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (branch:`shop_membership.branch`)\nWITH count(*) AS count, branch.Open_year AS Open_year\nWHERE count  >= 2\nRETURN Open_year",
        "question": "What are the opening years in which at least two shops opened?",
        "answers": [
            [
                "2009"
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (branch:`shop_membership.branch`)\nWHERE branch.Open_year = '2011' OR branch.City = 'London'\nRETURN min(branch.membership_amount),max(branch.membership_amount)",
        "question": "Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London.",
        "answers": [
            [
                "11",
                "91"
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (branch:`shop_membership.branch`)\nWHERE branch.Open_year = '2011' OR branch.City = 'London'\nRETURN min(branch.membership_amount),max(branch.membership_amount)",
        "question": "What are the minimum and maximum membership amounts for all branches that either opened in 2011 or are located in London?",
        "answers": [
            [
                "11",
                "91"
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (branch:`shop_membership.branch`)\nWHERE branch.Open_year < '2010'\nRETURN branch.City,count(*)",
        "question": "Show the city and the number of branches opened before 2010 for each city.",
        "answers": [
            [
                "London",
                2
            ],
            [
                "Oxford",
                2
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (branch:`shop_membership.branch`)\nWHERE branch.Open_year < '2010'\nRETURN branch.City,count(*)",
        "question": "For each city, how many branches opened before 2010?",
        "answers": [
            [
                "London",
                2
            ],
            [
                "Oxford",
                2
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (member:`shop_membership.member`)\nRETURN count(DISTINCT member.Level)",
        "question": "How many different levels do members have?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (member:`shop_membership.member`)\nRETURN count(DISTINCT member.Level)",
        "question": "What are the different membership levels?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (member:`shop_membership.member`)\nRETURN member.Card_Number,member.Name,member.Hometown\nORDER BY member.Level DESC",
        "question": "Show card number, name, and hometown for all members in a descending order of level.",
        "answers": [
            [
                "LE99",
                "Jeremy Jarmon",
                "Collierville, Tennessee"
            ],
            [
                "LT98",
                "Myron Pryor",
                "Louisville, Kentucky"
            ],
            [
                "RT91",
                "Corey Peters",
                "Louisville, Kentucky"
            ],
            [
                "RE95",
                "Ventrell Jenkins",
                "Columbia, South Carolina"
            ],
            [
                "OLB56",
                "Braxton Kelley",
                "LaGrange, Georgia"
            ],
            [
                "SLB51",
                "Johnny Williams",
                "Jacksonville, Florida"
            ],
            [
                "RCB32",
                "Trevard Lindley",
                "Hiram, Georgia"
            ],
            [
                "LCB7",
                "David Jones",
                "Red Jacket, West Virginia"
            ],
            [
                "MLB4",
                "Micah Johnson",
                "Fort Campbell, Kentucky"
            ],
            [
                "FS10",
                "Matt Lentz",
                "Simpsonville, South Carolina"
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (member:`shop_membership.member`)\nRETURN member.Card_Number,member.Name,member.Hometown\nORDER BY member.Level DESC",
        "question": "What are the card numbers, names, and hometowns of every member ordered by descending level?",
        "answers": [
            [
                "LE99",
                "Jeremy Jarmon",
                "Collierville, Tennessee"
            ],
            [
                "LT98",
                "Myron Pryor",
                "Louisville, Kentucky"
            ],
            [
                "RT91",
                "Corey Peters",
                "Louisville, Kentucky"
            ],
            [
                "RE95",
                "Ventrell Jenkins",
                "Columbia, South Carolina"
            ],
            [
                "OLB56",
                "Braxton Kelley",
                "LaGrange, Georgia"
            ],
            [
                "SLB51",
                "Johnny Williams",
                "Jacksonville, Florida"
            ],
            [
                "RCB32",
                "Trevard Lindley",
                "Hiram, Georgia"
            ],
            [
                "LCB7",
                "David Jones",
                "Red Jacket, West Virginia"
            ],
            [
                "MLB4",
                "Micah Johnson",
                "Fort Campbell, Kentucky"
            ],
            [
                "FS10",
                "Matt Lentz",
                "Simpsonville, South Carolina"
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (member:`shop_membership.member`)\nRETURN member.Level\nORDER BY member.Level DESC\nLIMIT 1",
        "question": "Show the membership level with most number of members.",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (member:`shop_membership.member`)\nRETURN member.Level\nORDER BY member.Level DESC\nLIMIT 1",
        "question": "What is the membership level with the most people?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (T1:`shop_membership.membership_register_branch`)-[]-(T2:`shop_membership.branch`)\nWHERE T1.Register_Year > '2015'\nRETURN T2.Name,count(*)",
        "question": "Show all branch names with the number of members in each branch registered after 2015.",
        "answers": [
            [
                "Alexandre",
                3
            ],
            [
                "Zytogorski",
                1
            ],
            [
                "Cochrane",
                1
            ],
            [
                "Taverner",
                1
            ],
            [
                "Popert",
                1
            ],
            [
                "Brooke Greville",
                1
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (T1:`shop_membership.membership_register_branch`)-[]-(T2:`shop_membership.branch`)\nWHERE T1.Register_Year > '2015'\nRETURN T2.Name,count(*)",
        "question": "For each branch id, what are the names of the branches that were registered after 2015?",
        "answers": [
            [
                "Alexandre",
                3
            ],
            [
                "Zytogorski",
                1
            ],
            [
                "Cochrane",
                1
            ],
            [
                "Taverner",
                1
            ],
            [
                "Popert",
                1
            ],
            [
                "Brooke Greville",
                1
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (member:`shop_membership.member`)\nWHERE NOT (member)-[]-(:`shop_membership.membership_register_branch`)    \nRETURN member.Name",
        "question": "Show member names without any registered branch.",
        "answers": [
            [
                "David Jones"
            ],
            [
                "Matt Lentz"
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (member:`shop_membership.member`)\nWHERE NOT (member)-[]-(:`shop_membership.membership_register_branch`)    \nRETURN member.Name",
        "question": "What are the names of the members that have never registered at any branch?",
        "answers": [
            [
                "David Jones"
            ],
            [
                "Matt Lentz"
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (branch:`shop_membership.branch`)\nWHERE NOT (branch)-[]-(:`shop_membership.membership_register_branch`)    \nRETURN branch.Name,branch.City",
        "question": "List the branch name and city without any registered members.",
        "answers": [
            [
                "Stanley",
                "London"
            ],
            [
                "Saint Amant",
                "London"
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (branch:`shop_membership.branch`)\nWHERE NOT (branch)-[]-(:`shop_membership.membership_register_branch`)    \nRETURN branch.Name,branch.City",
        "question": "What are the names and cities of the branches that do not have any registered members?",
        "answers": [
            [
                "Stanley",
                "London"
            ],
            [
                "Saint Amant",
                "London"
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (T1:`shop_membership.membership_register_branch`)-[]-(T2:`shop_membership.branch`)\nWHERE T1.Register_Year = '2016'\nWITH T2, count(T1.Branch_ID) AS cnt\nRETURN T2.Name,T2.Open_year\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the name and open year for the branch with most number of memberships registered in 2016?",
        "answers": [
            [
                "Alexandre",
                "2001"
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (T1:`shop_membership.membership_register_branch`)-[]-(T2:`shop_membership.branch`)\nWHERE T1.Register_Year = '2016'\nWITH T2, count(T1.Branch_ID) AS cnt\nRETURN T2.Name,T2.Open_year\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the name and opening year for the branch that registered the most members in 2016?",
        "answers": [
            [
                "Alexandre",
                "2001"
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (T1:`shop_membership.membership_register_branch`)-[]-(T2:`shop_membership.member`)\nWHERE T1.Register_Year = '2016'\nRETURN T2.Name,T2.Hometown",
        "question": "Show the member name and hometown who registered a branch in 2016.",
        "answers": [
            [
                "Jeremy Jarmon",
                "Collierville, Tennessee"
            ],
            [
                "Myron Pryor",
                "Louisville, Kentucky"
            ],
            [
                "Ventrell Jenkins",
                "Columbia, South Carolina"
            ],
            [
                "Braxton Kelley",
                "LaGrange, Georgia"
            ],
            [
                "Johnny Williams",
                "Jacksonville, Florida"
            ],
            [
                "Trevard Lindley",
                "Hiram, Georgia"
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (T1:`shop_membership.membership_register_branch`)-[]-(T2:`shop_membership.member`)\nWHERE T1.Register_Year = '2016'\nRETURN T2.Name,T2.Hometown",
        "question": "What are the member names and hometowns of those who registered at a branch in 2016?",
        "answers": [
            [
                "Jeremy Jarmon",
                "Collierville, Tennessee"
            ],
            [
                "Myron Pryor",
                "Louisville, Kentucky"
            ],
            [
                "Ventrell Jenkins",
                "Columbia, South Carolina"
            ],
            [
                "Braxton Kelley",
                "LaGrange, Georgia"
            ],
            [
                "Johnny Williams",
                "Jacksonville, Florida"
            ],
            [
                "Trevard Lindley",
                "Hiram, Georgia"
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (branch:`shop_membership.branch`)\nWHERE branch.Open_year = '2001' AND branch.membership_amount > '100'\nRETURN branch.City",
        "question": "Show all city with a branch opened in 2001 and a branch with more than 100 membership.",
        "answers": [
            [
                "London"
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (branch:`shop_membership.branch`)\nWHERE branch.Open_year = '2001' AND branch.membership_amount > '100'\nRETURN branch.City",
        "question": "What are the cities that have a branch that opened in 2001 and a branch with more than 100 members?",
        "answers": [
            [
                "London"
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (T2:`shop_membership.member`)-[T1:`shop_membership.purchase`]-()\nWHERE T2.Level = 6\nRETURN count(*)",
        "question": "What is the total number of purchases for members with level 6?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "shop_membership",
        "query": "MATCH (T2:`shop_membership.member`)-[T1:`shop_membership.purchase`]-()\nWHERE T2.Level = 6\nRETURN count(*)",
        "question": "What are the total purchases for members rated at level 6?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (student:`voter_2.Student`)\nRETURN count(*)",
        "question": "Find the number of students in total.",
        "answers": [
            [
                34
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (student:`voter_2.Student`)\nRETURN count(*)",
        "question": "How many students are there in total?",
        "answers": [
            [
                34
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nRETURN count(*)",
        "question": "Find the number of voting records in total.",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nRETURN count(*)",
        "question": "How many voting records do we have?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nRETURN count(DISTINCT voting_record.President_Vote)",
        "question": "Find the distinct number of president votes.",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nRETURN count(DISTINCT voting_record.President_Vote)",
        "question": "How many distinct president votes are recorded?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (student:`voter_2.Student`)\nRETURN max(student.Age)",
        "question": "Find the maximum age of all the students.",
        "answers": [
            [
                27
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (student:`voter_2.Student`)\nRETURN max(student.Age)",
        "question": "What is the oldest age among the students?",
        "answers": [
            [
                27
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (student:`voter_2.Student`)\nWHERE student.Major = 50\nRETURN student.LName",
        "question": "Find the last names of students with major 50.",
        "answers": [
            [
                "Epp"
            ],
            [
                "Schmidt"
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (student:`voter_2.Student`)\nWHERE student.Major = 50\nRETURN student.LName",
        "question": "What are the last names of students studying major 50?",
        "answers": [
            [
                "Epp"
            ],
            [
                "Schmidt"
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (student:`voter_2.Student`)\nWHERE student.Age > 22\nRETURN student.Fname",
        "question": "Find the first names of students with age above 22.",
        "answers": [
            [
                "Paul"
            ],
            [
                "Bruce"
            ],
            [
                "Sarah"
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (student:`voter_2.Student`)\nWHERE student.Age > 22\nRETURN student.Fname",
        "question": "What are the first names of all the students aged above 22?",
        "answers": [
            [
                "Paul"
            ],
            [
                "Bruce"
            ],
            [
                "Sarah"
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (student:`voter_2.Student`)\nWHERE student.Major = 600\nRETURN max(student.Age),min(student.Age)",
        "question": "What are the maximum and minimum age of students with major 600?",
        "answers": [
            [
                27,
                16
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (student:`voter_2.Student`)\nWHERE student.Major = 600\nRETURN max(student.Age),min(student.Age)",
        "question": "Tell me the ages of the oldest and youngest students studying major 600.",
        "answers": [
            [
                27,
                16
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nWHERE voting_record.Registration_Date = \"08/30/2015\"\nRETURN DISTINCT voting_record.President_Vote",
        "question": "What are the distinct president votes on 08/30/2015?",
        "answers": [
            [
                1004
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nWHERE voting_record.Registration_Date = \"08/30/2015\"\nRETURN DISTINCT voting_record.President_Vote",
        "question": "Show all the distinct president votes made on 08/30/2015.",
        "answers": [
            [
                1004
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nRETURN DISTINCT voting_record.Registration_Date,voting_record.Election_Cycle",
        "question": "Report the distinct registration date and the election cycle.",
        "answers": [
            [
                "08/30/2015",
                "Spring"
            ],
            [
                "08/30/2014",
                "Spring"
            ],
            [
                "08/30/2013",
                "Spring"
            ],
            [
                "08/30/2012",
                "Spring"
            ],
            [
                "08/30/2015",
                "Fall"
            ],
            [
                "08/30/2014",
                "Fall"
            ],
            [
                "08/30/2013",
                "Fall"
            ],
            [
                "08/30/2012",
                "Fall"
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nRETURN DISTINCT voting_record.Registration_Date,voting_record.Election_Cycle",
        "question": "What are the distinct registration dates and the election cycles?",
        "answers": [
            [
                "08/30/2015",
                "Spring"
            ],
            [
                "08/30/2014",
                "Spring"
            ],
            [
                "08/30/2013",
                "Spring"
            ],
            [
                "08/30/2012",
                "Spring"
            ],
            [
                "08/30/2015",
                "Fall"
            ],
            [
                "08/30/2014",
                "Fall"
            ],
            [
                "08/30/2013",
                "Fall"
            ],
            [
                "08/30/2012",
                "Fall"
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nRETURN DISTINCT voting_record.President_Vote,voting_record.Vice_President_Vote",
        "question": "Report the distinct president vote and the vice president vote.",
        "answers": [
            [
                1004,
                1007
            ],
            [
                1014,
                1007
            ],
            [
                1004,
                1017
            ],
            [
                1024,
                1017
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nRETURN DISTINCT voting_record.President_Vote,voting_record.Vice_President_Vote",
        "question": "List all the distinct president votes and the vice president votes.",
        "answers": [
            [
                1004,
                1007
            ],
            [
                1014,
                1007
            ],
            [
                1004,
                1017
            ],
            [
                1024,
                1017
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (student:`voter_2.Student`)\nRETURN student.Advisor,count(*)",
        "question": "For each advisor, report the total number of students advised by him or her.",
        "answers": [
            [
                1121,
                3
            ],
            [
                7712,
                1
            ],
            [
                7792,
                1
            ],
            [
                8423,
                1
            ],
            [
                1148,
                3
            ],
            [
                8918,
                1
            ],
            [
                9172,
                1
            ],
            [
                2192,
                4
            ],
            [
                7723,
                1
            ],
            [
                8741,
                1
            ],
            [
                8721,
                1
            ],
            [
                7271,
                2
            ],
            [
                8722,
                3
            ],
            [
                7134,
                2
            ],
            [
                8723,
                1
            ],
            [
                2311,
                3
            ],
            [
                8772,
                3
            ],
            [
                5718,
                2
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (student:`voter_2.Student`)\nRETURN student.Advisor,count(*)",
        "question": "How many students does each advisor have?",
        "answers": [
            [
                1121,
                3
            ],
            [
                7712,
                1
            ],
            [
                7792,
                1
            ],
            [
                8423,
                1
            ],
            [
                1148,
                3
            ],
            [
                8918,
                1
            ],
            [
                9172,
                1
            ],
            [
                2192,
                4
            ],
            [
                7723,
                1
            ],
            [
                8741,
                1
            ],
            [
                8721,
                1
            ],
            [
                7271,
                2
            ],
            [
                8722,
                3
            ],
            [
                7134,
                2
            ],
            [
                8723,
                1
            ],
            [
                2311,
                3
            ],
            [
                8772,
                3
            ],
            [
                5718,
                2
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (student:`voter_2.Student`)\nWITH student.Advisor AS Advisor, count(*) AS count\nWHERE count  > 2\nRETURN Advisor",
        "question": "Report all advisors that advise more than 2 students.",
        "answers": [
            [
                1121
            ],
            [
                1148
            ],
            [
                2192
            ],
            [
                8722
            ],
            [
                2311
            ],
            [
                8772
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (student:`voter_2.Student`)\nWITH student.Advisor AS Advisor, count(*) AS count\nWHERE count  > 2\nRETURN Advisor",
        "question": "Which advisors have more than two students?",
        "answers": [
            [
                1121
            ],
            [
                1148
            ],
            [
                2192
            ],
            [
                8722
            ],
            [
                2311
            ],
            [
                8772
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (student:`voter_2.Student`)\nWITH count(*) AS count, student.Major AS Major\nWHERE count  < 3\nRETURN Major",
        "question": "Report all majors that have less than 3 students.",
        "answers": [
            [
                540
            ],
            [
                100
            ],
            [
                50
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (student:`voter_2.Student`)\nWITH count(*) AS count, student.Major AS Major\nWHERE count  < 3\nRETURN Major",
        "question": "What are the majors only less than three students are studying?",
        "answers": [
            [
                540
            ],
            [
                100
            ],
            [
                50
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nRETURN voting_record.Election_Cycle,count(*)",
        "question": "For each election cycle, report the number of voting records.",
        "answers": [
            [
                "Spring",
                5
            ],
            [
                "Fall",
                5
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nRETURN voting_record.Election_Cycle,count(*)",
        "question": "Count the number of voting records for each election cycle.",
        "answers": [
            [
                "Spring",
                5
            ],
            [
                "Fall",
                5
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (student:`voter_2.Student`)\nRETURN student.Major\nORDER BY student.Major DESC\nLIMIT 1",
        "question": "Which major has the most students?",
        "answers": [
            [
                600
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (student:`voter_2.Student`)\nRETURN student.Major\nORDER BY student.Major DESC\nLIMIT 1",
        "question": "Find the major that is studied by the largest number of students.",
        "answers": [
            [
                600
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (student:`voter_2.Student`)\nWITH student.Advisor AS Advisor, count(*) AS count\nWHERE count  > 2\nRETURN Advisor",
        "question": "Report the distinct advisors who have more than 2 students.",
        "answers": [
            [
                1121
            ],
            [
                1148
            ],
            [
                2192
            ],
            [
                8722
            ],
            [
                2311
            ],
            [
                8772
            ]
        ]
    },
    {
        "db_id": "voter_2",
        "query": "MATCH (student:`voter_2.Student`)\nWITH student.Advisor AS Advisor, count(*) AS count\nWHERE count  > 2\nRETURN Advisor",
        "question": "Which advisors are advising more than 2 students?",
        "answers": [
            [
                1121
            ],
            [
                1148
            ],
            [
                2192
            ],
            [
                8722
            ],
            [
                2311
            ],
            [
                8772
            ]
        ]
    },
    {
        "db_id": "products_gen_characteristics",
        "query": "MATCH (products:`products_gen_characteristics.Products`)\nRETURN count(*)",
        "question": "How many products are there?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "products_gen_characteristics",
        "query": "MATCH (products:`products_gen_characteristics.Products`)\nRETURN count(*)",
        "question": "Count the number of products.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "products_gen_characteristics",
        "query": "MATCH (ref_colors:`products_gen_characteristics.Ref_Colors`)\nRETURN count(*)",
        "question": "How many colors are there?",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "products_gen_characteristics",
        "query": "MATCH (ref_colors:`products_gen_characteristics.Ref_Colors`)\nRETURN count(*)",
        "question": "Count the number of colors.",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "products_gen_characteristics",
        "query": "MATCH (characteristics:`products_gen_characteristics.Characteristics`)\nRETURN count(*)",
        "question": "How many characteristics are there?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "products_gen_characteristics",
        "query": "MATCH (characteristics:`products_gen_characteristics.Characteristics`)\nRETURN count(*)",
        "question": "Count the number of characteristics.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "products_gen_characteristics",
        "query": "MATCH (products:`products_gen_characteristics.Products`)\nRETURN products.product_name,products.typical_buying_price",
        "question": "What are the names and buying prices of all the products?",
        "answers": [
            [
                "cumin",
                ""
            ],
            [
                "peper",
                "352447.2874677"
            ],
            [
                "basil",
                "503.8431967"
            ],
            [
                "borage",
                ""
            ],
            [
                "chili",
                ""
            ],
            [
                "ginger",
                "5.578"
            ],
            [
                "sesame",
                "1284268.0659"
            ],
            [
                "caraway",
                "24493"
            ],
            [
                "catnip",
                "12008702.623"
            ],
            [
                "flax",
                "339404395.7"
            ],
            [
                "chervil",
                ""
            ],
            [
                "voluptatem",
                "162"
            ],
            [
                "cinnam",
                "1686539.4"
            ],
            [
                "lotus",
                "43221310.465574"
            ],
            [
                "laurel",
                ""
            ]
        ]
    },
    {
        "db_id": "products_gen_characteristics",
        "query": "MATCH (products:`products_gen_characteristics.Products`)\nRETURN products.product_name,products.typical_buying_price",
        "question": "Return the names and typical buying prices for all products.",
        "answers": [
            [
                "cumin",
                ""
            ],
            [
                "peper",
                "352447.2874677"
            ],
            [
                "basil",
                "503.8431967"
            ],
            [
                "borage",
                ""
            ],
            [
                "chili",
                ""
            ],
            [
                "ginger",
                "5.578"
            ],
            [
                "sesame",
                "1284268.0659"
            ],
            [
                "caraway",
                "24493"
            ],
            [
                "catnip",
                "12008702.623"
            ],
            [
                "flax",
                "339404395.7"
            ],
            [
                "chervil",
                ""
            ],
            [
                "voluptatem",
                "162"
            ],
            [
                "cinnam",
                "1686539.4"
            ],
            [
                "lotus",
                "43221310.465574"
            ],
            [
                "laurel",
                ""
            ]
        ]
    },
    {
        "db_id": "products_gen_characteristics",
        "query": "MATCH (ref_colors:`products_gen_characteristics.Ref_Colors`)\nRETURN ref_colors.color_description",
        "question": "List the description of all the colors.",
        "answers": [
            [
                "red"
            ],
            [
                "green"
            ],
            [
                "yellow"
            ],
            [
                "blue"
            ],
            [
                "black"
            ],
            [
                "white"
            ],
            [
                "purple"
            ],
            [
                "gray"
            ]
        ]
    },
    {
        "db_id": "products_gen_characteristics",
        "query": "MATCH (ref_colors:`products_gen_characteristics.Ref_Colors`)\nRETURN ref_colors.color_description",
        "question": "What are the descriptions for each color?",
        "answers": [
            [
                "red"
            ],
            [
                "green"
            ],
            [
                "yellow"
            ],
            [
                "blue"
            ],
            [
                "black"
            ],
            [
                "white"
            ],
            [
                "purple"
            ],
            [
                "gray"
            ]
        ]
    },
    {
        "db_id": "products_gen_characteristics",
        "query": "MATCH (characteristics:`products_gen_characteristics.Characteristics`)\nRETURN DISTINCT characteristics.characteristic_name",
        "question": "Find the names of all the product characteristics.",
        "answers": [
            [
                "slow"
            ],
            [
                "fast"
            ],
            [
                "warm"
            ],
            [
                "hot"
            ],
            [
                "cool"
            ],
            [
                "error"
            ]
        ]
    },
    {
        "db_id": "products_gen_characteristics",
        "query": "MATCH (characteristics:`products_gen_characteristics.Characteristics`)\nRETURN DISTINCT characteristics.characteristic_name",
        "question": "What are the different names of the product characteristics?",
        "answers": [
            [
                "slow"
            ],
            [
                "fast"
            ],
            [
                "warm"
            ],
            [
                "hot"
            ],
            [
                "cool"
            ],
            [
                "error"
            ]
        ]
    },
    {
        "db_id": "products_gen_characteristics",
        "query": "MATCH (T1:`products_gen_characteristics.Products`)-[]-(T2:`products_gen_characteristics.Ref_Colors`)\nWHERE T2.color_description = 'yellow'\nRETURN T1.product_name",
        "question": "What is the name of the product with the color description 'yellow'?",
        "answers": [
            [
                "borage"
            ]
        ]
    },
    {
        "db_id": "products_gen_characteristics",
        "query": "MATCH (T1:`products_gen_characteristics.Products`)-[]-(T2:`products_gen_characteristics.Ref_Colors`)\nWHERE T2.color_description = 'yellow'\nRETURN T1.product_name",
        "question": "Give the name of the products that have a color description 'yellow'.",
        "answers": [
            [
                "borage"
            ]
        ]
    },
    {
        "db_id": "products_gen_characteristics",
        "query": "MATCH (T1:`products_gen_characteristics.Ref_Product_Categories`)-[]-(T2:`products_gen_characteristics.Products`)\nWHERE T2.product_description =~'.*[T|t].*'\nRETURN T1.product_category_description",
        "question": "Find the category descriptions of the products whose descriptions include letter 't'.",
        "answers": [
            [
                "Herbs"
            ],
            [
                "Herbs"
            ],
            [
                "Seeds"
            ],
            [
                "Seeds"
            ],
            [
                "Seeds"
            ],
            [
                "Spices"
            ]
        ]
    },
    {
        "db_id": "products_gen_characteristics",
        "query": "MATCH (T1:`products_gen_characteristics.Ref_Product_Categories`)-[]-(T2:`products_gen_characteristics.Products`)\nWHERE T2.product_description =~'.*[T|t].*'\nRETURN T1.product_category_description",
        "question": "What are the descriptions of the categories that products with product descriptions that contain the letter t are in?",
        "answers": [
            [
                "Herbs"
            ],
            [
                "Herbs"
            ],
            [
                "Seeds"
            ],
            [
                "Seeds"
            ],
            [
                "Seeds"
            ],
            [
                "Spices"
            ]
        ]
    },
    {
        "db_id": "products_gen_characteristics",
        "query": "MATCH (t1:`products_gen_characteristics.Products`)-[]-(t2:`products_gen_characteristics.Ref_Colors`)\nWITH t2, count(t2.color_description) AS cnt\nRETURN t2.color_description\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the description of the color for most products?",
        "answers": [
            [
                "blue"
            ]
        ]
    },
    {
        "db_id": "products_gen_characteristics",
        "query": "MATCH (t1:`products_gen_characteristics.Products`)-[]-(t2:`products_gen_characteristics.Ref_Colors`)\nWITH t2, count(t2.color_description) AS cnt\nRETURN t2.color_description\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Return the color description that is most common across all products.",
        "answers": [
            [
                "blue"
            ]
        ]
    },
    {
        "db_id": "products_gen_characteristics",
        "query": "MATCH (t1:`products_gen_characteristics.Products`)-[t2:`products_gen_characteristics.Product_Characteristics`]-(t3:`products_gen_characteristics.Characteristics`)\nWITH t3, count(t3.characteristic_name) AS cnt\nRETURN t3.characteristic_name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the characteristic name used by most number of the products?",
        "answers": [
            [
                "fast"
            ]
        ]
    },
    {
        "db_id": "products_gen_characteristics",
        "query": "MATCH (t1:`products_gen_characteristics.Products`)-[t2:`products_gen_characteristics.Product_Characteristics`]-(t3:`products_gen_characteristics.Characteristics`)\nWITH t3, count(t3.characteristic_name) AS cnt\nRETURN t3.characteristic_name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Return the name of the characteristic that is most common across all products.",
        "answers": [
            [
                "fast"
            ]
        ]
    },
    {
        "db_id": "products_gen_characteristics",
        "query": "MATCH (t1:`products_gen_characteristics.Products`)-[t2:`products_gen_characteristics.Product_Characteristics`]-(t3:`products_gen_characteristics.Characteristics`)\nWITH count(*) AS count, t3.characteristic_name AS characteristic_name\nWHERE count  >= 2\nRETURN characteristic_name",
        "question": "What are characteristic names used at least twice across all products?",
        "answers": [
            [
                "slow"
            ],
            [
                "fast"
            ],
            [
                "warm"
            ]
        ]
    },
    {
        "db_id": "products_gen_characteristics",
        "query": "MATCH (t1:`products_gen_characteristics.Products`)-[t2:`products_gen_characteristics.Product_Characteristics`]-(t3:`products_gen_characteristics.Characteristics`)\nWITH count(*) AS count, t3.characteristic_name AS characteristic_name\nWHERE count  >= 2\nRETURN characteristic_name",
        "question": "Give the names of characteristics that are in two or more products?",
        "answers": [
            [
                "slow"
            ],
            [
                "fast"
            ],
            [
                "warm"
            ]
        ]
    },
    {
        "db_id": "swimming",
        "query": "MATCH (event:`swimming.event`)\nRETURN count(*)",
        "question": "How many events are there?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "swimming",
        "query": "MATCH (event:`swimming.event`)\nRETURN event.Name\nORDER BY event.Year DESC",
        "question": "List all the event names by year from the most recent to the oldest.",
        "answers": [
            [
                "European FINA"
            ],
            [
                "FINA"
            ],
            [
                "IPC"
            ],
            [
                "World Junior"
            ],
            [
                "World Master"
            ],
            [
                "Pacific"
            ]
        ]
    },
    {
        "db_id": "swimming",
        "query": "MATCH (event:`swimming.event`)\nRETURN event.Name\nORDER BY event.Year DESC\nLIMIT 1",
        "question": "What is the name of the event that happened in the most recent year?",
        "answers": [
            [
                "European FINA"
            ]
        ]
    },
    {
        "db_id": "swimming",
        "query": "MATCH (stadium:`swimming.stadium`)\nRETURN count(*)",
        "question": "How many stadiums are there?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "swimming",
        "query": "MATCH (stadium:`swimming.stadium`)\nRETURN stadium.name\nORDER BY stadium.Capacity DESC\nLIMIT 1",
        "question": "Find the name of the stadium that has the maximum capacity.",
        "answers": [
            [
                "Nou Mestalla"
            ]
        ]
    },
    {
        "db_id": "swimming",
        "query": "MATCH (stadium:`swimming.stadium`)\nWITH avg(stadium.Capacity) AS capacity\nMATCH (stadium:`swimming.stadium`)\nWHERE  stadium.Capacity <  capacity \nRETURN stadium.name",
        "question": "Find the names of stadiums whose capacity is smaller than the average capacity.",
        "answers": [
            [
                "Northumberland Development Project"
            ],
            [
                "Fisht Olympic Stadium"
            ],
            [
                "Arena Baltika"
            ],
            [
                "Yubileyniy Stadium"
            ]
        ]
    },
    {
        "db_id": "swimming",
        "query": "MATCH (stadium:`swimming.stadium`)\nWITH count(*) AS count, stadium.Country AS Country\nWHERE count  <= 3\nRETURN Country",
        "question": "Which country has at most 3 stadiums listed?",
        "answers": [
            [
                "Spain"
            ],
            [
                "Azerbaijan"
            ],
            [
                "Hungary"
            ],
            [
                "France"
            ],
            [
                "England"
            ]
        ]
    },
    {
        "db_id": "swimming",
        "query": "MATCH (stadium:`swimming.stadium`)\nWHERE stadium.Opening_year < 2006\nRETURN count(DISTINCT stadium.City)",
        "question": "How many cities have a stadium that was opened before the year of 2006?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "swimming",
        "query": "MATCH (stadium:`swimming.stadium`)\nRETURN stadium.Country,count(*)",
        "question": "How many stadiums does each country have?",
        "answers": [
            [
                "Spain",
                2
            ],
            [
                "Russia",
                4
            ],
            [
                "Azerbaijan",
                1
            ],
            [
                "Hungary",
                1
            ],
            [
                "France",
                1
            ],
            [
                "England",
                1
            ]
        ]
    },
    {
        "db_id": "swimming",
        "query": "MATCH (stadium:`swimming.stadium`)\nWHERE stadium.Country <> 'Russia'\nRETURN count(*)",
        "question": "How many stadiums are not in country \"Russia\"?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "swimming",
        "query": "MATCH (swimmer:`swimming.swimmer`)\nRETURN swimmer.name\nORDER BY swimmer.meter_100",
        "question": "Find the names of all swimmers, sorted by their 100 meter scores in ascending order.",
        "answers": [
            [
                "S\u00e9bastien Rouault"
            ],
            [
                "Przemys\u0142aw Sta\u0144czyk"
            ],
            [
                "Oussama Mellouli"
            ],
            [
                "Sergiy Fesenko"
            ],
            [
                "Grant Hackett"
            ],
            [
                "Craig Stevens"
            ],
            [
                "Federico Colbertaldo"
            ],
            [
                "Ryan Cochrane"
            ]
        ]
    },
    {
        "db_id": "swimming",
        "query": "MATCH (swimmer:`swimming.swimmer`)\nRETURN count(DISTINCT swimmer.Nationality)",
        "question": "How many different countries are all the swimmers from?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "swimming",
        "query": "MATCH (swimmer:`swimming.swimmer`)\nWITH swimmer.Nationality AS Nationality, count(*) AS count\nWHERE count  > 1\nRETURN Nationality,count",
        "question": "List countries that have more than one swimmer.",
        "answers": [
            [
                "Australia",
                2
            ]
        ]
    },
    {
        "db_id": "swimming",
        "query": "MATCH (swimmer:`swimming.swimmer`)\nWHERE swimmer.Nationality = 'Australia'\nRETURN swimmer.meter_200,swimmer.meter_300",
        "question": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".",
        "answers": [
            [
                "1:56.34",
                "2:55.90"
            ],
            [
                "1:57.21",
                "2:56.95"
            ]
        ]
    },
    {
        "db_id": "swimming",
        "query": "MATCH (t1:`swimming.swimmer`)-[t2:`swimming.record`]-()\nWHERE t2.Result = 'Win'\nRETURN t1.name",
        "question": "Find the names of swimmers who has a result of \"win\".",
        "answers": [
            [
                "Craig Stevens"
            ],
            [
                "Craig Stevens"
            ],
            [
                "Craig Stevens"
            ],
            [
                "Federico Colbertaldo"
            ],
            [
                "Sergiy Fesenko"
            ],
            [
                "Grant Hackett"
            ],
            [
                "Ryan Cochrane"
            ],
            [
                "Oussama Mellouli"
            ],
            [
                "Oussama Mellouli"
            ]
        ]
    },
    {
        "db_id": "swimming",
        "query": "MATCH (t1:`swimming.stadium`)-[]-(t2:`swimming.event`)\nWHERE t2.Name = 'World Junior'\nRETURN t1.name,t1.Capacity",
        "question": "Find the name and capacity of the stadium where the event named \"World Junior\" happened.",
        "answers": [
            [
                "Baku Olympic Stadium",
                68000
            ]
        ]
    },
    {
        "db_id": "swimming",
        "query": "MATCH (stadium:`swimming.stadium`)\nWHERE NOT (stadium)-[]-(:`swimming.event`)    \nRETURN stadium.name",
        "question": "Find the names of stadiums which have never had any event.",
        "answers": [
            [
                "Ferenc Pusk\u00e1s Stadion"
            ],
            [
                "Stade des Lumi\u00e8res"
            ],
            [
                "Northumberland Development Project"
            ],
            [
                "Arena Baltika"
            ]
        ]
    },
    {
        "db_id": "swimming",
        "query": "MATCH (t1:`swimming.swimmer`)-[t2:`swimming.record`]-()\nWITH t1, count(t2.None) AS cnt\nRETURN t1.name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Find the name of the swimmer who has the most records.",
        "answers": [
            [
                "Craig Stevens"
            ]
        ]
    },
    {
        "db_id": "swimming",
        "query": "MATCH (t1:`swimming.swimmer`)-[t2:`swimming.record`]-()\nWITH count(*) AS count, t1.name AS name\nWHERE count  >= 2\nRETURN name",
        "question": "Find the name of the swimmer who has at least 2 records.",
        "answers": [
            [
                "Craig Stevens"
            ],
            [
                "Sergiy Fesenko"
            ],
            [
                "Oussama Mellouli"
            ]
        ]
    },
    {
        "db_id": "swimming",
        "query": "MATCH (t1:`swimming.swimmer`)-[t2:`swimming.record`]-()\nWHERE t2.Result = 'Win'\nWITH count(*) AS count, t1.name AS name, t1.Nationality AS Nationality\nWHERE count  > 1\nRETURN name,Nationality",
        "question": "Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time.",
        "answers": [
            [
                "Craig Stevens",
                "Australia"
            ],
            [
                "Oussama Mellouli",
                "Tunisia"
            ]
        ]
    },
    {
        "db_id": "swimming",
        "query": "MATCH (stadium:`swimming.stadium`)\nWHERE stadium.Opening_year = 2005\nRETURN avg(stadium.Capacity)",
        "question": "What is the average capacity of the stadiums that were opened in year 2005?",
        "answers": [
            [
                62504.0
            ]
        ]
    },
    {
        "db_id": "railway",
        "query": "MATCH (railway:`railway.railway`)\nRETURN count(*)",
        "question": "How many railways are there?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "railway",
        "query": "MATCH (railway:`railway.railway`)\nRETURN railway.Builder\nORDER BY railway.Builder ASC",
        "question": "List the builders of railways in ascending alphabetical order.",
        "answers": [
            [
                "Avonside"
            ],
            [
                "GER Hartford"
            ],
            [
                "GER Stratford"
            ],
            [
                "GNR Doncaster"
            ],
            [
                "GWR Swindon"
            ],
            [
                "GWR Swindon"
            ],
            [
                "MR Derby"
            ],
            [
                "SECR Ashford"
            ],
            [
                "Stephenson"
            ],
            [
                "Swindon Works"
            ]
        ]
    },
    {
        "db_id": "railway",
        "query": "MATCH (railway:`railway.railway`)\nRETURN railway.Wheels,railway.Location",
        "question": "List the wheels and locations of the railways.",
        "answers": [
            [
                "4-4-0",
                "York"
            ],
            [
                "4-4-0",
                "Bo'ness"
            ],
            [
                "4-4-2",
                "Barrow Hill"
            ],
            [
                "4-4-0",
                "Toddington"
            ],
            [
                "0-6-0T",
                "Bressingham"
            ],
            [
                "0-6-0",
                "Barrow Hill"
            ],
            [
                "2-8-0",
                "Shildon"
            ],
            [
                "4-6-0",
                "Swindon"
            ],
            [
                "4-4-2T",
                "Bressingham"
            ],
            [
                "0-6-0ST",
                "Basingstoke"
            ]
        ]
    },
    {
        "db_id": "railway",
        "query": "MATCH (manager:`railway.manager`)\nWHERE manager.Country <> 'Australia\t'\nRETURN max(manager.Level)",
        "question": "What is the maximum level of managers in countries that are not \"Australia\"?",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "railway",
        "query": "MATCH (manager:`railway.manager`)\nRETURN avg(manager.Age)",
        "question": "What is the average age for all managers?",
        "answers": [
            [
                49.142857142857146
            ]
        ]
    },
    {
        "db_id": "railway",
        "query": "MATCH (manager:`railway.manager`)\nRETURN manager.Name\nORDER BY manager.Level ASC",
        "question": "What are the names of managers in ascending order of level?",
        "answers": [
            [
                "Ben Curtis"
            ],
            [
                "Todd Hamilton"
            ],
            [
                "Tiger Woods"
            ],
            [
                "David Duval"
            ],
            [
                "Sandy Lyle"
            ],
            [
                "Nick Faldo"
            ],
            [
                "Greg Norman"
            ]
        ]
    },
    {
        "db_id": "railway",
        "query": "MATCH (train:`railway.train`)\nRETURN train.Name,train.Arrival",
        "question": "What are the names and arrival times of trains?",
        "answers": [
            [
                "Wardha-Ballarshah Pass",
                "08:54"
            ],
            [
                "Sewagram Exp",
                "09:08"
            ],
            [
                "Ballarshah-Mumbai Pass",
                "09:48"
            ],
            [
                "Nagpur-Kazipet Pass",
                "23:44"
            ],
            [
                "Kazipet-Nagpur Pass",
                "05:09"
            ],
            [
                "Lucknow-Chennai Exp",
                "13:04"
            ],
            [
                "Andaman Exp",
                "13:04"
            ],
            [
                "Andaman Exp",
                "23:39"
            ],
            [
                "Nandigram Exp",
                "13:28"
            ]
        ]
    },
    {
        "db_id": "railway",
        "query": "MATCH (manager:`railway.manager`)\nRETURN manager.Name\nORDER BY manager.Age DESC\nLIMIT 1",
        "question": "What is the name of the oldest manager?",
        "answers": [
            [
                "Todd Hamilton"
            ]
        ]
    },
    {
        "db_id": "railway",
        "query": "MATCH (T1:`railway.railway`)-[]-(T2:`railway.train`)\nRETURN T2.Name,T1.Location",
        "question": "Show the names of trains and locations of railways they are in.",
        "answers": [
            [
                "Wardha-Ballarshah Pass",
                "York"
            ],
            [
                "Sewagram Exp",
                "York"
            ],
            [
                "Ballarshah-Mumbai Pass",
                "Bo'ness"
            ],
            [
                "Nagpur-Kazipet Pass",
                "Barrow Hill"
            ],
            [
                "Kazipet-Nagpur Pass",
                "Bressingham"
            ],
            [
                "Lucknow-Chennai Exp",
                "Bressingham"
            ],
            [
                "Andaman Exp",
                "Shildon"
            ],
            [
                "Andaman Exp",
                "Bressingham"
            ],
            [
                "Nandigram Exp",
                "Basingstoke"
            ]
        ]
    },
    {
        "db_id": "railway",
        "query": "MATCH (T1:`railway.railway`)-[]-(T2:`railway.train`)\nWHERE T2.Name = 'Andaman Exp'\nRETURN T1.Builder",
        "question": "Show the builder of railways associated with the trains named \"Andaman Exp\".",
        "answers": [
            [
                "GWR Swindon"
            ],
            [
                "Stephenson"
            ]
        ]
    },
    {
        "db_id": "railway",
        "query": "MATCH (T1:`railway.railway`)-[]-(T2:`railway.train`)\nWITH count(*) AS count, T1.Location AS Location, T2.Railway_ID AS Railway_ID\nWHERE count  > 1\nRETURN Railway_ID,Location",
        "question": "Show id and location of railways that are associated with more than one train.",
        "answers": [
            [
                1,
                "York"
            ],
            [
                5,
                "Bressingham"
            ]
        ]
    },
    {
        "db_id": "railway",
        "query": "MATCH (railway:`railway.railway`)\nRETURN railway.Builder,count(*)",
        "question": "Show different builders of railways, along with the corresponding number of railways using each builder.",
        "answers": [
            [
                "SECR Ashford",
                1
            ],
            [
                "MR Derby",
                1
            ],
            [
                "GNR Doncaster",
                1
            ],
            [
                "GWR Swindon",
                2
            ],
            [
                "GER Stratford",
                1
            ],
            [
                "GER Hartford",
                1
            ],
            [
                "Swindon Works",
                1
            ],
            [
                "Stephenson",
                1
            ],
            [
                "Avonside",
                1
            ]
        ]
    },
    {
        "db_id": "railway",
        "query": "MATCH (railway:`railway.railway`)\nRETURN railway.Location,count(*)",
        "question": "Show different locations of railways along with the corresponding number of railways at each location.",
        "answers": [
            [
                "York",
                1
            ],
            [
                "Bo'ness",
                1
            ],
            [
                "Barrow Hill",
                2
            ],
            [
                "Toddington",
                1
            ],
            [
                "Bressingham",
                2
            ],
            [
                "Shildon",
                1
            ],
            [
                "Swindon",
                1
            ],
            [
                "Basingstoke",
                1
            ]
        ]
    },
    {
        "db_id": "railway",
        "query": "MATCH (railway:`railway.railway`)\nWITH count(*) AS count, railway.Location AS Location\nWHERE count  > 1\nRETURN Location",
        "question": "Show the locations that have more than one railways.",
        "answers": [
            [
                "Barrow Hill"
            ],
            [
                "Bressingham"
            ]
        ]
    },
    {
        "db_id": "railway",
        "query": "MATCH (railway:`railway.railway`)\nWHERE NOT (railway)-[]-(:`railway.train`)    \nRETURN railway.ObjectNumber",
        "question": "List the object number of railways that do not have any trains.",
        "answers": [
            [
                "1978-7025"
            ],
            [
                "1978-7026"
            ],
            [
                "1978-7027"
            ]
        ]
    },
    {
        "db_id": "railway",
        "query": "MATCH (manager:`railway.manager`)\nRETURN DISTINCT manager.Country",
        "question": "Show the distinct countries of managers.",
        "answers": [
            [
                "United States"
            ],
            [
                "Scotland"
            ],
            [
                "England"
            ],
            [
                "Australia"
            ]
        ]
    },
    {
        "db_id": "railway",
        "query": "MATCH (manager:`railway.manager`)\nRETURN manager.Working_year_starts\nORDER BY manager.Level DESC",
        "question": "Show the working years of managers in descending order of their level.",
        "answers": [
            [
                "1993"
            ],
            [
                "1999"
            ],
            [
                "1985"
            ],
            [
                "2001"
            ],
            [
                "2003"
            ],
            [
                "2004"
            ],
            [
                "2006"
            ]
        ]
    },
    {
        "db_id": "railway",
        "query": "MATCH (manager:`railway.manager`)\nWHERE manager.Age > 50 OR manager.Age < 46\nRETURN manager.Country",
        "question": "Show the countries that have managers of age above 50 or below 46.",
        "answers": [
            [
                "United States"
            ],
            [
                "United States"
            ],
            [
                "England"
            ],
            [
                "Australia"
            ]
        ]
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "MATCH (addresses:`customers_and_products_contacts.Addresses`)\nWHERE addresses.country = 'USA'\nRETURN count(*)",
        "question": "How many addresses are there in country USA?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "MATCH (addresses:`customers_and_products_contacts.Addresses`)\nRETURN DISTINCT addresses.city",
        "question": "Show all distinct cities in the address record.",
        "answers": [
            [
                "Hertafurt"
            ],
            [
                "Edgardoberg"
            ],
            [
                "Gilbertmouth"
            ],
            [
                "Lake Floyd"
            ],
            [
                "Gibsonfurt"
            ],
            [
                "North Jairo"
            ],
            [
                "East Rickey"
            ],
            [
                "West Kaiatown"
            ],
            [
                "Agustinstad"
            ],
            [
                "Gleasonland"
            ],
            [
                "Lake Katheryn"
            ],
            [
                "North Lisandroport"
            ],
            [
                "Estaland"
            ],
            [
                "West Muriel"
            ],
            [
                "Port Montytown"
            ]
        ]
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "MATCH (addresses:`customers_and_products_contacts.Addresses`)\nRETURN addresses.state_province_county,count(*)",
        "question": "Show each state and the number of addresses in each state.",
        "answers": [
            [
                "Nevada",
                1
            ],
            [
                "Colorado",
                1
            ],
            [
                "Virginia",
                1
            ],
            [
                "Oklahoma",
                1
            ],
            [
                "District of Columbia",
                1
            ],
            [
                "Maryland",
                1
            ],
            [
                "Louisiana",
                1
            ],
            [
                "Oregon",
                1
            ],
            [
                "Illinois",
                1
            ],
            [
                "Kentucky",
                2
            ],
            [
                "Maine",
                1
            ],
            [
                "Idaho",
                1
            ],
            [
                "Vermont",
                1
            ],
            [
                "SouthDakota",
                1
            ]
        ]
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "MATCH (products:`customers_and_products_contacts.Products`)\nWITH count(*) AS count, products.product_type_code AS product_type_code\nWHERE count  >= 2\nRETURN product_type_code",
        "question": "Show the product type codes which have at least two products.",
        "answers": [
            [
                "Hardware"
            ],
            [
                "Clothes"
            ]
        ]
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "MATCH (customers:`customers_and_products_contacts.Customers`)\nRETURN customers.customer_name,customers.customer_phone,customers.payment_method_code\nORDER BY customers.customer_number DESC",
        "question": "Show the name, phone, and payment method code for all customers in descending order of customer number.",
        "answers": [
            [
                "Buford",
                "(192)144-4687",
                "Credit Card"
            ],
            [
                "Cheyenne",
                "009-136-4509x19635",
                "Direct Debit"
            ],
            [
                "Cleo",
                "1-202-928-5395",
                "Credit Card"
            ],
            [
                "Raymond",
                "1-513-427-0125",
                "Direct Debit"
            ],
            [
                "Orion",
                "479-171-6355x66065",
                "Direct Debit"
            ],
            [
                "Madaline",
                "097-514-4641",
                "Credit Card"
            ],
            [
                "Brenna",
                "1-271-345-4681x1131",
                "Credit Card"
            ],
            [
                "Sterling",
                "896.685.8228x2786",
                "Credit Card"
            ],
            [
                "Lela",
                "838.718.8618x23239",
                "Credit Card"
            ],
            [
                "Ottilie",
                "393-750-2077x72779",
                "Direct Debit"
            ],
            [
                "Caterina",
                "387.053.1225",
                "Direct Debit"
            ],
            [
                "Kayley",
                "+87(9)5279161988",
                "Credit Card"
            ],
            [
                "Melissa",
                "529.148.1926",
                "Direct Debit"
            ],
            [
                "Cecelia",
                "672-559-0630x7875",
                "Direct Debit"
            ],
            [
                "Shany",
                "936.929.9929",
                "Direct Debit"
            ]
        ]
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "MATCH (products:`customers_and_products_contacts.Products`)\nWITH avg(products.product_price) AS product_price\nMATCH (products:`customers_and_products_contacts.Products`)\nWHERE  products.product_price >  product_price \nRETURN count(*)",
        "question": "How many products have a price higher than the average?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "MATCH (T1:`customers_and_products_contacts.Customers`)-[]-(T2:`customers_and_products_contacts.Customer_Orders`)\nWHERE T1.payment_method_code = 'Credit Card'\nWITH count(*) AS count, T1.customer_name AS customer_name\nWHERE count  > 2\nRETURN customer_name",
        "question": "Show the names of customers who use Credit Card payment method and have more than 2 orders.",
        "answers": [
            [
                "Sterling"
            ],
            [
                "Cleo"
            ]
        ]
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "MATCH (products:`customers_and_products_contacts.Products`)\nWHERE products.product_price > 1000 OR products.product_price < 500\nRETURN products.product_type_code,products.product_name",
        "question": "Show the product type and name for the products with price higher than 1000 or lower than 500.",
        "answers": [
            [
                "Hardware",
                "Apple"
            ],
            [
                "Clothes",
                "jcrew"
            ],
            [
                "Hardware",
                "Apple"
            ],
            [
                "Hardware",
                "Apple"
            ],
            [
                "Clothes",
                "jcrew"
            ],
            [
                "Hardware",
                "Apple"
            ],
            [
                "Hardware",
                "Apple"
            ],
            [
                "Hardware",
                "Sony"
            ],
            [
                "Hardware",
                "Sony"
            ],
            [
                "Clothes",
                "jcrew"
            ],
            [
                "Clothes",
                "gucci"
            ],
            [
                "Hardware",
                "Sony"
            ],
            [
                "Clothes",
                "gucci"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nWHERE dorm.gender = 'F'\nRETURN dorm.dorm_name",
        "question": "Find the name of dorms only for female (F gender).",
        "answers": [
            [
                "Anonymous Donor Hall"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nWHERE dorm.gender = 'F'\nRETURN dorm.dorm_name",
        "question": "What are the names of the all-female dorms?",
        "answers": [
            [
                "Anonymous Donor Hall"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nWHERE dorm.student_capacity > 300\nRETURN dorm.dorm_name",
        "question": "Find the name of dorms that can accommodate more than 300 students.",
        "answers": [
            [
                "Fawlty Towers"
            ],
            [
                "Dorm-plex 2000"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nWHERE dorm.student_capacity > 300\nRETURN dorm.dorm_name",
        "question": "What are the names of all the dorms that can accomdate more than 300 students?",
        "answers": [
            [
                "Fawlty Towers"
            ],
            [
                "Dorm-plex 2000"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nWHERE student.Sex = 'F' AND student.Age < 25\nRETURN count(*)",
        "question": "How many female students (sex is F) whose age is below 25?",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nWHERE student.Sex = 'F' AND student.Age < 25\nRETURN count(*)",
        "question": "How many girl students who are younger than 25?",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nWHERE student.Age > 20\nRETURN student.Fname",
        "question": "Find the first name of students who is older than 20.",
        "answers": [
            [
                "Shiela"
            ],
            [
                "Paul"
            ],
            [
                "David"
            ],
            [
                "Bruce"
            ],
            [
                "Ian"
            ],
            [
                "Lisa"
            ],
            [
                "Sarah"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nWHERE student.Age > 20\nRETURN student.Fname",
        "question": "What are the first names of all students who are older than 20?",
        "answers": [
            [
                "Shiela"
            ],
            [
                "Paul"
            ],
            [
                "David"
            ],
            [
                "Bruce"
            ],
            [
                "Ian"
            ],
            [
                "Lisa"
            ],
            [
                "Sarah"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nRETURN count(*)",
        "question": "How many dorms are there?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nRETURN count(*)",
        "question": "How many dorms are in the database?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (dorm_amenity:`dorm_1.Dorm_amenity`)\nRETURN count(*)",
        "question": "Find the number of distinct amenities.",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (dorm_amenity:`dorm_1.Dorm_amenity`)\nRETURN count(*)",
        "question": "How many diffrent dorm amenities are there?",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nRETURN count(*)",
        "question": "How many students are there?",
        "answers": [
            [
                34
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nRETURN count(*)",
        "question": "How many students exist?",
        "answers": [
            [
                34
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nRETURN avg(student.Age),student.city_code",
        "question": "Find the average age of all students living in the each city.",
        "answers": [
            [
                18.5,
                "BAL"
            ],
            [
                18.0,
                "HKG"
            ],
            [
                21.666666666666668,
                "WAS"
            ],
            [
                20.0,
                "CHI"
            ],
            [
                22.5,
                "YYZ"
            ],
            [
                19.0,
                "PIT"
            ],
            [
                17.0,
                "HOU"
            ],
            [
                19.666666666666668,
                "PHL"
            ],
            [
                18.0,
                "DAL"
            ],
            [
                17.0,
                "DET"
            ],
            [
                27.0,
                "LON"
            ],
            [
                20.333333333333332,
                "NYC"
            ],
            [
                18.0,
                "LOS"
            ],
            [
                20.0,
                "ROC"
            ],
            [
                17.0,
                "PEK"
            ],
            [
                21.0,
                "SFO"
            ],
            [
                20.0,
                "ATL"
            ],
            [
                18.0,
                "NAR"
            ],
            [
                18.0,
                "BOS"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nRETURN avg(student.Age),student.city_code",
        "question": "What is the average age for each city and what are those cities?",
        "answers": [
            [
                18.5,
                "BAL"
            ],
            [
                18.0,
                "HKG"
            ],
            [
                21.666666666666668,
                "WAS"
            ],
            [
                20.0,
                "CHI"
            ],
            [
                22.5,
                "YYZ"
            ],
            [
                19.0,
                "PIT"
            ],
            [
                17.0,
                "HOU"
            ],
            [
                19.666666666666668,
                "PHL"
            ],
            [
                18.0,
                "DAL"
            ],
            [
                17.0,
                "DET"
            ],
            [
                27.0,
                "LON"
            ],
            [
                20.333333333333332,
                "NYC"
            ],
            [
                18.0,
                "LOS"
            ],
            [
                20.0,
                "ROC"
            ],
            [
                17.0,
                "PEK"
            ],
            [
                21.0,
                "SFO"
            ],
            [
                20.0,
                "ATL"
            ],
            [
                18.0,
                "NAR"
            ],
            [
                18.0,
                "BOS"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH ()-[has_amenity:`dorm_1.Has_amenity`]-()\nRETURN count(DISTINCT has_amenity.dormid)",
        "question": "Find the number of dorms that have some amenity.",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH ()-[has_amenity:`dorm_1.Has_amenity`]-()\nRETURN count(DISTINCT has_amenity.dormid)",
        "question": "How many dorms have amenities?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nRETURN count(DISTINCT dorm.gender)",
        "question": "Find the number of distinct gender for dorms.",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nRETURN count(DISTINCT dorm.gender)",
        "question": "How many different genders are there in the dorms?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nWHERE dorm.dorm_name =~'.*[D|d]onor.*'\nRETURN dorm.student_capacity,dorm.gender",
        "question": "Find the capacity and gender type of the dorm whose name has substring \u2018Donor\u2019.",
        "answers": [
            [
                128,
                "F"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nWHERE dorm.dorm_name =~'.*[D|d]onor.*'\nRETURN dorm.student_capacity,dorm.gender",
        "question": "What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it?",
        "answers": [
            [
                128,
                "F"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nWHERE dorm.student_capacity > 300 OR dorm.student_capacity < 100\nRETURN dorm.dorm_name,dorm.gender",
        "question": "Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.",
        "answers": [
            [
                "Smith Hall",
                "X"
            ],
            [
                "Fawlty Towers",
                "X"
            ],
            [
                "Dorm-plex 2000",
                "X"
            ],
            [
                "University Hovels",
                "X"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nWHERE dorm.student_capacity > 300 OR dorm.student_capacity < 100\nRETURN dorm.dorm_name,dorm.gender",
        "question": "What are the names and types of the dorms that have a capacity greater than 300 or less than 100?",
        "answers": [
            [
                "Smith Hall",
                "X"
            ],
            [
                "Fawlty Towers",
                "X"
            ],
            [
                "Dorm-plex 2000",
                "X"
            ],
            [
                "University Hovels",
                "X"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nRETURN count(DISTINCT student.Major),count(DISTINCT student.city_code)",
        "question": "Find the numbers of different majors and cities.",
        "answers": [
            [
                6,
                19
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nRETURN count(DISTINCT student.Major),count(DISTINCT student.city_code)",
        "question": "How many different majors are there and how many different city codes are there for each student?",
        "answers": [
            [
                6,
                19
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nWHERE student.Sex = 'F' AND student.city_code = 'BAL'\nRETURN student.LName  AS lname \nUNION\nMATCH (student:`dorm_1.Student`)\nWHERE student.Sex = 'M' AND student.Age < 20\nRETURN student.LName  AS lname",
        "question": "Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.",
        "answers": [
            [
                "Smith"
            ],
            [
                "Nelson"
            ],
            [
                "Prater"
            ],
            [
                "Schultz"
            ],
            [
                "Tai"
            ],
            [
                "Lee"
            ],
            [
                "Norris"
            ],
            [
                "Schwartz"
            ],
            [
                "Pang"
            ],
            [
                "Andreou"
            ],
            [
                "Woods"
            ],
            [
                "Goldman"
            ],
            [
                "Brody"
            ],
            [
                "Han"
            ],
            [
                "Simms"
            ],
            [
                "Epp"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nWHERE student.Sex = 'F' AND student.city_code = 'BAL'\nRETURN student.LName  AS lname \nUNION\nMATCH (student:`dorm_1.Student`)\nWHERE student.Sex = 'M' AND student.Age < 20\nRETURN student.LName  AS lname",
        "question": "What is the last name of every student who is either female or living in a city with the code BAL or male and under 20?",
        "answers": [
            [
                "Smith"
            ],
            [
                "Nelson"
            ],
            [
                "Prater"
            ],
            [
                "Schultz"
            ],
            [
                "Tai"
            ],
            [
                "Lee"
            ],
            [
                "Norris"
            ],
            [
                "Schwartz"
            ],
            [
                "Pang"
            ],
            [
                "Andreou"
            ],
            [
                "Woods"
            ],
            [
                "Goldman"
            ],
            [
                "Brody"
            ],
            [
                "Han"
            ],
            [
                "Simms"
            ],
            [
                "Epp"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nRETURN dorm.dorm_name\nORDER BY dorm.student_capacity DESC\nLIMIT 1",
        "question": "Find the name of the dorm with the largest capacity.",
        "answers": [
            [
                "Dorm-plex 2000"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nRETURN dorm.dorm_name\nORDER BY dorm.student_capacity DESC\nLIMIT 1",
        "question": "What are the names of the dorm with the largest capacity?",
        "answers": [
            [
                "Dorm-plex 2000"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (dorm_amenity:`dorm_1.Dorm_amenity`)\nRETURN dorm_amenity.amenity_name\nORDER BY dorm_amenity.amenity_name",
        "question": "List in alphabetic order all different amenities.",
        "answers": [
            [
                "4 Walls"
            ],
            [
                "Air Conditioning"
            ],
            [
                "Allows Pets"
            ],
            [
                "Carpeted Rooms"
            ],
            [
                "Ethernet Ports"
            ],
            [
                "Heat"
            ],
            [
                "Kitchen in Every Room"
            ],
            [
                "Pub in Basement"
            ],
            [
                "Roof"
            ],
            [
                "Study Room"
            ],
            [
                "TV Lounge"
            ],
            [
                "Working Fireplaces"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (dorm_amenity:`dorm_1.Dorm_amenity`)\nRETURN dorm_amenity.amenity_name\nORDER BY dorm_amenity.amenity_name",
        "question": "What are the different dorm amenity names in alphabetical order?",
        "answers": [
            [
                "4 Walls"
            ],
            [
                "Air Conditioning"
            ],
            [
                "Allows Pets"
            ],
            [
                "Carpeted Rooms"
            ],
            [
                "Ethernet Ports"
            ],
            [
                "Heat"
            ],
            [
                "Kitchen in Every Room"
            ],
            [
                "Pub in Basement"
            ],
            [
                "Roof"
            ],
            [
                "Study Room"
            ],
            [
                "TV Lounge"
            ],
            [
                "Working Fireplaces"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nWITH avg(student.Age) AS age\nMATCH (student:`dorm_1.Student`)\nWHERE  student.Age <  age \nRETURN student.Fname,student.LName",
        "question": "Find the first and last name of students whose age is younger than the average age.",
        "answers": [
            [
                "Linda",
                "Smith"
            ],
            [
                "Tracy",
                "Kim"
            ],
            [
                "Andy",
                "Schultz"
            ],
            [
                "Lisa",
                "Apap"
            ],
            [
                "Eric",
                "Tai"
            ],
            [
                "Derek",
                "Lee"
            ],
            [
                "Charles",
                "Norris"
            ],
            [
                "Susan",
                "Lee"
            ],
            [
                "Mark",
                "Schwartz"
            ],
            [
                "Arthur",
                "Pang"
            ],
            [
                "George",
                "Andreou"
            ],
            [
                "Michael",
                "Woods"
            ],
            [
                "Stacy",
                "Prater"
            ],
            [
                "Mark",
                "Goldman"
            ],
            [
                "Eric",
                "Pang"
            ],
            [
                "Paul",
                "Brody"
            ],
            [
                "Jun",
                "Han"
            ],
            [
                "William",
                "Simms"
            ],
            [
                "Eric",
                "Epp"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nWITH avg(student.Age) AS age\nMATCH (student:`dorm_1.Student`)\nWHERE  student.Age <  age \nRETURN student.Fname,student.LName",
        "question": "What is the first and last name of all students who are younger than average?",
        "answers": [
            [
                "Linda",
                "Smith"
            ],
            [
                "Tracy",
                "Kim"
            ],
            [
                "Andy",
                "Schultz"
            ],
            [
                "Lisa",
                "Apap"
            ],
            [
                "Eric",
                "Tai"
            ],
            [
                "Derek",
                "Lee"
            ],
            [
                "Charles",
                "Norris"
            ],
            [
                "Susan",
                "Lee"
            ],
            [
                "Mark",
                "Schwartz"
            ],
            [
                "Arthur",
                "Pang"
            ],
            [
                "George",
                "Andreou"
            ],
            [
                "Michael",
                "Woods"
            ],
            [
                "Stacy",
                "Prater"
            ],
            [
                "Mark",
                "Goldman"
            ],
            [
                "Eric",
                "Pang"
            ],
            [
                "Paul",
                "Brody"
            ],
            [
                "Jun",
                "Han"
            ],
            [
                "William",
                "Simms"
            ],
            [
                "Eric",
                "Epp"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nWHERE student.city_code <> 'HKG'\nRETURN student.Fname,student.LName\nORDER BY student.Age",
        "question": "List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages.",
        "answers": [
            [
                "Derek",
                "Lee"
            ],
            [
                "Mark",
                "Schwartz"
            ],
            [
                "Michael",
                "Woods"
            ],
            [
                "Jun",
                "Han"
            ],
            [
                "Linda",
                "Smith"
            ],
            [
                "Andy",
                "Schultz"
            ],
            [
                "Lisa",
                "Apap"
            ],
            [
                "Charles",
                "Norris"
            ],
            [
                "Arthur",
                "Pang"
            ],
            [
                "Stacy",
                "Prater"
            ],
            [
                "Mark",
                "Goldman"
            ],
            [
                "Paul",
                "Brody"
            ],
            [
                "William",
                "Simms"
            ],
            [
                "Eric",
                "Epp"
            ],
            [
                "Eric",
                "Tai"
            ],
            [
                "George",
                "Andreou"
            ],
            [
                "Dinesh",
                "Kumar"
            ],
            [
                "Jandy",
                "Nelson"
            ],
            [
                "Steven",
                "Davis"
            ],
            [
                "Michael",
                "Leighton"
            ],
            [
                "David",
                "Shieber"
            ],
            [
                "Eric",
                "Rugh"
            ],
            [
                "Sarah",
                "Smith"
            ],
            [
                "Eric",
                "Brown"
            ],
            [
                "Shiela",
                "Jones"
            ],
            [
                "Lisa",
                "Cheng"
            ],
            [
                "David",
                "Adams"
            ],
            [
                "Ian",
                "Thornton"
            ],
            [
                "Paul",
                "Gompers"
            ],
            [
                "Sarah",
                "Schmidt"
            ],
            [
                "Bruce",
                "Wilson"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nWHERE student.city_code <> 'HKG'\nRETURN student.Fname,student.LName\nORDER BY student.Age",
        "question": "What are the first and last names of all students who are not living in the city HKG and order the results by age?",
        "answers": [
            [
                "Derek",
                "Lee"
            ],
            [
                "Mark",
                "Schwartz"
            ],
            [
                "Michael",
                "Woods"
            ],
            [
                "Jun",
                "Han"
            ],
            [
                "Linda",
                "Smith"
            ],
            [
                "Andy",
                "Schultz"
            ],
            [
                "Lisa",
                "Apap"
            ],
            [
                "Charles",
                "Norris"
            ],
            [
                "Arthur",
                "Pang"
            ],
            [
                "Stacy",
                "Prater"
            ],
            [
                "Mark",
                "Goldman"
            ],
            [
                "Paul",
                "Brody"
            ],
            [
                "William",
                "Simms"
            ],
            [
                "Eric",
                "Epp"
            ],
            [
                "Eric",
                "Tai"
            ],
            [
                "George",
                "Andreou"
            ],
            [
                "Dinesh",
                "Kumar"
            ],
            [
                "Jandy",
                "Nelson"
            ],
            [
                "Steven",
                "Davis"
            ],
            [
                "Michael",
                "Leighton"
            ],
            [
                "David",
                "Shieber"
            ],
            [
                "Eric",
                "Rugh"
            ],
            [
                "Sarah",
                "Smith"
            ],
            [
                "Eric",
                "Brown"
            ],
            [
                "Shiela",
                "Jones"
            ],
            [
                "Lisa",
                "Cheng"
            ],
            [
                "David",
                "Adams"
            ],
            [
                "Ian",
                "Thornton"
            ],
            [
                "Paul",
                "Gompers"
            ],
            [
                "Sarah",
                "Schmidt"
            ],
            [
                "Bruce",
                "Wilson"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (T1:`dorm_1.Dorm_amenity`)-[T2:`dorm_1.Has_amenity`]-(T3:`dorm_1.Dorm`)\nWHERE T3.dorm_name = 'Anonymous Donor Hall'\nRETURN T1.amenity_name\nORDER BY T1.amenity_name",
        "question": "List name of all amenities which Anonymous Donor Hall has, and sort the results in alphabetic order.",
        "answers": [
            [
                "4 Walls"
            ],
            [
                "Air Conditioning"
            ],
            [
                "Carpeted Rooms"
            ],
            [
                "Ethernet Ports"
            ],
            [
                "Heat"
            ],
            [
                "Roof"
            ],
            [
                "Study Room"
            ],
            [
                "TV Lounge"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (T1:`dorm_1.Dorm_amenity`)-[T2:`dorm_1.Has_amenity`]-(T3:`dorm_1.Dorm`)\nWHERE T3.dorm_name = 'Anonymous Donor Hall'\nRETURN T1.amenity_name\nORDER BY T1.amenity_name",
        "question": "What are the amenities in alphabetical order that Anonymous Donor Hall has?",
        "answers": [
            [
                "4 Walls"
            ],
            [
                "Air Conditioning"
            ],
            [
                "Carpeted Rooms"
            ],
            [
                "Ethernet Ports"
            ],
            [
                "Heat"
            ],
            [
                "Roof"
            ],
            [
                "Study Room"
            ],
            [
                "TV Lounge"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nRETURN count(*),student.Major",
        "question": "Find the number of students in each major.",
        "answers": [
            [
                18,
                600
            ],
            [
                6,
                520
            ],
            [
                2,
                540
            ],
            [
                5,
                550
            ],
            [
                1,
                100
            ],
            [
                2,
                50
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nRETURN count(*),student.Major",
        "question": "How many students are there in each major?",
        "answers": [
            [
                18,
                600
            ],
            [
                6,
                520
            ],
            [
                2,
                540
            ],
            [
                5,
                550
            ],
            [
                1,
                100
            ],
            [
                2,
                50
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nRETURN count(*),avg(student.Age),student.city_code",
        "question": "Find the number and average age of students living in each city.",
        "answers": [
            [
                4,
                18.5,
                "BAL"
            ],
            [
                3,
                18.0,
                "HKG"
            ],
            [
                3,
                21.666666666666668,
                "WAS"
            ],
            [
                1,
                20.0,
                "CHI"
            ],
            [
                2,
                22.5,
                "YYZ"
            ],
            [
                4,
                19.0,
                "PIT"
            ],
            [
                1,
                17.0,
                "HOU"
            ],
            [
                3,
                19.666666666666668,
                "PHL"
            ],
            [
                1,
                18.0,
                "DAL"
            ],
            [
                1,
                17.0,
                "DET"
            ],
            [
                1,
                27.0,
                "LON"
            ],
            [
                3,
                20.333333333333332,
                "NYC"
            ],
            [
                1,
                18.0,
                "LOS"
            ],
            [
                1,
                20.0,
                "ROC"
            ],
            [
                1,
                17.0,
                "PEK"
            ],
            [
                1,
                21.0,
                "SFO"
            ],
            [
                1,
                20.0,
                "ATL"
            ],
            [
                1,
                18.0,
                "NAR"
            ],
            [
                1,
                18.0,
                "BOS"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nRETURN count(*),avg(student.Age),student.city_code",
        "question": "How many students live in each city and what are their average ages?",
        "answers": [
            [
                4,
                18.5,
                "BAL"
            ],
            [
                3,
                18.0,
                "HKG"
            ],
            [
                3,
                21.666666666666668,
                "WAS"
            ],
            [
                1,
                20.0,
                "CHI"
            ],
            [
                2,
                22.5,
                "YYZ"
            ],
            [
                4,
                19.0,
                "PIT"
            ],
            [
                1,
                17.0,
                "HOU"
            ],
            [
                3,
                19.666666666666668,
                "PHL"
            ],
            [
                1,
                18.0,
                "DAL"
            ],
            [
                1,
                17.0,
                "DET"
            ],
            [
                1,
                27.0,
                "LON"
            ],
            [
                3,
                20.333333333333332,
                "NYC"
            ],
            [
                1,
                18.0,
                "LOS"
            ],
            [
                1,
                20.0,
                "ROC"
            ],
            [
                1,
                17.0,
                "PEK"
            ],
            [
                1,
                21.0,
                "SFO"
            ],
            [
                1,
                20.0,
                "ATL"
            ],
            [
                1,
                18.0,
                "NAR"
            ],
            [
                1,
                18.0,
                "BOS"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nWHERE student.Sex = 'M'\nRETURN count(*),avg(student.Age),student.city_code",
        "question": "Find the average age and number of male students (with sex M) from each city.",
        "answers": [
            [
                1,
                20.0,
                "CHI"
            ],
            [
                2,
                22.5,
                "YYZ"
            ],
            [
                1,
                18.0,
                "BAL"
            ],
            [
                1,
                17.0,
                "HOU"
            ],
            [
                2,
                19.5,
                "PHL"
            ],
            [
                3,
                19.333333333333332,
                "PIT"
            ],
            [
                1,
                18.0,
                "DAL"
            ],
            [
                1,
                17.0,
                "DET"
            ],
            [
                1,
                27.0,
                "LON"
            ],
            [
                1,
                18.0,
                "WAS"
            ],
            [
                3,
                20.333333333333332,
                "NYC"
            ],
            [
                1,
                19.0,
                "HKG"
            ],
            [
                1,
                18.0,
                "LOS"
            ],
            [
                1,
                20.0,
                "ROC"
            ],
            [
                1,
                17.0,
                "PEK"
            ],
            [
                1,
                20.0,
                "ATL"
            ],
            [
                1,
                18.0,
                "NAR"
            ],
            [
                1,
                18.0,
                "BOS"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nWHERE student.Sex = 'M'\nRETURN count(*),avg(student.Age),student.city_code",
        "question": "What is the average age and how many male students are there in each city?",
        "answers": [
            [
                1,
                20.0,
                "CHI"
            ],
            [
                2,
                22.5,
                "YYZ"
            ],
            [
                1,
                18.0,
                "BAL"
            ],
            [
                1,
                17.0,
                "HOU"
            ],
            [
                2,
                19.5,
                "PHL"
            ],
            [
                3,
                19.333333333333332,
                "PIT"
            ],
            [
                1,
                18.0,
                "DAL"
            ],
            [
                1,
                17.0,
                "DET"
            ],
            [
                1,
                27.0,
                "LON"
            ],
            [
                1,
                18.0,
                "WAS"
            ],
            [
                3,
                20.333333333333332,
                "NYC"
            ],
            [
                1,
                19.0,
                "HKG"
            ],
            [
                1,
                18.0,
                "LOS"
            ],
            [
                1,
                20.0,
                "ROC"
            ],
            [
                1,
                17.0,
                "PEK"
            ],
            [
                1,
                20.0,
                "ATL"
            ],
            [
                1,
                18.0,
                "NAR"
            ],
            [
                1,
                18.0,
                "BOS"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nWITH count(*) AS count, student.city_code AS city_code\nWHERE count  > 1\nRETURN count,city_code",
        "question": "Find the number of students for the cities where have more than one student.",
        "answers": [
            [
                4,
                "BAL"
            ],
            [
                3,
                "HKG"
            ],
            [
                3,
                "WAS"
            ],
            [
                2,
                "YYZ"
            ],
            [
                4,
                "PIT"
            ],
            [
                3,
                "PHL"
            ],
            [
                3,
                "NYC"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nWITH count(*) AS count, student.city_code AS city_code\nWHERE count  > 1\nRETURN count,city_code",
        "question": "How many students are from each city, and which cities have more than one cities?",
        "answers": [
            [
                4,
                "BAL"
            ],
            [
                3,
                "HKG"
            ],
            [
                3,
                "WAS"
            ],
            [
                2,
                "YYZ"
            ],
            [
                4,
                "PIT"
            ],
            [
                3,
                "PHL"
            ],
            [
                3,
                "NYC"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nWITH avg(student.Age) AS age\nMATCH (student:`dorm_1.Student`)\nWHERE  student.Age >  age \nRETURN count(*),student.Sex",
        "question": "Find the number of students whose age is older than the average age for each gender.",
        "answers": [
            [
                5,
                "F"
            ],
            [
                10,
                "M"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (student:`dorm_1.Student`)\nWITH avg(student.Age) AS age\nMATCH (student:`dorm_1.Student`)\nWHERE  student.Age >  age \nRETURN count(*),student.Sex",
        "question": "How many students are older than average for each gender?",
        "answers": [
            [
                5,
                "F"
            ],
            [
                10,
                "M"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (T1:`dorm_1.Dorm`)-[T2:`dorm_1.Has_amenity`]-()\nWHERE T1.student_capacity > 100\nRETURN count(*),T1.dormid",
        "question": "Find the number of amenities for each of the dorms that can accommodate more than 100 students.",
        "answers": [
            [
                5,
                110
            ],
            [
                6,
                140
            ],
            [
                12,
                160
            ],
            [
                8,
                109
            ],
            [
                3,
                104
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (T1:`dorm_1.Dorm`)-[T2:`dorm_1.Has_amenity`]-()\nWHERE T1.student_capacity > 100\nRETURN count(*),T1.dormid",
        "question": "For each dorm, how many amenities does it have?",
        "answers": [
            [
                5,
                110
            ],
            [
                6,
                140
            ],
            [
                12,
                160
            ],
            [
                8,
                109
            ],
            [
                3,
                104
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (T1:`dorm_1.Student`)-[T2:`dorm_1.Lives_in`]-(T3:`dorm_1.Dorm`)\nWHERE T1.Age > 20\nRETURN count(*),T3.dorm_name",
        "question": "Find the number of students who is older than 20 in each dorm.",
        "answers": [
            [
                2,
                "Smith Hall"
            ],
            [
                2,
                "Fawlty Towers"
            ],
            [
                2,
                "Dorm-plex 2000"
            ],
            [
                1,
                "Anonymous Donor Hall"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (T1:`dorm_1.Student`)-[T2:`dorm_1.Lives_in`]-(T3:`dorm_1.Dorm`)\nWHERE T1.Age > 20\nRETURN count(*),T3.dorm_name",
        "question": "How many students are older than 20 in each dorm?",
        "answers": [
            [
                2,
                "Smith Hall"
            ],
            [
                2,
                "Fawlty Towers"
            ],
            [
                2,
                "Dorm-plex 2000"
            ],
            [
                1,
                "Anonymous Donor Hall"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (T1:`dorm_1.Student`)-[T2:`dorm_1.Lives_in`]-(T3:`dorm_1.Dorm`)\nWHERE T3.dorm_name = 'Smith Hall'\nRETURN T1.Fname",
        "question": "Find the first name of students who are living in the Smith Hall.",
        "answers": [
            [
                "Stacy"
            ],
            [
                "Sarah"
            ],
            [
                "Michael"
            ],
            [
                "Sarah"
            ],
            [
                "Shiela"
            ],
            [
                "Tracy"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (T1:`dorm_1.Student`)-[T2:`dorm_1.Lives_in`]-(T3:`dorm_1.Dorm`)\nWHERE T3.dorm_name = 'Smith Hall'\nRETURN T1.Fname",
        "question": "What are the first names of all students in Smith Hall?",
        "answers": [
            [
                "Stacy"
            ],
            [
                "Sarah"
            ],
            [
                "Michael"
            ],
            [
                "Sarah"
            ],
            [
                "Shiela"
            ],
            [
                "Tracy"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (T1:`dorm_1.Student`)-[T2:`dorm_1.Lives_in`]-(T3:`dorm_1.Dorm`)\nWHERE T3.gender = 'M'\nRETURN count(*)",
        "question": "Find the total number of students living in the male dorm (with gender M).",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (T1:`dorm_1.Student`)-[T2:`dorm_1.Lives_in`]-(T3:`dorm_1.Dorm`)\nWHERE T3.gender = 'M'\nRETURN count(*)",
        "question": "What are the total number of students who are living in a male dorm?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (T1:`dorm_1.Student`)-[T2:`dorm_1.Lives_in`]-(T3:`dorm_1.Dorm`)\nWHERE T3.dorm_name = 'Smith Hall' AND T1.Sex = 'F'\nRETURN count(*)",
        "question": "Find the number of female students (with F sex) living in Smith Hall",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (T1:`dorm_1.Student`)-[T2:`dorm_1.Lives_in`]-(T3:`dorm_1.Dorm`)\nWHERE T3.dorm_name = 'Smith Hall' AND T1.Sex = 'F'\nRETURN count(*)",
        "question": "How many female students live in Smith Hall?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (T1:`dorm_1.Dorm`)-[T2:`dorm_1.Has_amenity`]-(T3:`dorm_1.Dorm_amenity`)\nWHERE T1.dorm_name = 'Smith Hall'\nRETURN T3.amenity_name",
        "question": "Find the name of amenities Smith Hall dorm have.",
        "answers": [
            [
                "4 Walls"
            ],
            [
                "Roof"
            ],
            [
                "Heat"
            ],
            [
                "Study Room"
            ],
            [
                "Carpeted Rooms"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (T1:`dorm_1.Dorm`)-[T2:`dorm_1.Has_amenity`]-(T3:`dorm_1.Dorm_amenity`)\nWHERE T1.dorm_name = 'Smith Hall'\nRETURN T3.amenity_name",
        "question": "What are the names of the amenities that Smith Hall has?",
        "answers": [
            [
                "4 Walls"
            ],
            [
                "Roof"
            ],
            [
                "Heat"
            ],
            [
                "Study Room"
            ],
            [
                "Carpeted Rooms"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (T1:`dorm_1.Dorm`)-[T2:`dorm_1.Has_amenity`]-(T3:`dorm_1.Dorm_amenity`)\nWHERE T1.dorm_name = 'Smith Hall'\nRETURN T3.amenity_name\nORDER BY T3.amenity_name",
        "question": "Find the name of amenities Smith Hall dorm have. ordered the results by amenity names.",
        "answers": [
            [
                "4 Walls"
            ],
            [
                "Carpeted Rooms"
            ],
            [
                "Heat"
            ],
            [
                "Roof"
            ],
            [
                "Study Room"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (T1:`dorm_1.Dorm`)-[T2:`dorm_1.Has_amenity`]-(T3:`dorm_1.Dorm_amenity`)\nWHERE T1.dorm_name = 'Smith Hall'\nRETURN T3.amenity_name\nORDER BY T3.amenity_name",
        "question": "What amenities does Smith Hall have in alphabetical order?",
        "answers": [
            [
                "4 Walls"
            ],
            [
                "Carpeted Rooms"
            ],
            [
                "Heat"
            ],
            [
                "Roof"
            ],
            [
                "Study Room"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (T1:`dorm_1.Dorm_amenity`)-[T2:`dorm_1.Has_amenity`]-()\nWITH count(T1.amenid) AS cnt, T1\nRETURN T1.amenity_name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Find the name of amenity that is most common in all dorms.",
        "answers": [
            [
                "Roof"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (T1:`dorm_1.Dorm_amenity`)-[T2:`dorm_1.Has_amenity`]-()\nWITH count(T1.amenid) AS cnt, T1\nRETURN T1.amenity_name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the most common amenity in the dorms?",
        "answers": [
            [
                "Roof"
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (T1:`dorm_1.Dorm`)-[T2:`dorm_1.Has_amenity`]-(T3:`dorm_1.Dorm_amenity`)\nWITH count(T1.dormid) AS cnt, T1\nRETURN T1.dorm_name,T1.student_capacity\nORDER BY cnt\nLIMIT 1",
        "question": "Find the name and capacity of the dorm with least number of amenities.",
        "answers": [
            [
                "University Hovels",
                40
            ]
        ]
    },
    {
        "db_id": "dorm_1",
        "query": "MATCH (T1:`dorm_1.Dorm`)-[T2:`dorm_1.Has_amenity`]-(T3:`dorm_1.Dorm_amenity`)\nWITH count(T1.dormid) AS cnt, T1\nRETURN T1.dorm_name,T1.student_capacity\nORDER BY cnt\nLIMIT 1",
        "question": "What is the name and capacity of the dorm with the fewest amount of amenities?",
        "answers": [
            [
                "University Hovels",
                40
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (customers:`customer_complaints.Customers`)\nRETURN count(*)",
        "question": "How many customers are there?",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (customers:`customer_complaints.Customers`)\nRETURN count(*)",
        "question": "Count the number of customers.",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (customers:`customer_complaints.Customers`)\nRETURN customers.email_address,customers.phone_number\nORDER BY customers.email_address,customers.phone_number",
        "question": "Find the emails and phone numbers of all the customers, ordered by email address and phone number.",
        "answers": [
            [
                "cayla.satterfield@example.net",
                "470-803-0244"
            ],
            [
                "hsteuber@example.org",
                "06963347450"
            ],
            [
                "lavonne.frami@example.com",
                "+38(3)9011433816"
            ],
            [
                "paige.hyatt@example.com",
                "1-369-302-7623x576"
            ],
            [
                "rzulauf@example.org",
                "578.019.7943x328"
            ],
            [
                "ubeier@example.org",
                "044-468-4549"
            ],
            [
                "vbogisich@example.org",
                "548.373.3603x59134"
            ],
            [
                "vida86@example.com",
                "997.698.4779x882"
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (customers:`customer_complaints.Customers`)\nRETURN customers.email_address,customers.phone_number\nORDER BY customers.email_address,customers.phone_number",
        "question": "What are the emails and phone numbers of all customers, sorted by email address and phone number?",
        "answers": [
            [
                "cayla.satterfield@example.net",
                "470-803-0244"
            ],
            [
                "hsteuber@example.org",
                "06963347450"
            ],
            [
                "lavonne.frami@example.com",
                "+38(3)9011433816"
            ],
            [
                "paige.hyatt@example.com",
                "1-369-302-7623x576"
            ],
            [
                "rzulauf@example.org",
                "578.019.7943x328"
            ],
            [
                "ubeier@example.org",
                "044-468-4549"
            ],
            [
                "vbogisich@example.org",
                "548.373.3603x59134"
            ],
            [
                "vida86@example.com",
                "997.698.4779x882"
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (customers:`customer_complaints.Customers`)\nWHERE customers.customer_type_code = 'Good Credit Rating'\nRETURN customers.town_city\nORDER BY customers.town_city\nLIMIT 1",
        "question": "Which city has the least number of customers whose type code is \"Good Credit Rating\"?",
        "answers": [
            [
                "Hansenbury"
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (customers:`customer_complaints.Customers`)\nWHERE customers.customer_type_code = 'Good Credit Rating'\nRETURN customers.town_city\nORDER BY customers.town_city\nLIMIT 1",
        "question": "Return the city with the customer type code \"Good Credit Rating\" that had the fewest customers.",
        "answers": [
            [
                "Hansenbury"
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (t1:`customer_complaints.Products`)-[]-(t2:`customer_complaints.Complaints`)\nRETURN t1.product_name,count(*)",
        "question": "List the name of all products along with the number of complaints that they have received.",
        "answers": [
            [
                "Chocolate",
                6
            ],
            [
                "The Great Gatsby",
                4
            ],
            [
                "Keyboard",
                1
            ],
            [
                "Mouse",
                1
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (t1:`customer_complaints.Products`)-[]-(t2:`customer_complaints.Complaints`)\nRETURN t1.product_name,count(*)",
        "question": "What are all the different product names, and how many complains has each received?",
        "answers": [
            [
                "Chocolate",
                6
            ],
            [
                "The Great Gatsby",
                4
            ],
            [
                "Keyboard",
                1
            ],
            [
                "Mouse",
                1
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (t1:`customer_complaints.Customers`)-[]-(t2:`customer_complaints.Complaints`)\nWITH t1, count(t1.customer_id) AS cnt\nRETURN t1.email_address\nORDER BY cnt\nLIMIT 1",
        "question": "Find the emails of customers who has filed a complaints of the product with the most complaints.",
        "answers": [
            [
                "hsteuber@example.org"
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (t1:`customer_complaints.Customers`)-[]-(t2:`customer_complaints.Complaints`)\nWITH t1, count(t1.customer_id) AS cnt\nRETURN t1.email_address\nORDER BY cnt\nLIMIT 1",
        "question": "What are the emails of customers who have filed complaints on the product which has had the greatest number of complaints?",
        "answers": [
            [
                "hsteuber@example.org"
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (t1:`customer_complaints.Customers`)-[]-(t2:`customer_complaints.Complaints`)\nRETURN t1.phone_number\nORDER BY t2.date_complaint_raised DESC\nLIMIT 1",
        "question": "What is the phone number of the customer who has filed the most recent complaint?",
        "answers": [
            [
                "+38(3)9011433816"
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (t1:`customer_complaints.Customers`)-[]-(t2:`customer_complaints.Complaints`)\nRETURN t1.phone_number\nORDER BY t2.date_complaint_raised DESC\nLIMIT 1",
        "question": "Return the phone number of the customer who filed the complaint that was raised most recently.",
        "answers": [
            [
                "+38(3)9011433816"
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (customers:`customer_complaints.Customers`)\nRETURN customers.phone_number  AS phone_number \nUNION\nMATCH (staff:`customer_complaints.Staff`)\nRETURN staff.phone_number  AS phone_number",
        "question": "Find the phone number of all the customers and staff.",
        "answers": [
            [
                "06963347450"
            ],
            [
                "470-803-0244"
            ],
            [
                "997.698.4779x882"
            ],
            [
                "548.373.3603x59134"
            ],
            [
                "044-468-4549"
            ],
            [
                "+38(3)9011433816"
            ],
            [
                "1-369-302-7623x576"
            ],
            [
                "578.019.7943x328"
            ],
            [
                "(379)551-0838x146"
            ],
            [
                "142-311-6503x206"
            ],
            [
                "345-656-5571"
            ],
            [
                "1-132-839-9409x288"
            ],
            [
                "(383)553-1035x20399"
            ],
            [
                "155-811-6153"
            ],
            [
                "751-262-8424x575"
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (customers:`customer_complaints.Customers`)\nRETURN customers.phone_number  AS phone_number \nUNION\nMATCH (staff:`customer_complaints.Staff`)\nRETURN staff.phone_number  AS phone_number",
        "question": "What are the phone numbers of all customers and all staff members?",
        "answers": [
            [
                "06963347450"
            ],
            [
                "470-803-0244"
            ],
            [
                "997.698.4779x882"
            ],
            [
                "548.373.3603x59134"
            ],
            [
                "044-468-4549"
            ],
            [
                "+38(3)9011433816"
            ],
            [
                "1-369-302-7623x576"
            ],
            [
                "578.019.7943x328"
            ],
            [
                "(379)551-0838x146"
            ],
            [
                "142-311-6503x206"
            ],
            [
                "345-656-5571"
            ],
            [
                "1-132-839-9409x288"
            ],
            [
                "(383)553-1035x20399"
            ],
            [
                "155-811-6153"
            ],
            [
                "751-262-8424x575"
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (products:`customer_complaints.Products`)\nRETURN products.product_name,products.product_category_code\nORDER BY products.product_price DESC\nLIMIT 1",
        "question": "Find the name and category of the most expensive product.",
        "answers": [
            [
                "Keyboard",
                "Hardware"
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (products:`customer_complaints.Products`)\nRETURN products.product_name,products.product_category_code\nORDER BY products.product_price DESC\nLIMIT 1",
        "question": "What is the name and category code of the product with the highest price?",
        "answers": [
            [
                "Keyboard",
                "Hardware"
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (products:`customer_complaints.Products`)\nRETURN avg(products.product_price),products.product_category_code",
        "question": "What is the average price of the products for each category?",
        "answers": [
            [
                2.88,
                "Food"
            ],
            [
                35.0,
                "Book"
            ],
            [
                66.67,
                "Hardware"
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (products:`customer_complaints.Products`)\nRETURN avg(products.product_price),products.product_category_code",
        "question": "Return the average price of products that have each category code.",
        "answers": [
            [
                2.88,
                "Food"
            ],
            [
                35.0,
                "Book"
            ],
            [
                66.67,
                "Hardware"
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (complaints:`customer_complaints.Complaints`)\nWITH complaints.complaint_status_code AS complaint_status_code, count(*) AS count\nWHERE count  > 3\nRETURN complaint_status_code",
        "question": "Which complaint status has more than 3 records on file?",
        "answers": [
            [
                "New"
            ],
            [
                "Open"
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (complaints:`customer_complaints.Complaints`)\nWITH complaints.complaint_status_code AS complaint_status_code, count(*) AS count\nWHERE count  > 3\nRETURN complaint_status_code",
        "question": "Return complaint status codes have more than 3 corresponding complaints?",
        "answers": [
            [
                "New"
            ],
            [
                "Open"
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (t1:`customer_complaints.Staff`)-[]-(t2:`customer_complaints.Complaints`)\nRETURN t1.last_name\nORDER BY t2.date_complaint_raised\nLIMIT 1",
        "question": "What is the last name of the staff who has handled the first ever complaint?",
        "answers": [
            [
                "Lynch"
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (t1:`customer_complaints.Staff`)-[]-(t2:`customer_complaints.Complaints`)\nRETURN t1.last_name\nORDER BY t2.date_complaint_raised\nLIMIT 1",
        "question": "Return the last name of the staff member who handled the complaint with the earliest date raised.",
        "answers": [
            [
                "Lynch"
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (complaints:`customer_complaints.Complaints`)\nRETURN count(DISTINCT complaints.complaint_type_code)",
        "question": "How many distinct complaint type codes are there in the database?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (complaints:`customer_complaints.Complaints`)\nRETURN count(DISTINCT complaints.complaint_type_code)",
        "question": "Count the number of different complaint type codes.",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (complaints:`customer_complaints.Complaints`)\nWHERE complaints.complaint_type_code = 'Product Failure'\nRETURN complaints.complaint_status_code,count(*)",
        "question": "Find the number of complaints with Product Failure type for each complaint status.",
        "answers": [
            [
                "Closed",
                1
            ],
            [
                "Open",
                1
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (complaints:`customer_complaints.Complaints`)\nWHERE complaints.complaint_type_code = 'Product Failure'\nRETURN complaints.complaint_status_code,count(*)",
        "question": "Of complaints with the type code \"Product Failure\", how many had each different status code?",
        "answers": [
            [
                "Closed",
                1
            ],
            [
                "Open",
                1
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (t1:`customer_complaints.Staff`)-[]-(t2:`customer_complaints.Complaints`)\nWITH t1, count(t1.staff_id) AS cnt\nRETURN t1.first_name\nORDER BY cnt\nLIMIT 5",
        "question": "What is first names of the top 5 staff who have handled the greatest number of complaints?",
        "answers": [
            [
                "Austin"
            ],
            [
                "Dagmar"
            ],
            [
                "Bradly"
            ],
            [
                "Lucie"
            ],
            [
                "Mikel"
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (t1:`customer_complaints.Staff`)-[]-(t2:`customer_complaints.Complaints`)\nWITH t1, count(t1.staff_id) AS cnt\nRETURN t1.first_name\nORDER BY cnt\nLIMIT 5",
        "question": "Return the first names of the 5 staff members who have handled the most complaints.",
        "answers": [
            [
                "Austin"
            ],
            [
                "Dagmar"
            ],
            [
                "Bradly"
            ],
            [
                "Lucie"
            ],
            [
                "Mikel"
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (customers:`customer_complaints.Customers`)\nRETURN customers.state\nORDER BY customers.state\nLIMIT 1",
        "question": "Which state has the most customers?",
        "answers": [
            [
                "Colorado"
            ]
        ]
    },
    {
        "db_id": "customer_complaints",
        "query": "MATCH (customers:`customer_complaints.Customers`)\nRETURN customers.state\nORDER BY customers.state\nLIMIT 1",
        "question": "Give the state that has the most customers.",
        "answers": [
            [
                "Colorado"
            ]
        ]
    },
    {
        "db_id": "workshop_paper",
        "query": "MATCH (submission:`workshop_paper.submission`)\nRETURN count(*)",
        "question": "How many submissions are there?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "workshop_paper",
        "query": "MATCH (submission:`workshop_paper.submission`)\nRETURN count(*)",
        "question": "Count the number of submissions.",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "workshop_paper",
        "query": "MATCH (submission:`workshop_paper.submission`)\nRETURN submission.Author\nORDER BY submission.Scores ASC",
        "question": "List the authors of submissions in ascending order of scores.",
        "answers": [
            [
                "Steve Niehaus"
            ],
            [
                "Sherman Smith"
            ],
            [
                "Sammy Green"
            ],
            [
                "Steve Raible"
            ],
            [
                "Jeff Lloyd"
            ],
            [
                "Randy Johnson"
            ],
            [
                "Andy Bolton"
            ],
            [
                "Rick Engles"
            ],
            [
                "Don Bitterlich"
            ],
            [
                "Steve Myer"
            ]
        ]
    },
    {
        "db_id": "workshop_paper",
        "query": "MATCH (submission:`workshop_paper.submission`)\nRETURN submission.Author\nORDER BY submission.Scores ASC",
        "question": "Find the author for each submission and list them in ascending order of submission score.",
        "answers": [
            [
                "Steve Niehaus"
            ],
            [
                "Sherman Smith"
            ],
            [
                "Sammy Green"
            ],
            [
                "Steve Raible"
            ],
            [
                "Jeff Lloyd"
            ],
            [
                "Randy Johnson"
            ],
            [
                "Andy Bolton"
            ],
            [
                "Rick Engles"
            ],
            [
                "Don Bitterlich"
            ],
            [
                "Steve Myer"
            ]
        ]
    },
    {
        "db_id": "workshop_paper",
        "query": "MATCH (submission:`workshop_paper.submission`)\nRETURN submission.Author,submission.College",
        "question": "What are the authors of submissions and their colleges?",
        "answers": [
            [
                "Steve Niehaus",
                "Notre Dame"
            ],
            [
                "Sammy Green",
                "Florida"
            ],
            [
                "Sherman Smith",
                "Miami (OH)"
            ],
            [
                "Steve Raible",
                "Georgia Tech"
            ],
            [
                "Jeff Lloyd",
                "West Texas State"
            ],
            [
                "Rick Engles",
                "Tulsa"
            ],
            [
                "Don Bitterlich",
                "Temple"
            ],
            [
                "Steve Myer",
                "New Mexico"
            ],
            [
                "Randy Johnson",
                "Georgia"
            ],
            [
                "Andy Bolton",
                "Fisk"
            ]
        ]
    },
    {
        "db_id": "workshop_paper",
        "query": "MATCH (submission:`workshop_paper.submission`)\nRETURN submission.Author,submission.College",
        "question": "For each submission, show the author and their affiliated college.",
        "answers": [
            [
                "Steve Niehaus",
                "Notre Dame"
            ],
            [
                "Sammy Green",
                "Florida"
            ],
            [
                "Sherman Smith",
                "Miami (OH)"
            ],
            [
                "Steve Raible",
                "Georgia Tech"
            ],
            [
                "Jeff Lloyd",
                "West Texas State"
            ],
            [
                "Rick Engles",
                "Tulsa"
            ],
            [
                "Don Bitterlich",
                "Temple"
            ],
            [
                "Steve Myer",
                "New Mexico"
            ],
            [
                "Randy Johnson",
                "Georgia"
            ],
            [
                "Andy Bolton",
                "Fisk"
            ]
        ]
    },
    {
        "db_id": "workshop_paper",
        "query": "MATCH (submission:`workshop_paper.submission`)\nWHERE submission.College = 'Florida' OR submission.College = 'Temple'\nRETURN submission.Author",
        "question": "Show the names of authors from college \"Florida\" or \"Temple\"",
        "answers": [
            [
                "Sammy Green"
            ],
            [
                "Don Bitterlich"
            ]
        ]
    },
    {
        "db_id": "workshop_paper",
        "query": "MATCH (submission:`workshop_paper.submission`)\nWHERE submission.College = 'Florida' OR submission.College = 'Temple'\nRETURN submission.Author",
        "question": "Which authors with submissions are from college \"Florida\" or \"Temple\"?",
        "answers": [
            [
                "Sammy Green"
            ],
            [
                "Don Bitterlich"
            ]
        ]
    },
    {
        "db_id": "workshop_paper",
        "query": "MATCH (submission:`workshop_paper.submission`)\nRETURN submission.Author\nORDER BY submission.Scores DESC\nLIMIT 1",
        "question": "What is the author of the submission with the highest score?",
        "answers": [
            [
                "Steve Myer"
            ]
        ]
    },
    {
        "db_id": "workshop_paper",
        "query": "MATCH (submission:`workshop_paper.submission`)\nRETURN submission.Author\nORDER BY submission.Scores DESC\nLIMIT 1",
        "question": "Find the author who achieved the highest score in a submission.",
        "answers": [
            [
                "Steve Myer"
            ]
        ]
    },
    {
        "db_id": "workshop_paper",
        "query": "MATCH (submission:`workshop_paper.submission`)\nRETURN submission.College,count(*)",
        "question": "Show different colleges along with the number of authors of submission from each college.",
        "answers": [
            [
                "Notre Dame",
                1
            ],
            [
                "Florida",
                1
            ],
            [
                "Miami (OH)",
                1
            ],
            [
                "Georgia Tech",
                1
            ],
            [
                "West Texas State",
                1
            ],
            [
                "Tulsa",
                1
            ],
            [
                "Temple",
                1
            ],
            [
                "New Mexico",
                1
            ],
            [
                "Georgia",
                1
            ],
            [
                "Fisk",
                1
            ]
        ]
    },
    {
        "db_id": "workshop_paper",
        "query": "MATCH (submission:`workshop_paper.submission`)\nRETURN submission.College,count(*)",
        "question": "For each college, return the college name and the count of authors with submissions from that college.",
        "answers": [
            [
                "Notre Dame",
                1
            ],
            [
                "Florida",
                1
            ],
            [
                "Miami (OH)",
                1
            ],
            [
                "Georgia Tech",
                1
            ],
            [
                "West Texas State",
                1
            ],
            [
                "Tulsa",
                1
            ],
            [
                "Temple",
                1
            ],
            [
                "New Mexico",
                1
            ],
            [
                "Georgia",
                1
            ],
            [
                "Fisk",
                1
            ]
        ]
    },
    {
        "db_id": "workshop_paper",
        "query": "MATCH (submission:`workshop_paper.submission`)\nRETURN submission.College\nORDER BY submission.College DESC\nLIMIT 1",
        "question": "Show the most common college of authors of submissions.",
        "answers": [
            [
                "West Texas State"
            ]
        ]
    },
    {
        "db_id": "workshop_paper",
        "query": "MATCH (submission:`workshop_paper.submission`)\nRETURN submission.College\nORDER BY submission.College DESC\nLIMIT 1",
        "question": "Which college has the most authors with submissions?",
        "answers": [
            [
                "West Texas State"
            ]
        ]
    },
    {
        "db_id": "workshop_paper",
        "query": "MATCH (T2:`workshop_paper.submission`)-[T1:`workshop_paper.Acceptance`]-()\nRETURN T2.Author,T1.Result",
        "question": "Show the authors of submissions and the acceptance results of their submissions.",
        "answers": [
            [
                "Steve Niehaus",
                "Accepted"
            ],
            [
                "Sammy Green",
                "Rejected"
            ],
            [
                "Sammy Green",
                "Accepted"
            ],
            [
                "Sherman Smith",
                "Rejected"
            ],
            [
                "Steve Raible",
                "Rejected"
            ],
            [
                "Jeff Lloyd",
                "Rejected"
            ]
        ]
    },
    {
        "db_id": "workshop_paper",
        "query": "MATCH (T2:`workshop_paper.submission`)-[T1:`workshop_paper.Acceptance`]-()\nRETURN T2.Author,T1.Result",
        "question": "For each submission, find its author and acceptance result.",
        "answers": [
            [
                "Steve Niehaus",
                "Accepted"
            ],
            [
                "Sammy Green",
                "Rejected"
            ],
            [
                "Sammy Green",
                "Accepted"
            ],
            [
                "Sherman Smith",
                "Rejected"
            ],
            [
                "Steve Raible",
                "Rejected"
            ],
            [
                "Jeff Lloyd",
                "Rejected"
            ]
        ]
    },
    {
        "db_id": "workshop_paper",
        "query": "MATCH (T2:`workshop_paper.submission`)-[T1:`workshop_paper.Acceptance`]-()\nRETURN T1.Result\nORDER BY T2.Scores DESC\nLIMIT 1",
        "question": "Show the result of the submission with the highest score.",
        "answers": [
            [
                "Rejected"
            ]
        ]
    },
    {
        "db_id": "workshop_paper",
        "query": "MATCH (T2:`workshop_paper.submission`)-[T1:`workshop_paper.Acceptance`]-()\nRETURN T1.Result\nORDER BY T2.Scores DESC\nLIMIT 1",
        "question": "Which submission received the highest score in acceptance result. Show me the result.",
        "answers": [
            [
                "Rejected"
            ]
        ]
    },
    {
        "db_id": "workshop_paper",
        "query": "MATCH (T2:`workshop_paper.submission`)-[T1:`workshop_paper.Acceptance`]-()\nRETURN T2.Author,count(DISTINCT T1.Workshop_ID)",
        "question": "Show each author and the number of workshops they submitted to.",
        "answers": [
            [
                "Steve Niehaus",
                1
            ],
            [
                "Sammy Green",
                2
            ],
            [
                "Sherman Smith",
                1
            ],
            [
                "Steve Raible",
                1
            ],
            [
                "Jeff Lloyd",
                1
            ]
        ]
    },
    {
        "db_id": "workshop_paper",
        "query": "MATCH (T2:`workshop_paper.submission`)-[T1:`workshop_paper.Acceptance`]-()\nRETURN T2.Author,count(DISTINCT T1.Workshop_ID)",
        "question": "How many workshops did each author submit to? Return the author name and the number of workshops.",
        "answers": [
            [
                "Steve Niehaus",
                1
            ],
            [
                "Sammy Green",
                2
            ],
            [
                "Sherman Smith",
                1
            ],
            [
                "Steve Raible",
                1
            ],
            [
                "Jeff Lloyd",
                1
            ]
        ]
    },
    {
        "db_id": "workshop_paper",
        "query": "MATCH (workshop:`workshop_paper.workshop`)\nRETURN workshop.Date,workshop.Venue\nORDER BY workshop.Venue",
        "question": "Show the date and venue of each workshop in ascending alphabetical order of the venue.",
        "answers": [
            [
                "July 5, 2011",
                "Istanbul Turkey"
            ],
            [
                "August 18, 2007",
                "London UK"
            ],
            [
                "August 21, 2007",
                "London UK"
            ],
            [
                "August 25, 2007",
                "New Jersey USA"
            ],
            [
                "October 8, 2007",
                "New York USA"
            ],
            [
                "January 14, 2008",
                "New York USA"
            ]
        ]
    },
    {
        "db_id": "workshop_paper",
        "query": "MATCH (workshop:`workshop_paper.workshop`)\nRETURN workshop.Date,workshop.Venue\nORDER BY workshop.Venue",
        "question": "Sort the each workshop in alphabetical order of the venue. Return the date and venue of each workshop.",
        "answers": [
            [
                "July 5, 2011",
                "Istanbul Turkey"
            ],
            [
                "August 18, 2007",
                "London UK"
            ],
            [
                "August 21, 2007",
                "London UK"
            ],
            [
                "August 25, 2007",
                "New Jersey USA"
            ],
            [
                "October 8, 2007",
                "New York USA"
            ],
            [
                "January 14, 2008",
                "New York USA"
            ]
        ]
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "MATCH (investors:`tracking_share_transactions.Investors`)\nRETURN count(*)",
        "question": "Find the number of investors in total.",
        "answers": [
            [
                20
            ]
        ]
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "MATCH (investors:`tracking_share_transactions.Investors`)\nRETURN investors.Investor_details",
        "question": "Show all investor details.",
        "answers": [
            [
                "z"
            ],
            [
                "z"
            ],
            [
                "d"
            ],
            [
                "d"
            ],
            [
                "b"
            ],
            [
                "k"
            ],
            [
                "l"
            ],
            [
                "t"
            ],
            [
                "y"
            ],
            [
                "r"
            ],
            [
                "q"
            ],
            [
                "c"
            ],
            [
                "o"
            ],
            [
                "w"
            ],
            [
                "i"
            ],
            [
                "y"
            ],
            [
                "k"
            ],
            [
                "w"
            ],
            [
                "l"
            ],
            [
                "j"
            ]
        ]
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "MATCH (lots:`tracking_share_transactions.Lots`)\nRETURN DISTINCT lots.lot_details",
        "question": "Show all distinct lot details.",
        "answers": [
            [
                "r"
            ],
            [
                "z"
            ],
            [
                "s"
            ],
            [
                "q"
            ],
            [
                "d"
            ],
            [
                "m"
            ],
            [
                "h"
            ],
            [
                "x"
            ]
        ]
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "MATCH (transactions:`tracking_share_transactions.Transactions`)\nRETURN max(transactions.amount_of_transaction)",
        "question": "Show the maximum amount of transaction.",
        "answers": [
            [
                207484122.2796
            ]
        ]
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "MATCH (transactions:`tracking_share_transactions.Transactions`)\nRETURN transactions.date_of_transaction,transactions.share_count",
        "question": "Show all date and share count of transactions.",
        "answers": [
            [
                "1988-09-16 19:02:51",
                "8718572"
            ],
            [
                "1982-06-06 17:19:00",
                "9"
            ],
            [
                "1979-04-27 06:03:59",
                "8580"
            ],
            [
                "2001-11-28 15:06:25",
                "8040"
            ],
            [
                "1977-08-17 13:13:30",
                "930"
            ],
            [
                "1985-10-08 13:13:39",
                "2751"
            ],
            [
                "1990-12-02 09:03:38",
                "1522"
            ],
            [
                "2004-01-18 20:37:50",
                "96178"
            ],
            [
                "1977-08-13 02:18:47",
                ""
            ],
            [
                "1981-01-28 08:07:03",
                "1654756"
            ],
            [
                "2000-04-03 20:55:43",
                "674529892"
            ],
            [
                "1983-11-01 17:57:27",
                "587"
            ],
            [
                "2002-04-07 20:28:37",
                ""
            ],
            [
                "2002-09-13 03:04:56",
                "630021"
            ],
            [
                "1997-12-30 05:05:40",
                "93191"
            ]
        ]
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "MATCH (transactions:`tracking_share_transactions.Transactions`)\nWHERE transactions.transaction_type_code = 'PUR'\nRETURN transactions.transaction_id",
        "question": "Show all transaction ids with transaction code 'PUR'.",
        "answers": [
            [
                2
            ],
            [
                4
            ],
            [
                5
            ],
            [
                6
            ],
            [
                7
            ],
            [
                9
            ],
            [
                14
            ],
            [
                15
            ]
        ]
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "MATCH (transactions:`tracking_share_transactions.Transactions`)\nWHERE transactions.amount_of_transaction < 10000\nRETURN max(transactions.share_count)",
        "question": "Show the maximum share count of transactions where the amount is smaller than 10000",
        "answers": [
            [
                "93191"
            ]
        ]
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "MATCH (transactions:`tracking_share_transactions.Transactions`)\nRETURN count(DISTINCT transactions.transaction_type_code)",
        "question": "How many distinct transaction types are used in the transactions?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "MATCH (lots:`tracking_share_transactions.Lots`)\nRETURN lots.lot_details,lots.investor_id",
        "question": "Return the lot details and investor ids.",
        "answers": [
            [
                "r",
                13
            ],
            [
                "z",
                16
            ],
            [
                "s",
                10
            ],
            [
                "s",
                19
            ],
            [
                "q",
                6
            ],
            [
                "d",
                20
            ],
            [
                "m",
                7
            ],
            [
                "h",
                7
            ],
            [
                "z",
                20
            ],
            [
                "x",
                9
            ],
            [
                "d",
                1
            ],
            [
                "m",
                19
            ],
            [
                "z",
                7
            ],
            [
                "d",
                6
            ],
            [
                "h",
                1
            ]
        ]
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "MATCH (T1:`tracking_share_transactions.Purchases`)-[]-(T2:`tracking_share_transactions.Transactions`)\nWHERE T2.amount_of_transaction > 10000\nRETURN T1.purchase_details",
        "question": "What are the purchase details of transactions with amount bigger than 10000?",
        "answers": [
            [
                "c"
            ],
            [
                "i"
            ],
            [
                "a"
            ],
            [
                "a"
            ],
            [
                "r"
            ]
        ]
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "MATCH (T1:`tracking_share_transactions.Sales`)-[]-(T2:`tracking_share_transactions.Transactions`)\nWHERE T2.amount_of_transaction < 3000\nRETURN T1.sales_details,T2.date_of_transaction",
        "question": "What are the sale details and dates of transactions with amount smaller than 3000?",
        "answers": [
            [
                "o",
                "1982-06-06 17:19:00"
            ],
            [
                "f",
                "2001-11-28 15:06:25"
            ],
            [
                "y",
                "1977-08-17 13:13:30"
            ],
            [
                "p",
                "1990-12-02 09:03:38"
            ],
            [
                "s",
                "1981-01-28 08:07:03"
            ],
            [
                "s",
                "2000-04-03 20:55:43"
            ],
            [
                "t",
                "1983-11-01 17:57:27"
            ],
            [
                "p",
                "2002-04-07 20:28:37"
            ],
            [
                "n",
                "2002-09-13 03:04:56"
            ],
            [
                "e",
                "1997-12-30 05:05:40"
            ]
        ]
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "MATCH (transactions:`tracking_share_transactions.Transactions`)\nRETURN transactions.transaction_type_code,max(transactions.share_count),min(transactions.share_count)",
        "question": "Show the maximum and minimum share count of different transaction types.",
        "answers": [
            [
                "SALE",
                "96178",
                ""
            ],
            [
                "PUR",
                "93191",
                ""
            ]
        ]
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "MATCH (transactions:`tracking_share_transactions.Transactions`)\nRETURN transactions.investor_id,avg(transactions.amount_of_transaction)",
        "question": "Show the average amount of transactions for different investors.",
        "answers": [
            [
                6,
                302507.6996
            ],
            [
                18,
                14.1285
            ],
            [
                2,
                24403.6612
            ],
            [
                14,
                4.5263
            ],
            [
                8,
                0.0
            ],
            [
                19,
                103742065.5898
            ],
            [
                7,
                822.803
            ],
            [
                17,
                78035671.4424
            ],
            [
                20,
                82057.207
            ],
            [
                3,
                61.06666666666666
            ]
        ]
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "MATCH (transactions:`tracking_share_transactions.Transactions`)\nRETURN transactions.investor_id,count(*)",
        "question": "Show the number of transactions for different investors.",
        "answers": [
            [
                6,
                1
            ],
            [
                18,
                2
            ],
            [
                2,
                2
            ],
            [
                14,
                1
            ],
            [
                8,
                1
            ],
            [
                19,
                2
            ],
            [
                7,
                1
            ],
            [
                17,
                1
            ],
            [
                20,
                1
            ],
            [
                3,
                3
            ]
        ]
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "MATCH (T1:`tracking_share_transactions.Ref_Transaction_Types`)-[]-(T2:`tracking_share_transactions.Transactions`)\nWITH count(T1.transaction_type_code) AS cnt, T1\nRETURN T1.transaction_type_description\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Show the description of the transaction type that occurs most frequently.",
        "answers": [
            [
                "Purchase"
            ]
        ]
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "MATCH (T1:`tracking_share_transactions.Investors`)-[]-(T2:`tracking_share_transactions.Transactions`)\nWITH T2.investor_id AS investor_id, count(*) AS count\nWHERE count  >= 2\nRETURN investor_id",
        "question": "Show the ids of the investors who have at least two transactions.",
        "answers": [
            [
                2
            ],
            [
                3
            ],
            [
                18
            ],
            [
                19
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (hotels:`cre_Theme_park.Hotels`)\nRETURN count(*)",
        "question": "How many available hotels are there in total?",
        "answers": [
            [
                20
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (hotels:`cre_Theme_park.Hotels`)\nRETURN count(*)",
        "question": "Find the total number of available hotels.",
        "answers": [
            [
                20
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (hotels:`cre_Theme_park.Hotels`)\nRETURN hotels.price_range",
        "question": "What are the price ranges of hotels?",
        "answers": [
            [
                2914989.571
            ],
            [
                ""
            ],
            [
                17012.682586009
            ],
            [
                ""
            ],
            [
                ""
            ],
            [
                48525.4530675
            ],
            [
                766712918.96763
            ],
            [
                ""
            ],
            [
                ""
            ],
            [
                250548014.90329
            ],
            [
                ""
            ],
            [
                38014975.47848
            ],
            [
                9393.86291219
            ],
            [
                5526556.6412
            ],
            [
                245.067720121
            ],
            [
                43.729525
            ],
            [
                289775.7331715
            ],
            [
                2374.7971074
            ],
            [
                1381255.81865
            ],
            [
                5390.432113
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (hotels:`cre_Theme_park.Hotels`)\nRETURN hotels.price_range",
        "question": "Tell me the price ranges for all the hotels.",
        "answers": [
            [
                2914989.571
            ],
            [
                ""
            ],
            [
                17012.682586009
            ],
            [
                ""
            ],
            [
                ""
            ],
            [
                48525.4530675
            ],
            [
                766712918.96763
            ],
            [
                ""
            ],
            [
                ""
            ],
            [
                250548014.90329
            ],
            [
                ""
            ],
            [
                38014975.47848
            ],
            [
                9393.86291219
            ],
            [
                5526556.6412
            ],
            [
                245.067720121
            ],
            [
                43.729525
            ],
            [
                289775.7331715
            ],
            [
                2374.7971074
            ],
            [
                1381255.81865
            ],
            [
                5390.432113
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (locations:`cre_Theme_park.Locations`)\nRETURN DISTINCT locations.Location_Name",
        "question": "Show all distinct location names.",
        "answers": [
            [
                "Astro Orbiter"
            ],
            [
                "African Animals"
            ],
            [
                "American Adventure"
            ],
            [
                "The Barnstormer"
            ],
            [
                "African Adventure"
            ],
            [
                "UK Gallery"
            ],
            [
                "The Boneyard"
            ],
            [
                "Shark World"
            ],
            [
                "Space Spin"
            ],
            [
                "Butterflies"
            ],
            [
                "Soak Station"
            ],
            [
                "Castle"
            ],
            [
                "Coral Reefs"
            ],
            [
                "Film Festival"
            ],
            [
                "Fossil Fun Games"
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (locations:`cre_Theme_park.Locations`)\nRETURN DISTINCT locations.Location_Name",
        "question": "What are the distinct location names?",
        "answers": [
            [
                "Astro Orbiter"
            ],
            [
                "African Animals"
            ],
            [
                "American Adventure"
            ],
            [
                "The Barnstormer"
            ],
            [
                "African Adventure"
            ],
            [
                "UK Gallery"
            ],
            [
                "The Boneyard"
            ],
            [
                "Shark World"
            ],
            [
                "Space Spin"
            ],
            [
                "Butterflies"
            ],
            [
                "Soak Station"
            ],
            [
                "Castle"
            ],
            [
                "Coral Reefs"
            ],
            [
                "Film Festival"
            ],
            [
                "Fossil Fun Games"
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (staff:`cre_Theme_park.Staff`)\nRETURN staff.Name,staff.Other_Details",
        "question": "Show the names and details of all the staff members.",
        "answers": [
            [
                "Whitney",
                null
            ],
            [
                "Kaela",
                null
            ],
            [
                "Eunice",
                null
            ],
            [
                "Kiarra",
                null
            ],
            [
                "Phoebe",
                null
            ],
            [
                "Vickie",
                null
            ],
            [
                "Jannie",
                null
            ],
            [
                "Lenore",
                null
            ],
            [
                "Asia",
                null
            ],
            [
                "Janet",
                null
            ],
            [
                "Elouise",
                null
            ],
            [
                "Gina",
                null
            ],
            [
                "Beth",
                null
            ],
            [
                "Ruthie",
                null
            ],
            [
                "Aurore",
                null
            ],
            [
                "Cortney",
                null
            ],
            [
                "Astrid",
                null
            ],
            [
                "Shemar",
                null
            ],
            [
                "Trinity",
                null
            ],
            [
                "Carmella",
                null
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (staff:`cre_Theme_park.Staff`)\nRETURN staff.Name,staff.Other_Details",
        "question": "What is the name and detail of each staff member?",
        "answers": [
            [
                "Whitney",
                null
            ],
            [
                "Kaela",
                null
            ],
            [
                "Eunice",
                null
            ],
            [
                "Kiarra",
                null
            ],
            [
                "Phoebe",
                null
            ],
            [
                "Vickie",
                null
            ],
            [
                "Jannie",
                null
            ],
            [
                "Lenore",
                null
            ],
            [
                "Asia",
                null
            ],
            [
                "Janet",
                null
            ],
            [
                "Elouise",
                null
            ],
            [
                "Gina",
                null
            ],
            [
                "Beth",
                null
            ],
            [
                "Ruthie",
                null
            ],
            [
                "Aurore",
                null
            ],
            [
                "Cortney",
                null
            ],
            [
                "Astrid",
                null
            ],
            [
                "Shemar",
                null
            ],
            [
                "Trinity",
                null
            ],
            [
                "Carmella",
                null
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (visitors:`cre_Theme_park.Visitors`)\nRETURN visitors.Tourist_Details",
        "question": "Show details of all visitors.",
        "answers": [
            [
                "Toney"
            ],
            [
                "Graciela"
            ],
            [
                "Vincent"
            ],
            [
                "Vivian"
            ],
            [
                "Nettie"
            ],
            [
                "Laurence"
            ],
            [
                "Newell"
            ],
            [
                "Marisol"
            ],
            [
                "Jarrell"
            ],
            [
                "Edna"
            ],
            [
                "Maud"
            ],
            [
                "Alison"
            ],
            [
                "Rosalind"
            ],
            [
                "Tevin"
            ],
            [
                "Aleen"
            ],
            [
                "Marcelle"
            ],
            [
                "Lizzie"
            ],
            [
                "Wayne"
            ],
            [
                "Teresa"
            ],
            [
                "Elnora"
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (visitors:`cre_Theme_park.Visitors`)\nRETURN visitors.Tourist_Details",
        "question": "What is the detail of each visitor?",
        "answers": [
            [
                "Toney"
            ],
            [
                "Graciela"
            ],
            [
                "Vincent"
            ],
            [
                "Vivian"
            ],
            [
                "Nettie"
            ],
            [
                "Laurence"
            ],
            [
                "Newell"
            ],
            [
                "Marisol"
            ],
            [
                "Jarrell"
            ],
            [
                "Edna"
            ],
            [
                "Maud"
            ],
            [
                "Alison"
            ],
            [
                "Rosalind"
            ],
            [
                "Tevin"
            ],
            [
                "Aleen"
            ],
            [
                "Marcelle"
            ],
            [
                "Lizzie"
            ],
            [
                "Wayne"
            ],
            [
                "Teresa"
            ],
            [
                "Elnora"
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (locations:`cre_Theme_park.Locations`)\nWHERE locations.Location_Name = \"UK Gallery\"\nRETURN locations.Address",
        "question": "What is the address of the location \"UK Gallery\"?",
        "answers": [
            [
                "4411 Sabrina Radial Suite 582"
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (locations:`cre_Theme_park.Locations`)\nWHERE locations.Location_Name = \"UK Gallery\"\nRETURN locations.Address",
        "question": "Find the address of the location named \"UK Gallery\".",
        "answers": [
            [
                "4411 Sabrina Radial Suite 582"
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (locations:`cre_Theme_park.Locations`)\nWHERE locations.Location_Name = \"UK Gallery\"\nRETURN locations.Other_Details",
        "question": "What is the detail of the location UK Gallery?",
        "answers": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (locations:`cre_Theme_park.Locations`)\nWHERE locations.Location_Name = \"UK Gallery\"\nRETURN locations.Other_Details",
        "question": "Return the detail of the location named \"UK Gallery\".",
        "answers": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (photos:`cre_Theme_park.Photos`)\nRETURN count(DISTINCT photos.Name)",
        "question": "How many distinct names are associated with all the photos?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (photos:`cre_Theme_park.Photos`)\nRETURN count(DISTINCT photos.Name)",
        "question": "Count the number of distinct names associated with the photos.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (visits:`cre_Theme_park.Visits`)\nRETURN DISTINCT visits.Visit_Date",
        "question": "What are the distinct visit dates?",
        "answers": [
            [
                "2004-08-21 03:06:14"
            ],
            [
                "2013-08-06 05:35:51"
            ],
            [
                "2013-10-27 09:56:08"
            ],
            [
                "1990-08-15 14:24:10"
            ],
            [
                "1980-11-26 02:08:00"
            ],
            [
                "2017-03-19 08:48:19"
            ],
            [
                "2008-11-09 01:28:01"
            ],
            [
                "1989-08-24 20:26:37"
            ],
            [
                "1993-02-01 15:27:20"
            ],
            [
                "2007-09-17 10:12:45"
            ],
            [
                "1998-05-12 00:50:20"
            ],
            [
                "2010-10-04 01:34:12"
            ],
            [
                "2018-01-09 20:39:52"
            ],
            [
                "1971-12-16 06:41:26"
            ],
            [
                "1998-12-10 02:46:43"
            ],
            [
                "1996-01-08 13:23:41"
            ],
            [
                "2007-09-03 04:30:01"
            ],
            [
                "1974-12-31 23:18:24"
            ],
            [
                "2001-11-13 10:08:28"
            ],
            [
                "1990-11-12 00:54:50"
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (visits:`cre_Theme_park.Visits`)\nRETURN DISTINCT visits.Visit_Date",
        "question": "Find all the distinct visit dates.",
        "answers": [
            [
                "2004-08-21 03:06:14"
            ],
            [
                "2013-08-06 05:35:51"
            ],
            [
                "2013-10-27 09:56:08"
            ],
            [
                "1990-08-15 14:24:10"
            ],
            [
                "1980-11-26 02:08:00"
            ],
            [
                "2017-03-19 08:48:19"
            ],
            [
                "2008-11-09 01:28:01"
            ],
            [
                "1989-08-24 20:26:37"
            ],
            [
                "1993-02-01 15:27:20"
            ],
            [
                "2007-09-17 10:12:45"
            ],
            [
                "1998-05-12 00:50:20"
            ],
            [
                "2010-10-04 01:34:12"
            ],
            [
                "2018-01-09 20:39:52"
            ],
            [
                "1971-12-16 06:41:26"
            ],
            [
                "1998-12-10 02:46:43"
            ],
            [
                "1996-01-08 13:23:41"
            ],
            [
                "2007-09-03 04:30:01"
            ],
            [
                "1974-12-31 23:18:24"
            ],
            [
                "2001-11-13 10:08:28"
            ],
            [
                "1990-11-12 00:54:50"
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (T1:`cre_Theme_park.Hotels`)-[]-(T2:`cre_Theme_park.Ref_Hotel_Star_Ratings`)\nWHERE T1.price_range > 10000\nRETURN T2.star_rating_description",
        "question": "What are the star rating descriptions of the hotels with price above 10000?",
        "answers": [
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (T1:`cre_Theme_park.Hotels`)-[]-(T2:`cre_Theme_park.Ref_Hotel_Star_Ratings`)\nWHERE T1.price_range > 10000\nRETURN T2.star_rating_description",
        "question": "Give me the star rating descriptions of the hotels that cost more than 10000.",
        "answers": [
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (T1:`cre_Theme_park.Museums`)-[]-(T2:`cre_Theme_park.Tourist_Attractions`)\nRETURN T1.Museum_Details,T2.Opening_Hours",
        "question": "What are the details and opening hours of the museums?",
        "answers": [
            [
                "Yale Center for British Art",
                null
            ],
            [
                "The Metropolitan Museum of Art",
                null
            ],
            [
                "MoMA",
                null
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (T1:`cre_Theme_park.Museums`)-[]-(T2:`cre_Theme_park.Tourist_Attractions`)\nRETURN T1.Museum_Details,T2.Opening_Hours",
        "question": "Give me the detail and opening hour for each museum.",
        "answers": [
            [
                "Yale Center for British Art",
                null
            ],
            [
                "The Metropolitan Museum of Art",
                null
            ],
            [
                "MoMA",
                null
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (T1:`cre_Theme_park.Photos`)-[]-(T2:`cre_Theme_park.Tourist_Attractions`)\nWHERE T2.Name = \"film festival\"\nRETURN T1.Name,T1.Description",
        "question": "What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?",
        "answers": [
            [
                "park1",
                null
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (T1:`cre_Theme_park.Photos`)-[]-(T2:`cre_Theme_park.Tourist_Attractions`)\nWHERE T2.Name = \"film festival\"\nRETURN T1.Name,T1.Description",
        "question": "Find the names and descriptions of the photos taken at the tourist attraction called \"film festival\".",
        "answers": [
            [
                "park1",
                null
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (T1:`cre_Theme_park.Royal_Family`)-[]-(T2:`cre_Theme_park.Tourist_Attractions`)\nRETURN T1.Royal_Family_Details,T2.How_to_Get_There",
        "question": "What are the details and ways to get to tourist attractions related to royal family?",
        "answers": [
            [
                null,
                "bus"
            ],
            [
                null,
                "shuttle"
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (T1:`cre_Theme_park.Royal_Family`)-[]-(T2:`cre_Theme_park.Tourist_Attractions`)\nRETURN T1.Royal_Family_Details,T2.How_to_Get_There",
        "question": "Which tourist attractions are related to royal family? Tell me their details and how we can get there.",
        "answers": [
            [
                null,
                "bus"
            ],
            [
                null,
                "shuttle"
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (T1:`cre_Theme_park.Staff`)-[]-(T2:`cre_Theme_park.Tourist_Attractions`)\nWHERE T2.Name = \"US museum\"\nRETURN T1.Name",
        "question": "What is the name of the staff that is in charge of the attraction named \"US museum\"?",
        "answers": [
            [
                "Whitney"
            ],
            [
                "Trinity"
            ],
            [
                "Kaela"
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (T1:`cre_Theme_park.Staff`)-[]-(T2:`cre_Theme_park.Tourist_Attractions`)\nWHERE T2.Name = \"US museum\"\nRETURN T1.Name",
        "question": "Tell me the name of the staff in charge of the attraction called \"US museum\".",
        "answers": [
            [
                "Whitney"
            ],
            [
                "Trinity"
            ],
            [
                "Kaela"
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (hotels:`cre_Theme_park.Hotels`)\nRETURN hotels.hotel_id,hotels.star_rating_code\nORDER BY hotels.price_range ASC",
        "question": "Show the id and star rating of each hotel, ordered by its price from low to high.",
        "answers": [
            [
                144,
                "4"
            ],
            [
                222,
                "5"
            ],
            [
                239,
                "3"
            ],
            [
                331,
                "1"
            ],
            [
                350,
                "1"
            ],
            [
                376,
                "2"
            ],
            [
                431,
                "2"
            ],
            [
                426,
                "5"
            ],
            [
                473,
                "1"
            ],
            [
                555,
                "5"
            ],
            [
                420,
                "5"
            ],
            [
                172,
                "5"
            ],
            [
                264,
                "1"
            ],
            [
                442,
                "2"
            ],
            [
                514,
                "5"
            ],
            [
                123,
                "5"
            ],
            [
                421,
                "3"
            ],
            [
                379,
                "4"
            ],
            [
                373,
                "5"
            ],
            [
                314,
                "5"
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (hotels:`cre_Theme_park.Hotels`)\nRETURN hotels.hotel_id,hotels.star_rating_code\nORDER BY hotels.price_range ASC",
        "question": "Find the id and star rating of each hotel and sort them in increasing order of price.",
        "answers": [
            [
                144,
                "4"
            ],
            [
                222,
                "5"
            ],
            [
                239,
                "3"
            ],
            [
                331,
                "1"
            ],
            [
                350,
                "1"
            ],
            [
                376,
                "2"
            ],
            [
                431,
                "2"
            ],
            [
                426,
                "5"
            ],
            [
                473,
                "1"
            ],
            [
                555,
                "5"
            ],
            [
                420,
                "5"
            ],
            [
                172,
                "5"
            ],
            [
                264,
                "1"
            ],
            [
                442,
                "2"
            ],
            [
                514,
                "5"
            ],
            [
                123,
                "5"
            ],
            [
                421,
                "3"
            ],
            [
                379,
                "4"
            ],
            [
                373,
                "5"
            ],
            [
                314,
                "5"
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (hotels:`cre_Theme_park.Hotels`)\nRETURN hotels.other_hotel_details\nORDER BY hotels.price_range DESC\nLIMIT 3",
        "question": "Show the details of the top 3 most expensive hotels.",
        "answers": [
            [
                null
            ],
            [
                null
            ],
            [
                null
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (hotels:`cre_Theme_park.Hotels`)\nRETURN hotels.other_hotel_details\nORDER BY hotels.price_range DESC\nLIMIT 3",
        "question": "What are the details of the three most expensive hotels?",
        "answers": [
            [
                null
            ],
            [
                null
            ],
            [
                null
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (tourist_attractions:`cre_Theme_park.Tourist_Attractions`)\nRETURN tourist_attractions.How_to_Get_There,count(*)",
        "question": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.",
        "answers": [
            [
                "bus",
                6
            ],
            [
                "walk",
                5
            ],
            [
                "shuttle",
                4
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (tourist_attractions:`cre_Theme_park.Tourist_Attractions`)\nRETURN tourist_attractions.How_to_Get_There,count(*)",
        "question": "List all the possible ways to get to attractions, together with the number of attractions accessible by these methods.",
        "answers": [
            [
                "bus",
                6
            ],
            [
                "walk",
                5
            ],
            [
                "shuttle",
                4
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (T1:`cre_Theme_park.Tourist_Attractions`)-[]-(T2:`cre_Theme_park.Visits`)\nRETURN T1.Name,T2.Tourist_Attraction_ID,count(*)",
        "question": "Show different tourist attractions' names, ids, and the corresponding number of visits.",
        "answers": [
            [
                "history gallery",
                6653,
                1
            ],
            [
                "flying elephant",
                5076,
                1
            ],
            [
                "fun shops",
                9360,
                1
            ],
            [
                "US museum",
                6476,
                4
            ],
            [
                "fun games",
                6523,
                2
            ],
            [
                "exploration trial",
                6852,
                4
            ],
            [
                "parking",
                9919,
                2
            ],
            [
                "jungle cruise",
                8698,
                3
            ],
            [
                "presidents hall",
                8429,
                1
            ],
            [
                "UK gallery",
                2701,
                1
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (T1:`cre_Theme_park.Tourist_Attractions`)-[]-(T2:`cre_Theme_park.Visits`)\nRETURN T1.Name,T2.Tourist_Attraction_ID,count(*)",
        "question": "What are the name, id and the corresponding number of visits for each  tourist attraction?",
        "answers": [
            [
                "history gallery",
                6653,
                1
            ],
            [
                "flying elephant",
                5076,
                1
            ],
            [
                "fun shops",
                9360,
                1
            ],
            [
                "US museum",
                6476,
                4
            ],
            [
                "fun games",
                6523,
                2
            ],
            [
                "exploration trial",
                6852,
                4
            ],
            [
                "parking",
                9919,
                2
            ],
            [
                "jungle cruise",
                8698,
                3
            ],
            [
                "presidents hall",
                8429,
                1
            ],
            [
                "UK gallery",
                2701,
                1
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (T1:`cre_Theme_park.Tourist_Attractions`)-[]-(T2:`cre_Theme_park.Visits`)\nWITH T1.Name AS Name, count(*) AS count, T2.Tourist_Attraction_ID AS Tourist_Attraction_ID\nWHERE count  >= 2\nRETURN Name,Tourist_Attraction_ID",
        "question": "Show the names and ids of tourist attractions that are visited at least two times.",
        "answers": [
            [
                "US museum",
                6476
            ],
            [
                "fun games",
                6523
            ],
            [
                "exploration trial",
                6852
            ],
            [
                "parking",
                9919
            ],
            [
                "jungle cruise",
                8698
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (T1:`cre_Theme_park.Tourist_Attractions`)-[]-(T2:`cre_Theme_park.Visits`)\nWITH T1.Name AS Name, count(*) AS count, T2.Tourist_Attraction_ID AS Tourist_Attraction_ID\nWHERE count  >= 2\nRETURN Name,Tourist_Attraction_ID",
        "question": "Which tourist attractions are visited at least twice? Give me their names and ids.",
        "answers": [
            [
                "US museum",
                6476
            ],
            [
                "fun games",
                6523
            ],
            [
                "exploration trial",
                6852
            ],
            [
                "parking",
                9919
            ],
            [
                "jungle cruise",
                8698
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (T1:`cre_Theme_park.Tourist_Attractions`)-[]-(T2:`cre_Theme_park.Visits`)\nWITH T1.Name AS Name, count(*) AS count, T1.Tourist_Attraction_ID AS Tourist_Attraction_ID\nWHERE count  <= 1\nRETURN Name,Tourist_Attraction_ID",
        "question": "Show the names and ids of tourist attractions that are visited at most once.",
        "answers": [
            [
                "history gallery",
                6653
            ],
            [
                "flying elephant",
                5076
            ],
            [
                "fun shops",
                9360
            ],
            [
                "presidents hall",
                8429
            ],
            [
                "UK gallery",
                2701
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (T1:`cre_Theme_park.Tourist_Attractions`)-[]-(T2:`cre_Theme_park.Visits`)\nWITH T1.Name AS Name, count(*) AS count, T1.Tourist_Attraction_ID AS Tourist_Attraction_ID\nWHERE count  <= 1\nRETURN Name,Tourist_Attraction_ID",
        "question": "What are the names and ids of the tourist attractions that are visited at most once?",
        "answers": [
            [
                "history gallery",
                6653
            ],
            [
                "flying elephant",
                5076
            ],
            [
                "fun shops",
                9360
            ],
            [
                "presidents hall",
                8429
            ],
            [
                "UK gallery",
                2701
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (T1:`cre_Theme_park.Tourist_Attractions`)-[T2:`cre_Theme_park.Tourist_Attraction_Features`]-(T3:`cre_Theme_park.Features`)\nWHERE T3.Feature_Details = 'park'\nRETURN T1.Name  AS name \nUNION\nMATCH (T1:`cre_Theme_park.Tourist_Attractions`)-[T2:`cre_Theme_park.Tourist_Attraction_Features`]-(T3:`cre_Theme_park.Features`)\nWHERE T3.Feature_Details = 'shopping'\nRETURN T1.Name  AS name",
        "question": "What are the names of the tourist attractions that have parking or shopping as their feature details?",
        "answers": [
            [
                "fun games"
            ],
            [
                "flying elephant"
            ],
            [
                "jungle cruise"
            ],
            [
                "exploration trial"
            ],
            [
                "impressions de France"
            ],
            [
                "cafe"
            ],
            [
                "US museum"
            ],
            [
                "presidents hall"
            ],
            [
                "parking"
            ]
        ]
    },
    {
        "db_id": "cre_Theme_park",
        "query": "MATCH (T1:`cre_Theme_park.Tourist_Attractions`)-[T2:`cre_Theme_park.Tourist_Attraction_Features`]-(T3:`cre_Theme_park.Features`)\nWHERE T3.Feature_Details = 'park'\nRETURN T1.Name  AS name \nUNION\nMATCH (T1:`cre_Theme_park.Tourist_Attractions`)-[T2:`cre_Theme_park.Tourist_Attraction_Features`]-(T3:`cre_Theme_park.Features`)\nWHERE T3.Feature_Details = 'shopping'\nRETURN T1.Name  AS name",
        "question": "Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?",
        "answers": [
            [
                "fun games"
            ],
            [
                "flying elephant"
            ],
            [
                "jungle cruise"
            ],
            [
                "exploration trial"
            ],
            [
                "impressions de France"
            ],
            [
                "cafe"
            ],
            [
                "US museum"
            ],
            [
                "presidents hall"
            ],
            [
                "parking"
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nRETURN count(*)",
        "question": "How many video games exist?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nRETURN count(*)",
        "question": "How many video games do you have?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nRETURN count(DISTINCT video_games.GType)",
        "question": "How many video game types exist?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nRETURN count(DISTINCT video_games.GType)",
        "question": "What is the count of different game types?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nRETURN DISTINCT video_games.GType",
        "question": "Show all video game types.",
        "answers": [
            [
                "Collectible card game"
            ],
            [
                "Walking Simulator"
            ],
            [
                "Role-playing game"
            ],
            [
                "Grand strategy"
            ],
            [
                "Frist-person shooter"
            ],
            [
                "Massively multiplayer online game"
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nRETURN DISTINCT video_games.GType",
        "question": "What are the different types of video games?",
        "answers": [
            [
                "Collectible card game"
            ],
            [
                "Walking Simulator"
            ],
            [
                "Role-playing game"
            ],
            [
                "Grand strategy"
            ],
            [
                "Frist-person shooter"
            ],
            [
                "Massively multiplayer online game"
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nRETURN video_games.GName,video_games.GType\nORDER BY video_games.GName",
        "question": "Show all video games and their types in the order of their names.",
        "answers": [
            [
                "Call of Destiny",
                "Frist-person shooter"
            ],
            [
                "Europe is the Universe",
                "Grand strategy"
            ],
            [
                "Grand Term Assignment",
                "Role-playing game"
            ],
            [
                "RNG Stone",
                "Collectible card game"
            ],
            [
                "The Vanishing of Eric Calder",
                "Walking Simulator"
            ],
            [
                "Works of Widenius",
                "Massively multiplayer online game"
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nRETURN video_games.GName,video_games.GType\nORDER BY video_games.GName",
        "question": "What are the names of all the video games and their types in alphabetical order?",
        "answers": [
            [
                "Call of Destiny",
                "Frist-person shooter"
            ],
            [
                "Europe is the Universe",
                "Grand strategy"
            ],
            [
                "Grand Term Assignment",
                "Role-playing game"
            ],
            [
                "RNG Stone",
                "Collectible card game"
            ],
            [
                "The Vanishing of Eric Calder",
                "Walking Simulator"
            ],
            [
                "Works of Widenius",
                "Massively multiplayer online game"
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nWHERE video_games.GType = \"Collectible card game\"\nRETURN video_games.GName",
        "question": "Show all video games with type Collectible card game.",
        "answers": [
            [
                "RNG Stone"
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nWHERE video_games.GType = \"Collectible card game\"\nRETURN video_games.GName",
        "question": "What are the names of all video games that are collectible cards?",
        "answers": [
            [
                "RNG Stone"
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nWHERE video_games.GName = \"Call of Destiny\"\nRETURN video_games.GType",
        "question": "What is the type of video game Call of Destiny.",
        "answers": [
            [
                "Frist-person shooter"
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nWHERE video_games.GName = \"Call of Destiny\"\nRETURN video_games.GType",
        "question": "What type of game is Call of Destiny?",
        "answers": [
            [
                "Frist-person shooter"
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nWHERE video_games.GType = \"Massively multiplayer online game\"\nRETURN count(*)",
        "question": "How many video games have type Massively multiplayer online game?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nWHERE video_games.GType = \"Massively multiplayer online game\"\nRETURN count(*)",
        "question": "Count the number of video games with Massively multiplayer online game type .",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nRETURN video_games.GType,count(*)",
        "question": "Show all video game types and the number of video games in each type.",
        "answers": [
            [
                "Collectible card game",
                1
            ],
            [
                "Walking Simulator",
                1
            ],
            [
                "Role-playing game",
                1
            ],
            [
                "Grand strategy",
                1
            ],
            [
                "Frist-person shooter",
                1
            ],
            [
                "Massively multiplayer online game",
                1
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nRETURN video_games.GType,count(*)",
        "question": "What are the types of video games and how many are in each type?",
        "answers": [
            [
                "Collectible card game",
                1
            ],
            [
                "Walking Simulator",
                1
            ],
            [
                "Role-playing game",
                1
            ],
            [
                "Grand strategy",
                1
            ],
            [
                "Frist-person shooter",
                1
            ],
            [
                "Massively multiplayer online game",
                1
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nRETURN video_games.GType\nORDER BY video_games.GType DESC\nLIMIT 1",
        "question": "Which game type has most number of games?",
        "answers": [
            [
                "Walking Simulator"
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nRETURN video_games.GType\nORDER BY video_games.GType DESC\nLIMIT 1",
        "question": "What type has the most games?",
        "answers": [
            [
                "Walking Simulator"
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nRETURN video_games.GType\nORDER BY video_games.GType\nLIMIT 1",
        "question": "Which game type has least number of games?",
        "answers": [
            [
                "Collectible card game"
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nRETURN video_games.GType\nORDER BY video_games.GType\nLIMIT 1",
        "question": "What is the type with the fewest games?",
        "answers": [
            [
                "Collectible card game"
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (student:`game_1.Student`)\nWHERE student.Advisor = 1121\nRETURN student.StuID",
        "question": "Show ids for all students who have advisor 1121.",
        "answers": [
            [
                1001
            ],
            [
                1005
            ],
            [
                1018
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (student:`game_1.Student`)\nWHERE student.Advisor = 1121\nRETURN student.StuID",
        "question": "What are the ids of all students who have advisor number 1121?",
        "answers": [
            [
                1001
            ],
            [
                1005
            ],
            [
                1018
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (student:`game_1.Student`)\nWHERE student.Major = 600\nRETURN student.Fname",
        "question": "Show first name for all students with major 600.",
        "answers": [
            [
                "Linda"
            ],
            [
                "Tracy"
            ],
            [
                "Shiela"
            ],
            [
                "Dinesh"
            ],
            [
                "Paul"
            ],
            [
                "Andy"
            ],
            [
                "Lisa"
            ],
            [
                "Jandy"
            ],
            [
                "Eric"
            ],
            [
                "Derek"
            ],
            [
                "David"
            ],
            [
                "Steven"
            ],
            [
                "Charles"
            ],
            [
                "Susan"
            ],
            [
                "Mark"
            ],
            [
                "Bruce"
            ],
            [
                "Michael"
            ],
            [
                "Arthur"
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (student:`game_1.Student`)\nWHERE student.Major = 600\nRETURN student.Fname",
        "question": "What are the first names for all students who are from the major numbered 600?",
        "answers": [
            [
                "Linda"
            ],
            [
                "Tracy"
            ],
            [
                "Shiela"
            ],
            [
                "Dinesh"
            ],
            [
                "Paul"
            ],
            [
                "Andy"
            ],
            [
                "Lisa"
            ],
            [
                "Jandy"
            ],
            [
                "Eric"
            ],
            [
                "Derek"
            ],
            [
                "David"
            ],
            [
                "Steven"
            ],
            [
                "Charles"
            ],
            [
                "Susan"
            ],
            [
                "Mark"
            ],
            [
                "Bruce"
            ],
            [
                "Michael"
            ],
            [
                "Arthur"
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (student:`game_1.Student`)\nWITH student.Advisor AS Advisor, count(*) AS count\nWHERE count  >= 2\nRETURN Advisor",
        "question": "Show all advisors who have at least two students.",
        "answers": [
            [
                1121
            ],
            [
                1148
            ],
            [
                2192
            ],
            [
                7271
            ],
            [
                8722
            ],
            [
                7134
            ],
            [
                2311
            ],
            [
                8772
            ],
            [
                5718
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (student:`game_1.Student`)\nWITH student.Advisor AS Advisor, count(*) AS count\nWHERE count  >= 2\nRETURN Advisor",
        "question": "What are the advisors",
        "answers": [
            [
                1121
            ],
            [
                1148
            ],
            [
                2192
            ],
            [
                7271
            ],
            [
                8722
            ],
            [
                7134
            ],
            [
                2311
            ],
            [
                8772
            ],
            [
                5718
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (sportsinfo:`game_1.SportsInfo`)\nRETURN count(DISTINCT sportsinfo.SportName)",
        "question": "How many sports do we have?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (sportsinfo:`game_1.SportsInfo`)\nRETURN count(DISTINCT sportsinfo.SportName)",
        "question": "How many different types of sports do we offer?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (sportsinfo:`game_1.SportsInfo`)\nRETURN count(DISTINCT sportsinfo.StuID)",
        "question": "How many students play sports?",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (sportsinfo:`game_1.SportsInfo`)\nRETURN count(DISTINCT sportsinfo.StuID)",
        "question": "How many different students are involved in sports?",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (sportsinfo:`game_1.SportsInfo`)\nWHERE sportsinfo.OnScholarship = 'Y'\nRETURN sportsinfo.StuID",
        "question": "List ids for all student who are on scholarship.",
        "answers": [
            [
                1002
            ],
            [
                1003
            ],
            [
                1015
            ],
            [
                1019
            ],
            [
                1023
            ],
            [
                1023
            ],
            [
                1026
            ],
            [
                1033
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (sportsinfo:`game_1.SportsInfo`)\nWHERE sportsinfo.OnScholarship = 'Y'\nRETURN sportsinfo.StuID",
        "question": "What are the ids for all sporty students who are on scholarship?",
        "answers": [
            [
                1002
            ],
            [
                1003
            ],
            [
                1015
            ],
            [
                1019
            ],
            [
                1023
            ],
            [
                1023
            ],
            [
                1026
            ],
            [
                1033
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (T1:`game_1.SportsInfo`)-[]-(T2:`game_1.Student`)\nWHERE T1.OnScholarship = 'Y'\nRETURN T2.LName",
        "question": "Show last names for all student who are on scholarship.",
        "answers": [
            [
                "Kim"
            ],
            [
                "Jones"
            ],
            [
                "Lee"
            ],
            [
                "Pang"
            ],
            [
                "Shieber"
            ],
            [
                "Shieber"
            ],
            [
                "Pang"
            ],
            [
                "Simms"
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (T1:`game_1.SportsInfo`)-[]-(T2:`game_1.Student`)\nWHERE T1.OnScholarship = 'Y'\nRETURN T2.LName",
        "question": "What are the last names for all scholarship students?",
        "answers": [
            [
                "Kim"
            ],
            [
                "Jones"
            ],
            [
                "Lee"
            ],
            [
                "Pang"
            ],
            [
                "Shieber"
            ],
            [
                "Shieber"
            ],
            [
                "Pang"
            ],
            [
                "Simms"
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (sportsinfo:`game_1.SportsInfo`)\nRETURN sportsinfo.SportName,count(*)",
        "question": "Show all sport name and the number of students.",
        "answers": [
            [
                "Athletics",
                1
            ],
            [
                "Football",
                2
            ],
            [
                "Lacrosse",
                3
            ],
            [
                "Swimming",
                1
            ],
            [
                "Tennis",
                2
            ],
            [
                "Baseball",
                1
            ],
            [
                "Basketball",
                1
            ],
            [
                "Cricket",
                1
            ],
            [
                "Soccer",
                1
            ],
            [
                "Curling",
                1
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH (sportsinfo:`game_1.SportsInfo`)\nRETURN sportsinfo.SportName,count(*)",
        "question": "How many students play each sport?",
        "answers": [
            [
                "Athletics",
                1
            ],
            [
                "Football",
                2
            ],
            [
                "Lacrosse",
                3
            ],
            [
                "Swimming",
                1
            ],
            [
                "Tennis",
                2
            ],
            [
                "Baseball",
                1
            ],
            [
                "Basketball",
                1
            ],
            [
                "Cricket",
                1
            ],
            [
                "Soccer",
                1
            ],
            [
                "Curling",
                1
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH ()-[plays_games:`game_1.Plays_Games`]-()\nRETURN count(DISTINCT plays_games.StuID)",
        "question": "How many students play video games?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "game_1",
        "query": "MATCH ()-[plays_games:`game_1.Plays_Games`]-()\nRETURN count(DISTINCT plays_games.StuID)",
        "question": "How many different students play games?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (customers:`customers_and_addresses.Customers`)\nRETURN customers.customer_name",
        "question": "Find the name of all customers.",
        "answers": [
            [
                "Dr. Julia Wuckert MD"
            ],
            [
                "Tillman Ernser"
            ],
            [
                "Rodrick Heaney"
            ],
            [
                "Prof. Alexzander Hamill"
            ],
            [
                "Prof. Reyes Berge II"
            ],
            [
                "Maudie Kertzmann"
            ],
            [
                "Mozell Morissette"
            ],
            [
                "Eunice Morar"
            ],
            [
                "Devin Mills"
            ],
            [
                "Kitty Padberg III"
            ],
            [
                "Salvatore Tillman"
            ],
            [
                "Clifford Pagac"
            ],
            [
                "Miss Aliyah Witting"
            ],
            [
                "Alexane Kilback"
            ],
            [
                "Prof. Ibrahim Bashirian"
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (customers:`customers_and_addresses.Customers`)\nRETURN customers.customer_name",
        "question": "What are the names of all the customers?",
        "answers": [
            [
                "Dr. Julia Wuckert MD"
            ],
            [
                "Tillman Ernser"
            ],
            [
                "Rodrick Heaney"
            ],
            [
                "Prof. Alexzander Hamill"
            ],
            [
                "Prof. Reyes Berge II"
            ],
            [
                "Maudie Kertzmann"
            ],
            [
                "Mozell Morissette"
            ],
            [
                "Eunice Morar"
            ],
            [
                "Devin Mills"
            ],
            [
                "Kitty Padberg III"
            ],
            [
                "Salvatore Tillman"
            ],
            [
                "Clifford Pagac"
            ],
            [
                "Miss Aliyah Witting"
            ],
            [
                "Alexane Kilback"
            ],
            [
                "Prof. Ibrahim Bashirian"
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (customers:`customers_and_addresses.Customers`)\nRETURN count(*)",
        "question": "How many customers are there?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (customers:`customers_and_addresses.Customers`)\nRETURN count(*)",
        "question": "Return the total number of distinct customers.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (customers:`customers_and_addresses.Customers`)\nWHERE 10<=customers.customer_id<=20\nRETURN customers.date_became_customer",
        "question": "Find the \"date became customers\" of the customers whose ID is between 10 and 20.",
        "answers": [
            [
                "2018-03-22 18:09:09"
            ],
            [
                "2018-03-04 00:17:48"
            ],
            [
                "2018-02-24 10:24:23"
            ],
            [
                "2018-03-05 07:19:45"
            ],
            [
                "2018-03-08 01:17:31"
            ],
            [
                "2018-03-15 02:54:27"
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (customers:`customers_and_addresses.Customers`)\nWHERE 10<=customers.customer_id<=20\nRETURN customers.date_became_customer",
        "question": "What are the dates when customers with ids between 10 and 20 became customers?",
        "answers": [
            [
                "2018-03-22 18:09:09"
            ],
            [
                "2018-03-04 00:17:48"
            ],
            [
                "2018-02-24 10:24:23"
            ],
            [
                "2018-03-05 07:19:45"
            ],
            [
                "2018-03-08 01:17:31"
            ],
            [
                "2018-03-15 02:54:27"
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (customers:`customers_and_addresses.Customers`)\nRETURN DISTINCT customers.payment_method",
        "question": "What are all the payment methods?",
        "answers": [
            [
                "Cash"
            ],
            [
                "Cheque"
            ],
            [
                "Credit Card"
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (customers:`customers_and_addresses.Customers`)\nRETURN DISTINCT customers.payment_method",
        "question": "Return all the distinct payment methods used by customers.",
        "answers": [
            [
                "Cash"
            ],
            [
                "Cheque"
            ],
            [
                "Credit Card"
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (products:`customers_and_addresses.Products`)\nRETURN DISTINCT products.product_details",
        "question": "What are the details of all products?",
        "answers": [
            [
                "Americano"
            ],
            [
                "Dove Chocolate"
            ],
            [
                "Latte"
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (products:`customers_and_addresses.Products`)\nRETURN DISTINCT products.product_details",
        "question": "Return the the details of all products.",
        "answers": [
            [
                "Americano"
            ],
            [
                "Dove Chocolate"
            ],
            [
                "Latte"
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (t1:`customers_and_addresses.Customers`)-[t2:`customers_and_addresses.Customer_Addresses`]-(t3:`customers_and_addresses.Addresses`)\nWHERE t1.customer_name = \"Maudie Kertzmann\"\nRETURN t3.address_content",
        "question": "What is the address content of the customer named \"Maudie Kertzmann\"?",
        "answers": [
            [
                "59540 Grover Wells Apt. 814"
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (t1:`customers_and_addresses.Customers`)-[t2:`customers_and_addresses.Customer_Addresses`]-(t3:`customers_and_addresses.Addresses`)\nWHERE t1.customer_name = \"Maudie Kertzmann\"\nRETURN t3.address_content",
        "question": "Return the address content for the customer whose name is \"Maudie Kertzmann\".",
        "answers": [
            [
                "59540 Grover Wells Apt. 814"
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (t1:`customers_and_addresses.Customers`)-[t2:`customers_and_addresses.Customer_Addresses`]-(t3:`customers_and_addresses.Addresses`)\nWHERE t3.city = \"Lake Geovannyton\"\nRETURN count(*)",
        "question": "How many customers are living in city \"Lake Geovannyton\"?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (t1:`customers_and_addresses.Customers`)-[t2:`customers_and_addresses.Customer_Addresses`]-(t3:`customers_and_addresses.Addresses`)\nWHERE t3.city = \"Lake Geovannyton\"\nRETURN count(*)",
        "question": "Find the number of customers who live in the city called Lake Geovannyton.",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (t1:`customers_and_addresses.Customers`)-[t2:`customers_and_addresses.Customer_Addresses`]-(t3:`customers_and_addresses.Addresses`)\nWITH count(t3.city) AS cnt, t3\nRETURN t3.city\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Which city has the most customers living in?",
        "answers": [
            [
                "Lake Geovannyton"
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (t1:`customers_and_addresses.Customers`)-[t2:`customers_and_addresses.Customer_Addresses`]-(t3:`customers_and_addresses.Addresses`)\nWITH count(t3.city) AS cnt, t3\nRETURN t3.city\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Find the city where the most customers live.",
        "answers": [
            [
                "Lake Geovannyton"
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (addresses:`customers_and_addresses.Addresses`)\nRETURN DISTINCT addresses.city",
        "question": "Retrieve the list of all cities.",
        "answers": [
            [
                "Lucasville"
            ],
            [
                "New Sabryna"
            ],
            [
                "Reingertown"
            ],
            [
                "Gleasonmouth"
            ],
            [
                "Stantonville"
            ],
            [
                "South Meghanview"
            ],
            [
                "Lake Walterton"
            ],
            [
                "South Bellaland"
            ],
            [
                "Felicityfort"
            ],
            [
                "East Julianaside"
            ],
            [
                "Lake Geovannyton"
            ],
            [
                "New Terrillport"
            ],
            [
                "Port Lilyan"
            ],
            [
                "Lake Ryann"
            ],
            [
                "East Pascale"
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (addresses:`customers_and_addresses.Addresses`)\nRETURN DISTINCT addresses.city",
        "question": "List all the distinct cities",
        "answers": [
            [
                "Lucasville"
            ],
            [
                "New Sabryna"
            ],
            [
                "Reingertown"
            ],
            [
                "Gleasonmouth"
            ],
            [
                "Stantonville"
            ],
            [
                "South Meghanview"
            ],
            [
                "Lake Walterton"
            ],
            [
                "South Bellaland"
            ],
            [
                "Felicityfort"
            ],
            [
                "East Julianaside"
            ],
            [
                "Lake Geovannyton"
            ],
            [
                "New Terrillport"
            ],
            [
                "Port Lilyan"
            ],
            [
                "Lake Ryann"
            ],
            [
                "East Pascale"
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (addresses:`customers_and_addresses.Addresses`)\nWHERE addresses.zip_postcode = '255'\nRETURN addresses.city",
        "question": "Find the city with post code 255.",
        "answers": [
            [
                "Reingertown"
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (addresses:`customers_and_addresses.Addresses`)\nWHERE addresses.zip_postcode = '255'\nRETURN addresses.city",
        "question": "Which city is post code 255 located in?",
        "answers": [
            [
                "Reingertown"
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (addresses:`customers_and_addresses.Addresses`)\nWITH count(addresses.address_id) AS count, addresses.country AS country\nWHERE count > 4\nRETURN country",
        "question": "List the countries having more than 4 addresses listed.",
        "answers": [
            [
                "USA"
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (addresses:`customers_and_addresses.Addresses`)\nWITH count(addresses.address_id) AS count, addresses.country AS country\nWHERE count > 4\nRETURN country",
        "question": "For which countries are there more than four distinct addresses listed?",
        "answers": [
            [
                "USA"
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (customer_contact_channels:`customers_and_addresses.Customer_Contact_Channels`)\nWITH count(customer_contact_channels.customer_id) AS count, customer_contact_channels.channel_code AS channel_code\nWHERE count < 5\nRETURN channel_code",
        "question": "List all the contact channel codes that were used less than 5 times.",
        "answers": [
            [
                "Email"
            ],
            [
                "Cell"
            ],
            [
                "Fax"
            ],
            [
                "Mobile"
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (customer_contact_channels:`customers_and_addresses.Customer_Contact_Channels`)\nWITH count(customer_contact_channels.customer_id) AS count, customer_contact_channels.channel_code AS channel_code\nWHERE count < 5\nRETURN channel_code",
        "question": "Which contact channel codes were used less than 5 times?",
        "answers": [
            [
                "Email"
            ],
            [
                "Cell"
            ],
            [
                "Fax"
            ],
            [
                "Mobile"
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (customer_orders:`customers_and_addresses.Customer_Orders`)\nWHERE customer_orders.order_details = \"Second time\"\nRETURN count(*)",
        "question": "How many orders have detail \"Second time\"?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (customer_orders:`customers_and_addresses.Customer_Orders`)\nWHERE customer_orders.order_details = \"Second time\"\nRETURN count(*)",
        "question": "Tell me the number of orders with \"Second time\" as order detail.",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (t1:`customers_and_addresses.Customers`)-[]-(t2:`customers_and_addresses.Customer_Orders`)\nRETURN t1.customer_name\nORDER BY t2.order_date DESC\nLIMIT 1",
        "question": "Who made the latest order?",
        "answers": [
            [
                "Eunice Morar"
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (t1:`customers_and_addresses.Customers`)-[]-(t2:`customers_and_addresses.Customer_Orders`)\nRETURN t1.customer_name\nORDER BY t2.order_date DESC\nLIMIT 1",
        "question": "Find the name of the customer who made an order most recently.",
        "answers": [
            [
                "Eunice Morar"
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (t2:`customers_and_addresses.Products`)-[t1:`customers_and_addresses.Order_Items`]-()\nWITH count(t1.product_id) AS cnt, t2\nRETURN t2.product_details\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Which product has been ordered most number of times?",
        "answers": [
            [
                "Dove Chocolate"
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (t2:`customers_and_addresses.Products`)-[t1:`customers_and_addresses.Order_Items`]-()\nWITH count(t1.product_id) AS cnt, t2\nRETURN t2.product_details\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the most frequently ordered product? Tell me the detail of the product",
        "answers": [
            [
                "Dove Chocolate"
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (customers:`customers_and_addresses.Customers`)\nWHERE customers.payment_method <> 'Cash'\nRETURN customers.customer_name",
        "question": "Find the name of customers who did not pay with Cash.",
        "answers": [
            [
                "Tillman Ernser"
            ],
            [
                "Rodrick Heaney"
            ],
            [
                "Prof. Alexzander Hamill"
            ],
            [
                "Prof. Reyes Berge II"
            ],
            [
                "Mozell Morissette"
            ],
            [
                "Eunice Morar"
            ],
            [
                "Devin Mills"
            ],
            [
                "Salvatore Tillman"
            ],
            [
                "Clifford Pagac"
            ],
            [
                "Miss Aliyah Witting"
            ],
            [
                "Alexane Kilback"
            ]
        ]
    },
    {
        "db_id": "customers_and_addresses",
        "query": "MATCH (customers:`customers_and_addresses.Customers`)\nWHERE customers.payment_method <> 'Cash'\nRETURN customers.customer_name",
        "question": "What is the name of customers who do not use Cash as payment method.",
        "answers": [
            [
                "Tillman Ernser"
            ],
            [
                "Rodrick Heaney"
            ],
            [
                "Prof. Alexzander Hamill"
            ],
            [
                "Prof. Reyes Berge II"
            ],
            [
                "Mozell Morissette"
            ],
            [
                "Eunice Morar"
            ],
            [
                "Devin Mills"
            ],
            [
                "Salvatore Tillman"
            ],
            [
                "Clifford Pagac"
            ],
            [
                "Miss Aliyah Witting"
            ],
            [
                "Alexane Kilback"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (artist:`music_4.artist`)\nRETURN count(*)",
        "question": "How many artists are there?",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (artist:`music_4.artist`)\nRETURN count(*)",
        "question": "Count the number of artists.",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (artist:`music_4.artist`)\nRETURN artist.Age",
        "question": "List the age of all music artists.",
        "answers": [
            [
                34
            ],
            [
                35
            ],
            [
                22
            ],
            [
                18
            ],
            [
                35
            ],
            [
                27
            ],
            [
                49
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (artist:`music_4.artist`)\nRETURN artist.Age",
        "question": "What are the ages of all music artists?",
        "answers": [
            [
                34
            ],
            [
                35
            ],
            [
                22
            ],
            [
                18
            ],
            [
                35
            ],
            [
                27
            ],
            [
                49
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (artist:`music_4.artist`)\nRETURN avg(artist.Age)",
        "question": "What is the average age of all artists?",
        "answers": [
            [
                31.428571428571427
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (artist:`music_4.artist`)\nRETURN avg(artist.Age)",
        "question": "Return the average age across all artists.",
        "answers": [
            [
                31.428571428571427
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (artist:`music_4.artist`)\nWHERE artist.Artist = 'Triumfall'\nRETURN artist.Famous_Title",
        "question": "What are the famous titles of the artist \"Triumfall\"?",
        "answers": [
            [
                "Antithesis of All Flesh"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (artist:`music_4.artist`)\nWHERE artist.Artist = 'Triumfall'\nRETURN artist.Famous_Title",
        "question": "Return the famous titles of the artist called \"Triumfall\".",
        "answers": [
            [
                "Antithesis of All Flesh"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (artist:`music_4.artist`)\nRETURN DISTINCT artist.Famous_Release_date",
        "question": "What are the distinct Famous release dates?",
        "answers": [
            [
                "November 2007"
            ],
            [
                "January 21, 2008"
            ],
            [
                "2009"
            ],
            [
                "June 23, 2008"
            ],
            [
                "June 15, 2009"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (artist:`music_4.artist`)\nRETURN DISTINCT artist.Famous_Release_date",
        "question": "Give the distinct famous release dates for all artists.",
        "answers": [
            [
                "November 2007"
            ],
            [
                "January 21, 2008"
            ],
            [
                "2009"
            ],
            [
                "June 23, 2008"
            ],
            [
                "June 15, 2009"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nRETURN music_festival.Date_of_ceremony,music_festival.Result",
        "question": "Return the dates of ceremony and the results of all music festivals",
        "answers": [
            [
                "18 February 2011",
                "Nominated"
            ],
            [
                "18 February 2011",
                "Nominated"
            ],
            [
                "18 February 2011",
                "Awarded"
            ],
            [
                "18 February 2011",
                "Awarded"
            ],
            [
                "18 February 2011",
                "Nominated"
            ],
            [
                "18 February 2011",
                "Nominated"
            ],
            [
                "18 February 2011",
                "Nominated"
            ],
            [
                "18 February 2011",
                "Nominated"
            ],
            [
                "18 February 2011",
                "Awarded"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nRETURN music_festival.Date_of_ceremony,music_festival.Result",
        "question": "What are the dates of ceremony and results for each music festival?",
        "answers": [
            [
                "18 February 2011",
                "Nominated"
            ],
            [
                "18 February 2011",
                "Nominated"
            ],
            [
                "18 February 2011",
                "Awarded"
            ],
            [
                "18 February 2011",
                "Awarded"
            ],
            [
                "18 February 2011",
                "Nominated"
            ],
            [
                "18 February 2011",
                "Nominated"
            ],
            [
                "18 February 2011",
                "Nominated"
            ],
            [
                "18 February 2011",
                "Nominated"
            ],
            [
                "18 February 2011",
                "Awarded"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nWHERE music_festival.Result = 'Awarded'\nRETURN music_festival.Category",
        "question": "What are the category of music festivals with result \"Awarded\"?",
        "answers": [
            [
                "Best Song"
            ],
            [
                "Best Song"
            ],
            [
                "Best Sound Song"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nWHERE music_festival.Result = 'Awarded'\nRETURN music_festival.Category",
        "question": "Return the categories of music festivals that have the result \"Awarded\".",
        "answers": [
            [
                "Best Song"
            ],
            [
                "Best Song"
            ],
            [
                "Best Sound Song"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (volume:`music_4.volume`)\nRETURN max(volume.Weeks_on_Top),min(volume.Weeks_on_Top)",
        "question": "What are the maximum and minimum week on top of all volumes?",
        "answers": [
            [
                3.0,
                1.0
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (volume:`music_4.volume`)\nRETURN max(volume.Weeks_on_Top),min(volume.Weeks_on_Top)",
        "question": "Give the maximum and minimum weeks on top across all volumes.",
        "answers": [
            [
                3.0,
                1.0
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (volume:`music_4.volume`)\nWHERE volume.Weeks_on_Top > 1\nRETURN volume.Song",
        "question": "What are the songs in volumes with more than 1 week on top?",
        "answers": [
            [
                " The Way"
            ],
            [
                " Touch Me (I Want Your Body) "
            ],
            [
                " (I Just) Died in Your Arms "
            ],
            [
                " Always "
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (volume:`music_4.volume`)\nWHERE volume.Weeks_on_Top > 1\nRETURN volume.Song",
        "question": "Give the songs included in volumes that have more than 1 week on top.",
        "answers": [
            [
                " The Way"
            ],
            [
                " Touch Me (I Want Your Body) "
            ],
            [
                " (I Just) Died in Your Arms "
            ],
            [
                " Always "
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (volume:`music_4.volume`)\nRETURN volume.Song\nORDER BY volume.Song",
        "question": "Please list all songs in volumes in ascending alphabetical order.",
        "answers": [
            [
                " (I Just) Died in Your Arms "
            ],
            [
                " Always "
            ],
            [
                " Everybody Have Fun Tonight "
            ],
            [
                " La Isla Bonita "
            ],
            [
                " The Way"
            ],
            [
                " Touch Me (I Want Your Body) "
            ],
            [
                " Walk Like an Egyptian "
            ],
            [
                " With or Without You "
            ],
            [
                "Head to Toe "
            ],
            [
                "Looking for a New Love"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (volume:`music_4.volume`)\nRETURN volume.Song\nORDER BY volume.Song",
        "question": "What are the the songs in volumes, listed in ascending order?",
        "answers": [
            [
                " (I Just) Died in Your Arms "
            ],
            [
                " Always "
            ],
            [
                " Everybody Have Fun Tonight "
            ],
            [
                " La Isla Bonita "
            ],
            [
                " The Way"
            ],
            [
                " Touch Me (I Want Your Body) "
            ],
            [
                " Walk Like an Egyptian "
            ],
            [
                " With or Without You "
            ],
            [
                "Head to Toe "
            ],
            [
                "Looking for a New Love"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (volume:`music_4.volume`)\nRETURN count(DISTINCT volume.Artist_ID)",
        "question": "How many distinct artists do the volumes associate to?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (volume:`music_4.volume`)\nRETURN count(DISTINCT volume.Artist_ID)",
        "question": "Count the number of distinct artists who have volumes.",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (T1:`music_4.music_festival`)-[]-(T2:`music_4.volume`)\nWHERE T2.Weeks_on_Top > 2\nRETURN T1.Date_of_ceremony",
        "question": "Please show the date of ceremony of the volumes that last more than 2 weeks on top.",
        "answers": [
            [
                "18 February 2011"
            ],
            [
                "18 February 2011"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (T1:`music_4.music_festival`)-[]-(T2:`music_4.volume`)\nWHERE T2.Weeks_on_Top > 2\nRETURN T1.Date_of_ceremony",
        "question": "What are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top?",
        "answers": [
            [
                "18 February 2011"
            ],
            [
                "18 February 2011"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (T1:`music_4.music_festival`)-[]-(T2:`music_4.volume`)\nWHERE T1.Result = 'Nominated'\nRETURN T2.Song",
        "question": "Please show the songs that have result \"nominated\" at music festivals.",
        "answers": [
            [
                " The Way"
            ],
            [
                " Everybody Have Fun Tonight "
            ],
            [
                " With or Without You "
            ],
            [
                " (I Just) Died in Your Arms "
            ],
            [
                " La Isla Bonita "
            ],
            [
                "Looking for a New Love"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (T1:`music_4.music_festival`)-[]-(T2:`music_4.volume`)\nWHERE T1.Result = 'Nominated'\nRETURN T2.Song",
        "question": "What are the songs in volumes that have resulted in a nomination at music festivals?",
        "answers": [
            [
                " The Way"
            ],
            [
                " Everybody Have Fun Tonight "
            ],
            [
                " With or Without You "
            ],
            [
                " (I Just) Died in Your Arms "
            ],
            [
                " La Isla Bonita "
            ],
            [
                "Looking for a New Love"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (T1:`music_4.artist`)-[]-(T2:`music_4.volume`)\nWHERE T1.Artist = 'Gorgoroth'\nRETURN T2.Issue_Date",
        "question": "What are the issue dates of volumes associated with the artist \"Gorgoroth\"?",
        "answers": [
            [
                "24 January"
            ],
            [
                "9 May"
            ],
            [
                "16 May - 30 May"
            ],
            [
                "27 December 1986 - 10 January"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (T1:`music_4.artist`)-[]-(T2:`music_4.volume`)\nWHERE T1.Artist = 'Gorgoroth'\nRETURN T2.Issue_Date",
        "question": "Return the issue dates of volumes that are by the artist named Gorgoroth.",
        "answers": [
            [
                "24 January"
            ],
            [
                "9 May"
            ],
            [
                "16 May - 30 May"
            ],
            [
                "27 December 1986 - 10 January"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (T1:`music_4.artist`)-[]-(T2:`music_4.volume`)\nWHERE T1.Age >= 32\nRETURN T2.Song",
        "question": "What are the songs in volumes associated with the artist aged 32 or older?",
        "answers": [
            [
                " Walk Like an Egyptian "
            ],
            [
                " With or Without You "
            ],
            [
                " (I Just) Died in Your Arms "
            ],
            [
                " The Way"
            ],
            [
                " Everybody Have Fun Tonight "
            ],
            [
                " Touch Me (I Want Your Body) "
            ],
            [
                "Head to Toe "
            ],
            [
                "Looking for a New Love"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (T1:`music_4.artist`)-[]-(T2:`music_4.volume`)\nWHERE T1.Age >= 32\nRETURN T2.Song",
        "question": "Return names of songs in volumes that are by artists that are at least 32 years old.",
        "answers": [
            [
                " Walk Like an Egyptian "
            ],
            [
                " With or Without You "
            ],
            [
                " (I Just) Died in Your Arms "
            ],
            [
                " The Way"
            ],
            [
                " Everybody Have Fun Tonight "
            ],
            [
                " Touch Me (I Want Your Body) "
            ],
            [
                "Head to Toe "
            ],
            [
                "Looking for a New Love"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (T1:`music_4.artist`)-[]-(T2:`music_4.volume`)\nWHERE T2.Weeks_on_Top > 2\nRETURN T1.Famous_Title",
        "question": "What are the famous title of the artists associated with volumes with more than 2 weeks on top?",
        "answers": [
            [
                "Bergen 1996"
            ],
            [
                "Bergen 1996"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (T1:`music_4.artist`)-[]-(T2:`music_4.volume`)\nWHERE T2.Weeks_on_Top > 2\nRETURN T1.Famous_Title",
        "question": "Return the famous titles for artists that have volumes that lasted more than 2 weeks on top.",
        "answers": [
            [
                "Bergen 1996"
            ],
            [
                "Bergen 1996"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (artist:`music_4.artist`)\nRETURN artist.Famous_Title,artist.Age\nORDER BY artist.Age DESC",
        "question": "Please list the age and famous title of artists in descending order of age.",
        "answers": [
            [
                "Antithesis of All Flesh",
                49
            ],
            [
                "Transmutation",
                35
            ],
            [
                "Unholy Metal Way (re-release)",
                35
            ],
            [
                "Bergen 1996",
                34
            ],
            [
                "Those Who Unleashed (re-release)",
                27
            ],
            [
                "Antievangelistical Process (re-release)",
                22
            ],
            [
                "Imperivm",
                18
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (artist:`music_4.artist`)\nRETURN artist.Famous_Title,artist.Age\nORDER BY artist.Age DESC",
        "question": "What are the famous titles and ages of each artist, listed in descending order by age?",
        "answers": [
            [
                "Antithesis of All Flesh",
                49
            ],
            [
                "Transmutation",
                35
            ],
            [
                "Unholy Metal Way (re-release)",
                35
            ],
            [
                "Bergen 1996",
                34
            ],
            [
                "Those Who Unleashed (re-release)",
                27
            ],
            [
                "Antievangelistical Process (re-release)",
                22
            ],
            [
                "Imperivm",
                18
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (artist:`music_4.artist`)\nRETURN artist.Famous_Release_date\nORDER BY artist.Age DESC\nLIMIT 1",
        "question": "What is the famous release date of the artist with the oldest age?",
        "answers": [
            [
                "June 15, 2009"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (artist:`music_4.artist`)\nRETURN artist.Famous_Release_date\nORDER BY artist.Age DESC\nLIMIT 1",
        "question": "Return the famous release date for the oldest artist.",
        "answers": [
            [
                "June 15, 2009"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nRETURN music_festival.Category,count(*)",
        "question": "Please show the categories of the music festivals and the count.",
        "answers": [
            [
                "Best Song",
                5
            ],
            [
                "Best Lyrics",
                3
            ],
            [
                "Best Sound Song",
                1
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nRETURN music_festival.Category,count(*)",
        "question": "Return the number of music festivals of each category.",
        "answers": [
            [
                "Best Song",
                5
            ],
            [
                "Best Lyrics",
                3
            ],
            [
                "Best Sound Song",
                1
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nRETURN music_festival.Result\nORDER BY music_festival.Result DESC\nLIMIT 1",
        "question": "What is the most common result of the music festival?",
        "answers": [
            [
                "Nominated"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nRETURN music_festival.Result\nORDER BY music_festival.Result DESC\nLIMIT 1",
        "question": "Return the result that is most frequent at music festivals.",
        "answers": [
            [
                "Nominated"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nWITH count(*) AS count, music_festival.Category AS Category\nWHERE count  > 1\nRETURN Category",
        "question": "Please show the categories of the music festivals with count more than 1.",
        "answers": [
            [
                "Best Song"
            ],
            [
                "Best Lyrics"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nWITH count(*) AS count, music_festival.Category AS Category\nWHERE count  > 1\nRETURN Category",
        "question": "What are the categories of music festivals for which there have been more than 1 music festival?",
        "answers": [
            [
                "Best Song"
            ],
            [
                "Best Lyrics"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (volume:`music_4.volume`)\nRETURN volume.Song\nORDER BY volume.Weeks_on_Top DESC\nLIMIT 1",
        "question": "What is the song in the volume with the maximum weeks on top?",
        "answers": [
            [
                " The Way"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (volume:`music_4.volume`)\nRETURN volume.Song\nORDER BY volume.Weeks_on_Top DESC\nLIMIT 1",
        "question": "Return the song in the volume that has spent the most weeks on top?",
        "answers": [
            [
                " The Way"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (artist:`music_4.artist`)\nWHERE NOT (artist)-[]-(:`music_4.volume`)    \nRETURN artist.Famous_Title",
        "question": "Find the famous titles of artists that do not have any volume.",
        "answers": [
            [
                "Antievangelistical Process (re-release)"
            ],
            [
                "Antithesis of All Flesh"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (artist:`music_4.artist`)\nWHERE NOT (artist)-[]-(:`music_4.volume`)    \nRETURN artist.Famous_Title",
        "question": "What are the famous titles of artists who do not have any volumes?",
        "answers": [
            [
                "Antievangelistical Process (re-release)"
            ],
            [
                "Antithesis of All Flesh"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nWHERE music_festival.Category = 'Best Song' AND music_festival.Result = 'Awarded'\nRETURN music_festival.Date_of_ceremony",
        "question": "What are the date of ceremony of music festivals with category \"Best Song\" and result \"Awarded\"?",
        "answers": [
            [
                "18 February 2011"
            ],
            [
                "18 February 2011"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nWHERE music_festival.Category = 'Best Song' AND music_festival.Result = 'Awarded'\nRETURN music_festival.Date_of_ceremony",
        "question": "Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\".",
        "answers": [
            [
                "18 February 2011"
            ],
            [
                "18 February 2011"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (volume:`music_4.volume`)\nRETURN volume.Issue_Date\nORDER BY volume.Weeks_on_Top ASC\nLIMIT 1",
        "question": "What is the issue date of the volume with the minimum weeks on top?",
        "answers": [
            [
                "17 January"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (volume:`music_4.volume`)\nRETURN volume.Issue_Date\nORDER BY volume.Weeks_on_Top ASC\nLIMIT 1",
        "question": "Return the issue date of the volume that has spent the fewest weeks on top.",
        "answers": [
            [
                "17 January"
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (volume:`music_4.volume`)\nRETURN count(DISTINCT volume.Artist_ID)",
        "question": "How many distinct artists have volumes?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (volume:`music_4.volume`)\nRETURN count(DISTINCT volume.Artist_ID)",
        "question": "Count the number of artists who have had volumes.",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nRETURN music_festival.Result,count(*)\nORDER BY music_festival.Result DESC",
        "question": "Please show the results of music festivals and the number of music festivals that have had each, ordered by this count.",
        "answers": [
            [
                "Nominated",
                6
            ],
            [
                "Awarded",
                3
            ]
        ]
    },
    {
        "db_id": "music_4",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nRETURN music_festival.Result,count(*)\nORDER BY music_festival.Result DESC",
        "question": "How many music festivals have had each kind of result, ordered descending by count?",
        "answers": [
            [
                "Nominated",
                6
            ],
            [
                "Awarded",
                3
            ]
        ]
    },
    {
        "db_id": "roller_coaster",
        "query": "MATCH (roller_coaster:`roller_coaster.roller_coaster`)\nRETURN count(*)",
        "question": "How many roller coasters are there?",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "db_id": "roller_coaster",
        "query": "MATCH (roller_coaster:`roller_coaster.roller_coaster`)\nRETURN roller_coaster.Name\nORDER BY roller_coaster.Length ASC",
        "question": "List the names of roller coasters by ascending order of length.",
        "answers": [
            [
                "Twister"
            ],
            [
                "Ravine Flyer II"
            ],
            [
                "Boardwalk Bullet"
            ],
            [
                "Dauling Dragon"
            ],
            [
                "Hades 360"
            ],
            [
                "The Voyage"
            ]
        ]
    },
    {
        "db_id": "roller_coaster",
        "query": "MATCH (roller_coaster:`roller_coaster.roller_coaster`)\nRETURN roller_coaster.Length,roller_coaster.Height",
        "question": "What are the lengths and heights of roller coasters?",
        "answers": [
            [
                3236.0,
                96.0
            ],
            [
                3914.0,
                105.0
            ],
            [
                4726.0,
                136.0
            ],
            [
                2900.0,
                120.0
            ],
            [
                1574.0,
                50.0
            ],
            [
                6442.0,
                163.0
            ]
        ]
    },
    {
        "db_id": "roller_coaster",
        "query": "MATCH (country:`roller_coaster.country`)\nWHERE country.Languages <> 'German'\nRETURN country.Name",
        "question": "List the names of countries whose language is not \"German\".",
        "answers": [
            [
                "Finland"
            ],
            [
                "Sweden"
            ]
        ]
    },
    {
        "db_id": "roller_coaster",
        "query": "MATCH (roller_coaster:`roller_coaster.roller_coaster`)\nWHERE roller_coaster.Length > 3300 OR roller_coaster.Height > 100\nRETURN roller_coaster.Status",
        "question": "Show the statuses of roller coasters longer than 3300 or higher than 100.",
        "answers": [
            [
                "Operating"
            ],
            [
                "Operating"
            ],
            [
                "Operating"
            ],
            [
                "Operating"
            ]
        ]
    },
    {
        "db_id": "roller_coaster",
        "query": "MATCH (roller_coaster:`roller_coaster.roller_coaster`)\nRETURN roller_coaster.Speed\nORDER BY roller_coaster.Length DESC\nLIMIT 1",
        "question": "What are the speeds of the longest roller coaster?",
        "answers": [
            [
                "67"
            ]
        ]
    },
    {
        "db_id": "roller_coaster",
        "query": "MATCH (roller_coaster:`roller_coaster.roller_coaster`)\nRETURN roller_coaster.Status,count(*)",
        "question": "Show the different statuses and the numbers of roller coasters for each status.",
        "answers": [
            [
                "Operating",
                6
            ]
        ]
    },
    {
        "db_id": "roller_coaster",
        "query": "MATCH (roller_coaster:`roller_coaster.roller_coaster`)\nRETURN roller_coaster.Status\nORDER BY roller_coaster.Status DESC\nLIMIT 1",
        "question": "Please show the most common status of roller coasters.",
        "answers": [
            [
                "Operating"
            ]
        ]
    },
    {
        "db_id": "roller_coaster",
        "query": "MATCH (roller_coaster:`roller_coaster.roller_coaster`)\nWITH count(*) AS count, roller_coaster.Status AS Status\nWHERE count  > 2\nRETURN Status",
        "question": "List the status shared by more than two roller coaster.",
        "answers": [
            [
                "Operating"
            ]
        ]
    },
    {
        "db_id": "roller_coaster",
        "query": "MATCH (roller_coaster:`roller_coaster.roller_coaster`)\nRETURN roller_coaster.Park\nORDER BY roller_coaster.Speed DESC\nLIMIT 1",
        "question": "Show the park of the roller coaster with the highest speed.",
        "answers": [
            [
                "Mt. Olympus"
            ]
        ]
    },
    {
        "db_id": "roller_coaster",
        "query": "MATCH (T1:`roller_coaster.country`)-[]-(T2:`roller_coaster.roller_coaster`)\nRETURN T2.Name,T1.Name",
        "question": "Show the names of roller coasters and names of country they are in.",
        "answers": [
            [
                "Boardwalk Bullet",
                "Austria"
            ],
            [
                "Hades 360",
                "Austria"
            ],
            [
                "Dauling Dragon",
                "Austria"
            ],
            [
                "Twister",
                "Finland"
            ],
            [
                "Ravine Flyer II",
                "Finland"
            ],
            [
                "The Voyage",
                "Sweden"
            ]
        ]
    },
    {
        "db_id": "roller_coaster",
        "query": "MATCH (T1:`roller_coaster.country`)-[]-(T2:`roller_coaster.roller_coaster`)\nWITH T1.Name AS Name, count(*) AS count\nWHERE count  > 1\nRETURN Name",
        "question": "Show the names of countries that have more than one roller coaster.",
        "answers": [
            [
                "Austria"
            ],
            [
                "Finland"
            ]
        ]
    },
    {
        "db_id": "roller_coaster",
        "query": "MATCH (T1:`roller_coaster.country`)-[]-(T2:`roller_coaster.roller_coaster`)\nRETURN T1.Name,T1.Population\nORDER BY T2.Height DESC\nLIMIT 1",
        "question": "Show the name and population of the country that has the highest roller coaster.",
        "answers": [
            [
                "Sweden",
                9047752
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (captain:`ship_1.captain`)\nRETURN count(DISTINCT captain.Rank)",
        "question": "How many different captain ranks are there?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (captain:`ship_1.captain`)\nRETURN count(DISTINCT captain.Rank)",
        "question": "Count the number of different ranks of captain.",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (captain:`ship_1.captain`)\nRETURN count(*),captain.Rank",
        "question": "How many captains are in each rank?",
        "answers": [
            [
                4,
                "Midshipman"
            ],
            [
                2,
                "Lieutenant"
            ],
            [
                1,
                "Commander, junior captain"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (captain:`ship_1.captain`)\nRETURN count(*),captain.Rank",
        "question": "Count the number of captains that have each rank.",
        "answers": [
            [
                4,
                "Midshipman"
            ],
            [
                2,
                "Lieutenant"
            ],
            [
                1,
                "Commander, junior captain"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (captain:`ship_1.captain`)\nWHERE captain.age < '50'\nRETURN count(*),captain.Rank",
        "question": "How many captains with younger than 50 are in each rank?",
        "answers": [
            [
                3,
                "Midshipman"
            ],
            [
                1,
                "Lieutenant"
            ],
            [
                1,
                "Commander, junior captain"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (captain:`ship_1.captain`)\nWHERE captain.age < '50'\nRETURN count(*),captain.Rank",
        "question": "Count the number of captains younger than 50 of each rank.",
        "answers": [
            [
                3,
                "Midshipman"
            ],
            [
                1,
                "Lieutenant"
            ],
            [
                1,
                "Commander, junior captain"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (captain:`ship_1.captain`)\nRETURN captain.Name\nORDER BY captain.age DESC",
        "question": "Sort all captain names by their ages from old to young.",
        "answers": [
            [
                "Captain Gilbert Pears"
            ],
            [
                "Captain Beves Conway"
            ],
            [
                "Lieutenant Montagu Verling"
            ],
            [
                "Lieutenant Hugh Bolitho"
            ],
            [
                "Captain Sir Henry Langford"
            ],
            [
                "Captain Henry Dumaresq"
            ],
            [
                "Commander Richard Bolitho"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (captain:`ship_1.captain`)\nRETURN captain.Name\nORDER BY captain.age DESC",
        "question": "What are the names of captains, sorted by age descending?",
        "answers": [
            [
                "Captain Gilbert Pears"
            ],
            [
                "Captain Beves Conway"
            ],
            [
                "Lieutenant Montagu Verling"
            ],
            [
                "Lieutenant Hugh Bolitho"
            ],
            [
                "Captain Sir Henry Langford"
            ],
            [
                "Captain Henry Dumaresq"
            ],
            [
                "Commander Richard Bolitho"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (captain:`ship_1.captain`)\nRETURN captain.Name,captain.Class,captain.Rank",
        "question": "Find the name, class and rank of all captains.",
        "answers": [
            [
                "Captain Sir Henry Langford",
                "Third-rate ship of the line",
                "Midshipman"
            ],
            [
                "Captain Beves Conway",
                "Third-rate ship of the line",
                "Midshipman"
            ],
            [
                "Lieutenant Hugh Bolitho",
                "Cutter",
                "Midshipman"
            ],
            [
                "Lieutenant Montagu Verling",
                "Armed schooner",
                "Midshipman"
            ],
            [
                "Captain Henry Dumaresq",
                "Frigate",
                "Lieutenant"
            ],
            [
                "Captain Gilbert Pears",
                "Third-rate ship of the line",
                "Lieutenant"
            ],
            [
                "Commander Richard Bolitho",
                "Sloop-of-war",
                "Commander, junior captain"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (captain:`ship_1.captain`)\nRETURN captain.Name,captain.Class,captain.Rank",
        "question": "What are the names, classes, and ranks of all captains?",
        "answers": [
            [
                "Captain Sir Henry Langford",
                "Third-rate ship of the line",
                "Midshipman"
            ],
            [
                "Captain Beves Conway",
                "Third-rate ship of the line",
                "Midshipman"
            ],
            [
                "Lieutenant Hugh Bolitho",
                "Cutter",
                "Midshipman"
            ],
            [
                "Lieutenant Montagu Verling",
                "Armed schooner",
                "Midshipman"
            ],
            [
                "Captain Henry Dumaresq",
                "Frigate",
                "Lieutenant"
            ],
            [
                "Captain Gilbert Pears",
                "Third-rate ship of the line",
                "Lieutenant"
            ],
            [
                "Commander Richard Bolitho",
                "Sloop-of-war",
                "Commander, junior captain"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (captain:`ship_1.captain`)\nRETURN captain.Rank\nORDER BY captain.Rank DESC\nLIMIT 1",
        "question": "Which rank is the most common among captains?",
        "answers": [
            [
                "Midshipman"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (captain:`ship_1.captain`)\nRETURN captain.Rank\nORDER BY captain.Rank DESC\nLIMIT 1",
        "question": "Return the rank for which there are the fewest captains.",
        "answers": [
            [
                "Midshipman"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (captain:`ship_1.captain`)\nWITH captain.Class AS Class, count(*) AS count\nWHERE count  > 2\nRETURN Class",
        "question": "Which classes have more than two captains?",
        "answers": [
            [
                "Third-rate ship of the line"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (captain:`ship_1.captain`)\nWITH captain.Class AS Class, count(*) AS count\nWHERE count  > 2\nRETURN Class",
        "question": "Give the classes that have more than two captains.",
        "answers": [
            [
                "Third-rate ship of the line"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (captain:`ship_1.captain`)\nWHERE captain.Rank = 'Midshipman' OR captain.Rank = 'Lieutenant'\nRETURN captain.Name",
        "question": "Find the name of captains whose rank are either Midshipman or Lieutenant.",
        "answers": [
            [
                "Captain Sir Henry Langford"
            ],
            [
                "Captain Beves Conway"
            ],
            [
                "Lieutenant Hugh Bolitho"
            ],
            [
                "Lieutenant Montagu Verling"
            ],
            [
                "Captain Henry Dumaresq"
            ],
            [
                "Captain Gilbert Pears"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (captain:`ship_1.captain`)\nWHERE captain.Rank = 'Midshipman' OR captain.Rank = 'Lieutenant'\nRETURN captain.Name",
        "question": "What are the names of captains that have either the rank Midshipman or Lieutenant?",
        "answers": [
            [
                "Captain Sir Henry Langford"
            ],
            [
                "Captain Beves Conway"
            ],
            [
                "Lieutenant Hugh Bolitho"
            ],
            [
                "Lieutenant Montagu Verling"
            ],
            [
                "Captain Henry Dumaresq"
            ],
            [
                "Captain Gilbert Pears"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (captain:`ship_1.captain`)\nRETURN captain.Name\nORDER BY captain.age\nLIMIT 1",
        "question": "What is the name of the youngest captain?",
        "answers": [
            [
                "Captain Henry Dumaresq"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (captain:`ship_1.captain`)\nRETURN captain.Name\nORDER BY captain.age\nLIMIT 1",
        "question": "Return the name of the youngest captain.",
        "answers": [
            [
                "Captain Henry Dumaresq"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (ship:`ship_1.Ship`)\nRETURN count(*)",
        "question": "how many ships are there?",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (ship:`ship_1.Ship`)\nRETURN count(*)",
        "question": "Count the number of ships.",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (ship:`ship_1.Ship`)\nRETURN ship.Name,ship.Type,ship.Flag\nORDER BY ship.Built_Year DESC\nLIMIT 1",
        "question": "Find the name, type, and flag of the ship that is built in the most recent year.",
        "answers": [
            [
                "HMS Gorgon",
                "Panamax",
                "Panama"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (ship:`ship_1.Ship`)\nRETURN ship.Name,ship.Type,ship.Flag\nORDER BY ship.Built_Year DESC\nLIMIT 1",
        "question": "What is the name, type, and flag of the ship that was built in the most recent year?",
        "answers": [
            [
                "HMS Gorgon",
                "Panamax",
                "Panama"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (ship:`ship_1.Ship`)\nRETURN count(*),ship.Flag",
        "question": "Group by ships by flag, and return number of ships that have each flag.",
        "answers": [
            [
                8,
                "Panama"
            ],
            [
                1,
                "Malta"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (ship:`ship_1.Ship`)\nRETURN count(*),ship.Flag",
        "question": "What are the different ship flags, and how many ships have each?",
        "answers": [
            [
                8,
                "Panama"
            ],
            [
                1,
                "Malta"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (ship:`ship_1.Ship`)\nRETURN ship.Flag\nORDER BY ship.Flag DESC\nLIMIT 1",
        "question": "Which flag is most widely used among all ships?",
        "answers": [
            [
                "Panama"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (ship:`ship_1.Ship`)\nRETURN ship.Flag\nORDER BY ship.Flag DESC\nLIMIT 1",
        "question": "Return the flag that is most common among all ships.",
        "answers": [
            [
                "Panama"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (ship:`ship_1.Ship`)\nRETURN ship.Name\nORDER BY ship.Built_Year,ship.Class",
        "question": "List all ship names in the order of built year and class.",
        "answers": [
            [
                "HMS Manxman"
            ],
            [
                "HM Cutter Avenger"
            ],
            [
                "HMS Trojan"
            ],
            [
                "HM Sloop Sparrow"
            ],
            [
                "HMS Phalarope"
            ],
            [
                "HMS Undine"
            ],
            [
                "HMS Gorgon"
            ],
            [
                "HM Schooner Hotspur"
            ],
            [
                "HMS Destiny"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (ship:`ship_1.Ship`)\nRETURN ship.Name\nORDER BY ship.Built_Year,ship.Class",
        "question": "What are the names of ships, ordered by year they were built and their class?",
        "answers": [
            [
                "HMS Manxman"
            ],
            [
                "HM Cutter Avenger"
            ],
            [
                "HMS Trojan"
            ],
            [
                "HM Sloop Sparrow"
            ],
            [
                "HMS Phalarope"
            ],
            [
                "HMS Undine"
            ],
            [
                "HMS Gorgon"
            ],
            [
                "HM Schooner Hotspur"
            ],
            [
                "HMS Destiny"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (t1:`ship_1.Ship`)-[]-(t2:`ship_1.captain`)\nWITH count(*) AS count, t1.Name AS Name\nWHERE count  > 1\nRETURN Name",
        "question": "Find the name of the ships that have more than one captain.",
        "answers": [
            [
                "HMS Gorgon"
            ],
            [
                "HM Cutter Avenger"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (t1:`ship_1.Ship`)-[]-(t2:`ship_1.captain`)\nWITH count(*) AS count, t1.Name AS Name\nWHERE count  > 1\nRETURN Name",
        "question": "What are the names of ships that have more than one captain?",
        "answers": [
            [
                "HMS Gorgon"
            ],
            [
                "HM Cutter Avenger"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (t1:`ship_1.Ship`)-[]-(t2:`ship_1.captain`)\nRETURN t1.Name\nORDER BY t2.age\nLIMIT 1",
        "question": "Find the name of the ship that is steered by the youngest captain.",
        "answers": [
            [
                "HMS Destiny"
            ]
        ]
    },
    {
        "db_id": "ship_1",
        "query": "MATCH (t1:`ship_1.Ship`)-[]-(t2:`ship_1.captain`)\nRETURN t1.Name\nORDER BY t2.age\nLIMIT 1",
        "question": "What is the name of the ship that is commanded by the youngest captain?",
        "answers": [
            [
                "HMS Destiny"
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (match:`city_record.match`)\nWHERE match.Competition = '1994 FIFA World Cup qualification'\nRETURN match.Match_ID",
        "question": "Find the match ids of the cities that hosted competition \"1994 FIFA World Cup qualification\"?",
        "answers": [
            [
                2
            ],
            [
                3
            ],
            [
                4
            ],
            [
                5
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (match:`city_record.match`)\nWHERE match.Competition = '1994 FIFA World Cup qualification'\nRETURN match.Match_ID",
        "question": "What is the match id of the competition called \"1994 FIFA World Cup qualification\"?",
        "answers": [
            [
                2
            ],
            [
                3
            ],
            [
                4
            ],
            [
                5
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (T1:`city_record.city`)-[]-(T2:`city_record.hosting_city`)\nWHERE T2.Year > 2010\nRETURN T1.City",
        "question": "Find the cities which were once a host city after 2010?",
        "answers": [
            [
                "Wuxi ( Jiangsu )"
            ],
            [
                "Taizhou ( Zhejiang )"
            ],
            [
                "Jiaxing ( Zhejiang )"
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (T1:`city_record.city`)-[]-(T2:`city_record.hosting_city`)\nWHERE T2.Year > 2010\nRETURN T1.City",
        "question": "Which cities served as a host city after 2010?",
        "answers": [
            [
                "Wuxi ( Jiangsu )"
            ],
            [
                "Taizhou ( Zhejiang )"
            ],
            [
                "Jiaxing ( Zhejiang )"
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (T1:`city_record.city`)-[]-(T2:`city_record.hosting_city`)-[]-(T3:`city_record.match`)\nWHERE T1.City = 'Nanjing ( Jiangsu )' AND T3.Competition = '1994 FIFA World Cup qualification'\nRETURN T3.Venue",
        "question": "What is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing ( Jiangsu )\"?",
        "answers": [
            [
                "Estadio Rigoberto L\u00f3pez , Managua , Nicaragua"
            ],
            [
                "Estadio Cuscatl\u00e1n , San Salvador , El Salvador"
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (T1:`city_record.city`)-[]-(T2:`city_record.hosting_city`)-[]-(T3:`city_record.match`)\nWHERE T1.City = 'Nanjing ( Jiangsu )' AND T3.Competition = '1994 FIFA World Cup qualification'\nRETURN T3.Venue",
        "question": "Find the venue of the competition \"1994 FIFA World Cup qualification\" which was hosted by \"Nanjing ( Jiangsu )\".",
        "answers": [
            [
                "Estadio Rigoberto L\u00f3pez , Managua , Nicaragua"
            ],
            [
                "Estadio Cuscatl\u00e1n , San Salvador , El Salvador"
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (T1:`city_record.city`)-[]-(T2:`city_record.temperature`)\nWHERE T1.City = 'Shanghai'\nRETURN T2.Jan",
        "question": "Give me the temperature of Shanghai in January.",
        "answers": [
            [
                17.8
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (T1:`city_record.city`)-[]-(T2:`city_record.temperature`)\nWHERE T1.City = 'Shanghai'\nRETURN T2.Jan",
        "question": "What is the temperature of \"Shanghai\" city in January?",
        "answers": [
            [
                17.8
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (T1:`city_record.city`)-[]-(T2:`city_record.hosting_city`)\nWHERE T1.City = 'Taizhou ( Zhejiang )'\nRETURN T2.Year",
        "question": "What is the host year of city \"Taizhou ( Zhejiang )\"?",
        "answers": [
            [
                2012
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (T1:`city_record.city`)-[]-(T2:`city_record.hosting_city`)\nWHERE T1.City = 'Taizhou ( Zhejiang )'\nRETURN T2.Year",
        "question": "IN which year did city \"Taizhou ( Zhejiang )\" serve as a host city?",
        "answers": [
            [
                2012
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (city:`city_record.city`)\nRETURN city.City\nORDER BY city.Regional_Population DESC\nLIMIT 3",
        "question": "Which three cities have the largest regional population?",
        "answers": [
            [
                "Shanghai"
            ],
            [
                "Suzhou ( Jiangsu )"
            ],
            [
                "Hangzhou ( Zhejiang )"
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (city:`city_record.city`)\nRETURN city.City\nORDER BY city.Regional_Population DESC\nLIMIT 3",
        "question": "What are the three largest cities in terms of regional population?",
        "answers": [
            [
                "Shanghai"
            ],
            [
                "Suzhou ( Jiangsu )"
            ],
            [
                "Hangzhou ( Zhejiang )"
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (city:`city_record.city`)\nRETURN city.City,city.GDP\nORDER BY city.GDP\nLIMIT 1",
        "question": "Which city has the lowest GDP? Please list the city name and its GDP.",
        "answers": [
            [
                "Jinhua ( Zhejiang )",
                244.77
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (city:`city_record.city`)\nRETURN city.City,city.GDP\nORDER BY city.GDP\nLIMIT 1",
        "question": "What is the city with the smallest GDP? Return the city and its GDP.",
        "answers": [
            [
                "Jinhua ( Zhejiang )",
                244.77
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (T1:`city_record.city`)-[]-(T2:`city_record.temperature`)\nRETURN T1.City\nORDER BY T2.Feb DESC\nLIMIT 1",
        "question": "Which city has the highest temperature in February?",
        "answers": [
            [
                "Suzhou ( Jiangsu )"
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (T1:`city_record.city`)-[]-(T2:`city_record.temperature`)\nRETURN T1.City\nORDER BY T2.Feb DESC\nLIMIT 1",
        "question": "In February, which city marks the highest temperature?",
        "answers": [
            [
                "Suzhou ( Jiangsu )"
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (T1:`city_record.city`)-[]-(T2:`city_record.temperature`)\nWHERE T2.Mar < T2.Jul OR T2.Mar > T2.Oct\nRETURN T1.City",
        "question": "Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?",
        "answers": [
            [
                "Shanghai"
            ],
            [
                "Nanjing ( Jiangsu )"
            ],
            [
                "Hangzhou ( Zhejiang )"
            ],
            [
                "Suzhou ( Jiangsu )"
            ],
            [
                "Wuxi ( Jiangsu )"
            ],
            [
                "Jinhua ( Zhejiang )"
            ],
            [
                "Nantong ( Jiangsu )"
            ],
            [
                "Jiaxing ( Zhejiang )"
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (T1:`city_record.city`)-[]-(T2:`city_record.temperature`)\nWHERE T2.Mar < T2.Jul OR T2.Mar > T2.Oct\nRETURN T1.City",
        "question": "Which cities' temperature in March is lower than that in July or higher than that in Oct?",
        "answers": [
            [
                "Shanghai"
            ],
            [
                "Nanjing ( Jiangsu )"
            ],
            [
                "Hangzhou ( Zhejiang )"
            ],
            [
                "Suzhou ( Jiangsu )"
            ],
            [
                "Wuxi ( Jiangsu )"
            ],
            [
                "Jinhua ( Zhejiang )"
            ],
            [
                "Nantong ( Jiangsu )"
            ],
            [
                "Jiaxing ( Zhejiang )"
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (T1:`city_record.city`)-[]-(T2:`city_record.temperature`)\nWHERE T2.Feb > T2.Jun\nRETURN T1.City  AS city \nUNION\nMATCH (T3:`city_record.city`)-[]-(T4:`city_record.hosting_city`)\nRETURN T3.City  AS city",
        "question": "Give me a list of cities whose temperature in Feb is higher than that in Jun or cities that were once host cities?",
        "answers": [
            [
                "Shanghai"
            ],
            [
                "Nanjing ( Jiangsu )"
            ],
            [
                "Wuxi ( Jiangsu )"
            ],
            [
                "Taizhou ( Zhejiang )"
            ],
            [
                "Jiaxing ( Zhejiang )"
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (T1:`city_record.city`)-[]-(T2:`city_record.temperature`)\nWHERE T2.Feb > T2.Jun\nRETURN T1.City  AS city \nUNION\nMATCH (T3:`city_record.city`)-[]-(T4:`city_record.hosting_city`)\nRETURN T3.City  AS city",
        "question": "Which cities have higher temperature in Feb than in Jun or have once served as host cities?",
        "answers": [
            [
                "Shanghai"
            ],
            [
                "Nanjing ( Jiangsu )"
            ],
            [
                "Wuxi ( Jiangsu )"
            ],
            [
                "Taizhou ( Zhejiang )"
            ],
            [
                "Jiaxing ( Zhejiang )"
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (city:`city_record.city`)\nWHERE city.Regional_Population > 10000000\nRETURN city.City",
        "question": "Please give me a list of cities whose regional population is over 10000000.",
        "answers": [
            [
                "Shanghai"
            ],
            [
                "Suzhou ( Jiangsu )"
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (city:`city_record.city`)\nWHERE city.Regional_Population > 10000000\nRETURN city.City",
        "question": "Which cities have regional population above 10000000?",
        "answers": [
            [
                "Shanghai"
            ],
            [
                "Suzhou ( Jiangsu )"
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (city:`city_record.city`)\nWHERE city.Regional_Population > 10000000\nRETURN city.City  AS city \nUNION\nMATCH (city:`city_record.city`)\nWHERE city.Regional_Population < 5000000\nRETURN city.City  AS city",
        "question": "Please give me a list of cities whose regional population is over 8000000 or under 5000000.",
        "answers": [
            [
                "Shanghai"
            ],
            [
                "Suzhou ( Jiangsu )"
            ],
            [
                "Shaoxing ( Zhejiang )"
            ],
            [
                "Changzhou ( Jiangsu )"
            ],
            [
                "Jinhua ( Zhejiang )"
            ],
            [
                "Jiaxing ( Zhejiang )"
            ],
            [
                "Yangzhou ( Jiangsu )"
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (city:`city_record.city`)\nWHERE city.Regional_Population > 10000000\nRETURN city.City  AS city \nUNION\nMATCH (city:`city_record.city`)\nWHERE city.Regional_Population < 5000000\nRETURN city.City  AS city",
        "question": "Which cities have regional population above 8000000 or below 5000000?",
        "answers": [
            [
                "Shanghai"
            ],
            [
                "Suzhou ( Jiangsu )"
            ],
            [
                "Shaoxing ( Zhejiang )"
            ],
            [
                "Changzhou ( Jiangsu )"
            ],
            [
                "Jinhua ( Zhejiang )"
            ],
            [
                "Jiaxing ( Zhejiang )"
            ],
            [
                "Yangzhou ( Jiangsu )"
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (match:`city_record.match`)\nRETURN count(*),match.Competition",
        "question": "Find the number of matches in different competitions.",
        "answers": [
            [
                1,
                "Friendly match"
            ],
            [
                4,
                "1994 FIFA World Cup qualification"
            ],
            [
                1,
                "2002 FIFA World Cup qualification"
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (match:`city_record.match`)\nRETURN count(*),match.Competition",
        "question": "For each competition, count the number of matches.",
        "answers": [
            [
                1,
                "Friendly match"
            ],
            [
                4,
                "1994 FIFA World Cup qualification"
            ],
            [
                1,
                "2002 FIFA World Cup qualification"
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (match:`city_record.match`)\nRETURN match.Venue\nORDER BY match.Date DESC",
        "question": "List venues of all matches in the order of their dates starting from the most recent one.",
        "answers": [
            [
                "Estadio Cuscatl\u00e1n , San Salvador , El Salvador"
            ],
            [
                "Estadio Cuscatl\u00e1n , San Salvador , El Salvador"
            ],
            [
                "Estadio Cuscatl\u00e1n , San Salvador , El Salvador"
            ],
            [
                "Estadio Cuscatl\u00e1n , San Salvador , El Salvador"
            ],
            [
                "Estadio Rigoberto L\u00f3pez , Managua , Nicaragua"
            ],
            [
                "Estadio Cuscatl\u00e1n , San Salvador , El Salvador"
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (match:`city_record.match`)\nRETURN match.Venue\nORDER BY match.Date DESC",
        "question": "What are the venues of all the matches? Sort them in the descending order of match date.",
        "answers": [
            [
                "Estadio Cuscatl\u00e1n , San Salvador , El Salvador"
            ],
            [
                "Estadio Cuscatl\u00e1n , San Salvador , El Salvador"
            ],
            [
                "Estadio Cuscatl\u00e1n , San Salvador , El Salvador"
            ],
            [
                "Estadio Cuscatl\u00e1n , San Salvador , El Salvador"
            ],
            [
                "Estadio Rigoberto L\u00f3pez , Managua , Nicaragua"
            ],
            [
                "Estadio Cuscatl\u00e1n , San Salvador , El Salvador"
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (city:`city_record.city`)\nRETURN city.GDP\nORDER BY city.Regional_Population DESC\nLIMIT 1",
        "question": "what is the GDP of the city with the largest population.",
        "answers": [
            [
                1919.57
            ]
        ]
    },
    {
        "db_id": "city_record",
        "query": "MATCH (city:`city_record.city`)\nRETURN city.GDP\nORDER BY city.Regional_Population DESC\nLIMIT 1",
        "question": "Find the GDP of the city with the largest regional population.",
        "answers": [
            [
                1919.57
            ]
        ]
    },
    {
        "db_id": "e_government",
        "query": "MATCH (individuals:`e_government.Individuals`)\nRETURN individuals.individual_first_name,individuals.individual_middle_name,individuals.individual_last_name\nORDER BY individuals.individual_last_name",
        "question": "List every individual's first name, middle name and last name in alphabetical order by last name.",
        "answers": [
            [
                "Ressie",
                "Alysson",
                "Bradtke"
            ],
            [
                "Shany",
                "Colleen",
                "D'Amore"
            ],
            [
                "Katarina",
                "Lacey",
                "Dooley"
            ],
            [
                "Daron",
                "Howard",
                "Hand"
            ],
            [
                "Jeffery",
                "Alberto",
                "Jacobs"
            ],
            [
                "Geovanny",
                "Antonia",
                "Kerluke"
            ],
            [
                "Nella",
                "Tommie",
                "Kertzmann"
            ],
            [
                "Casper",
                "Mitchell",
                "Kutch"
            ],
            [
                "Oscar",
                "Hosea",
                "Maggio"
            ],
            [
                "Jaylen",
                "Jewell",
                "O'Conner"
            ],
            [
                "Lafayette",
                "Raoul",
                "Rau"
            ],
            [
                "Daniella",
                "Jamel",
                "Rogahn"
            ],
            [
                "Allene",
                "Erwin",
                "Rutherford"
            ],
            [
                "Matteo",
                "Rene",
                "Schuster"
            ],
            [
                "Guy",
                "Erick",
                "Wunsch"
            ]
        ]
    },
    {
        "db_id": "e_government",
        "query": "MATCH (individuals:`e_government.Individuals`)\nRETURN individuals.individual_first_name,individuals.individual_middle_name,individuals.individual_last_name\nORDER BY individuals.individual_last_name",
        "question": "What are the first, middle, and last names of all individuals, ordered by last name?",
        "answers": [
            [
                "Ressie",
                "Alysson",
                "Bradtke"
            ],
            [
                "Shany",
                "Colleen",
                "D'Amore"
            ],
            [
                "Katarina",
                "Lacey",
                "Dooley"
            ],
            [
                "Daron",
                "Howard",
                "Hand"
            ],
            [
                "Jeffery",
                "Alberto",
                "Jacobs"
            ],
            [
                "Geovanny",
                "Antonia",
                "Kerluke"
            ],
            [
                "Nella",
                "Tommie",
                "Kertzmann"
            ],
            [
                "Casper",
                "Mitchell",
                "Kutch"
            ],
            [
                "Oscar",
                "Hosea",
                "Maggio"
            ],
            [
                "Jaylen",
                "Jewell",
                "O'Conner"
            ],
            [
                "Lafayette",
                "Raoul",
                "Rau"
            ],
            [
                "Daniella",
                "Jamel",
                "Rogahn"
            ],
            [
                "Allene",
                "Erwin",
                "Rutherford"
            ],
            [
                "Matteo",
                "Rene",
                "Schuster"
            ],
            [
                "Guy",
                "Erick",
                "Wunsch"
            ]
        ]
    },
    {
        "db_id": "e_government",
        "query": "MATCH (forms:`e_government.Forms`)\nRETURN DISTINCT forms.form_type_code",
        "question": "List all the types of forms.",
        "answers": [
            [
                "Basic"
            ],
            [
                "Complex"
            ]
        ]
    },
    {
        "db_id": "e_government",
        "query": "MATCH (forms:`e_government.Forms`)\nRETURN DISTINCT forms.form_type_code",
        "question": "What are the different types of forms?",
        "answers": [
            [
                "Basic"
            ],
            [
                "Complex"
            ]
        ]
    },
    {
        "db_id": "e_government",
        "query": "MATCH (organizations:`e_government.Organizations`)\nRETURN organizations.organization_name\nORDER BY organizations.date_formed ASC",
        "question": "List all the name of organizations in order of the date formed.",
        "answers": [
            [
                "Green Party"
            ],
            [
                "Labour Party"
            ],
            [
                "Plaid Cymru"
            ],
            [
                "Conservative"
            ],
            [
                "Liberal Democrats"
            ]
        ]
    },
    {
        "db_id": "e_government",
        "query": "MATCH (organizations:`e_government.Organizations`)\nRETURN organizations.organization_name\nORDER BY organizations.date_formed ASC",
        "question": "What are the names of organizations, ordered by the date they were formed, ascending?",
        "answers": [
            [
                "Green Party"
            ],
            [
                "Labour Party"
            ],
            [
                "Plaid Cymru"
            ],
            [
                "Conservative"
            ],
            [
                "Liberal Democrats"
            ]
        ]
    },
    {
        "db_id": "e_government",
        "query": "MATCH (organizations:`e_government.Organizations`)\nRETURN organizations.organization_name\nORDER BY organizations.date_formed DESC\nLIMIT 1",
        "question": "Find the name of the youngest organization.",
        "answers": [
            [
                "Liberal Democrats"
            ]
        ]
    },
    {
        "db_id": "e_government",
        "query": "MATCH (organizations:`e_government.Organizations`)\nRETURN organizations.organization_name\nORDER BY organizations.date_formed DESC\nLIMIT 1",
        "question": "What is the name of the organization that was formed most recently?",
        "answers": [
            [
                "Liberal Democrats"
            ]
        ]
    },
    {
        "db_id": "e_government",
        "query": "MATCH (t1:`e_government.Organizations`)-[t2:`e_government.Organization_Contact_Individuals`]-(t3:`e_government.Individuals`)\nWHERE t1.organization_name = \"Labour Party\"\nRETURN t3.individual_last_name\nORDER BY t2.date_contact_to DESC\nLIMIT 1",
        "question": "Find the last name of the latest contact individual of the organization \"Labour Party\".",
        "answers": [
            [
                "Bradtke"
            ]
        ]
    },
    {
        "db_id": "e_government",
        "query": "MATCH (t1:`e_government.Organizations`)-[t2:`e_government.Organization_Contact_Individuals`]-(t3:`e_government.Individuals`)\nWHERE t1.organization_name = \"Labour Party\"\nRETURN t3.individual_last_name\nORDER BY t2.date_contact_to DESC\nLIMIT 1",
        "question": "What is the last name of the contact individual from the Labour party organization who was contacted most recently?",
        "answers": [
            [
                "Bradtke"
            ]
        ]
    },
    {
        "db_id": "e_government",
        "query": "MATCH (services:`e_government.Services`)\nRETURN count(*)",
        "question": "How many services are there?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "e_government",
        "query": "MATCH (services:`e_government.Services`)\nRETURN count(*)",
        "question": "Count the number of services.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "e_government",
        "query": "MATCH (parties:`e_government.Parties`)\nWITH count(*) AS count, parties.payment_method_code AS payment_method_code\nWHERE count  > 3\nRETURN payment_method_code",
        "question": "Find the payment method code used by more than 3 parties.",
        "answers": [
            [
                "Cheque"
            ],
            [
                "Credit Card"
            ],
            [
                "Cash"
            ]
        ]
    },
    {
        "db_id": "e_government",
        "query": "MATCH (parties:`e_government.Parties`)\nWITH count(*) AS count, parties.payment_method_code AS payment_method_code\nWHERE count  > 3\nRETURN payment_method_code",
        "question": "What are the payment method codes that have been used by more than 3 parties?",
        "answers": [
            [
                "Cheque"
            ],
            [
                "Credit Card"
            ],
            [
                "Cash"
            ]
        ]
    },
    {
        "db_id": "e_government",
        "query": "MATCH (parties:`e_government.Parties`)\nRETURN count(DISTINCT parties.payment_method_code)",
        "question": "How many distinct payment methods are used by parties?",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "e_government",
        "query": "MATCH (parties:`e_government.Parties`)\nRETURN count(DISTINCT parties.payment_method_code)",
        "question": "Count the number of different payment method codes used by parties.",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "db_id": "e_government",
        "query": "MATCH (t1:`e_government.Parties`)-[t2:`e_government.Party_Services`]-()\nWITH t1, count(t1.party_email) AS cnt\nRETURN t1.party_email\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Which is the email of the party that has used the services the most number of times?",
        "answers": [
            [
                "frida57@example.org"
            ]
        ]
    },
    {
        "db_id": "e_government",
        "query": "MATCH (t1:`e_government.Parties`)-[t2:`e_government.Party_Services`]-()\nWITH t1, count(t1.party_email) AS cnt\nRETURN t1.party_email\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Return the party email that has used party services the greatest number of times.",
        "answers": [
            [
                "frida57@example.org"
            ]
        ]
    },
    {
        "db_id": "e_government",
        "query": "MATCH (t1:`e_government.Organizations`)-[t2:`e_government.Organization_Contact_Individuals`]-()\nWITH t1, count(t1.organization_name) AS cnt\nRETURN t1.organization_name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the name of organization that has the greatest number of contact individuals?",
        "answers": [
            [
                "Conservative"
            ]
        ]
    },
    {
        "db_id": "e_government",
        "query": "MATCH (t1:`e_government.Organizations`)-[t2:`e_government.Organization_Contact_Individuals`]-()\nWITH t1, count(t1.organization_name) AS cnt\nRETURN t1.organization_name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Return the name of the organization which has the most contact individuals.",
        "answers": [
            [
                "Conservative"
            ]
        ]
    },
    {
        "db_id": "e_government",
        "query": "MATCH (t1:`e_government.Individuals`)-[t2:`e_government.Organization_Contact_Individuals`]-()\nRETURN DISTINCT t1.individual_last_name",
        "question": "Find the last name of the individuals that have been contact individuals of an organization.",
        "answers": [
            [
                "Schuster"
            ],
            [
                "Kertzmann"
            ],
            [
                "Jacobs"
            ],
            [
                "D'Amore"
            ],
            [
                "Rutherford"
            ],
            [
                "Rau"
            ],
            [
                "Rogahn"
            ],
            [
                "Bradtke"
            ],
            [
                "Dooley"
            ]
        ]
    },
    {
        "db_id": "e_government",
        "query": "MATCH (t1:`e_government.Individuals`)-[t2:`e_government.Organization_Contact_Individuals`]-()\nRETURN DISTINCT t1.individual_last_name",
        "question": "What are the last names of individuals who have been contact individuals for an organization?",
        "answers": [
            [
                "Schuster"
            ],
            [
                "Kertzmann"
            ],
            [
                "Jacobs"
            ],
            [
                "D'Amore"
            ],
            [
                "Rutherford"
            ],
            [
                "Rau"
            ],
            [
                "Rogahn"
            ],
            [
                "Bradtke"
            ],
            [
                "Dooley"
            ]
        ]
    },
    {
        "db_id": "school_bus",
        "query": "MATCH (driver:`school_bus.driver`)\nRETURN count(*)",
        "question": "How many drivers are there?",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "school_bus",
        "query": "MATCH (driver:`school_bus.driver`)\nRETURN driver.Name,driver.Home_city,driver.Age",
        "question": "Show the name, home city, and age for all drivers.",
        "answers": [
            [
                "Matthew Ritter",
                "Hartford",
                40
            ],
            [
                "Dan Carter",
                "Bethel",
                30
            ],
            [
                "Minnie Gonzalez",
                "Hartford",
                46
            ],
            [
                "Angel Acre",
                "Hartford",
                42
            ],
            [
                "Brandon McGee",
                "Hartford",
                45
            ],
            [
                "Edwin Vargas",
                "Hartford",
                52
            ],
            [
                "Douglas McCrory",
                "Hartford",
                36
            ],
            [
                "Timothy Ackert",
                "Coventry",
                35
            ],
            [
                "Jason Rojas",
                "East Hartford",
                38
            ],
            [
                "Henry Genga",
                "East Hartford",
                37
            ],
            [
                "Tim Larson",
                "East Hartford",
                36
            ],
            [
                "Geoff Luxenberg",
                "Manchester",
                52
            ]
        ]
    },
    {
        "db_id": "school_bus",
        "query": "MATCH (driver:`school_bus.driver`)\nRETURN driver.Party,count(*)",
        "question": "Show the party and the number of drivers in each party.",
        "answers": [
            [
                "Dem",
                10
            ],
            [
                "Rep",
                2
            ]
        ]
    },
    {
        "db_id": "school_bus",
        "query": "MATCH (driver:`school_bus.driver`)\nRETURN driver.Name\nORDER BY driver.Age DESC",
        "question": "Show the name of drivers in descending order of age.",
        "answers": [
            [
                "Edwin Vargas"
            ],
            [
                "Geoff Luxenberg"
            ],
            [
                "Minnie Gonzalez"
            ],
            [
                "Brandon McGee"
            ],
            [
                "Angel Acre"
            ],
            [
                "Matthew Ritter"
            ],
            [
                "Jason Rojas"
            ],
            [
                "Henry Genga"
            ],
            [
                "Douglas McCrory"
            ],
            [
                "Tim Larson"
            ],
            [
                "Timothy Ackert"
            ],
            [
                "Dan Carter"
            ]
        ]
    },
    {
        "db_id": "school_bus",
        "query": "MATCH (driver:`school_bus.driver`)\nRETURN DISTINCT driver.Home_city",
        "question": "Show all different home cities.",
        "answers": [
            [
                "Hartford"
            ],
            [
                "Bethel"
            ],
            [
                "Coventry"
            ],
            [
                "East Hartford"
            ],
            [
                "Manchester"
            ]
        ]
    },
    {
        "db_id": "school_bus",
        "query": "MATCH (driver:`school_bus.driver`)\nWHERE driver.Home_city = 'Hartford' AND driver.Age > 40\nRETURN driver.Party",
        "question": "Show the party with drivers from Hartford and drivers older than 40.",
        "answers": [
            [
                "Dem"
            ],
            [
                "Dem"
            ],
            [
                "Dem"
            ],
            [
                "Dem"
            ]
        ]
    },
    {
        "db_id": "school_bus",
        "query": "MATCH (driver:`school_bus.driver`)\nWHERE driver.Age > 40\nWITH count(*) AS count, driver.Home_city AS Home_city\nWHERE count  >= 2\nRETURN Home_city",
        "question": "Show home city where at least two drivers older than 40 are from.",
        "answers": [
            [
                "Hartford"
            ]
        ]
    },
    {
        "db_id": "school_bus",
        "query": "MATCH (school:`school_bus.school`)\nWITH count(*) AS count, school.Type AS Type\nWHERE count  = 2\nRETURN Type",
        "question": "Show the types of schools that have two schools.",
        "answers": [
            [
                "Public"
            ]
        ]
    },
    {
        "db_id": "school_bus",
        "query": "MATCH (T2:`school_bus.school`)-[T1:`school_bus.school_bus`]-(T3:`school_bus.driver`)\nRETURN T2.School,T3.Name",
        "question": "Show the school name and driver name for all school buses.",
        "answers": [
            [
                "Noelani Elementary School",
                "Henry Genga"
            ],
            [
                "State Elementary School Menteng 01",
                "Angel Acre"
            ],
            [
                "Punahou School",
                "Minnie Gonzalez"
            ],
            [
                "Occidental College",
                "Douglas McCrory"
            ],
            [
                "Harvard Law School",
                "Jason Rojas"
            ]
        ]
    },
    {
        "db_id": "school_bus",
        "query": "MATCH ()-[school_bus:`school_bus.school_bus`]-()\nRETURN max(school_bus.Years_Working),min(school_bus.Years_Working),avg(school_bus.Years_Working)",
        "question": "What is the maximum, minimum and average years spent working on a school bus?",
        "answers": [
            [
                10,
                2,
                5.8
            ]
        ]
    },
    {
        "db_id": "school_bus",
        "query": "MATCH (T2:`school_bus.school`)-[T1:`school_bus.school_bus`]-()\nRETURN T2.Type,count(*)",
        "question": "Show the type of school and the number of buses for each type.",
        "answers": [
            [
                "Public",
                2
            ],
            [
                "Private",
                3
            ]
        ]
    },
    {
        "db_id": "school_bus",
        "query": "MATCH (driver:`school_bus.driver`)\nWHERE driver.Home_city = 'Hartford' OR driver.Age < 40\nRETURN count(*)",
        "question": "How many drivers are from Hartford city or younger than 40?",
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "db_id": "school_bus",
        "query": "MATCH (driver:`school_bus.driver`)\nWHERE driver.Home_city = 'Hartford' AND driver.Age < 40\nRETURN driver.Name",
        "question": "List names for drivers from Hartford city and younger than 40.",
        "answers": [
            [
                "Douglas McCrory"
            ]
        ]
    },
    {
        "db_id": "school_bus",
        "query": "MATCH (t1:`school_bus.driver`)-[t2:`school_bus.school_bus`]-()\nRETURN t1.Name\nORDER BY t2.Years_Working DESC\nLIMIT 1",
        "question": "find the name of driver who is driving the school bus with the longest working history.",
        "answers": [
            [
                "Henry Genga"
            ]
        ]
    },
    {
        "db_id": "flight_company",
        "query": "MATCH (flight:`flight_company.flight`)\nWHERE flight.Velocity > 200\nRETURN count(*)",
        "question": "How many flights have a velocity larger than 200?",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "flight_company",
        "query": "MATCH (flight:`flight_company.flight`)\nRETURN flight.Vehicle_Flight_number,flight.Date,flight.Pilot\nORDER BY flight.Altitude ASC",
        "question": "List the vehicle flight number, date and pilot of all the flights, ordered by altitude.",
        "answers": [
            [
                "M2-F1 #0",
                "March 1, 1963",
                "Thompson"
            ],
            [
                "M2-F1 #1",
                "August 16, 1963",
                "Thompson"
            ],
            [
                "M2-F1 #6",
                "September 3, 1963",
                "Thompson"
            ],
            [
                "M2-F1 #13",
                "October 25, 1963",
                "Thompson"
            ],
            [
                "M2-F1 #14",
                "November 8, 1963",
                "Thompson"
            ],
            [
                "M2-F1 #21",
                "January 29, 1964",
                "Thompson"
            ],
            [
                "M2-F1 #33",
                "March 30, 1964",
                "Peterson"
            ],
            [
                "M2-F1 #39",
                "May 19, 1964",
                "Peterson"
            ],
            [
                "M2-F1 #61",
                "July 16, 1965",
                "Thompson"
            ],
            [
                "M2-F1 #64",
                "August 30, 1965",
                "Thompson"
            ],
            [
                "M2-F1 #70",
                "October 8, 1965",
                "Thompson"
            ],
            [
                "M2-F1 #71",
                "March 28, 1966",
                "Thompson"
            ],
            [
                "M2-F1 #73",
                "August 4, 1966",
                "Peterson"
            ]
        ]
    },
    {
        "db_id": "flight_company",
        "query": "MATCH (airport:`flight_company.airport`)\nRETURN airport.id,airport.Country,airport.City,airport.name\nORDER BY airport.name",
        "question": "List the id, country, city and name of the airports ordered alphabetically by the name.",
        "answers": [
            [
                1,
                "Iceland",
                "Akureyri",
                "Akureyri Airport"
            ],
            [
                4,
                "United States",
                "Baltimore",
                "Baltimore-Washington Airport"
            ],
            [
                6,
                "Norway",
                "Bergen",
                "Bergen Airport"
            ],
            [
                7,
                "Denmark",
                "Billund",
                "Billund Airport"
            ],
            [
                5,
                "Spain",
                "Barcelona",
                "El Prat Airport"
            ],
            [
                8,
                "United States",
                "Boston",
                "Logan International Airport"
            ],
            [
                9,
                "Belgium",
                "Brussels",
                "National Airport"
            ],
            [
                2,
                "Netherlands",
                "Amsterdam",
                "Schiphol Airport"
            ],
            [
                3,
                "United States",
                "Anchorage",
                "Ted Stevens Airport"
            ]
        ]
    },
    {
        "db_id": "flight_company",
        "query": "MATCH (operate_company:`flight_company.operate_company`)\nRETURN max(operate_company.Group_Equity_Shareholding)",
        "question": "What is maximum group equity shareholding of the companies?",
        "answers": [
            [
                100.0
            ]
        ]
    },
    {
        "db_id": "flight_company",
        "query": "MATCH (flight:`flight_company.flight`)\nWHERE flight.Pilot = 'Thompson'\nRETURN avg(flight.Velocity)",
        "question": "What is the velocity of the pilot named 'Thompson'?",
        "answers": [
            [
                229.5
            ]
        ]
    },
    {
        "db_id": "flight_company",
        "query": "MATCH (T1:`flight_company.operate_company`)-[]-(t2:`flight_company.flight`)\nRETURN T1.name,T1.Type",
        "question": "What are the names and types of the companies that have ever operated a flight?",
        "answers": [
            [
                "Air China",
                "Corporate"
            ],
            [
                "Air China Cargo",
                "Joint Venture"
            ],
            [
                "Air Hong Kong",
                "Joint Venture"
            ],
            [
                "Dragonair",
                "Subsidiary"
            ],
            [
                "Dragonair",
                "Subsidiary"
            ],
            [
                "Cathay Pacific Cargo",
                "Subsidiary"
            ],
            [
                "Cathay Pacific Cargo",
                "Subsidiary"
            ],
            [
                "Cathay Pacific Catering Services (HK) Limited",
                "Subsidiary"
            ],
            [
                "Cathay Pacific Services Limited",
                "Subsidiary"
            ],
            [
                "Dragonair Holidays",
                "Subsidiary"
            ],
            [
                "Vogue Laundry Service Limited",
                "Subsidiary"
            ],
            [
                "Vogue Laundry Service Limited",
                "Subsidiary"
            ],
            [
                "VN/CX Catering Services Limited",
                "Joint Venture"
            ]
        ]
    },
    {
        "db_id": "flight_company",
        "query": "MATCH (airport:`flight_company.airport`)\nWHERE airport.Country <> 'Iceland'\nRETURN airport.name",
        "question": "What are the names of the airports which are not in the country 'Iceland'?",
        "answers": [
            [
                "Schiphol Airport"
            ],
            [
                "Ted Stevens Airport"
            ],
            [
                "Baltimore-Washington Airport"
            ],
            [
                "El Prat Airport"
            ],
            [
                "Bergen Airport"
            ],
            [
                "Billund Airport"
            ],
            [
                "Logan International Airport"
            ],
            [
                "National Airport"
            ]
        ]
    },
    {
        "db_id": "flight_company",
        "query": "MATCH (T1:`flight_company.operate_company`)-[]-(t2:`flight_company.flight`)\nWITH T1.name AS name, count(*) AS count, T1.id AS id\nWHERE count  > 1\nRETURN id,name",
        "question": "What are the ids and names of the companies that operated more than one flight?",
        "answers": [
            [
                4,
                "Dragonair"
            ],
            [
                5,
                "Cathay Pacific Cargo"
            ],
            [
                11,
                "Vogue Laundry Service Limited"
            ]
        ]
    },
    {
        "db_id": "flight_company",
        "query": "MATCH (T1:`flight_company.airport`)-[]-(T2:`flight_company.flight`)\nWHERE T1.Country = 'United States' OR T1.name = 'Billund Airport'\nRETURN DISTINCT T2.Pilot",
        "question": "What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?",
        "answers": [
            [
                "Thompson"
            ],
            [
                "Peterson"
            ]
        ]
    },
    {
        "db_id": "flight_company",
        "query": "MATCH (operate_company:`flight_company.operate_company`)\nRETURN operate_company.Type,count(*)\nORDER BY operate_company.Type DESC\nLIMIT 1",
        "question": "What is the most common company type, and how many are there?",
        "answers": [
            [
                "Subsidiary",
                8
            ]
        ]
    },
    {
        "db_id": "flight_company",
        "query": "MATCH (airport:`flight_company.airport`)\nWHERE airport.name =~'.*[I|i]nternational.*'\nRETURN airport.name",
        "question": "Which of the airport names contains the word 'international'?",
        "answers": [
            [
                "Logan International Airport"
            ]
        ]
    },
    {
        "db_id": "flight_company",
        "query": "MATCH (T1:`flight_company.operate_company`)-[]-(t2:`flight_company.flight`)-[]-(T3:`flight_company.airport`)\nRETURN T3.id,count(*)",
        "question": "How many companies operates airlines in each airport?",
        "answers": [
            [
                1,
                1
            ],
            [
                2,
                3
            ],
            [
                3,
                1
            ],
            [
                4,
                3
            ],
            [
                5,
                1
            ],
            [
                6,
                2
            ],
            [
                8,
                1
            ],
            [
                9,
                1
            ]
        ]
    },
    {
        "db_id": "flight_company",
        "query": "MATCH (airport:`flight_company.airport`)\nRETURN count(*),airport.Country",
        "question": "how many airports are there in each country?",
        "answers": [
            [
                1,
                "Iceland"
            ],
            [
                1,
                "Netherlands"
            ],
            [
                3,
                "United States"
            ],
            [
                1,
                "Spain"
            ],
            [
                1,
                "Norway"
            ],
            [
                1,
                "Denmark"
            ],
            [
                1,
                "Belgium"
            ]
        ]
    },
    {
        "db_id": "flight_company",
        "query": "MATCH (airport:`flight_company.airport`)\nWITH count(*) AS count, airport.Country AS Country\nWHERE count  > 2\nRETURN Country",
        "question": "which countries have more than 2 airports?",
        "answers": [
            [
                "United States"
            ]
        ]
    },
    {
        "db_id": "flight_company",
        "query": "MATCH (flight:`flight_company.flight`)\nRETURN flight.Pilot\nORDER BY flight.Pilot DESC\nLIMIT 1",
        "question": "which pilot is in charge of the most number of flights?",
        "answers": [
            [
                "Thompson"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (accounts:`cre_Docs_and_Epenses.Accounts`)\nRETURN count(*)",
        "question": "How many accounts do we have?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (accounts:`cre_Docs_and_Epenses.Accounts`)\nRETURN count(*)",
        "question": "Count the number of accounts.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (accounts:`cre_Docs_and_Epenses.Accounts`)\nRETURN accounts.Account_ID,accounts.Account_Details",
        "question": "Show all account ids and account details.",
        "answers": [
            [
                7,
                "495.063"
            ],
            [
                61,
                "930.14"
            ],
            [
                98,
                "6035.84"
            ],
            [
                136,
                "199.52"
            ],
            [
                164,
                "12223.93"
            ],
            [
                209,
                "11130.23"
            ],
            [
                211,
                "1230.454"
            ],
            [
                240,
                "6352.31"
            ],
            [
                262,
                "147.96"
            ],
            [
                280,
                "187.14"
            ],
            [
                321,
                "745.817"
            ],
            [
                346,
                "127.9"
            ],
            [
                414,
                "25.41"
            ],
            [
                427,
                "1168.32"
            ],
            [
                451,
                "658.26"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (accounts:`cre_Docs_and_Epenses.Accounts`)\nRETURN accounts.Account_ID,accounts.Account_Details",
        "question": "What are the ids and details of all accounts?",
        "answers": [
            [
                7,
                "495.063"
            ],
            [
                61,
                "930.14"
            ],
            [
                98,
                "6035.84"
            ],
            [
                136,
                "199.52"
            ],
            [
                164,
                "12223.93"
            ],
            [
                209,
                "11130.23"
            ],
            [
                211,
                "1230.454"
            ],
            [
                240,
                "6352.31"
            ],
            [
                262,
                "147.96"
            ],
            [
                280,
                "187.14"
            ],
            [
                321,
                "745.817"
            ],
            [
                346,
                "127.9"
            ],
            [
                414,
                "25.41"
            ],
            [
                427,
                "1168.32"
            ],
            [
                451,
                "658.26"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (statements:`cre_Docs_and_Epenses.Statements`)\nRETURN count(*)",
        "question": "How many statements do we have?",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (statements:`cre_Docs_and_Epenses.Statements`)\nRETURN count(*)",
        "question": "Count the number of statements.",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (statements:`cre_Docs_and_Epenses.Statements`)\nRETURN statements.Statement_ID,statements.Statement_Details",
        "question": "List all statement ids and statement details.",
        "answers": [
            [
                57,
                "Open Project"
            ],
            [
                192,
                "Private Project"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (statements:`cre_Docs_and_Epenses.Statements`)\nRETURN statements.Statement_ID,statements.Statement_Details",
        "question": "What are the ids and details of all statements?",
        "answers": [
            [
                57,
                "Open Project"
            ],
            [
                192,
                "Private Project"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (T1:`cre_Docs_and_Epenses.Accounts`)-[]-(T2:`cre_Docs_and_Epenses.Statements`)\nRETURN T1.Statement_ID,T2.Statement_Details,T1.Account_Details",
        "question": "Show statement id, statement detail, account detail for accounts.",
        "answers": [
            [
                57,
                "Open Project",
                "25.41"
            ],
            [
                57,
                "Open Project",
                "147.96"
            ],
            [
                57,
                "Open Project",
                "6035.84"
            ],
            [
                57,
                "Open Project",
                "1168.32"
            ],
            [
                57,
                "Open Project",
                "199.52"
            ],
            [
                57,
                "Open Project",
                "495.063"
            ],
            [
                57,
                "Open Project",
                "930.14"
            ],
            [
                57,
                "Open Project",
                "187.14"
            ],
            [
                57,
                "Open Project",
                "11130.23"
            ],
            [
                192,
                "Private Project",
                "658.26"
            ],
            [
                192,
                "Private Project",
                "6352.31"
            ],
            [
                192,
                "Private Project",
                "127.9"
            ],
            [
                192,
                "Private Project",
                "12223.93"
            ],
            [
                192,
                "Private Project",
                "745.817"
            ],
            [
                192,
                "Private Project",
                "1230.454"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (T1:`cre_Docs_and_Epenses.Accounts`)-[]-(T2:`cre_Docs_and_Epenses.Statements`)\nRETURN T1.Statement_ID,T2.Statement_Details,T1.Account_Details",
        "question": "What are the statement ids, statement details, and account details, for all accounts?",
        "answers": [
            [
                57,
                "Open Project",
                "25.41"
            ],
            [
                57,
                "Open Project",
                "147.96"
            ],
            [
                57,
                "Open Project",
                "6035.84"
            ],
            [
                57,
                "Open Project",
                "1168.32"
            ],
            [
                57,
                "Open Project",
                "199.52"
            ],
            [
                57,
                "Open Project",
                "495.063"
            ],
            [
                57,
                "Open Project",
                "930.14"
            ],
            [
                57,
                "Open Project",
                "187.14"
            ],
            [
                57,
                "Open Project",
                "11130.23"
            ],
            [
                192,
                "Private Project",
                "658.26"
            ],
            [
                192,
                "Private Project",
                "6352.31"
            ],
            [
                192,
                "Private Project",
                "127.9"
            ],
            [
                192,
                "Private Project",
                "12223.93"
            ],
            [
                192,
                "Private Project",
                "745.817"
            ],
            [
                192,
                "Private Project",
                "1230.454"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (accounts:`cre_Docs_and_Epenses.Accounts`)\nRETURN accounts.Statement_ID,count(*)",
        "question": "Show all statement id and the number of accounts for each statement.",
        "answers": [
            [
                57,
                9
            ],
            [
                192,
                6
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (accounts:`cre_Docs_and_Epenses.Accounts`)\nRETURN accounts.Statement_ID,count(*)",
        "question": "What are the different statement ids on accounts, and the number of accounts for each?",
        "answers": [
            [
                57,
                9
            ],
            [
                192,
                6
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (T1:`cre_Docs_and_Epenses.Accounts`)-[]-(T2:`cre_Docs_and_Epenses.Statements`)\nWITH count(T1.Statement_ID) AS cnt, T1, T2\nRETURN T1.Statement_ID,T2.Statement_Details\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Show the statement id and the statement detail for the statement with most number of accounts.",
        "answers": [
            [
                57,
                "Open Project"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (T1:`cre_Docs_and_Epenses.Accounts`)-[]-(T2:`cre_Docs_and_Epenses.Statements`)\nWITH count(T1.Statement_ID) AS cnt, T1, T2\nRETURN T1.Statement_ID,T2.Statement_Details\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What are the statement id and statement detail for the statement that has the most corresponding accounts?",
        "answers": [
            [
                57,
                "Open Project"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nRETURN count(*)",
        "question": "Show the number of documents.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nRETURN count(*)",
        "question": "Count the number of documents.",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nWHERE documents.Document_Name = 'Noel CV' OR documents.Document_Name = 'King Book'\nRETURN documents.Document_Type_Code,documents.Document_Name,documents.Document_Description",
        "question": "List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.",
        "answers": [
            [
                "BK",
                "Noel CV",
                null
            ],
            [
                "PP",
                "King Book",
                null
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nWHERE documents.Document_Name = 'Noel CV' OR documents.Document_Name = 'King Book'\nRETURN documents.Document_Type_Code,documents.Document_Name,documents.Document_Description",
        "question": "What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?",
        "answers": [
            [
                "BK",
                "Noel CV",
                null
            ],
            [
                "PP",
                "King Book",
                null
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nRETURN documents.Document_ID,documents.Document_Name",
        "question": "Show the ids and names of all documents.",
        "answers": [
            [
                29,
                "Review on UK files"
            ],
            [
                42,
                "Review on Canadian files"
            ],
            [
                57,
                "Review on French files"
            ],
            [
                121,
                "Review on USA files"
            ],
            [
                181,
                "Chapter on private files"
            ],
            [
                192,
                "Book on USA files"
            ],
            [
                226,
                "Review on UK files"
            ],
            [
                227,
                "Deontae files"
            ],
            [
                240,
                "Winona Book"
            ],
            [
                300,
                "Trenton Presentation"
            ],
            [
                309,
                "Noel CV"
            ],
            [
                318,
                "King Book"
            ],
            [
                367,
                "Jevon Paper"
            ],
            [
                371,
                "Katheryn statement"
            ],
            [
                383,
                "Review on UK files"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nRETURN documents.Document_ID,documents.Document_Name",
        "question": "What are the ids and names for each of the documents?",
        "answers": [
            [
                29,
                "Review on UK files"
            ],
            [
                42,
                "Review on Canadian files"
            ],
            [
                57,
                "Review on French files"
            ],
            [
                121,
                "Review on USA files"
            ],
            [
                181,
                "Chapter on private files"
            ],
            [
                192,
                "Book on USA files"
            ],
            [
                226,
                "Review on UK files"
            ],
            [
                227,
                "Deontae files"
            ],
            [
                240,
                "Winona Book"
            ],
            [
                300,
                "Trenton Presentation"
            ],
            [
                309,
                "Noel CV"
            ],
            [
                318,
                "King Book"
            ],
            [
                367,
                "Jevon Paper"
            ],
            [
                371,
                "Katheryn statement"
            ],
            [
                383,
                "Review on UK files"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nRETURN documents.Project_ID,count(*)",
        "question": "Show project ids and the number of documents in each project.",
        "answers": [
            [
                30,
                3
            ],
            [
                105,
                5
            ],
            [
                195,
                1
            ],
            [
                134,
                3
            ],
            [
                35,
                3
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nRETURN documents.Project_ID,count(*)",
        "question": "How many documents correspond with each project id?",
        "answers": [
            [
                30,
                3
            ],
            [
                105,
                5
            ],
            [
                195,
                1
            ],
            [
                134,
                3
            ],
            [
                35,
                3
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nWITH documents.Project_ID AS Project_ID, count(*) AS count\nWHERE count  >= 2\nRETURN Project_ID",
        "question": "Show the ids for projects with at least 2 documents.",
        "answers": [
            [
                30
            ],
            [
                105
            ],
            [
                134
            ],
            [
                35
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nWITH documents.Project_ID AS Project_ID, count(*) AS count\nWHERE count  >= 2\nRETURN Project_ID",
        "question": "What are project ids of projects that have 2 or more corresponding documents?",
        "answers": [
            [
                30
            ],
            [
                105
            ],
            [
                134
            ],
            [
                35
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nRETURN documents.Document_Type_Code,count(*)",
        "question": "List document type codes and the number of documents in each code.",
        "answers": [
            [
                "CV",
                3
            ],
            [
                "BK",
                6
            ],
            [
                "PP",
                5
            ],
            [
                "FM",
                1
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nRETURN documents.Document_Type_Code,count(*)",
        "question": "How many documents are there of each type?",
        "answers": [
            [
                "CV",
                3
            ],
            [
                "BK",
                6
            ],
            [
                "PP",
                5
            ],
            [
                "FM",
                1
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nWITH count(*) AS count, documents.Document_Type_Code AS Document_Type_Code\nWHERE count  < 3\nRETURN Document_Type_Code",
        "question": "Show the document type code with fewer than 3 documents.",
        "answers": [
            [
                "FM"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nWITH count(*) AS count, documents.Document_Type_Code AS Document_Type_Code\nWHERE count  < 3\nRETURN Document_Type_Code",
        "question": "What are the codes corresponding to document types for which there are less than 3 documents?",
        "answers": [
            [
                "FM"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (T1:`cre_Docs_and_Epenses.Statements`)-[]-(T2:`cre_Docs_and_Epenses.Documents`)\nWHERE T1.Statement_Details = 'Private Project'\nRETURN T1.Statement_Details,T2.Document_Name",
        "question": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.",
        "answers": [
            [
                "Private Project",
                "Book on USA files"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (T1:`cre_Docs_and_Epenses.Statements`)-[]-(T2:`cre_Docs_and_Epenses.Documents`)\nWHERE T1.Statement_Details = 'Private Project'\nRETURN T1.Statement_Details,T2.Document_Name",
        "question": "What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents?",
        "answers": [
            [
                "Private Project",
                "Book on USA files"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (ref_document_types:`cre_Docs_and_Epenses.Ref_Document_Types`)\nRETURN ref_document_types.Document_Type_Code,ref_document_types.Document_Type_Name,ref_document_types.Document_Type_Description",
        "question": "Show all document type codes, document type names, document type descriptions.",
        "answers": [
            [
                "BK",
                "Book",
                "excellent"
            ],
            [
                "CV",
                "CV",
                "excellent"
            ],
            [
                "PT",
                "Presentation",
                "very good"
            ],
            [
                "PP",
                "Paper",
                "good"
            ],
            [
                "FM",
                "Film",
                "fun"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (ref_document_types:`cre_Docs_and_Epenses.Ref_Document_Types`)\nRETURN ref_document_types.Document_Type_Code,ref_document_types.Document_Type_Name,ref_document_types.Document_Type_Description",
        "question": "What are the codes, names, and descriptions of the different document types?",
        "answers": [
            [
                "BK",
                "Book",
                "excellent"
            ],
            [
                "CV",
                "CV",
                "excellent"
            ],
            [
                "PT",
                "Presentation",
                "very good"
            ],
            [
                "PP",
                "Paper",
                "good"
            ],
            [
                "FM",
                "Film",
                "fun"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (T1:`cre_Docs_and_Epenses.Ref_Document_Types`)-[]-(T2:`cre_Docs_and_Epenses.Documents`)\nRETURN T1.Document_Type_Name,T1.Document_Type_Description,T2.Document_Date",
        "question": "What is the document type name and the document type description and creation date for all the documents?",
        "answers": [
            [
                "Book",
                "excellent",
                "1970-03-06 07:34:49"
            ],
            [
                "Book",
                "excellent",
                "1971-06-09 19:03:41"
            ],
            [
                "Book",
                "excellent",
                "2012-12-27 19:09:18"
            ],
            [
                "Book",
                "excellent",
                "1981-11-29 10:23:01"
            ],
            [
                "Book",
                "excellent",
                "1991-07-08 08:49:59"
            ],
            [
                "Book",
                "excellent",
                "1978-10-15 10:33:17"
            ],
            [
                "CV",
                "excellent",
                "1983-08-24 17:10:26"
            ],
            [
                "CV",
                "excellent",
                "2004-08-28 06:59:19"
            ],
            [
                "CV",
                "excellent",
                "1980-10-22 14:17:11"
            ],
            [
                "Paper",
                "good",
                "1970-01-30 10:53:35"
            ],
            [
                "Paper",
                "good",
                "2013-01-26 15:15:25"
            ],
            [
                "Paper",
                "good",
                "2005-10-28 03:17:16"
            ],
            [
                "Paper",
                "good",
                "1976-05-06 12:56:12"
            ],
            [
                "Paper",
                "good",
                "1970-06-17 14:03:21"
            ],
            [
                "Film",
                "fun",
                "2007-09-26 02:39:11"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (T1:`cre_Docs_and_Epenses.Ref_Document_Types`)-[]-(T2:`cre_Docs_and_Epenses.Documents`)\nRETURN T1.Document_Type_Name,T1.Document_Type_Description,T2.Document_Date",
        "question": "Return the type name, type description, and date of creation for each document.",
        "answers": [
            [
                "Book",
                "excellent",
                "1970-03-06 07:34:49"
            ],
            [
                "Book",
                "excellent",
                "1971-06-09 19:03:41"
            ],
            [
                "Book",
                "excellent",
                "2012-12-27 19:09:18"
            ],
            [
                "Book",
                "excellent",
                "1981-11-29 10:23:01"
            ],
            [
                "Book",
                "excellent",
                "1991-07-08 08:49:59"
            ],
            [
                "Book",
                "excellent",
                "1978-10-15 10:33:17"
            ],
            [
                "CV",
                "excellent",
                "1983-08-24 17:10:26"
            ],
            [
                "CV",
                "excellent",
                "2004-08-28 06:59:19"
            ],
            [
                "CV",
                "excellent",
                "1980-10-22 14:17:11"
            ],
            [
                "Paper",
                "good",
                "1970-01-30 10:53:35"
            ],
            [
                "Paper",
                "good",
                "2013-01-26 15:15:25"
            ],
            [
                "Paper",
                "good",
                "2005-10-28 03:17:16"
            ],
            [
                "Paper",
                "good",
                "1976-05-06 12:56:12"
            ],
            [
                "Paper",
                "good",
                "1970-06-17 14:03:21"
            ],
            [
                "Film",
                "fun",
                "2007-09-26 02:39:11"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (projects:`cre_Docs_and_Epenses.Projects`)\nRETURN count(*)",
        "question": "Show the number of projects.",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (projects:`cre_Docs_and_Epenses.Projects`)\nRETURN count(*)",
        "question": "How many projects are there?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (projects:`cre_Docs_and_Epenses.Projects`)\nRETURN projects.Project_ID,projects.Project_Details",
        "question": "List ids and details for all projects.",
        "answers": [
            [
                30,
                "Society Research project"
            ],
            [
                35,
                "Internet of Things project"
            ],
            [
                105,
                "Graph Database project"
            ],
            [
                134,
                "Human Resource project"
            ],
            [
                195,
                "Population Research project"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (projects:`cre_Docs_and_Epenses.Projects`)\nRETURN projects.Project_ID,projects.Project_Details",
        "question": "What are the ids and details for each project?",
        "answers": [
            [
                30,
                "Society Research project"
            ],
            [
                35,
                "Internet of Things project"
            ],
            [
                105,
                "Graph Database project"
            ],
            [
                134,
                "Human Resource project"
            ],
            [
                195,
                "Population Research project"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (T1:`cre_Docs_and_Epenses.Projects`)-[]-(T2:`cre_Docs_and_Epenses.Documents`)\nWITH count(*) AS count, T1.Project_Details AS Project_Details, T1.Project_ID AS Project_ID\nWHERE count  > 2\nRETURN Project_ID,Project_Details",
        "question": "What is the project id and detail for the project with at least two documents?",
        "answers": [
            [
                30,
                "Society Research project"
            ],
            [
                35,
                "Internet of Things project"
            ],
            [
                105,
                "Graph Database project"
            ],
            [
                134,
                "Human Resource project"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (T1:`cre_Docs_and_Epenses.Projects`)-[]-(T2:`cre_Docs_and_Epenses.Documents`)\nWITH count(*) AS count, T1.Project_Details AS Project_Details, T1.Project_ID AS Project_ID\nWHERE count  > 2\nRETURN Project_ID,Project_Details",
        "question": "Return the ids and details corresponding to projects for which there are more than two documents.",
        "answers": [
            [
                30,
                "Society Research project"
            ],
            [
                35,
                "Internet of Things project"
            ],
            [
                105,
                "Graph Database project"
            ],
            [
                134,
                "Human Resource project"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (T1:`cre_Docs_and_Epenses.Projects`)-[]-(T2:`cre_Docs_and_Epenses.Documents`)\nWHERE T2.Document_Name = \"King Book\"\nRETURN T1.Project_Details",
        "question": "What is the project detail for the project with document \"King Book\"?",
        "answers": [
            [
                "Human Resource project"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (T1:`cre_Docs_and_Epenses.Projects`)-[]-(T2:`cre_Docs_and_Epenses.Documents`)\nWHERE T2.Document_Name = \"King Book\"\nRETURN T1.Project_Details",
        "question": "Give the details of the project with the document name 'King Book'.",
        "answers": [
            [
                "Human Resource project"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (ref_budget_codes:`cre_Docs_and_Epenses.Ref_Budget_Codes`)\nRETURN count(*)",
        "question": "How many budget types do we have?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (ref_budget_codes:`cre_Docs_and_Epenses.Ref_Budget_Codes`)\nRETURN count(*)",
        "question": "Count the number of budget codes.",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (ref_budget_codes:`cre_Docs_and_Epenses.Ref_Budget_Codes`)\nRETURN ref_budget_codes.Budget_Type_Code,ref_budget_codes.Budget_Type_Description",
        "question": "List all budget type codes and descriptions.",
        "answers": [
            [
                "GV",
                "Government"
            ],
            [
                "ORG",
                "Organisation"
            ],
            [
                "SF",
                "Self founded"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (ref_budget_codes:`cre_Docs_and_Epenses.Ref_Budget_Codes`)\nRETURN ref_budget_codes.Budget_Type_Code,ref_budget_codes.Budget_Type_Description",
        "question": "What are the type codes and descriptions of each budget type?",
        "answers": [
            [
                "GV",
                "Government"
            ],
            [
                "ORG",
                "Organisation"
            ],
            [
                "SF",
                "Self founded"
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (documents_with_expenses:`cre_Docs_and_Epenses.Documents_with_Expenses`)\nRETURN count(*)",
        "question": "How many documents have expenses?",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (documents_with_expenses:`cre_Docs_and_Epenses.Documents_with_Expenses`)\nRETURN count(*)",
        "question": "Count the number of documents with expenses.",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (documents_with_expenses:`cre_Docs_and_Epenses.Documents_with_Expenses`)\nWHERE documents_with_expenses.Budget_Type_Code = 'SF'\nRETURN documents_with_expenses.Document_ID",
        "question": "What are the document ids for the budget type code 'SF'?",
        "answers": [
            [
                309
            ],
            [
                367
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (documents_with_expenses:`cre_Docs_and_Epenses.Documents_with_Expenses`)\nWHERE documents_with_expenses.Budget_Type_Code = 'SF'\nRETURN documents_with_expenses.Document_ID",
        "question": "Give the ids of documents with expenses that have the budget code 'SF'.",
        "answers": [
            [
                309
            ],
            [
                367
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (T1:`cre_Docs_and_Epenses.Documents_with_Expenses`)-[]-(T2:`cre_Docs_and_Epenses.Ref_Budget_Codes`)\nRETURN T2.Budget_Type_Code,T2.Budget_Type_Description,T1.Document_ID",
        "question": "Show the budget type code and description and the corresponding document id.",
        "answers": [
            [
                "GV",
                "Government",
                192
            ],
            [
                "GV",
                "Government",
                226
            ],
            [
                "GV",
                "Government",
                227
            ],
            [
                "GV",
                "Government",
                240
            ],
            [
                "GV",
                "Government",
                300
            ],
            [
                "GV",
                "Government",
                57
            ],
            [
                "ORG",
                "Organisation",
                371
            ],
            [
                "ORG",
                "Organisation",
                383
            ],
            [
                "SF",
                "Self founded",
                367
            ],
            [
                "SF",
                "Self founded",
                309
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (T1:`cre_Docs_and_Epenses.Documents_with_Expenses`)-[]-(T2:`cre_Docs_and_Epenses.Ref_Budget_Codes`)\nRETURN T2.Budget_Type_Code,T2.Budget_Type_Description,T1.Document_ID",
        "question": "Return the budget type codes, budget type descriptions and document ids for documents with expenses.",
        "answers": [
            [
                "GV",
                "Government",
                192
            ],
            [
                "GV",
                "Government",
                226
            ],
            [
                "GV",
                "Government",
                227
            ],
            [
                "GV",
                "Government",
                240
            ],
            [
                "GV",
                "Government",
                300
            ],
            [
                "GV",
                "Government",
                57
            ],
            [
                "ORG",
                "Organisation",
                371
            ],
            [
                "ORG",
                "Organisation",
                383
            ],
            [
                "SF",
                "Self founded",
                367
            ],
            [
                "SF",
                "Self founded",
                309
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (documents_with_expenses:`cre_Docs_and_Epenses.Documents_with_Expenses`)\nRETURN documents_with_expenses.Budget_Type_Code,count(*)",
        "question": "Show budget type codes and the number of documents in each budget type.",
        "answers": [
            [
                "GV",
                6
            ],
            [
                "SF",
                2
            ],
            [
                "ORG",
                2
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (documents_with_expenses:`cre_Docs_and_Epenses.Documents_with_Expenses`)\nRETURN documents_with_expenses.Budget_Type_Code,count(*)",
        "question": "What are the different budget type codes, and how many documents are there for each?",
        "answers": [
            [
                "GV",
                6
            ],
            [
                "SF",
                2
            ],
            [
                "ORG",
                2
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (T1:`cre_Docs_and_Epenses.Documents`)-[]-(T2:`cre_Docs_and_Epenses.Documents_with_Expenses`)\nWHERE T1.Document_Name =~'.*[S|s].*'\nRETURN T1.Document_ID",
        "question": "What are the ids of documents with letter 's' in the name with any expense budgets.",
        "answers": [
            [
                57
            ],
            [
                192
            ],
            [
                226
            ],
            [
                227
            ],
            [
                300
            ],
            [
                371
            ],
            [
                383
            ]
        ]
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "MATCH (T1:`cre_Docs_and_Epenses.Documents`)-[]-(T2:`cre_Docs_and_Epenses.Documents_with_Expenses`)\nWHERE T1.Document_Name =~'.*[S|s].*'\nRETURN T1.Document_ID",
        "question": "Give the ids of documents that have expenses and contain the letter s in their names.",
        "answers": [
            [
                57
            ],
            [
                192
            ],
            [
                226
            ],
            [
                227
            ],
            [
                300
            ],
            [
                371
            ],
            [
                383
            ]
        ]
    },
    {
        "db_id": "scientist_1",
        "query": "MATCH (scientists:`scientist_1.Scientists`)\nRETURN count(*)",
        "question": "Find the total number of scientists.",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "scientist_1",
        "query": "MATCH (scientists:`scientist_1.Scientists`)\nRETURN count(*)",
        "question": "How many scientists are there?",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "scientist_1",
        "query": "MATCH (projects:`scientist_1.Projects`)\nRETURN count(DISTINCT projects.Name)",
        "question": "Find the number of distinct projects.",
        "answers": [
            [
                14
            ]
        ]
    },
    {
        "db_id": "scientist_1",
        "query": "MATCH (projects:`scientist_1.Projects`)\nRETURN count(DISTINCT projects.Name)",
        "question": "How many different projects are there?",
        "answers": [
            [
                14
            ]
        ]
    },
    {
        "db_id": "scientist_1",
        "query": "MATCH (projects:`scientist_1.Projects`)\nRETURN projects.Name\nORDER BY projects.Hours DESC\nLIMIT 1",
        "question": "Find the name of project that continues for the longest time.",
        "answers": [
            [
                "A Magnetic Primer Designer"
            ]
        ]
    },
    {
        "db_id": "scientist_1",
        "query": "MATCH (projects:`scientist_1.Projects`)\nRETURN projects.Name\nORDER BY projects.Hours DESC\nLIMIT 1",
        "question": "What is the name of the project with the most hours?",
        "answers": [
            [
                "A Magnetic Primer Designer"
            ]
        ]
    },
    {
        "db_id": "scientist_1",
        "query": "MATCH (projects:`scientist_1.Projects`)\nWITH avg(projects.Hours) AS hours\nMATCH (projects:`scientist_1.Projects`)\nWHERE  projects.Hours >  hours \nRETURN projects.Name",
        "question": "List the name of all projects that are operated longer than the average working hours of all projects.",
        "answers": [
            [
                "Build Your Own Telescope"
            ],
            [
                "A Magnetic Primer Designer"
            ]
        ]
    },
    {
        "db_id": "scientist_1",
        "query": "MATCH (projects:`scientist_1.Projects`)\nWITH avg(projects.Hours) AS hours\nMATCH (projects:`scientist_1.Projects`)\nWHERE  projects.Hours >  hours \nRETURN projects.Name",
        "question": "What are the names of projects that have taken longer than the average number of hours for all projects?",
        "answers": [
            [
                "Build Your Own Telescope"
            ],
            [
                "A Magnetic Primer Designer"
            ]
        ]
    },
    {
        "db_id": "scientist_1",
        "query": "MATCH (T2:`scientist_1.Projects`)-[T1:`scientist_1.AssignedTo`]-(T3:`scientist_1.Scientists`)\nWHERE T3.Name =~'.*[S|s]mith.*'\nRETURN T2.Name",
        "question": "Find the name of the project for which a scientist whose name contains \u2018Smith\u2019 is assigned to.",
        "answers": [
            [
                "Build Your Own Telescope"
            ],
            [
                "Build Your Own Telescope"
            ],
            [
                "Aerodynamics and Gas Mileage"
            ]
        ]
    },
    {
        "db_id": "scientist_1",
        "query": "MATCH (T2:`scientist_1.Projects`)-[T1:`scientist_1.AssignedTo`]-(T3:`scientist_1.Scientists`)\nWHERE T3.Name =~'.*[S|s]mith.*'\nRETURN T2.Name",
        "question": "What is the name of the project that has a scientist assigned to it whose name contains 'Smith'?",
        "answers": [
            [
                "Build Your Own Telescope"
            ],
            [
                "Build Your Own Telescope"
            ],
            [
                "Aerodynamics and Gas Mileage"
            ]
        ]
    },
    {
        "db_id": "scientist_1",
        "query": "MATCH (projects:`scientist_1.Projects`)\nWHERE 100<=projects.Hours<=300\nRETURN projects.Name",
        "question": "Find the name of projects that require between 100 and 300 hours of work.",
        "answers": [
            [
                "Winds: Studying Bernoullis Principle"
            ],
            [
                "Aerodynamics and Bridge Design"
            ],
            [
                "Aerodynamics and Gas Mileage"
            ],
            [
                "A Matter of Time"
            ],
            [
                "A Puzzling Parallax"
            ]
        ]
    },
    {
        "db_id": "scientist_1",
        "query": "MATCH (projects:`scientist_1.Projects`)\nWHERE 100<=projects.Hours<=300\nRETURN projects.Name",
        "question": "What are the names of projects that require between 100 and 300 hours?",
        "answers": [
            [
                "Winds: Studying Bernoullis Principle"
            ],
            [
                "Aerodynamics and Bridge Design"
            ],
            [
                "Aerodynamics and Gas Mileage"
            ],
            [
                "A Matter of Time"
            ],
            [
                "A Puzzling Parallax"
            ]
        ]
    },
    {
        "db_id": "scientist_1",
        "query": "MATCH (scientists:`scientist_1.Scientists`)\nRETURN scientists.Name\nORDER BY scientists.Name",
        "question": "List the names of all scientists sorted in alphabetical order.",
        "answers": [
            [
                "Anand Manikutty"
            ],
            [
                "Carol Smith"
            ],
            [
                "David Smith"
            ],
            [
                "Elizabeth Doe"
            ],
            [
                "Eric Goldsmith"
            ],
            [
                "George ODonnell"
            ],
            [
                "Joe Stevens"
            ],
            [
                "John Doe"
            ],
            [
                "Kumar Swamy"
            ],
            [
                "Mary-Anne Foster"
            ],
            [
                "Michael Rogers"
            ],
            [
                "Zacary Efron"
            ]
        ]
    },
    {
        "db_id": "scientist_1",
        "query": "MATCH (scientists:`scientist_1.Scientists`)\nRETURN scientists.Name\nORDER BY scientists.Name",
        "question": "What are the names of all the scientists in alphabetical order?",
        "answers": [
            [
                "Anand Manikutty"
            ],
            [
                "Carol Smith"
            ],
            [
                "David Smith"
            ],
            [
                "Elizabeth Doe"
            ],
            [
                "Eric Goldsmith"
            ],
            [
                "George ODonnell"
            ],
            [
                "Joe Stevens"
            ],
            [
                "John Doe"
            ],
            [
                "Kumar Swamy"
            ],
            [
                "Mary-Anne Foster"
            ],
            [
                "Michael Rogers"
            ],
            [
                "Zacary Efron"
            ]
        ]
    },
    {
        "db_id": "scientist_1",
        "query": "MATCH (T1:`scientist_1.Projects`)-[T2:`scientist_1.AssignedTo`]-()\nRETURN count(*),T1.Name",
        "question": "Find the number of scientists involved for each project name.",
        "answers": [
            [
                1,
                "Winds: Studying Bernoullis Principle"
            ],
            [
                2,
                "Aerodynamics and Gas Mileage"
            ],
            [
                1,
                "Aerodynamics and Ice Hockey"
            ],
            [
                1,
                "A Matter of Time"
            ],
            [
                1,
                "A Puzzling Parallax"
            ],
            [
                3,
                "Build Your Own Telescope"
            ],
            [
                1,
                "Juicy: Extracting Apple Juice with Pectinase"
            ],
            [
                2,
                "A Silver-Cleaning Battery"
            ]
        ]
    },
    {
        "db_id": "scientist_1",
        "query": "MATCH (T1:`scientist_1.Projects`)-[T2:`scientist_1.AssignedTo`]-()\nRETURN count(*),T1.Name",
        "question": "What are the naems of all the projects, and how many scientists were assigned to each of them?",
        "answers": [
            [
                1,
                "Winds: Studying Bernoullis Principle"
            ],
            [
                2,
                "Aerodynamics and Gas Mileage"
            ],
            [
                1,
                "Aerodynamics and Ice Hockey"
            ],
            [
                1,
                "A Matter of Time"
            ],
            [
                1,
                "A Puzzling Parallax"
            ],
            [
                3,
                "Build Your Own Telescope"
            ],
            [
                1,
                "Juicy: Extracting Apple Juice with Pectinase"
            ],
            [
                2,
                "A Silver-Cleaning Battery"
            ]
        ]
    },
    {
        "db_id": "scientist_1",
        "query": "MATCH (T1:`scientist_1.Projects`)-[T2:`scientist_1.AssignedTo`]-()\nWHERE T1.Hours > 300\nRETURN count(*),T1.Name",
        "question": "Find the number of scientists involved for the projects that require more than 300 hours.",
        "answers": [
            [
                1,
                "Aerodynamics and Ice Hockey"
            ],
            [
                3,
                "Build Your Own Telescope"
            ],
            [
                1,
                "Juicy: Extracting Apple Juice with Pectinase"
            ],
            [
                2,
                "A Silver-Cleaning Battery"
            ]
        ]
    },
    {
        "db_id": "scientist_1",
        "query": "MATCH (T1:`scientist_1.Projects`)-[T2:`scientist_1.AssignedTo`]-()\nWHERE T1.Hours > 300\nRETURN count(*),T1.Name",
        "question": "What are the names of projects that require more than 300 hours, and how many scientists are assigned to each?",
        "answers": [
            [
                1,
                "Aerodynamics and Ice Hockey"
            ],
            [
                3,
                "Build Your Own Telescope"
            ],
            [
                1,
                "Juicy: Extracting Apple Juice with Pectinase"
            ],
            [
                2,
                "A Silver-Cleaning Battery"
            ]
        ]
    },
    {
        "db_id": "scientist_1",
        "query": "MATCH (T1:`scientist_1.Scientists`)-[T2:`scientist_1.AssignedTo`]-()\nRETURN count(*),T1.Name",
        "question": "Find the number of projects which each scientist is working on and scientist's name.",
        "answers": [
            [
                1,
                "Michael Rogers"
            ],
            [
                1,
                "Anand Manikutty"
            ],
            [
                1,
                "Carol Smith"
            ],
            [
                1,
                "Joe Stevens"
            ],
            [
                1,
                "Mary-Anne Foster"
            ],
            [
                1,
                "George ODonnell"
            ],
            [
                1,
                "John Doe"
            ],
            [
                1,
                "David Smith"
            ],
            [
                1,
                "Zacary Efron"
            ],
            [
                1,
                "Eric Goldsmith"
            ],
            [
                1,
                "Elizabeth Doe"
            ],
            [
                1,
                "Kumar Swamy"
            ]
        ]
    },
    {
        "db_id": "scientist_1",
        "query": "MATCH (T1:`scientist_1.Scientists`)-[T2:`scientist_1.AssignedTo`]-()\nRETURN count(*),T1.Name",
        "question": "What are the names of the scientists, and how many projects are each of them working on?",
        "answers": [
            [
                1,
                "Michael Rogers"
            ],
            [
                1,
                "Anand Manikutty"
            ],
            [
                1,
                "Carol Smith"
            ],
            [
                1,
                "Joe Stevens"
            ],
            [
                1,
                "Mary-Anne Foster"
            ],
            [
                1,
                "George ODonnell"
            ],
            [
                1,
                "John Doe"
            ],
            [
                1,
                "David Smith"
            ],
            [
                1,
                "Zacary Efron"
            ],
            [
                1,
                "Eric Goldsmith"
            ],
            [
                1,
                "Elizabeth Doe"
            ],
            [
                1,
                "Kumar Swamy"
            ]
        ]
    },
    {
        "db_id": "scientist_1",
        "query": "MATCH (T2:`scientist_1.Scientists`)-[T1:`scientist_1.AssignedTo`]-()\nRETURN T2.Name",
        "question": "Find the name of scientists who are assigned to some project.",
        "answers": [
            [
                "Michael Rogers"
            ],
            [
                "Anand Manikutty"
            ],
            [
                "Carol Smith"
            ],
            [
                "Joe Stevens"
            ],
            [
                "Mary-Anne Foster"
            ],
            [
                "George ODonnell"
            ],
            [
                "John Doe"
            ],
            [
                "David Smith"
            ],
            [
                "Zacary Efron"
            ],
            [
                "Eric Goldsmith"
            ],
            [
                "Elizabeth Doe"
            ],
            [
                "Kumar Swamy"
            ]
        ]
    },
    {
        "db_id": "scientist_1",
        "query": "MATCH (T2:`scientist_1.Scientists`)-[T1:`scientist_1.AssignedTo`]-()\nRETURN T2.Name",
        "question": "What are the names of scientists who are assigned to any project?",
        "answers": [
            [
                "Michael Rogers"
            ],
            [
                "Anand Manikutty"
            ],
            [
                "Carol Smith"
            ],
            [
                "Joe Stevens"
            ],
            [
                "Mary-Anne Foster"
            ],
            [
                "George ODonnell"
            ],
            [
                "John Doe"
            ],
            [
                "David Smith"
            ],
            [
                "Zacary Efron"
            ],
            [
                "Eric Goldsmith"
            ],
            [
                "Elizabeth Doe"
            ],
            [
                "Kumar Swamy"
            ]
        ]
    },
    {
        "db_id": "scientist_1",
        "query": "MATCH (T1:`scientist_1.Scientists`)-[T2:`scientist_1.AssignedTo`]-(T3:`scientist_1.Projects`)\nRETURN T1.Name,T3.Name,T3.Hours\nORDER BY T3.Name,T1.Name",
        "question": "List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name.",
        "answers": [
            [
                "Elizabeth Doe",
                "A Matter of Time",
                112
            ],
            [
                "Kumar Swamy",
                "A Puzzling Parallax",
                299
            ],
            [
                "John Doe",
                "A Silver-Cleaning Battery",
                545
            ],
            [
                "Zacary Efron",
                "A Silver-Cleaning Battery",
                545
            ],
            [
                "Anand Manikutty",
                "Aerodynamics and Gas Mileage",
                256
            ],
            [
                "Eric Goldsmith",
                "Aerodynamics and Gas Mileage",
                256
            ],
            [
                "George ODonnell",
                "Aerodynamics and Ice Hockey",
                789
            ],
            [
                "Carol Smith",
                "Build Your Own Telescope",
                6546
            ],
            [
                "David Smith",
                "Build Your Own Telescope",
                6546
            ],
            [
                "Joe Stevens",
                "Build Your Own Telescope",
                6546
            ],
            [
                "Mary-Anne Foster",
                "Juicy: Extracting Apple Juice with Pectinase",
                321
            ],
            [
                "Michael Rogers",
                "Winds: Studying Bernoullis Principle",
                156
            ]
        ]
    },
    {
        "db_id": "scientist_1",
        "query": "MATCH (T1:`scientist_1.Scientists`)-[T2:`scientist_1.AssignedTo`]-(T3:`scientist_1.Projects`)\nRETURN T1.Name,T3.Name,T3.Hours\nORDER BY T3.Name,T1.Name",
        "question": "What are the names of each scientist, the names of the projects that they work on, and the hours for each of those projects, listed in alphabetical order by project name, then scientist name.",
        "answers": [
            [
                "Elizabeth Doe",
                "A Matter of Time",
                112
            ],
            [
                "Kumar Swamy",
                "A Puzzling Parallax",
                299
            ],
            [
                "John Doe",
                "A Silver-Cleaning Battery",
                545
            ],
            [
                "Zacary Efron",
                "A Silver-Cleaning Battery",
                545
            ],
            [
                "Anand Manikutty",
                "Aerodynamics and Gas Mileage",
                256
            ],
            [
                "Eric Goldsmith",
                "Aerodynamics and Gas Mileage",
                256
            ],
            [
                "George ODonnell",
                "Aerodynamics and Ice Hockey",
                789
            ],
            [
                "Carol Smith",
                "Build Your Own Telescope",
                6546
            ],
            [
                "David Smith",
                "Build Your Own Telescope",
                6546
            ],
            [
                "Joe Stevens",
                "Build Your Own Telescope",
                6546
            ],
            [
                "Mary-Anne Foster",
                "Juicy: Extracting Apple Juice with Pectinase",
                321
            ],
            [
                "Michael Rogers",
                "Winds: Studying Bernoullis Principle",
                156
            ]
        ]
    },
    {
        "db_id": "wine_1",
        "query": "MATCH ()-[wine:`wine_1.wine`]-()\nRETURN wine.Name\nORDER BY wine.Score\nLIMIT 1",
        "question": "What is the name of the highest rated wine?",
        "answers": [
            [
                "Zinfandel"
            ]
        ]
    },
    {
        "db_id": "wine_1",
        "query": "MATCH ()-[wine:`wine_1.wine`]-()\nRETURN wine.Name\nORDER BY wine.Score\nLIMIT 1",
        "question": "Give the name of the wine with the highest score.",
        "answers": [
            [
                "Zinfandel"
            ]
        ]
    },
    {
        "db_id": "wine_1",
        "query": "MATCH ()-[wine:`wine_1.wine`]-()\nRETURN wine.Winery\nORDER BY wine.Score\nLIMIT 1",
        "question": "Which winery is the wine that has the highest score from?",
        "answers": [
            [
                "Renwood"
            ]
        ]
    },
    {
        "db_id": "wine_1",
        "query": "MATCH ()-[wine:`wine_1.wine`]-()\nRETURN wine.Winery\nORDER BY wine.Score\nLIMIT 1",
        "question": "What is the winery at which the wine with the highest score was made?",
        "answers": [
            [
                "Renwood"
            ]
        ]
    },
    {
        "db_id": "wine_1",
        "query": "MATCH ()-[wine:`wine_1.wine`]-()\nRETURN wine.Grape,wine.Appelation",
        "question": "List the grapes and appelations of all wines.",
        "answers": [
            [
                "Zinfandel",
                "St. Helena"
            ],
            [
                "Zinfandel",
                "St. Helena"
            ],
            [
                "Zinfandel",
                "Napa Valley"
            ],
            [
                "Zinfandel",
                "Napa Valley"
            ],
            [
                "Zinfandel",
                "Dry Creek Valley"
            ],
            [
                "Zinfandel",
                "Dry Creek Valley"
            ],
            [
                "Sauvignon Blanc",
                "Napa Valley"
            ],
            [
                "Sauvignon Blanc",
                "Napa Valley"
            ],
            [
                "Sauvignon Blanc",
                "Sonoma County"
            ],
            [
                "Sauvignon Blanc",
                "Sonoma County"
            ],
            [
                "Sauvignon Blanc",
                "Santa Ynez Valley"
            ],
            [
                "Sauvignon Blanc",
                "Santa Ynez Valley"
            ],
            [
                "Sauvignon Blanc",
                "California"
            ],
            [
                "Sauvignon Blanc",
                "California"
            ],
            [
                "Sauvignon Blanc",
                "Carneros"
            ],
            [
                "Sauvignon Blanc",
                "Carneros"
            ],
            [
                "Sauvignon Blanc",
                "Knights Valley"
            ],
            [
                "Sauvignon Blanc",
                "Knights Valley"
            ],
            [
                "Sauvignon Blanc",
                "Bennett Valley"
            ],
            [
                "Sauvignon Blanc",
                "Bennett Valley"
            ],
            [
                "Sauvignon Blanc",
                "Rutherford"
            ],
            [
                "Sauvignon Blanc",
                "Rutherford"
            ],
            [
                "Sauvignon Blanc",
                "Sonoma Valley"
            ],
            [
                "Sauvignon Blanc",
                "Sonoma Valley"
            ],
            [
                "Sauvignon Blanc",
                "St. Helena"
            ],
            [
                "Sauvignon Blanc",
                "St. Helena"
            ],
            [
                "Sauvignon Blanc",
                "Dry Creek Valley"
            ],
            [
                "Sauvignon Blanc",
                "Dry Creek Valley"
            ],
            [
                "Sauvignon Blanc",
                "Happy Canyon of Santa Barbara"
            ],
            [
                "Sauvignon Blanc",
                "Happy Canyon of Santa Barbara"
            ],
            [
                "Sauvignon Blanc",
                "Russian River Valley"
            ],
            [
                "Sauvignon Blanc",
                "Russian River Valley"
            ],
            [
                "Sauvignon Blanc",
                "Sonoma-Lake Counties"
            ],
            [
                "Sauvignon Blanc",
                "Sonoma-Lake Counties"
            ],
            [
                "Sauvignon Blanc",
                "North Coast"
            ],
            [
                "Sauvignon Blanc",
                "North Coast"
            ],
            [
                "Sauvignon Blanc",
                "Lake County"
            ],
            [
                "Sauvignon Blanc",
                "Lake County"
            ],
            [
                "Cabernet Sauvingnon",
                "Napa Valley"
            ],
            [
                "Cabernet Sauvingnon",
                "Napa Valley"
            ],
            [
                "Cabernet Sauvingnon",
                "Rutherford"
            ],
            [
                "Cabernet Sauvingnon",
                "Rutherford"
            ],
            [
                "Cabernet Sauvingnon",
                "St. Helena"
            ],
            [
                "Cabernet Sauvingnon",
                "St. Helena"
            ],
            [
                "Cabernet Sauvingnon",
                "Mount Vedeer"
            ],
            [
                "Cabernet Sauvingnon",
                "Mount Vedeer"
            ],
            [
                "Pinot Noir",
                "Russian River Valley"
            ],
            [
                "Pinot Noir",
                "Russian River Valley"
            ],
            [
                "Pinot Noir",
                "Santa Maria Valley"
            ],
            [
                "Pinot Noir",
                "Santa Maria Valley"
            ],
            [
                "Pinot Noir",
                "Napa Valley"
            ],
            [
                "Pinot Noir",
                "Napa Valley"
            ],
            [
                "Pinot Noir",
                "Santa Lucia Highlands"
            ],
            [
                "Pinot Noir",
                "Santa Lucia Highlands"
            ],
            [
                "Pinot Noir",
                "Sonoma Coast"
            ],
            [
                "Pinot Noir",
                "Sonoma Coast"
            ],
            [
                "Pinot Noir",
                "Green Valley of Russian River Valley"
            ],
            [
                "Pinot Noir",
                "Green Valley of Russian River Valley"
            ],
            [
                "Pinot Noir",
                "California"
            ],
            [
                "Pinot Noir",
                "California"
            ],
            [
                "Pinot Noir",
                "Sta. Rita Hills"
            ],
            [
                "Pinot Noir",
                "Sta. Rita Hills"
            ],
            [
                "Pinot Noir",
                "Carneros"
            ],
            [
                "Pinot Noir",
                "Carneros"
            ],
            [
                "Pinot Noir",
                "Santa Barbara County"
            ],
            [
                "Pinot Noir",
                "Santa Barbara County"
            ],
            [
                "Pinot Noir",
                "Central Coast"
            ],
            [
                "Pinot Noir",
                "Central Coast"
            ],
            [
                "Syrah",
                "Chalk Hill"
            ],
            [
                "Syrah",
                "Chalk Hill"
            ],
            [
                "Syrah",
                "Russian River Valley"
            ],
            [
                "Syrah",
                "Russian River Valley"
            ],
            [
                "Merlot",
                "California"
            ],
            [
                "Merlot",
                "California"
            ],
            [
                "Malbec",
                "California"
            ],
            [
                "Malbec",
                "California"
            ],
            [
                "Cabernet Sauvingnon",
                "Stags Leap District"
            ],
            [
                "Cabernet Sauvingnon",
                "Stags Leap District"
            ],
            [
                "Cabernet Sauvingnon",
                "Oakville"
            ],
            [
                "Cabernet Sauvingnon",
                "Oakville"
            ],
            [
                "Cabernet Sauvingnon",
                "Knights Valley"
            ],
            [
                "Cabernet Sauvingnon",
                "Knights Valley"
            ],
            [
                "Cabernet Sauvingnon",
                "Dry Creek Valley"
            ],
            [
                "Cabernet Sauvingnon",
                "Dry Creek Valley"
            ],
            [
                "Grenache",
                "Sta. Rita Hills"
            ],
            [
                "Grenache",
                "Sta. Rita Hills"
            ],
            [
                "Grenache",
                "California"
            ],
            [
                "Grenache",
                "California"
            ],
            [
                "Grenache",
                "Paso Robles"
            ],
            [
                "Grenache",
                "Paso Robles"
            ],
            [
                "Grenache",
                "Santa Ynez Valley"
            ],
            [
                "Grenache",
                "Santa Ynez Valley"
            ],
            [
                "Grenache",
                "Santa Barbara County"
            ],
            [
                "Grenache",
                "Santa Barbara County"
            ],
            [
                "Grenache",
                "Bennett Valley"
            ],
            [
                "Grenache",
                "Bennett Valley"
            ],
            [
                "Petite Sirah",
                "Paso Robles"
            ],
            [
                "Petite Sirah",
                "Paso Robles"
            ],
            [
                "Petite Sirah",
                "Sonoma County"
            ],
            [
                "Petite Sirah",
                "Sonoma County"
            ],
            [
                "Petite Sirah",
                "Santa Barbara County"
            ],
            [
                "Petite Sirah",
                "Santa Barbara County"
            ],
            [
                "Petite Sirah",
                "Napa Valley"
            ],
            [
                "Petite Sirah",
                "Napa Valley"
            ],
            [
                "Petite Sirah",
                "Russian River Valley"
            ],
            [
                "Petite Sirah",
                "Russian River Valley"
            ],
            [
                "Petite Sirah",
                "Mendocino County"
            ],
            [
                "Petite Sirah",
                "Mendocino County"
            ],
            [
                "Pinot Noir",
                "Paso Robles"
            ],
            [
                "Pinot Noir",
                "Paso Robles"
            ],
            [
                "Pinot Noir",
                "San Luis Obispo County"
            ],
            [
                "Pinot Noir",
                "San Luis Obispo County"
            ],
            [
                "Pinot Noir",
                "Sonoma County"
            ],
            [
                "Pinot Noir",
                "Sonoma County"
            ],
            [
                "Syrah",
                "Sta. Rita Hills"
            ],
            [
                "Syrah",
                "Sta. Rita Hills"
            ],
            [
                "Syrah",
                "Amador County"
            ],
            [
                "Syrah",
                "Amador County"
            ],
            [
                "Syrah",
                "Santa Lucia Highlands"
            ],
            [
                "Syrah",
                "Santa Lucia Highlands"
            ],
            [
                "Syrah",
                "Bennett Valley"
            ],
            [
                "Syrah",
                "Bennett Valley"
            ],
            [
                "Syrah",
                "Santa Barbara County"
            ],
            [
                "Syrah",
                "Santa Barbara County"
            ],
            [
                "Syrah",
                "Santa Ynez Valley"
            ],
            [
                "Syrah",
                "Santa Ynez Valley"
            ],
            [
                "Syrah",
                "California"
            ],
            [
                "Syrah",
                "California"
            ],
            [
                "Syrah",
                "Sonoma Coast"
            ],
            [
                "Syrah",
                "Sonoma Coast"
            ],
            [
                "Syrah",
                "Dry Creek Valley"
            ],
            [
                "Syrah",
                "Dry Creek Valley"
            ],
            [
                "Syrah",
                "Napa Valley"
            ],
            [
                "Syrah",
                "Napa Valley"
            ],
            [
                "Syrah",
                "Red Hills Lake County"
            ],
            [
                "Syrah",
                "Red Hills Lake County"
            ],
            [
                "Syrah",
                "Solano County"
            ],
            [
                "Syrah",
                "Solano County"
            ],
            [
                "Syrah",
                "Paso Robles"
            ],
            [
                "Syrah",
                "Paso Robles"
            ],
            [
                "Syrah",
                "Sonoma County"
            ],
            [
                "Syrah",
                "Sonoma County"
            ],
            [
                "Syrah",
                "Lake County"
            ],
            [
                "Syrah",
                "Lake County"
            ],
            [
                "Syrah",
                "Lodi"
            ],
            [
                "Syrah",
                "Lodi"
            ],
            [
                "Zinfandel",
                "Russian River Valley"
            ],
            [
                "Zinfandel",
                "Russian River Valley"
            ],
            [
                "Zinfandel",
                "Howell Mountain"
            ],
            [
                "Zinfandel",
                "Howell Mountain"
            ],
            [
                "Zinfandel",
                "Sonoma Valley"
            ],
            [
                "Zinfandel",
                "Sonoma Valley"
            ],
            [
                "Zinfandel",
                "Sonoma County"
            ],
            [
                "Zinfandel",
                "Sonoma County"
            ],
            [
                "Zinfandel",
                "Paso Robles"
            ],
            [
                "Zinfandel",
                "Paso Robles"
            ],
            [
                "Zinfandel",
                "Amador County"
            ],
            [
                "Zinfandel",
                "Amador County"
            ],
            [
                "Zinfandel",
                "Mendocino County"
            ],
            [
                "Zinfandel",
                "Mendocino County"
            ],
            [
                "Zinfandel",
                "Lake County"
            ],
            [
                "Zinfandel",
                "Lake County"
            ],
            [
                "Zinfandel",
                "Rutherford"
            ],
            [
                "Zinfandel",
                "Rutherford"
            ],
            [
                "Chardonnay",
                "Napa Valley"
            ],
            [
                "Chardonnay",
                "Napa Valley"
            ],
            [
                "Chardonnay",
                "Sonoma Coast"
            ],
            [
                "Chardonnay",
                "Sonoma Coast"
            ],
            [
                "Merlot",
                "Napa Valley"
            ],
            [
                "Merlot",
                "Napa Valley"
            ],
            [
                "Tempranillo",
                "Paso Robles"
            ],
            [
                "Tempranillo",
                "Paso Robles"
            ],
            [
                "Chardonnay",
                "California"
            ],
            [
                "Chardonnay",
                "California"
            ],
            [
                "Syrah",
                "Yolo County"
            ],
            [
                "Syrah",
                "Yolo County"
            ],
            [
                "Syrah",
                "Mount Vedeer"
            ],
            [
                "Syrah",
                "Mount Vedeer"
            ],
            [
                "Pinot Noir",
                "Anderson Valley"
            ],
            [
                "Pinot Noir",
                "Anderson Valley"
            ],
            [
                "Pinot Noir",
                "Mount Harlan"
            ],
            [
                "Pinot Noir",
                "Mount Harlan"
            ],
            [
                "Zinfandel",
                "Rockpile"
            ],
            [
                "Zinfandel",
                "Rockpile"
            ],
            [
                "Chardonnay",
                "Sonoma County"
            ],
            [
                "Chardonnay",
                "Sonoma County"
            ],
            [
                "Chardonnay",
                "Carneros"
            ],
            [
                "Chardonnay",
                "Carneros"
            ],
            [
                "Chardonnay",
                "Russian River Valley"
            ],
            [
                "Chardonnay",
                "Russian River Valley"
            ],
            [
                "Chardonnay",
                "Chalk Hill"
            ],
            [
                "Chardonnay",
                "Chalk Hill"
            ],
            [
                "Viognier",
                "Napa Valley"
            ],
            [
                "Viognier",
                "Napa Valley"
            ],
            [
                "Marsanne",
                "Napa Valley"
            ],
            [
                "Marsanne",
                "Napa Valley"
            ],
            [
                "Cabernet Sauvingnon",
                "Santa Ynez Valley"
            ],
            [
                "Cabernet Sauvingnon",
                "Santa Ynez Valley"
            ],
            [
                "Cabernet Sauvingnon",
                "Sonoma Valley"
            ],
            [
                "Cabernet Sauvingnon",
                "Sonoma Valley"
            ],
            [
                "Chardonnay",
                "Sonoma Valley"
            ],
            [
                "Chardonnay",
                "Sonoma Valley"
            ],
            [
                "Chardonnay",
                "Santa Barbara County"
            ],
            [
                "Chardonnay",
                "Santa Barbara County"
            ],
            [
                "Chardonnay",
                "Santa Cruz Mountains"
            ],
            [
                "Chardonnay",
                "Santa Cruz Mountains"
            ],
            [
                "Chardonnay",
                "Chalone"
            ],
            [
                "Chardonnay",
                "Chalone"
            ],
            [
                "Chardonnay",
                "Rutherford"
            ],
            [
                "Chardonnay",
                "Rutherford"
            ],
            [
                "Chardonnay",
                "Dry Creek Valley"
            ],
            [
                "Chardonnay",
                "Dry Creek Valley"
            ],
            [
                "Chardonnay",
                "Spring Mountain District"
            ],
            [
                "Chardonnay",
                "Spring Mountain District"
            ],
            [
                "Chardonnay",
                "Mount Harlan"
            ],
            [
                "Chardonnay",
                "Mount Harlan"
            ],
            [
                "Chardonnay",
                "Edna Valley"
            ],
            [
                "Chardonnay",
                "Edna Valley"
            ],
            [
                "Chardonnay",
                "Arroyo Grande Valley"
            ],
            [
                "Chardonnay",
                "Arroyo Grande Valley"
            ],
            [
                "Chardonnay",
                "Santa Maria Valley"
            ],
            [
                "Chardonnay",
                "Santa Maria Valley"
            ],
            [
                "Chardonnay",
                "Mount Vedeer"
            ],
            [
                "Chardonnay",
                "Mount Vedeer"
            ],
            [
                "Chardonnay",
                "Santa Lucia Highlands"
            ],
            [
                "Chardonnay",
                "Santa Lucia Highlands"
            ],
            [
                "Chardonnay",
                "Green Valley of Russian River Valley"
            ],
            [
                "Chardonnay",
                "Green Valley of Russian River Valley"
            ],
            [
                "Chardonnay",
                "Alexander Valley"
            ],
            [
                "Chardonnay",
                "Alexander Valley"
            ],
            [
                "Pinot Noir",
                "Monterey County"
            ],
            [
                "Pinot Noir",
                "Monterey County"
            ],
            [
                "Syrah",
                "Arroyo Grande Valley"
            ],
            [
                "Syrah",
                "Arroyo Grande Valley"
            ],
            [
                "Zinfandel",
                "Alexander Valley"
            ],
            [
                "Zinfandel",
                "Alexander Valley"
            ],
            [
                "Zinfandel",
                "San Luis Obispo County"
            ],
            [
                "Zinfandel",
                "San Luis Obispo County"
            ],
            [
                "Zinfandel",
                "Lodi"
            ],
            [
                "Zinfandel",
                "Lodi"
            ],
            [
                "Zinfandel",
                "Contra Costa County"
            ],
            [
                "Zinfandel",
                "Contra Costa County"
            ],
            [
                "Zinfandel",
                "Calaveras County"
            ],
            [
                "Zinfandel",
                "Calaveras County"
            ],
            [
                "Zinfandel",
                "California"
            ],
            [
                "Zinfandel",
                "California"
            ],
            [
                "Zinfandel",
                "Sierra Foothills"
            ],
            [
                "Zinfandel",
                "Sierra Foothills"
            ],
            [
                "Zinfandel",
                "Fiddletown"
            ],
            [
                "Zinfandel",
                "Fiddletown"
            ],
            [
                "Cabernet Franc",
                "Sonoma County"
            ],
            [
                "Cabernet Franc",
                "Sonoma County"
            ],
            [
                "Chardonnay",
                "Monterey County"
            ],
            [
                "Chardonnay",
                "Monterey County"
            ],
            [
                "Cabernet Sauvingnon",
                "Yountville"
            ],
            [
                "Cabernet Sauvingnon",
                "Yountville"
            ],
            [
                "Cabernet Sauvingnon",
                "Atlas Peak"
            ],
            [
                "Cabernet Sauvingnon",
                "Atlas Peak"
            ],
            [
                "Cabernet Sauvingnon",
                "California"
            ],
            [
                "Cabernet Sauvingnon",
                "California"
            ],
            [
                "Cabernet Sauvingnon",
                "Lake County"
            ],
            [
                "Cabernet Sauvingnon",
                "Lake County"
            ],
            [
                "Cabernet Sauvingnon",
                "Spring Mountain District"
            ],
            [
                "Cabernet Sauvingnon",
                "Spring Mountain District"
            ],
            [
                "Cabernet Sauvingnon",
                "Sonoma County"
            ],
            [
                "Cabernet Sauvingnon",
                "Sonoma County"
            ],
            [
                "Cabernet Sauvingnon",
                "Napa-Sonoma counties"
            ],
            [
                "Cabernet Sauvingnon",
                "Napa-Sonoma counties"
            ],
            [
                "Cabernet Sauvingnon",
                "Alexander Valley"
            ],
            [
                "Cabernet Sauvingnon",
                "Alexander Valley"
            ],
            [
                "Cabernet Sauvingnon",
                "Paso Robles"
            ],
            [
                "Cabernet Sauvingnon",
                "Paso Robles"
            ],
            [
                "Grenache",
                "Dry Creek Valley"
            ],
            [
                "Grenache",
                "Dry Creek Valley"
            ],
            [
                "Merlot",
                "Spring Mountain District"
            ],
            [
                "Merlot",
                "Spring Mountain District"
            ],
            [
                "Merlot",
                "Lake County"
            ],
            [
                "Merlot",
                "Lake County"
            ],
            [
                "Merlot",
                "Alexander Valley"
            ],
            [
                "Merlot",
                "Alexander Valley"
            ],
            [
                "Pinot Noir",
                "Red Hills Lake County"
            ],
            [
                "Pinot Noir",
                "Red Hills Lake County"
            ],
            [
                "Pinot Noir",
                "Edna Valley"
            ],
            [
                "Pinot Noir",
                "Edna Valley"
            ],
            [
                "Sauvignon Blanc",
                "Guenoc Valley"
            ],
            [
                "Sauvignon Blanc",
                "Guenoc Valley"
            ],
            [
                "Syrah",
                "Livermore Valley"
            ],
            [
                "Syrah",
                "Livermore Valley"
            ],
            [
                "Zinfandel",
                "Amador-Mendocino-Sonoma Counties"
            ],
            [
                "Zinfandel",
                "Amador-Mendocino-Sonoma Counties"
            ],
            [
                "Roussanne",
                "California"
            ],
            [
                "Roussanne",
                "California"
            ],
            [
                "Sangiovese",
                "Napa Valley"
            ],
            [
                "Sangiovese",
                "Napa Valley"
            ],
            [
                "Barbera",
                "Mendocino County"
            ],
            [
                "Barbera",
                "Mendocino County"
            ],
            [
                "Zinfandel",
                "Shenandoah Valley"
            ],
            [
                "Zinfandel",
                "Shenandoah Valley"
            ]
        ]
    },
    {
        "db_id": "wine_1",
        "query": "MATCH ()-[wine:`wine_1.wine`]-()\nRETURN wine.Grape,wine.Appelation",
        "question": "What are the grapes and appelations of each wine?",
        "answers": [
            [
                "Zinfandel",
                "St. Helena"
            ],
            [
                "Zinfandel",
                "St. Helena"
            ],
            [
                "Zinfandel",
                "Napa Valley"
            ],
            [
                "Zinfandel",
                "Napa Valley"
            ],
            [
                "Zinfandel",
                "Dry Creek Valley"
            ],
            [
                "Zinfandel",
                "Dry Creek Valley"
            ],
            [
                "Sauvignon Blanc",
                "Napa Valley"
            ],
            [
                "Sauvignon Blanc",
                "Napa Valley"
            ],
            [
                "Sauvignon Blanc",
                "Sonoma County"
            ],
            [
                "Sauvignon Blanc",
                "Sonoma County"
            ],
            [
                "Sauvignon Blanc",
                "Santa Ynez Valley"
            ],
            [
                "Sauvignon Blanc",
                "Santa Ynez Valley"
            ],
            [
                "Sauvignon Blanc",
                "California"
            ],
            [
                "Sauvignon Blanc",
                "California"
            ],
            [
                "Sauvignon Blanc",
                "Carneros"
            ],
            [
                "Sauvignon Blanc",
                "Carneros"
            ],
            [
                "Sauvignon Blanc",
                "Knights Valley"
            ],
            [
                "Sauvignon Blanc",
                "Knights Valley"
            ],
            [
                "Sauvignon Blanc",
                "Bennett Valley"
            ],
            [
                "Sauvignon Blanc",
                "Bennett Valley"
            ],
            [
                "Sauvignon Blanc",
                "Rutherford"
            ],
            [
                "Sauvignon Blanc",
                "Rutherford"
            ],
            [
                "Sauvignon Blanc",
                "Sonoma Valley"
            ],
            [
                "Sauvignon Blanc",
                "Sonoma Valley"
            ],
            [
                "Sauvignon Blanc",
                "St. Helena"
            ],
            [
                "Sauvignon Blanc",
                "St. Helena"
            ],
            [
                "Sauvignon Blanc",
                "Dry Creek Valley"
            ],
            [
                "Sauvignon Blanc",
                "Dry Creek Valley"
            ],
            [
                "Sauvignon Blanc",
                "Happy Canyon of Santa Barbara"
            ],
            [
                "Sauvignon Blanc",
                "Happy Canyon of Santa Barbara"
            ],
            [
                "Sauvignon Blanc",
                "Russian River Valley"
            ],
            [
                "Sauvignon Blanc",
                "Russian River Valley"
            ],
            [
                "Sauvignon Blanc",
                "Sonoma-Lake Counties"
            ],
            [
                "Sauvignon Blanc",
                "Sonoma-Lake Counties"
            ],
            [
                "Sauvignon Blanc",
                "North Coast"
            ],
            [
                "Sauvignon Blanc",
                "North Coast"
            ],
            [
                "Sauvignon Blanc",
                "Lake County"
            ],
            [
                "Sauvignon Blanc",
                "Lake County"
            ],
            [
                "Cabernet Sauvingnon",
                "Napa Valley"
            ],
            [
                "Cabernet Sauvingnon",
                "Napa Valley"
            ],
            [
                "Cabernet Sauvingnon",
                "Rutherford"
            ],
            [
                "Cabernet Sauvingnon",
                "Rutherford"
            ],
            [
                "Cabernet Sauvingnon",
                "St. Helena"
            ],
            [
                "Cabernet Sauvingnon",
                "St. Helena"
            ],
            [
                "Cabernet Sauvingnon",
                "Mount Vedeer"
            ],
            [
                "Cabernet Sauvingnon",
                "Mount Vedeer"
            ],
            [
                "Pinot Noir",
                "Russian River Valley"
            ],
            [
                "Pinot Noir",
                "Russian River Valley"
            ],
            [
                "Pinot Noir",
                "Santa Maria Valley"
            ],
            [
                "Pinot Noir",
                "Santa Maria Valley"
            ],
            [
                "Pinot Noir",
                "Napa Valley"
            ],
            [
                "Pinot Noir",
                "Napa Valley"
            ],
            [
                "Pinot Noir",
                "Santa Lucia Highlands"
            ],
            [
                "Pinot Noir",
                "Santa Lucia Highlands"
            ],
            [
                "Pinot Noir",
                "Sonoma Coast"
            ],
            [
                "Pinot Noir",
                "Sonoma Coast"
            ],
            [
                "Pinot Noir",
                "Green Valley of Russian River Valley"
            ],
            [
                "Pinot Noir",
                "Green Valley of Russian River Valley"
            ],
            [
                "Pinot Noir",
                "California"
            ],
            [
                "Pinot Noir",
                "California"
            ],
            [
                "Pinot Noir",
                "Sta. Rita Hills"
            ],
            [
                "Pinot Noir",
                "Sta. Rita Hills"
            ],
            [
                "Pinot Noir",
                "Carneros"
            ],
            [
                "Pinot Noir",
                "Carneros"
            ],
            [
                "Pinot Noir",
                "Santa Barbara County"
            ],
            [
                "Pinot Noir",
                "Santa Barbara County"
            ],
            [
                "Pinot Noir",
                "Central Coast"
            ],
            [
                "Pinot Noir",
                "Central Coast"
            ],
            [
                "Syrah",
                "Chalk Hill"
            ],
            [
                "Syrah",
                "Chalk Hill"
            ],
            [
                "Syrah",
                "Russian River Valley"
            ],
            [
                "Syrah",
                "Russian River Valley"
            ],
            [
                "Merlot",
                "California"
            ],
            [
                "Merlot",
                "California"
            ],
            [
                "Malbec",
                "California"
            ],
            [
                "Malbec",
                "California"
            ],
            [
                "Cabernet Sauvingnon",
                "Stags Leap District"
            ],
            [
                "Cabernet Sauvingnon",
                "Stags Leap District"
            ],
            [
                "Cabernet Sauvingnon",
                "Oakville"
            ],
            [
                "Cabernet Sauvingnon",
                "Oakville"
            ],
            [
                "Cabernet Sauvingnon",
                "Knights Valley"
            ],
            [
                "Cabernet Sauvingnon",
                "Knights Valley"
            ],
            [
                "Cabernet Sauvingnon",
                "Dry Creek Valley"
            ],
            [
                "Cabernet Sauvingnon",
                "Dry Creek Valley"
            ],
            [
                "Grenache",
                "Sta. Rita Hills"
            ],
            [
                "Grenache",
                "Sta. Rita Hills"
            ],
            [
                "Grenache",
                "California"
            ],
            [
                "Grenache",
                "California"
            ],
            [
                "Grenache",
                "Paso Robles"
            ],
            [
                "Grenache",
                "Paso Robles"
            ],
            [
                "Grenache",
                "Santa Ynez Valley"
            ],
            [
                "Grenache",
                "Santa Ynez Valley"
            ],
            [
                "Grenache",
                "Santa Barbara County"
            ],
            [
                "Grenache",
                "Santa Barbara County"
            ],
            [
                "Grenache",
                "Bennett Valley"
            ],
            [
                "Grenache",
                "Bennett Valley"
            ],
            [
                "Petite Sirah",
                "Paso Robles"
            ],
            [
                "Petite Sirah",
                "Paso Robles"
            ],
            [
                "Petite Sirah",
                "Sonoma County"
            ],
            [
                "Petite Sirah",
                "Sonoma County"
            ],
            [
                "Petite Sirah",
                "Santa Barbara County"
            ],
            [
                "Petite Sirah",
                "Santa Barbara County"
            ],
            [
                "Petite Sirah",
                "Napa Valley"
            ],
            [
                "Petite Sirah",
                "Napa Valley"
            ],
            [
                "Petite Sirah",
                "Russian River Valley"
            ],
            [
                "Petite Sirah",
                "Russian River Valley"
            ],
            [
                "Petite Sirah",
                "Mendocino County"
            ],
            [
                "Petite Sirah",
                "Mendocino County"
            ],
            [
                "Pinot Noir",
                "Paso Robles"
            ],
            [
                "Pinot Noir",
                "Paso Robles"
            ],
            [
                "Pinot Noir",
                "San Luis Obispo County"
            ],
            [
                "Pinot Noir",
                "San Luis Obispo County"
            ],
            [
                "Pinot Noir",
                "Sonoma County"
            ],
            [
                "Pinot Noir",
                "Sonoma County"
            ],
            [
                "Syrah",
                "Sta. Rita Hills"
            ],
            [
                "Syrah",
                "Sta. Rita Hills"
            ],
            [
                "Syrah",
                "Amador County"
            ],
            [
                "Syrah",
                "Amador County"
            ],
            [
                "Syrah",
                "Santa Lucia Highlands"
            ],
            [
                "Syrah",
                "Santa Lucia Highlands"
            ],
            [
                "Syrah",
                "Bennett Valley"
            ],
            [
                "Syrah",
                "Bennett Valley"
            ],
            [
                "Syrah",
                "Santa Barbara County"
            ],
            [
                "Syrah",
                "Santa Barbara County"
            ],
            [
                "Syrah",
                "Santa Ynez Valley"
            ],
            [
                "Syrah",
                "Santa Ynez Valley"
            ],
            [
                "Syrah",
                "California"
            ],
            [
                "Syrah",
                "California"
            ],
            [
                "Syrah",
                "Sonoma Coast"
            ],
            [
                "Syrah",
                "Sonoma Coast"
            ],
            [
                "Syrah",
                "Dry Creek Valley"
            ],
            [
                "Syrah",
                "Dry Creek Valley"
            ],
            [
                "Syrah",
                "Napa Valley"
            ],
            [
                "Syrah",
                "Napa Valley"
            ],
            [
                "Syrah",
                "Red Hills Lake County"
            ],
            [
                "Syrah",
                "Red Hills Lake County"
            ],
            [
                "Syrah",
                "Solano County"
            ],
            [
                "Syrah",
                "Solano County"
            ],
            [
                "Syrah",
                "Paso Robles"
            ],
            [
                "Syrah",
                "Paso Robles"
            ],
            [
                "Syrah",
                "Sonoma County"
            ],
            [
                "Syrah",
                "Sonoma County"
            ],
            [
                "Syrah",
                "Lake County"
            ],
            [
                "Syrah",
                "Lake County"
            ],
            [
                "Syrah",
                "Lodi"
            ],
            [
                "Syrah",
                "Lodi"
            ],
            [
                "Zinfandel",
                "Russian River Valley"
            ],
            [
                "Zinfandel",
                "Russian River Valley"
            ],
            [
                "Zinfandel",
                "Howell Mountain"
            ],
            [
                "Zinfandel",
                "Howell Mountain"
            ],
            [
                "Zinfandel",
                "Sonoma Valley"
            ],
            [
                "Zinfandel",
                "Sonoma Valley"
            ],
            [
                "Zinfandel",
                "Sonoma County"
            ],
            [
                "Zinfandel",
                "Sonoma County"
            ],
            [
                "Zinfandel",
                "Paso Robles"
            ],
            [
                "Zinfandel",
                "Paso Robles"
            ],
            [
                "Zinfandel",
                "Amador County"
            ],
            [
                "Zinfandel",
                "Amador County"
            ],
            [
                "Zinfandel",
                "Mendocino County"
            ],
            [
                "Zinfandel",
                "Mendocino County"
            ],
            [
                "Zinfandel",
                "Lake County"
            ],
            [
                "Zinfandel",
                "Lake County"
            ],
            [
                "Zinfandel",
                "Rutherford"
            ],
            [
                "Zinfandel",
                "Rutherford"
            ],
            [
                "Chardonnay",
                "Napa Valley"
            ],
            [
                "Chardonnay",
                "Napa Valley"
            ],
            [
                "Chardonnay",
                "Sonoma Coast"
            ],
            [
                "Chardonnay",
                "Sonoma Coast"
            ],
            [
                "Merlot",
                "Napa Valley"
            ],
            [
                "Merlot",
                "Napa Valley"
            ],
            [
                "Tempranillo",
                "Paso Robles"
            ],
            [
                "Tempranillo",
                "Paso Robles"
            ],
            [
                "Chardonnay",
                "California"
            ],
            [
                "Chardonnay",
                "California"
            ],
            [
                "Syrah",
                "Yolo County"
            ],
            [
                "Syrah",
                "Yolo County"
            ],
            [
                "Syrah",
                "Mount Vedeer"
            ],
            [
                "Syrah",
                "Mount Vedeer"
            ],
            [
                "Pinot Noir",
                "Anderson Valley"
            ],
            [
                "Pinot Noir",
                "Anderson Valley"
            ],
            [
                "Pinot Noir",
                "Mount Harlan"
            ],
            [
                "Pinot Noir",
                "Mount Harlan"
            ],
            [
                "Zinfandel",
                "Rockpile"
            ],
            [
                "Zinfandel",
                "Rockpile"
            ],
            [
                "Chardonnay",
                "Sonoma County"
            ],
            [
                "Chardonnay",
                "Sonoma County"
            ],
            [
                "Chardonnay",
                "Carneros"
            ],
            [
                "Chardonnay",
                "Carneros"
            ],
            [
                "Chardonnay",
                "Russian River Valley"
            ],
            [
                "Chardonnay",
                "Russian River Valley"
            ],
            [
                "Chardonnay",
                "Chalk Hill"
            ],
            [
                "Chardonnay",
                "Chalk Hill"
            ],
            [
                "Viognier",
                "Napa Valley"
            ],
            [
                "Viognier",
                "Napa Valley"
            ],
            [
                "Marsanne",
                "Napa Valley"
            ],
            [
                "Marsanne",
                "Napa Valley"
            ],
            [
                "Cabernet Sauvingnon",
                "Santa Ynez Valley"
            ],
            [
                "Cabernet Sauvingnon",
                "Santa Ynez Valley"
            ],
            [
                "Cabernet Sauvingnon",
                "Sonoma Valley"
            ],
            [
                "Cabernet Sauvingnon",
                "Sonoma Valley"
            ],
            [
                "Chardonnay",
                "Sonoma Valley"
            ],
            [
                "Chardonnay",
                "Sonoma Valley"
            ],
            [
                "Chardonnay",
                "Santa Barbara County"
            ],
            [
                "Chardonnay",
                "Santa Barbara County"
            ],
            [
                "Chardonnay",
                "Santa Cruz Mountains"
            ],
            [
                "Chardonnay",
                "Santa Cruz Mountains"
            ],
            [
                "Chardonnay",
                "Chalone"
            ],
            [
                "Chardonnay",
                "Chalone"
            ],
            [
                "Chardonnay",
                "Rutherford"
            ],
            [
                "Chardonnay",
                "Rutherford"
            ],
            [
                "Chardonnay",
                "Dry Creek Valley"
            ],
            [
                "Chardonnay",
                "Dry Creek Valley"
            ],
            [
                "Chardonnay",
                "Spring Mountain District"
            ],
            [
                "Chardonnay",
                "Spring Mountain District"
            ],
            [
                "Chardonnay",
                "Mount Harlan"
            ],
            [
                "Chardonnay",
                "Mount Harlan"
            ],
            [
                "Chardonnay",
                "Edna Valley"
            ],
            [
                "Chardonnay",
                "Edna Valley"
            ],
            [
                "Chardonnay",
                "Arroyo Grande Valley"
            ],
            [
                "Chardonnay",
                "Arroyo Grande Valley"
            ],
            [
                "Chardonnay",
                "Santa Maria Valley"
            ],
            [
                "Chardonnay",
                "Santa Maria Valley"
            ],
            [
                "Chardonnay",
                "Mount Vedeer"
            ],
            [
                "Chardonnay",
                "Mount Vedeer"
            ],
            [
                "Chardonnay",
                "Santa Lucia Highlands"
            ],
            [
                "Chardonnay",
                "Santa Lucia Highlands"
            ],
            [
                "Chardonnay",
                "Green Valley of Russian River Valley"
            ],
            [
                "Chardonnay",
                "Green Valley of Russian River Valley"
            ],
            [
                "Chardonnay",
                "Alexander Valley"
            ],
            [
                "Chardonnay",
                "Alexander Valley"
            ],
            [
                "Pinot Noir",
                "Monterey County"
            ],
            [
                "Pinot Noir",
                "Monterey County"
            ],
            [
                "Syrah",
                "Arroyo Grande Valley"
            ],
            [
                "Syrah",
                "Arroyo Grande Valley"
            ],
            [
                "Zinfandel",
                "Alexander Valley"
            ],
            [
                "Zinfandel",
                "Alexander Valley"
            ],
            [
                "Zinfandel",
                "San Luis Obispo County"
            ],
            [
                "Zinfandel",
                "San Luis Obispo County"
            ],
            [
                "Zinfandel",
                "Lodi"
            ],
            [
                "Zinfandel",
                "Lodi"
            ],
            [
                "Zinfandel",
                "Contra Costa County"
            ],
            [
                "Zinfandel",
                "Contra Costa County"
            ],
            [
                "Zinfandel",
                "Calaveras County"
            ],
            [
                "Zinfandel",
                "Calaveras County"
            ],
            [
                "Zinfandel",
                "California"
            ],
            [
                "Zinfandel",
                "California"
            ],
            [
                "Zinfandel",
                "Sierra Foothills"
            ],
            [
                "Zinfandel",
                "Sierra Foothills"
            ],
            [
                "Zinfandel",
                "Fiddletown"
            ],
            [
                "Zinfandel",
                "Fiddletown"
            ],
            [
                "Cabernet Franc",
                "Sonoma County"
            ],
            [
                "Cabernet Franc",
                "Sonoma County"
            ],
            [
                "Chardonnay",
                "Monterey County"
            ],
            [
                "Chardonnay",
                "Monterey County"
            ],
            [
                "Cabernet Sauvingnon",
                "Yountville"
            ],
            [
                "Cabernet Sauvingnon",
                "Yountville"
            ],
            [
                "Cabernet Sauvingnon",
                "Atlas Peak"
            ],
            [
                "Cabernet Sauvingnon",
                "Atlas Peak"
            ],
            [
                "Cabernet Sauvingnon",
                "California"
            ],
            [
                "Cabernet Sauvingnon",
                "California"
            ],
            [
                "Cabernet Sauvingnon",
                "Lake County"
            ],
            [
                "Cabernet Sauvingnon",
                "Lake County"
            ],
            [
                "Cabernet Sauvingnon",
                "Spring Mountain District"
            ],
            [
                "Cabernet Sauvingnon",
                "Spring Mountain District"
            ],
            [
                "Cabernet Sauvingnon",
                "Sonoma County"
            ],
            [
                "Cabernet Sauvingnon",
                "Sonoma County"
            ],
            [
                "Cabernet Sauvingnon",
                "Napa-Sonoma counties"
            ],
            [
                "Cabernet Sauvingnon",
                "Napa-Sonoma counties"
            ],
            [
                "Cabernet Sauvingnon",
                "Alexander Valley"
            ],
            [
                "Cabernet Sauvingnon",
                "Alexander Valley"
            ],
            [
                "Cabernet Sauvingnon",
                "Paso Robles"
            ],
            [
                "Cabernet Sauvingnon",
                "Paso Robles"
            ],
            [
                "Grenache",
                "Dry Creek Valley"
            ],
            [
                "Grenache",
                "Dry Creek Valley"
            ],
            [
                "Merlot",
                "Spring Mountain District"
            ],
            [
                "Merlot",
                "Spring Mountain District"
            ],
            [
                "Merlot",
                "Lake County"
            ],
            [
                "Merlot",
                "Lake County"
            ],
            [
                "Merlot",
                "Alexander Valley"
            ],
            [
                "Merlot",
                "Alexander Valley"
            ],
            [
                "Pinot Noir",
                "Red Hills Lake County"
            ],
            [
                "Pinot Noir",
                "Red Hills Lake County"
            ],
            [
                "Pinot Noir",
                "Edna Valley"
            ],
            [
                "Pinot Noir",
                "Edna Valley"
            ],
            [
                "Sauvignon Blanc",
                "Guenoc Valley"
            ],
            [
                "Sauvignon Blanc",
                "Guenoc Valley"
            ],
            [
                "Syrah",
                "Livermore Valley"
            ],
            [
                "Syrah",
                "Livermore Valley"
            ],
            [
                "Zinfandel",
                "Amador-Mendocino-Sonoma Counties"
            ],
            [
                "Zinfandel",
                "Amador-Mendocino-Sonoma Counties"
            ],
            [
                "Roussanne",
                "California"
            ],
            [
                "Roussanne",
                "California"
            ],
            [
                "Sangiovese",
                "Napa Valley"
            ],
            [
                "Sangiovese",
                "Napa Valley"
            ],
            [
                "Barbera",
                "Mendocino County"
            ],
            [
                "Barbera",
                "Mendocino County"
            ],
            [
                "Zinfandel",
                "Shenandoah Valley"
            ],
            [
                "Zinfandel",
                "Shenandoah Valley"
            ]
        ]
    },
    {
        "db_id": "wine_1",
        "query": "MATCH (appellations:`wine_1.appellations`)\nRETURN appellations.Area,appellations.County",
        "question": "List the area and county of all appelations.",
        "answers": [
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "Sierra Foothills",
                "Amador"
            ],
            [
                "N/A",
                "N/A"
            ],
            [
                "North Coast",
                "Mendocino"
            ],
            [
                "Central Coast",
                "San Luis Obispo"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "Sierra Foothills",
                "Calaveras"
            ],
            [
                "California",
                "N/A"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "Central Coast",
                "N/A"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "Central Coast",
                "Monterey"
            ],
            [
                "Santa Cruz Mountains",
                "Contra Costa"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "Central Coast",
                "San Luis Obispo"
            ],
            [
                "Sierra Foothills",
                "Amador"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "Lake"
            ],
            [
                "Central Coast",
                "Santa Barbara"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "Lake"
            ],
            [
                "Santa Cruz Mountains",
                "Alameda"
            ],
            [
                "Central Valley",
                "San Joaquin"
            ],
            [
                "North Coast",
                "Mendocino"
            ],
            [
                "Central Coast",
                "Monterey"
            ],
            [
                "Central Coast",
                "San Benito"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "North Coast",
                "N/A"
            ],
            [
                "North Coast",
                "N/A"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "Central Coast",
                "San Luis Obispo"
            ],
            [
                "North Coast",
                "Lake"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "Central Coast",
                "San Luis Obispo"
            ],
            [
                "Central Coast",
                "Santa Barbara"
            ],
            [
                "Santa Cruz Mountains",
                "N/A"
            ],
            [
                "Central Coast",
                "Monterey"
            ],
            [
                "Central Coast",
                "Santa Barbara"
            ],
            [
                "Central Coast",
                "Santa Barbara"
            ],
            [
                "Sierra Foothills",
                "Amador"
            ],
            [
                "Sierra Foothills",
                "N/A"
            ],
            [
                "North Coast",
                "Solano"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "N/A"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "Central Coast",
                "Santa Barbara"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "Central Valley",
                "Yolo"
            ],
            [
                "North Coast",
                "Napa"
            ]
        ]
    },
    {
        "db_id": "wine_1",
        "query": "MATCH (appellations:`wine_1.appellations`)\nRETURN appellations.Area,appellations.County",
        "question": "What are the areas and counties for all appelations?",
        "answers": [
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "Sierra Foothills",
                "Amador"
            ],
            [
                "N/A",
                "N/A"
            ],
            [
                "North Coast",
                "Mendocino"
            ],
            [
                "Central Coast",
                "San Luis Obispo"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "Sierra Foothills",
                "Calaveras"
            ],
            [
                "California",
                "N/A"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "Central Coast",
                "N/A"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "Central Coast",
                "Monterey"
            ],
            [
                "Santa Cruz Mountains",
                "Contra Costa"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "Central Coast",
                "San Luis Obispo"
            ],
            [
                "Sierra Foothills",
                "Amador"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "Lake"
            ],
            [
                "Central Coast",
                "Santa Barbara"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "Lake"
            ],
            [
                "Santa Cruz Mountains",
                "Alameda"
            ],
            [
                "Central Valley",
                "San Joaquin"
            ],
            [
                "North Coast",
                "Mendocino"
            ],
            [
                "Central Coast",
                "Monterey"
            ],
            [
                "Central Coast",
                "San Benito"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "North Coast",
                "N/A"
            ],
            [
                "North Coast",
                "N/A"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "Central Coast",
                "San Luis Obispo"
            ],
            [
                "North Coast",
                "Lake"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "Central Coast",
                "San Luis Obispo"
            ],
            [
                "Central Coast",
                "Santa Barbara"
            ],
            [
                "Santa Cruz Mountains",
                "N/A"
            ],
            [
                "Central Coast",
                "Monterey"
            ],
            [
                "Central Coast",
                "Santa Barbara"
            ],
            [
                "Central Coast",
                "Santa Barbara"
            ],
            [
                "Sierra Foothills",
                "Amador"
            ],
            [
                "Sierra Foothills",
                "N/A"
            ],
            [
                "North Coast",
                "Solano"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "N/A"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "Central Coast",
                "Santa Barbara"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "Central Valley",
                "Yolo"
            ],
            [
                "North Coast",
                "Napa"
            ]
        ]
    },
    {
        "db_id": "wine_1",
        "query": "MATCH (appellations:`wine_1.appellations`)\nWHERE appellations.County = 'Napa'\nRETURN count(*)",
        "question": "How many appelations are in Napa Country?",
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "db_id": "wine_1",
        "query": "MATCH (appellations:`wine_1.appellations`)\nWHERE appellations.County = 'Napa'\nRETURN count(*)",
        "question": "Count the number of appelations in Napa County.",
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "db_id": "wine_1",
        "query": "MATCH (T1:`wine_1.grapes`)-[T2:`wine_1.wine`]-()\nWHERE T1.Color = 'White' AND T2.Score > 90\nRETURN DISTINCT T1.Grape",
        "question": "Find the the grape whose white color grapes are used to produce wines with scores higher than 90.",
        "answers": [
            [
                "Chardonnay"
            ],
            [
                "Roussanne"
            ],
            [
                "Sauvignon Blanc"
            ]
        ]
    },
    {
        "db_id": "wine_1",
        "query": "MATCH (T1:`wine_1.grapes`)-[T2:`wine_1.wine`]-()\nWHERE T1.Color = 'White' AND T2.Score > 90\nRETURN DISTINCT T1.Grape",
        "question": "Find the white grape used to produce wines with scores above 90.",
        "answers": [
            [
                "Chardonnay"
            ],
            [
                "Roussanne"
            ],
            [
                "Sauvignon Blanc"
            ]
        ]
    },
    {
        "db_id": "wine_1",
        "query": "MATCH ()-[wine:`wine_1.wine`]-()\nWHERE wine.Year = 2009 AND wine.Grape = 'Zinfandel'\nRETURN avg(wine.Price),avg(wine.Cases)",
        "question": "What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?",
        "answers": [
            [
                18.0,
                15000.0
            ]
        ]
    },
    {
        "db_id": "wine_1",
        "query": "MATCH ()-[wine:`wine_1.wine`]-()\nWHERE wine.Year = 2009 AND wine.Grape = 'Zinfandel'\nRETURN avg(wine.Price),avg(wine.Cases)",
        "question": "Give the average price and case of wines made from Zinfandel grapes in the year 2009.",
        "answers": [
            [
                18.0,
                15000.0
            ]
        ]
    },
    {
        "db_id": "train_station",
        "query": "MATCH (station:`train_station.station`)\nRETURN count(*)",
        "question": "How many train stations are there?",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "train_station",
        "query": "MATCH (station:`train_station.station`)\nRETURN station.Name,station.Location,station.Number_of_Platforms",
        "question": "Show the name, location, and number of platforms for all stations.",
        "answers": [
            [
                "London Waterloo",
                "London",
                19
            ],
            [
                "London Victoria",
                "London",
                19
            ],
            [
                "London Bridge",
                "London",
                12
            ],
            [
                "London Liverpool Street",
                "London",
                18
            ],
            [
                "London Euston",
                "London",
                18
            ],
            [
                "London Charing Cross",
                "London",
                6
            ],
            [
                "Birmingham New Street",
                "Birmingham",
                13
            ],
            [
                "London King's Cross",
                "London",
                12
            ],
            [
                "Glasgow Central",
                "Glasgow",
                17
            ],
            [
                "East Croydon",
                "London",
                6
            ],
            [
                "London St Pancras",
                "London",
                15
            ],
            [
                "Stratford",
                "London",
                15
            ]
        ]
    },
    {
        "db_id": "train_station",
        "query": "MATCH (station:`train_station.station`)\nRETURN DISTINCT station.Location",
        "question": "What are all locations of train stations?",
        "answers": [
            [
                "London"
            ],
            [
                "Birmingham"
            ],
            [
                "Glasgow"
            ]
        ]
    },
    {
        "db_id": "train_station",
        "query": "MATCH (station:`train_station.station`)\nWHERE station.Location <> 'London'\nRETURN station.Name,station.Total_Passengers",
        "question": "Show the names and total passengers for all train stations not in London.",
        "answers": [
            [
                "Birmingham New Street",
                36.331
            ],
            [
                "Glasgow Central",
                29.658
            ]
        ]
    },
    {
        "db_id": "train_station",
        "query": "MATCH (station:`train_station.station`)\nRETURN station.Name,station.Main_Services\nORDER BY station.Total_Passengers DESC\nLIMIT 3",
        "question": "Show the names and main services for train stations that have the top three total number of passengers.",
        "answers": [
            [
                "London Waterloo",
                "South Western Main Line West of England Main Line"
            ],
            [
                "London Victoria",
                "Brighton Main Line Chatham Main Line"
            ],
            [
                "London Bridge",
                "South Eastern Main Line Thameslink"
            ]
        ]
    },
    {
        "db_id": "train_station",
        "query": "MATCH (station:`train_station.station`)\nWHERE station.Number_of_Platforms >= 15 AND station.Total_Passengers > 25\nRETURN DISTINCT station.Location",
        "question": "Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers.",
        "answers": [
            [
                "London"
            ],
            [
                "Glasgow"
            ]
        ]
    },
    {
        "db_id": "train_station",
        "query": "MATCH (station:`train_station.station`)\nRETURN station.Location\nORDER BY station.Location DESC\nLIMIT 1",
        "question": "Show the location with most number of train stations.",
        "answers": [
            [
                "London"
            ]
        ]
    },
    {
        "db_id": "train_station",
        "query": "MATCH (train:`train_station.train`)\nRETURN train.Name,train.Time,train.Service",
        "question": "Show the name, time, and service for all trains.",
        "answers": [
            [
                "Ananthapuri Express",
                "17:15",
                "Daily"
            ],
            [
                "Guruvayur Express",
                "22:10",
                "Daily"
            ],
            [
                "Guruvayur Express",
                "4:49",
                "Daily"
            ],
            [
                "Ananthapuri Express",
                "11:35",
                "Daily"
            ],
            [
                "Jayanthi Janatha Express",
                "06:30",
                "Daily"
            ],
            [
                "Island Express",
                "11:15",
                "Daily"
            ],
            [
                "Madurai Fast Passenger",
                "21:49",
                "Daily"
            ],
            [
                "Quilon Fast Passenger",
                "04:55",
                "Daily"
            ],
            [
                "Island Express",
                "16:59",
                "Daily"
            ],
            [
                "Jayanthi Janatha Express",
                "10:38",
                "Daily"
            ],
            [
                "Parasuram Express",
                "04:20",
                "Daily"
            ]
        ]
    },
    {
        "db_id": "train_station",
        "query": "MATCH (train:`train_station.train`)\nRETURN count(*)",
        "question": "Show the number of trains",
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "db_id": "train_station",
        "query": "MATCH (train:`train_station.train`)\nRETURN train.Name,train.Service\nORDER BY train.Time",
        "question": "Show the name and service for all trains in order by time.",
        "answers": [
            [
                "Parasuram Express",
                "Daily"
            ],
            [
                "Quilon Fast Passenger",
                "Daily"
            ],
            [
                "Jayanthi Janatha Express",
                "Daily"
            ],
            [
                "Jayanthi Janatha Express",
                "Daily"
            ],
            [
                "Island Express",
                "Daily"
            ],
            [
                "Ananthapuri Express",
                "Daily"
            ],
            [
                "Island Express",
                "Daily"
            ],
            [
                "Ananthapuri Express",
                "Daily"
            ],
            [
                "Madurai Fast Passenger",
                "Daily"
            ],
            [
                "Guruvayur Express",
                "Daily"
            ],
            [
                "Guruvayur Express",
                "Daily"
            ]
        ]
    },
    {
        "db_id": "train_station",
        "query": "MATCH (T2:`train_station.station`)-[T1:`train_station.train_station`]-()\nRETURN T2.Name,count(*)",
        "question": "Show the station name and number of trains in each station.",
        "answers": [
            [
                "London Waterloo",
                3
            ],
            [
                "London Victoria",
                1
            ],
            [
                "London Bridge",
                1
            ],
            [
                "London Euston",
                1
            ],
            [
                "London King's Cross",
                1
            ],
            [
                "Glasgow Central",
                2
            ],
            [
                "East Croydon",
                2
            ]
        ]
    },
    {
        "db_id": "train_station",
        "query": "MATCH (T2:`train_station.station`)-[T1:`train_station.train_station`]-(T3:`train_station.train`)\nRETURN T2.Name,T3.Name",
        "question": "show the train name and station name for each train.",
        "answers": [
            [
                "London Waterloo",
                "Ananthapuri Express"
            ],
            [
                "London Waterloo",
                "Guruvayur Express"
            ],
            [
                "London Waterloo",
                "Guruvayur Express"
            ],
            [
                "London Victoria",
                "Ananthapuri Express"
            ],
            [
                "London Bridge",
                "Jayanthi Janatha Express"
            ],
            [
                "London Euston",
                "Island Express"
            ],
            [
                "London King's Cross",
                "Madurai Fast Passenger"
            ],
            [
                "Glasgow Central",
                "Quilon Fast Passenger"
            ],
            [
                "Glasgow Central",
                "Island Express"
            ],
            [
                "East Croydon",
                "Jayanthi Janatha Express"
            ],
            [
                "East Croydon",
                "Parasuram Express"
            ]
        ]
    },
    {
        "db_id": "train_station",
        "query": "MATCH (T2:`train_station.station`)-[T1:`train_station.train_station`]-(T3:`train_station.train`)\nWHERE T2.Location = 'London'\nRETURN T3.Name,T3.Time\nORDER BY T3.Time DESC",
        "question": "Show all train names and times in stations in London in descending order by train time.",
        "answers": [
            [
                "Guruvayur Express",
                "4:49"
            ],
            [
                "Guruvayur Express",
                "22:10"
            ],
            [
                "Madurai Fast Passenger",
                "21:49"
            ],
            [
                "Ananthapuri Express",
                "17:15"
            ],
            [
                "Ananthapuri Express",
                "11:35"
            ],
            [
                "Island Express",
                "11:15"
            ],
            [
                "Jayanthi Janatha Express",
                "10:38"
            ],
            [
                "Jayanthi Janatha Express",
                "06:30"
            ],
            [
                "Parasuram Express",
                "04:20"
            ]
        ]
    },
    {
        "db_id": "train_station",
        "query": "MATCH (T2:`train_station.station`)-[T1:`train_station.train_station`]-()\nWITH count(T1.Station_ID) AS cnt, T2\nRETURN T2.Name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Show the station name with greatest number of trains.",
        "answers": [
            [
                "London Waterloo"
            ]
        ]
    },
    {
        "db_id": "train_station",
        "query": "MATCH (T2:`train_station.station`)-[T1:`train_station.train_station`]-()\nWITH T2.Name AS Name, count(*) AS count\nWHERE count  >= 2\nRETURN Name",
        "question": "Show the station name with at least two trains.",
        "answers": [
            [
                "London Waterloo"
            ],
            [
                "Glasgow Central"
            ],
            [
                "East Croydon"
            ]
        ]
    },
    {
        "db_id": "train_station",
        "query": "MATCH (station:`train_station.station`)\nWITH count(*) AS count, station.Location AS Location\nWHERE count  = 1\nRETURN Location",
        "question": "Show all locations with only 1 station.",
        "answers": [
            [
                "Birmingham"
            ],
            [
                "Glasgow"
            ]
        ]
    },
    {
        "db_id": "train_station",
        "query": "MATCH (station:`train_station.station`)\nRETURN station.Name,station.Location\nORDER BY station.Annual_entry_exit,station.Annual_interchanges",
        "question": "List the names and locations of all stations ordered by their yearly entry exit and interchange amounts.",
        "answers": [
            [
                "East Croydon",
                "London"
            ],
            [
                "Stratford",
                "London"
            ],
            [
                "London St Pancras",
                "London"
            ],
            [
                "Glasgow Central",
                "Glasgow"
            ],
            [
                "London King's Cross",
                "London"
            ],
            [
                "Birmingham New Street",
                "Birmingham"
            ],
            [
                "London Euston",
                "London"
            ],
            [
                "London Charing Cross",
                "London"
            ],
            [
                "London Bridge",
                "London"
            ],
            [
                "London Liverpool Street",
                "London"
            ],
            [
                "London Victoria",
                "London"
            ],
            [
                "London Waterloo",
                "London"
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (vehicles:`driving_school.Vehicles`)\nRETURN vehicles.vehicle_id",
        "question": "List all vehicle id",
        "answers": [
            [
                1
            ],
            [
                2
            ],
            [
                3
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (vehicles:`driving_school.Vehicles`)\nRETURN vehicles.vehicle_id",
        "question": "What are the ids of all vehicles?",
        "answers": [
            [
                1
            ],
            [
                2
            ],
            [
                3
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (vehicles:`driving_school.Vehicles`)\nRETURN count(*)",
        "question": "How many vehicle in total?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (vehicles:`driving_school.Vehicles`)\nRETURN count(*)",
        "question": "How many vehicles exist?",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (vehicles:`driving_school.Vehicles`)\nWHERE vehicles.vehicle_id = 1\nRETURN vehicles.vehicle_details",
        "question": "Show the detail of vehicle with id 1.",
        "answers": [
            [
                "Van"
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (vehicles:`driving_school.Vehicles`)\nWHERE vehicles.vehicle_id = 1\nRETURN vehicles.vehicle_details",
        "question": "What are the details of the car with id 1?",
        "answers": [
            [
                "Van"
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (staff:`driving_school.Staff`)\nRETURN staff.first_name,staff.middle_name,staff.last_name",
        "question": "List the first name middle name and last name of all staff.",
        "answers": [
            [
                "Janessa",
                "Amara",
                "Sawayn"
            ],
            [
                "Camylle",
                "Icie",
                "Weissnat"
            ],
            [
                "Kaitlin",
                "Stephania",
                "Mertz"
            ],
            [
                "Rebekah",
                "Sherwood",
                "Hermann"
            ],
            [
                "Jedidiah",
                "Dejon",
                "Herzog"
            ],
            [
                "Eulalia",
                "Tre",
                "Maggio"
            ],
            [
                "Queenie",
                "Madelyn",
                "Macejkovic"
            ],
            [
                "Titus",
                "Duane",
                "Durgan"
            ],
            [
                "Margie",
                "Caesar",
                "Doyle"
            ],
            [
                "Jaleel",
                "Maiya",
                "Rogahn"
            ],
            [
                "Winnifred",
                "Liam",
                "Jast"
            ],
            [
                "Lincoln",
                "Benny",
                "Carroll"
            ],
            [
                "Ernestina",
                "Clarabelle",
                "Mraz"
            ],
            [
                "Ludie",
                "Ulices",
                "Kuphal"
            ],
            [
                "Simeon",
                "Mayra",
                "Turner"
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (staff:`driving_school.Staff`)\nRETURN staff.first_name,staff.middle_name,staff.last_name",
        "question": "What are the first, middle, and last names of all staff?",
        "answers": [
            [
                "Janessa",
                "Amara",
                "Sawayn"
            ],
            [
                "Camylle",
                "Icie",
                "Weissnat"
            ],
            [
                "Kaitlin",
                "Stephania",
                "Mertz"
            ],
            [
                "Rebekah",
                "Sherwood",
                "Hermann"
            ],
            [
                "Jedidiah",
                "Dejon",
                "Herzog"
            ],
            [
                "Eulalia",
                "Tre",
                "Maggio"
            ],
            [
                "Queenie",
                "Madelyn",
                "Macejkovic"
            ],
            [
                "Titus",
                "Duane",
                "Durgan"
            ],
            [
                "Margie",
                "Caesar",
                "Doyle"
            ],
            [
                "Jaleel",
                "Maiya",
                "Rogahn"
            ],
            [
                "Winnifred",
                "Liam",
                "Jast"
            ],
            [
                "Lincoln",
                "Benny",
                "Carroll"
            ],
            [
                "Ernestina",
                "Clarabelle",
                "Mraz"
            ],
            [
                "Ludie",
                "Ulices",
                "Kuphal"
            ],
            [
                "Simeon",
                "Mayra",
                "Turner"
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (staff:`driving_school.Staff`)\nRETURN count(*)",
        "question": "How many staff in total?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (staff:`driving_school.Staff`)\nRETURN count(*)",
        "question": "How many employees are there?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (customers:`driving_school.Customers`)\nRETURN customers.first_name,customers.last_name",
        "question": "List the first name and last name of all customers.",
        "answers": [
            [
                "Carole",
                "Bernhard"
            ],
            [
                "Genevieve",
                "Terry"
            ],
            [
                "Clara",
                "Ortiz"
            ],
            [
                "Jordy",
                "Tromp"
            ],
            [
                "Millie",
                "Bruen"
            ],
            [
                "Amya",
                "Spinka"
            ],
            [
                "Marina",
                "Koelpin"
            ],
            [
                "Dianna",
                "Trantow"
            ],
            [
                "Leif",
                "Mertz"
            ],
            [
                "Rylan",
                "Goodwin"
            ],
            [
                "Ray",
                "Kohler"
            ],
            [
                "Omer",
                "Leuschke"
            ],
            [
                "Sigrid",
                "Schmeler"
            ],
            [
                "Estelle",
                "Grant"
            ],
            [
                "Dameon",
                "Sanford"
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (customers:`driving_school.Customers`)\nRETURN customers.first_name,customers.last_name",
        "question": "What are the first and last names for all customers?",
        "answers": [
            [
                "Carole",
                "Bernhard"
            ],
            [
                "Genevieve",
                "Terry"
            ],
            [
                "Clara",
                "Ortiz"
            ],
            [
                "Jordy",
                "Tromp"
            ],
            [
                "Millie",
                "Bruen"
            ],
            [
                "Amya",
                "Spinka"
            ],
            [
                "Marina",
                "Koelpin"
            ],
            [
                "Dianna",
                "Trantow"
            ],
            [
                "Leif",
                "Mertz"
            ],
            [
                "Rylan",
                "Goodwin"
            ],
            [
                "Ray",
                "Kohler"
            ],
            [
                "Omer",
                "Leuschke"
            ],
            [
                "Sigrid",
                "Schmeler"
            ],
            [
                "Estelle",
                "Grant"
            ],
            [
                "Dameon",
                "Sanford"
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (customers:`driving_school.Customers`)\nWHERE customers.amount_outstanding > 2000\nRETURN customers.phone_number,customers.email_address",
        "question": "List phone number and email address of customer with more than 2000 outstanding balance.",
        "answers": [
            [
                "+14(5)2351480248",
                "huel.jana@example.org"
            ],
            [
                "374-483-2758x85087",
                "hilario.sporer@example.org"
            ],
            [
                "218.550.1362",
                "afranecki@example.com"
            ],
            [
                "1-618-535-9750",
                "asha.kilback@example.org"
            ],
            [
                "1-673-962-8158x7646",
                "kozey.citlalli@example.org"
            ],
            [
                "(662)490-3108",
                "mayert.judy@example.com"
            ],
            [
                "206-054-0689x05861",
                "kroberts@example.org"
            ],
            [
                "753.921.0871",
                "mariela28@example.org"
            ],
            [
                "(297)122-0086",
                "karina.carroll@example.net"
            ],
            [
                "417.136.2900x672",
                "myrl.lind@example.net"
            ],
            [
                "192-395-2411",
                "wehner.harold@example.com"
            ],
            [
                "1-875-045-0806",
                "ehowell@example.com"
            ],
            [
                "(729)396-4354x3576",
                "kitty.hand@example.net"
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (customers:`driving_school.Customers`)\nWHERE customers.amount_outstanding > 2000\nRETURN customers.phone_number,customers.email_address",
        "question": "What are the phone numbers and email addresses of all customers who have an outstanding balance of more than 2000?",
        "answers": [
            [
                "+14(5)2351480248",
                "huel.jana@example.org"
            ],
            [
                "374-483-2758x85087",
                "hilario.sporer@example.org"
            ],
            [
                "218.550.1362",
                "afranecki@example.com"
            ],
            [
                "1-618-535-9750",
                "asha.kilback@example.org"
            ],
            [
                "1-673-962-8158x7646",
                "kozey.citlalli@example.org"
            ],
            [
                "(662)490-3108",
                "mayert.judy@example.com"
            ],
            [
                "206-054-0689x05861",
                "kroberts@example.org"
            ],
            [
                "753.921.0871",
                "mariela28@example.org"
            ],
            [
                "(297)122-0086",
                "karina.carroll@example.net"
            ],
            [
                "417.136.2900x672",
                "myrl.lind@example.net"
            ],
            [
                "192-395-2411",
                "wehner.harold@example.com"
            ],
            [
                "1-875-045-0806",
                "ehowell@example.com"
            ],
            [
                "(729)396-4354x3576",
                "kitty.hand@example.net"
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (customers:`driving_school.Customers`)\nWHERE customers.customer_status_code = 'Good Customer'\nRETURN customers.date_of_birth",
        "question": "When are the birthdays of customer who are classified as 'Good Customer' status?",
        "answers": [
            [
                "1994-06-21 01:34:56"
            ],
            [
                "1993-02-07 05:40:26"
            ],
            [
                "1993-03-08 08:48:42"
            ],
            [
                "1994-05-07 01:32:16"
            ],
            [
                "1988-09-19 14:45:56"
            ],
            [
                "1996-05-23 01:21:54"
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (customers:`driving_school.Customers`)\nWHERE customers.customer_status_code = 'Good Customer'\nRETURN customers.date_of_birth",
        "question": "What is the date of birth of every customer whose status code is 'Good Customer'?",
        "answers": [
            [
                "1994-06-21 01:34:56"
            ],
            [
                "1993-02-07 05:40:26"
            ],
            [
                "1993-03-08 08:48:42"
            ],
            [
                "1994-05-07 01:32:16"
            ],
            [
                "1988-09-19 14:45:56"
            ],
            [
                "1996-05-23 01:21:54"
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (customers:`driving_school.Customers`)\nRETURN count(*)",
        "question": "How many customers in total?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (customers:`driving_school.Customers`)\nRETURN count(*)",
        "question": "How many customers are there?",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (customers:`driving_school.Customers`)\nRETURN customers.customer_status_code,count(*)",
        "question": "List all customer status codes and the number of customers having each status code.",
        "answers": [
            [
                "Bad Customer",
                9
            ],
            [
                "Good Customer",
                6
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (customers:`driving_school.Customers`)\nRETURN customers.customer_status_code,count(*)",
        "question": "For each customer status code, how many customers are classified that way?",
        "answers": [
            [
                "Bad Customer",
                9
            ],
            [
                "Good Customer",
                6
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (customers:`driving_school.Customers`)\nWHERE 1000<=customers.amount_outstanding<=3000\nRETURN customers.first_name,customers.last_name",
        "question": "List the first name and last name of customers have the amount of outstanding between 1000 and 3000.",
        "answers": [
            [
                "Rylan",
                "Goodwin"
            ],
            [
                "Omer",
                "Leuschke"
            ],
            [
                "Sigrid",
                "Schmeler"
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (customers:`driving_school.Customers`)\nWHERE 1000<=customers.amount_outstanding<=3000\nRETURN customers.first_name,customers.last_name",
        "question": "What are the first and last names of all customers with between 1000 and 3000 dollars outstanding?",
        "answers": [
            [
                "Rylan",
                "Goodwin"
            ],
            [
                "Omer",
                "Leuschke"
            ],
            [
                "Sigrid",
                "Schmeler"
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (T1:`driving_school.Customers`)-[]-(T2:`driving_school.Addresses`)\nWITH count(T2.city) AS cnt, T2\nRETURN T2.city\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Which city does has most number of customers?",
        "answers": [
            [
                "South Richieport"
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (T1:`driving_school.Customers`)-[]-(T2:`driving_school.Addresses`)\nWITH count(T2.city) AS cnt, T2\nRETURN T2.city\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the city with the most customers?",
        "answers": [
            [
                "South Richieport"
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (T1:`driving_school.Customer_Payments`)-[]-(T2:`driving_school.Customers`)\nWITH count(*) AS count, T2.first_name AS first_name, T2.last_name AS last_name\nWHERE count  > 2\nRETURN first_name,last_name",
        "question": "List first name and last name of customers that have more than 2 payments.",
        "answers": [
            [
                "Estelle",
                "Grant"
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (T1:`driving_school.Customer_Payments`)-[]-(T2:`driving_school.Customers`)\nWITH count(*) AS count, T2.first_name AS first_name, T2.last_name AS last_name\nWHERE count  > 2\nRETURN first_name,last_name",
        "question": "What are the first and last names of all customers with more than 2 payments?",
        "answers": [
            [
                "Estelle",
                "Grant"
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (customer_payments:`driving_school.Customer_Payments`)\nRETURN customer_payments.payment_method_code,count(*)",
        "question": "List all payment methods and number of payments using each payment methods.",
        "answers": [
            [
                "Direct Debit",
                10
            ],
            [
                "Credit Card",
                5
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (customer_payments:`driving_school.Customer_Payments`)\nRETURN customer_payments.payment_method_code,count(*)",
        "question": "For each payment method, how many payments were made?",
        "answers": [
            [
                "Direct Debit",
                10
            ],
            [
                "Credit Card",
                5
            ]
        ]
    },
    {
        "db_id": "driving_school",
        "query": "MATCH (T1:`driving_school.Vehicles`)-[]-(T2:`driving_school.Lessons`)\nWITH T1, count(T1.vehicle_id) AS cnt\nRETURN T1.vehicle_id,T1.vehicle_details\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the id and detail of the vehicle used in lessons for most of the times?",
        "answers": [
            [
                2,
                "Truck"
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nRETURN count(*)",
        "question": "How many faculty do we have?",
        "answers": [
            [
                58
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nRETURN count(*)",
        "question": "What is the total number of faculty members?",
        "answers": [
            [
                58
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nRETURN DISTINCT faculty.Rank",
        "question": "What ranks do we have for faculty?",
        "answers": [
            [
                "Instructor"
            ],
            [
                "Professor"
            ],
            [
                "AssocProf"
            ],
            [
                "AsstProf"
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nRETURN DISTINCT faculty.Rank",
        "question": "Find the list of distinct ranks for faculty.",
        "answers": [
            [
                "Instructor"
            ],
            [
                "Professor"
            ],
            [
                "AssocProf"
            ],
            [
                "AsstProf"
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nRETURN DISTINCT faculty.Building",
        "question": "Show all the distinct buildings that have faculty rooms.",
        "answers": [
            [
                "NEB"
            ],
            [
                "Barton"
            ],
            [
                "Krieger"
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nRETURN DISTINCT faculty.Building",
        "question": "What buildings have faculty offices?",
        "answers": [
            [
                "NEB"
            ],
            [
                "Barton"
            ],
            [
                "Krieger"
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nRETURN faculty.Rank,faculty.Fname,faculty.Lname",
        "question": "Show the rank, first name, and last name for all the faculty.",
        "answers": [
            [
                "Instructor",
                "Mark",
                "Giuliano"
            ],
            [
                "Professor",
                "Michael",
                "Goodrich"
            ],
            [
                "Professor",
                "Gerald",
                "Masson"
            ],
            [
                "AssocProf",
                "Thordur",
                "Runolfsson"
            ],
            [
                "Professor",
                "Daniel",
                "Naiman"
            ],
            [
                "Instructor",
                "Stacey",
                "Jones"
            ],
            [
                "Professor",
                "Frederic",
                "Davidson"
            ],
            [
                "Professor",
                "William",
                "Brody"
            ],
            [
                "Professor",
                "Gerard",
                "Meyer"
            ],
            [
                "AsstProf",
                "David",
                "Yarowsky"
            ],
            [
                "Professor",
                "Edward",
                "Scheinerman"
            ],
            [
                "AsstProf",
                "Carey",
                "Priebe"
            ],
            [
                "Professor",
                "James",
                "Fill"
            ],
            [
                "Professor",
                "Alan",
                "Goldman"
            ],
            [
                "AssocProf",
                "Scott",
                "Smith"
            ],
            [
                "Instructor",
                "Joanne",
                "Houlahan"
            ],
            [
                "Professor",
                "Luigi",
                "Burzio"
            ],
            [
                "AsstProf",
                "Robert",
                "Frank"
            ],
            [
                "Instructor",
                "Louis",
                "Beach"
            ],
            [
                "AsstProf",
                "Cheng",
                "Cheng"
            ],
            [
                "Professor",
                "Alexander",
                "Kaplan"
            ],
            [
                "Instructor",
                "William",
                "Byrne"
            ],
            [
                "Professor",
                "Shih-Ping",
                "Han"
            ],
            [
                "Professor",
                "Paul",
                "Smolensky"
            ],
            [
                "AsstProf",
                "Pablo",
                "Iglesias"
            ],
            [
                "Professor",
                "John",
                "Goutsias"
            ],
            [
                "Professor",
                "Wilson",
                "Rugh"
            ],
            [
                "Professor",
                "Frederick",
                "Jelinek"
            ],
            [
                "Professor",
                "Charles",
                "Westgate"
            ],
            [
                "Professor",
                "Baruch",
                "Awerbuch"
            ],
            [
                "Professor",
                "Russell",
                "Taylor"
            ],
            [
                "AsstProf",
                "Eric",
                "Brill"
            ],
            [
                "AsstProf",
                "Lancelot",
                "James"
            ],
            [
                "Instructor",
                "Ellie",
                "Angelopoulou"
            ],
            [
                "Professor",
                "Howard",
                "Weinert"
            ],
            [
                "Professor",
                "John",
                "Wierman"
            ],
            [
                "AsstProf",
                "Subodh",
                "Kumar"
            ],
            [
                "AssocProf",
                "Lawrence",
                "Wolff"
            ],
            [
                "AsstProf",
                "Gert",
                "Cauwenberghs"
            ],
            [
                "Professor",
                "Andreas",
                "Andreou"
            ],
            [
                "AssocProf",
                "Steven",
                "Salzberg"
            ],
            [
                "AsstProf",
                "Lenore",
                "Cowen"
            ],
            [
                "Professor",
                "Michael",
                "McCloskey"
            ],
            [
                "AsstProf",
                "Yair",
                "Amir"
            ],
            [
                "AsstProf",
                "Michael",
                "Brent"
            ],
            [
                "AsstProf",
                "Brenda",
                "Rapp"
            ],
            [
                "Professor",
                "Rao",
                "Kosaraju"
            ],
            [
                "AssocProf",
                "Oliver",
                "Collins"
            ],
            [
                "AssocProf",
                "Brian",
                "Hughes"
            ],
            [
                "Professor",
                "Richard",
                "Joseph"
            ],
            [
                "Professor",
                "Jacob",
                "Khurgin"
            ],
            [
                "AssocProf",
                "Jerry",
                "Prince"
            ],
            [
                "AssocProf",
                "Geraldine",
                "Legendre"
            ],
            [
                "AsstProf",
                "Colin",
                "Wu"
            ],
            [
                "Professor",
                "Jong-Shi",
                "Pang"
            ],
            [
                "Instructor",
                "Robert",
                "Glaser"
            ],
            [
                "Instructor",
                "Arthur",
                "Delcher"
            ],
            [
                "AsstProf",
                "Leslie",
                "Hall"
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nRETURN faculty.Rank,faculty.Fname,faculty.Lname",
        "question": "What are the rank, first name, and last name of the faculty members?",
        "answers": [
            [
                "Instructor",
                "Mark",
                "Giuliano"
            ],
            [
                "Professor",
                "Michael",
                "Goodrich"
            ],
            [
                "Professor",
                "Gerald",
                "Masson"
            ],
            [
                "AssocProf",
                "Thordur",
                "Runolfsson"
            ],
            [
                "Professor",
                "Daniel",
                "Naiman"
            ],
            [
                "Instructor",
                "Stacey",
                "Jones"
            ],
            [
                "Professor",
                "Frederic",
                "Davidson"
            ],
            [
                "Professor",
                "William",
                "Brody"
            ],
            [
                "Professor",
                "Gerard",
                "Meyer"
            ],
            [
                "AsstProf",
                "David",
                "Yarowsky"
            ],
            [
                "Professor",
                "Edward",
                "Scheinerman"
            ],
            [
                "AsstProf",
                "Carey",
                "Priebe"
            ],
            [
                "Professor",
                "James",
                "Fill"
            ],
            [
                "Professor",
                "Alan",
                "Goldman"
            ],
            [
                "AssocProf",
                "Scott",
                "Smith"
            ],
            [
                "Instructor",
                "Joanne",
                "Houlahan"
            ],
            [
                "Professor",
                "Luigi",
                "Burzio"
            ],
            [
                "AsstProf",
                "Robert",
                "Frank"
            ],
            [
                "Instructor",
                "Louis",
                "Beach"
            ],
            [
                "AsstProf",
                "Cheng",
                "Cheng"
            ],
            [
                "Professor",
                "Alexander",
                "Kaplan"
            ],
            [
                "Instructor",
                "William",
                "Byrne"
            ],
            [
                "Professor",
                "Shih-Ping",
                "Han"
            ],
            [
                "Professor",
                "Paul",
                "Smolensky"
            ],
            [
                "AsstProf",
                "Pablo",
                "Iglesias"
            ],
            [
                "Professor",
                "John",
                "Goutsias"
            ],
            [
                "Professor",
                "Wilson",
                "Rugh"
            ],
            [
                "Professor",
                "Frederick",
                "Jelinek"
            ],
            [
                "Professor",
                "Charles",
                "Westgate"
            ],
            [
                "Professor",
                "Baruch",
                "Awerbuch"
            ],
            [
                "Professor",
                "Russell",
                "Taylor"
            ],
            [
                "AsstProf",
                "Eric",
                "Brill"
            ],
            [
                "AsstProf",
                "Lancelot",
                "James"
            ],
            [
                "Instructor",
                "Ellie",
                "Angelopoulou"
            ],
            [
                "Professor",
                "Howard",
                "Weinert"
            ],
            [
                "Professor",
                "John",
                "Wierman"
            ],
            [
                "AsstProf",
                "Subodh",
                "Kumar"
            ],
            [
                "AssocProf",
                "Lawrence",
                "Wolff"
            ],
            [
                "AsstProf",
                "Gert",
                "Cauwenberghs"
            ],
            [
                "Professor",
                "Andreas",
                "Andreou"
            ],
            [
                "AssocProf",
                "Steven",
                "Salzberg"
            ],
            [
                "AsstProf",
                "Lenore",
                "Cowen"
            ],
            [
                "Professor",
                "Michael",
                "McCloskey"
            ],
            [
                "AsstProf",
                "Yair",
                "Amir"
            ],
            [
                "AsstProf",
                "Michael",
                "Brent"
            ],
            [
                "AsstProf",
                "Brenda",
                "Rapp"
            ],
            [
                "Professor",
                "Rao",
                "Kosaraju"
            ],
            [
                "AssocProf",
                "Oliver",
                "Collins"
            ],
            [
                "AssocProf",
                "Brian",
                "Hughes"
            ],
            [
                "Professor",
                "Richard",
                "Joseph"
            ],
            [
                "Professor",
                "Jacob",
                "Khurgin"
            ],
            [
                "AssocProf",
                "Jerry",
                "Prince"
            ],
            [
                "AssocProf",
                "Geraldine",
                "Legendre"
            ],
            [
                "AsstProf",
                "Colin",
                "Wu"
            ],
            [
                "Professor",
                "Jong-Shi",
                "Pang"
            ],
            [
                "Instructor",
                "Robert",
                "Glaser"
            ],
            [
                "Instructor",
                "Arthur",
                "Delcher"
            ],
            [
                "AsstProf",
                "Leslie",
                "Hall"
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nWHERE faculty.Sex = 'F'\nRETURN faculty.Fname,faculty.Lname,faculty.Phone",
        "question": "Show the first name, last name, and phone number for all female faculty members.",
        "answers": [
            [
                "Stacey",
                "Jones",
                3550
            ],
            [
                "Joanne",
                "Houlahan",
                1260
            ],
            [
                "Ellie",
                "Angelopoulou",
                2152
            ],
            [
                "Lenore",
                "Cowen",
                2870
            ],
            [
                "Brenda",
                "Rapp",
                2032
            ],
            [
                "Geraldine",
                "Legendre",
                8972
            ],
            [
                "Leslie",
                "Hall",
                7332
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nWHERE faculty.Sex = 'F'\nRETURN faculty.Fname,faculty.Lname,faculty.Phone",
        "question": "What are the first name, last name, and phone number of all the female faculty members?",
        "answers": [
            [
                "Stacey",
                "Jones",
                3550
            ],
            [
                "Joanne",
                "Houlahan",
                1260
            ],
            [
                "Ellie",
                "Angelopoulou",
                2152
            ],
            [
                "Lenore",
                "Cowen",
                2870
            ],
            [
                "Brenda",
                "Rapp",
                2032
            ],
            [
                "Geraldine",
                "Legendre",
                8972
            ],
            [
                "Leslie",
                "Hall",
                7332
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nWHERE faculty.Sex = 'M'\nRETURN faculty.FacID",
        "question": "Show ids for all the male faculty.",
        "answers": [
            [
                1082
            ],
            [
                1121
            ],
            [
                1148
            ],
            [
                1172
            ],
            [
                1177
            ],
            [
                1823
            ],
            [
                2028
            ],
            [
                2119
            ],
            [
                2192
            ],
            [
                2291
            ],
            [
                2311
            ],
            [
                2738
            ],
            [
                2881
            ],
            [
                3457
            ],
            [
                4432
            ],
            [
                5718
            ],
            [
                6112
            ],
            [
                6182
            ],
            [
                6191
            ],
            [
                6330
            ],
            [
                6541
            ],
            [
                6910
            ],
            [
                6925
            ],
            [
                7134
            ],
            [
                7231
            ],
            [
                7271
            ],
            [
                7506
            ],
            [
                7712
            ],
            [
                7723
            ],
            [
                7792
            ],
            [
                8102
            ],
            [
                8118
            ],
            [
                8122
            ],
            [
                8423
            ],
            [
                8721
            ],
            [
                8722
            ],
            [
                8723
            ],
            [
                8741
            ],
            [
                8791
            ],
            [
                8918
            ],
            [
                8989
            ],
            [
                9172
            ],
            [
                9191
            ],
            [
                9199
            ],
            [
                9210
            ],
            [
                9379
            ],
            [
                9514
            ],
            [
                9811
            ],
            [
                9823
            ],
            [
                9824
            ],
            [
                9826
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nWHERE faculty.Sex = 'M'\nRETURN faculty.FacID",
        "question": "What are the faculty ids of all the male faculty members?",
        "answers": [
            [
                1082
            ],
            [
                1121
            ],
            [
                1148
            ],
            [
                1172
            ],
            [
                1177
            ],
            [
                1823
            ],
            [
                2028
            ],
            [
                2119
            ],
            [
                2192
            ],
            [
                2291
            ],
            [
                2311
            ],
            [
                2738
            ],
            [
                2881
            ],
            [
                3457
            ],
            [
                4432
            ],
            [
                5718
            ],
            [
                6112
            ],
            [
                6182
            ],
            [
                6191
            ],
            [
                6330
            ],
            [
                6541
            ],
            [
                6910
            ],
            [
                6925
            ],
            [
                7134
            ],
            [
                7231
            ],
            [
                7271
            ],
            [
                7506
            ],
            [
                7712
            ],
            [
                7723
            ],
            [
                7792
            ],
            [
                8102
            ],
            [
                8118
            ],
            [
                8122
            ],
            [
                8423
            ],
            [
                8721
            ],
            [
                8722
            ],
            [
                8723
            ],
            [
                8741
            ],
            [
                8791
            ],
            [
                8918
            ],
            [
                8989
            ],
            [
                9172
            ],
            [
                9191
            ],
            [
                9199
            ],
            [
                9210
            ],
            [
                9379
            ],
            [
                9514
            ],
            [
                9811
            ],
            [
                9823
            ],
            [
                9824
            ],
            [
                9826
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nRETURN faculty.Building,count(*)",
        "question": "Show all the buildings along with the number of faculty members the buildings have.",
        "answers": [
            [
                "NEB",
                18
            ],
            [
                "Barton",
                20
            ],
            [
                "Krieger",
                20
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nRETURN faculty.Building,count(*)",
        "question": "How many faculty members does each building have? List the result with the name of the building.",
        "answers": [
            [
                "NEB",
                18
            ],
            [
                "Barton",
                20
            ],
            [
                "Krieger",
                20
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nRETURN faculty.Rank,count(*)",
        "question": "For each faculty rank, show the number of faculty members who have it.",
        "answers": [
            [
                "Instructor",
                8
            ],
            [
                "Professor",
                27
            ],
            [
                "AssocProf",
                8
            ],
            [
                "AsstProf",
                15
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nRETURN faculty.Rank,count(*)",
        "question": "How many faculty members do we have for each faculty rank?",
        "answers": [
            [
                "Instructor",
                8
            ],
            [
                "Professor",
                27
            ],
            [
                "AssocProf",
                8
            ],
            [
                "AsstProf",
                15
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nRETURN faculty.Rank,faculty.Sex,count(*)",
        "question": "Show all the ranks and the number of male and female faculty for each rank.",
        "answers": [
            [
                "Instructor",
                "M",
                5
            ],
            [
                "Professor",
                "M",
                27
            ],
            [
                "AssocProf",
                "M",
                7
            ],
            [
                "Instructor",
                "F",
                3
            ],
            [
                "AsstProf",
                "M",
                12
            ],
            [
                "AsstProf",
                "F",
                3
            ],
            [
                "AssocProf",
                "F",
                1
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nRETURN faculty.Rank,faculty.Sex,count(*)",
        "question": "How many faculty members do we have for each rank and gender?",
        "answers": [
            [
                "Instructor",
                "M",
                5
            ],
            [
                "Professor",
                "M",
                27
            ],
            [
                "AssocProf",
                "M",
                7
            ],
            [
                "Instructor",
                "F",
                3
            ],
            [
                "AsstProf",
                "M",
                12
            ],
            [
                "AsstProf",
                "F",
                3
            ],
            [
                "AssocProf",
                "F",
                1
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nRETURN faculty.Rank\nORDER BY faculty.Rank ASC\nLIMIT 1",
        "question": "Which rank has the smallest number of faculty members?",
        "answers": [
            [
                "AssocProf"
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nRETURN faculty.Rank\nORDER BY faculty.Rank ASC\nLIMIT 1",
        "question": "Find the faculty rank that has the least members.",
        "answers": [
            [
                "AssocProf"
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (activity:`activity_1.Activity`)\nRETURN activity.activity_name",
        "question": "What activities do we have?",
        "answers": [
            [
                "Mountain Climbing"
            ],
            [
                "Canoeing"
            ],
            [
                "Kayaking"
            ],
            [
                "Spelunking"
            ],
            [
                "Extreme Canasta"
            ],
            [
                "Soccer"
            ],
            [
                "Baseball"
            ],
            [
                "Accordion Ensemble"
            ],
            [
                "Football"
            ],
            [
                "Volleyball"
            ],
            [
                "Canasta"
            ],
            [
                "Chess"
            ],
            [
                "Crossword Puzzles"
            ],
            [
                "Proselytizing"
            ],
            [
                "Square Dancing"
            ],
            [
                "Bungee Jumping"
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (activity:`activity_1.Activity`)\nRETURN activity.activity_name",
        "question": "List all the activities we have.",
        "answers": [
            [
                "Mountain Climbing"
            ],
            [
                "Canoeing"
            ],
            [
                "Kayaking"
            ],
            [
                "Spelunking"
            ],
            [
                "Extreme Canasta"
            ],
            [
                "Soccer"
            ],
            [
                "Baseball"
            ],
            [
                "Accordion Ensemble"
            ],
            [
                "Football"
            ],
            [
                "Volleyball"
            ],
            [
                "Canasta"
            ],
            [
                "Chess"
            ],
            [
                "Crossword Puzzles"
            ],
            [
                "Proselytizing"
            ],
            [
                "Square Dancing"
            ],
            [
                "Bungee Jumping"
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (activity:`activity_1.Activity`)\nRETURN count(*)",
        "question": "How many activities do we have?",
        "answers": [
            [
                16
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (activity:`activity_1.Activity`)\nRETURN count(*)",
        "question": "Find the number of activities available.",
        "answers": [
            [
                16
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH ()-[faculty_participates_in:`activity_1.Faculty_Participates_in`]-()\nRETURN count(DISTINCT faculty_participates_in.FacID)",
        "question": "How many faculty members participate in an activity?",
        "answers": [
            [
                18
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH ()-[faculty_participates_in:`activity_1.Faculty_Participates_in`]-()\nRETURN count(DISTINCT faculty_participates_in.FacID)",
        "question": "Give me the number of faculty members who participate in an activity",
        "answers": [
            [
                18
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (T1:`activity_1.Activity`)-[T2:`activity_1.Faculty_Participates_in`]-()\nWITH count(T1.actid) AS cnt, T1\nRETURN T1.activity_name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the name of the activity that has the most faculty members involved in?",
        "answers": [
            [
                "Crossword Puzzles"
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (T1:`activity_1.Activity`)-[T2:`activity_1.Faculty_Participates_in`]-()\nWITH count(T1.actid) AS cnt, T1\nRETURN T1.activity_name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Which activity has the most faculty members participating in? Find the activity name.",
        "answers": [
            [
                "Crossword Puzzles"
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (T1:`activity_1.Activity`)-[T2:`activity_1.Participates_in`]-()\nWITH count(T1.actid) AS cnt, T1\nRETURN T1.activity_name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "What is the name of the activity with the most students?",
        "answers": [
            [
                "Football"
            ]
        ]
    },
    {
        "db_id": "activity_1",
        "query": "MATCH (T1:`activity_1.Activity`)-[T2:`activity_1.Participates_in`]-()\nWITH count(T1.actid) AS cnt, T1\nRETURN T1.activity_name\nORDER BY cnt DESC\nLIMIT 1",
        "question": "Find the name of the activity that has the largest number of student participants.",
        "answers": [
            [
                "Football"
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (orders:`tracking_orders.Orders`)\nRETURN orders.order_id\nORDER BY orders.date_order_placed DESC\nLIMIT 1",
        "question": "What is the id of the most recent order?",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (orders:`tracking_orders.Orders`)\nRETURN orders.order_id\nORDER BY orders.date_order_placed DESC\nLIMIT 1",
        "question": "Find the id of the order made most recently.",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (orders:`tracking_orders.Orders`)\nRETURN orders.order_id,orders.customer_id\nORDER BY orders.date_order_placed\nLIMIT 1",
        "question": "what are the order id and customer id of the oldest order?",
        "answers": [
            [
                15,
                8
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (orders:`tracking_orders.Orders`)\nRETURN orders.order_id,orders.customer_id\nORDER BY orders.date_order_placed\nLIMIT 1",
        "question": "Find the order id and customer id associated with the oldest order.",
        "answers": [
            [
                15,
                8
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (order_items:`tracking_orders.Order_Items`)\nWHERE order_items.product_id = 11\nRETURN order_items.order_item_id",
        "question": "Find the ids of all the order items whose product id is 11.",
        "answers": [
            [
                5
            ],
            [
                9
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (order_items:`tracking_orders.Order_Items`)\nWHERE order_items.product_id = 11\nRETURN order_items.order_item_id",
        "question": "Find all the order items whose product id is 11. What are the order item ids?",
        "answers": [
            [
                5
            ],
            [
                9
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (T1:`tracking_orders.Customers`)-[]-(T2:`tracking_orders.Orders`)\nWHERE T2.order_status = \"On Road\"\nRETURN DISTINCT T1.customer_details",
        "question": "Find the details of all the distinct customers who have orders with status \"On Road\".",
        "answers": [
            [
                "commodi"
            ],
            [
                "deleniti"
            ],
            [
                "est"
            ],
            [
                "doloribus"
            ],
            [
                "officia"
            ],
            [
                "rerum"
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (T1:`tracking_orders.Customers`)-[]-(T2:`tracking_orders.Orders`)\nWHERE T2.order_status = \"On Road\"\nRETURN DISTINCT T1.customer_details",
        "question": "What are the distinct customers who have orders with status \"On Road\"? Give me the customer details?",
        "answers": [
            [
                "commodi"
            ],
            [
                "deleniti"
            ],
            [
                "est"
            ],
            [
                "doloribus"
            ],
            [
                "officia"
            ],
            [
                "rerum"
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (T1:`tracking_orders.Customers`)-[]-(T2:`tracking_orders.Orders`)\nWHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"\nRETURN T1.customer_name",
        "question": "Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01.",
        "answers": [
            [
                "George"
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (T1:`tracking_orders.Customers`)-[]-(T2:`tracking_orders.Orders`)\nWHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"\nRETURN T1.customer_name",
        "question": "Which customers made orders between 2009-01-01 and 2010-01-01? Find their names.",
        "answers": [
            [
                "George"
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (T1:`tracking_orders.Orders`)-[]-(T2:`tracking_orders.Order_Items`)\nWHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"\nRETURN DISTINCT T2.product_id",
        "question": "Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?",
        "answers": [
            [
                4
            ],
            [
                11
            ],
            [
                15
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (T1:`tracking_orders.Orders`)-[]-(T2:`tracking_orders.Order_Items`)\nWHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"\nRETURN DISTINCT T2.product_id",
        "question": "What are the distinct ids of products ordered between 1975-01-01 and 1976-01-01??",
        "answers": [
            [
                4
            ],
            [
                11
            ],
            [
                15
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (T1:`tracking_orders.Orders`)-[]-(T2:`tracking_orders.Shipments`)\nWHERE T2.invoice_number = 10\nRETURN T1.date_order_placed",
        "question": "What is the placement date of the order whose invoice number is 10?",
        "answers": [
            [
                "1983-09-08 12:32:49"
            ],
            [
                "1997-01-27 19:12:01"
            ],
            [
                "1982-12-29 21:10:11"
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (T1:`tracking_orders.Orders`)-[]-(T2:`tracking_orders.Shipments`)\nWHERE T2.invoice_number = 10\nRETURN T1.date_order_placed",
        "question": "On what day was the order with invoice number 10 placed?",
        "answers": [
            [
                "1983-09-08 12:32:49"
            ],
            [
                "1997-01-27 19:12:01"
            ],
            [
                "1982-12-29 21:10:11"
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (T1:`tracking_orders.Orders`)-[]-(T2:`tracking_orders.Order_Items`)-[]-(T3:`tracking_orders.Products`)\nRETURN count(*),T3.product_id",
        "question": "List the count and id of each product in all the orders.",
        "answers": [
            [
                1,
                1
            ],
            [
                2,
                3
            ],
            [
                2,
                4
            ],
            [
                1,
                7
            ],
            [
                1,
                8
            ],
            [
                2,
                11
            ],
            [
                1,
                12
            ],
            [
                2,
                14
            ],
            [
                3,
                15
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (T1:`tracking_orders.Orders`)-[]-(T2:`tracking_orders.Order_Items`)-[]-(T3:`tracking_orders.Products`)\nRETURN count(*),T3.product_id",
        "question": "For each product, return its id and the number of times it was ordered.",
        "answers": [
            [
                1,
                1
            ],
            [
                2,
                3
            ],
            [
                2,
                4
            ],
            [
                1,
                7
            ],
            [
                1,
                8
            ],
            [
                2,
                11
            ],
            [
                1,
                12
            ],
            [
                2,
                14
            ],
            [
                3,
                15
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (shipments:`tracking_orders.Shipments`)\nWHERE shipments.shipment_date > \"2000-01-01\"\nRETURN shipments.order_id",
        "question": "Find the ids of orders which are shipped after 2000-01-01.",
        "answers": [
            [
                10
            ],
            [
                12
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (shipments:`tracking_orders.Shipments`)\nWHERE shipments.shipment_date > \"2000-01-01\"\nRETURN shipments.order_id",
        "question": "Which orders have shipment after 2000-01-01? Give me the order ids.",
        "answers": [
            [
                10
            ],
            [
                12
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (shipments:`tracking_orders.Shipments`)\nWITH max(shipments.shipment_date) AS shipment_date\nMATCH (shipments:`tracking_orders.Shipments`)\nWHERE  shipments.shipment_date =  shipment_date \nRETURN shipments.order_id",
        "question": "Find the id of the order which is shipped most recently.",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (shipments:`tracking_orders.Shipments`)\nWITH max(shipments.shipment_date) AS shipment_date\nMATCH (shipments:`tracking_orders.Shipments`)\nWHERE  shipments.shipment_date =  shipment_date \nRETURN shipments.order_id",
        "question": "Which order has the most recent shipment? Give me the order id.",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (products:`tracking_orders.Products`)\nRETURN DISTINCT products.product_name\nORDER BY products.product_name",
        "question": "List the names of all distinct products in alphabetical order.",
        "answers": [
            [
                "book"
            ],
            [
                "clothes"
            ],
            [
                "food"
            ],
            [
                "music"
            ],
            [
                "phone"
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (products:`tracking_orders.Products`)\nRETURN DISTINCT products.product_name\nORDER BY products.product_name",
        "question": "Sort all the distinct products in alphabetical order.",
        "answers": [
            [
                "book"
            ],
            [
                "clothes"
            ],
            [
                "food"
            ],
            [
                "music"
            ],
            [
                "phone"
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (invoices:`tracking_orders.Invoices`)\nWHERE invoices.invoice_date < \"1989-09-03\" OR invoices.invoice_date > \"2007-12-25\"\nRETURN invoices.invoice_number",
        "question": "Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.",
        "answers": [
            [
                4
            ],
            [
                5
            ],
            [
                6
            ],
            [
                8
            ],
            [
                9
            ],
            [
                11
            ],
            [
                12
            ],
            [
                13
            ],
            [
                15
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (invoices:`tracking_orders.Invoices`)\nWHERE invoices.invoice_date < \"1989-09-03\" OR invoices.invoice_date > \"2007-12-25\"\nRETURN invoices.invoice_number",
        "question": "What are the invoice numbers created before 1989-09-03 or after 2007-12-25?",
        "answers": [
            [
                4
            ],
            [
                5
            ],
            [
                6
            ],
            [
                8
            ],
            [
                9
            ],
            [
                11
            ],
            [
                12
            ],
            [
                13
            ],
            [
                15
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (invoices:`tracking_orders.Invoices`)\nWHERE invoices.invoice_date < \"1989-09-03\" OR invoices.invoice_date > \"2007-12-25\"\nRETURN DISTINCT invoices.invoice_details",
        "question": "Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.",
        "answers": [
            [
                "tempore"
            ],
            [
                "labore"
            ],
            [
                "optio"
            ],
            [
                "doloremque"
            ],
            [
                "quo"
            ],
            [
                "earum"
            ],
            [
                "ea"
            ],
            [
                "voluptatem"
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (invoices:`tracking_orders.Invoices`)\nWHERE invoices.invoice_date < \"1989-09-03\" OR invoices.invoice_date > \"2007-12-25\"\nRETURN DISTINCT invoices.invoice_details",
        "question": "What are the distinct details of invoices created before 1989-09-03 or after 2007-12-25?",
        "answers": [
            [
                "tempore"
            ],
            [
                "labore"
            ],
            [
                "optio"
            ],
            [
                "doloremque"
            ],
            [
                "quo"
            ],
            [
                "earum"
            ],
            [
                "ea"
            ],
            [
                "voluptatem"
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (T1:`tracking_orders.Orders`)-[]-(T2:`tracking_orders.Customers`)\nWITH count(*) AS count, T2.customer_name AS customer_name\nWHERE count  >= 2\nRETURN customer_name,count",
        "question": "For each customer who has at least two orders, find the customer name and number of orders made.",
        "answers": [
            [
                "George",
                3
            ],
            [
                "Beulah",
                2
            ],
            [
                "Jeramie",
                3
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (T1:`tracking_orders.Orders`)-[]-(T2:`tracking_orders.Customers`)\nWITH count(*) AS count, T2.customer_name AS customer_name\nWHERE count  >= 2\nRETURN customer_name,count",
        "question": "Which customers have made at least two orders? Give me each customer name and number of orders made.",
        "answers": [
            [
                "George",
                3
            ],
            [
                "Beulah",
                2
            ],
            [
                "Jeramie",
                3
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (T1:`tracking_orders.Orders`)-[]-(T2:`tracking_orders.Customers`)\nWITH count(*) AS count, T2.customer_name AS customer_name\nWHERE count  <= 2\nRETURN customer_name",
        "question": "Find the name of the customers who have at most two orders.",
        "answers": [
            [
                "Alberto"
            ],
            [
                "Leilani"
            ],
            [
                "Hadley"
            ],
            [
                "Violet"
            ],
            [
                "Parker"
            ],
            [
                "Devan"
            ],
            [
                "Beulah"
            ],
            [
                "Hershel"
            ]
        ]
    },
    {
        "db_id": "tracking_orders",
        "query": "MATCH (T1:`tracking_orders.Orders`)-[]-(T2:`tracking_orders.Customers`)\nWITH count(*) AS count, T2.customer_name AS customer_name\nWHERE count  <= 2\nRETURN customer_name",
        "question": "What are the names of the customers who have made two or less orders?",
        "answers": [
            [
                "Alberto"
            ],
            [
                "Leilani"
            ],
            [
                "Hadley"
            ],
            [
                "Violet"
            ],
            [
                "Parker"
            ],
            [
                "Devan"
            ],
            [
                "Beulah"
            ],
            [
                "Hershel"
            ]
        ]
    },
    {
        "db_id": "architecture",
        "query": "MATCH (architect:`architecture.architect`)\nWHERE architect.gender = 'female'\nRETURN count(*)",
        "question": "How many architects are female?",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "db_id": "architecture",
        "query": "MATCH (architect:`architecture.architect`)\nWHERE architect.gender = 'male'\nRETURN architect.name,architect.nationality,architect.id\nORDER BY architect.name",
        "question": "List the name, nationality and id of all male architects ordered by their names lexicographically.",
        "answers": [
            [
                "Frank Gehry",
                "Canadian",
                "2"
            ],
            [
                "Frank Lloyd Wright",
                "American",
                "1"
            ],
            [
                "Le Corbusier",
                "Swiss, French",
                "5"
            ],
            [
                "Mies Van Der Rohe",
                "German, American",
                "4"
            ]
        ]
    },
    {
        "db_id": "architecture",
        "query": "MATCH (bridge:`architecture.bridge`)\nRETURN avg(bridge.length_feet)",
        "question": "What is the average length in feet of the bridges?",
        "answers": [
            [
                244.64
            ]
        ]
    },
    {
        "db_id": "architecture",
        "query": "MATCH (mill:`architecture.mill`)\nWHERE mill.type = 'Grondzeiler'\nRETURN mill.name,mill.built_year",
        "question": "What are the names and year of construction for the mills of 'Grondzeiler' type?",
        "answers": [
            [
                "Le Vieux Molen",
                1840
            ],
            [
                "Moulin Bertrand",
                1890
            ],
            [
                "Moulin de Fexhe",
                1843
            ],
            [
                "Moulin du Ch\u00e2teau",
                1856
            ],
            [
                "Moulin de Pousset",
                1819
            ]
        ]
    },
    {
        "db_id": "architecture",
        "query": "MATCH (mill:`architecture.mill`)\nWHERE mill.location <> 'Donceel'\nRETURN mill.name",
        "question": "What are the names of the mills which are not located in 'Donceel'?",
        "answers": [
            [
                "Le Vieux Molen"
            ],
            [
                "Moulin de Fexhe"
            ],
            [
                "Moulin de Momalle"
            ],
            [
                "Moulin du Ch\u00e2teau"
            ],
            [
                "Moulin de Pousset"
            ]
        ]
    },
    {
        "db_id": "architecture",
        "query": "MATCH (bridge:`architecture.bridge`)\nWHERE bridge.name = 'Kolob Arch' OR bridge.name = 'Rainbow Bridge'\nRETURN bridge.location",
        "question": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?",
        "answers": [
            [
                "Zion National Park , Utah , USA"
            ],
            [
                "Glen Canyon National Recreation Area , Utah , USA"
            ]
        ]
    },
    {
        "db_id": "architecture",
        "query": "MATCH (mill:`architecture.mill`)\nWHERE mill.name =~'.*[M|m]oulin.*'\nRETURN mill.name",
        "question": "Which of the mill names contains the french word 'Moulin'?",
        "answers": [
            [
                "Moulin Bertrand"
            ],
            [
                "Moulin de Fexhe"
            ],
            [
                "Moulin de Momalle"
            ],
            [
                "Moulin du Ch\u00e2teau"
            ],
            [
                "Moulin de Pousset"
            ]
        ]
    },
    {
        "db_id": "architecture",
        "query": "MATCH (mill:`architecture.mill`)\nRETURN mill.type,count(*)\nORDER BY mill.type DESC\nLIMIT 1",
        "question": "What is the most common mill type, and how many are there?",
        "answers": [
            [
                "Grondzeiler",
                5
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (book_club:`culture_company.book_club`)\nRETURN count(*)",
        "question": "How many book clubs are there?",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (book_club:`culture_company.book_club`)\nRETURN count(*)",
        "question": "Count the number of book clubs.",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (book_club:`culture_company.book_club`)\nWHERE book_club.Year > 1989\nRETURN book_club.Book_Title,book_club.Author_or_Editor",
        "question": "show the titles, and authors or editors for all books made after the year 1989.",
        "answers": [
            [
                "Somewhere in the Night",
                "Jeffrey N. McMahan"
            ],
            [
                "Walking Water / After All This",
                "Thom Nickels"
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (book_club:`culture_company.book_club`)\nWHERE book_club.Year > 1989\nRETURN book_club.Book_Title,book_club.Author_or_Editor",
        "question": "What are the titles and authors or editors that correspond to books made after 1989?",
        "answers": [
            [
                "Somewhere in the Night",
                "Jeffrey N. McMahan"
            ],
            [
                "Walking Water / After All This",
                "Thom Nickels"
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (book_club:`culture_company.book_club`)\nRETURN DISTINCT book_club.Publisher",
        "question": "Show all distinct publishers for books.",
        "answers": [
            [
                "Alyson"
            ],
            [
                "St. Martin's Press"
            ],
            [
                "William Morrow"
            ],
            [
                "Mysterious Press"
            ],
            [
                "International Polygonics"
            ],
            [
                "Banned Books"
            ],
            [
                "Naiad Press"
            ],
            [
                "Crossing Press"
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (book_club:`culture_company.book_club`)\nRETURN DISTINCT book_club.Publisher",
        "question": "What are all the different book publishers?",
        "answers": [
            [
                "Alyson"
            ],
            [
                "St. Martin's Press"
            ],
            [
                "William Morrow"
            ],
            [
                "Mysterious Press"
            ],
            [
                "International Polygonics"
            ],
            [
                "Banned Books"
            ],
            [
                "Naiad Press"
            ],
            [
                "Crossing Press"
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (book_club:`culture_company.book_club`)\nRETURN book_club.Year,book_club.Book_Title,book_club.Publisher\nORDER BY book_club.Year DESC",
        "question": "Show the years, book titles, and publishers for all books, in descending order by year.",
        "answers": [
            [
                1990,
                "Somewhere in the Night",
                "Alyson"
            ],
            [
                1990,
                "Walking Water / After All This",
                "Banned Books"
            ],
            [
                1989,
                "Goldenboy",
                "Alyson"
            ],
            [
                1989,
                "Death Takes the Stage",
                "St. Martin's Press"
            ],
            [
                1989,
                "Unicorn Mountain",
                "William Morrow"
            ],
            [
                1989,
                "Obedience",
                "Mysterious Press"
            ],
            [
                1989,
                "Who\u04f3 Next",
                "International Polygonics"
            ],
            [
                1989,
                "Skiptrace",
                "Banned Books"
            ],
            [
                1989,
                "Lessons In Murder",
                "Naiad Press"
            ],
            [
                1989,
                "Mundane\u04f3 World",
                "Crossing Press"
            ],
            [
                1989,
                "Heavy Gilt",
                "Naiad Press"
            ],
            [
                1989,
                "The Crystal Curtain",
                "Alyson"
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (book_club:`culture_company.book_club`)\nRETURN book_club.Year,book_club.Book_Title,book_club.Publisher\nORDER BY book_club.Year DESC",
        "question": "What are the years, titles, and publishers for all books, ordered by year descending?",
        "answers": [
            [
                1990,
                "Somewhere in the Night",
                "Alyson"
            ],
            [
                1990,
                "Walking Water / After All This",
                "Banned Books"
            ],
            [
                1989,
                "Goldenboy",
                "Alyson"
            ],
            [
                1989,
                "Death Takes the Stage",
                "St. Martin's Press"
            ],
            [
                1989,
                "Unicorn Mountain",
                "William Morrow"
            ],
            [
                1989,
                "Obedience",
                "Mysterious Press"
            ],
            [
                1989,
                "Who\u04f3 Next",
                "International Polygonics"
            ],
            [
                1989,
                "Skiptrace",
                "Banned Books"
            ],
            [
                1989,
                "Lessons In Murder",
                "Naiad Press"
            ],
            [
                1989,
                "Mundane\u04f3 World",
                "Crossing Press"
            ],
            [
                1989,
                "Heavy Gilt",
                "Naiad Press"
            ],
            [
                1989,
                "The Crystal Curtain",
                "Alyson"
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (book_club:`culture_company.book_club`)\nRETURN book_club.Publisher,count(*)",
        "question": "Show all publishers and the number of books for each publisher.",
        "answers": [
            [
                "Alyson",
                3
            ],
            [
                "St. Martin's Press",
                1
            ],
            [
                "William Morrow",
                1
            ],
            [
                "Mysterious Press",
                1
            ],
            [
                "International Polygonics",
                1
            ],
            [
                "Banned Books",
                2
            ],
            [
                "Naiad Press",
                2
            ],
            [
                "Crossing Press",
                1
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (book_club:`culture_company.book_club`)\nRETURN book_club.Publisher,count(*)",
        "question": "How many books are there for each publisher?",
        "answers": [
            [
                "Alyson",
                3
            ],
            [
                "St. Martin's Press",
                1
            ],
            [
                "William Morrow",
                1
            ],
            [
                "Mysterious Press",
                1
            ],
            [
                "International Polygonics",
                1
            ],
            [
                "Banned Books",
                2
            ],
            [
                "Naiad Press",
                2
            ],
            [
                "Crossing Press",
                1
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (book_club:`culture_company.book_club`)\nRETURN book_club.Category,count(*)",
        "question": "Show all book categories and the number of books in each category.",
        "answers": [
            [
                "Gay M/SF",
                5
            ],
            [
                "Lesb. M/SF",
                5
            ],
            [
                "Gay SF/F",
                2
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (book_club:`culture_company.book_club`)\nRETURN book_club.Category,count(*)",
        "question": "How many books fall into each category?",
        "answers": [
            [
                "Gay M/SF",
                5
            ],
            [
                "Lesb. M/SF",
                5
            ],
            [
                "Gay SF/F",
                2
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (book_club:`culture_company.book_club`)\nWHERE book_club.Year > 1989\nWITH book_club.Category AS Category, count(*) AS count\nWHERE count  >= 2\nRETURN Category",
        "question": "List categories that have at least two books after year 1989.",
        "answers": [
            [
                "Gay SF/F"
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (book_club:`culture_company.book_club`)\nWHERE book_club.Year > 1989\nWITH book_club.Category AS Category, count(*) AS count\nWHERE count  >= 2\nRETURN Category",
        "question": "What categories have two or more corresponding books that were made after 1989?",
        "answers": [
            [
                "Gay SF/F"
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (movie:`culture_company.movie`)\nRETURN movie.Title,movie.Year,movie.Director\nORDER BY movie.Budget_million",
        "question": "Show all movie titles, years, and directors, ordered by budget.",
        "answers": [
            [
                "Jill Rips",
                2000,
                "Anthony Hickox"
            ],
            [
                "Storm Catcher",
                1999,
                "Anthony Hickox"
            ],
            [
                "The Boondock Saints",
                1999,
                "Troy Duffy"
            ],
            [
                "The Big Kahuna",
                1999,
                "John Swanbeck"
            ],
            [
                "The Whole Nine Yards",
                2000,
                "Jonathan Lynn"
            ],
            [
                "Battlefield Earth",
                2000,
                "Roger Christian"
            ],
            [
                "Agent Red",
                2000,
                "Damian Lee"
            ],
            [
                "The Art of War",
                2000,
                "Christian Duguay"
            ],
            [
                "3000 Miles to Graceland",
                2001,
                "Demian Lichtenstein"
            ],
            [
                "Get Carter",
                2000,
                "Stephen Kay"
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (movie:`culture_company.movie`)\nRETURN movie.Title,movie.Year,movie.Director\nORDER BY movie.Budget_million",
        "question": "What are the titles, years, and directors of all movies, ordered by budget in millions?",
        "answers": [
            [
                "Jill Rips",
                2000,
                "Anthony Hickox"
            ],
            [
                "Storm Catcher",
                1999,
                "Anthony Hickox"
            ],
            [
                "The Boondock Saints",
                1999,
                "Troy Duffy"
            ],
            [
                "The Big Kahuna",
                1999,
                "John Swanbeck"
            ],
            [
                "The Whole Nine Yards",
                2000,
                "Jonathan Lynn"
            ],
            [
                "Battlefield Earth",
                2000,
                "Roger Christian"
            ],
            [
                "Agent Red",
                2000,
                "Damian Lee"
            ],
            [
                "The Art of War",
                2000,
                "Christian Duguay"
            ],
            [
                "3000 Miles to Graceland",
                2001,
                "Demian Lichtenstein"
            ],
            [
                "Get Carter",
                2000,
                "Stephen Kay"
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (movie:`culture_company.movie`)\nRETURN count(DISTINCT movie.Director)",
        "question": "How many movie directors are there?",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (movie:`culture_company.movie`)\nRETURN count(DISTINCT movie.Director)",
        "question": "Count the number of different directors.",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (movie:`culture_company.movie`)\nWHERE movie.Year <= 2000\nRETURN movie.Title,movie.Director\nORDER BY movie.Gross_worldwide DESC\nLIMIT 1",
        "question": "What is the title and director for the movie with highest worldwide gross in the year 2000 or before?",
        "answers": [
            [
                "The Whole Nine Yards",
                "Jonathan Lynn"
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (movie:`culture_company.movie`)\nWHERE movie.Year <= 2000\nRETURN movie.Title,movie.Director\nORDER BY movie.Gross_worldwide DESC\nLIMIT 1",
        "question": "Return the title and director of the movie released in the year 2000 or earlier that had the highest worldwide gross.",
        "answers": [
            [
                "The Whole Nine Yards",
                "Jonathan Lynn"
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (movie:`culture_company.movie`)\nWHERE movie.Year = 1999 OR movie.Year = 2000\nRETURN movie.Director",
        "question": "Show all director names who have a movie in the year 1999 or 2000.",
        "answers": [
            [
                "Troy Duffy"
            ],
            [
                "John Swanbeck"
            ],
            [
                "Anthony Hickox"
            ],
            [
                "Anthony Hickox"
            ],
            [
                "Jonathan Lynn"
            ],
            [
                "Roger Christian"
            ],
            [
                "Stephen Kay"
            ],
            [
                "Christian Duguay"
            ],
            [
                "Damian Lee"
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (movie:`culture_company.movie`)\nWHERE movie.Year = 1999 OR movie.Year = 2000\nRETURN movie.Director",
        "question": "Which directors had a movie in either 1999 or 2000?",
        "answers": [
            [
                "Troy Duffy"
            ],
            [
                "John Swanbeck"
            ],
            [
                "Anthony Hickox"
            ],
            [
                "Anthony Hickox"
            ],
            [
                "Jonathan Lynn"
            ],
            [
                "Roger Christian"
            ],
            [
                "Stephen Kay"
            ],
            [
                "Christian Duguay"
            ],
            [
                "Damian Lee"
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (movie:`culture_company.movie`)\nWHERE movie.Year < 2000\nRETURN avg(movie.Budget_million),max(movie.Budget_million),min(movie.Budget_million)",
        "question": "What is the average, maximum, and minimum budget for all movies before 2000.",
        "answers": [
            [
                6.0,
                7.0,
                5.0
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (movie:`culture_company.movie`)\nWHERE movie.Year < 2000\nRETURN avg(movie.Budget_million),max(movie.Budget_million),min(movie.Budget_million)",
        "question": "Return the average, maximum, and minimum budgets in millions for movies made before the year 2000.",
        "answers": [
            [
                6.0,
                7.0,
                5.0
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (T1:`culture_company.culture_company`)-[]-(T2:`culture_company.book_club`)\nWHERE T2.Publisher = 'Alyson'\nRETURN T1.Company_name",
        "question": "List all company names with a book published by Alyson.",
        "answers": [
            [
                "Culture China"
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (T1:`culture_company.culture_company`)-[]-(T2:`culture_company.book_club`)\nWHERE T2.Publisher = 'Alyson'\nRETURN T1.Company_name",
        "question": "What are all the company names that have a book published by Alyson?",
        "answers": [
            [
                "Culture China"
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (T1:`culture_company.movie`)-[]-(T2:`culture_company.culture_company`)-[]-(T3:`culture_company.book_club`)\nWHERE T2.Incorporated_in = 'China'\nRETURN T1.Title,T3.Book_Title",
        "question": "Show the movie titles and book titles for all companies in China.",
        "answers": [
            [
                "The Big Kahuna",
                "Goldenboy"
            ],
            [
                "Storm Catcher",
                "Death Takes the Stage"
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (T1:`culture_company.movie`)-[]-(T2:`culture_company.culture_company`)-[]-(T3:`culture_company.book_club`)\nWHERE T2.Incorporated_in = 'China'\nRETURN T1.Title,T3.Book_Title",
        "question": "What are the titles of movies and books corresponding to companies incorporated in China?",
        "answers": [
            [
                "The Big Kahuna",
                "Goldenboy"
            ],
            [
                "Storm Catcher",
                "Death Takes the Stage"
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (T1:`culture_company.movie`)-[]-(T2:`culture_company.culture_company`)\nWHERE T1.Year = 1999\nRETURN T2.Company_name",
        "question": "Show all company names with a movie directed in year 1999.",
        "answers": [
            [
                "Culture China"
            ],
            [
                "Culture China Cargo"
            ]
        ]
    },
    {
        "db_id": "culture_company",
        "query": "MATCH (T1:`culture_company.movie`)-[]-(T2:`culture_company.culture_company`)\nWHERE T1.Year = 1999\nRETURN T2.Company_name",
        "question": "What are all company names that have a corresponding movie directed in the year 1999?",
        "answers": [
            [
                "Culture China"
            ],
            [
                "Culture China Cargo"
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'new mexico'\nRETURN state.area",
        "question": "how big is new mexico",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'new mexico'\nRETURN state.area",
        "question": "what is the area of new mexico",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'new mexico'\nRETURN state.area",
        "question": "how large is new mexico",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'new mexico'\nRETURN state.area",
        "question": "what is the area of the new mexico state",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'new mexico'\nRETURN state.area",
        "question": "what is the size of new mexico",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'new mexico'\nRETURN state.area",
        "question": "what is the area of new mexico in square kilometers",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'california'\nRETURN state.population",
        "question": "how many people live in california",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'california'\nRETURN state.population",
        "question": "how many people reside in california",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'california'\nRETURN state.population",
        "question": "how many residents live in california",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'california'\nRETURN state.population",
        "question": "how much population does california have",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'california'\nRETURN state.population",
        "question": "what are the population of california",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'california'\nRETURN state.population",
        "question": "what is the population of california",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'california'\nRETURN state.population",
        "question": "how many people are in the state of california",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'california'\nRETURN state.population",
        "question": "what can you tell me about the population of california",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'california'\nRETURN state.population",
        "question": "how many people are there in california",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'california'\nRETURN state.population",
        "question": "how many citizens in california",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'california'\nRETURN state.population",
        "question": "how many people stay in california",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'california'\nRETURN state.population",
        "question": "how many citizens live in california",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.state_name = 'texas'\nRETURN city.city_name",
        "question": "give me the cities in texas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.state_name = 'texas'\nRETURN city.city_name",
        "question": "tell me what cities are in texas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.state_name = 'texas'\nRETURN city.city_name",
        "question": "what cities are located in texas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.state_name = 'texas'\nRETURN city.city_name",
        "question": "what are the cities in texas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.state_name = 'texas'\nRETURN city.city_name",
        "question": "what cities in texas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.state_name = 'texas'\nRETURN city.city_name",
        "question": "give me the cities which are in texas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.capital = 'albany'\nRETURN state.area",
        "question": "what is the area of the state with the capital albany",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (lake:`geo.lake`)\nWHERE lake.state_name = 'california'\nRETURN lake.lake_name",
        "question": "give me the lakes in california",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (lake:`geo.lake`)\nWHERE lake.area > 750 AND lake.state_name = 'michigan'\nRETURN lake.lake_name",
        "question": "name the major lakes in michigan",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'ohio'\nRETURN river.traverse",
        "question": "which states do ohio river flow through",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'ohio'\nRETURN river.traverse",
        "question": "what states does the ohio river run through",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'ohio'\nRETURN river.traverse",
        "question": "what states border the ohio river",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'ohio'\nRETURN river.traverse",
        "question": "which states border the ohio river",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'ohio'\nRETURN river.traverse",
        "question": "what states does the ohio run through",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'ohio'\nRETURN river.traverse",
        "question": "where is the ohio river",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'ohio'\nRETURN river.traverse",
        "question": "which states does the ohio river run through",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'ohio'\nRETURN river.traverse",
        "question": "which states does the ohio run through",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'ohio'\nRETURN river.traverse",
        "question": "which states does the ohio river pass through",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'ohio'\nRETURN river.traverse",
        "question": "what are the states that the ohio run through",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'ohio'\nRETURN river.traverse",
        "question": "which state has the ohio river",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'ohio'\nRETURN river.traverse",
        "question": "what states have rivers named ohio",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'ohio'\nRETURN river.traverse",
        "question": "through which states does the ohio flow",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'ohio'\nRETURN river.traverse",
        "question": "what states are next to the ohio",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'ohio'\nRETURN river.traverse",
        "question": "through which states does the ohio run",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'ohio'\nRETURN river.traverse",
        "question": "what states does the ohio river go through",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (highlow:`geo.highlow`)\nWHERE highlow.state_name = 'pennsylvania'\nRETURN highlow.lowest_elevation",
        "question": "what is the lowest elevation in pennsylvania",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (highlow:`geo.highlow`)\nWHERE highlow.lowest_elevation = '0'\nRETURN highlow.highest_point,highlow.state_name",
        "question": "what is the highest point in each state whose lowest point is sea level",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'idaho'\nRETURN count(river.river_name)",
        "question": "how many rivers are in idaho",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'idaho'\nRETURN count(river.river_name)",
        "question": "give me the number of rivers in idaho",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'idaho'\nRETURN count(river.river_name)",
        "question": "how many rivers does idaho have",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'idaho'\nRETURN count(river.river_name)",
        "question": "how many rivers are there in idaho",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'idaho'\nRETURN count(river.river_name)",
        "question": "how many rivers run through idaho",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'idaho'\nRETURN count(river.river_name)",
        "question": "how many rivers are found in idaho",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'idaho'\nRETURN count(river.river_name)",
        "question": "how many rivers in idaho",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (border_info:`geo.border_info`)\nWHERE border_info.state_name = 'kentucky'\nRETURN border_info.border",
        "question": "what states neighbor kentucky",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (border_info:`geo.border_info`)\nWHERE border_info.state_name = 'kentucky'\nRETURN border_info.border",
        "question": "which states border kentucky",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (border_info:`geo.border_info`)\nWHERE border_info.state_name = 'kentucky'\nRETURN border_info.border",
        "question": "what states border kentucky",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (border_info:`geo.border_info`)\nWHERE border_info.state_name = 'kentucky'\nRETURN border_info.border",
        "question": "give me the states that border kentucky",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (border_info:`geo.border_info`)\nWHERE border_info.state_name = 'kentucky'\nRETURN border_info.border",
        "question": "what state borders kentucky",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (border_info:`geo.border_info`)\nWHERE border_info.state_name = 'kentucky'\nRETURN border_info.border",
        "question": "what states are next to kentucky",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (border_info:`geo.border_info`)\nWHERE border_info.state_name = 'kentucky'\nRETURN border_info.border",
        "question": "what states surround kentucky",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (border_info:`geo.border_info`)\nWHERE border_info.state_name = 'kentucky'\nRETURN border_info.border",
        "question": "which state borders kentucky",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (border_info:`geo.border_info`)\nWHERE border_info.state_name = 'kentucky'\nRETURN border_info.border",
        "question": "what are the neighboring states for kentucky",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (border_info:`geo.border_info`)\nWHERE border_info.state_name = 'kentucky'\nRETURN border_info.border",
        "question": "which states adjoin kentucky",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (border_info:`geo.border_info`)\nWHERE border_info.state_name = 'kentucky'\nRETURN border_info.border",
        "question": "states bordering kentucky",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (border_info:`geo.border_info`)\nWHERE border_info.state_name = 'kentucky'\nRETURN border_info.border",
        "question": "which state border kentucky",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (border_info:`geo.border_info`)\nWHERE border_info.state_name = 'kentucky'\nRETURN border_info.border",
        "question": "what is the adjacent state of kentucky",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'illinois'\nRETURN river.river_name",
        "question": "name all the rivers in illinois",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'illinois'\nRETURN river.river_name",
        "question": "rivers in illinois",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'illinois'\nRETURN river.river_name",
        "question": "what are all the rivers in illinois",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'illinois'\nRETURN river.river_name",
        "question": "what are the rivers in illinois",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'illinois'\nRETURN river.river_name",
        "question": "what rivers are in illinois",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'illinois'\nRETURN river.river_name",
        "question": "what rivers are there in illinois",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'illinois'\nRETURN river.river_name",
        "question": "what rivers run through illinois",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'illinois'\nRETURN river.river_name",
        "question": "what rivers flow through illinois",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'illinois'\nRETURN river.river_name",
        "question": "what river flows through illinois",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'illinois'\nRETURN river.river_name",
        "question": "what are the rivers in the state of illinois",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'illinois'\nRETURN river.river_name",
        "question": "name the rivers in illinois",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'illinois'\nRETURN river.river_name",
        "question": "what are the rivers of illinois",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'illinois'\nRETURN river.river_name",
        "question": "which rivers are in illinois",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'illinois'\nRETURN river.river_name",
        "question": "which rivers flow through illinois",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'illinois'\nRETURN river.river_name",
        "question": "what is the river that cross over illinois",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'illinois'\nRETURN river.river_name",
        "question": "what river runs through illinois",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'springfield'\nRETURN city.state_name",
        "question": "what state is springfield in",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'springfield'\nRETURN city.state_name",
        "question": "where is springfield",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'springfield'\nRETURN city.state_name",
        "question": "springfield is in what state",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'springfield'\nRETURN city.state_name",
        "question": "what states have cities named springfield",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'springfield'\nRETURN city.state_name",
        "question": "which states have cities named springfield",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'springfield'\nRETURN city.state_name",
        "question": "which state is springfield in",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'springfield'\nRETURN city.state_name",
        "question": "what states have a city named springfield",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'springfield'\nRETURN city.state_name",
        "question": "what state has the city springfield",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'springfield'\nRETURN city.state_name",
        "question": "what states have towns named springfield",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'springfield'\nRETURN city.state_name",
        "question": "what state is springfield located in",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'springfield'\nRETURN city.state_name",
        "question": "in which state is springfield",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'springfield'\nRETURN city.state_name",
        "question": "which state is the city springfield located in",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'springfield'\nRETURN city.state_name",
        "question": "what states in the united states have a city of springfield",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'boulder'\nRETURN city.population",
        "question": "how many people live in boulder",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'boulder'\nRETURN city.population",
        "question": "what is the population of boulder",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'boulder'\nRETURN city.population",
        "question": "how many people lived in boulder",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'boulder'\nRETURN city.population",
        "question": "number of people in boulder",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'boulder'\nRETURN city.population",
        "question": "what is the population of boulder city",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'boulder'\nRETURN city.population",
        "question": "how big is the city of boulder",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'boulder'\nRETURN city.population",
        "question": "population of boulder",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'boulder'\nRETURN city.population",
        "question": "what is the population in boulder",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'boulder'\nRETURN city.population",
        "question": "people in boulder",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'boulder'\nRETURN city.population",
        "question": "how many people in boulder",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'boulder'\nRETURN city.population",
        "question": "how many inhabitants does boulder have",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'boulder'\nRETURN city.population",
        "question": "number of citizens in boulder",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'boulder'\nRETURN city.population",
        "question": "how many citizens in boulder",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (highlow:`geo.highlow`)\nWHERE highlow.state_name = 'delaware'\nRETURN highlow.highest_elevation",
        "question": "what is the highest elevation in delaware",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (highlow:`geo.highlow`)\nWHERE highlow.state_name = 'delaware'\nRETURN highlow.highest_elevation",
        "question": "how high is the highest point of delaware",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (highlow:`geo.highlow`)\nWHERE highlow.state_name = 'delaware'\nRETURN highlow.highest_elevation",
        "question": "how tall is the highest point in delaware",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (highlow:`geo.highlow`)\nWHERE highlow.state_name = 'delaware'\nRETURN highlow.highest_elevation",
        "question": "what is the highest point in delaware in meters",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (highlow:`geo.highlow`)\nWHERE highlow.state_name = 'delaware'\nRETURN highlow.highest_elevation",
        "question": "how high is the highest point in delaware",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (highlow:`geo.highlow`)\nWHERE highlow.state_name = 'texas'\nRETURN highlow.highest_point",
        "question": "where is the highest point in texas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (highlow:`geo.highlow`)\nWHERE highlow.state_name = 'texas'\nRETURN highlow.highest_point",
        "question": "what is the highest point in texas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (highlow:`geo.highlow`)\nWHERE highlow.state_name = 'texas'\nRETURN highlow.highest_point",
        "question": "what is the high point of texas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (highlow:`geo.highlow`)\nWHERE highlow.state_name = 'texas'\nRETURN highlow.highest_point",
        "question": "what is the highest mountain in texas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (highlow:`geo.highlow`)\nWHERE highlow.state_name = 'texas'\nRETURN highlow.highest_point",
        "question": "could you tell me what is the highest point in the state of texas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (highlow:`geo.highlow`)\nWHERE highlow.state_name = 'alabama'\nWITH highlow.lowest_elevation AS lowest_elevation\nMATCH (highlow:`geo.highlow`)\nWHERE  highlow.lowest_elevation <  lowest_elevation \nRETURN count(highlow.state_name)",
        "question": "count the states which have elevations lower than what alabama has",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (highlow:`geo.highlow`)\nWHERE highlow.highest_point = 'guadalupe peak'\nRETURN highlow.highest_elevation",
        "question": "how high is guadalupe peak",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (highlow:`geo.highlow`)\nWHERE highlow.highest_point = 'guadalupe peak'\nRETURN highlow.highest_elevation",
        "question": "how tall is guadalupe peak",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (highlow:`geo.highlow`)\nWHERE highlow.highest_point = 'guadalupe peak'\nRETURN highlow.highest_elevation",
        "question": "what is the maximum elevation of guadalupe peak",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'rio grande'\nRETURN river.length",
        "question": "how long is the rio grande river",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'rio grande'\nRETURN river.length",
        "question": "what is the length of the rio grande river",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'rio grande'\nRETURN river.length",
        "question": "what length is the rio grande",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'rio grande'\nRETURN river.length",
        "question": "how long is the rio grande",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'rio grande'\nRETURN river.length",
        "question": "how long is the rio grande river in miles",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'rio grande'\nRETURN river.length",
        "question": "how long is rio grande",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'rhode island'\nRETURN count(state.capital)",
        "question": "how many capitals does rhode island have",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.population > 150000\nRETURN count(city.city_name)",
        "question": "how many major cities are there",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'colorado'\nRETURN count(river.river_name)",
        "question": "how many colorado rivers are there",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'colorado'\nRETURN count(river.river_name)",
        "question": "how many rivers are called colorado",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'seattle' AND city.state_name = 'washington'\nRETURN city.population",
        "question": "what is the population of seattle washington",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'seattle' AND city.state_name = 'washington'\nRETURN city.population",
        "question": "how many people live in seattle washington",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (border_info:`geo.border_info`)\nWHERE border_info.state_name = 'kentucky'\nRETURN count(border_info.border)",
        "question": "how many states border kentucky",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (border_info:`geo.border_info`)\nWHERE border_info.state_name = 'kentucky'\nRETURN count(border_info.border)",
        "question": "how many states does kentucky border",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (border_info:`geo.border_info`)\nWHERE border_info.state_name = 'kentucky'\nRETURN count(border_info.border)",
        "question": "kentucky borders how many states",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (border_info:`geo.border_info`)\nWHERE border_info.state_name = 'kentucky'\nRETURN count(border_info.border)",
        "question": "number of states bordering kentucky",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (border_info:`geo.border_info`)\nWHERE border_info.state_name = 'kentucky'\nRETURN count(border_info.border)",
        "question": "what is the number of neighboring states for kentucky",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.length > 750 AND river.traverse = 'illinois'\nRETURN river.river_name",
        "question": "name the major rivers in illinois",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.length > 750 AND river.traverse = 'illinois'\nRETURN river.river_name",
        "question": "what are the major rivers in illinois",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.length > 750 AND river.traverse = 'illinois'\nRETURN river.river_name",
        "question": "what are major rivers in illinois",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.length > 750 AND river.traverse = 'illinois'\nRETURN river.river_name",
        "question": "what major rivers run through illinois",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'texas'\nRETURN state.capital",
        "question": "what are the capital city in texas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'texas'\nRETURN state.capital",
        "question": "what is the capital of texas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'texas'\nRETURN state.capital",
        "question": "what is the capital of the texas state",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'texas'\nRETURN state.capital",
        "question": "what is capital of texas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'texas'\nRETURN state.capital",
        "question": "what is the capital of the state texas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'texas'\nRETURN state.capital",
        "question": "can you tell me the capital of texas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (t2:`geo.state`)-[]-(t1:`geo.border_info`)\nWHERE t1.state_name = 'texas'\nRETURN t2.capital",
        "question": "what are the capitals of states that border texas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (t2:`geo.state`)-[]-(t1:`geo.border_info`)\nWHERE t1.state_name = 'texas'\nRETURN t2.capital",
        "question": "what are the capital cities of the states which border texas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (t2:`geo.state`)-[]-(t1:`geo.border_info`)\nWHERE t1.state_name = 'texas'\nRETURN t2.capital",
        "question": "what are the capitals of the states that border texas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (t2:`geo.state`)-[]-(t1:`geo.border_info`)\nWHERE t1.state_name = 'texas'\nRETURN t2.capital",
        "question": "which capitals are in the states that border texas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.population > 150000 AND city.state_name = 'kansas'\nRETURN city.city_name",
        "question": "what are the major cities in kansas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.population > 150000 AND city.state_name = 'kansas'\nRETURN city.city_name",
        "question": "what are the major cities in the state of kansas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.population > 150000 AND city.state_name = 'kansas'\nRETURN city.city_name",
        "question": "what major cities are located in kansas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.population > 150000 AND city.state_name = 'kansas'\nRETURN city.city_name",
        "question": "show major cities in kansas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.population > 150000 AND city.state_name = 'kansas'\nRETURN city.city_name",
        "question": "what are the names of the major cities in kansas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.population > 150000 AND city.state_name = 'kansas'\nRETURN city.city_name",
        "question": "what are the major cities of kansas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.population > 150000 AND city.state_name = 'kansas'\nRETURN city.city_name",
        "question": "what is the major cities in kansas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.population > 150000\nRETURN city.city_name",
        "question": "what are the major cities in the usa",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.population > 150000\nRETURN city.city_name",
        "question": "what are the major cities of the united states",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.population > 150000\nRETURN city.city_name",
        "question": "what are the major cities of the us",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (t2:`geo.state`)-[]-(t1:`geo.border_info`)\nWHERE t1.state_name = 'texas'\nRETURN t2.population",
        "question": "what are the populations of states which border texas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.population > 150000 AND city.state_name = 'wisconsin'\nRETURN city.population",
        "question": "what are the populations of the major cities of wisconsin",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.population > 150000 AND city.state_name = 'wisconsin'\nRETURN city.population",
        "question": "what are the populations of all the major cities in wisconsin",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.population > 150000 AND city.state_name = 'wisconsin'\nRETURN city.population",
        "question": "what is the population of the major cities in wisconsin",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (t2:`geo.state`)-[]-(t1:`geo.city`)\nWHERE t1.city_name = 'durham'\nRETURN t2.capital",
        "question": "what is the capital of states that have cities named durham",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'wyoming'\nRETURN state.density",
        "question": "what is the density of the wyoming",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'wyoming'\nRETURN state.density",
        "question": "what is the population density of wyoming",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'wyoming'\nRETURN state.density",
        "question": "what is the density of wyoming",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (highlow:`geo.highlow`)\nWHERE highlow.state_name = 'iowa'\nRETURN highlow.lowest_point",
        "question": "what is the lowest point in iowa",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (highlow:`geo.highlow`)\nWHERE highlow.state_name = 'iowa'\nRETURN highlow.lowest_point",
        "question": "what is the lowest point in iowa in meters",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (highlow:`geo.highlow`)\nWHERE highlow.state_name = 'iowa'\nRETURN highlow.lowest_point",
        "question": "what is the lowest point in the state of iowa",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (highlow:`geo.highlow`)\nWHERE highlow.state_name = 'iowa'\nRETURN highlow.lowest_point",
        "question": "where is the lowest point in iowa",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (highlow:`geo.highlow`)\nWHERE highlow.state_name = 'iowa'\nRETURN highlow.lowest_point",
        "question": "what is the lowest point of iowa",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (highlow:`geo.highlow`)\nWHERE highlow.state_name = 'iowa'\nRETURN highlow.lowest_point",
        "question": "where is the lowest spot in iowa",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.length > 750\nRETURN river.traverse",
        "question": "what states contain at least one major rivers",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (mountain:`geo.mountain`)\nWHERE mountain.mountain_name = 'whitney'\nRETURN mountain.state_name",
        "question": "which state is mount whitney in",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (mountain:`geo.mountain`)\nWHERE mountain.mountain_name = 'whitney'\nRETURN mountain.state_name",
        "question": "in what state is mount whitney",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (mountain:`geo.mountain`)\nWHERE mountain.mountain_name = 'whitney'\nRETURN mountain.state_name",
        "question": "where is mount whitney",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (mountain:`geo.mountain`)\nWHERE mountain.mountain_name = 'whitney'\nRETURN mountain.state_name",
        "question": "where is mount whitney located",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'austin' AND city.population > 150000\nRETURN city.state_name",
        "question": "which states have a major city named austin",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.capital = 'salem'\nRETURN state.state_name",
        "question": "what state is salem the capital of",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.capital = 'salem'\nRETURN state.state_name",
        "question": "what states capital is salem",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.capital = 'salem'\nRETURN state.state_name",
        "question": "salem is the capital of which state",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.capital = 'salem'\nRETURN state.state_name",
        "question": "what state has the capital salem",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'springfield'\nRETURN count(city.state_name)",
        "question": "how many states have a city named springfield",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'springfield'\nRETURN count(city.state_name)",
        "question": "how many states have a city called springfield",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'springfield'\nRETURN count(city.state_name)",
        "question": "how many states have cities named springfield",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'springfield'\nRETURN count(city.state_name)",
        "question": "how many states have cities or towns named springfield",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.population > 150000 AND city.state_name = 'texas'\nRETURN count(city.city_name)",
        "question": "how many major cities are in texas",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.population > 150000 AND city.state_name = 'texas'\nRETURN count(city.city_name)",
        "question": "how many big cities are in texas",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.population > 150000 AND city.state_name = 'texas'\nRETURN count(city.city_name)",
        "question": "how many major cities are there in texas",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'missouri'\nRETURN count(river.traverse)",
        "question": "how many states does the missouri run through",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'missouri'\nRETURN count(river.traverse)",
        "question": "how many states does the missouri river flow through",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'missouri'\nRETURN count(river.traverse)",
        "question": "how many states does the missouri river run through",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (border_info:`geo.border_info`)\nRETURN count(DISTINCT border_info.state_name)",
        "question": "how many states border at least one other state",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (highlow:`geo.highlow`)\nWHERE highlow.state_name = 'texas'\nRETURN max(DISTINCT highlow.highest_elevation)",
        "question": "what is the height of the highest mountain in texas",
        "answers": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (lake:`geo.lake`)\nWHERE lake.area > 750\nRETURN lake.lake_name",
        "question": "what are the major lakes in united states",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (lake:`geo.lake`)\nWHERE lake.area > 750\nRETURN lake.lake_name",
        "question": "show me all the major lakes in the us",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.length > 750 AND river.traverse = 'ohio'\nRETURN count(river.river_name)",
        "question": "how many major rivers cross ohio",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.length > 750\nRETURN count(DISTINCT river.traverse)",
        "question": "how many states are next to major rivers",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (mountain:`geo.mountain`)\nWHERE mountain.mountain_name = 'mckinley'\nRETURN mountain.mountain_altitude",
        "question": "what is the height of mount mckinley",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (mountain:`geo.mountain`)\nWHERE mountain.state_name = 'alaska'\nRETURN mountain.mountain_name",
        "question": "what mountains are in alaska",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.length > 750\nRETURN count(river.traverse)",
        "question": "how many states have major rivers",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.state_name = 'texas'\nRETURN count(city.city_name)",
        "question": "how many cities are in texas",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.state_name = 'texas'\nRETURN count(city.city_name)",
        "question": "how many cities does texas have",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (t1:`geo.state`)-[]-(t2:`geo.highlow`)\nRETURN t1.state_name",
        "question": "what states have a capital that is the highest point in the state",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (t2:`geo.state`)-[]-(t1:`geo.city`)\nWHERE t1.population <= 150000\nRETURN t2.capital",
        "question": "which capitals are not major cities",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'massachusetts'\nRETURN state.country_name",
        "question": "where is massachusetts",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'austin'\nRETURN count(city.city_name)",
        "question": "how many cities named austin are there in the usa",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "geo",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'colorado' AND river.traverse = 'texas'\nRETURN river.length",
        "question": "what is the length of the colorado river in texas",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (state:`geo.state`)\nWHERE state.capital = 'austin'\nRETURN state.density",
        "question": "what is the population density in the state with capital austin",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (highlow:`geo.highlow`)\nWHERE highlow.lowest_point = 'death valley'\nRETURN highlow.lowest_elevation",
        "question": "what is the elevation of death valley",
        "answers": []
    },
    {
        "db_id": "geo",
        "query": "MATCH (t2:`geo.border_info`)-[]-(t1:`geo.border_info`)-[]-(t3:`geo.border_info`)-[]-(t4:`geo.border_info`)\nWHERE t4.state_name = 'texas'\nRETURN t1.border",
        "question": "what states border states that border states that border states that border texas",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Peter Mertens\" AND t1.authorName = \"Dina Barbian\"\nRETURN DISTINCT t3.paperId",
        "question": "papers that are coauthored by Peter Mertens and Dina Barbian",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Peter Mertens\" AND t1.authorName = \"Dina Barbian\"\nRETURN DISTINCT t3.paperId",
        "question": "papers written by Peter Mertens and Dina Barbian",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Peter Mertens\" AND t1.authorName = \"Dina Barbian\"\nRETURN DISTINCT t3.paperId",
        "question": "what are the papers that have Peter Mertens and Dina Barbian as co-authors",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Peter Mertens\" AND t1.authorName = \"Dina Barbian\"\nRETURN DISTINCT t3.paperId",
        "question": "What papers have Peter Mertens and Dina Barbian written ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Peter Mertens\" AND t1.authorName = \"Dina Barbian\"\nRETURN DISTINCT t3.paperId",
        "question": "what paper did Peter Mertens and Dina Barbian write together ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Peter Mertens\" AND t1.authorName = \"Dina Barbian\"\nRETURN DISTINCT t3.paperId",
        "question": "Has Peter Mertens and Dina Barbian written a paper together ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Peter Mertens\" AND t1.authorName = \"Dina Barbian\"\nRETURN DISTINCT t3.paperId",
        "question": "Papers by Peter Mertens and Dina Barbian",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Peter Mertens\" AND t1.authorName = \"Dina Barbian\"\nRETURN DISTINCT t3.paperId",
        "question": "papers by authors Peter Mertens and Dina Barbian",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Peter Mertens\" AND t1.authorName = \"Dina Barbian\"\nRETURN DISTINCT t3.paperId",
        "question": "What papers were written by authors Peter Mertens and Dina Barbian",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Peter Mertens\" AND t1.authorName = \"Dina Barbian\"\nRETURN DISTINCT t3.paperId",
        "question": "papers by Peter Mertens and Dina Barbian",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Peter Mertens\" AND t1.authorName = \"Dina Barbian\"\nRETURN DISTINCT t3.paperId",
        "question": "papers written by authors Peter Mertens and Dina Barbian",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Peter Mertens\" AND t1.authorName = \"Dina Barbian\"\nRETURN DISTINCT t3.paperId",
        "question": "When did Peter Mertens and Dina Barbian collaborate ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Peter Mertens\" AND t1.authorName = \"Dina Barbian\"\nRETURN DISTINCT t3.paperId",
        "question": "what are the collaborations of Peter Mertens and Dina Barbian ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Peter Mertens\" AND t1.authorName = \"Dina Barbian\"\nRETURN DISTINCT t3.paperId",
        "question": "Have Peter Mertens and Dina Barbian written a paper together ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Peter Mertens\" AND t1.authorName = \"Dina Barbian\"\nRETURN DISTINCT t3.paperId",
        "question": "Peter Mertens and Dina Barbian as co-authors",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Peter Mertens\" AND t1.authorName = \"Dina Barbian\"\nRETURN DISTINCT t3.paperId",
        "question": "Does Peter Mertens ever collaborated with Dina Barbian ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Peter Mertens\" AND t1.authorName = \"Dina Barbian\"\nRETURN DISTINCT t3.paperId",
        "question": "Which papers have Peter Mertens and Dina Barbian as co-authors ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Peter Mertens\" AND t1.authorName = \"Dina Barbian\"\nRETURN DISTINCT t3.paperId",
        "question": "papers coauthored by Peter Mertens and Dina Barbian",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Peter Mertens\" AND t1.authorName = \"Dina Barbian\"\nRETURN DISTINCT t3.paperId",
        "question": "What papers have been written by Peter Mertens and Dina Barbian ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Peter Mertens\" AND t1.authorName = \"Dina Barbian\"\nRETURN DISTINCT t3.paperId",
        "question": "What papers have been written by both Peter Mertens and Dina Barbian ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Peter Mertens\" AND t1.authorName = \"Dina Barbian\"\nRETURN DISTINCT t3.paperId",
        "question": "What papers have been written by Peter Mertens and Dina Barbian .",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-()\nWHERE t1.authorName = \"sharon goldwater\"\nRETURN DISTINCT t2.paperId",
        "question": "What papers has sharon goldwater written ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-()\nWHERE t1.authorName = \"sharon goldwater\"\nRETURN DISTINCT t2.paperId",
        "question": "What papers has written by sharon goldwater ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-()\nWHERE t1.authorName = \"sharon goldwater\"\nRETURN DISTINCT t2.paperId",
        "question": "papers by sharon goldwater",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-()\nWHERE t1.authorName = \"sharon goldwater\"\nRETURN DISTINCT t2.paperId",
        "question": "what did sharon goldwater write ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-()\nWHERE t1.authorName = \"sharon goldwater\"\nRETURN DISTINCT t2.paperId",
        "question": "papers where sharon goldwater is an author",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-()\nWHERE t1.authorName = \"sharon goldwater\"\nRETURN DISTINCT t2.paperId",
        "question": "Papers authored by sharon goldwater",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-()\nWHERE t1.authorName = \"sharon goldwater\"\nRETURN DISTINCT t2.paperId",
        "question": "sharon goldwater papers",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-()\nWHERE t1.authorName = \"sharon goldwater\"\nRETURN DISTINCT t2.paperId",
        "question": "Papers by sharon goldwater",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-()\nWHERE t1.authorName = \"sharon goldwater\"\nRETURN DISTINCT t2.paperId",
        "question": "Papers written by sharon goldwater",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-()\nWHERE t1.authorName = \"sharon goldwater\"\nRETURN DISTINCT t2.paperId",
        "question": "which papers has sharon goldwater written ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-()\nWHERE t1.authorName = \"sharon goldwater\"\nRETURN DISTINCT t2.paperId",
        "question": "papers written by sharon goldwater",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-()\nWHERE t1.authorName = \"sharon goldwater\"\nRETURN DISTINCT t2.paperId",
        "question": "What has sharon goldwater published ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-()\nWHERE t1.authorName = \"sharon goldwater\"\nRETURN DISTINCT t2.paperId",
        "question": "Does sharon goldwater have any papers published ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-()\nWHERE t1.authorName = \"sharon goldwater\"\nRETURN DISTINCT t2.paperId",
        "question": "sharon goldwater 's papers",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-()\nWHERE t1.authorName = \"sharon goldwater\"\nRETURN DISTINCT t2.paperId",
        "question": "show me papers by sharon goldwater .",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-()\nWHERE t1.authorName = \"sharon goldwater\"\nRETURN DISTINCT t2.paperId",
        "question": "What papers are authored by sharon goldwater ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-()\nWHERE t1.authorName = \"sharon goldwater\"\nRETURN DISTINCT t2.paperId",
        "question": "papers by sharon goldwater ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"monte carlo simulation\" AND t3.year > 2011\nRETURN DISTINCT t3.paperId",
        "question": "are there any monte carlo simulation papers since 2011 ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"monte carlo simulation\" AND t3.year > 2011\nRETURN DISTINCT t3.paperId",
        "question": "monte carlo simulation papers later than 2011",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"monte carlo simulation\" AND t3.year > 2011\nRETURN DISTINCT t3.paperId",
        "question": "monte carlo simulation later than 2011",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"monte carlo simulation\" AND t3.year > 2011\nRETURN DISTINCT t3.paperId",
        "question": "monte carlo simulation papers published after 2011",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"monte carlo simulation\" AND t3.year > 2011\nRETURN DISTINCT t3.paperId",
        "question": "monte carlo simulation papers since 2011",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (paper:`scholar.paper`)\nWHERE paper.title = \"machine networks for one shot learning\"\nRETURN DISTINCT paper.paperId",
        "question": "List all academic papers on machine networks for one shot learning",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (paper:`scholar.paper`)\nWHERE paper.title = \"machine networks for one shot learning\"\nRETURN DISTINCT paper.paperId",
        "question": "machine networks for one shot learning",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Daniella Coelho\"\nRETURN DISTINCT t3.venueId",
        "question": "What conference does Daniella Coelho publish in ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Daniella Coelho\"\nRETURN DISTINCT t3.venueId",
        "question": "conferences that Daniella Coelho has published in",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Daniella Coelho\"\nRETURN DISTINCT t3.venueId",
        "question": "In which conferences does Daniella Coelho typically publish ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Daniella Coelho\"\nRETURN DISTINCT t3.venueId",
        "question": "in what conferences does Daniella Coelho publish ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Daniella Coelho\"\nRETURN DISTINCT t3.venueId",
        "question": "What conferences does Daniella Coelho publish in ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Daniella Coelho\"\nRETURN DISTINCT t3.venueId",
        "question": "At which conferences does Daniella Coelho publish ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Daniella Coelho\"\nRETURN DISTINCT t3.venueId",
        "question": "What conferences does Daniella Coelho submit to ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"li dong\" AND t3.year = 2016\nRETURN DISTINCT t3.venueId",
        "question": "What conferences did li dong submit to in 2016 ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"li dong\" AND t3.year = 2016\nRETURN DISTINCT t3.venueId",
        "question": "Where did li dong publish in 2016",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"li dong\" AND t3.year = 2016\nRETURN DISTINCT t3.venueId",
        "question": "What conferences did li dong publish in in 2016 ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"li dong\" AND t3.year = 2016\nRETURN DISTINCT t3.venueId",
        "question": "Where did li dong publish in 2016 ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"dependent types\"\nRETURN DISTINCT t3.paperId",
        "question": "List the popular publications on dependent types",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"dependent types\"\nRETURN DISTINCT t3.paperId",
        "question": "Which paper should I read about dependent types ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"dependent types\"\nRETURN DISTINCT t3.paperId",
        "question": "top dependent types papers",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Question Answering\"\nRETURN DISTINCT t3.paperId",
        "question": "List papers that has a keyword Question Answering",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Question Answering\"\nRETURN DISTINCT t3.paperId",
        "question": "Question Answering research papers",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Question Answering\"\nRETURN DISTINCT t3.paperId",
        "question": "papers on Question Answering",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Question Answering\"\nRETURN DISTINCT t3.paperId",
        "question": "papers related to Question Answering",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Question Answering\"\nRETURN DISTINCT t3.paperId",
        "question": "papers about Question Answering",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Question Answering\"\nRETURN DISTINCT t3.paperId",
        "question": "Papers about Question Answering",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Question Answering\"\nRETURN DISTINCT t3.paperId",
        "question": "papers published in the area of Question Answering",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Question Answering\"\nRETURN DISTINCT t3.paperId",
        "question": "Question Answering experiments",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Question Answering\"\nRETURN DISTINCT t3.paperId",
        "question": "Show me the papers on Question Answering",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Question Answering\"\nRETURN DISTINCT t3.paperId",
        "question": "papers that used Question Answering",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Question Answering\"\nRETURN DISTINCT t3.paperId",
        "question": "papers that mention Question Answering",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Question Answering\"\nRETURN DISTINCT t3.paperId",
        "question": "Question Answering papers",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Question Answering\"\nRETURN DISTINCT t3.paperId",
        "question": "Show me Question Answering papers .",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Question Answering\"\nRETURN DISTINCT t3.paperId",
        "question": "Question Answering publications",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Question Answering\"\nRETURN DISTINCT t3.paperId",
        "question": "Fetch me some papers on Question Answering",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Question Answering\"\nRETURN DISTINCT t3.paperId",
        "question": "papers on Question Answering experiments",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Question Answering\"\nRETURN DISTINCT t3.paperId",
        "question": "What papers talk about Question Answering ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Question Answering\"\nRETURN DISTINCT t3.paperId",
        "question": "What is the paper about Question Answering ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Question Answering\"\nRETURN DISTINCT t3.paperId",
        "question": "Which papers are about about Question Answering ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Question Answering\"\nRETURN DISTINCT t3.paperId",
        "question": "list papers that used Question Answering",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Question Answering\"\nRETURN DISTINCT t3.paperId",
        "question": "papers for Question Answering",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Question Answering\"\nRETURN DISTINCT t3.paperId",
        "question": "List papers that has keyword Question Answering",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Question Answering\"\nRETURN DISTINCT t3.paperId",
        "question": "papers with Question Answering in keyphrases",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t3:`scholar.paper`)-[t2:`scholar.paperKeyphrase`]-(t1:`scholar.author`)\nWHERE t1.authorName = \"Luke S Zettlemoyer\"\nRETURN DISTINCT t2.keyphraseId,t3.year\nORDER BY t3.year,t2.keyphraseId",
        "question": "keyphrases used by Luke S Zettlemoyer for each year",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"balakrishnan prabhakaran\"\nRETURN DISTINCT t3.paperId,t3.year",
        "question": "list papers published by balakrishnan prabhakaran",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"zachary tatlock\"\nRETURN DISTINCT t3.paperId,t3.year",
        "question": "citation count of zachary tatlock 's papers",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"subhasis chaudhuri\"\nRETURN DISTINCT t3.paperId",
        "question": "subhasis chaudhuri",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"subhasis chaudhuri\"\nRETURN DISTINCT t3.paperId",
        "question": "list papers by subhasis chaudhuri",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"subhasis chaudhuri\"\nRETURN DISTINCT t3.paperId",
        "question": "List of papers by subhasis chaudhuri",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"subhasis chaudhuri\"\nRETURN DISTINCT t3.paperId",
        "question": "conference papers of subhasis chaudhuri",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Liwen Xiong\" AND t3.year = 2015\nRETURN DISTINCT t3.paperId",
        "question": "What papers has Liwen Xiong written in 2015",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Liwen Xiong\" AND t3.year = 2015\nRETURN DISTINCT t3.paperId",
        "question": "papers by Liwen Xiong in 2015",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Liwen Xiong\" AND t3.year = 2015\nRETURN DISTINCT t3.paperId",
        "question": "What did Liwen Xiong published in 2015 ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Liwen Xiong\" AND t3.year = 2015\nRETURN DISTINCT t3.paperId",
        "question": "Papers written by Liwen Xiong in 2015",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Liwen Xiong\" AND t3.year = 2015\nRETURN DISTINCT t3.paperId",
        "question": "What are the papers of Liwen Xiong in 2015",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Liwen Xiong\" AND t3.year = 2015\nRETURN DISTINCT t3.paperId",
        "question": "papers by Liwen Xiong from 2015",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Liwen Xiong\" AND t3.year = 2015\nRETURN DISTINCT t3.paperId",
        "question": "Papers published in 2015 by Liwen Xiong",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Liwen Xiong\" AND t3.year = 2015\nRETURN DISTINCT t3.paperId",
        "question": "what has Liwen Xiong done in the past year",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Liwen Xiong\" AND t3.year = 2015\nRETURN DISTINCT t3.paperId",
        "question": "What papers did Liwen Xiong publish last year ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Liwen Xiong\" AND t3.year = 2015\nRETURN DISTINCT t3.paperId",
        "question": "papers published in 2015 by Liwen Xiong",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Liwen Xiong\" AND t3.year = 2015\nRETURN DISTINCT t3.paperId",
        "question": "Liwen Xiong 's papers in 2015 ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Liwen Xiong\" AND t3.year = 2015\nRETURN DISTINCT t3.paperId",
        "question": "Liwen Xiong 's papers in 2015",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Liwen Xiong\" AND t3.year = 2015\nRETURN DISTINCT t3.paperId",
        "question": "Liwen Xiong publication 2015",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Liwen Xiong\" AND t3.year = 2015\nRETURN DISTINCT t3.paperId",
        "question": "Papers authored by Liwen Xiong in 2015",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Liwen Xiong\" AND t3.year = 2015\nRETURN DISTINCT t3.paperId",
        "question": "Papers from Liwen Xiong in 2015",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Liwen Xiong\" AND t3.year = 2015\nRETURN DISTINCT t3.paperId",
        "question": "what papers are published by Liwen Xiong in 2015",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t3:`scholar.paper`)-[t2:`scholar.paperKeyphrase`]-(t1:`scholar.author`)\nWHERE t1.authorName = \"Christof Dallermassl\" AND t3.year = 2000\nRETURN DISTINCT t2.keyphraseId",
        "question": "keyphrases used by Christof Dallermassl in 2000",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t3:`scholar.paper`)-[t2:`scholar.paperKeyphrase`]-(t1:`scholar.author`)\nWHERE t1.authorName = \"Christof Dallermassl\" AND t3.year = 2000\nRETURN DISTINCT t2.keyphraseId",
        "question": "Keyphrases used by Christof Dallermassl in 2000",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t3:`scholar.paper`)-[t2:`scholar.paperKeyphrase`]-(t1:`scholar.author`)\nWHERE t1.authorName = \"Christof Dallermassl\" AND t3.year = 2000\nRETURN DISTINCT t2.keyphraseId",
        "question": "keyphrases Christof Dallermassl used in papers written last year",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t3:`scholar.paper`)-[t2:`scholar.paperKeyphrase`]-(t1:`scholar.author`)\nWHERE t1.authorName = \"Christof Dallermassl\" AND t3.year = 2000\nRETURN DISTINCT t2.keyphraseId",
        "question": "What are keyphrases by Christof Dallermassl in 2000 ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"mohammad rastegari\" AND t3.journalId >= 0\nRETURN DISTINCT t3.paperId",
        "question": "journal articles by mohammad rastegari",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"mohammad rastegari\" AND t3.journalId >= 0\nRETURN DISTINCT t3.paperId",
        "question": "Journal Papers by mohammad rastegari",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"question answering\" AND t3.year = 2016\nRETURN DISTINCT t3.paperId",
        "question": "What papers were written on question answering this year ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Noah A Smith\"\nRETURN DISTINCT t1.authorId",
        "question": "who writes papers with Noah A Smith ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Noah A Smith\"\nRETURN DISTINCT t1.authorId",
        "question": "Who is a coauthor with Noah A Smith ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Noah A Smith\"\nRETURN DISTINCT t1.authorId",
        "question": "Who are Noah A Smith 's co-authors",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Noah A Smith\"\nRETURN DISTINCT t1.authorId",
        "question": "Who has coauthored with Noah A Smith ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Noah A Smith\"\nRETURN DISTINCT t1.authorId",
        "question": "co-authors of Noah A Smith",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Noah A Smith\"\nRETURN DISTINCT t1.authorId",
        "question": "author who wrote papers with Noah A Smith",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Noah A Smith\"\nRETURN DISTINCT t1.authorId",
        "question": "authors who collaborated with Noah A Smith",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Noah A Smith\"\nRETURN DISTINCT t1.authorId",
        "question": "who does Noah A Smith author with ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Noah A Smith\"\nRETURN DISTINCT t1.authorId",
        "question": "Who are Noah A Smith 's coauthors",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Noah A Smith\"\nRETURN DISTINCT t1.authorId",
        "question": "who are all the co-authors of Noah A Smith ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Noah A Smith\"\nRETURN DISTINCT t1.authorId",
        "question": "who does Noah A Smith work with ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Noah A Smith\"\nRETURN DISTINCT t1.authorId",
        "question": "who does Noah A Smith collaborate with ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Noah A Smith\"\nRETURN DISTINCT t1.authorId",
        "question": "Who are Noah A Smith 's coauthors ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.author`)-[t3:`scholar.writes`]-(t1:`scholar.author`)\nWHERE t2.authorName = \"Noah A Smith\"\nRETURN DISTINCT t1.authorId",
        "question": "coauthors of Noah A Smith",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"deep learning\"\nRETURN DISTINCT t3.paperId,t3.year\nORDER BY t3.year DESC",
        "question": "recent deep learning papers",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"deep learning\"\nRETURN DISTINCT t3.paperId,t3.year\nORDER BY t3.year DESC",
        "question": "new deep learning papers",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"deep learning\"\nRETURN DISTINCT t3.paperId,t3.year\nORDER BY t3.year DESC",
        "question": "What are the latest publications on deep learning ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"deep learning\"\nRETURN DISTINCT t3.paperId,t3.year\nORDER BY t3.year DESC",
        "question": "Most recent deep learning conference ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"deep learning\"\nRETURN DISTINCT t3.paperId,t3.year\nORDER BY t3.year DESC",
        "question": "Show me some recent papers on deep learning ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"deep learning\"\nRETURN DISTINCT t3.paperId,t3.year\nORDER BY t3.year DESC",
        "question": "What are some recent papers written in deep learning ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"deep learning\"\nRETURN DISTINCT t3.paperId,t3.year\nORDER BY t3.year DESC",
        "question": "What is the most recent paper of deep learning ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"deep learning\"\nRETURN DISTINCT t3.paperId,t3.year\nORDER BY t3.year DESC",
        "question": "What are recent papers on deep learning ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"deep learning\"\nRETURN DISTINCT t3.paperId,t3.year\nORDER BY t3.year DESC",
        "question": "Current research on deep learning",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"deep learning\"\nRETURN DISTINCT t3.paperId,t3.year\nORDER BY t3.year DESC",
        "question": "latest deep learning papers",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"deep learning\"\nRETURN DISTINCT t3.paperId,t3.year\nORDER BY t3.year DESC",
        "question": "newest deep learning papers",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Pedro Domingos\"\nRETURN DISTINCT t3.year",
        "question": "What years did Pedro Domingos publish papers in ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Pedro Domingos\"\nRETURN DISTINCT t3.year",
        "question": "In what years did Pedro Domingos publish a paper ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"jamie callan\"\nRETURN DISTINCT t3.paperId,t3.year\nORDER BY t3.year",
        "question": "jamie callan 's publications by year",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"instance segmentation\" AND t3.journalId >= 0\nRETURN DISTINCT t3.paperId",
        "question": "journal papers for instance segmentation",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"character recognition\" AND t3.year < 2010\nRETURN DISTINCT t3.paperId",
        "question": "character recognition papers earlier than 2010",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"character recognition\" AND t3.year < 2010\nRETURN DISTINCT t3.paperId",
        "question": "papers before 2010 about character recognition",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"character recognition\" AND t3.year < 2010\nRETURN DISTINCT t3.paperId",
        "question": "character recognition papers from before 2010",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"character recognition\" AND t3.year < 2010\nRETURN DISTINCT t3.paperId",
        "question": "papers about character recognition from before 2010",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"character recognition\" AND t3.year < 2010\nRETURN DISTINCT t3.paperId",
        "question": "character recognition papers before 2010",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName =~'.*[\"|\"]Michael Armstrong\".*' AND t3.year =~'.*[1|1]99.*'\nRETURN DISTINCT t3.year,t2.paperId",
        "question": "What paper did Michael Armstrong wrote in the 90s ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (paper:`scholar.paper`)\nWHERE paper.year = 2014\nRETURN DISTINCT paper.paperId",
        "question": "papers from 2014",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (paper:`scholar.paper`)\nWHERE paper.year = 2014\nRETURN DISTINCT paper.paperId",
        "question": "2014 papers",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (paper:`scholar.paper`)\nWHERE paper.year = 2013\nRETURN DISTINCT paper.venueId",
        "question": "conferences in 2013",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Mirella Lapata\"\nRETURN DISTINCT t3.paperId,t3.year\nORDER BY t3.year DESC\nLIMIT 5",
        "question": "What are the 5 most recent papers of Mirella Lapata ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (paper:`scholar.paper`)\nWHERE paper.year = 2011\nRETURN DISTINCT paper.journalId",
        "question": "List today 's journals",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (paper:`scholar.paper`)\nWHERE paper.year = 2011\nRETURN DISTINCT paper.journalId",
        "question": "List the journals published in March , 2011",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t4:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t1:`scholar.author`)\nWHERE t4.keyphraseName =~'.*[\"|\"]sensor fusion\".*'\nRETURN DISTINCT t1.authorName",
        "question": "Who wrote sensor fusion ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t4:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t1:`scholar.author`)\nWHERE t4.keyphraseName =~'.*[\"|\"]sensor fusion\".*'\nRETURN DISTINCT t1.authorName",
        "question": "Authors of papers on sensor fusion",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t4:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t1:`scholar.author`)\nWHERE t4.keyphraseName =~'.*[\"|\"]sensor fusion\".*'\nRETURN DISTINCT t1.authorName",
        "question": "people working on sensor fusion",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t4:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t1:`scholar.author`)\nWHERE t4.keyphraseName =~'.*[\"|\"]sensor fusion\".*'\nRETURN DISTINCT t1.authorName",
        "question": "Who publishes in sensor fusion ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t4:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t1:`scholar.author`)\nWHERE t4.keyphraseName =~'.*[\"|\"]sensor fusion\".*'\nRETURN DISTINCT t1.authorName",
        "question": "who publishes papers about sensor fusion",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Takashi Matsumoto\"\nRETURN DISTINCT t3.journalId",
        "question": "What journals are Takashi Matsumoto 's articles published in ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Takashi Matsumoto\"\nRETURN DISTINCT t3.journalId",
        "question": "What journals has Takashi Matsumoto published in ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Takashi Matsumoto\"\nRETURN DISTINCT t3.journalId",
        "question": "In what scholarly journals does Takashi Matsumoto publish ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Luke S Zettlemoyer\"\nRETURN DISTINCT t3.year\nORDER BY t3.year",
        "question": "When did Luke S Zettlemoyer publish ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"question answering\" AND t3.year = 2016\nRETURN DISTINCT t3.paperId",
        "question": "question answering 2016 papers",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"question answering\" AND t3.year = 2016\nRETURN DISTINCT t3.paperId",
        "question": "What papers were written on question answering in 2016 ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Temporal Data\"\nRETURN DISTINCT t3.journalId",
        "question": "Find journals about Temporal Data .",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Temporal Data\"\nRETURN DISTINCT t3.journalId",
        "question": "List the journals related to Temporal Data",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Donald E Knuth\"\nRETURN DISTINCT t3.title",
        "question": "What are all the publication titles by Donald E Knuth ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"deep learning\"\nWITH t3, count(t3.year) AS cnt\nRETURN DISTINCT t3.year\nORDER BY t3.year ASC",
        "question": "first deep learning paper",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"deep learning\"\nWITH t3, count(t3.year) AS cnt\nRETURN DISTINCT t3.year\nORDER BY t3.year ASC",
        "question": "What was the first paper on deep learning written ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"deep learning\"\nWITH t3, count(t3.year) AS cnt\nRETURN DISTINCT t3.year\nORDER BY t3.year ASC",
        "question": "When was deep learning proposed ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"deep learning\"\nWITH t3, count(t3.year) AS cnt\nRETURN DISTINCT t3.year\nORDER BY t3.year ASC",
        "question": "when was the first deep learning paper published ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.paper`)-[]-(t1:`scholar.journal`)\nWHERE t1.journalName = \"Academic radiology\" AND t2.year = 1995\nRETURN DISTINCT t2.paperId",
        "question": "what papers were published in Academic radiology in 1995 ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Trophic Cascade\"\nRETURN DISTINCT t3.venueId",
        "question": "venue for Trophic Cascade",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Trophic Cascade\"\nRETURN DISTINCT t3.venueId",
        "question": "conferences for Trophic Cascade",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Trophic Cascade\"\nRETURN DISTINCT t3.venueId",
        "question": "what conferences are related to Trophic Cascade",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Trophic Cascade\"\nRETURN DISTINCT t3.venueId",
        "question": "What was the conference name that approved Trophic Cascade ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.paper`)-[t1:`scholar.writes`]-()\nWHERE t2.year = 2015\nRETURN DISTINCT t1.authorId",
        "question": "Which authors published papers in 2015 ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t2:`scholar.paper`)-[t1:`scholar.writes`]-()\nWHERE t2.year = 2015\nRETURN DISTINCT t1.authorId",
        "question": "who wrote papers in 2015",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.keyphrase`)-[t2:`scholar.paperKeyphrase`]-(t3:`scholar.paper`)\nWHERE t1.keyphraseName = \"Trophic Cascade\" AND t3.year = 2010\nRETURN DISTINCT t3.journalId",
        "question": "In 2010 what journal published an article about Trophic Cascade ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (paper:`scholar.paper`)\nWHERE paper.title =~'.*[\"|\"]the effects of juicing for cancer patients\".*' AND paper.year > 2006\nRETURN DISTINCT paper.paperId,paper.title",
        "question": "What articles have been published since 2006 about the effects of juicing for cancer patients ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (paper:`scholar.paper`)\nWHERE paper.title = \"Fracture of acrylic bone cement\"\nRETURN DISTINCT paper.venueId",
        "question": "What is the venue of Fracture of acrylic bone cement ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (paper:`scholar.paper`)\nWHERE paper.title = \"A Switching Architecture For ISDN\"\nRETURN DISTINCT paper.title,paper.year",
        "question": "What is the year of publication of \" A Switching Architecture For ISDN \" ?",
        "answers": []
    },
    {
        "db_id": "scholar",
        "query": "MATCH (t1:`scholar.author`)-[t2:`scholar.writes`]-(t3:`scholar.paper`)\nWHERE t1.authorName = \"Su-In Lee\" AND t3.year < 2012\nRETURN DISTINCT t3.paperId",
        "question": "Give me the papers written by Su-In Lee before 2012 .",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (business:`yelp.business`)\nWHERE business.rating > 4.5\nRETURN business.name",
        "question": "List all the businesses with more than 4.5 stars",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (business:`yelp.business`)\nWHERE business.rating = 3.5\nRETURN business.name",
        "question": "List all businesses with rating 3.5",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (user:`yelp.user`)\nWHERE user.name = 'Michelle'\nRETURN user.user_id",
        "question": "List all user ids with name Michelle",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (business:`yelp.business`)\nWHERE business.name = 'Whataburger'\nRETURN business.state",
        "question": "Find all states in which there is a Whataburger",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)\nWHERE t1.name = 'MGM Grand Buffet' AND t2.category_name = 'category_category_name0'\nRETURN t1.city",
        "question": "Find all cities in which there is a restaurant called \" MGM Grand Buffet \"",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (business:`yelp.business`)\nWHERE business.rating < 1.5\nRETURN business.city",
        "question": "Find the cities of businesses rated below 1.5",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (business:`yelp.business`)\nWHERE business.name = 'Taj Mahal'\nRETURN business.city",
        "question": "Find all cities which has a \" Taj Mahal \" .",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (review:`yelp.review`)\nWHERE review.rating < 1\nRETURN review.text",
        "question": "List all the reviews which rated a business less than 1",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)\nWHERE t1.rating > 3.5 AND t2.category_name = 'restaurant'\nRETURN t1.name",
        "question": "List all the restaurant rated more than 3.5",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)\nWHERE t1.name = 'Taj Mahal' AND t2.category_name = 'restaurant'\nRETURN t1.city",
        "question": "find all cities which has a \" Taj Mahal \" restaurant",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.user`)-[]-(t1:`yelp.review`)\nWHERE t2.name = 'Niloofar'\nRETURN t1.text",
        "question": "list all the reviews by Niloofar",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.review`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.user`)\nWHERE t3.name = 'Niloofar'\nRETURN t1.name",
        "question": "list all the businesses which have a review by Niloofar",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.review`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.user`)\nWHERE t2.rating = 5 AND t3.name = 'Niloofar'\nRETURN t1.name",
        "question": "list all the businesses which Niloofar rated 5",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.category`)-[]-(t4:`yelp.review`)-[]-(t5:`yelp.user`)\nWHERE t2.category_name = 'Italian' AND t3.category_name = 'category_category_name1' AND t5.name = 'Michelle'\nRETURN t4.text",
        "question": "List all the reviews by Michelle for Italian restaurant",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.review`)\nWHERE t1.name = 'Cafe Zinho' AND t1.state = 'Texas' AND t2.category_name = 'restaurant'\nRETURN count(DISTINCT t3.None)",
        "question": "find the number of reviews written for \" Cafe Zinho \" restaurant in Texas",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.category`)\nWHERE t1.rating = 5 AND t2.category_name = 'Italian' AND t3.category_name = 'restaurant'\nRETURN t1.name",
        "question": "List all 5 star Italian restaurant",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t3:`yelp.category`)-[]-(t2:`yelp.business`)-[]-(t4:`yelp.category`)-[]-(t1:`yelp.neighbourhood`)\nWHERE t2.city = 'Madison' AND t3.category_name = 'Italian' AND t4.category_name = 'restaurant'\nRETURN t1.neighbourhood_name",
        "question": "List all the neighbourhoods with Italian restaurant in Madison",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t3:`yelp.category`)-[]-(t2:`yelp.business`)-[]-(t4:`yelp.category`)-[]-(t1:`yelp.neighbourhood`)\nWHERE t2.city = 'Madison' AND t2.rating < 2.5 AND t3.category_name = 'Italian' AND t4.category_name = 'restaurant'\nRETURN t1.neighbourhood_name",
        "question": "List all the neighbourhoods with Italian restaurant rated less than 2.5 in Madison",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)\nWHERE t1.state = 'Pennsylvania' AND t2.category_name = 'restaurant'\nRETURN t1.name",
        "question": "find all the restaurant in Pennsylvania",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)\nWHERE t1.state = 'Pennsylvania' AND t2.category_name = 'restaurant'\nRETURN t1.name",
        "question": "List all businesses that are restaurant in Pennsylvania .",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.review`)\nWHERE t1.review_count > 100 AND t2.category_name = 'Pet Groomers'\nRETURN t3.text",
        "question": "Find all the reviews for all Pet Groomers with more than 100 reviews",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)\nWHERE t1.city = 'Los Angeles' AND t2.category_name = 'breweries'\nRETURN t1.name",
        "question": "What are all the breweries in \" Los Angeles \" ?",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)\nWHERE t1.city = 'Los Angeles' AND t2.category_name = 'breweries'\nRETURN t1.name",
        "question": "Find all breweries in Los Angeles",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)\nWHERE t1.city = 'Los Angeles' AND t2.category_name = 'breweries'\nRETURN t1.name",
        "question": "Find all breweries in \" Los Angeles \"",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.review`)-[]-(t4:`yelp.user`)\nWHERE t1.name = 'Mesa Grill' AND t2.category_name = 'restaurant'\nRETURN t4.name",
        "question": "Find all users who reviewed restaurant \" Mesa Grill \"",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (business:`yelp.business`)\nWHERE business.city = 'Los Angeles' AND business.name = 'Walmart'\nRETURN business.full_address",
        "question": "List the addresses of all Walmart in \" Los Angeles \"",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.review`)-[]-(t4:`yelp.user`)\nWHERE t1.city = 'Dallas' AND t2.category_name = 'restaurant' AND t4.name = 'Patrick'\nRETURN t1.name",
        "question": "Find all restaurant reviewed by Patrick in \" Dallas \"",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.review`)-[]-(t4:`yelp.user`)\nWHERE t1.city = 'Dallas' AND t2.category_name = 'restaurant' AND t4.name = 'Patrick'\nRETURN t1.name",
        "question": "Which restaurant in Dallas were reviewed by user Patrick ?",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.review`)-[]-(t4:`yelp.user`)\nWHERE t2.category_name = 'Bars' AND t4.name = 'Patrick'\nRETURN t1.name",
        "question": "Find all Bars reviewed by Patrick",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.review`)-[]-(t4:`yelp.user`)\nWHERE t1.rating >= 3 AND t2.category_name = 'Bars' AND t4.name = 'Patrick'\nRETURN t1.name",
        "question": "Find all Bars reviewed by Patrick with at least 3 stars",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.tip`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.user`)\nWHERE t1.name = 'Barrio Cafe' AND t2.year = 2015\nRETURN t3.name",
        "question": "Find all users who have written tips for \" Barrio Cafe \" in 2015",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (business:`yelp.business`)\nWHERE business.rating < 2 AND business.state = 'Texas'\nRETURN business.name",
        "question": "Find all businesses in Texas with a rating below 2",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.category`)\nWHERE t1.city = 'Los Angeles' AND t2.category_name = 'Seafood' AND t3.category_name = 'restaurant'\nRETURN t1.name",
        "question": "Find all restaurant Seafood in Los Angeles",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.category`)\nWHERE t1.city = 'Los Angeles' AND t2.category_name = 'Seafood' AND t3.category_name = 'restaurant'\nRETURN t1.name",
        "question": "List all the Seafood restaurant in \" Los Angeles \"",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.category`)\nWHERE t1.city = 'Los Angeles' AND t2.category_name = 'Seafood' AND t3.category_name = 'restaurant'\nRETURN t1.name",
        "question": "Find all restaurant that serve Seafood in \" Los Angeles \"",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.user`)-[]-(t1:`yelp.review`)\nWHERE t1.rating > 4 AND t2.name = 'Patrick'\nRETURN t1.text",
        "question": "Find all reviews by Patrick with a rating above 4",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (business:`yelp.business`)\nWHERE business.city = 'Los Angeles' AND business.name = 'Apple Store'\nRETURN business.business_id",
        "question": "Find all Apple Store in \" Los Angeles \"",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)\nWHERE t1.city = 'Dallas' AND t1.rating > 4.5 AND t2.category_name = 'restaurant'\nRETURN t1.name",
        "question": "Find all Dallas restaurant with a rating above 4.5",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t3:`yelp.category`)-[]-(t2:`yelp.business`)-[]-(t1:`yelp.neighbourhood`)\nWHERE t2.name = 'Flat Top Grill' AND t3.category_name = 'category_category_name0'\nRETURN t1.neighbourhood_name",
        "question": "What neighbourhood is restaurant \" Flat Top Grill \" in ?",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.tip`)-[]-(t1:`yelp.business`)\nWHERE t1.name = 'Vintner Grill' AND t2.likes > 9\nRETURN t2.text",
        "question": "Find all tips about \" Vintner Grill \" that received more than 9 likes",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.review`)-[]-(t1:`yelp.business`)\nWHERE t1.name = 'Kabob Palace' AND t2.year = 2014\nRETURN t2.text",
        "question": "Find all reviews about \" Kabob Palace \" in year 2014",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.tip`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.user`)\nWHERE t1.city = 'Dallas'\nRETURN t3.name",
        "question": "Find all users who have written tips about businesses in Dallas",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)\nWHERE t1.name = 'MGM Grand Buffet' AND t1.state = 'Texas' AND t2.category_name = 'restaurant'\nRETURN t1.city",
        "question": "Find all cities in Texas in which there is a restaurant called \" MGM Grand Buffet \"",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.tip`)-[]-(t4:`yelp.user`)\nWHERE t2.category_name = 'Pet Groomers'\nRETURN t4.name",
        "question": "Find the users who have given tips on Pet Groomers",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.tip`)-[]-(t1:`yelp.business`)\nWHERE t1.name = 'Cafe Zinho' AND t1.state = 'Texas'\nRETURN t2.text",
        "question": "Find all tips for \" Cafe Zinho \" in Texas .",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.review`)-[]-(t4:`yelp.user`)\nWHERE t2.category_name = 'restaurant'\nRETURN t4.name",
        "question": "List all users who reviewed businesses that are restaurant .",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.tip`)-[]-(t1:`yelp.business`)\nWHERE t1.name = 'Cafe Zinho' AND t1.state = 'Pennsylvania' AND t2.year = 2010\nRETURN t2.text",
        "question": "List all tips for \" Cafe Zinho \" in Pennsylvania in 2010 .",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.review`)-[]-(t4:`yelp.user`)\nWHERE t2.category_name = 'restaurant' AND t3.year = 2010\nRETURN t4.name",
        "question": "List all users who reviewed businesses that are restaurant in 2010 .",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t3:`yelp.user`)-[]-(t1:`yelp.review`)-[]-(t2:`yelp.tip`)\nWHERE t1.year = 2012\nRETURN t2.text",
        "question": "Find all the tips from a user who has written a review in 2012",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.review`)-[]-(t1:`yelp.business`)\nWHERE t1.rating = 2.5\nRETURN t2.text",
        "question": "Find all reviews for businesses rated 2.5",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)\nWHERE t1.city = 'Madison' AND t2.category_name = 'escape games'\nRETURN count(DISTINCT t1.name)",
        "question": "find the number of escape games in Madison",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)\nWHERE t1.city = 'Madison' AND t2.category_name = 'escape games'\nRETURN count(DISTINCT t1.name)",
        "question": "What is the number of escape games in Madison",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)\nWHERE t1.city = 'Madison' AND t2.category_name = 'escape games'\nRETURN count(DISTINCT t1.name)",
        "question": "How many escape games exist in Madison",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)\nWHERE t1.city = 'Madison' AND t2.category_name = 'escape games'\nRETURN count(DISTINCT t1.name)",
        "question": "What is the number of escape games in \" Madison \" ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)\nWHERE t1.city = 'Madison' AND t2.category_name = 'escape games'\nRETURN count(DISTINCT t1.name)",
        "question": "How many escape games are there in Madison ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)\nWHERE t1.rating > 3.5 AND t2.category_name = 'restaurant'\nRETURN count(DISTINCT t1.name)",
        "question": "find the number of restaurant rated more than 3.5",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.user`)-[]-(t1:`yelp.review`)\nWHERE t1.year = 2015 AND t2.name = 'Niloofar'\nRETURN count(DISTINCT t1.None)",
        "question": "How many reviews has Niloofar written in 2015",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.checkin`)-[]-(t1:`yelp.business`)\nWHERE t1.name = 'Cafe Zinho' AND t2.day = 'Friday'\nRETURN t2.count",
        "question": "What is the number of checkins for \" Cafe Zinho \" on Friday",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.review`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.user`)\nWHERE t1.city = 'Pittsburgh' AND t1.name = 'Sushi Too'\nRETURN count(DISTINCT t3.name)",
        "question": "how many users reviewed \" Sushi Too \" in Pittsburgh",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)\nWHERE t1.city = 'Pittsburgh' AND t1.rating = 4.5 AND t2.category_name = 'restaurant'\nRETURN count(DISTINCT t1.name)",
        "question": "What is the number of restaurant in Pittsburgh rated 4.5",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (tip:`yelp.tip`)\nWHERE tip.year = 2015\nRETURN count(DISTINCT tip.text)",
        "question": "How many tips have been written in 2015",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.user`)-[]-(t1:`yelp.tip`)\nWHERE t1.year = 2010 AND t2.name = 'Michelle'\nRETURN count(DISTINCT t1.None)",
        "question": "How many tips has Michelle written in 2010",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.user`)-[]-(t1:`yelp.tip`)\nWHERE t1.year = 2010 AND t2.name = 'Michelle'\nRETURN count(DISTINCT t1.None)",
        "question": "Return me the number of tips that are written by Michelle in 2010 .",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.user`)-[]-(t1:`yelp.tip`)\nWHERE t1.month = 'April' AND t2.name = 'Michelle'\nRETURN count(DISTINCT t1.None)",
        "question": "How many tips has Michelle written in April",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)\nWHERE t1.state = 'Texas' AND t2.category_name = 'restaurant'\nRETURN count(DISTINCT t1.name)",
        "question": "what is the number of restaurant in Texas",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)\nWHERE t1.city = 'Dallas' AND t1.rating > 3.5 AND t2.category_name = 'Bars'\nRETURN count(DISTINCT t1.name)",
        "question": "How many Bars in \" Dallas \" have a rating above 3.5 ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)\nWHERE t1.city = 'Dallas' AND t1.rating > 3.5 AND t2.category_name = 'Bars'\nRETURN count(DISTINCT t1.name)",
        "question": "How many Bars in Dallas have a rating above 3.5 ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.review`)-[]-(t4:`yelp.user`)\nWHERE t1.city = 'Dallas' AND t1.name = 'Texas de Brazil' AND t1.state = 'Texas' AND t2.category_name = 'restaurant'\nRETURN count(DISTINCT t4.name)",
        "question": "How many people reviewed the restaurant \" Texas de Brazil \" in Dallas Texas ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.review`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.user`)\nWHERE t1.name = 'Bistro Di Napoli' AND t2.year = 2015\nRETURN count(DISTINCT t3.name)",
        "question": "How many people reviewed \" Bistro Di Napoli \" in 2015 ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t3:`yelp.category`)-[]-(t1:`yelp.business`)-[]-(t2:`yelp.neighbourhood`)\nWHERE t1.city = 'Dallas' AND t3.category_name = 'restaurant' AND t2.neighbourhood_name = 'Hazelwood'\nRETURN count(DISTINCT t1.name)",
        "question": "How many restaurant are there in the Hazelwood district of Dallas ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (business:`yelp.business`)\nWHERE business.city = 'Dallas' AND business.name = 'Starbucks' AND business.state = 'Texas'\nRETURN count(DISTINCT business.business_id)",
        "question": "How many Starbucks are there in Dallas Texas ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (business:`yelp.business`)\nWHERE business.name = 'Acacia Cafe'\nRETURN business.review_count",
        "question": "How many reviews does \" Acacia Cafe \" have ?",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.neighbourhood`)-[]-(t1:`yelp.business`)\nWHERE t1.city = 'Madison' AND t2.neighbourhood_name = 'Stone Meadows'\nRETURN count(DISTINCT t1.name)",
        "question": "How many businesses are there in the \" Stone Meadows \" neighbourhood in Madison ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.user`)-[]-(t1:`yelp.review`)\nWHERE t2.name = 'Adrienne'\nRETURN count(DISTINCT t1.None)",
        "question": "How many reviews has Adrienne written ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.user`)-[]-(t1:`yelp.review`)\nWHERE t1.month = 'March' AND t1.year = 2014 AND t2.name = 'Michelle'\nRETURN count(DISTINCT t1.None)",
        "question": "How many reviews has Michelle written in March 2014 ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.review`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.user`)\nWHERE t2.year = 2010 AND t3.name = 'Michelle'\nRETURN count(DISTINCT t1.name)",
        "question": "How many businesses has Michelle reviewed in 2010 ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.review`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.user`)\nWHERE t1.city = 'San Diego' AND t2.year = 2010 AND t3.name = 'Christine'\nRETURN count(DISTINCT t1.name)",
        "question": "How many businesses in \" San Diego \" has Christine reviewed in 2010 ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (business:`yelp.business`)\nWHERE business.city = 'Los Angeles' AND business.name = 'Target'\nRETURN count(DISTINCT business.business_id)",
        "question": "How many Target are there in \" Los Angeles \" ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.review`)-[]-(t4:`yelp.user`)\nWHERE t1.city = 'Dallas' AND t2.category_name = 'Irish Pub'\nRETURN count(DISTINCT t4.name)",
        "question": "How many users have reviewed Irish Pub in Dallas ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (review:`yelp.review`)\nWHERE review.year = 2014\nRETURN avg(review.rating)",
        "question": "What is the average rating of reviews written in year 2014 ?",
        "answers": [
            [
                null
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.review`)-[]-(t4:`yelp.user`)\nWHERE t1.name = 'Vintner Grill' AND t2.category_name = 'category_category_name0' AND t3.year = 2010\nRETURN count(DISTINCT t4.name)",
        "question": "How many people reviewed restaurant \" Vintner Grill \" in 2010 ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t1:`yelp.neighbourhood`)-[]-(t2:`yelp.business`)-[]-(t3:`yelp.review`)\nWHERE t1.neighbourhood_name = 'South Summerlin'\nRETURN count(DISTINCT t3.None)",
        "question": "Find the number of reviews on businesses located in \" South Summerlin \" neighbourhood",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (user:`yelp.user`)\nWHERE user.name = 'Michelle'\nRETURN count(DISTINCT user.name)",
        "question": "Find the number of users called Michelle",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)\nWHERE t2.category_name = 'restaurant'\nRETURN count(DISTINCT t1.name)",
        "question": "Return me the number of businesses that are restaurant .",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (business:`yelp.business`)\nWHERE business.name = 'Panda Express'\nRETURN count(DISTINCT business.city)",
        "question": "Return me the number of cities that has \" Panda Express \" .",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.user`)-[]-(t1:`yelp.tip`)\nWHERE t2.name = 'Michelle'\nRETURN count(DISTINCT t1.None)",
        "question": "Return me the number of tips that are written by Michelle .",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (review:`yelp.review`)\nWHERE review.month = 'March'\nRETURN count(DISTINCT review.text)",
        "question": "Find the total number of reviews written in March",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t1:`yelp.neighbourhood`)-[]-(t2:`yelp.business`)\nWHERE t2.city = 'Madison' AND t2.rating = 5\nRETURN count(DISTINCT t1.neighbourhood_name)",
        "question": "How many neighbourhoods have a business with rating 5 in Madison ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.category`)\nWHERE t1.state = 'Texas' AND t2.category_name = 'Moroccan' AND t3.category_name = 'restaurant'\nRETURN t1.name",
        "question": "Give me all the Moroccan restaurant in Texas",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.category`)\nWHERE t1.city = 'Dallas' AND t1.rating > 3.5 AND t2.category_name = 'Mexican' AND t3.category_name = 'restaurant'\nRETURN t1.name",
        "question": "Find all Mexican restaurant in Dallas with at least 3.5 stars",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.category`)\nWHERE t1.city = 'Dallas' AND t1.rating > 3.5 AND t2.category_name = 'Mexican' AND t3.category_name = 'restaurant'\nRETURN t1.name",
        "question": "Find all Mexican restaurant in Dallas with a rating above 3.5",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.category`)\nWHERE t1.city = 'Dallas' AND t1.state = 'Texas' AND t2.category_name = 'Valet Service' AND t3.category_name = 'restaurant'\nRETURN t1.name",
        "question": "Find all restaurant with Valet Service in Dallas Texas",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t3:`yelp.category`)-[]-(t1:`yelp.business`)-[]-(t4:`yelp.category`)-[]-(t2:`yelp.neighbourhood`)\nWHERE t1.city = 'Madison' AND t3.category_name = 'Italian' AND t4.category_name = 'restaurant' AND t2.neighbourhood_name = 'Meadowood'\nRETURN t1.name",
        "question": "Find all Italian restaurant in the Meadowood neighbourhood of Madison",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)\nWHERE t1.city = 'Los Angeles' AND t1.rating > 3 AND t1.review_count > 30 AND t2.category_name = 'Bars'\nRETURN t1.name",
        "question": "Find all Bars in \" Los Angeles \" with at least 30 reviews and average rating above 3 stars",
        "answers": []
    },
    {
        "db_id": "yelp",
        "query": "MATCH (t2:`yelp.category`)-[]-(t1:`yelp.business`)-[]-(t3:`yelp.category`)\nWHERE t1.city = 'Edinburgh' AND t2.category_name = 'restaurant' AND t3.category_name = 'Egyptian'\nRETURN count(DISTINCT t1.name)",
        "question": "How many Egyptian restaurant are there in Edinburgh ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "academic",
        "query": "MATCH (journal:`academic.journal`)\nWHERE journal.name = 'PVLDB'\nRETURN journal.homepage",
        "question": "return me the homepage of PVLDB .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (publication:`academic.publication`)\nWHERE publication.title = 'Making database systems usable'\nRETURN publication.abstract",
        "question": "return me the abstract of \" Making database systems usable \" .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (publication:`academic.publication`)\nWHERE publication.title = 'Making database systems usable'\nRETURN publication.year",
        "question": "return me the year of \" Making database systems usable \"",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (publication:`academic.publication`)\nWHERE publication.title = 'Making database systems usable'\nRETURN publication.year",
        "question": "return me the year of \" Making database systems usable \" .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (publication:`academic.publication`)\nWHERE publication.year > 2000\nRETURN publication.title",
        "question": "return me the papers after 2000 .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (conference:`academic.conference`)\nWHERE conference.name = 'VLDB'\nRETURN conference.homepage",
        "question": "return me the homepage of the VLDB conference .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (organization:`academic.organization`)\nWHERE organization.continent = 'North America'\nRETURN organization.name",
        "question": "return me all the organizations in \" North America \" .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (organization:`academic.organization`)\nWHERE organization.name = 'University of Michigan'\nRETURN organization.homepage",
        "question": "return me the homepage of \" University of Michigan \" .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (publication:`academic.publication`)\nWHERE publication.title = 'Making database systems usable'\nRETURN publication.reference_num",
        "question": "return me the number of references of \" Making database systems usable \" .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (publication:`academic.publication`)\nWHERE publication.title = 'Making database systems usable'\nRETURN publication.reference_num",
        "question": "return me the references of \" Making database systems usable \" .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (publication:`academic.publication`)\nWHERE publication.title = 'Making database systems usable'\nRETURN publication.citation_num",
        "question": "return me the number of citations of \" Making database systems usable \" .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (publication:`academic.publication`)\nWHERE publication.title = 'Making database systems usable'\nRETURN publication.citation_num",
        "question": "return me the citations of \" Making database systems usable \" .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (publication:`academic.publication`)\nWHERE publication.citation_num > 200\nRETURN publication.title",
        "question": "return me the paper with more than 200 citations .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t3:`academic.domain`)-[t1:`academic.domain_journal`]-(t2:`academic.journal`)\nWHERE t2.name = 'PVLDB'\nRETURN t3.name",
        "question": "return me the area of PVLDB .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t1:`academic.author`)-[t2:`academic.writes`]-(t3:`academic.publication`)\nWHERE t3.title = 'Making database systems usable'\nRETURN t1.name",
        "question": "return me the authors of \" Making database systems usable \" .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.publication`)-[]-(t1:`academic.conference`)\nWHERE t2.title = 'Making database systems usable'\nRETURN t1.name",
        "question": "return me the conference, which published \" Making database systems usable \" .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.publication`)-[]-(t1:`academic.conference`)\nWHERE t1.name = 'VLDB'\nRETURN t2.title",
        "question": "return me the papers on VLDB conference .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.publication`)-[]-(t1:`academic.journal`)\nWHERE t1.name = 'PVLDB'\nRETURN t2.title",
        "question": "return me the papers on PVLDB .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.publication`)-[]-(t1:`academic.journal`)\nWHERE t1.name = 'PVLDB' AND t2.year > 2000\nRETURN t2.title",
        "question": "return me the papers on PVLDB after 2000 .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.publication`)-[]-(t1:`academic.conference`)\nWHERE t1.name = 'VLDB' AND t2.year > 2000\nRETURN t2.title",
        "question": "return me the papers on VLDB conference after 2000 .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t1:`academic.conference`)-[t3:`academic.domain_conference`]-(t2:`academic.domain`)\nWHERE t1.name = 'VLDB'\nRETURN t2.name",
        "question": "return me the area of the VLDB conference .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t3:`academic.domain`)-[t2:`academic.domain_keyword`]-(t1:`academic.keyword`)\nWHERE t3.name = 'Databases'\nRETURN t1.keyword",
        "question": "return me all the keywords in Databases area .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t1:`academic.keyword`)-[t2:`academic.publication_keyword`]-(t3:`academic.publication`)\nWHERE t1.keyword = 'Natural Language'\nRETURN t3.title",
        "question": "return me all the papers, which contain the keyword \" Natural Language \" .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t1:`academic.keyword`)-[t3:`academic.publication_keyword`]-(t2:`academic.publication`)\nWHERE t2.title = 'Making database systems usable'\nRETURN t1.keyword",
        "question": "return me the keywords of \" Making database systems usable \" .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.organization`)-[]-(t1:`academic.author`)\nWHERE t2.name = 'University of Michigan'\nRETURN t1.name",
        "question": "return me all the researchers in \" University of Michigan \" .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.domain`)-[t1:`academic.domain_publication`]-(t3:`academic.publication`)\nWHERE t2.name = 'Databases' AND t3.citation_num > 200\nRETURN t3.title",
        "question": "return me the paper in Databases area with more than 200 citations .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.publication`)-[]-(t1:`academic.journal`)\nWHERE t1.name = 'PVLDB' AND t2.citation_num > 200\nRETURN t2.title",
        "question": "return me the paper in PVLDB with more than 200 citations .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.publication`)-[]-(t1:`academic.conference`)\nWHERE t1.name = 'VLDB' AND t2.citation_num > 200\nRETURN t2.title",
        "question": "return me the paper in VLDB conference with more than 200 citations .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (publication:`academic.publication`)\nWHERE publication.citation_num > 200 AND publication.year > 2000\nRETURN publication.title",
        "question": "return me the paper after 2000 with more than 200 citations .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.domain`)-[t1:`academic.domain_publication`]-(t3:`academic.publication`)\nWHERE t2.name = 'Databases' AND t3.citation_num > 200 AND t3.year > 2000\nRETURN t3.title",
        "question": "return me the paper after 2000 in Databases area with more than 200 citations .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.publication`)-[]-(t1:`academic.journal`)\nWHERE t1.name = 'PVLDB' AND t2.citation_num > 200 AND t2.year > 2000\nRETURN t2.title",
        "question": "return me the paper after 2000 in PVLDB with more than 200 citations .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.publication`)-[]-(t1:`academic.conference`)\nWHERE t1.name = 'VLDB' AND t2.citation_num > 200 AND t2.year > 2000\nRETURN t2.title",
        "question": "return me the paper after 2000 in VLDB conference with more than 200 citations .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t1:`academic.author`)-[t2:`academic.writes`]-(t3:`academic.publication`)\nWHERE t3.title = 'Making database systems usable'\nRETURN count(DISTINCT t1.name)",
        "question": "return me the number of authors of \" Making database systems usable \" .",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "academic",
        "query": "MATCH (t3:`academic.publication`)-[]-(t1:`academic.cite`)-[]-(t2:`academic.publication`)\nWHERE t3.title = 'Making database systems usable' AND t2.year < 2010\nRETURN count(DISTINCT t2.title)",
        "question": "return me the number of citations of \" Making database systems usable \" before 2010 .",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.publication`)-[]-(t1:`academic.conference`)\nWHERE t1.name = 'VLDB'\nRETURN count(DISTINCT t2.title)",
        "question": "return me the number of papers on VLDB conference .",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.publication`)-[]-(t1:`academic.journal`)\nWHERE t1.name = 'PVLDB'\nRETURN count(DISTINCT t2.title)",
        "question": "return me the number of papers on PVLDB .",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "academic",
        "query": "MATCH (publication:`academic.publication`)\nWHERE publication.year > 2000\nRETURN count(DISTINCT publication.title)",
        "question": "return me the number of papers after 2000 .",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.publication`)-[]-(t1:`academic.journal`)\nWHERE t1.name = 'PVLDB' AND t2.year > 2000\nRETURN count(DISTINCT t2.title)",
        "question": "return me the number of papers on PVLDB after 2000 .",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.publication`)-[]-(t1:`academic.conference`)\nWHERE t1.name = 'VLDB' AND t2.year > 2000\nRETURN count(DISTINCT t2.title)",
        "question": "return me the number of papers on VLDB conference after 2000 .",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "academic",
        "query": "MATCH (t3:`academic.domain`)-[t2:`academic.domain_keyword`]-(t1:`academic.keyword`)\nWHERE t3.name = 'Databases'\nRETURN count(DISTINCT t1.keyword)",
        "question": "return me the number of keywords in Databases area .",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "academic",
        "query": "MATCH (t1:`academic.keyword`)-[t2:`academic.publication_keyword`]-(t3:`academic.publication`)\nWHERE t1.keyword = 'Natural Language'\nRETURN count(DISTINCT t3.title)",
        "question": "return me the number of papers which contain the keyword \" Natural Language \" .",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "academic",
        "query": "MATCH (t1:`academic.keyword`)-[t3:`academic.publication_keyword`]-(t2:`academic.publication`)\nWHERE t2.title = 'Making database systems usable'\nRETURN count(DISTINCT t1.keyword)",
        "question": "return me the number of the keywords of \" Making database systems usable \" .",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "academic",
        "query": "MATCH (organization:`academic.organization`)\nWHERE organization.continent = 'North America'\nRETURN count(DISTINCT organization.name)",
        "question": "return me the number of the organizations in \" North America \" .",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.organization`)-[]-(t1:`academic.author`)\nWHERE t2.name = 'University of Michigan'\nRETURN count(DISTINCT t1.name)",
        "question": "return me the number of researchers in \" University of Michigan \" .",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.publication`)-[]-(t1:`academic.journal`)\nWHERE t1.name = 'PVLDB' AND t2.year < 2000\nRETURN count(DISTINCT t2.title)",
        "question": "return me the number of papers published on PVLDB before 2000 .",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.publication`)-[]-(t1:`academic.conference`)\nWHERE t1.name = 'VLDB' AND t2.year < 2000\nRETURN count(DISTINCT t2.title)",
        "question": "return me the number of papers published in the VLDB conference before 2000 .",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.publication`)-[]-(t1:`academic.journal`)\nWHERE t1.name = 'PVLDB'\nRETURN t2.citation_num",
        "question": "return me the citations of each paper in PVLDB .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.publication`)-[]-(t1:`academic.journal`)\nWHERE t1.name = 'PVLDB'\nRETURN count(DISTINCT t2.title),t2.year",
        "question": "return me the number of papers published in PVLDB in each year .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.publication`)-[]-(t1:`academic.conference`)\nWHERE t1.name = 'VLDB'\nRETURN t2.citation_num",
        "question": "return me the citations of each paper in the VLDB conference .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.publication`)-[]-(t1:`academic.conference`)\nWHERE t1.name = 'VLDB'\nRETURN count(DISTINCT t2.title),t2.year",
        "question": "return me the number of papers published in the VLDB conference in each year .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.domain`)-[t1:`academic.domain_publication`]-(t3:`academic.publication`)\nWHERE t2.name = 'Databases'\nRETURN t3.title\nORDER BY t3.citation_num DESC\nLIMIT 1",
        "question": "return me the paper in Databases area with the most citations .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.publication`)-[]-(t1:`academic.journal`)\nWHERE t1.name = 'PVLDB'\nRETURN t2.title\nORDER BY t2.citation_num DESC\nLIMIT 1",
        "question": "return me the paper in PVLDB with the most citations .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.publication`)-[]-(t1:`academic.conference`)\nWHERE t1.name = 'VLDB'\nRETURN t2.title\nORDER BY t2.citation_num DESC\nLIMIT 1",
        "question": "return me the paper in VLDB conference with the most citations .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (publication:`academic.publication`)\nWHERE publication.year > 2000\nRETURN publication.title\nORDER BY publication.citation_num DESC\nLIMIT 1",
        "question": "return me the paper after 2000 with the most citations .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.domain`)-[t1:`academic.domain_publication`]-(t3:`academic.publication`)\nWHERE t2.name = 'Databases' AND t3.year > 2000\nRETURN t3.title\nORDER BY t3.citation_num DESC\nLIMIT 1",
        "question": "return me the paper after 2000 in Databases area with the most citations .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.publication`)-[]-(t1:`academic.journal`)\nWHERE t1.name = 'PVLDB' AND t2.year > 2000\nRETURN t2.title\nORDER BY t2.citation_num DESC\nLIMIT 1",
        "question": "return me the paper after 2000 in PVLDB with the most citations .",
        "answers": []
    },
    {
        "db_id": "academic",
        "query": "MATCH (t2:`academic.publication`)-[]-(t1:`academic.conference`)\nWHERE t1.name = 'VLDB' AND t2.year > 2000\nRETURN t2.title\nORDER BY t2.citation_num DESC\nLIMIT 1",
        "question": "return me the paper after 2000 in VLDB conference with the most citations .",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (movie:`imdb.movie`)\nWHERE movie.title = 'The Imitation Game'\nRETURN movie.release_year",
        "question": "What year is the movie \" The Imitation Game \" from ?",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (movie:`imdb.movie`)\nWHERE movie.title = 'The Imitation Game'\nRETURN movie.release_year",
        "question": "What year was the movie \" The Imitation Game \" produced",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (actor:`imdb.actor`)\nWHERE actor.name = 'Benedict Cumberbatch'\nRETURN actor.birth_year",
        "question": "What year was \" Benedict Cumberbatch \" born ?",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (actor:`imdb.actor`)\nWHERE actor.name = 'Benedict Cumberbatch'\nRETURN actor.birth_year",
        "question": "In what year was \" Benedict Cumberbatch \" born",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (actor:`imdb.actor`)\nWHERE actor.name = 'Christoph Waltz'\nRETURN actor.nationality",
        "question": "What is the nationality of the actress \" Christoph Waltz \" ?",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (actor:`imdb.actor`)\nWHERE actor.name = 'Christoph Waltz'\nRETURN actor.nationality",
        "question": "What is the nationality of the actor \" Christoph Waltz \" ?",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (movie:`imdb.movie`)\nWHERE movie.release_year = 2015\nRETURN movie.title",
        "question": "Find all movies produced in 2015",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (actor:`imdb.actor`)\nWHERE actor.birth_city = 'Tehran'\nRETURN actor.name",
        "question": "Find all actors born in \" Tehran \"",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (actor:`imdb.actor`)\nWHERE actor.birth_city = 'Tehran'\nRETURN actor.name",
        "question": "Find all actors born in Tehran",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (actor:`imdb.actor`)\nWHERE actor.birth_city = 'Tehran'\nRETURN actor.name",
        "question": "Which actors were born in Tehran",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (actor:`imdb.actor`)\nWHERE actor.nationality = 'Afghanistan'\nRETURN actor.name",
        "question": "Find all actors who are from Afghanistan",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (actor:`imdb.actor`)\nWHERE actor.nationality = 'Afghanistan'\nRETURN actor.name",
        "question": "Find all actors from Afghanistan",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (actor:`imdb.actor`)\nWHERE actor.nationality = 'Afghanistan'\nRETURN actor.name",
        "question": "Give me the name of all the actors from Afghanistan",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (actor:`imdb.actor`)\nWHERE actor.birth_year = 1984\nRETURN actor.name",
        "question": "Find all actors who were born in 1984",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (actor:`imdb.actor`)\nWHERE actor.name = 'actor_name0'\nRETURN actor.birth_year",
        "question": "When was \" Kevin Spacey \" born ?",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (actor:`imdb.actor`)\nWHERE actor.name = 'actor_name0'\nRETURN actor.birth_year",
        "question": "In what year was \" Kevin Spacey \" born ?",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (director:`imdb.director`)\nWHERE director.name = 'director_name0'\nRETURN director.birth_city",
        "question": "Where is the birth place of \" Kevin Spacey \"",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (director:`imdb.director`)\nWHERE director.name = 'director_name0'\nRETURN director.birth_city",
        "question": "In what city was \" Kevin Spacey \" born ?",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (director:`imdb.director`)\nWHERE director.name = 'director_name0'\nRETURN director.nationality",
        "question": "What is the nationality of \" Kevin Spacey \" ?",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (movie:`imdb.movie`)\nWHERE movie.title = 'Finding Nemo'\nRETURN movie.budget",
        "question": "How much was the budget of \" Finding Nemo \"",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t2:`imdb.director`)-[]-(t1:`imdb.directed_by`)-[]-(t3:`imdb.movie`)\nWHERE t2.name = 'Steven Spielberg' AND t3.release_year > 2006\nRETURN t3.title",
        "question": "Find all movies directed by \" Steven Spielberg \" after 2006",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t2:`imdb.director`)-[]-(t1:`imdb.directed_by`)-[]-(t3:`imdb.movie`)\nWHERE t3.title = 'James Bond'\nRETURN t2.name",
        "question": "Who is the director of the movie \" James Bond \" ?",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t2:`imdb.director`)-[]-(t1:`imdb.directed_by`)-[]-(t3:`imdb.movie`)\nWHERE t3.title = 'James Bond'\nRETURN t2.name",
        "question": "Who directed the movie \" James Bond \" ?",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t2:`imdb.director`)-[]-(t1:`imdb.directed_by`)-[]-(t3:`imdb.movie`)\nWHERE t3.title = 'James Bond'\nRETURN t2.name",
        "question": "List \" James Bond \" directors",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t2:`imdb.genre`)-[]-(t1:`imdb.classification`)-[]-(t3:`imdb.movie`)\nWHERE t3.title = 'Jurassic Park'\nRETURN t2.genre",
        "question": "What is the genre of the movie \" Jurassic Park \" ?",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t2:`imdb.director`)-[]-(t1:`imdb.directed_by`)-[]-(t3:`imdb.movie`)\nWHERE t3.release_year = 2015 AND t3.title = 'Joy'\nRETURN t2.name",
        "question": "Who was the director of the movie Joy from 2015 ?",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t1:`imdb.movie`)-[t3:`imdb.written_by`]-(t2:`imdb.writer`)\nWHERE t2.name = \"Matt Damon\"\nRETURN t1.title",
        "question": "Find all movies written by \" Matt Damon \"",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (movie:`imdb.movie`)\nWHERE movie.release_year = 2007 AND movie.title = 'Juno'\nRETURN movie.budget",
        "question": "What was the budget of the movie Juno from 2007 ?",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t2:`imdb.genre`)-[]-(t1:`imdb.classification`)-[]-(t3:`imdb.movie`)\nWHERE t2.genre = \"Sci-Fi\" AND t3.release_year = 2010\nRETURN t3.title",
        "question": "Find all Sci-Fi produced in year 2010",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t2:`imdb.genre`)-[]-(t1:`imdb.classification`)-[]-(t3:`imdb.movie`)\nWHERE t2.genre = \"Sci-Fi\" AND t3.release_year = 2010\nRETURN t3.title",
        "question": "List all the Sci-Fi movies which released in 2010",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (actor:`imdb.actor`)\nWHERE actor.birth_city = 'Austin' AND actor.birth_year > 1980\nRETURN actor.name",
        "question": "Find all actors born in \" Austin \" after 1980",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (actor:`imdb.actor`)\nWHERE actor.birth_city = 'Austin' AND actor.birth_year > 1980\nRETURN actor.name",
        "question": "Who are the actors born in \" Austin \" after 1980 ?",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (actor:`imdb.actor`)\nWHERE actor.birth_city = 'Austin' AND actor.birth_year > 1980\nRETURN actor.name",
        "question": "Find all actors from Austin born after 1980",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t2:`imdb.director`)-[]-(t1:`imdb.directed_by`)-[]-(t3:`imdb.movie`)\nWHERE t2.birth_city = 'Los Angeles'\nRETURN t3.title",
        "question": "Find all movies by directors born in \" Los Angeles \"",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (actor:`imdb.actor`)\nWHERE actor.birth_city = 'New York City' AND actor.birth_year = 1984\nRETURN actor.name",
        "question": "Find all actors who were born in \" New York City \" in 1984",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t2:`imdb.tags`)-[]-(t1:`imdb.keyword`)-[]-(t3:`imdb.movie`)\nWHERE t1.keyword = 'nuclear weapons'\nRETURN t3.title",
        "question": "Find all movies about nuclear weapons",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t2:`imdb.tags`)-[]-(t1:`imdb.keyword`)-[]-(t3:`imdb.movie`)\nWHERE t1.keyword = 'nuclear weapons'\nRETURN t3.title",
        "question": "What are the movies related to nuclear weapons",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t2:`imdb.director`)-[]-(t1:`imdb.directed_by`)-[]-(t3:`imdb.movie`)\nWHERE t2.name = 'Alfred Hitchcock'\nRETURN t3.title",
        "question": "Which movies did \" Alfred Hitchcock \" direct ?",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t1:`imdb.producer`)-[]-(t3:`imdb.made_by`)-[]-(t2:`imdb.tv_series`)\nWHERE t1.name = 'Shonda Rhimes'\nRETURN t2.title",
        "question": "What are all the tv series created by \" Shonda Rhimes \" ?",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t1:`imdb.movie`)-[t3:`imdb.written_by`]-(t2:`imdb.writer`)\nWHERE t1.title = 'The Truman Show'\nRETURN t2.name",
        "question": "Who is the writer of the movie \" The Truman Show \"",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t1:`imdb.movie`)-[t3:`imdb.written_by`]-(t2:`imdb.writer`)\nWHERE t1.title = 'The Truman Show'\nRETURN t2.name",
        "question": "Who is the writer of \" The Truman Show \"",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t2:`imdb.director`)-[]-(t1:`imdb.directed_by`)-[]-(t3:`imdb.tv_series`)\nWHERE t3.release_year = 2013 AND t3.title = 'House of Cards'\nRETURN t2.name",
        "question": "Who is the director of the tv series \" House of Cards \" from 2013 ?",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (actor:`imdb.actor`)\nWHERE actor.birth_city = 'Austin' AND actor.gender = 'female'\nRETURN actor.name",
        "question": "Find all the female actors from Austin",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (actor:`imdb.actor`)\nWHERE actor.birth_year > 1980 AND actor.nationality = 'Italy'\nRETURN actor.name",
        "question": "Find all actors from Italy born after 1980",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (actor:`imdb.actor`)\nWHERE actor.birth_city = 'New York City' AND actor.birth_year > 1980 AND actor.gender = 'female'\nRETURN actor.name",
        "question": "Find all the female actors born in \" New York City \" after 1980",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (director:`imdb.director`)\nWHERE director.nationality = 'Afghanistan'\nRETURN director.name",
        "question": "Find all the directors who are from Afghanistan",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t2:`imdb.director`)-[]-(t1:`imdb.directed_by`)-[]-(t3:`imdb.movie`)\nWHERE t3.title = 'The Past'\nRETURN t2.birth_city",
        "question": "where is the director of \" The Past \" from",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t5:`imdb.director`)-[]-(t2:`imdb.directed_by`)-[]-(t4:`imdb.movie`)-[]-(t1:`imdb.classification`)-[]-(t3:`imdb.genre`)\nWHERE t5.name = 'Asghar Farhadi'\nRETURN t3.genre",
        "question": "what are the genres of movies directed by \" Asghar Farhadi \"",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t3:`imdb.director`)-[]-(t2:`imdb.directed_by`)-[]-(t4:`imdb.movie`)-[]-(t5:`imdb.tags`)-[]-(t1:`imdb.keyword`)\nWHERE t1.keyword = 'nuclear weapons'\nRETURN t3.name",
        "question": "List all the directors of movies about nuclear weapons",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t2:`imdb.director`)-[]-(t1:`imdb.directed_by`)-[]-(t3:`imdb.movie`)\nWHERE t2.name = 'Steven Spielberg'\nRETURN count(DISTINCT t3.title)",
        "question": "How many movies did \" Steven Spielberg \" direct ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "imdb",
        "query": "MATCH (movie:`imdb.movie`)\nWHERE movie.release_year = 2013\nRETURN count(DISTINCT movie.title)",
        "question": "How many movies were produced in the year 2013 ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "imdb",
        "query": "MATCH (movie:`imdb.movie`)\nWHERE movie.release_year = 2013\nRETURN count(DISTINCT movie.title)",
        "question": "What is the number of movies produced in 2013 ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t2:`imdb.director`)-[]-(t1:`imdb.directed_by`)-[]-(t3:`imdb.movie`)\nWHERE t2.name = 'Woody Allen'\nRETURN count(DISTINCT t3.title),t3.release_year",
        "question": "What is the number of movies directed by \" Woody Allen \" per year ?",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (actor:`imdb.actor`)\nWHERE actor.birth_city = 'Los Angeles' AND actor.birth_year > 2000\nRETURN count(DISTINCT actor.name)",
        "question": "How many actors were born in \" Los Angeles \" after 2000 ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t2:`imdb.tags`)-[]-(t1:`imdb.keyword`)-[]-(t3:`imdb.movie`)\nWHERE t1.keyword = 'Iraq war' AND t3.release_year = 2015\nRETURN count(DISTINCT t3.title)",
        "question": "How many movies about Iraq war were produced in 2015 ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t2:`imdb.tags`)-[]-(t1:`imdb.keyword`)-[]-(t3:`imdb.movie`)\nWHERE t1.keyword = 'Persians' AND t3.release_year > 1990\nRETURN count(DISTINCT t3.title)",
        "question": "How many movies about Persians were released after 1990 ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t2:`imdb.director`)-[]-(t1:`imdb.directed_by`)-[]-(t3:`imdb.movie`)\nWHERE t2.name = 'Quentin Tarantino' AND t3.release_year > 2010\nRETURN count(DISTINCT t3.title)",
        "question": "How many movies did \" Quentin Tarantino \" direct after 2010 ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t2:`imdb.director`)-[]-(t1:`imdb.directed_by`)-[]-(t3:`imdb.movie`)\nWHERE t2.name = 'Quentin Tarantino' AND t3.release_year < 2010\nRETURN count(DISTINCT t3.title)",
        "question": "How many movies did \" Quentin Tarantino \" direct before 2010 ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t3:`imdb.director`)-[]-(t2:`imdb.directed_by`)-[]-(t4:`imdb.movie`)-[]-(t5:`imdb.made_by`)-[]-(t1:`imdb.producer`)\nWHERE t3.name = 'Quentin Tarantino' AND t4.release_year < 2010 AND t4.release_year > 2002\nRETURN count(DISTINCT t4.title)",
        "question": "How many movies did \" Quentin Tarantino \" direct before 2002 and after 2010 ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "imdb",
        "query": "MATCH (actor:`imdb.actor`)\nWHERE actor.birth_city = 'New York City' AND actor.birth_year > 1980 AND actor.gender = 'female'\nRETURN count(DISTINCT actor.name)",
        "question": "How many female actors were born in \" New York City \" after 1980 ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t5:`imdb.director`)-[]-(t2:`imdb.directed_by`)-[]-(t1:`imdb.directed_by`)-[]-(t4:`imdb.movie`)-[]-(t3:`imdb.movie`)\nWHERE t4.title = 'Revolutionary Road'\nRETURN t3.title",
        "question": "What movies have the same director as the movie \" Revolutionary Road \" ?",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t2:`imdb.director`)-[]-(t1:`imdb.directed_by`)-[]-(t3:`imdb.movie`)\nWHERE t2.name = 'Quentin Tarantino'\nRETURN t3.budget,t3.title\nORDER BY t3.release_year DESC\nLIMIT 1",
        "question": "Find the name and budget of the latest movie by \" Quentin Tarantino \"",
        "answers": []
    },
    {
        "db_id": "imdb",
        "query": "MATCH (t2:`imdb.director`)-[]-(t1:`imdb.directed_by`)-[]-(t3:`imdb.movie`)\nWHERE t2.name = 'Jim Jarmusch'\nRETURN t3.title\nORDER BY t3.release_year DESC\nLIMIT 1",
        "question": "What is the latest movie by \" Jim Jarmusch \"",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t1.NAME = 'buttercup kitchen'\nRETURN count(*)",
        "question": "how many buttercup kitchen are there in san francisco ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.GEOGRAPHIC`)\nWHERE t2.REGION = 'bay area' AND t1.FOOD_TYPE = 'chinese'\nRETURN count(*)",
        "question": "how many chinese restaurants are there in the bay area ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.GEOGRAPHIC`)\nWHERE t2.REGION = 'bay area' AND t1.FOOD_TYPE = 'chinese'\nRETURN count(*)",
        "question": "how many places for chinese food are there in the bay area ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.GEOGRAPHIC`)\nWHERE t2.REGION = 'bay area' AND t1.FOOD_TYPE = 'chinese'\nRETURN count(*)",
        "question": "how many chinese places are there in the bay area ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.GEOGRAPHIC`)\nWHERE t2.REGION = 'bay area' AND t1.FOOD_TYPE = 'chinese'\nRETURN count(*)",
        "question": "how many places for chinese are there in the bay area ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.GEOGRAPHIC`)\nWHERE t2.COUNTY = 'santa cruz county' AND t1.NAME = 'jamerican cuisine'\nRETURN count(*)",
        "question": "how many jamerican cuisine are there in santa cruz county ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t1.NAME = 'jamerican cuisine'\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where is jamerican cuisine ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.GEOGRAPHIC`)-[]-(t3:`restaurants.LOCATION`)\nWHERE t2.REGION = 'bay area' AND t1.NAME = 'denny'\nRETURN t3.HOUSE_NUMBER,t1.NAME",
        "question": "where is denny in the bay area ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'bethel island' AND t2.STREET_NAME = 'bethel island rd' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "what are some good restaurants on bethel island rd in bethel island ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'bethel island' AND t2.STREET_NAME = 'bethel island rd' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me some good restaurants on bethel island rd in bethel island ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'bethel island' AND t2.STREET_NAME = 'bethel island rd' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me a good restaurant on bethel island rd in bethel island ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'bethel island' AND t2.STREET_NAME = 'bethel island rd' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "what is a good restaurant on bethel island rd in bethel island ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'alameda'\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where can we find a restaurant in alameda ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'alameda'\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me a restaurant in alameda ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'alameda'\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where can we find some restaurants in alameda ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'alameda'\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where is a restaurant in alameda ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'alameda'\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me some restaurants in alameda ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t1.FOOD_TYPE = 'french' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me some restaurants good for french food ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t1.FOOD_TYPE = 'french' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where are some restaurants good for french food ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'palo alto' AND t1.FOOD_TYPE = 'french'\nRETURN count(*)",
        "question": "how many places for french food are there in palo alto ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'palo alto' AND t1.FOOD_TYPE = 'french'\nRETURN count(*)",
        "question": "how many french restaurants are there in palo alto ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'palo alto' AND t1.FOOD_TYPE = 'french'\nRETURN count(*)",
        "question": "how many french restaurant are there in palo alto ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'palo alto' AND t1.FOOD_TYPE = 'french'\nRETURN count(*)",
        "question": "how many places for french are there in palo alto ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.GEOGRAPHIC`)\nWHERE t2.COUNTY = 'yolo county' AND t1.FOOD_TYPE = 'italian'\nRETURN count(*)",
        "question": "how many italian restaurants are in the yolo county ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'mountain view' AND t1.FOOD_TYPE = 'french'\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where can i eat french food in mountain view ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.GEOGRAPHIC`)\nWHERE t2.REGION = 'bay area' AND t1.NAME = 'denny'\nRETURN count(*)",
        "question": "how many denny are there in the bay area ?",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'alameda' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me a good restaurant in alameda ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'alameda' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "what are some good restaurants in alameda ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'alameda' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "what is a good restaurant in alameda ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'alameda' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me some good restaurants in alameda ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t2.STREET_NAME = 'buchanan' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where is a good restaurant on buchanan in san francisco for arabic food ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t2.STREET_NAME = 'buchanan' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where are some good arabics on buchanan in san francisco ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t2.STREET_NAME = 'buchanan' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where is a good arabic restaurant on buchanan in san francisco ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t2.STREET_NAME = 'buchanan' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "what are some good places for arabic on buchanan in san francisco ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t2.STREET_NAME = 'buchanan' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me a good arabic on buchanan in san francisco ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t2.STREET_NAME = 'buchanan' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me some restaurants good for arabic food on buchanan in san francisco ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t2.STREET_NAME = 'buchanan' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me a good place on buchanan in san francisco for arabic food ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t2.STREET_NAME = 'buchanan' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where is a good place on buchanan in san francisco for arabic food ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t2.STREET_NAME = 'buchanan' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where can i eat arabic food on buchanan in san francisco ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t2.STREET_NAME = 'buchanan' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me some good places on buchanan in san francisco for arabic food ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t2.STREET_NAME = 'buchanan' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where is a arabic restaurant on buchanan in san francisco ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t2.STREET_NAME = 'buchanan' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me a restaurant on buchanan in san francisco that serves good arabic food ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t2.STREET_NAME = 'buchanan' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me a good restaurant on buchanan in san francisco for arabic food ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t2.STREET_NAME = 'buchanan' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where is a restaurant on buchanan in san francisco that serves good arabic food ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t2.STREET_NAME = 'buchanan' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me some good restaurants on buchanan in san francisco for arabic food ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t2.STREET_NAME = 'buchanan' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me some good places for arabic on buchanan in san francisco ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t2.STREET_NAME = 'buchanan' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where can i eat some good arabic food on buchanan in san francisco ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t2.STREET_NAME = 'buchanan' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where is a good arabic on buchanan in san francisco ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t2.STREET_NAME = 'buchanan' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where are some restaurants good for arabic food on buchanan in san francisco ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t2.STREET_NAME = 'buchanan' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where are some good places for arabic on buchanan in san francisco ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t2.STREET_NAME = 'buchanan' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me a good arabic restaurant on buchanan in san francisco ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t2.STREET_NAME = 'buchanan' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me some good arabics on buchanan in san francisco ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.GEOGRAPHIC`)-[]-(t3:`restaurants.LOCATION`)\nWHERE t2.REGION = 'bay area' AND t1.FOOD_TYPE = 'french'\nRETURN t3.HOUSE_NUMBER,t1.NAME",
        "question": "where can i eat french food in the bay area ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'bethel island' AND t2.STREET_NAME = 'bethel island rd'\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me some restaurants on bethel island rd in bethel island ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'bethel island' AND t2.STREET_NAME = 'bethel island rd'\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me a restaurant on bethel island rd in bethel island ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'bethel island' AND t2.STREET_NAME = 'bethel island rd'\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where can we find a restaurant on bethel island rd in bethel island ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'bethel island' AND t2.STREET_NAME = 'bethel island rd'\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where can we find some restaurants on bethel island rd in bethel island ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.GEOGRAPHIC`)-[]-(t3:`restaurants.LOCATION`)\nWHERE t2.REGION = 'yosemite and mono lake area' AND t1.FOOD_TYPE = 'french' AND t1.RATING > 2.5\nRETURN t3.HOUSE_NUMBER,t1.NAME",
        "question": "give me some restaurants good for french food in the yosemite and mono lake area ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.GEOGRAPHIC`)-[]-(t3:`restaurants.LOCATION`)\nWHERE t2.REGION = 'yosemite and mono lake area' AND t1.FOOD_TYPE = 'french' AND t1.RATING > 2.5\nRETURN t3.HOUSE_NUMBER,t1.NAME",
        "question": "what are some good places in the yosemite and mono lake area for french food ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.GEOGRAPHIC`)-[]-(t3:`restaurants.LOCATION`)\nWHERE t2.REGION = 'yosemite and mono lake area' AND t1.FOOD_TYPE = 'french' AND t1.RATING > 2.5\nRETURN t3.HOUSE_NUMBER,t1.NAME",
        "question": "give me a good restaurant in the yosemite and mono lake area for french food ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.GEOGRAPHIC`)-[]-(t3:`restaurants.LOCATION`)\nWHERE t2.REGION = 'yosemite and mono lake area' AND t1.FOOD_TYPE = 'french' AND t1.RATING > 2.5\nRETURN t3.HOUSE_NUMBER,t1.NAME",
        "question": "give me a good french restaurant in the yosemite and mono lake area ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.GEOGRAPHIC`)-[]-(t3:`restaurants.LOCATION`)\nWHERE t2.REGION = 'yosemite and mono lake area' AND t1.FOOD_TYPE = 'french' AND t1.RATING > 2.5\nRETURN t3.HOUSE_NUMBER,t1.NAME",
        "question": "where is a good place in the yosemite and mono lake area for french food ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.GEOGRAPHIC`)-[]-(t3:`restaurants.LOCATION`)\nWHERE t2.REGION = 'yosemite and mono lake area' AND t1.FOOD_TYPE = 'french' AND t1.RATING > 2.5\nRETURN t3.HOUSE_NUMBER,t1.NAME",
        "question": "where are some restaurants good for french food in the yosemite and mono lake area ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.GEOGRAPHIC`)-[]-(t3:`restaurants.LOCATION`)\nWHERE t2.REGION = 'yosemite and mono lake area' AND t1.FOOD_TYPE = 'french' AND t1.RATING > 2.5\nRETURN t3.HOUSE_NUMBER,t1.NAME",
        "question": "give me a good place in the yosemite and mono lake area for french food ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.GEOGRAPHIC`)-[]-(t3:`restaurants.LOCATION`)\nWHERE t2.REGION = 'yosemite and mono lake area' AND t1.FOOD_TYPE = 'french' AND t1.RATING > 2.5\nRETURN t3.HOUSE_NUMBER,t1.NAME",
        "question": "where is a good restaurant in the yosemite and mono lake area for french food ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.GEOGRAPHIC`)-[]-(t3:`restaurants.LOCATION`)\nWHERE t2.REGION = 'yosemite and mono lake area' AND t1.FOOD_TYPE = 'french' AND t1.RATING > 2.5\nRETURN t3.HOUSE_NUMBER,t1.NAME",
        "question": "what are some good restaurants in the yosemite and mono lake area for french food ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.GEOGRAPHIC`)-[]-(t3:`restaurants.LOCATION`)\nWHERE t2.REGION = 'yosemite and mono lake area' AND t1.FOOD_TYPE = 'french' AND t1.RATING > 2.5\nRETURN t3.HOUSE_NUMBER,t1.NAME",
        "question": "where is a good french restaurant in the yosemite and mono lake area ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.GEOGRAPHIC`)-[]-(t3:`restaurants.LOCATION`)\nWHERE t2.REGION = 'yosemite and mono lake area' AND t1.FOOD_TYPE = 'french' AND t1.RATING > 2.5\nRETURN t3.HOUSE_NUMBER,t1.NAME",
        "question": "where can i eat some good french food in the yosemite and mono lake area ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'mountain view' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where are some restaurants good for arabic food in mountain view ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'mountain view' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "what are some good places in mountain view for arabic food ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'mountain view' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where are some good arabic restaurants in mountain view ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'mountain view' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "show me a good arabic restaurant in mountain view ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'mountain view' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me a good arabic in mountain view ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'mountain view' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me a good arabic restaurant in mountain view ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'mountain view' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me a good place in mountain view for arabic food ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'mountain view' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where are some good arabics in mountain view ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'mountain view' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where is a restaurant in mountain view that serves good arabic food ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'mountain view' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "what are some good restaurants in mountain view for arabic food ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'mountain view' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me some restaurants good for arabic food in mountain view ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'mountain view' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where can i eat some good arabic food in mountain view ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'mountain view' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me some good places for arabic in mountain view ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'mountain view' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where is a good arabic in mountain view ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'mountain view' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me a restaurant in mountain view that serves good arabic food ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'mountain view' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me some good arabic restaurants in mountain view ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'mountain view' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where are some good places for arabic in mountain view ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'mountain view' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me some good arabics in mountain view ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'mountain view' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "give me a good restaurant in mountain view for arabic food ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'mountain view' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where is a good arabic restaurant in mountain view ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'mountain view' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "what are some good places for arabic in mountain view ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'mountain view' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where is a good restaurant in mountain view for arabic food ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'mountain view' AND t1.FOOD_TYPE = 'arabic' AND t1.RATING > 2.5\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where is a good place in mountain view for arabic food ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t1.NAME = 'jamerican cuisine'\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where can i find a jamerican cuisine in san francisco ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t1.NAME = 'jamerican cuisine'\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where is jamerican cuisine in san francisco ?",
        "answers": []
    },
    {
        "db_id": "restaurants",
        "query": "MATCH (t1:`restaurants.RESTAURANT`)-[]-(t2:`restaurants.LOCATION`)\nWHERE t2.CITY_NAME = 'san francisco' AND t1.NAME = 'jamerican cuisine'\nRETURN t2.HOUSE_NUMBER,t1.NAME",
        "question": "where is a jamerican cuisine in san francisco ?",
        "answers": []
    }
]