[
    {
        "question": "How many heads of the departments are older than 56 ?",
        "query": "MATCH (head:`department_management.head`)\nWHERE head.age > 56\nRETURN count(*)",
        "db_id": "department_management",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "List the name, born state and age of the heads of departments ordered by age.",
        "query": "MATCH (head:`department_management.head`)\nRETURN head.name,head.born_state,head.age\nORDER BY head.age",
        "db_id": "department_management",
        "answers": [
            [
                "P\u00e1draig Harrington",
                "Connecticut",
                43.0
            ],
            [
                "Stewart Cink",
                "Florida",
                50.0
            ],
            [
                "Dudley Hart",
                "California",
                52.0
            ],
            [
                "Jeff Maggert",
                "Delaware",
                53.0
            ],
            [
                "Nick Faldo",
                "California",
                56.0
            ],
            [
                "Tiger Woods",
                "Alabama",
                67.0
            ],
            [
                "Franklin Langham",
                "Connecticut",
                67.0
            ],
            [
                "Sergio Garc\u00eda",
                "California",
                68.0
            ],
            [
                "K. J. Choi",
                "Alabama",
                69.0
            ],
            [
                "Billy Mayfair",
                "California",
                69.0
            ]
        ]
    },
    {
        "question": "List the creation year, name and budget of each department.",
        "query": "MATCH (department:`department_management.department`)\nRETURN department.Creation,department.Name,department.Budget_in_Billions",
        "db_id": "department_management",
        "answers": [
            [
                "1789",
                "State",
                9.96
            ],
            [
                "1789",
                "Treasury",
                11.1
            ],
            [
                "1947",
                "Defense",
                439.3
            ],
            [
                "1870",
                "Justice",
                23.4
            ],
            [
                "1849",
                "Interior",
                10.7
            ],
            [
                "1889",
                "Agriculture",
                77.6
            ],
            [
                "1903",
                "Commerce",
                6.2
            ],
            [
                "1913",
                "Labor",
                59.7
            ],
            [
                "1953",
                "Health and Human Services",
                543.2
            ],
            [
                "1965",
                "Housing and Urban Development",
                46.2
            ],
            [
                "1966",
                "Transportation",
                58.0
            ],
            [
                "1977",
                "Energy",
                21.5
            ],
            [
                "1979",
                "Education",
                62.8
            ],
            [
                "1989",
                "Veterans Affairs",
                73.2
            ],
            [
                "2002",
                "Homeland Security",
                44.6
            ]
        ]
    },
    {
        "question": "What are the maximum and minimum budget of the departments?",
        "query": "MATCH (department:`department_management.department`)\nRETURN max(department.Budget_in_Billions),min(department.Budget_in_Billions)",
        "db_id": "department_management",
        "answers": [
            [
                543.2,
                6.2
            ]
        ]
    },
    {
        "question": "What is the average number of employees of the departments whose rank is between 10 and 15?",
        "query": "MATCH (department:`department_management.department`)\nWHERE 10<=department.Ranking<=15\nRETURN avg(department.Num_Employees)",
        "db_id": "department_management",
        "answers": [
            [
                105468.16666666667
            ]
        ]
    },
    {
        "question": "What are the names of the heads who are born outside the California state?",
        "query": "MATCH (head:`department_management.head`)\nWHERE head.born_state <> 'California'\nRETURN head.name",
        "db_id": "department_management",
        "answers": [
            [
                "Tiger Woods"
            ],
            [
                "K. J. Choi"
            ],
            [
                "Jeff Maggert"
            ],
            [
                "Stewart Cink"
            ],
            [
                "P\u00e1draig Harrington"
            ],
            [
                "Franklin Langham"
            ]
        ]
    },
    {
        "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
        "query": "MATCH (T1:`department_management.department`)-[T2:`department_management.management`]-(T3:`department_management.head`)\nWHERE T3.born_state = 'Alabama'\nRETURN DISTINCT T1.Creation",
        "db_id": "department_management",
        "answers": [
            [
                "1903"
            ]
        ]
    },
    {
        "question": "What are the names of the states where at least 3 heads were born?",
        "query": "MATCH (head:`department_management.head`)\nWITH count(*) AS count, head.born_state AS born_state\nWHERE count  >= 3\nRETURN born_state",
        "db_id": "department_management",
        "answers": [
            [
                "California"
            ]
        ]
    },
    {
        "question": "In which year were most departments established?",
        "query": "MATCH (department:`department_management.department`)\nWITH department.Creation AS Creation, count(department.Creation) AS count\nRETURN Creation\nORDER BY count DESC\nLIMIT 1",
        "db_id": "department_management",
        "answers": [
            [
                "1789"
            ]
        ]
    },
    {
        "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
        "query": "MATCH (T1:`department_management.department`)-[T2:`department_management.management`]-()\nWHERE T2.temporary_acting = 'Yes'\nRETURN T1.Name,T1.Num_Employees",
        "db_id": "department_management",
        "answers": [
            [
                "Treasury",
                115897.0
            ],
            [
                "Treasury",
                115897.0
            ],
            [
                "Homeland Security",
                208000.0
            ]
        ]
    },
    {
        "question": "How many acting statuses are there?",
        "query": "MATCH ()-[management:`department_management.management`]-()\nRETURN count(DISTINCT management.temporary_acting)",
        "db_id": "department_management",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "How many departments are led by heads who are not mentioned?",
        "query": "MATCH (department:`department_management.department`)\nWHERE NOT (department:`department_management.department`)-[:`department_management.management`]-()\nRETURN count(*)",
        "db_id": "department_management",
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "question": "What are the distinct ages of the heads who are acting?",
        "query": "MATCH ()-[T2:`department_management.management`]-(T1:`department_management.head`)\nWHERE T2.temporary_acting = 'Yes'\nRETURN DISTINCT T1.age",
        "db_id": "department_management",
        "answers": [
            [
                52.0
            ],
            [
                53.0
            ],
            [
                69.0
            ]
        ]
    },
    {
        "question": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
        "query": "MATCH ()-[T2:`department_management.management`]-(T1:`department_management.department`)\nWITH count(*) AS count, T1.Department_ID AS Department_ID, T1.Name AS Name\nWHERE count  > 1\nRETURN Department_ID,Name,count",
        "db_id": "department_management",
        "answers": [
            [
                2,
                "Treasury",
                2
            ]
        ]
    },
    {
        "question": "Which head's name has the substring 'Ha'? List the id and name.",
        "query": "MATCH (head:`department_management.head`)\nWHERE head.name =~'.*[H|h]a.*'\nRETURN head.head_ID,head.name",
        "db_id": "department_management",
        "answers": [
            [
                4,
                "Dudley Hart"
            ],
            [
                9,
                "P\u00e1draig Harrington"
            ],
            [
                10,
                "Franklin Langham"
            ]
        ]
    },
    {
        "question": "How many farms are there?",
        "query": "MATCH (farm:`farm.farm`)\nRETURN count(*)",
        "db_id": "farm",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "Count the number of farms.",
        "query": "MATCH (farm:`farm.farm`)\nRETURN count(*)",
        "db_id": "farm",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "List the total number of horses on farms in ascending order.",
        "query": "MATCH (farm:`farm.farm`)\nRETURN farm.Total_Horses\nORDER BY farm.Total_Horses ASC",
        "db_id": "farm",
        "answers": [
            [
                2546.9
            ],
            [
                2604.8
            ],
            [
                3658.9
            ],
            [
                4781.3
            ],
            [
                5056.5
            ],
            [
                5308.2
            ],
            [
                5486.9
            ],
            [
                5607.5
            ]
        ]
    },
    {
        "question": "What is the total horses record for each farm, sorted ascending?",
        "query": "MATCH (farm:`farm.farm`)\nRETURN farm.Total_Horses\nORDER BY farm.Total_Horses ASC",
        "db_id": "farm",
        "answers": [
            [
                2546.9
            ],
            [
                2604.8
            ],
            [
                3658.9
            ],
            [
                4781.3
            ],
            [
                5056.5
            ],
            [
                5308.2
            ],
            [
                5486.9
            ],
            [
                5607.5
            ]
        ]
    },
    {
        "question": "What are the hosts of competitions whose theme is not \"Aliens\"?",
        "query": "MATCH (farm_competition:`farm.farm_competition`)\nWHERE farm_competition.Theme <> 'Aliens'\nRETURN farm_competition.Hosts",
        "db_id": "farm",
        "answers": [
            [
                "Miley Cyrus Jared Leto and Karen Mok"
            ],
            [
                "Leehom Wang and Kelly Rowland"
            ],
            [
                "Alicia Keys"
            ],
            [
                "Vanness Wu and Michelle Branch"
            ],
            [
                "Shaggy and Coco Lee"
            ]
        ]
    },
    {
        "question": "Return the hosts of competitions for which the theme is not Aliens?",
        "query": "MATCH (farm_competition:`farm.farm_competition`)\nWHERE farm_competition.Theme <> 'Aliens'\nRETURN farm_competition.Hosts",
        "db_id": "farm",
        "answers": [
            [
                "Miley Cyrus Jared Leto and Karen Mok"
            ],
            [
                "Leehom Wang and Kelly Rowland"
            ],
            [
                "Alicia Keys"
            ],
            [
                "Vanness Wu and Michelle Branch"
            ],
            [
                "Shaggy and Coco Lee"
            ]
        ]
    },
    {
        "question": "What are the themes of farm competitions sorted by year in ascending order?",
        "query": "MATCH (farm_competition:`farm.farm_competition`)\nRETURN farm_competition.Theme\nORDER BY farm_competition.Year ASC",
        "db_id": "farm",
        "answers": [
            [
                "Aliens"
            ],
            [
                "MTV Cube"
            ],
            [
                "Valentine's Day"
            ],
            [
                "MTV Asia Aid"
            ],
            [
                "Codehunters"
            ],
            [
                "Carnival M is back!"
            ]
        ]
    },
    {
        "question": "Return the themes of farm competitions, sorted by year ascending.",
        "query": "MATCH (farm_competition:`farm.farm_competition`)\nRETURN farm_competition.Theme\nORDER BY farm_competition.Year ASC",
        "db_id": "farm",
        "answers": [
            [
                "Aliens"
            ],
            [
                "MTV Cube"
            ],
            [
                "Valentine's Day"
            ],
            [
                "MTV Asia Aid"
            ],
            [
                "Codehunters"
            ],
            [
                "Carnival M is back!"
            ]
        ]
    },
    {
        "question": "What are the maximum and minimum number of cows across all farms.",
        "query": "MATCH (farm:`farm.farm`)\nRETURN max(farm.Cows),min(farm.Cows)",
        "db_id": "farm",
        "answers": [
            [
                3987.0,
                2407.2
            ]
        ]
    },
    {
        "question": "Return the maximum and minimum number of cows across all farms.",
        "query": "MATCH (farm:`farm.farm`)\nRETURN max(farm.Cows),min(farm.Cows)",
        "db_id": "farm",
        "answers": [
            [
                3987.0,
                2407.2
            ]
        ]
    },
    {
        "question": "How many different statuses do cities have?",
        "query": "MATCH (city:`farm.city`)\nRETURN count(DISTINCT city.Status)",
        "db_id": "farm",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "Count the number of different statuses.",
        "query": "MATCH (city:`farm.city`)\nRETURN count(DISTINCT city.Status)",
        "db_id": "farm",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "List official names of cities in descending order of population.",
        "query": "MATCH (city:`farm.city`)\nRETURN city.Official_Name\nORDER BY city.Population DESC",
        "db_id": "farm",
        "answers": [
            [
                "Grand Falls/Grand-Sault"
            ],
            [
                "Perth-Andover"
            ],
            [
                "Plaster Rock"
            ],
            [
                "Drummond"
            ],
            [
                "Aroostook"
            ]
        ]
    },
    {
        "question": "What are the official names of cities, ordered descending by population?",
        "query": "MATCH (city:`farm.city`)\nRETURN city.Official_Name\nORDER BY city.Population DESC",
        "db_id": "farm",
        "answers": [
            [
                "Grand Falls/Grand-Sault"
            ],
            [
                "Perth-Andover"
            ],
            [
                "Plaster Rock"
            ],
            [
                "Drummond"
            ],
            [
                "Aroostook"
            ]
        ]
    },
    {
        "question": "List the official name and status of the city with the largest population.",
        "query": "MATCH (city:`farm.city`)\nRETURN city.Official_Name,city.Status\nORDER BY city.Population DESC\nLIMIT 1",
        "db_id": "farm",
        "answers": [
            [
                "Grand Falls/Grand-Sault",
                "Town"
            ]
        ]
    },
    {
        "question": "What is the official name and status of the city with the most residents?",
        "query": "MATCH (city:`farm.city`)\nRETURN city.Official_Name,city.Status\nORDER BY city.Population DESC\nLIMIT 1",
        "db_id": "farm",
        "answers": [
            [
                "Grand Falls/Grand-Sault",
                "Town"
            ]
        ]
    },
    {
        "question": "Show the years and the official names of the host cities of competitions.",
        "query": "MATCH (T1:`farm.city`)-[]-(T2:`farm.farm_competition`)\nRETURN T2.Year,T1.Official_Name",
        "db_id": "farm",
        "answers": [
            [
                2013,
                "Grand Falls/Grand-Sault"
            ],
            [
                2006,
                "Perth-Andover"
            ],
            [
                2005,
                "Plaster Rock"
            ],
            [
                2004,
                "Drummond"
            ],
            [
                2002,
                "Aroostook"
            ],
            [
                2003,
                "Aroostook"
            ]
        ]
    },
    {
        "question": "Give the years and official names of the cities of each competition.",
        "query": "MATCH (T1:`farm.city`)-[]-(T2:`farm.farm_competition`)\nRETURN T2.Year,T1.Official_Name",
        "db_id": "farm",
        "answers": [
            [
                2013,
                "Grand Falls/Grand-Sault"
            ],
            [
                2006,
                "Perth-Andover"
            ],
            [
                2005,
                "Plaster Rock"
            ],
            [
                2004,
                "Drummond"
            ],
            [
                2002,
                "Aroostook"
            ],
            [
                2003,
                "Aroostook"
            ]
        ]
    },
    {
        "question": "Show the official names of the cities that have hosted more than one competition.",
        "query": "MATCH (T1:`farm.city`)-[]-(T2:`farm.farm_competition`)\nWITH count(*) AS count, T1.Official_Name AS Official_Name\nWHERE count  > 1\nRETURN Official_Name",
        "db_id": "farm",
        "answers": [
            [
                "Aroostook"
            ]
        ]
    },
    {
        "question": "What are the official names of cities that have hosted more than one competition?",
        "query": "MATCH (T1:`farm.city`)-[]-(T2:`farm.farm_competition`)\nWITH count(*) AS count, T1.Official_Name AS Official_Name\nWHERE count  > 1\nRETURN Official_Name",
        "db_id": "farm",
        "answers": [
            [
                "Aroostook"
            ]
        ]
    },
    {
        "question": "Show the status of the city that has hosted the greatest number of competitions.",
        "query": "MATCH (T1:`farm.city`)-[]-(T2:`farm.farm_competition`)\nWITH count(T2.Host_city_ID) AS count, T1.Status AS Status\nRETURN Status\nORDER BY count DESC\nLIMIT 1",
        "db_id": "farm",
        "answers": [
            [
                "Village"
            ]
        ]
    },
    {
        "question": "What is the status of the city that has hosted the most competitions?",
        "query": "MATCH (T1:`farm.city`)-[]-(T2:`farm.farm_competition`)\nWITH count(T2.Host_city_ID) AS count, T1.Status AS Status\nRETURN Status\nORDER BY count DESC\nLIMIT 1",
        "db_id": "farm",
        "answers": [
            [
                "Village"
            ]
        ]
    },
    {
        "question": "Please show the themes of competitions with host cities having populations larger than 1000.",
        "query": "MATCH (T1:`farm.city`)-[]-(T2:`farm.farm_competition`)\nWHERE T1.Population > 1000\nRETURN T2.Theme",
        "db_id": "farm",
        "answers": [
            [
                "Carnival M is back!"
            ],
            [
                "Codehunters"
            ],
            [
                "MTV Asia Aid"
            ]
        ]
    },
    {
        "question": "What are the themes of competitions that have corresponding host cities with more than 1000 residents?",
        "query": "MATCH (T1:`farm.city`)-[]-(T2:`farm.farm_competition`)\nWHERE T1.Population > 1000\nRETURN T2.Theme",
        "db_id": "farm",
        "answers": [
            [
                "Carnival M is back!"
            ],
            [
                "Codehunters"
            ],
            [
                "MTV Asia Aid"
            ]
        ]
    },
    {
        "question": "Please show the different statuses, ordered by the number of cities that have each.",
        "query": "MATCH (city:`farm.city`)\nWITH city.Status AS Status, count(city.Status) AS count\nRETURN Status\nORDER BY count ASC",
        "db_id": "farm",
        "answers": [
            [
                "Town"
            ],
            [
                "Village"
            ]
        ]
    },
    {
        "question": "Return the different statuses of cities, ascending by frequency.",
        "query": "MATCH (city:`farm.city`)\nWITH city.Status AS Status, count(city.Status) AS count\nRETURN Status\nORDER BY count ASC",
        "db_id": "farm",
        "answers": [
            [
                "Town"
            ],
            [
                "Village"
            ]
        ]
    },
    {
        "question": "List the most common type of Status across cities.",
        "query": "MATCH (city:`farm.city`)\nWITH city.Status AS Status, count(city.Status) AS count\nRETURN Status\nORDER BY count DESC\nLIMIT 1",
        "db_id": "farm",
        "answers": [
            [
                "Village"
            ]
        ]
    },
    {
        "question": "What is the most common status across all cities?",
        "query": "MATCH (city:`farm.city`)\nWITH city.Status AS Status, count(city.Status) AS count\nRETURN Status\nORDER BY count DESC\nLIMIT 1",
        "db_id": "farm",
        "answers": [
            [
                "Village"
            ]
        ]
    },
    {
        "question": "Find the official names of cities with population bigger than 1500 or smaller than 500.",
        "query": "MATCH (city:`farm.city`)\nWHERE city.Population > 1500 OR city.Population < 500\nRETURN city.Official_Name",
        "db_id": "farm",
        "answers": [
            [
                "Grand Falls/Grand-Sault"
            ],
            [
                "Perth-Andover"
            ],
            [
                "Aroostook"
            ]
        ]
    },
    {
        "question": "What are the official names of cities that have population over 1500 or less than 500?",
        "query": "MATCH (city:`farm.city`)\nWHERE city.Population > 1500 OR city.Population < 500\nRETURN city.Official_Name",
        "db_id": "farm",
        "answers": [
            [
                "Grand Falls/Grand-Sault"
            ],
            [
                "Perth-Andover"
            ],
            [
                "Aroostook"
            ]
        ]
    },
    {
        "question": "Show the census ranking of cities whose status are not \"Village\".",
        "query": "MATCH (city:`farm.city`)\nWHERE city.Status <> 'Village'\nRETURN city.Census_Ranking",
        "db_id": "farm",
        "answers": [
            [
                "636 of 5008"
            ]
        ]
    },
    {
        "question": "What are the census rankings of cities that do not have the status \"Village\"?",
        "query": "MATCH (city:`farm.city`)\nWHERE city.Status <> 'Village'\nRETURN city.Census_Ranking",
        "db_id": "farm",
        "answers": [
            [
                "636 of 5008"
            ]
        ]
    },
    {
        "question": "what are the first name and last name of all candidates?",
        "query": "MATCH (T1:`student_assessment.Candidates`)-[]-(T2:`student_assessment.People`)\nRETURN T2.first_name,T2.last_name",
        "db_id": "student_assessment",
        "answers": [
            [
                "Shannon",
                "Senger"
            ],
            [
                "Virginie",
                "Hartmann"
            ],
            [
                "Dariana",
                "Bednar"
            ],
            [
                "Verna",
                "Grant"
            ],
            [
                "Hoyt",
                "Wintheiser"
            ],
            [
                "Mayra",
                "Hartmann"
            ],
            [
                "Lizeth",
                "Bartoletti"
            ],
            [
                "Nova",
                "Feest"
            ]
        ]
    },
    {
        "question": "What are the first and last names of all the candidates?",
        "query": "MATCH (T1:`student_assessment.Candidates`)-[]-(T2:`student_assessment.People`)\nRETURN T2.first_name,T2.last_name",
        "db_id": "student_assessment",
        "answers": [
            [
                "Shannon",
                "Senger"
            ],
            [
                "Virginie",
                "Hartmann"
            ],
            [
                "Dariana",
                "Bednar"
            ],
            [
                "Verna",
                "Grant"
            ],
            [
                "Hoyt",
                "Wintheiser"
            ],
            [
                "Mayra",
                "Hartmann"
            ],
            [
                "Lizeth",
                "Bartoletti"
            ],
            [
                "Nova",
                "Feest"
            ]
        ]
    },
    {
        "question": "Find id of the candidate who most recently accessed the course?",
        "query": "MATCH (candidate_assessments:`student_assessment.Candidate_Assessments`)\nRETURN candidate_assessments.candidate_id\nORDER BY candidate_assessments.assessment_date DESC\nLIMIT 1",
        "db_id": "student_assessment",
        "answers": [
            [
                121
            ]
        ]
    },
    {
        "question": "What is the id of the candidate who most recently accessed the course?",
        "query": "MATCH (candidate_assessments:`student_assessment.Candidate_Assessments`)\nRETURN candidate_assessments.candidate_id\nORDER BY candidate_assessments.assessment_date DESC\nLIMIT 1",
        "db_id": "student_assessment",
        "answers": [
            [
                121
            ]
        ]
    },
    {
        "question": "Find id of candidates whose assessment code is \"Pass\"?",
        "query": "MATCH (candidate_assessments:`student_assessment.Candidate_Assessments`)\nWHERE candidate_assessments.asessment_outcome_code = 'Pass'\nRETURN candidate_assessments.candidate_id",
        "db_id": "student_assessment",
        "answers": [
            [
                111
            ],
            [
                121
            ],
            [
                141
            ],
            [
                151
            ]
        ]
    },
    {
        "question": "What are the ids of the candidates that have an outcome code of Pass?",
        "query": "MATCH (candidate_assessments:`student_assessment.Candidate_Assessments`)\nWHERE candidate_assessments.asessment_outcome_code = 'Pass'\nRETURN candidate_assessments.candidate_id",
        "db_id": "student_assessment",
        "answers": [
            [
                111
            ],
            [
                121
            ],
            [
                141
            ],
            [
                151
            ]
        ]
    },
    {
        "question": "List the names of courses in alphabetical order?",
        "query": "MATCH (courses:`student_assessment.Courses`)\nRETURN courses.course_name\nORDER BY courses.course_name",
        "db_id": "student_assessment",
        "answers": [
            [
                "Art history"
            ],
            [
                "English"
            ],
            [
                "French"
            ],
            [
                "data structure"
            ],
            [
                "database"
            ],
            [
                "statistics"
            ]
        ]
    },
    {
        "question": "What are the names of the courses in alphabetical order?",
        "query": "MATCH (courses:`student_assessment.Courses`)\nRETURN courses.course_name\nORDER BY courses.course_name",
        "db_id": "student_assessment",
        "answers": [
            [
                "Art history"
            ],
            [
                "English"
            ],
            [
                "French"
            ],
            [
                "data structure"
            ],
            [
                "database"
            ],
            [
                "statistics"
            ]
        ]
    },
    {
        "question": "List the first names of people in alphabetical order?",
        "query": "MATCH (people:`student_assessment.People`)\nRETURN people.first_name\nORDER BY people.first_name",
        "db_id": "student_assessment",
        "answers": [
            [
                "Dariana"
            ],
            [
                "Hoyt"
            ],
            [
                "Lizeth"
            ],
            [
                "Mayra"
            ],
            [
                "Nova"
            ],
            [
                "Shannon"
            ],
            [
                "Verna"
            ],
            [
                "Virginie"
            ]
        ]
    },
    {
        "question": "What are the first names of the people in alphabetical order?",
        "query": "MATCH (people:`student_assessment.People`)\nRETURN people.first_name\nORDER BY people.first_name",
        "db_id": "student_assessment",
        "answers": [
            [
                "Dariana"
            ],
            [
                "Hoyt"
            ],
            [
                "Lizeth"
            ],
            [
                "Mayra"
            ],
            [
                "Nova"
            ],
            [
                "Shannon"
            ],
            [
                "Verna"
            ],
            [
                "Virginie"
            ]
        ]
    },
    {
        "question": "How many books are there?",
        "query": "MATCH (book:`book_2.book`)\nRETURN count(*)",
        "db_id": "book_2",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "List the writers of the books in ascending alphabetical order.",
        "query": "MATCH (book:`book_2.book`)\nRETURN book.Writer\nORDER BY book.Writer ASC",
        "db_id": "book_2",
        "answers": [
            [
                "Christopher Hinz"
            ],
            [
                "Christopher Hinz"
            ],
            [
                "Christopher Moeller"
            ],
            [
                "Dave Gibbons"
            ],
            [
                "Elaine Lee"
            ],
            [
                "Garth Ennis"
            ],
            [
                "Garth Ennis"
            ],
            [
                "Howard Chaykin"
            ],
            [
                "Michael Moorcock"
            ],
            [
                "Timothy Truman"
            ]
        ]
    },
    {
        "question": "List the titles of the books in ascending order of issues.",
        "query": "MATCH (book:`book_2.book`)\nRETURN book.Title\nORDER BY book.Issues ASC",
        "db_id": "book_2",
        "answers": [
            [
                "The Dome: Ground Zero"
            ],
            [
                "Bloody Mary"
            ],
            [
                "Bloody Mary : Lady Liberty"
            ],
            [
                "Dead Corps"
            ],
            [
                "Sheva's War"
            ],
            [
                "The Black Lamb"
            ],
            [
                "BrainBanx"
            ],
            [
                "Gemini Blood"
            ],
            [
                "Cyberella"
            ],
            [
                "Michael Moorcock's Multiverse"
            ]
        ]
    },
    {
        "question": "What are the titles of the books whose writer is not \"Elaine Lee\"?",
        "query": "MATCH (book:`book_2.book`)\nWHERE book.Writer <> 'Elaine Lee'\nRETURN book.Title",
        "db_id": "book_2",
        "answers": [
            [
                "The Black Lamb"
            ],
            [
                "Bloody Mary"
            ],
            [
                "Bloody Mary : Lady Liberty"
            ],
            [
                "Cyberella"
            ],
            [
                "Dead Corps"
            ],
            [
                "The Dome: Ground Zero"
            ],
            [
                "Gemini Blood"
            ],
            [
                "Michael Moorcock's Multiverse"
            ],
            [
                "Sheva's War"
            ]
        ]
    },
    {
        "question": "What are the title and issues of the books?",
        "query": "MATCH (book:`book_2.book`)\nRETURN book.Title,book.Issues",
        "db_id": "book_2",
        "answers": [
            [
                "The Black Lamb",
                6.0
            ],
            [
                "Bloody Mary",
                4.0
            ],
            [
                "Bloody Mary : Lady Liberty",
                4.0
            ],
            [
                "BrainBanx",
                6.0
            ],
            [
                "Cyberella",
                12.0
            ],
            [
                "Dead Corps",
                4.0
            ],
            [
                "The Dome: Ground Zero",
                1.0
            ],
            [
                "Gemini Blood",
                9.0
            ],
            [
                "Michael Moorcock's Multiverse",
                12.0
            ],
            [
                "Sheva's War",
                5.0
            ]
        ]
    },
    {
        "question": "What are the dates of publications in descending order of price?",
        "query": "MATCH (publication:`book_2.publication`)\nRETURN publication.Publication_Date\nORDER BY publication.Price DESC",
        "db_id": "book_2",
        "answers": [
            [
                "August 2008"
            ],
            [
                "March 2008"
            ],
            [
                "June 2006"
            ],
            [
                "October 2005"
            ],
            [
                "August 2008"
            ],
            [
                "March 2007"
            ],
            [
                "April 2007"
            ]
        ]
    },
    {
        "question": "What are the distinct publishers of publications with price higher than 5000000?",
        "query": "MATCH (publication:`book_2.publication`)\nWHERE publication.Price > 5000000\nRETURN DISTINCT publication.Publisher",
        "db_id": "book_2",
        "answers": [
            [
                "Pearson"
            ],
            [
                "Thomson Reuters"
            ]
        ]
    },
    {
        "question": "List the publisher of the publication with the highest price.",
        "query": "MATCH (publication:`book_2.publication`)\nRETURN publication.Publisher\nORDER BY publication.Price DESC\nLIMIT 1",
        "db_id": "book_2",
        "answers": [
            [
                "Pearson"
            ]
        ]
    },
    {
        "question": "Show the title and publication dates of books.",
        "query": "MATCH (T1:`book_2.book`)-[]-(T2:`book_2.publication`)\nRETURN T1.Title,T2.Publication_Date",
        "db_id": "book_2",
        "answers": [
            [
                "The Black Lamb",
                "August 2008"
            ],
            [
                "Bloody Mary : Lady Liberty",
                "March 2008"
            ],
            [
                "BrainBanx",
                "June 2006"
            ],
            [
                "Cyberella",
                "October 2005"
            ],
            [
                "The Dome: Ground Zero",
                "August 2008"
            ],
            [
                "Michael Moorcock's Multiverse",
                "March 2007"
            ],
            [
                "Sheva's War",
                "April 2007"
            ]
        ]
    },
    {
        "question": "Show writers who have published a book with price more than 4000000.",
        "query": "MATCH (T1:`book_2.book`)-[]-(T2:`book_2.publication`)\nWHERE T2.Price > 4000000\nRETURN T1.Writer",
        "db_id": "book_2",
        "answers": [
            [
                "Timothy Truman"
            ],
            [
                "Garth Ennis"
            ],
            [
                "Elaine Lee"
            ]
        ]
    },
    {
        "question": "Show the titles of books in descending order of publication price.",
        "query": "MATCH (T1:`book_2.book`)-[]-(T2:`book_2.publication`)\nRETURN T1.Title\nORDER BY T2.Price DESC",
        "db_id": "book_2",
        "answers": [
            [
                "The Black Lamb"
            ],
            [
                "Bloody Mary : Lady Liberty"
            ],
            [
                "BrainBanx"
            ],
            [
                "Cyberella"
            ],
            [
                "The Dome: Ground Zero"
            ],
            [
                "Michael Moorcock's Multiverse"
            ],
            [
                "Sheva's War"
            ]
        ]
    },
    {
        "question": "Show publishers that have more than one publication.",
        "query": "MATCH (publication:`book_2.publication`)\nWITH count(*) AS count, publication.Publisher AS Publisher\nWHERE count  > 1\nRETURN Publisher",
        "db_id": "book_2",
        "answers": [
            [
                "Pearson"
            ],
            [
                "Wiley"
            ]
        ]
    },
    {
        "question": "Show different publishers together with the number of publications they have.",
        "query": "MATCH (publication:`book_2.publication`)\nWITH publication.Publisher AS Publisher, count(publication.Publisher) AS count\nRETURN Publisher,count",
        "db_id": "book_2",
        "answers": [
            [
                "Pearson",
                2
            ],
            [
                "Thomson Reuters",
                1
            ],
            [
                "Wiley",
                2
            ],
            [
                "Springer Nature",
                1
            ],
            [
                "Bertelsmann",
                1
            ]
        ]
    },
    {
        "question": "Please show the most common publication date.",
        "query": "MATCH (publication:`book_2.publication`)\nWITH publication.Publication_Date AS Publication_Date, count(publication.Publication_Date) AS count\nRETURN Publication_Date\nORDER BY count DESC\nLIMIT 1",
        "db_id": "book_2",
        "answers": [
            [
                "August 2008"
            ]
        ]
    },
    {
        "question": "List the writers who have written more than one book.",
        "query": "MATCH (book:`book_2.book`)\nWITH count(*) AS count, book.Writer AS Writer\nWHERE count  > 1\nRETURN Writer",
        "db_id": "book_2",
        "answers": [
            [
                "Garth Ennis"
            ],
            [
                "Christopher Hinz"
            ]
        ]
    },
    {
        "question": "List the titles of books that are not published.",
        "query": "MATCH (book:`book_2.book`)\nWHERE NOT (book:`book_2.book`)-[]-(:`book_2.publication`)\nRETURN book.Title",
        "db_id": "book_2",
        "answers": [
            [
                "Bloody Mary"
            ],
            [
                "Dead Corps"
            ],
            [
                "Gemini Blood"
            ]
        ]
    },
    {
        "question": "What is the number of distinct publication dates?",
        "query": "MATCH (publication:`book_2.publication`)\nRETURN count(DISTINCT publication.Publication_Date)",
        "db_id": "book_2",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "How many distinct publication dates are there in our record?",
        "query": "MATCH (publication:`book_2.publication`)\nRETURN count(DISTINCT publication.Publication_Date)",
        "db_id": "book_2",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"",
        "query": "MATCH (publication:`book_2.publication`)\nWHERE publication.Publisher = 'Person' OR publication.Publisher = 'Wiley'\nRETURN publication.Price",
        "db_id": "book_2",
        "answers": [
            [
                4100000.0
            ],
            [
                3000000.0
            ]
        ]
    },
    {
        "question": "How many actors are there?",
        "query": "MATCH (actor:`musical.actor`)\nRETURN count(*)",
        "db_id": "musical",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "Count the number of actors.",
        "query": "MATCH (actor:`musical.actor`)\nRETURN count(*)",
        "db_id": "musical",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "List the name of actors in ascending alphabetical order.",
        "query": "MATCH (actor:`musical.actor`)\nRETURN actor.Name\nORDER BY actor.Name ASC",
        "db_id": "musical",
        "answers": [
            [
                "Alan Fletcher"
            ],
            [
                "Ian Smith"
            ],
            [
                "Jackie Woodburne"
            ],
            [
                "Kate Ritchie"
            ],
            [
                "Lynne McGranger"
            ],
            [
                "Ray Meagher"
            ],
            [
                "Ryan Moloney"
            ],
            [
                "Stefan Dennis"
            ],
            [
                "Tom Oliver"
            ]
        ]
    },
    {
        "question": "What are the names of actors, ordered alphabetically?",
        "query": "MATCH (actor:`musical.actor`)\nRETURN actor.Name\nORDER BY actor.Name ASC",
        "db_id": "musical",
        "answers": [
            [
                "Alan Fletcher"
            ],
            [
                "Ian Smith"
            ],
            [
                "Jackie Woodburne"
            ],
            [
                "Kate Ritchie"
            ],
            [
                "Lynne McGranger"
            ],
            [
                "Ray Meagher"
            ],
            [
                "Ryan Moloney"
            ],
            [
                "Stefan Dennis"
            ],
            [
                "Tom Oliver"
            ]
        ]
    },
    {
        "question": "What are the characters and duration of actors?",
        "query": "MATCH (actor:`musical.actor`)\nRETURN actor.Character,actor.Duration",
        "db_id": "musical",
        "answers": [
            [
                "Alf Stewart",
                "1988\u2014"
            ],
            [
                "Lou Carpenter",
                "1988, 1992\u2014"
            ],
            [
                "Irene Roberts",
                "1993\u2014"
            ],
            [
                "Sally Fletcher",
                "1988\u20132008, 2013"
            ],
            [
                "Karl Kennedy",
                "1994\u2014"
            ],
            [
                "Susan Kennedy",
                "1994\u2014"
            ],
            [
                "Toadfish Rebecchi",
                "1995, 1996\u2014"
            ],
            [
                "Harold Bishop",
                "1987\u20131991, 1996\u20132009, 2011"
            ],
            [
                "Paul Robinson",
                "1985\u20131992, 1993, 2004\u2014"
            ]
        ]
    },
    {
        "question": "Return the characters and durations for each actor.",
        "query": "MATCH (actor:`musical.actor`)\nRETURN actor.Character,actor.Duration",
        "db_id": "musical",
        "answers": [
            [
                "Alf Stewart",
                "1988\u2014"
            ],
            [
                "Lou Carpenter",
                "1988, 1992\u2014"
            ],
            [
                "Irene Roberts",
                "1993\u2014"
            ],
            [
                "Sally Fletcher",
                "1988\u20132008, 2013"
            ],
            [
                "Karl Kennedy",
                "1994\u2014"
            ],
            [
                "Susan Kennedy",
                "1994\u2014"
            ],
            [
                "Toadfish Rebecchi",
                "1995, 1996\u2014"
            ],
            [
                "Harold Bishop",
                "1987\u20131991, 1996\u20132009, 2011"
            ],
            [
                "Paul Robinson",
                "1985\u20131992, 1993, 2004\u2014"
            ]
        ]
    },
    {
        "question": "List the name of actors whose age is not 20.",
        "query": "MATCH (actor:`musical.actor`)\nWHERE actor.age <> 20\nRETURN actor.Name",
        "db_id": "musical",
        "answers": [
            [
                "Ray Meagher"
            ],
            [
                "Tom Oliver"
            ],
            [
                "Lynne McGranger"
            ],
            [
                "Ryan Moloney"
            ],
            [
                "Ian Smith"
            ],
            [
                "Stefan Dennis"
            ]
        ]
    },
    {
        "question": "What are the names of actors who are not 20 years old?",
        "query": "MATCH (actor:`musical.actor`)\nWHERE actor.age <> 20\nRETURN actor.Name",
        "db_id": "musical",
        "answers": [
            [
                "Ray Meagher"
            ],
            [
                "Tom Oliver"
            ],
            [
                "Lynne McGranger"
            ],
            [
                "Ryan Moloney"
            ],
            [
                "Ian Smith"
            ],
            [
                "Stefan Dennis"
            ]
        ]
    },
    {
        "question": "What are the characters of actors in descending order of age?",
        "query": "MATCH (actor:`musical.actor`)\nRETURN actor.Character\nORDER BY actor.age DESC",
        "db_id": "musical",
        "answers": [
            [
                "Alf Stewart"
            ],
            [
                "Lou Carpenter"
            ],
            [
                "Irene Roberts"
            ],
            [
                "Sally Fletcher"
            ],
            [
                "Karl Kennedy"
            ],
            [
                "Susan Kennedy"
            ],
            [
                "Toadfish Rebecchi"
            ],
            [
                "Harold Bishop"
            ],
            [
                "Paul Robinson"
            ]
        ]
    },
    {
        "question": "Return the characters for actors, ordered by age descending.",
        "query": "MATCH (actor:`musical.actor`)\nRETURN actor.Character\nORDER BY actor.age DESC",
        "db_id": "musical",
        "answers": [
            [
                "Alf Stewart"
            ],
            [
                "Lou Carpenter"
            ],
            [
                "Irene Roberts"
            ],
            [
                "Sally Fletcher"
            ],
            [
                "Karl Kennedy"
            ],
            [
                "Susan Kennedy"
            ],
            [
                "Toadfish Rebecchi"
            ],
            [
                "Harold Bishop"
            ],
            [
                "Paul Robinson"
            ]
        ]
    },
    {
        "question": "What is the duration of the oldest actor?",
        "query": "MATCH (actor:`musical.actor`)\nRETURN actor.Duration\nORDER BY actor.age DESC\nLIMIT 1",
        "db_id": "musical",
        "answers": [
            [
                "1988\u2014"
            ]
        ]
    },
    {
        "question": "Return the duration of the actor with the greatest age.",
        "query": "MATCH (actor:`musical.actor`)\nRETURN actor.Duration\nORDER BY actor.age DESC\nLIMIT 1",
        "db_id": "musical",
        "answers": [
            [
                "1988\u2014"
            ]
        ]
    },
    {
        "question": "What are the names of musicals with nominee \"Bob Fosse\"?",
        "query": "MATCH (musical:`musical.musical`)\nWHERE musical.Nominee = 'Bob Fosse'\nRETURN musical.Name",
        "db_id": "musical",
        "answers": [
            [
                "The Phantom of the Opera"
            ],
            [
                "Wicked"
            ],
            [
                "West Side Story"
            ],
            [
                "The Book of Mormon"
            ],
            [
                "Chicago"
            ]
        ]
    },
    {
        "question": "Return the names of musicals who have the nominee Bob Fosse.",
        "query": "MATCH (musical:`musical.musical`)\nWHERE musical.Nominee = 'Bob Fosse'\nRETURN musical.Name",
        "db_id": "musical",
        "answers": [
            [
                "The Phantom of the Opera"
            ],
            [
                "Wicked"
            ],
            [
                "West Side Story"
            ],
            [
                "The Book of Mormon"
            ],
            [
                "Chicago"
            ]
        ]
    },
    {
        "question": "What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?",
        "query": "MATCH (musical:`musical.musical`)\nWHERE musical.Award <> 'Tony Award'\nRETURN DISTINCT musical.Nominee",
        "db_id": "musical",
        "answers": [
            [
                "Cleavant Derricks"
            ],
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "question": "Return the different nominees of musicals that have an award that is not the Tony Award.",
        "query": "MATCH (musical:`musical.musical`)\nWHERE musical.Award <> 'Tony Award'\nRETURN DISTINCT musical.Nominee",
        "db_id": "musical",
        "answers": [
            [
                "Cleavant Derricks"
            ],
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "question": "Show names of actors and names of musicals they are in.",
        "query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nRETURN T1.Name,T2.Name",
        "db_id": "musical",
        "answers": [
            [
                "Ray Meagher",
                "The Phantom of the Opera"
            ],
            [
                "Tom Oliver",
                "The Phantom of the Opera"
            ],
            [
                "Lynne McGranger",
                "Les Mis\u00e9rables"
            ],
            [
                "Kate Ritchie",
                "Les Mis\u00e9rables"
            ],
            [
                "Alan Fletcher",
                "West Side Story"
            ],
            [
                "Jackie Woodburne",
                "The Book of Mormon"
            ],
            [
                "Ryan Moloney",
                "The Book of Mormon"
            ],
            [
                "Ian Smith",
                "The Book of Mormon"
            ],
            [
                "Stefan Dennis",
                "The Book of Mormon"
            ]
        ]
    },
    {
        "question": "What are the names of actors and the musicals that they are in?",
        "query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nRETURN T1.Name,T2.Name",
        "db_id": "musical",
        "answers": [
            [
                "Ray Meagher",
                "The Phantom of the Opera"
            ],
            [
                "Tom Oliver",
                "The Phantom of the Opera"
            ],
            [
                "Lynne McGranger",
                "Les Mis\u00e9rables"
            ],
            [
                "Kate Ritchie",
                "Les Mis\u00e9rables"
            ],
            [
                "Alan Fletcher",
                "West Side Story"
            ],
            [
                "Jackie Woodburne",
                "The Book of Mormon"
            ],
            [
                "Ryan Moloney",
                "The Book of Mormon"
            ],
            [
                "Ian Smith",
                "The Book of Mormon"
            ],
            [
                "Stefan Dennis",
                "The Book of Mormon"
            ]
        ]
    },
    {
        "question": "Show names of actors that have appeared in musical with name \"The Phantom of the Opera\".",
        "query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nWHERE T2.Name = 'The Phantom of the Opera'\nRETURN T1.Name",
        "db_id": "musical",
        "answers": [
            [
                "Tom Oliver"
            ],
            [
                "Ray Meagher"
            ]
        ]
    },
    {
        "question": "What are the names of actors who have been in the musical titled The Phantom of the Opera?",
        "query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nWHERE T2.Name = 'The Phantom of the Opera'\nRETURN T1.Name",
        "db_id": "musical",
        "answers": [
            [
                "Tom Oliver"
            ],
            [
                "Ray Meagher"
            ]
        ]
    },
    {
        "question": "Show names of actors in descending order of the year their musical is awarded.",
        "query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nRETURN T1.Name\nORDER BY T2.Year DESC",
        "db_id": "musical",
        "answers": [
            [
                "Ray Meagher"
            ],
            [
                "Tom Oliver"
            ],
            [
                "Lynne McGranger"
            ],
            [
                "Kate Ritchie"
            ],
            [
                "Alan Fletcher"
            ],
            [
                "Jackie Woodburne"
            ],
            [
                "Ryan Moloney"
            ],
            [
                "Ian Smith"
            ],
            [
                "Stefan Dennis"
            ]
        ]
    },
    {
        "question": "What are the names of actors ordered descending by the year in which their musical was awarded?",
        "query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nRETURN T1.Name\nORDER BY T2.Year DESC",
        "db_id": "musical",
        "answers": [
            [
                "Ray Meagher"
            ],
            [
                "Tom Oliver"
            ],
            [
                "Lynne McGranger"
            ],
            [
                "Kate Ritchie"
            ],
            [
                "Alan Fletcher"
            ],
            [
                "Jackie Woodburne"
            ],
            [
                "Ryan Moloney"
            ],
            [
                "Ian Smith"
            ],
            [
                "Stefan Dennis"
            ]
        ]
    },
    {
        "question": "Show names of musicals and the number of actors who have appeared in the musicals.",
        "query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nWITH T2.Name AS Name, count(T1.Musical_ID) AS count\nRETURN Name,count",
        "db_id": "musical",
        "answers": [
            [
                "The Phantom of the Opera",
                2
            ],
            [
                "Les Mis\u00e9rables",
                2
            ],
            [
                "West Side Story",
                1
            ],
            [
                "The Book of Mormon",
                4
            ]
        ]
    },
    {
        "question": "How many actors have appeared in each musical?",
        "query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nWITH T2.Name AS Name, count(T1.Musical_ID) AS count\nRETURN Name,count",
        "db_id": "musical",
        "answers": [
            [
                "The Phantom of the Opera",
                2
            ],
            [
                "Les Mis\u00e9rables",
                2
            ],
            [
                "West Side Story",
                1
            ],
            [
                "The Book of Mormon",
                4
            ]
        ]
    },
    {
        "question": "Show names of musicals which have at least three actors.",
        "query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nWITH count(*) AS count, T2.Name AS Name\nWHERE count  >= 3\nRETURN Name",
        "db_id": "musical",
        "answers": [
            [
                "The Book of Mormon"
            ]
        ]
    },
    {
        "question": "What are the names of musicals who have at 3 or more actors?",
        "query": "MATCH (T1:`musical.actor`)-[]-(T2:`musical.musical`)\nWITH count(*) AS count, T2.Name AS Name\nWHERE count  >= 3\nRETURN Name",
        "db_id": "musical",
        "answers": [
            [
                "The Book of Mormon"
            ]
        ]
    },
    {
        "question": "Show different nominees and the number of musicals they have been nominated.",
        "query": "MATCH (musical:`musical.musical`)\nWITH musical.Nominee AS Nominee, count(musical.Nominee) AS count\nRETURN Nominee,count",
        "db_id": "musical",
        "answers": [
            [
                "Bob Fosse",
                5
            ],
            [
                "Cleavant Derricks",
                2
            ]
        ]
    },
    {
        "question": "How many musicals has each nominee been nominated for?",
        "query": "MATCH (musical:`musical.musical`)\nWITH musical.Nominee AS Nominee, count(musical.Nominee) AS count\nRETURN Nominee,count",
        "db_id": "musical",
        "answers": [
            [
                "Bob Fosse",
                5
            ],
            [
                "Cleavant Derricks",
                2
            ]
        ]
    },
    {
        "question": "Please show the nominee who has been nominated the greatest number of times.",
        "query": "MATCH (musical:`musical.musical`)\nWITH musical.Nominee AS Nominee, count(musical.Nominee) AS count\nRETURN Nominee\nORDER BY count DESC\nLIMIT 1",
        "db_id": "musical",
        "answers": [
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "question": "Who is the nominee who has been nominated for the most musicals?",
        "query": "MATCH (musical:`musical.musical`)\nWITH musical.Nominee AS Nominee, count(musical.Nominee) AS count\nRETURN Nominee\nORDER BY count DESC\nLIMIT 1",
        "db_id": "musical",
        "answers": [
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "question": "List the most common result of the musicals.",
        "query": "MATCH (musical:`musical.musical`)\nWITH musical.Result AS Result, count(musical.Result) AS count\nRETURN Result\nORDER BY count DESC\nLIMIT 1",
        "db_id": "musical",
        "answers": [
            [
                "Nominated"
            ]
        ]
    },
    {
        "question": "Return the most frequent result across all musicals.",
        "query": "MATCH (musical:`musical.musical`)\nWITH musical.Result AS Result, count(musical.Result) AS count\nRETURN Result\nORDER BY count DESC\nLIMIT 1",
        "db_id": "musical",
        "answers": [
            [
                "Nominated"
            ]
        ]
    },
    {
        "question": "List the nominees that have been nominated more than two musicals.",
        "query": "MATCH (musical:`musical.musical`)\nWITH count(*) AS count, musical.Nominee AS Nominee\nWHERE count  > 2\nRETURN Nominee",
        "db_id": "musical",
        "answers": [
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "question": "Who are the nominees who have been nominated more than two times?",
        "query": "MATCH (musical:`musical.musical`)\nWITH count(*) AS count, musical.Nominee AS Nominee\nWHERE count  > 2\nRETURN Nominee",
        "db_id": "musical",
        "answers": [
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "question": "List the name of musicals that do not have actors.",
        "query": "MATCH (musical:`musical.musical`)\nWHERE NOT (musical:`musical.musical`)-[]-(:`musical.actor`)\nRETURN musical.Name",
        "db_id": "musical",
        "answers": [
            [
                "Wicked"
            ],
            [
                "Rent"
            ],
            [
                "Chicago"
            ]
        ]
    },
    {
        "question": "What are the names of musicals who have no actors?",
        "query": "MATCH (musical:`musical.musical`)\nWHERE NOT (musical:`musical.musical`)-[]-(:`musical.actor`)\nRETURN musical.Name",
        "db_id": "musical",
        "answers": [
            [
                "Wicked"
            ],
            [
                "Rent"
            ],
            [
                "Chicago"
            ]
        ]
    },
    {
        "question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".",
        "query": "MATCH (musical:`musical.musical`)\nWHERE musical.Award = 'Tony Award' OR musical.Award = 'Cleavant Derricks'\nRETURN musical.Nominee",
        "db_id": "musical",
        "answers": [
            [
                "Bob Fosse"
            ],
            [
                "Cleavant Derricks"
            ],
            [
                "Bob Fosse"
            ],
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "question": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?",
        "query": "MATCH (musical:`musical.musical`)\nWHERE musical.Award = 'Tony Award' OR musical.Award = 'Cleavant Derricks'\nRETURN musical.Nominee",
        "db_id": "musical",
        "answers": [
            [
                "Bob Fosse"
            ],
            [
                "Cleavant Derricks"
            ],
            [
                "Bob Fosse"
            ],
            [
                "Bob Fosse"
            ]
        ]
    },
    {
        "question": "Find the emails of the user named \"Mary\".",
        "query": "MATCH (user_profiles:`twitter_1.user_profiles`)\nWHERE user_profiles.name = 'Mary'\nRETURN user_profiles.email",
        "db_id": "twitter_1",
        "answers": [
            [
                "Mary@yale.edu"
            ]
        ]
    },
    {
        "question": "What is the partition id of the user named \"Iron Man\".",
        "query": "MATCH (user_profiles:`twitter_1.user_profiles`)\nWHERE user_profiles.name = 'Iron Man'\nRETURN user_profiles.partitionid",
        "db_id": "twitter_1",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "How many users are there?",
        "query": "MATCH (user_profiles:`twitter_1.user_profiles`)\nRETURN count(*)",
        "db_id": "twitter_1",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "Find the number of tweets in record.",
        "query": "MATCH (tweets:`twitter_1.tweets`)\nRETURN count(*)",
        "db_id": "twitter_1",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "Find the number of users who posted some tweets.",
        "query": "MATCH (tweets:`twitter_1.tweets`)\nRETURN count(DISTINCT tweets.uid)",
        "db_id": "twitter_1",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.",
        "query": "MATCH (user_profiles:`twitter_1.user_profiles`)\nWHERE user_profiles.name =~'.*[S|s]wift.*'\nRETURN user_profiles.name,user_profiles.email",
        "db_id": "twitter_1",
        "answers": [
            [
                "Tyler Swift",
                "ts@superstar.com\n"
            ]
        ]
    },
    {
        "question": "Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.",
        "query": "MATCH (user_profiles:`twitter_1.user_profiles`)\nWHERE user_profiles.email =~'.*[S|s]uperstar.*' OR user_profiles.email =~'.*[E|e]du.*'\nRETURN user_profiles.name",
        "db_id": "twitter_1",
        "answers": [
            [
                "Mary"
            ],
            [
                "Celine Dion"
            ],
            [
                "Natalie Portman"
            ]
        ]
    },
    {
        "question": "Find the name and email of the users who have more than 1000 followers.",
        "query": "MATCH (user_profiles:`twitter_1.user_profiles`)\nWHERE user_profiles.followers > 1000\nRETURN user_profiles.name,user_profiles.email",
        "db_id": "twitter_1",
        "answers": [
            [
                "Iron Man",
                "ts@richest.com"
            ],
            [
                "Black Widow\n",
                "bw@superhero.com"
            ],
            [
                "Tyler Swift",
                "ts@superstar.com\n"
            ],
            [
                "Celine Dion",
                "cd@superstar.com"
            ],
            [
                "Natalie Portman",
                "np@superstar.com"
            ]
        ]
    },
    {
        "question": "Find the names of users who have more than one tweet.",
        "query": "MATCH (T1:`twitter_1.user_profiles`)-[]-(T2:`twitter_1.tweets`)\nWITH T1.name AS name, count(*) AS count\nWHERE count  > 1\nRETURN name",
        "db_id": "twitter_1",
        "answers": [
            [
                "Iron Man"
            ],
            [
                "Susan"
            ],
            [
                "Celine Dion"
            ]
        ]
    },
    {
        "question": "Find the name of the user who has the largest number of followers.",
        "query": "MATCH (user_profiles:`twitter_1.user_profiles`)\nRETURN user_profiles.name\nORDER BY user_profiles.followers DESC\nLIMIT 1",
        "db_id": "twitter_1",
        "answers": [
            [
                "Tyler Swift"
            ]
        ]
    },
    {
        "question": "Find the name and email of the user followed by the least number of people.",
        "query": "MATCH (user_profiles:`twitter_1.user_profiles`)\nRETURN user_profiles.name,user_profiles.email\nORDER BY user_profiles.followers\nLIMIT 1",
        "db_id": "twitter_1",
        "answers": [
            [
                "Susan",
                "susan@gmail.com\n"
            ]
        ]
    },
    {
        "question": "List the name and number of followers for each user, and sort the results by the number of followers in descending order.",
        "query": "MATCH (user_profiles:`twitter_1.user_profiles`)\nRETURN user_profiles.name,user_profiles.followers\nORDER BY user_profiles.followers DESC",
        "db_id": "twitter_1",
        "answers": [
            [
                "Tyler Swift",
                99999998
            ],
            [
                "Natalie Portman",
                94375428
            ],
            [
                "Black Widow\n",
                35425845
            ],
            [
                "Celine Dion",
                23927492
            ],
            [
                "Iron Man",
                6662425
            ],
            [
                "Mary",
                890
            ],
            [
                "Susan",
                100
            ]
        ]
    },
    {
        "question": "List the names of 5 users followed by the largest number of other users.",
        "query": "MATCH (user_profiles:`twitter_1.user_profiles`)\nRETURN user_profiles.name\nORDER BY user_profiles.followers DESC\nLIMIT 5",
        "db_id": "twitter_1",
        "answers": [
            [
                "Tyler Swift"
            ],
            [
                "Natalie Portman"
            ],
            [
                "Black Widow\n"
            ],
            [
                "Celine Dion"
            ],
            [
                "Iron Man"
            ]
        ]
    },
    {
        "question": "Find the name of each user and number of tweets tweeted by each of them.",
        "query": "MATCH (T1:`twitter_1.user_profiles`)-[]-(T2:`twitter_1.tweets`)\nWITH T1.name AS name, count(T2.uid) AS count\nRETURN name,count",
        "db_id": "twitter_1",
        "answers": [
            [
                "Iron Man",
                2
            ],
            [
                "Black Widow\n",
                1
            ],
            [
                "Susan",
                2
            ],
            [
                "Tyler Swift",
                1
            ],
            [
                "Celine Dion",
                2
            ]
        ]
    },
    {
        "question": "Find the name and partition id for users who tweeted less than twice.",
        "query": "MATCH (T1:`twitter_1.user_profiles`)-[]-(T2:`twitter_1.tweets`)\nWITH T1.name AS name, T1.partitionid AS partitionid, count(*) AS count\nWHERE count  < 2\nRETURN name,partitionid",
        "db_id": "twitter_1",
        "answers": [
            [
                "Black Widow\n",
                23
            ],
            [
                "Tyler Swift",
                10
            ]
        ]
    },
    {
        "question": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them.",
        "query": "MATCH (T1:`twitter_1.user_profiles`)-[]-(T2:`twitter_1.tweets`)\nWITH T1.name AS name, count(*) AS count\nWHERE count  > 1\nRETURN name,count",
        "db_id": "twitter_1",
        "answers": [
            [
                "Iron Man",
                2
            ],
            [
                "Susan",
                2
            ],
            [
                "Celine Dion",
                2
            ]
        ]
    },
    {
        "question": "Find the average number of followers for the users who do not have any tweet.",
        "query": "MATCH (user_profiles:`twitter_1.user_profiles`)\nWHERE NOT (user_profiles:`twitter_1.user_profiles`)-[]-(:`twitter_1.tweets`)\nRETURN avg(user_profiles.followers)",
        "db_id": "twitter_1",
        "answers": [
            [
                47188159.0
            ]
        ]
    },
    {
        "question": "Find the names of all the catalog entries.",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nRETURN DISTINCT catalog_contents.catalog_entry_name",
        "db_id": "product_catalog",
        "answers": [
            [
                "Cola"
            ],
            [
                "Root beer"
            ],
            [
                "Cream Soda"
            ],
            [
                "Carbonated Water"
            ],
            [
                "Ginger Beer"
            ],
            [
                "Tizer"
            ],
            [
                "Vimto"
            ],
            [
                "Ramune"
            ],
            [
                "Sprite Lemo"
            ],
            [
                "Dr Pepper"
            ],
            [
                "Diet Pepsi"
            ],
            [
                "Diet Mountain Dew"
            ],
            [
                "Mountain Dew"
            ],
            [
                "Fenta Orange"
            ],
            [
                "Wanglaoji"
            ]
        ]
    },
    {
        "question": "What are all the catalog entry names?",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nRETURN DISTINCT catalog_contents.catalog_entry_name",
        "db_id": "product_catalog",
        "answers": [
            [
                "Cola"
            ],
            [
                "Root beer"
            ],
            [
                "Cream Soda"
            ],
            [
                "Carbonated Water"
            ],
            [
                "Ginger Beer"
            ],
            [
                "Tizer"
            ],
            [
                "Vimto"
            ],
            [
                "Ramune"
            ],
            [
                "Sprite Lemo"
            ],
            [
                "Dr Pepper"
            ],
            [
                "Diet Pepsi"
            ],
            [
                "Diet Mountain Dew"
            ],
            [
                "Mountain Dew"
            ],
            [
                "Fenta Orange"
            ],
            [
                "Wanglaoji"
            ]
        ]
    },
    {
        "question": "Find the list of attribute data types possessed by more than 3 attribute definitions.",
        "query": "MATCH (attribute_definitions:`product_catalog.Attribute_Definitions`)\nWITH attribute_definitions.attribute_data_type AS attribute_data_type, count(*) AS count\nWHERE count  > 3\nRETURN attribute_data_type",
        "db_id": "product_catalog",
        "answers": [
            [
                "Bool"
            ]
        ]
    },
    {
        "question": "What are the attribute data types with more than 3 attribute definitions?",
        "query": "MATCH (attribute_definitions:`product_catalog.Attribute_Definitions`)\nWITH attribute_definitions.attribute_data_type AS attribute_data_type, count(*) AS count\nWHERE count  > 3\nRETURN attribute_data_type",
        "db_id": "product_catalog",
        "answers": [
            [
                "Bool"
            ]
        ]
    },
    {
        "question": "What is the attribute data type of the attribute with name \"Green\"?",
        "query": "MATCH (attribute_definitions:`product_catalog.Attribute_Definitions`)\nWHERE attribute_definitions.attribute_name = 'Green'\nRETURN attribute_definitions.attribute_data_type",
        "db_id": "product_catalog",
        "answers": [
            [
                "Bool"
            ]
        ]
    },
    {
        "question": "Find the attribute data type for the attribute named \"Green\".",
        "query": "MATCH (attribute_definitions:`product_catalog.Attribute_Definitions`)\nWHERE attribute_definitions.attribute_name = 'Green'\nRETURN attribute_definitions.attribute_data_type",
        "db_id": "product_catalog",
        "answers": [
            [
                "Bool"
            ]
        ]
    },
    {
        "question": "Find the name and level of catalog structure with level between 5 and 10.",
        "query": "MATCH (catalog_structure:`product_catalog.Catalog_Structure`)\nWHERE 5<=catalog_structure.catalog_level_number<=10\nRETURN catalog_structure.catalog_level_name,catalog_structure.catalog_level_number",
        "db_id": "product_catalog",
        "answers": [
            [
                "Sub-Category",
                8
            ],
            [
                "Product",
                9
            ]
        ]
    },
    {
        "question": "What are the name and level of catalog structure with level number between 5 and 10",
        "query": "MATCH (catalog_structure:`product_catalog.Catalog_Structure`)\nWHERE 5<=catalog_structure.catalog_level_number<=10\nRETURN catalog_structure.catalog_level_name,catalog_structure.catalog_level_number",
        "db_id": "product_catalog",
        "answers": [
            [
                "Sub-Category",
                8
            ],
            [
                "Product",
                9
            ]
        ]
    },
    {
        "question": "What is the entry name of the most expensive catalog (in USD)?",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nRETURN catalog_contents.catalog_entry_name\nORDER BY catalog_contents.price_in_dollars DESC\nLIMIT 1",
        "db_id": "product_catalog",
        "answers": [
            [
                "Sprite Lemo"
            ]
        ]
    },
    {
        "question": "Find the entry name of the catalog with the highest price (in USD).",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nRETURN catalog_contents.catalog_entry_name\nORDER BY catalog_contents.price_in_dollars DESC\nLIMIT 1",
        "db_id": "product_catalog",
        "answers": [
            [
                "Sprite Lemo"
            ]
        ]
    },
    {
        "question": "What is the product with the highest height? Give me the catalog entry name.",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nRETURN catalog_contents.catalog_entry_name\nORDER BY catalog_contents.height DESC\nLIMIT 1",
        "db_id": "product_catalog",
        "answers": [
            [
                "Cola"
            ]
        ]
    },
    {
        "question": "Which catalog content has the highest height? Give me the catalog entry name.",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nRETURN catalog_contents.catalog_entry_name\nORDER BY catalog_contents.height DESC\nLIMIT 1",
        "db_id": "product_catalog",
        "answers": [
            [
                "Cola"
            ]
        ]
    },
    {
        "question": "Find the name of the product that has the smallest capacity.",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nRETURN catalog_contents.catalog_entry_name\nORDER BY catalog_contents.capacity ASC\nLIMIT 1",
        "db_id": "product_catalog",
        "answers": [
            [
                "Cola"
            ]
        ]
    },
    {
        "question": "Which catalog content has the smallest capacity? Return the catalog entry name.",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nRETURN catalog_contents.catalog_entry_name\nORDER BY catalog_contents.capacity ASC\nLIMIT 1",
        "db_id": "product_catalog",
        "answers": [
            [
                "Cola"
            ]
        ]
    },
    {
        "question": "Find the name and capacity of products with price greater than 700 (in USD).",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nWHERE catalog_contents.price_in_dollars > 700\nRETURN catalog_contents.catalog_entry_name,catalog_contents.capacity",
        "db_id": "product_catalog",
        "answers": [
            [
                "Vimto",
                "6"
            ],
            [
                "Sprite Lemo",
                "8"
            ],
            [
                "Dr Pepper",
                "1"
            ],
            [
                "Diet Pepsi",
                "9"
            ],
            [
                "Diet Mountain Dew",
                "8"
            ]
        ]
    },
    {
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nWHERE catalog_contents.price_in_dollars > 700\nRETURN catalog_contents.catalog_entry_name,catalog_contents.capacity",
        "db_id": "product_catalog",
        "answers": [
            [
                "Vimto",
                "6"
            ],
            [
                "Sprite Lemo",
                "8"
            ],
            [
                "Dr Pepper",
                "1"
            ],
            [
                "Diet Pepsi",
                "9"
            ],
            [
                "Diet Mountain Dew",
                "8"
            ]
        ]
    },
    {
        "question": "Find the dates on which more than one revisions were made.",
        "query": "MATCH (catalogs:`product_catalog.Catalogs`)\nWITH count(*) AS count, catalogs.date_of_latest_revision AS date_of_latest_revision\nWHERE count  > 1\nRETURN date_of_latest_revision",
        "db_id": "product_catalog",
        "answers": [
            [
                "2017-09-26 12:10:36"
            ],
            [
                "2017-10-26 01:16:51"
            ],
            [
                "2017-12-04 06:48:13"
            ],
            [
                "2017-03-30 09:15:37"
            ]
        ]
    },
    {
        "question": "On which days more than one revisions were made on catalogs.",
        "query": "MATCH (catalogs:`product_catalog.Catalogs`)\nWITH count(*) AS count, catalogs.date_of_latest_revision AS date_of_latest_revision\nWHERE count  > 1\nRETURN date_of_latest_revision",
        "db_id": "product_catalog",
        "answers": [
            [
                "2017-09-26 12:10:36"
            ],
            [
                "2017-10-26 01:16:51"
            ],
            [
                "2017-12-04 06:48:13"
            ],
            [
                "2017-03-30 09:15:37"
            ]
        ]
    },
    {
        "question": "How many products are there in the records?",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nRETURN count(*)",
        "db_id": "product_catalog",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Find the total number of catalog contents.",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nRETURN count(*)",
        "db_id": "product_catalog",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Name all the products with next entry ID greater than 8.",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nWHERE catalog_contents.next_entry_id > 8\nRETURN catalog_contents.catalog_entry_name",
        "db_id": "product_catalog",
        "answers": [
            [
                "Sprite Lemo"
            ],
            [
                "Diet Pepsi"
            ],
            [
                "Wanglaoji"
            ]
        ]
    },
    {
        "question": "What are the catalog entry names of the products with next entry ID above 8?",
        "query": "MATCH (catalog_contents:`product_catalog.Catalog_Contents`)\nWHERE catalog_contents.next_entry_id > 8\nRETURN catalog_contents.catalog_entry_name",
        "db_id": "product_catalog",
        "answers": [
            [
                "Sprite Lemo"
            ],
            [
                "Diet Pepsi"
            ],
            [
                "Wanglaoji"
            ]
        ]
    },
    {
        "question": "How many aircrafts do we have?",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nRETURN count(*)",
        "db_id": "flight_1",
        "answers": [
            [
                16
            ]
        ]
    },
    {
        "question": "How many aircrafts exist in the database?",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nRETURN count(*)",
        "db_id": "flight_1",
        "answers": [
            [
                16
            ]
        ]
    },
    {
        "question": "Show name and distance for all aircrafts.",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nRETURN aircraft.name,aircraft.distance",
        "db_id": "flight_1",
        "answers": [
            [
                "Boeing 747-400",
                8430
            ],
            [
                "Boeing 737-800",
                3383
            ],
            [
                "Airbus A340-300",
                7120
            ],
            [
                "British Aerospace Jetstream 41",
                1502
            ],
            [
                "Embraer ERJ-145",
                1530
            ],
            [
                "SAAB 340",
                2128
            ],
            [
                "Piper Archer III",
                520
            ],
            [
                "Tupolev 154",
                4103
            ],
            [
                "Schwitzer 2-33",
                30
            ],
            [
                "Lockheed L1011",
                6900
            ],
            [
                "Boeing 757-300",
                4010
            ],
            [
                "Boeing 777-300",
                6441
            ],
            [
                "Boeing 767-400ER",
                6475
            ],
            [
                "Airbus A320",
                2605
            ],
            [
                "Airbus A319",
                1805
            ],
            [
                "Boeing 727",
                1504
            ]
        ]
    },
    {
        "question": "What are the names and distances for all airplanes?",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nRETURN aircraft.name,aircraft.distance",
        "db_id": "flight_1",
        "answers": [
            [
                "Boeing 747-400",
                8430
            ],
            [
                "Boeing 737-800",
                3383
            ],
            [
                "Airbus A340-300",
                7120
            ],
            [
                "British Aerospace Jetstream 41",
                1502
            ],
            [
                "Embraer ERJ-145",
                1530
            ],
            [
                "SAAB 340",
                2128
            ],
            [
                "Piper Archer III",
                520
            ],
            [
                "Tupolev 154",
                4103
            ],
            [
                "Schwitzer 2-33",
                30
            ],
            [
                "Lockheed L1011",
                6900
            ],
            [
                "Boeing 757-300",
                4010
            ],
            [
                "Boeing 777-300",
                6441
            ],
            [
                "Boeing 767-400ER",
                6475
            ],
            [
                "Airbus A320",
                2605
            ],
            [
                "Airbus A319",
                1805
            ],
            [
                "Boeing 727",
                1504
            ]
        ]
    },
    {
        "question": "Show ids for all aircrafts with more than 1000 distance.",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nWHERE aircraft.distance > 1000\nRETURN aircraft.aid",
        "db_id": "flight_1",
        "answers": [
            [
                1
            ],
            [
                2
            ],
            [
                3
            ],
            [
                4
            ],
            [
                5
            ],
            [
                6
            ],
            [
                8
            ],
            [
                9
            ],
            [
                10
            ],
            [
                11
            ],
            [
                12
            ],
            [
                13
            ],
            [
                14
            ],
            [
                15
            ]
        ]
    },
    {
        "question": "What are the ids of all aircrafts that can cover a distance of more than 1000?",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nWHERE aircraft.distance > 1000\nRETURN aircraft.aid",
        "db_id": "flight_1",
        "answers": [
            [
                1
            ],
            [
                2
            ],
            [
                3
            ],
            [
                4
            ],
            [
                5
            ],
            [
                6
            ],
            [
                8
            ],
            [
                9
            ],
            [
                10
            ],
            [
                11
            ],
            [
                12
            ],
            [
                13
            ],
            [
                14
            ],
            [
                15
            ]
        ]
    },
    {
        "question": "How many aircrafts have distance between 1000 and 5000?",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nWHERE 1000<=aircraft.distance<=5000\nRETURN count(*)",
        "db_id": "flight_1",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "What is the count of aircrafts that have a distance between 1000 and 5000?",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nWHERE 1000<=aircraft.distance<=5000\nRETURN count(*)",
        "db_id": "flight_1",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "What is the name and distance for aircraft with id 12?",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nWHERE aircraft.aid = 12\nRETURN aircraft.name,aircraft.distance",
        "db_id": "flight_1",
        "answers": [
            [
                "Boeing 767-400ER",
                6475
            ]
        ]
    },
    {
        "question": "What is the name and distance for the aircraft that has an id of 12?",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nWHERE aircraft.aid = 12\nRETURN aircraft.name,aircraft.distance",
        "db_id": "flight_1",
        "answers": [
            [
                "Boeing 767-400ER",
                6475
            ]
        ]
    },
    {
        "question": "What is the minimum, average, and maximum distance of all aircrafts.",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nRETURN min(aircraft.distance),avg(aircraft.distance),max(aircraft.distance)",
        "db_id": "flight_1",
        "answers": [
            [
                30,
                3655.375,
                8430
            ]
        ]
    },
    {
        "question": "Return the minimum, average and maximum distances traveled across all aircrafts.",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nRETURN min(aircraft.distance),avg(aircraft.distance),max(aircraft.distance)",
        "db_id": "flight_1",
        "answers": [
            [
                30,
                3655.375,
                8430
            ]
        ]
    },
    {
        "question": "Show the id and name of the aircraft with the maximum distance.",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nRETURN aircraft.aid,aircraft.name\nORDER BY aircraft.distance DESC\nLIMIT 1",
        "db_id": "flight_1",
        "answers": [
            [
                1,
                "Boeing 747-400"
            ]
        ]
    },
    {
        "question": "What is the id and name of the aircraft that can cover the maximum distance?",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nRETURN aircraft.aid,aircraft.name\nORDER BY aircraft.distance DESC\nLIMIT 1",
        "db_id": "flight_1",
        "answers": [
            [
                1,
                "Boeing 747-400"
            ]
        ]
    },
    {
        "question": "Show the name of aircrafts with top three lowest distances.",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nRETURN aircraft.name\nORDER BY aircraft.distance\nLIMIT 3",
        "db_id": "flight_1",
        "answers": [
            [
                "Schwitzer 2-33"
            ],
            [
                "Piper Archer III"
            ],
            [
                "British Aerospace Jetstream 41"
            ]
        ]
    },
    {
        "question": "What are the aircrafts with top 3 shortest lengthes? List their names.",
        "query": "MATCH (aircraft:`flight_1.aircraft`)\nRETURN aircraft.name\nORDER BY aircraft.distance\nLIMIT 3",
        "db_id": "flight_1",
        "answers": [
            [
                "Schwitzer 2-33"
            ],
            [
                "Piper Archer III"
            ],
            [
                "British Aerospace Jetstream 41"
            ]
        ]
    },
    {
        "question": "How many employees do we have?",
        "query": "MATCH (employee:`flight_1.employee`)\nRETURN count(*)",
        "db_id": "flight_1",
        "answers": [
            [
                31
            ]
        ]
    },
    {
        "question": "What is the number of employees?",
        "query": "MATCH (employee:`flight_1.employee`)\nRETURN count(*)",
        "db_id": "flight_1",
        "answers": [
            [
                31
            ]
        ]
    },
    {
        "question": "Show name and salary for all employees sorted by salary.",
        "query": "MATCH (employee:`flight_1.employee`)\nRETURN employee.name,employee.salary\nORDER BY employee.salary",
        "db_id": "flight_1",
        "answers": [
            [
                "Milo Brooks",
                20
            ],
            [
                "Donald King",
                18050
            ],
            [
                "Richard Jackson",
                23980
            ],
            [
                "Patricia Jones",
                24450
            ],
            [
                "Linda Davis",
                27984
            ],
            [
                "Elizabeth Taylor",
                32021
            ],
            [
                "Haywood Kelly",
                32899
            ],
            [
                "Chad Stewart",
                33546
            ],
            [
                "David Anderson",
                43001
            ],
            [
                "Barbara Wilson",
                43723
            ],
            [
                "Robert Brown",
                44740
            ],
            [
                "Michael Miller",
                48090
            ],
            [
                "William Moore",
                48250
            ],
            [
                "Jennifer Thomas",
                54921
            ],
            [
                "William Ward",
                84476
            ],
            [
                "Michael Miller",
                99890
            ],
            [
                "Larry West",
                101745
            ],
            [
                "William Jones",
                105743
            ],
            [
                "Eric Cooper",
                114323
            ],
            [
                "James Smith",
                120433
            ],
            [
                "Dorthy Lewis",
                152013
            ],
            [
                "John Williams",
                153972
            ],
            [
                "Mary Johnson",
                178345
            ],
            [
                "Karen Scott",
                205187
            ],
            [
                "Mark Young",
                205187
            ],
            [
                "Lawrence Sperry",
                212156
            ],
            [
                "Angela Martinez",
                212156
            ],
            [
                "Joseph Thompson",
                212156
            ],
            [
                "Betty Adams",
                227489
            ],
            [
                "Lisa Walker",
                256481
            ],
            [
                "George Wright",
                289950
            ]
        ]
    },
    {
        "question": "What is the name and salary of all employees in order of salary?",
        "query": "MATCH (employee:`flight_1.employee`)\nRETURN employee.name,employee.salary\nORDER BY employee.salary",
        "db_id": "flight_1",
        "answers": [
            [
                "Milo Brooks",
                20
            ],
            [
                "Donald King",
                18050
            ],
            [
                "Richard Jackson",
                23980
            ],
            [
                "Patricia Jones",
                24450
            ],
            [
                "Linda Davis",
                27984
            ],
            [
                "Elizabeth Taylor",
                32021
            ],
            [
                "Haywood Kelly",
                32899
            ],
            [
                "Chad Stewart",
                33546
            ],
            [
                "David Anderson",
                43001
            ],
            [
                "Barbara Wilson",
                43723
            ],
            [
                "Robert Brown",
                44740
            ],
            [
                "Michael Miller",
                48090
            ],
            [
                "William Moore",
                48250
            ],
            [
                "Jennifer Thomas",
                54921
            ],
            [
                "William Ward",
                84476
            ],
            [
                "Michael Miller",
                99890
            ],
            [
                "Larry West",
                101745
            ],
            [
                "William Jones",
                105743
            ],
            [
                "Eric Cooper",
                114323
            ],
            [
                "James Smith",
                120433
            ],
            [
                "Dorthy Lewis",
                152013
            ],
            [
                "John Williams",
                153972
            ],
            [
                "Mary Johnson",
                178345
            ],
            [
                "Karen Scott",
                205187
            ],
            [
                "Mark Young",
                205187
            ],
            [
                "Lawrence Sperry",
                212156
            ],
            [
                "Angela Martinez",
                212156
            ],
            [
                "Joseph Thompson",
                212156
            ],
            [
                "Betty Adams",
                227489
            ],
            [
                "Lisa Walker",
                256481
            ],
            [
                "George Wright",
                289950
            ]
        ]
    },
    {
        "question": "Show ids for all employees with at least 100000 salary.",
        "query": "MATCH (employee:`flight_1.employee`)\nWHERE employee.salary > 100000\nRETURN employee.eid",
        "db_id": "flight_1",
        "answers": [
            [
                242518965
            ],
            [
                141582651
            ],
            [
                11564812
            ],
            [
                567354612
            ],
            [
                552455318
            ],
            [
                550156548
            ],
            [
                390487451
            ],
            [
                355548984
            ],
            [
                310454876
            ],
            [
                142519864
            ],
            [
                269734834
            ],
            [
                552455348
            ],
            [
                556784565
            ],
            [
                573284895
            ],
            [
                574489456
            ]
        ]
    },
    {
        "question": "What is the id of every employee who has at least a salary of  100000?",
        "query": "MATCH (employee:`flight_1.employee`)\nWHERE employee.salary > 100000\nRETURN employee.eid",
        "db_id": "flight_1",
        "answers": [
            [
                242518965
            ],
            [
                141582651
            ],
            [
                11564812
            ],
            [
                567354612
            ],
            [
                552455318
            ],
            [
                550156548
            ],
            [
                390487451
            ],
            [
                355548984
            ],
            [
                310454876
            ],
            [
                142519864
            ],
            [
                269734834
            ],
            [
                552455348
            ],
            [
                556784565
            ],
            [
                573284895
            ],
            [
                574489456
            ]
        ]
    },
    {
        "question": "How many employees have salary between 100000 and 200000?",
        "query": "MATCH (employee:`flight_1.employee`)\nWHERE 100000<=employee.salary<=200000\nRETURN count(*)",
        "db_id": "flight_1",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "What is the number of employees that have a salary between 100000 and 200000?",
        "query": "MATCH (employee:`flight_1.employee`)\nWHERE 100000<=employee.salary<=200000\nRETURN count(*)",
        "db_id": "flight_1",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "What is the name and salary for employee with id 242518965?",
        "query": "MATCH (employee:`flight_1.employee`)\nWHERE employee.eid = 242518965\nRETURN employee.name,employee.salary",
        "db_id": "flight_1",
        "answers": [
            [
                "James Smith",
                120433
            ]
        ]
    },
    {
        "question": "What is the name and salary of the employee with the id 242518965?",
        "query": "MATCH (employee:`flight_1.employee`)\nWHERE employee.eid = 242518965\nRETURN employee.name,employee.salary",
        "db_id": "flight_1",
        "answers": [
            [
                "James Smith",
                120433
            ]
        ]
    },
    {
        "question": "Show the id and name of the employee with maximum salary.",
        "query": "MATCH (employee:`flight_1.employee`)\nRETURN employee.eid,employee.name\nORDER BY employee.salary DESC\nLIMIT 1",
        "db_id": "flight_1",
        "answers": [
            [
                269734834,
                "George Wright"
            ]
        ]
    },
    {
        "question": "What is the id and name of the employee with the highest salary?",
        "query": "MATCH (employee:`flight_1.employee`)\nRETURN employee.eid,employee.name\nORDER BY employee.salary DESC\nLIMIT 1",
        "db_id": "flight_1",
        "answers": [
            [
                269734834,
                "George Wright"
            ]
        ]
    },
    {
        "question": "Show the name of employees with three lowest salaries.",
        "query": "MATCH (employee:`flight_1.employee`)\nRETURN employee.name\nORDER BY employee.salary ASC\nLIMIT 3",
        "db_id": "flight_1",
        "answers": [
            [
                "Milo Brooks"
            ],
            [
                "Donald King"
            ],
            [
                "Richard Jackson"
            ]
        ]
    },
    {
        "question": "What is the name of the 3 employees who get paid the least?",
        "query": "MATCH (employee:`flight_1.employee`)\nRETURN employee.name\nORDER BY employee.salary ASC\nLIMIT 3",
        "db_id": "flight_1",
        "answers": [
            [
                "Milo Brooks"
            ],
            [
                "Donald King"
            ],
            [
                "Richard Jackson"
            ]
        ]
    },
    {
        "question": "Show the id and salary of Mark Young.",
        "query": "MATCH (employee:`flight_1.employee`)\nWHERE employee.name = 'Mark Young'\nRETURN employee.eid,employee.salary",
        "db_id": "flight_1",
        "answers": [
            [
                556784565,
                205187
            ]
        ]
    },
    {
        "question": "What is the id and salary of the employee named Mark Young?",
        "query": "MATCH (employee:`flight_1.employee`)\nWHERE employee.name = 'Mark Young'\nRETURN employee.eid,employee.salary",
        "db_id": "flight_1",
        "answers": [
            [
                556784565,
                205187
            ]
        ]
    },
    {
        "question": "How many flights do we have?",
        "query": "MATCH (flight:`flight_1.flight`)\nRETURN count(*)",
        "db_id": "flight_1",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "What is the number of flights?",
        "query": "MATCH (flight:`flight_1.flight`)\nRETURN count(*)",
        "db_id": "flight_1",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.",
        "query": "MATCH (flight:`flight_1.flight`)\nRETURN flight.flno,flight.origin,flight.destination\nORDER BY flight.origin",
        "db_id": "flight_1",
        "answers": [
            [
                76,
                "Chicago",
                "Los Angeles"
            ],
            [
                68,
                "Chicago",
                "New York"
            ],
            [
                99,
                "Los Angeles",
                "Washington D.C."
            ],
            [
                13,
                "Los Angeles",
                "Chicago"
            ],
            [
                346,
                "Los Angeles",
                "Dallas"
            ],
            [
                387,
                "Los Angeles",
                "Boston"
            ],
            [
                7,
                "Los Angeles",
                "Sydney"
            ],
            [
                2,
                "Los Angeles",
                "Tokyo"
            ],
            [
                33,
                "Los Angeles",
                "Honolulu"
            ],
            [
                34,
                "Los Angeles",
                "Honolulu"
            ]
        ]
    },
    {
        "question": "What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?",
        "query": "MATCH (flight:`flight_1.flight`)\nRETURN flight.flno,flight.origin,flight.destination\nORDER BY flight.origin",
        "db_id": "flight_1",
        "answers": [
            [
                76,
                "Chicago",
                "Los Angeles"
            ],
            [
                68,
                "Chicago",
                "New York"
            ],
            [
                99,
                "Los Angeles",
                "Washington D.C."
            ],
            [
                13,
                "Los Angeles",
                "Chicago"
            ],
            [
                346,
                "Los Angeles",
                "Dallas"
            ],
            [
                387,
                "Los Angeles",
                "Boston"
            ],
            [
                7,
                "Los Angeles",
                "Sydney"
            ],
            [
                2,
                "Los Angeles",
                "Tokyo"
            ],
            [
                33,
                "Los Angeles",
                "Honolulu"
            ],
            [
                34,
                "Los Angeles",
                "Honolulu"
            ]
        ]
    },
    {
        "question": "Show all flight number from Los Angeles.",
        "query": "MATCH (flight:`flight_1.flight`)\nWHERE flight.origin = 'Los Angeles'\nRETURN flight.flno",
        "db_id": "flight_1",
        "answers": [
            [
                99
            ],
            [
                13
            ],
            [
                346
            ],
            [
                387
            ],
            [
                7
            ],
            [
                2
            ],
            [
                33
            ],
            [
                34
            ]
        ]
    },
    {
        "question": "What are the numbers of all flights coming from Los Angeles?",
        "query": "MATCH (flight:`flight_1.flight`)\nWHERE flight.origin = 'Los Angeles'\nRETURN flight.flno",
        "db_id": "flight_1",
        "answers": [
            [
                99
            ],
            [
                13
            ],
            [
                346
            ],
            [
                387
            ],
            [
                7
            ],
            [
                2
            ],
            [
                33
            ],
            [
                34
            ]
        ]
    },
    {
        "question": "Show origins of all flights with destination Honolulu.",
        "query": "MATCH (flight:`flight_1.flight`)\nWHERE flight.destination = 'Honolulu'\nRETURN flight.origin",
        "db_id": "flight_1",
        "answers": [
            [
                "Los Angeles"
            ],
            [
                "Los Angeles"
            ]
        ]
    },
    {
        "question": "What are the origins of all flights that are headed to Honolulu?",
        "query": "MATCH (flight:`flight_1.flight`)\nWHERE flight.destination = 'Honolulu'\nRETURN flight.origin",
        "db_id": "flight_1",
        "answers": [
            [
                "Los Angeles"
            ],
            [
                "Los Angeles"
            ]
        ]
    },
    {
        "question": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.",
        "query": "MATCH (flight:`flight_1.flight`)\nWHERE flight.origin = 'Los Angeles' AND flight.destination = 'Honolulu'\nRETURN flight.departure_date,flight.arrival_date",
        "db_id": "flight_1",
        "answers": [
            [
                "04/12/2005 09:15",
                "04/12/2005 11:15"
            ],
            [
                "04/12/2005 12:45",
                "04/12/2005 03:18"
            ]
        ]
    },
    {
        "question": "What are the departure and arrival dates of all flights from LA to Honolulu?",
        "query": "MATCH (flight:`flight_1.flight`)\nWHERE flight.origin = 'Los Angeles' AND flight.destination = 'Honolulu'\nRETURN flight.departure_date,flight.arrival_date",
        "db_id": "flight_1",
        "answers": [
            [
                "04/12/2005 09:15",
                "04/12/2005 11:15"
            ],
            [
                "04/12/2005 12:45",
                "04/12/2005 03:18"
            ]
        ]
    },
    {
        "question": "Show flight number for all flights with more than 2000 distance.",
        "query": "MATCH (flight:`flight_1.flight`)\nWHERE flight.distance > 2000\nRETURN flight.flno",
        "db_id": "flight_1",
        "answers": [
            [
                99
            ],
            [
                387
            ],
            [
                7
            ],
            [
                2
            ],
            [
                33
            ],
            [
                34
            ]
        ]
    },
    {
        "question": "What are the numbers of all flights that can cover a distance of more than 2000?",
        "query": "MATCH (flight:`flight_1.flight`)\nWHERE flight.distance > 2000\nRETURN flight.flno",
        "db_id": "flight_1",
        "answers": [
            [
                99
            ],
            [
                387
            ],
            [
                7
            ],
            [
                2
            ],
            [
                33
            ],
            [
                34
            ]
        ]
    },
    {
        "question": "What is the average price for flights from Los Angeles to Honolulu.",
        "query": "MATCH (flight:`flight_1.flight`)\nWHERE flight.origin = 'Los Angeles' AND flight.destination = 'Honolulu'\nRETURN avg(flight.price)",
        "db_id": "flight_1",
        "answers": [
            [
                400.605
            ]
        ]
    },
    {
        "question": "What is the average price for flights from LA to Honolulu?",
        "query": "MATCH (flight:`flight_1.flight`)\nWHERE flight.origin = 'Los Angeles' AND flight.destination = 'Honolulu'\nRETURN avg(flight.price)",
        "db_id": "flight_1",
        "answers": [
            [
                400.605
            ]
        ]
    },
    {
        "question": "Show origin and destination for flights with price higher than 300.",
        "query": "MATCH (flight:`flight_1.flight`)\nWHERE flight.price > 300\nRETURN flight.origin,flight.destination",
        "db_id": "flight_1",
        "answers": [
            [
                "Los Angeles",
                "Tokyo"
            ],
            [
                "Los Angeles",
                "Honolulu"
            ],
            [
                "Los Angeles",
                "Honolulu"
            ]
        ]
    },
    {
        "question": "What is the origin and destination for all flights whose price is higher than 300?",
        "query": "MATCH (flight:`flight_1.flight`)\nWHERE flight.price > 300\nRETURN flight.origin,flight.destination",
        "db_id": "flight_1",
        "answers": [
            [
                "Los Angeles",
                "Tokyo"
            ],
            [
                "Los Angeles",
                "Honolulu"
            ],
            [
                "Los Angeles",
                "Honolulu"
            ]
        ]
    },
    {
        "question": "Show the flight number and distance of the flight with maximum price.",
        "query": "MATCH (flight:`flight_1.flight`)\nRETURN flight.flno,flight.distance\nORDER BY flight.price DESC\nLIMIT 1",
        "db_id": "flight_1",
        "answers": [
            [
                2,
                5478
            ]
        ]
    },
    {
        "question": "What is the flight number and its distance for the one with the maximum price?",
        "query": "MATCH (flight:`flight_1.flight`)\nRETURN flight.flno,flight.distance\nORDER BY flight.price DESC\nLIMIT 1",
        "db_id": "flight_1",
        "answers": [
            [
                2,
                5478
            ]
        ]
    },
    {
        "question": "Show the flight number of flights with three lowest distances.",
        "query": "MATCH (flight:`flight_1.flight`)\nRETURN flight.flno\nORDER BY flight.distance ASC\nLIMIT 3",
        "db_id": "flight_1",
        "answers": [
            [
                68
            ],
            [
                346
            ],
            [
                13
            ]
        ]
    },
    {
        "question": "What are the numbers of the shortest flights?",
        "query": "MATCH (flight:`flight_1.flight`)\nRETURN flight.flno\nORDER BY flight.distance ASC\nLIMIT 3",
        "db_id": "flight_1",
        "answers": [
            [
                68
            ],
            [
                346
            ],
            [
                13
            ]
        ]
    },
    {
        "question": "Show all origins and the number of flights from each origin.",
        "query": "MATCH (flight:`flight_1.flight`)\nWITH flight.origin AS origin, count(flight.origin) AS count\nRETURN origin,count",
        "db_id": "flight_1",
        "answers": [
            [
                "Los Angeles",
                8
            ],
            [
                "Chicago",
                2
            ]
        ]
    },
    {
        "question": "For each origin, how many flights came from there?",
        "query": "MATCH (flight:`flight_1.flight`)\nWITH flight.origin AS origin, count(flight.origin) AS count\nRETURN origin,count",
        "db_id": "flight_1",
        "answers": [
            [
                "Los Angeles",
                8
            ],
            [
                "Chicago",
                2
            ]
        ]
    },
    {
        "question": "Show all destinations and the number of flights to each destination.",
        "query": "MATCH (flight:`flight_1.flight`)\nWITH count(flight.destination) AS count, flight.destination AS destination\nRETURN destination,count",
        "db_id": "flight_1",
        "answers": [
            [
                "Washington D.C.",
                1
            ],
            [
                "Chicago",
                1
            ],
            [
                "Dallas",
                1
            ],
            [
                "Boston",
                1
            ],
            [
                "Sydney",
                1
            ],
            [
                "Tokyo",
                1
            ],
            [
                "Honolulu",
                2
            ],
            [
                "Los Angeles",
                1
            ],
            [
                "New York",
                1
            ]
        ]
    },
    {
        "question": "What are the destinations and number of flights to each one?",
        "query": "MATCH (flight:`flight_1.flight`)\nWITH count(flight.destination) AS count, flight.destination AS destination\nRETURN destination,count",
        "db_id": "flight_1",
        "answers": [
            [
                "Washington D.C.",
                1
            ],
            [
                "Chicago",
                1
            ],
            [
                "Dallas",
                1
            ],
            [
                "Boston",
                1
            ],
            [
                "Sydney",
                1
            ],
            [
                "Tokyo",
                1
            ],
            [
                "Honolulu",
                2
            ],
            [
                "Los Angeles",
                1
            ],
            [
                "New York",
                1
            ]
        ]
    },
    {
        "question": "Which origin has most number of flights?",
        "query": "MATCH (flight:`flight_1.flight`)\nWITH flight.origin AS origin, count(flight.origin) AS count\nRETURN origin\nORDER BY count DESC\nLIMIT 1",
        "db_id": "flight_1",
        "answers": [
            [
                "Los Angeles"
            ]
        ]
    },
    {
        "question": "What place has the most flights coming from there?",
        "query": "MATCH (flight:`flight_1.flight`)\nWITH flight.origin AS origin, count(flight.origin) AS count\nRETURN origin\nORDER BY count DESC\nLIMIT 1",
        "db_id": "flight_1",
        "answers": [
            [
                "Los Angeles"
            ]
        ]
    },
    {
        "question": "What is the aircraft name for the flight with number 99",
        "query": "MATCH (T1:`flight_1.flight`)-[]-(T2:`flight_1.aircraft`)\nWHERE T1.flno = 99\nRETURN T2.name",
        "db_id": "flight_1",
        "answers": [
            [
                "Boeing 747-400"
            ]
        ]
    },
    {
        "question": "What is the name of the aircraft that was on flight number 99?",
        "query": "MATCH (T1:`flight_1.flight`)-[]-(T2:`flight_1.aircraft`)\nWHERE T1.flno = 99\nRETURN T2.name",
        "db_id": "flight_1",
        "answers": [
            [
                "Boeing 747-400"
            ]
        ]
    },
    {
        "question": "Show all flight numbers with aircraft Airbus A340-300.",
        "query": "MATCH (T1:`flight_1.flight`)-[]-(T2:`flight_1.aircraft`)\nWHERE T2.name = \"Airbus A340-300\"\nRETURN T1.flno",
        "db_id": "flight_1",
        "answers": [
            [
                7
            ],
            [
                13
            ]
        ]
    },
    {
        "question": "What are the flight numbers for the aircraft Airbus A340-300?",
        "query": "MATCH (T1:`flight_1.flight`)-[]-(T2:`flight_1.aircraft`)\nWHERE T2.name = \"Airbus A340-300\"\nRETURN T1.flno",
        "db_id": "flight_1",
        "answers": [
            [
                7
            ],
            [
                13
            ]
        ]
    },
    {
        "question": "Show aircraft names and number of flights for each aircraft.",
        "query": "MATCH (T1:`flight_1.flight`)-[]-(T2:`flight_1.aircraft`)\nWITH T2.name AS name, count(T1.aid) AS count\nRETURN name,count",
        "db_id": "flight_1",
        "answers": [
            [
                "Boeing 747-400",
                1
            ],
            [
                "Airbus A340-300",
                2
            ],
            [
                "Boeing 737-800",
                1
            ],
            [
                "SAAB 340",
                1
            ],
            [
                "Lockheed L1011",
                2
            ],
            [
                "Piper Archer III",
                1
            ],
            [
                "Embraer ERJ-145",
                1
            ],
            [
                "Boeing 757-300",
                1
            ]
        ]
    },
    {
        "question": "What is the name of each aircraft and how many flights does each one complete?",
        "query": "MATCH (T1:`flight_1.flight`)-[]-(T2:`flight_1.aircraft`)\nWITH T2.name AS name, count(T1.aid) AS count\nRETURN name,count",
        "db_id": "flight_1",
        "answers": [
            [
                "Boeing 747-400",
                1
            ],
            [
                "Airbus A340-300",
                2
            ],
            [
                "Boeing 737-800",
                1
            ],
            [
                "SAAB 340",
                1
            ],
            [
                "Lockheed L1011",
                2
            ],
            [
                "Piper Archer III",
                1
            ],
            [
                "Embraer ERJ-145",
                1
            ],
            [
                "Boeing 757-300",
                1
            ]
        ]
    },
    {
        "question": "Show names for all aircraft with at least two flights.",
        "query": "MATCH (T1:`flight_1.flight`)-[]-(T2:`flight_1.aircraft`)\nWITH count(*) AS count, T2.name AS name\nWHERE count  >= 2\nRETURN name",
        "db_id": "flight_1",
        "answers": [
            [
                "Airbus A340-300"
            ],
            [
                "Lockheed L1011"
            ]
        ]
    },
    {
        "question": "What are the names for all aircrafts with at least 2 flights?",
        "query": "MATCH (T1:`flight_1.flight`)-[]-(T2:`flight_1.aircraft`)\nWITH count(*) AS count, T2.name AS name\nWHERE count  >= 2\nRETURN name",
        "db_id": "flight_1",
        "answers": [
            [
                "Airbus A340-300"
            ],
            [
                "Lockheed L1011"
            ]
        ]
    },
    {
        "question": "Show names for all aircrafts of which John Williams has certificates.",
        "query": "MATCH (T1:`flight_1.employee`)-[T2:`flight_1.certificate`]-(T3:`flight_1.aircraft`)\nWHERE T1.name = 'John Williams'\nRETURN T3.name",
        "db_id": "flight_1",
        "answers": [
            [
                "Boeing 757-300"
            ],
            [
                "Boeing 737-800"
            ]
        ]
    },
    {
        "question": "What are the names of all aircrafts that John Williams have certificates to be able to fly?",
        "query": "MATCH (T1:`flight_1.employee`)-[T2:`flight_1.certificate`]-(T3:`flight_1.aircraft`)\nWHERE T1.name = 'John Williams'\nRETURN T3.name",
        "db_id": "flight_1",
        "answers": [
            [
                "Boeing 757-300"
            ],
            [
                "Boeing 737-800"
            ]
        ]
    },
    {
        "question": "Show names for all employees who have certificate of Boeing 737-800.",
        "query": "MATCH (T1:`flight_1.employee`)-[T2:`flight_1.certificate`]-(T3:`flight_1.aircraft`)\nWHERE T3.name = \"Boeing 737-800\"\nRETURN T1.name",
        "db_id": "flight_1",
        "answers": [
            [
                "Mark Young"
            ],
            [
                "Lisa Walker"
            ],
            [
                "George Wright"
            ],
            [
                "Mary Johnson"
            ],
            [
                "Larry West"
            ],
            [
                "John Williams"
            ],
            [
                "James Smith"
            ],
            [
                "Betty Adams"
            ]
        ]
    },
    {
        "question": "What are the names of all employees who have a certificate to fly Boeing 737-800?",
        "query": "MATCH (T1:`flight_1.employee`)-[T2:`flight_1.certificate`]-(T3:`flight_1.aircraft`)\nWHERE T3.name = \"Boeing 737-800\"\nRETURN T1.name",
        "db_id": "flight_1",
        "answers": [
            [
                "Mark Young"
            ],
            [
                "Lisa Walker"
            ],
            [
                "George Wright"
            ],
            [
                "Mary Johnson"
            ],
            [
                "Larry West"
            ],
            [
                "John Williams"
            ],
            [
                "James Smith"
            ],
            [
                "Betty Adams"
            ]
        ]
    },
    {
        "question": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.",
        "query": "MATCH ()-[T1:`flight_1.certificate`]-(T2:`flight_1.aircraft`)\nWHERE T2.distance > 5000\nWITH T2.name AS name, count(T1.aid) AS count\nRETURN name\nORDER BY count",
        "db_id": "flight_1",
        "answers": [
            [
                "Boeing 747-400"
            ],
            [
                "Airbus A340-300"
            ],
            [
                "Lockheed L1011"
            ],
            [
                "Boeing 777-300"
            ],
            [
                "Boeing 767-400ER"
            ]
        ]
    },
    {
        "question": "What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?",
        "query": "MATCH ()-[T1:`flight_1.certificate`]-(T2:`flight_1.aircraft`)\nWHERE T2.distance > 5000\nWITH T2.name AS name, count(T1.aid) AS count\nRETURN name\nORDER BY count",
        "db_id": "flight_1",
        "answers": [
            [
                "Boeing 747-400"
            ],
            [
                "Airbus A340-300"
            ],
            [
                "Lockheed L1011"
            ],
            [
                "Boeing 777-300"
            ],
            [
                "Boeing 767-400ER"
            ]
        ]
    },
    {
        "question": "what is the salary and name of the employee who has the most number of aircraft certificates?",
        "query": "MATCH (T1:`flight_1.employee`)-[T2:`flight_1.certificate`]-()\nWITH T1.name AS name, count(T1.eid) AS count, T1.salary AS salary\nRETURN name,salary\nORDER BY count DESC\nLIMIT 1",
        "db_id": "flight_1",
        "answers": [
            [
                "George Wright",
                289950
            ]
        ]
    },
    {
        "question": "What is the salaray and name of the employee that is certified to fly the most planes?",
        "query": "MATCH (T1:`flight_1.employee`)-[T2:`flight_1.certificate`]-()\nWITH T1.name AS name, count(T1.eid) AS count, T1.salary AS salary\nRETURN name,salary\nORDER BY count DESC\nLIMIT 1",
        "db_id": "flight_1",
        "answers": [
            [
                "George Wright",
                289950
            ]
        ]
    },
    {
        "question": "What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?",
        "query": "MATCH (T1:`flight_1.employee`)-[T2:`flight_1.certificate`]-(T3:`flight_1.aircraft`)\nWHERE T3.distance > 5000\nWITH T1.name AS name, count(T1.eid) AS count\nRETURN name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "flight_1",
        "answers": [
            [
                "Lisa Walker"
            ]
        ]
    },
    {
        "question": "What is the salaray and name of the employee with the most certificates to fly planes more than 5000?",
        "query": "MATCH (T1:`flight_1.employee`)-[T2:`flight_1.certificate`]-(T3:`flight_1.aircraft`)\nWHERE T3.distance > 5000\nWITH T1.name AS name, count(T1.eid) AS count\nRETURN name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "flight_1",
        "answers": [
            [
                "Lisa Walker"
            ]
        ]
    },
    {
        "question": "How many allergies are there?",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nRETURN count(DISTINCT allergy_type.Allergy)",
        "db_id": "allergy_1",
        "answers": [
            [
                14
            ]
        ]
    },
    {
        "question": "How many allergy entries are there?",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nRETURN count(DISTINCT allergy_type.Allergy)",
        "db_id": "allergy_1",
        "answers": [
            [
                14
            ]
        ]
    },
    {
        "question": "How many different allergy types exist?",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nRETURN count(DISTINCT allergy_type.AllergyType)",
        "db_id": "allergy_1",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "How many distinct allergies are there?",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nRETURN count(DISTINCT allergy_type.AllergyType)",
        "db_id": "allergy_1",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Show all allergy types.",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nRETURN DISTINCT allergy_type.AllergyType",
        "db_id": "allergy_1",
        "answers": [
            [
                "food"
            ],
            [
                "environmental"
            ],
            [
                "animal"
            ]
        ]
    },
    {
        "question": "What are the different allergy types?",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nRETURN DISTINCT allergy_type.AllergyType",
        "db_id": "allergy_1",
        "answers": [
            [
                "food"
            ],
            [
                "environmental"
            ],
            [
                "animal"
            ]
        ]
    },
    {
        "question": "Show all allergies and their types.",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nRETURN allergy_type.Allergy,allergy_type.AllergyType",
        "db_id": "allergy_1",
        "answers": [
            [
                "Eggs",
                "food"
            ],
            [
                "Nuts",
                "food"
            ],
            [
                "Milk",
                "food"
            ],
            [
                "Shellfish",
                "food"
            ],
            [
                "Anchovies",
                "food"
            ],
            [
                "Wheat",
                "food"
            ],
            [
                "Soy",
                "food"
            ],
            [
                "Ragweed",
                "environmental"
            ],
            [
                "Tree Pollen",
                "environmental"
            ],
            [
                "Grass Pollen",
                "environmental"
            ],
            [
                "Cat",
                "animal"
            ],
            [
                "Dog",
                "animal"
            ],
            [
                "Rodent",
                "animal"
            ],
            [
                "Bee Stings",
                "animal"
            ]
        ]
    },
    {
        "question": "What are the allergies and their types?",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nRETURN allergy_type.Allergy,allergy_type.AllergyType",
        "db_id": "allergy_1",
        "answers": [
            [
                "Eggs",
                "food"
            ],
            [
                "Nuts",
                "food"
            ],
            [
                "Milk",
                "food"
            ],
            [
                "Shellfish",
                "food"
            ],
            [
                "Anchovies",
                "food"
            ],
            [
                "Wheat",
                "food"
            ],
            [
                "Soy",
                "food"
            ],
            [
                "Ragweed",
                "environmental"
            ],
            [
                "Tree Pollen",
                "environmental"
            ],
            [
                "Grass Pollen",
                "environmental"
            ],
            [
                "Cat",
                "animal"
            ],
            [
                "Dog",
                "animal"
            ],
            [
                "Rodent",
                "animal"
            ],
            [
                "Bee Stings",
                "animal"
            ]
        ]
    },
    {
        "question": "Show all allergies with type food.",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nWHERE allergy_type.AllergyType = 'food'\nRETURN DISTINCT allergy_type.Allergy",
        "db_id": "allergy_1",
        "answers": [
            [
                "Eggs"
            ],
            [
                "Nuts"
            ],
            [
                "Milk"
            ],
            [
                "Shellfish"
            ],
            [
                "Anchovies"
            ],
            [
                "Wheat"
            ],
            [
                "Soy"
            ]
        ]
    },
    {
        "question": "What are all the different food allergies?",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nWHERE allergy_type.AllergyType = 'food'\nRETURN DISTINCT allergy_type.Allergy",
        "db_id": "allergy_1",
        "answers": [
            [
                "Eggs"
            ],
            [
                "Nuts"
            ],
            [
                "Milk"
            ],
            [
                "Shellfish"
            ],
            [
                "Anchovies"
            ],
            [
                "Wheat"
            ],
            [
                "Soy"
            ]
        ]
    },
    {
        "question": "What is the type of allergy Cat?",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nWHERE allergy_type.Allergy = 'Cat'\nRETURN allergy_type.AllergyType",
        "db_id": "allergy_1",
        "answers": [
            [
                "animal"
            ]
        ]
    },
    {
        "question": "What is allergy type of a cat allergy?",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nWHERE allergy_type.Allergy = 'Cat'\nRETURN allergy_type.AllergyType",
        "db_id": "allergy_1",
        "answers": [
            [
                "animal"
            ]
        ]
    },
    {
        "question": "How many allergies have type animal?",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nWHERE allergy_type.AllergyType = 'animal'\nRETURN count(*)",
        "db_id": "allergy_1",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "How many animal type allergies exist?",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nWHERE allergy_type.AllergyType = 'animal'\nRETURN count(*)",
        "db_id": "allergy_1",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "Show all allergy types and the number of allergies in each type.",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nWITH allergy_type.AllergyType AS AllergyType, count(allergy_type.AllergyType) AS count\nRETURN AllergyType,count",
        "db_id": "allergy_1",
        "answers": [
            [
                "food",
                7
            ],
            [
                "environmental",
                3
            ],
            [
                "animal",
                4
            ]
        ]
    },
    {
        "question": "What are the allergy types and how many allergies correspond to each one?",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nWITH allergy_type.AllergyType AS AllergyType, count(allergy_type.AllergyType) AS count\nRETURN AllergyType,count",
        "db_id": "allergy_1",
        "answers": [
            [
                "food",
                7
            ],
            [
                "environmental",
                3
            ],
            [
                "animal",
                4
            ]
        ]
    },
    {
        "question": "Which allergy type has most number of allergies?",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nWITH allergy_type.AllergyType AS AllergyType, count(allergy_type.AllergyType) AS count\nRETURN AllergyType\nORDER BY count DESC\nLIMIT 1",
        "db_id": "allergy_1",
        "answers": [
            [
                "food"
            ]
        ]
    },
    {
        "question": "Which allergy type is most common?",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nWITH allergy_type.AllergyType AS AllergyType, count(allergy_type.AllergyType) AS count\nRETURN AllergyType\nORDER BY count DESC\nLIMIT 1",
        "db_id": "allergy_1",
        "answers": [
            [
                "food"
            ]
        ]
    },
    {
        "question": "Which allergy type has least number of allergies?",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nWITH allergy_type.AllergyType AS AllergyType, count(allergy_type.AllergyType) AS count\nRETURN AllergyType\nORDER BY count ASC\nLIMIT 1",
        "db_id": "allergy_1",
        "answers": [
            [
                "environmental"
            ]
        ]
    },
    {
        "question": "Which allergy type is the least common?",
        "query": "MATCH (allergy_type:`allergy_1.Allergy_Type`)\nWITH allergy_type.AllergyType AS AllergyType, count(allergy_type.AllergyType) AS count\nRETURN AllergyType\nORDER BY count ASC\nLIMIT 1",
        "db_id": "allergy_1",
        "answers": [
            [
                "environmental"
            ]
        ]
    },
    {
        "question": "How many students are there?",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN count(*)",
        "db_id": "allergy_1",
        "answers": [
            [
                34
            ]
        ]
    },
    {
        "question": "What is the total number of students?",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN count(*)",
        "db_id": "allergy_1",
        "answers": [
            [
                34
            ]
        ]
    },
    {
        "question": "Show first name and last name for all students.",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN student.Fname,student.LName",
        "db_id": "allergy_1",
        "answers": [
            [
                "Linda",
                "Smith"
            ],
            [
                "Tracy",
                "Kim"
            ],
            [
                "Shiela",
                "Jones"
            ],
            [
                "Dinesh",
                "Kumar"
            ],
            [
                "Paul",
                "Gompers"
            ],
            [
                "Andy",
                "Schultz"
            ],
            [
                "Lisa",
                "Apap"
            ],
            [
                "Jandy",
                "Nelson"
            ],
            [
                "Eric",
                "Tai"
            ],
            [
                "Derek",
                "Lee"
            ],
            [
                "David",
                "Adams"
            ],
            [
                "Steven",
                "Davis"
            ],
            [
                "Charles",
                "Norris"
            ],
            [
                "Susan",
                "Lee"
            ],
            [
                "Mark",
                "Schwartz"
            ],
            [
                "Bruce",
                "Wilson"
            ],
            [
                "Michael",
                "Leighton"
            ],
            [
                "Arthur",
                "Pang"
            ],
            [
                "Ian",
                "Thornton"
            ],
            [
                "George",
                "Andreou"
            ],
            [
                "Michael",
                "Woods"
            ],
            [
                "David",
                "Shieber"
            ],
            [
                "Stacy",
                "Prater"
            ],
            [
                "Mark",
                "Goldman"
            ],
            [
                "Eric",
                "Pang"
            ],
            [
                "Paul",
                "Brody"
            ],
            [
                "Eric",
                "Rugh"
            ],
            [
                "Jun",
                "Han"
            ],
            [
                "Lisa",
                "Cheng"
            ],
            [
                "Sarah",
                "Smith"
            ],
            [
                "Eric",
                "Brown"
            ],
            [
                "William",
                "Simms"
            ],
            [
                "Eric",
                "Epp"
            ],
            [
                "Sarah",
                "Schmidt"
            ]
        ]
    },
    {
        "question": "What are the full names of all students",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN student.Fname,student.LName",
        "db_id": "allergy_1",
        "answers": [
            [
                "Linda",
                "Smith"
            ],
            [
                "Tracy",
                "Kim"
            ],
            [
                "Shiela",
                "Jones"
            ],
            [
                "Dinesh",
                "Kumar"
            ],
            [
                "Paul",
                "Gompers"
            ],
            [
                "Andy",
                "Schultz"
            ],
            [
                "Lisa",
                "Apap"
            ],
            [
                "Jandy",
                "Nelson"
            ],
            [
                "Eric",
                "Tai"
            ],
            [
                "Derek",
                "Lee"
            ],
            [
                "David",
                "Adams"
            ],
            [
                "Steven",
                "Davis"
            ],
            [
                "Charles",
                "Norris"
            ],
            [
                "Susan",
                "Lee"
            ],
            [
                "Mark",
                "Schwartz"
            ],
            [
                "Bruce",
                "Wilson"
            ],
            [
                "Michael",
                "Leighton"
            ],
            [
                "Arthur",
                "Pang"
            ],
            [
                "Ian",
                "Thornton"
            ],
            [
                "George",
                "Andreou"
            ],
            [
                "Michael",
                "Woods"
            ],
            [
                "David",
                "Shieber"
            ],
            [
                "Stacy",
                "Prater"
            ],
            [
                "Mark",
                "Goldman"
            ],
            [
                "Eric",
                "Pang"
            ],
            [
                "Paul",
                "Brody"
            ],
            [
                "Eric",
                "Rugh"
            ],
            [
                "Jun",
                "Han"
            ],
            [
                "Lisa",
                "Cheng"
            ],
            [
                "Sarah",
                "Smith"
            ],
            [
                "Eric",
                "Brown"
            ],
            [
                "William",
                "Simms"
            ],
            [
                "Eric",
                "Epp"
            ],
            [
                "Sarah",
                "Schmidt"
            ]
        ]
    },
    {
        "question": "How many different advisors are listed?",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN count(DISTINCT student.Advisor)",
        "db_id": "allergy_1",
        "answers": [
            [
                18
            ]
        ]
    },
    {
        "question": "How many advisors are there?",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN count(DISTINCT student.Advisor)",
        "db_id": "allergy_1",
        "answers": [
            [
                18
            ]
        ]
    },
    {
        "question": "Show all majors.",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN DISTINCT student.Major",
        "db_id": "allergy_1",
        "answers": [
            [
                600
            ],
            [
                520
            ],
            [
                540
            ],
            [
                550
            ],
            [
                100
            ],
            [
                50
            ]
        ]
    },
    {
        "question": "What are the different majors?",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN DISTINCT student.Major",
        "db_id": "allergy_1",
        "answers": [
            [
                600
            ],
            [
                520
            ],
            [
                540
            ],
            [
                550
            ],
            [
                100
            ],
            [
                50
            ]
        ]
    },
    {
        "question": "Show all cities where students live.",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN DISTINCT student.city_code",
        "db_id": "allergy_1",
        "answers": [
            [
                "BAL"
            ],
            [
                "HKG"
            ],
            [
                "WAS"
            ],
            [
                "CHI"
            ],
            [
                "YYZ"
            ],
            [
                "PIT"
            ],
            [
                "HOU"
            ],
            [
                "PHL"
            ],
            [
                "DAL"
            ],
            [
                "DET"
            ],
            [
                "LON"
            ],
            [
                "NYC"
            ],
            [
                "LOS"
            ],
            [
                "ROC"
            ],
            [
                "PEK"
            ],
            [
                "SFO"
            ],
            [
                "ATL"
            ],
            [
                "NAR"
            ],
            [
                "BOS"
            ]
        ]
    },
    {
        "question": "What cities do students live in?",
        "query": "MATCH (student:`allergy_1.Student`)\nRETURN DISTINCT student.city_code",
        "db_id": "allergy_1",
        "answers": [
            [
                "BAL"
            ],
            [
                "HKG"
            ],
            [
                "WAS"
            ],
            [
                "CHI"
            ],
            [
                "YYZ"
            ],
            [
                "PIT"
            ],
            [
                "HOU"
            ],
            [
                "PHL"
            ],
            [
                "DAL"
            ],
            [
                "DET"
            ],
            [
                "LON"
            ],
            [
                "NYC"
            ],
            [
                "LOS"
            ],
            [
                "ROC"
            ],
            [
                "PEK"
            ],
            [
                "SFO"
            ],
            [
                "ATL"
            ],
            [
                "NAR"
            ],
            [
                "BOS"
            ]
        ]
    },
    {
        "question": "Show first name, last name, age for all female students. Their sex is F.",
        "query": "MATCH (student:`allergy_1.Student`)\nWHERE student.Sex = 'F'\nRETURN student.Fname,student.LName,student.Age",
        "db_id": "allergy_1",
        "answers": [
            [
                "Linda",
                "Smith",
                18
            ],
            [
                "Tracy",
                "Kim",
                19
            ],
            [
                "Shiela",
                "Jones",
                21
            ],
            [
                "Lisa",
                "Apap",
                18
            ],
            [
                "Jandy",
                "Nelson",
                20
            ],
            [
                "Susan",
                "Lee",
                16
            ],
            [
                "Stacy",
                "Prater",
                18
            ],
            [
                "Lisa",
                "Cheng",
                21
            ],
            [
                "Sarah",
                "Smith",
                20
            ],
            [
                "Sarah",
                "Schmidt",
                26
            ]
        ]
    },
    {
        "question": "What are the full names and ages for all female students whose sex is F?",
        "query": "MATCH (student:`allergy_1.Student`)\nWHERE student.Sex = 'F'\nRETURN student.Fname,student.LName,student.Age",
        "db_id": "allergy_1",
        "answers": [
            [
                "Linda",
                "Smith",
                18
            ],
            [
                "Tracy",
                "Kim",
                19
            ],
            [
                "Shiela",
                "Jones",
                21
            ],
            [
                "Lisa",
                "Apap",
                18
            ],
            [
                "Jandy",
                "Nelson",
                20
            ],
            [
                "Susan",
                "Lee",
                16
            ],
            [
                "Stacy",
                "Prater",
                18
            ],
            [
                "Lisa",
                "Cheng",
                21
            ],
            [
                "Sarah",
                "Smith",
                20
            ],
            [
                "Sarah",
                "Schmidt",
                26
            ]
        ]
    },
    {
        "question": "Show student ids for all male students.",
        "query": "MATCH (student:`allergy_1.Student`)\nWHERE student.Sex = 'M'\nRETURN student.StuID",
        "db_id": "allergy_1",
        "answers": [
            [
                1004
            ],
            [
                1005
            ],
            [
                1006
            ],
            [
                1009
            ],
            [
                1010
            ],
            [
                1011
            ],
            [
                1012
            ],
            [
                1014
            ],
            [
                1016
            ],
            [
                1017
            ],
            [
                1018
            ],
            [
                1019
            ],
            [
                1020
            ],
            [
                1021
            ],
            [
                1022
            ],
            [
                1023
            ],
            [
                1025
            ],
            [
                1026
            ],
            [
                1027
            ],
            [
                1028
            ],
            [
                1029
            ],
            [
                1032
            ],
            [
                1033
            ],
            [
                1034
            ]
        ]
    },
    {
        "question": "What are the student ids for all male students?",
        "query": "MATCH (student:`allergy_1.Student`)\nWHERE student.Sex = 'M'\nRETURN student.StuID",
        "db_id": "allergy_1",
        "answers": [
            [
                1004
            ],
            [
                1005
            ],
            [
                1006
            ],
            [
                1009
            ],
            [
                1010
            ],
            [
                1011
            ],
            [
                1012
            ],
            [
                1014
            ],
            [
                1016
            ],
            [
                1017
            ],
            [
                1018
            ],
            [
                1019
            ],
            [
                1020
            ],
            [
                1021
            ],
            [
                1022
            ],
            [
                1023
            ],
            [
                1025
            ],
            [
                1026
            ],
            [
                1027
            ],
            [
                1028
            ],
            [
                1029
            ],
            [
                1032
            ],
            [
                1033
            ],
            [
                1034
            ]
        ]
    },
    {
        "question": "How many students are age 18?",
        "query": "MATCH (student:`allergy_1.Student`)\nWHERE student.Age = 18\nRETURN count(*)",
        "db_id": "allergy_1",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "How many students are 18 years old?",
        "query": "MATCH (student:`allergy_1.Student`)\nWHERE student.Age = 18\nRETURN count(*)",
        "db_id": "allergy_1",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "Show all student ids who are older than 20.",
        "query": "MATCH (student:`allergy_1.Student`)\nWHERE student.Age > 20\nRETURN student.StuID",
        "db_id": "allergy_1",
        "answers": [
            [
                1003
            ],
            [
                1005
            ],
            [
                1011
            ],
            [
                1017
            ],
            [
                1020
            ],
            [
                1030
            ],
            [
                1035
            ]
        ]
    },
    {
        "question": "What are the student ids for students over 20 years old?",
        "query": "MATCH (student:`allergy_1.Student`)\nWHERE student.Age > 20\nRETURN student.StuID",
        "db_id": "allergy_1",
        "answers": [
            [
                1003
            ],
            [
                1005
            ],
            [
                1011
            ],
            [
                1017
            ],
            [
                1020
            ],
            [
                1030
            ],
            [
                1035
            ]
        ]
    },
    {
        "question": "Which city does the student whose last name is \"Kim\" live in?",
        "query": "MATCH (student:`allergy_1.Student`)\nWHERE student.LName = 'Kim'\nRETURN student.city_code",
        "db_id": "allergy_1",
        "answers": [
            [
                "HKG"
            ]
        ]
    },
    {
        "question": "Give the city that the student whose family name is Kim lives in.",
        "query": "MATCH (student:`allergy_1.Student`)\nWHERE student.LName = 'Kim'\nRETURN student.city_code",
        "db_id": "allergy_1",
        "answers": [
            [
                "HKG"
            ]
        ]
    },
    {
        "question": "Who is the advisor of student with ID 1004?",
        "query": "MATCH (student:`allergy_1.Student`)\nWHERE student.StuID = 1004\nRETURN student.Advisor",
        "db_id": "allergy_1",
        "answers": [
            [
                8423
            ]
        ]
    },
    {
        "question": "Who advises student 1004?",
        "query": "MATCH (student:`allergy_1.Student`)\nWHERE student.StuID = 1004\nRETURN student.Advisor",
        "db_id": "allergy_1",
        "answers": [
            [
                8423
            ]
        ]
    },
    {
        "question": "How many students live in HKG or CHI?",
        "query": "MATCH (student:`allergy_1.Student`)\nWHERE student.city_code = 'HKG' OR student.city_code = 'CHI'\nRETURN count(*)",
        "db_id": "allergy_1",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "Give the number of students living in either HKG or CHI.",
        "query": "MATCH (student:`allergy_1.Student`)\nWHERE student.city_code = 'HKG' OR student.city_code = 'CHI'\nRETURN count(*)",
        "db_id": "allergy_1",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "Show all majors and corresponding number of students.",
        "query": "MATCH (student:`allergy_1.Student`)\nWITH student.Major AS Major, count(student.Major) AS count\nRETURN Major,count",
        "db_id": "allergy_1",
        "answers": [
            [
                600,
                18
            ],
            [
                520,
                6
            ],
            [
                540,
                2
            ],
            [
                550,
                5
            ],
            [
                100,
                1
            ],
            [
                50,
                2
            ]
        ]
    },
    {
        "question": "How many students are there for each major?",
        "query": "MATCH (student:`allergy_1.Student`)\nWITH student.Major AS Major, count(student.Major) AS count\nRETURN Major,count",
        "db_id": "allergy_1",
        "answers": [
            [
                600,
                18
            ],
            [
                520,
                6
            ],
            [
                540,
                2
            ],
            [
                550,
                5
            ],
            [
                100,
                1
            ],
            [
                50,
                2
            ]
        ]
    },
    {
        "question": "Which major has most number of students?",
        "query": "MATCH (student:`allergy_1.Student`)\nWITH student.Major AS Major, count(student.Major) AS count\nRETURN Major\nORDER BY count DESC\nLIMIT 1",
        "db_id": "allergy_1",
        "answers": [
            [
                600
            ]
        ]
    },
    {
        "question": "What is the largest major?",
        "query": "MATCH (student:`allergy_1.Student`)\nWITH student.Major AS Major, count(student.Major) AS count\nRETURN Major\nORDER BY count DESC\nLIMIT 1",
        "db_id": "allergy_1",
        "answers": [
            [
                600
            ]
        ]
    },
    {
        "question": "Show all ages and corresponding number of students.",
        "query": "MATCH (student:`allergy_1.Student`)\nWITH student.Age AS Age, count(student.Age) AS count\nRETURN Age,count",
        "db_id": "allergy_1",
        "answers": [
            [
                18,
                10
            ],
            [
                19,
                4
            ],
            [
                21,
                2
            ],
            [
                20,
                8
            ],
            [
                26,
                2
            ],
            [
                17,
                4
            ],
            [
                22,
                2
            ],
            [
                16,
                1
            ],
            [
                27,
                1
            ]
        ]
    },
    {
        "question": "How old is each student and how many students are each age?",
        "query": "MATCH (student:`allergy_1.Student`)\nWITH student.Age AS Age, count(student.Age) AS count\nRETURN Age,count",
        "db_id": "allergy_1",
        "answers": [
            [
                18,
                10
            ],
            [
                19,
                4
            ],
            [
                21,
                2
            ],
            [
                20,
                8
            ],
            [
                26,
                2
            ],
            [
                17,
                4
            ],
            [
                22,
                2
            ],
            [
                16,
                1
            ],
            [
                27,
                1
            ]
        ]
    },
    {
        "question": "Show all cities and corresponding number of students.",
        "query": "MATCH (student:`allergy_1.Student`)\nWITH student.city_code AS city_code, count(student.city_code) AS count\nRETURN city_code,count",
        "db_id": "allergy_1",
        "answers": [
            [
                "BAL",
                4
            ],
            [
                "HKG",
                3
            ],
            [
                "WAS",
                3
            ],
            [
                "CHI",
                1
            ],
            [
                "YYZ",
                2
            ],
            [
                "PIT",
                4
            ],
            [
                "HOU",
                1
            ],
            [
                "PHL",
                3
            ],
            [
                "DAL",
                1
            ],
            [
                "DET",
                1
            ],
            [
                "LON",
                1
            ],
            [
                "NYC",
                3
            ],
            [
                "LOS",
                1
            ],
            [
                "ROC",
                1
            ],
            [
                "PEK",
                1
            ],
            [
                "SFO",
                1
            ],
            [
                "ATL",
                1
            ],
            [
                "NAR",
                1
            ],
            [
                "BOS",
                1
            ]
        ]
    },
    {
        "question": "How many students live in each city?",
        "query": "MATCH (student:`allergy_1.Student`)\nWITH student.city_code AS city_code, count(student.city_code) AS count\nRETURN city_code,count",
        "db_id": "allergy_1",
        "answers": [
            [
                "BAL",
                4
            ],
            [
                "HKG",
                3
            ],
            [
                "WAS",
                3
            ],
            [
                "CHI",
                1
            ],
            [
                "YYZ",
                2
            ],
            [
                "PIT",
                4
            ],
            [
                "HOU",
                1
            ],
            [
                "PHL",
                3
            ],
            [
                "DAL",
                1
            ],
            [
                "DET",
                1
            ],
            [
                "LON",
                1
            ],
            [
                "NYC",
                3
            ],
            [
                "LOS",
                1
            ],
            [
                "ROC",
                1
            ],
            [
                "PEK",
                1
            ],
            [
                "SFO",
                1
            ],
            [
                "ATL",
                1
            ],
            [
                "NAR",
                1
            ],
            [
                "BOS",
                1
            ]
        ]
    },
    {
        "question": "Show all advisors and corresponding number of students.",
        "query": "MATCH (student:`allergy_1.Student`)\nWITH count(student.Advisor) AS count, student.Advisor AS Advisor\nRETURN Advisor,count",
        "db_id": "allergy_1",
        "answers": [
            [
                1121,
                3
            ],
            [
                7712,
                1
            ],
            [
                7792,
                1
            ],
            [
                8423,
                1
            ],
            [
                1148,
                3
            ],
            [
                8918,
                1
            ],
            [
                9172,
                1
            ],
            [
                2192,
                4
            ],
            [
                7723,
                1
            ],
            [
                8741,
                1
            ],
            [
                8721,
                1
            ],
            [
                7271,
                2
            ],
            [
                8722,
                3
            ],
            [
                7134,
                2
            ],
            [
                8723,
                1
            ],
            [
                2311,
                3
            ],
            [
                8772,
                3
            ],
            [
                5718,
                2
            ]
        ]
    },
    {
        "question": "How many students does each advisor have?",
        "query": "MATCH (student:`allergy_1.Student`)\nWITH count(student.Advisor) AS count, student.Advisor AS Advisor\nRETURN Advisor,count",
        "db_id": "allergy_1",
        "answers": [
            [
                1121,
                3
            ],
            [
                7712,
                1
            ],
            [
                7792,
                1
            ],
            [
                8423,
                1
            ],
            [
                1148,
                3
            ],
            [
                8918,
                1
            ],
            [
                9172,
                1
            ],
            [
                2192,
                4
            ],
            [
                7723,
                1
            ],
            [
                8741,
                1
            ],
            [
                8721,
                1
            ],
            [
                7271,
                2
            ],
            [
                8722,
                3
            ],
            [
                7134,
                2
            ],
            [
                8723,
                1
            ],
            [
                2311,
                3
            ],
            [
                8772,
                3
            ],
            [
                5718,
                2
            ]
        ]
    },
    {
        "question": "Which advisor has most number of students?",
        "query": "MATCH (student:`allergy_1.Student`)\nWITH count(student.Advisor) AS count, student.Advisor AS Advisor\nRETURN Advisor\nORDER BY count DESC\nLIMIT 1",
        "db_id": "allergy_1",
        "answers": [
            [
                2192
            ]
        ]
    },
    {
        "question": "Give the advisor with the most students.",
        "query": "MATCH (student:`allergy_1.Student`)\nWITH count(student.Advisor) AS count, student.Advisor AS Advisor\nRETURN Advisor\nORDER BY count DESC\nLIMIT 1",
        "db_id": "allergy_1",
        "answers": [
            [
                2192
            ]
        ]
    },
    {
        "question": "How many editors are there?",
        "query": "MATCH (editor:`journal_committee.editor`)\nRETURN count(*)",
        "db_id": "journal_committee",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "List the names of editors in ascending order of age.",
        "query": "MATCH (editor:`journal_committee.editor`)\nRETURN editor.Name\nORDER BY editor.Age ASC",
        "db_id": "journal_committee",
        "answers": [
            [
                "Szymon Wydra"
            ],
            [
                "Marek Siudym"
            ],
            [
                "W\u0142adys\u0142aw Grzywna"
            ],
            [
                "Mariusz Zalejski"
            ],
            [
                "Kamila Porczyk"
            ],
            [
                "Anna Powierza"
            ],
            [
                "Maria G\u00f3ralczyk"
            ],
            [
                "Piotr Pr\u0119gowski"
            ],
            [
                "Gra\u017cyna Wolszczak"
            ]
        ]
    },
    {
        "question": "What are the names and ages of editors?",
        "query": "MATCH (editor:`journal_committee.editor`)\nRETURN editor.Name,editor.Age",
        "db_id": "journal_committee",
        "answers": [
            [
                "Kamila Porczyk",
                34.0
            ],
            [
                "Anna Powierza",
                35.0
            ],
            [
                "Marek Siudym",
                21.0
            ],
            [
                "Piotr Pr\u0119gowski",
                43.0
            ],
            [
                "Szymon Wydra",
                20.0
            ],
            [
                "W\u0142adys\u0142aw Grzywna",
                24.0
            ],
            [
                "Mariusz Zalejski",
                25.0
            ],
            [
                "Gra\u017cyna Wolszczak",
                54.0
            ],
            [
                "Maria G\u00f3ralczyk",
                38.0
            ]
        ]
    },
    {
        "question": "List the names of editors who are older than 25.",
        "query": "MATCH (editor:`journal_committee.editor`)\nWHERE editor.Age > 25\nRETURN editor.Name",
        "db_id": "journal_committee",
        "answers": [
            [
                "Kamila Porczyk"
            ],
            [
                "Anna Powierza"
            ],
            [
                "Piotr Pr\u0119gowski"
            ],
            [
                "Gra\u017cyna Wolszczak"
            ],
            [
                "Maria G\u00f3ralczyk"
            ]
        ]
    },
    {
        "question": "Show the names of editors of age either 24 or 25.",
        "query": "MATCH (editor:`journal_committee.editor`)\nWHERE editor.Age = 24 OR editor.Age = 25\nRETURN editor.Name",
        "db_id": "journal_committee",
        "answers": [
            [
                "W\u0142adys\u0142aw Grzywna"
            ],
            [
                "Mariusz Zalejski"
            ]
        ]
    },
    {
        "question": "What is the name of the youngest editor?",
        "query": "MATCH (editor:`journal_committee.editor`)\nRETURN editor.Name\nORDER BY editor.Age ASC\nLIMIT 1",
        "db_id": "journal_committee",
        "answers": [
            [
                "Szymon Wydra"
            ]
        ]
    },
    {
        "question": "What are the different ages of editors? Show each age along with the number of editors of that age.",
        "query": "MATCH (editor:`journal_committee.editor`)\nWITH count(editor.Age) AS count, editor.Age AS Age\nRETURN Age,count",
        "db_id": "journal_committee",
        "answers": [
            [
                34.0,
                1
            ],
            [
                35.0,
                1
            ],
            [
                21.0,
                1
            ],
            [
                43.0,
                1
            ],
            [
                20.0,
                1
            ],
            [
                24.0,
                1
            ],
            [
                25.0,
                1
            ],
            [
                54.0,
                1
            ],
            [
                38.0,
                1
            ]
        ]
    },
    {
        "question": "Show the distinct themes of journals.",
        "query": "MATCH (journal:`journal_committee.journal`)\nRETURN DISTINCT journal.Theme",
        "db_id": "journal_committee",
        "answers": [
            [
                "Miami Dolphins"
            ],
            [
                "at Jacksonville Jaguars"
            ],
            [
                "at Baltimore Ravens"
            ],
            [
                "Tampa Bay Buccaneers"
            ],
            [
                "at Detroit Lions"
            ],
            [
                "at Pittsburgh Steelers"
            ],
            [
                "Jacksonville Jaguars"
            ],
            [
                "Baltimore Ravens"
            ],
            [
                "at Cincinnati Bengals"
            ],
            [
                "Pittsburgh Steelers"
            ],
            [
                "at Cleveland Browns"
            ],
            [
                "at Minnesota Vikings"
            ],
            [
                "Green Bay Packers"
            ],
            [
                "at Oakland Raiders"
            ],
            [
                "Cleveland Browns"
            ],
            [
                "Cincinnati Bengals"
            ]
        ]
    },
    {
        "question": "Show the names of editors and the theme of journals for which they serve on committees.",
        "query": "MATCH ()-[T1:`journal_committee.journal_committee`]-(T2:`journal_committee.editor`)-[]-(T3:`journal_committee.journal`)\nRETURN T2.Name,T3.Theme",
        "db_id": "journal_committee",
        "answers": [
            [
                "Gra\u017cyna Wolszczak",
                "Cincinnati Bengals"
            ],
            [
                "Gra\u017cyna Wolszczak",
                "at Baltimore Ravens"
            ]
        ]
    },
    {
        "question": "For each journal_committee, find the editor name and the journal theme.",
        "query": "MATCH ()-[T1:`journal_committee.journal_committee`]-(T2:`journal_committee.editor`)-[]-(T3:`journal_committee.journal`)\nRETURN T2.Name,T3.Theme",
        "db_id": "journal_committee",
        "answers": [
            [
                "Gra\u017cyna Wolszczak",
                "Cincinnati Bengals"
            ],
            [
                "Gra\u017cyna Wolszczak",
                "at Baltimore Ravens"
            ]
        ]
    },
    {
        "question": "Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.",
        "query": "MATCH ()-[T1:`journal_committee.journal_committee`]-(T2:`journal_committee.editor`)-[]-(T3:`journal_committee.journal`)\nRETURN T2.Name,T2.Age,T3.Theme\nORDER BY T3.Theme ASC",
        "db_id": "journal_committee",
        "answers": [
            [
                "Gra\u017cyna Wolszczak",
                54.0,
                "Cincinnati Bengals"
            ],
            [
                "Gra\u017cyna Wolszczak",
                54.0,
                "at Baltimore Ravens"
            ]
        ]
    },
    {
        "question": "Show the names of editors that are on the committee of journals with sales bigger than 3000.",
        "query": "MATCH ()-[T1:`journal_committee.journal_committee`]-(T2:`journal_committee.editor`)-[]-(T3:`journal_committee.journal`)\nWHERE T3.Sales > 3000\nRETURN T2.Name",
        "db_id": "journal_committee",
        "answers": [
            [
                "Gra\u017cyna Wolszczak"
            ],
            [
                "Gra\u017cyna Wolszczak"
            ]
        ]
    },
    {
        "question": "Show the id, name of each editor and the number of journal committees they are on.",
        "query": "MATCH (T1:`journal_committee.editor`)-[T2:`journal_committee.journal_committee`]-()\nWITH T1.Name AS Name, count(T1.Editor_ID) AS count, T1.Editor_ID AS Editor_ID\nRETURN Editor_ID,Name,count",
        "db_id": "journal_committee",
        "answers": [
            [
                1,
                "Kamila Porczyk",
                1
            ],
            [
                3,
                "Marek Siudym",
                1
            ],
            [
                4,
                "Piotr Pr\u0119gowski",
                1
            ],
            [
                6,
                "W\u0142adys\u0142aw Grzywna",
                1
            ],
            [
                8,
                "Gra\u017cyna Wolszczak",
                2
            ],
            [
                9,
                "Maria G\u00f3ralczyk",
                1
            ]
        ]
    },
    {
        "question": "Show the names of editors that are on at least two journal committees.",
        "query": "MATCH (T1:`journal_committee.editor`)-[T2:`journal_committee.journal_committee`]-()\nWITH T1.Name AS Name, count(*) AS count\nWHERE count  >= 2\nRETURN Name",
        "db_id": "journal_committee",
        "answers": [
            [
                "Gra\u017cyna Wolszczak"
            ]
        ]
    },
    {
        "question": "List the names of editors that are not on any journal committee.",
        "query": "MATCH (editor:`journal_committee.editor`)\nWHERE NOT (editor:`journal_committee.editor`)-[:`journal_committee.journal_committee`]-()\nRETURN editor.Name",
        "db_id": "journal_committee",
        "answers": [
            [
                "Anna Powierza"
            ],
            [
                "Szymon Wydra"
            ],
            [
                "Mariusz Zalejski"
            ]
        ]
    },
    {
        "question": "What is the average sales of the journals that have an editor whose work type is 'Photo'?",
        "query": "MATCH (T1:`journal_committee.journal`)-[T2:`journal_committee.journal_committee`]-()\nWHERE T2.Work_Type = 'Photo'\nRETURN avg(T1.Sales)",
        "db_id": "journal_committee",
        "answers": [
            [
                4660.25
            ]
        ]
    },
    {
        "question": "How many accounts do we have?",
        "query": "MATCH (accounts:`customers_card_transactions.Accounts`)\nRETURN count(*)",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Count the number of accounts.",
        "query": "MATCH (accounts:`customers_card_transactions.Accounts`)\nRETURN count(*)",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Show ids, customer ids, names for all accounts.",
        "query": "MATCH (accounts:`customers_card_transactions.Accounts`)\nRETURN accounts.account_id,accounts.customer_id,accounts.account_name",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                1,
                6,
                "338"
            ],
            [
                2,
                14,
                "562"
            ],
            [
                3,
                9,
                "162"
            ],
            [
                4,
                12,
                "038"
            ],
            [
                5,
                13,
                "858"
            ],
            [
                6,
                12,
                "262"
            ],
            [
                7,
                9,
                "621"
            ],
            [
                8,
                8,
                "381"
            ],
            [
                9,
                9,
                "546"
            ],
            [
                10,
                4,
                "767"
            ],
            [
                11,
                4,
                "022"
            ],
            [
                12,
                2,
                "866"
            ],
            [
                13,
                10,
                "234"
            ],
            [
                14,
                9,
                "557"
            ],
            [
                15,
                4,
                "725"
            ]
        ]
    },
    {
        "question": "What are the account ids, customer ids, and account names for all the accounts?",
        "query": "MATCH (accounts:`customers_card_transactions.Accounts`)\nRETURN accounts.account_id,accounts.customer_id,accounts.account_name",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                1,
                6,
                "338"
            ],
            [
                2,
                14,
                "562"
            ],
            [
                3,
                9,
                "162"
            ],
            [
                4,
                12,
                "038"
            ],
            [
                5,
                13,
                "858"
            ],
            [
                6,
                12,
                "262"
            ],
            [
                7,
                9,
                "621"
            ],
            [
                8,
                8,
                "381"
            ],
            [
                9,
                9,
                "546"
            ],
            [
                10,
                4,
                "767"
            ],
            [
                11,
                4,
                "022"
            ],
            [
                12,
                2,
                "866"
            ],
            [
                13,
                10,
                "234"
            ],
            [
                14,
                9,
                "557"
            ],
            [
                15,
                4,
                "725"
            ]
        ]
    },
    {
        "question": "Show other account details for account with name 338.",
        "query": "MATCH (accounts:`customers_card_transactions.Accounts`)\nWHERE accounts.account_name = '338'\nRETURN accounts.other_account_details",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                "Regular"
            ]
        ]
    },
    {
        "question": "What are the other account details for the account with the name 338?",
        "query": "MATCH (accounts:`customers_card_transactions.Accounts`)\nWHERE accounts.account_name = '338'\nRETURN accounts.other_account_details",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                "Regular"
            ]
        ]
    },
    {
        "question": "Show all customer ids and the number of accounts for each customer.",
        "query": "MATCH (accounts:`customers_card_transactions.Accounts`)\nWITH count(accounts.customer_id) AS count, accounts.customer_id AS customer_id\nRETURN customer_id,count",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                6,
                1
            ],
            [
                14,
                1
            ],
            [
                9,
                4
            ],
            [
                12,
                2
            ],
            [
                13,
                1
            ],
            [
                8,
                1
            ],
            [
                4,
                3
            ],
            [
                2,
                1
            ],
            [
                10,
                1
            ]
        ]
    },
    {
        "question": "How many accounts are there for each customer id?",
        "query": "MATCH (accounts:`customers_card_transactions.Accounts`)\nWITH count(accounts.customer_id) AS count, accounts.customer_id AS customer_id\nRETURN customer_id,count",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                6,
                1
            ],
            [
                14,
                1
            ],
            [
                9,
                4
            ],
            [
                12,
                2
            ],
            [
                13,
                1
            ],
            [
                8,
                1
            ],
            [
                4,
                3
            ],
            [
                2,
                1
            ],
            [
                10,
                1
            ]
        ]
    },
    {
        "question": "Show the customer id and number of accounts with most accounts.",
        "query": "MATCH (accounts:`customers_card_transactions.Accounts`)\nWITH count(accounts.customer_id) AS count, accounts.customer_id AS customer_id\nRETURN customer_id,count\nORDER BY count DESC\nLIMIT 1",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                9,
                4
            ]
        ]
    },
    {
        "question": "What is the customer id of the customer with the most accounts, and how many accounts does this person have?",
        "query": "MATCH (accounts:`customers_card_transactions.Accounts`)\nWITH count(accounts.customer_id) AS count, accounts.customer_id AS customer_id\nRETURN customer_id,count\nORDER BY count DESC\nLIMIT 1",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                9,
                4
            ]
        ]
    },
    {
        "question": "How many customers have an account?",
        "query": "MATCH (accounts:`customers_card_transactions.Accounts`)\nRETURN count(DISTINCT accounts.customer_id)",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "Count the number of customers who hold an account.",
        "query": "MATCH (accounts:`customers_card_transactions.Accounts`)\nRETURN count(DISTINCT accounts.customer_id)",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "How many customers do we have?",
        "query": "MATCH (customers:`customers_card_transactions.Customers`)\nRETURN count(*)",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Count the number of customers.",
        "query": "MATCH (customers:`customers_card_transactions.Customers`)\nRETURN count(*)",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Show ids, first names, last names, and phones for all customers.",
        "query": "MATCH (customers:`customers_card_transactions.Customers`)\nRETURN customers.customer_id,customers.customer_first_name,customers.customer_last_name,customers.customer_phone",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                1,
                "Aniyah",
                "Feest",
                "(673)872-5338"
            ],
            [
                2,
                "Susie",
                "Wiza",
                "679-845-8645x94312"
            ],
            [
                3,
                "Marcel",
                "Brekke",
                "1-511-656-6664"
            ],
            [
                4,
                "Art",
                "Turcotte",
                "941-213-6716x675"
            ],
            [
                5,
                "Armani",
                "Farrell",
                "224-123-1012"
            ],
            [
                6,
                "Kiel",
                "Schinner",
                "1-564-044-3909"
            ],
            [
                7,
                "Izabella",
                "Erdman",
                "751.049.9948"
            ],
            [
                8,
                "Elyssa",
                "Lind",
                "+12(6)9024410984"
            ],
            [
                9,
                "Faustino",
                "Langworth",
                "284.749.0453"
            ],
            [
                10,
                "Axel",
                "Effertz",
                "+90(8)1290735932"
            ],
            [
                11,
                "Frederic",
                "Swift",
                "1-207-977-5182"
            ],
            [
                12,
                "Bryce",
                "Rath",
                "(415)237-0701x3115"
            ],
            [
                13,
                "Serenity",
                "Effertz",
                "1-894-567-2283"
            ],
            [
                14,
                "Blanche",
                "Huels",
                "(703)950-4708x8972"
            ],
            [
                15,
                "Nat",
                "Davis",
                "246-469-4472x359"
            ]
        ]
    },
    {
        "question": "What are the ids, full names, and phones of each customer?",
        "query": "MATCH (customers:`customers_card_transactions.Customers`)\nRETURN customers.customer_id,customers.customer_first_name,customers.customer_last_name,customers.customer_phone",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                1,
                "Aniyah",
                "Feest",
                "(673)872-5338"
            ],
            [
                2,
                "Susie",
                "Wiza",
                "679-845-8645x94312"
            ],
            [
                3,
                "Marcel",
                "Brekke",
                "1-511-656-6664"
            ],
            [
                4,
                "Art",
                "Turcotte",
                "941-213-6716x675"
            ],
            [
                5,
                "Armani",
                "Farrell",
                "224-123-1012"
            ],
            [
                6,
                "Kiel",
                "Schinner",
                "1-564-044-3909"
            ],
            [
                7,
                "Izabella",
                "Erdman",
                "751.049.9948"
            ],
            [
                8,
                "Elyssa",
                "Lind",
                "+12(6)9024410984"
            ],
            [
                9,
                "Faustino",
                "Langworth",
                "284.749.0453"
            ],
            [
                10,
                "Axel",
                "Effertz",
                "+90(8)1290735932"
            ],
            [
                11,
                "Frederic",
                "Swift",
                "1-207-977-5182"
            ],
            [
                12,
                "Bryce",
                "Rath",
                "(415)237-0701x3115"
            ],
            [
                13,
                "Serenity",
                "Effertz",
                "1-894-567-2283"
            ],
            [
                14,
                "Blanche",
                "Huels",
                "(703)950-4708x8972"
            ],
            [
                15,
                "Nat",
                "Davis",
                "246-469-4472x359"
            ]
        ]
    },
    {
        "question": "What is the phone and email for customer with first name Aniyah and last name Feest?",
        "query": "MATCH (customers:`customers_card_transactions.Customers`)\nWHERE customers.customer_first_name = 'Aniyah' AND customers.customer_last_name = 'Feest'\nRETURN customers.customer_phone,customers.customer_email",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                "(673)872-5338",
                "fahey.dorian@example.com"
            ]
        ]
    },
    {
        "question": "Return the phone and email of the customer with the first name Aniyah and last name Feest.",
        "query": "MATCH (customers:`customers_card_transactions.Customers`)\nWHERE customers.customer_first_name = 'Aniyah' AND customers.customer_last_name = 'Feest'\nRETURN customers.customer_phone,customers.customer_email",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                "(673)872-5338",
                "fahey.dorian@example.com"
            ]
        ]
    },
    {
        "question": "Show the number of customer cards.",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nRETURN count(*)",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "How many customer cards are there?",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nRETURN count(*)",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Show ids, customer ids, card type codes, card numbers for all cards.",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nRETURN customers_cards.card_id,customers_cards.customer_id,customers_cards.card_type_code,customers_cards.card_number",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                1,
                14,
                "Credit",
                "4560596484842"
            ],
            [
                2,
                9,
                "Credit",
                "4859448397570735"
            ],
            [
                3,
                6,
                "Debit",
                "348237249146948"
            ],
            [
                4,
                15,
                "Credit",
                "4485460762694"
            ],
            [
                5,
                13,
                "Credit",
                "5122249720639438"
            ],
            [
                6,
                10,
                "Debit",
                "5102229294602335"
            ],
            [
                7,
                9,
                "Credit",
                "4716674779726"
            ],
            [
                8,
                12,
                "Credit",
                "6011225247353230"
            ],
            [
                9,
                3,
                "Debit",
                "4929590358481"
            ],
            [
                10,
                10,
                "Debit",
                "4532488235104"
            ],
            [
                11,
                8,
                "Debit",
                "4707949584519"
            ],
            [
                12,
                3,
                "Debit",
                "4929896676202959"
            ],
            [
                13,
                2,
                "Credit",
                "5484846021884483"
            ],
            [
                14,
                5,
                "Debit",
                "4929384762825"
            ],
            [
                15,
                2,
                "Debit",
                "345475370003028"
            ]
        ]
    },
    {
        "question": "What are card ids, customer ids, card types, and card numbers for each customer card?",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nRETURN customers_cards.card_id,customers_cards.customer_id,customers_cards.card_type_code,customers_cards.card_number",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                1,
                14,
                "Credit",
                "4560596484842"
            ],
            [
                2,
                9,
                "Credit",
                "4859448397570735"
            ],
            [
                3,
                6,
                "Debit",
                "348237249146948"
            ],
            [
                4,
                15,
                "Credit",
                "4485460762694"
            ],
            [
                5,
                13,
                "Credit",
                "5122249720639438"
            ],
            [
                6,
                10,
                "Debit",
                "5102229294602335"
            ],
            [
                7,
                9,
                "Credit",
                "4716674779726"
            ],
            [
                8,
                12,
                "Credit",
                "6011225247353230"
            ],
            [
                9,
                3,
                "Debit",
                "4929590358481"
            ],
            [
                10,
                10,
                "Debit",
                "4532488235104"
            ],
            [
                11,
                8,
                "Debit",
                "4707949584519"
            ],
            [
                12,
                3,
                "Debit",
                "4929896676202959"
            ],
            [
                13,
                2,
                "Credit",
                "5484846021884483"
            ],
            [
                14,
                5,
                "Debit",
                "4929384762825"
            ],
            [
                15,
                2,
                "Debit",
                "345475370003028"
            ]
        ]
    },
    {
        "question": "How many cards does customer Art Turcotte have?",
        "query": "MATCH (T1:`customers_card_transactions.Customers_Cards`)-[]-(T2:`customers_card_transactions.Customers`)\nWHERE T2.customer_first_name = 'Art' AND T2.customer_last_name = 'Turcotte'\nRETURN count(*)",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Count the number of cards the customer with the first name Art and last name Turcotte has.",
        "query": "MATCH (T1:`customers_card_transactions.Customers_Cards`)-[]-(T2:`customers_card_transactions.Customers`)\nWHERE T2.customer_first_name = 'Art' AND T2.customer_last_name = 'Turcotte'\nRETURN count(*)",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many debit cards do we have?",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nWHERE customers_cards.card_type_code = 'Debit'\nRETURN count(*)",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "Count the number of customer cards of the type Debit.",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nWHERE customers_cards.card_type_code = 'Debit'\nRETURN count(*)",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "Show all customer ids and the number of cards owned by each customer.",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nWITH count(customers_cards.customer_id) AS count, customers_cards.customer_id AS customer_id\nRETURN customer_id,count",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                14,
                1
            ],
            [
                9,
                2
            ],
            [
                6,
                1
            ],
            [
                15,
                1
            ],
            [
                13,
                1
            ],
            [
                10,
                2
            ],
            [
                12,
                1
            ],
            [
                3,
                2
            ],
            [
                8,
                1
            ],
            [
                2,
                2
            ],
            [
                5,
                1
            ]
        ]
    },
    {
        "question": "What are the different customer ids, and how many cards does each one hold?",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nWITH count(customers_cards.customer_id) AS count, customers_cards.customer_id AS customer_id\nRETURN customer_id,count",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                14,
                1
            ],
            [
                9,
                2
            ],
            [
                6,
                1
            ],
            [
                15,
                1
            ],
            [
                13,
                1
            ],
            [
                10,
                2
            ],
            [
                12,
                1
            ],
            [
                3,
                2
            ],
            [
                8,
                1
            ],
            [
                2,
                2
            ],
            [
                5,
                1
            ]
        ]
    },
    {
        "question": "Show all card type codes and the number of cards in each type.",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nWITH customers_cards.card_type_code AS card_type_code, count(customers_cards.card_type_code) AS count\nRETURN card_type_code,count",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                "Credit",
                7
            ],
            [
                "Debit",
                8
            ]
        ]
    },
    {
        "question": "What are the different card types, and how many cards are there of each?",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nWITH customers_cards.card_type_code AS card_type_code, count(customers_cards.card_type_code) AS count\nRETURN card_type_code,count",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                "Credit",
                7
            ],
            [
                "Debit",
                8
            ]
        ]
    },
    {
        "question": "What is the card type code with most number of cards?",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nWITH customers_cards.card_type_code AS card_type_code, count(customers_cards.card_type_code) AS count\nRETURN card_type_code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                "Debit"
            ]
        ]
    },
    {
        "question": "Return the code of the card type that is most common.",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nWITH customers_cards.card_type_code AS card_type_code, count(customers_cards.card_type_code) AS count\nRETURN card_type_code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                "Debit"
            ]
        ]
    },
    {
        "question": "Show card type codes with at least 5 cards.",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nWITH count(*) AS count, customers_cards.card_type_code AS card_type_code\nWHERE count  >= 5\nRETURN card_type_code",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                "Credit"
            ],
            [
                "Debit"
            ]
        ]
    },
    {
        "question": "What are the codes of card types that have 5 or more cards?",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nWITH count(*) AS count, customers_cards.card_type_code AS card_type_code\nWHERE count  >= 5\nRETURN card_type_code",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                "Credit"
            ],
            [
                "Debit"
            ]
        ]
    },
    {
        "question": "Show all card type codes.",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nRETURN DISTINCT customers_cards.card_type_code",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                "Credit"
            ],
            [
                "Debit"
            ]
        ]
    },
    {
        "question": "What are the different card type codes?",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nRETURN DISTINCT customers_cards.card_type_code",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                "Credit"
            ],
            [
                "Debit"
            ]
        ]
    },
    {
        "question": "Show the number of card types.",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nRETURN count(DISTINCT customers_cards.card_type_code)",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "How many different card types are there?",
        "query": "MATCH (customers_cards:`customers_card_transactions.Customers_Cards`)\nRETURN count(DISTINCT customers_cards.card_type_code)",
        "db_id": "customers_card_transactions",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "How many tracks do we have?",
        "query": "MATCH (track:`race_track.track`)\nRETURN count(*)",
        "db_id": "race_track",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "Count the number of tracks.",
        "query": "MATCH (track:`race_track.track`)\nRETURN count(*)",
        "db_id": "race_track",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "Show the name and location for all tracks.",
        "query": "MATCH (track:`race_track.track`)\nRETURN track.Name,track.Location",
        "db_id": "race_track",
        "answers": [
            [
                "Auto Club Speedway",
                "Fontana, CA"
            ],
            [
                "Chicagoland Speedway",
                "Joliet, IL"
            ],
            [
                "Darlington Raceway",
                "Darlington, SC"
            ],
            [
                "Daytona International Speedway",
                "Daytona Beach, FL"
            ],
            [
                "Homestead-Miami Speedway",
                "Homestead, FL"
            ],
            [
                "Kansas Speedway",
                "Kansas City, KS"
            ],
            [
                "Martinsville Speedway",
                "Ridgeway, VA"
            ],
            [
                "Michigan International Speedway",
                "Brooklyn, MI"
            ],
            [
                "Phoenix International Raceway",
                "Avondale, AZ"
            ]
        ]
    },
    {
        "question": "What are the names and locations of all tracks?",
        "query": "MATCH (track:`race_track.track`)\nRETURN track.Name,track.Location",
        "db_id": "race_track",
        "answers": [
            [
                "Auto Club Speedway",
                "Fontana, CA"
            ],
            [
                "Chicagoland Speedway",
                "Joliet, IL"
            ],
            [
                "Darlington Raceway",
                "Darlington, SC"
            ],
            [
                "Daytona International Speedway",
                "Daytona Beach, FL"
            ],
            [
                "Homestead-Miami Speedway",
                "Homestead, FL"
            ],
            [
                "Kansas Speedway",
                "Kansas City, KS"
            ],
            [
                "Martinsville Speedway",
                "Ridgeway, VA"
            ],
            [
                "Michigan International Speedway",
                "Brooklyn, MI"
            ],
            [
                "Phoenix International Raceway",
                "Avondale, AZ"
            ]
        ]
    },
    {
        "question": "Show names and seatings, ordered by seating for all tracks opened after 2000.",
        "query": "MATCH (track:`race_track.track`)\nWHERE track.Year_Opened > 2000\nRETURN track.Name,track.Seating\nORDER BY track.Seating",
        "db_id": "race_track",
        "answers": [
            [
                "Chicagoland Speedway",
                75000.0
            ],
            [
                "Kansas Speedway",
                81687.0
            ]
        ]
    },
    {
        "question": "What are the names and seatings for all tracks opened after 2000, ordered by seating?",
        "query": "MATCH (track:`race_track.track`)\nWHERE track.Year_Opened > 2000\nRETURN track.Name,track.Seating\nORDER BY track.Seating",
        "db_id": "race_track",
        "answers": [
            [
                "Chicagoland Speedway",
                75000.0
            ],
            [
                "Kansas Speedway",
                81687.0
            ]
        ]
    },
    {
        "question": "What is the name, location and seating for the most recently opened track?",
        "query": "MATCH (track:`race_track.track`)\nRETURN track.Name,track.Location,track.Seating\nORDER BY track.Year_Opened DESC\nLIMIT 1",
        "db_id": "race_track",
        "answers": [
            [
                "Chicagoland Speedway",
                "Joliet, IL",
                75000.0
            ]
        ]
    },
    {
        "question": "Return the name, location, and seating of the track that was opened in the most recent year.",
        "query": "MATCH (track:`race_track.track`)\nRETURN track.Name,track.Location,track.Seating\nORDER BY track.Year_Opened DESC\nLIMIT 1",
        "db_id": "race_track",
        "answers": [
            [
                "Chicagoland Speedway",
                "Joliet, IL",
                75000.0
            ]
        ]
    },
    {
        "question": "What is the minimum, maximum, and average seating for all tracks.",
        "query": "MATCH (track:`race_track.track`)\nRETURN min(track.Seating),max(track.Seating),avg(track.Seating)",
        "db_id": "race_track",
        "answers": [
            [
                63000.0,
                168000.0,
                91526.88888888889
            ]
        ]
    },
    {
        "question": "Return the minimum, maximum, and average seating across all tracks.",
        "query": "MATCH (track:`race_track.track`)\nRETURN min(track.Seating),max(track.Seating),avg(track.Seating)",
        "db_id": "race_track",
        "answers": [
            [
                63000.0,
                168000.0,
                91526.88888888889
            ]
        ]
    },
    {
        "question": "What are distinct locations where tracks are located?",
        "query": "MATCH (track:`race_track.track`)\nRETURN DISTINCT track.Location",
        "db_id": "race_track",
        "answers": [
            [
                "Fontana, CA"
            ],
            [
                "Joliet, IL"
            ],
            [
                "Darlington, SC"
            ],
            [
                "Daytona Beach, FL"
            ],
            [
                "Homestead, FL"
            ],
            [
                "Kansas City, KS"
            ],
            [
                "Ridgeway, VA"
            ],
            [
                "Brooklyn, MI"
            ],
            [
                "Avondale, AZ"
            ]
        ]
    },
    {
        "question": "Give the different locations of tracks.",
        "query": "MATCH (track:`race_track.track`)\nRETURN DISTINCT track.Location",
        "db_id": "race_track",
        "answers": [
            [
                "Fontana, CA"
            ],
            [
                "Joliet, IL"
            ],
            [
                "Darlington, SC"
            ],
            [
                "Daytona Beach, FL"
            ],
            [
                "Homestead, FL"
            ],
            [
                "Kansas City, KS"
            ],
            [
                "Ridgeway, VA"
            ],
            [
                "Brooklyn, MI"
            ],
            [
                "Avondale, AZ"
            ]
        ]
    },
    {
        "question": "How many races are there?",
        "query": "MATCH (race:`race_track.race`)\nRETURN count(*)",
        "db_id": "race_track",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "Count the number of races.",
        "query": "MATCH (race:`race_track.race`)\nRETURN count(*)",
        "db_id": "race_track",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "What are the distinct classes that races can have?",
        "query": "MATCH (race:`race_track.race`)\nRETURN DISTINCT race.Class",
        "db_id": "race_track",
        "answers": [
            [
                "DP/GT"
            ],
            [
                "GT"
            ]
        ]
    },
    {
        "question": "Return the different classes of races.",
        "query": "MATCH (race:`race_track.race`)\nRETURN DISTINCT race.Class",
        "db_id": "race_track",
        "answers": [
            [
                "DP/GT"
            ],
            [
                "GT"
            ]
        ]
    },
    {
        "question": "Show the race class and number of races in each class.",
        "query": "MATCH (race:`race_track.race`)\nWITH count(race.Class) AS count, race.Class AS Class\nRETURN Class,count",
        "db_id": "race_track",
        "answers": [
            [
                "DP/GT",
                5
            ],
            [
                "GT",
                2
            ]
        ]
    },
    {
        "question": "What are the different classes of races, and how many races correspond to each?",
        "query": "MATCH (race:`race_track.race`)\nWITH count(race.Class) AS count, race.Class AS Class\nRETURN Class,count",
        "db_id": "race_track",
        "answers": [
            [
                "DP/GT",
                5
            ],
            [
                "GT",
                2
            ]
        ]
    },
    {
        "question": "What is the race class with most number of races.",
        "query": "MATCH (race:`race_track.race`)\nWITH count(race.Class) AS count, race.Class AS Class\nRETURN Class\nORDER BY count DESC\nLIMIT 1",
        "db_id": "race_track",
        "answers": [
            [
                "DP/GT"
            ]
        ]
    },
    {
        "question": "Give the class of races that is most common.",
        "query": "MATCH (race:`race_track.race`)\nWITH count(race.Class) AS count, race.Class AS Class\nRETURN Class\nORDER BY count DESC\nLIMIT 1",
        "db_id": "race_track",
        "answers": [
            [
                "DP/GT"
            ]
        ]
    },
    {
        "question": "List the race class with at least two races.",
        "query": "MATCH (race:`race_track.race`)\nWITH count(*) AS count, race.Class AS Class\nWHERE count  >= 2\nRETURN Class",
        "db_id": "race_track",
        "answers": [
            [
                "DP/GT"
            ],
            [
                "GT"
            ]
        ]
    },
    {
        "question": "What are the classes of races that have two or more corresponding races?",
        "query": "MATCH (race:`race_track.race`)\nWITH count(*) AS count, race.Class AS Class\nWHERE count  >= 2\nRETURN Class",
        "db_id": "race_track",
        "answers": [
            [
                "DP/GT"
            ],
            [
                "GT"
            ]
        ]
    },
    {
        "question": "How many members have the black membership card?",
        "query": "MATCH (member:`coffee_shop.member`)\nWHERE member.Membership_card = 'Black'\nRETURN count(*)",
        "db_id": "coffee_shop",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "Find the number of members living in each address.",
        "query": "MATCH (member:`coffee_shop.member`)\nWITH member.Address AS Address, count(member.Address) AS count\nRETURN count,Address",
        "db_id": "coffee_shop",
        "answers": [
            [
                3,
                "Hartford"
            ],
            [
                4,
                "Waterbury"
            ],
            [
                2,
                "Cheshire"
            ],
            [
                1,
                "Bridgeport"
            ]
        ]
    },
    {
        "question": "Give me the names of members whose address is in Harford or Waterbury.",
        "query": "MATCH (member:`coffee_shop.member`)\nWHERE member.Address = 'Harford' OR member.Address = 'Waterbury'\nRETURN member.Name",
        "db_id": "coffee_shop",
        "answers": [
            [
                "Breton, Robert"
            ],
            [
                "Cobb, Sedrick"
            ],
            [
                "Reynolds, Richard"
            ],
            [
                "Rizzo, Todd"
            ]
        ]
    },
    {
        "question": "Find the ids and names of members who are under age 30 or with black membership card.",
        "query": "MATCH (member:`coffee_shop.member`)\nWHERE member.Membership_card = 'Black' OR member.Age < 30\nRETURN member.Name,member.Member_ID",
        "db_id": "coffee_shop",
        "answers": [
            [
                "Ashby, Lazale",
                1
            ],
            [
                "Campbell, Jessie",
                3
            ],
            [
                "Cobb, Sedrick",
                4
            ],
            [
                "Peeler, Russell",
                7
            ],
            [
                "Reynolds, Richard",
                8
            ],
            [
                "Webb, Daniel",
                10
            ]
        ]
    },
    {
        "question": "Find the purchase time, age and address of each member, and show the results in the order of purchase time.",
        "query": "MATCH (member:`coffee_shop.member`)\nRETURN member.Time_of_purchase,member.Age,member.Address\nORDER BY member.Time_of_purchase",
        "db_id": "coffee_shop",
        "answers": [
            [
                18,
                29,
                "Hartford"
            ],
            [
                18,
                35,
                "Waterbury"
            ],
            [
                20,
                34,
                "Hartford"
            ],
            [
                24,
                45,
                "Waterbury"
            ],
            [
                26,
                33,
                "Cheshire"
            ],
            [
                26,
                42,
                "Bridgeport"
            ],
            [
                27,
                51,
                "Waterbury"
            ],
            [
                27,
                51,
                "Hartford"
            ],
            [
                41,
                67,
                "Waterbury"
            ],
            [
                44,
                50,
                "Cheshire"
            ]
        ]
    },
    {
        "question": "Which membership card has more than 5 members?",
        "query": "MATCH (member:`coffee_shop.member`)\nWITH count(*) AS count, member.Membership_card AS Membership_card\nWHERE count  > 5\nRETURN Membership_card",
        "db_id": "coffee_shop",
        "answers": [
            [
                "Black"
            ]
        ]
    },
    {
        "question": "How many members are not living in Hartford?",
        "query": "MATCH (member:`coffee_shop.member`)\nWHERE member.Address <> 'Hartford'\nRETURN count(*)",
        "db_id": "coffee_shop",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "Show the shop addresses ordered by their opening year.",
        "query": "MATCH (shop:`coffee_shop.shop`)\nRETURN shop.Address\nORDER BY shop.Open_Year",
        "db_id": "coffee_shop",
        "answers": [
            [
                "1100 Main Street"
            ],
            [
                "1111 Main Street"
            ],
            [
                "2345 McGee Street"
            ],
            [
                "324 E. 11th Street"
            ],
            [
                "1200 Main Street"
            ],
            [
                "1330 Baltimore Street"
            ],
            [
                "909 Walnut Street"
            ],
            [
                "1201 Walnut Street"
            ],
            [
                "414 E. 12th Street"
            ],
            [
                "909 Main Street"
            ]
        ]
    },
    {
        "question": "Find the address and staff number of the shops that do not have any happy hour.",
        "query": "MATCH (shop:`coffee_shop.shop`)\nWHERE NOT (shop:`coffee_shop.shop`)-[]-(:`coffee_shop.happy_hour`)\nRETURN shop.Address,shop.Num_of_staff",
        "db_id": "coffee_shop",
        "answers": [
            [
                "909 Walnut Street",
                "27"
            ],
            [
                "1201 Walnut Street",
                "34"
            ],
            [
                "2345 McGee Street",
                "425"
            ],
            [
                "909 Main Street",
                "28"
            ],
            [
                "1100 Main Street",
                "23"
            ]
        ]
    },
    {
        "question": "which shop has happy hour most frequently? List its id and number of happy hours.",
        "query": "MATCH (happy_hour:`coffee_shop.happy_hour`)\nWITH count(happy_hour.Shop_ID) AS count, happy_hour.Shop_ID AS Shop_ID\nRETURN Shop_ID,count\nORDER BY count DESC\nLIMIT 1",
        "db_id": "coffee_shop",
        "answers": [
            [
                1,
                4
            ]
        ]
    },
    {
        "question": "Which month has the most happy hours?",
        "query": "MATCH (happy_hour:`coffee_shop.happy_hour`)\nWITH happy_hour.Month AS Month, count(happy_hour.Month) AS count\nRETURN Month\nORDER BY count DESC\nLIMIT 1",
        "db_id": "coffee_shop",
        "answers": [
            [
                "May"
            ]
        ]
    },
    {
        "question": "Which months have more than 2 happy hours?",
        "query": "MATCH (happy_hour:`coffee_shop.happy_hour`)\nWITH count(*) AS count, happy_hour.Month AS Month\nWHERE count  > 2\nRETURN Month",
        "db_id": "coffee_shop",
        "answers": [
            [
                "May"
            ],
            [
                "April"
            ]
        ]
    },
    {
        "question": "Find all the phone numbers.",
        "query": "MATCH (available_policies:`insurance_fnol.Available_Policies`)\nRETURN available_policies.Customer_Phone",
        "db_id": "insurance_fnol",
        "answers": [
            [
                "+16(2)5838999222"
            ],
            [
                "242.763.9214"
            ],
            [
                "1-416-503-7735x94204"
            ],
            [
                "(777)537-7792"
            ],
            [
                "1-446-940-9907x257"
            ],
            [
                "(379)862-8274x12620"
            ],
            [
                "+85(6)1302858396"
            ],
            [
                "1-797-927-3585x9321"
            ],
            [
                "991.642.6485x822"
            ],
            [
                "813.178.8211x557"
            ],
            [
                "889-572-0609x552"
            ],
            [
                "1-138-841-3073"
            ],
            [
                "1-381-132-0127x3801"
            ],
            [
                "00481937923"
            ],
            [
                "405.090.8654x021"
            ]
        ]
    },
    {
        "question": "What are all the phone numbers?",
        "query": "MATCH (available_policies:`insurance_fnol.Available_Policies`)\nRETURN available_policies.Customer_Phone",
        "db_id": "insurance_fnol",
        "answers": [
            [
                "+16(2)5838999222"
            ],
            [
                "242.763.9214"
            ],
            [
                "1-416-503-7735x94204"
            ],
            [
                "(777)537-7792"
            ],
            [
                "1-446-940-9907x257"
            ],
            [
                "(379)862-8274x12620"
            ],
            [
                "+85(6)1302858396"
            ],
            [
                "1-797-927-3585x9321"
            ],
            [
                "991.642.6485x822"
            ],
            [
                "813.178.8211x557"
            ],
            [
                "889-572-0609x552"
            ],
            [
                "1-138-841-3073"
            ],
            [
                "1-381-132-0127x3801"
            ],
            [
                "00481937923"
            ],
            [
                "405.090.8654x021"
            ]
        ]
    },
    {
        "question": "What are the customer phone numbers under the policy \"Life Insurance\"?",
        "query": "MATCH (available_policies:`insurance_fnol.Available_Policies`)\nWHERE available_policies.policy_type_code = 'Life Insurance'\nRETURN available_policies.Customer_Phone",
        "db_id": "insurance_fnol",
        "answers": [
            [
                "+16(2)5838999222"
            ],
            [
                "991.642.6485x822"
            ],
            [
                "889-572-0609x552"
            ],
            [
                "1-138-841-3073"
            ]
        ]
    },
    {
        "question": "What are the phone numbers of customers using the policy with the code \"Life Insurance\"?",
        "query": "MATCH (available_policies:`insurance_fnol.Available_Policies`)\nWHERE available_policies.policy_type_code = 'Life Insurance'\nRETURN available_policies.Customer_Phone",
        "db_id": "insurance_fnol",
        "answers": [
            [
                "+16(2)5838999222"
            ],
            [
                "991.642.6485x822"
            ],
            [
                "889-572-0609x552"
            ],
            [
                "1-138-841-3073"
            ]
        ]
    },
    {
        "question": "Which policy type has the most records in the database?",
        "query": "MATCH (available_policies:`insurance_fnol.Available_Policies`)\nWITH count(available_policies.policy_type_code) AS count, available_policies.policy_type_code AS policy_type_code\nRETURN policy_type_code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "insurance_fnol",
        "answers": [
            [
                "Property Insurance"
            ]
        ]
    },
    {
        "question": "Which policy type appears most frequently in the available policies?",
        "query": "MATCH (available_policies:`insurance_fnol.Available_Policies`)\nWITH count(available_policies.policy_type_code) AS count, available_policies.policy_type_code AS policy_type_code\nRETURN policy_type_code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "insurance_fnol",
        "answers": [
            [
                "Property Insurance"
            ]
        ]
    },
    {
        "question": "Find the policy type used by more than 4 customers.",
        "query": "MATCH (available_policies:`insurance_fnol.Available_Policies`)\nWITH count(*) AS count, available_policies.policy_type_code AS policy_type_code\nWHERE count  > 4\nRETURN policy_type_code",
        "db_id": "insurance_fnol",
        "answers": [
            [
                "Property Insurance"
            ],
            [
                "Mortgage Insurance"
            ]
        ]
    },
    {
        "question": "Find the policy types more than 4 customers use. Show their type code.",
        "query": "MATCH (available_policies:`insurance_fnol.Available_Policies`)\nWITH count(*) AS count, available_policies.policy_type_code AS policy_type_code\nWHERE count  > 4\nRETURN policy_type_code",
        "db_id": "insurance_fnol",
        "answers": [
            [
                "Property Insurance"
            ],
            [
                "Mortgage Insurance"
            ]
        ]
    },
    {
        "question": "List all the services in the alphabetical order.",
        "query": "MATCH (services:`insurance_fnol.Services`)\nRETURN services.Service_name\nORDER BY services.Service_name",
        "db_id": "insurance_fnol",
        "answers": [
            [
                "Change a policy"
            ],
            [
                "Close a policy"
            ],
            [
                "New policy application"
            ],
            [
                "Upgrade a policy"
            ]
        ]
    },
    {
        "question": "Give me a list of all the service names sorted alphabetically.",
        "query": "MATCH (services:`insurance_fnol.Services`)\nRETURN services.Service_name\nORDER BY services.Service_name",
        "db_id": "insurance_fnol",
        "answers": [
            [
                "Change a policy"
            ],
            [
                "Close a policy"
            ],
            [
                "New policy application"
            ],
            [
                "Upgrade a policy"
            ]
        ]
    },
    {
        "question": "How many services are there?",
        "query": "MATCH (services:`insurance_fnol.Services`)\nRETURN count(*)",
        "db_id": "insurance_fnol",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "Count the total number of available services.",
        "query": "MATCH (services:`insurance_fnol.Services`)\nRETURN count(*)",
        "db_id": "insurance_fnol",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "What are the maximum and minimum settlement amount on record?",
        "query": "MATCH (settlements:`insurance_fnol.Settlements`)\nRETURN max(settlements.Settlement_Amount),min(settlements.Settlement_Amount)",
        "db_id": "insurance_fnol",
        "answers": [
            [
                9814.39,
                1588.45
            ]
        ]
    },
    {
        "question": "Find the maximum and minimum settlement amount.",
        "query": "MATCH (settlements:`insurance_fnol.Settlements`)\nRETURN max(settlements.Settlement_Amount),min(settlements.Settlement_Amount)",
        "db_id": "insurance_fnol",
        "answers": [
            [
                9814.39,
                1588.45
            ]
        ]
    },
    {
        "question": "List all the customers in increasing order of IDs.",
        "query": "MATCH (customers:`insurance_fnol.Customers`)\nRETURN customers.Customer_ID,customers.Customer_name\nORDER BY customers.Customer_ID ASC",
        "db_id": "insurance_fnol",
        "answers": [
            [
                194,
                "America Jaskolski"
            ],
            [
                214,
                "Ellsworth Paucek"
            ],
            [
                256,
                "Mrs. Hanna Willms"
            ],
            [
                562,
                "Dr. Diana Rath"
            ],
            [
                582,
                "Selena Gerhold"
            ],
            [
                641,
                "Dayana Robel"
            ],
            [
                682,
                "Mr. Edwardo Blanda I"
            ],
            [
                756,
                "Mr. Randal Lynch III"
            ],
            [
                805,
                "Mrs. Liza Heller V"
            ],
            [
                826,
                "Mrs. Lilly Graham III"
            ],
            [
                882,
                "Miss Felicita Reichel"
            ],
            [
                892,
                "Sydnie Friesen"
            ],
            [
                923,
                "David Ross"
            ],
            [
                956,
                "Cai Zhang"
            ],
            [
                996,
                "Jay Chou"
            ]
        ]
    },
    {
        "question": "What is the ordered list of customer ids?",
        "query": "MATCH (customers:`insurance_fnol.Customers`)\nRETURN customers.Customer_ID,customers.Customer_name\nORDER BY customers.Customer_ID ASC",
        "db_id": "insurance_fnol",
        "answers": [
            [
                194,
                "America Jaskolski"
            ],
            [
                214,
                "Ellsworth Paucek"
            ],
            [
                256,
                "Mrs. Hanna Willms"
            ],
            [
                562,
                "Dr. Diana Rath"
            ],
            [
                582,
                "Selena Gerhold"
            ],
            [
                641,
                "Dayana Robel"
            ],
            [
                682,
                "Mr. Edwardo Blanda I"
            ],
            [
                756,
                "Mr. Randal Lynch III"
            ],
            [
                805,
                "Mrs. Liza Heller V"
            ],
            [
                826,
                "Mrs. Lilly Graham III"
            ],
            [
                882,
                "Miss Felicita Reichel"
            ],
            [
                892,
                "Sydnie Friesen"
            ],
            [
                923,
                "David Ross"
            ],
            [
                956,
                "Cai Zhang"
            ],
            [
                996,
                "Jay Chou"
            ]
        ]
    },
    {
        "question": "How many kinds of enzymes are there?",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nRETURN count(*)",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "What is the total count of enzymes?",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nRETURN count(*)",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "List the name of enzymes in descending lexicographical order.",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nRETURN enzyme.name\nORDER BY enzyme.name DESC",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                "Uroporphyrinogen III synthase"
            ],
            [
                "Uroporphyrinogen III decarboxylase"
            ],
            [
                "Protoporphyrinogen oxidase"
            ],
            [
                "PBG deaminase"
            ],
            [
                "Ferrochelatase"
            ],
            [
                "Coproporphyrinogen III oxidase"
            ],
            [
                "ALA synthase"
            ],
            [
                "ALA dehydratase"
            ]
        ]
    },
    {
        "question": "What are the names of enzymes in descending order?",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nRETURN enzyme.name\nORDER BY enzyme.name DESC",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                "Uroporphyrinogen III synthase"
            ],
            [
                "Uroporphyrinogen III decarboxylase"
            ],
            [
                "Protoporphyrinogen oxidase"
            ],
            [
                "PBG deaminase"
            ],
            [
                "Ferrochelatase"
            ],
            [
                "Coproporphyrinogen III oxidase"
            ],
            [
                "ALA synthase"
            ],
            [
                "ALA dehydratase"
            ]
        ]
    },
    {
        "question": "List the names and the locations that the enzymes can make an effect.",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nRETURN enzyme.name,enzyme.Location",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                "ALA synthase",
                "Mitochondrion"
            ],
            [
                "ALA dehydratase",
                "Cytosol"
            ],
            [
                "PBG deaminase",
                "Cytosol"
            ],
            [
                "Uroporphyrinogen III synthase",
                "Cytosol"
            ],
            [
                "Uroporphyrinogen III decarboxylase",
                "Cytosol"
            ],
            [
                "Coproporphyrinogen III oxidase",
                "Mitochondrion"
            ],
            [
                "Protoporphyrinogen oxidase",
                "Mitochondrion"
            ],
            [
                "Ferrochelatase",
                "Mitochondrion"
            ]
        ]
    },
    {
        "question": "What are the names and locations of all enzymes listed?",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nRETURN enzyme.name,enzyme.Location",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                "ALA synthase",
                "Mitochondrion"
            ],
            [
                "ALA dehydratase",
                "Cytosol"
            ],
            [
                "PBG deaminase",
                "Cytosol"
            ],
            [
                "Uroporphyrinogen III synthase",
                "Cytosol"
            ],
            [
                "Uroporphyrinogen III decarboxylase",
                "Cytosol"
            ],
            [
                "Coproporphyrinogen III oxidase",
                "Mitochondrion"
            ],
            [
                "Protoporphyrinogen oxidase",
                "Mitochondrion"
            ],
            [
                "Ferrochelatase",
                "Mitochondrion"
            ]
        ]
    },
    {
        "question": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nRETURN max(enzyme.OMIM)",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                606938
            ]
        ]
    },
    {
        "question": "What is the maximum OMIM value in the database?",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nRETURN max(enzyme.OMIM)",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                606938
            ]
        ]
    },
    {
        "question": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nWHERE enzyme.Location = 'Cytosol'\nRETURN enzyme.Product,enzyme.Chromosome,enzyme.Porphyria",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                "Porphobilinogen",
                "9q34",
                "ALA-Dehydratase deficiency"
            ],
            [
                "Hydroxymethyl bilane",
                "11q23.3",
                "acute intermittent porphyria"
            ],
            [
                "Uroporphyrinogen III",
                "10q25.2-q26.3",
                "congenital erythropoietic porphyria"
            ],
            [
                "Coproporphyrinogen III",
                "1p34",
                "porphyria cutanea tarda"
            ]
        ]
    },
    {
        "question": "What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'?",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nWHERE enzyme.Location = 'Cytosol'\nRETURN enzyme.Product,enzyme.Chromosome,enzyme.Porphyria",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                "Porphobilinogen",
                "9q34",
                "ALA-Dehydratase deficiency"
            ],
            [
                "Hydroxymethyl bilane",
                "11q23.3",
                "acute intermittent porphyria"
            ],
            [
                "Uroporphyrinogen III",
                "10q25.2-q26.3",
                "congenital erythropoietic porphyria"
            ],
            [
                "Coproporphyrinogen III",
                "1p34",
                "porphyria cutanea tarda"
            ]
        ]
    },
    {
        "question": "What are the names of enzymes who does not produce 'Heme'?",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nWHERE enzyme.Product <> 'Heme'\nRETURN enzyme.name",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                "ALA synthase"
            ],
            [
                "ALA dehydratase"
            ],
            [
                "PBG deaminase"
            ],
            [
                "Uroporphyrinogen III synthase"
            ],
            [
                "Uroporphyrinogen III decarboxylase"
            ],
            [
                "Coproporphyrinogen III oxidase"
            ],
            [
                "Protoporphyrinogen oxidase"
            ]
        ]
    },
    {
        "question": "What are the names of enzymes whose product is not 'Heme'?",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nWHERE enzyme.Product <> 'Heme'\nRETURN enzyme.name",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                "ALA synthase"
            ],
            [
                "ALA dehydratase"
            ],
            [
                "PBG deaminase"
            ],
            [
                "Uroporphyrinogen III synthase"
            ],
            [
                "Uroporphyrinogen III decarboxylase"
            ],
            [
                "Coproporphyrinogen III oxidase"
            ],
            [
                "Protoporphyrinogen oxidase"
            ]
        ]
    },
    {
        "question": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?",
        "query": "MATCH (medicine:`medicine_enzyme_interaction.medicine`)\nWHERE medicine.FDA_approved = 'Yes'\nRETURN medicine.name,medicine.Trade_Name",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                "Aripiprazole",
                "Abilify"
            ],
            [
                "Asenapine",
                "Saphris"
            ],
            [
                "Clozapine",
                "Clozaril"
            ],
            [
                "Iloperidone",
                "Fanapt"
            ],
            [
                "Lurasidone",
                "Latuda"
            ],
            [
                "Olanzapine",
                "Zyprexa"
            ],
            [
                "Paliperidone",
                "Invega"
            ],
            [
                "Quetiapine",
                "Seroquel"
            ],
            [
                "Risperidone",
                "Risperdal"
            ],
            [
                "Ziprasidone",
                "Geodon"
            ]
        ]
    },
    {
        "question": "What are the names and trade names of the medcines that are FDA approved?",
        "query": "MATCH (medicine:`medicine_enzyme_interaction.medicine`)\nWHERE medicine.FDA_approved = 'Yes'\nRETURN medicine.name,medicine.Trade_Name",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                "Aripiprazole",
                "Abilify"
            ],
            [
                "Asenapine",
                "Saphris"
            ],
            [
                "Clozapine",
                "Clozaril"
            ],
            [
                "Iloperidone",
                "Fanapt"
            ],
            [
                "Lurasidone",
                "Latuda"
            ],
            [
                "Olanzapine",
                "Zyprexa"
            ],
            [
                "Paliperidone",
                "Invega"
            ],
            [
                "Quetiapine",
                "Seroquel"
            ],
            [
                "Risperidone",
                "Risperdal"
            ],
            [
                "Ziprasidone",
                "Geodon"
            ]
        ]
    },
    {
        "question": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?",
        "query": "MATCH (T1:`medicine_enzyme_interaction.enzyme`)-[T2:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-(T3:`medicine_enzyme_interaction.medicine`)\nWHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'\nRETURN T1.name",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                "ALA synthase"
            ]
        ]
    },
    {
        "question": "What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?",
        "query": "MATCH (T1:`medicine_enzyme_interaction.enzyme`)-[T2:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-(T3:`medicine_enzyme_interaction.medicine`)\nWHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'\nRETURN T1.name",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                "ALA synthase"
            ]
        ]
    },
    {
        "question": "What are the ids and names of the medicine that can interact with two or more enzymes?",
        "query": "MATCH (T1:`medicine_enzyme_interaction.medicine`)-[T2:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-()\nWITH count(*) AS count, T1.id AS id, T1.name AS name\nWHERE count  >= 2\nRETURN id,name",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                2,
                "Aripiprazole"
            ],
            [
                3,
                "Asenapine"
            ],
            [
                8,
                "Iloperidone"
            ],
            [
                20,
                "Ziprasidone"
            ]
        ]
    },
    {
        "question": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?",
        "query": "MATCH (T1:`medicine_enzyme_interaction.medicine`)-[T2:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-()\nWITH count(*) AS count, T1.id AS id, T1.name AS name\nWHERE count  >= 2\nRETURN id,name",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                2,
                "Aripiprazole"
            ],
            [
                3,
                "Asenapine"
            ],
            [
                8,
                "Iloperidone"
            ],
            [
                20,
                "Ziprasidone"
            ]
        ]
    },
    {
        "question": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.",
        "query": "MATCH (T1:`medicine_enzyme_interaction.medicine`)-[T2:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-()\nWITH T1.name AS name, T1.FDA_approved AS FDA_approved, T1.id AS id, count(T1.id) AS count\nRETURN id,name,FDA_approved\nORDER BY count DESC",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                2,
                "Aripiprazole",
                "Yes"
            ],
            [
                3,
                "Asenapine",
                "Yes"
            ],
            [
                8,
                "Iloperidone",
                "Yes"
            ],
            [
                20,
                "Ziprasidone",
                "Yes"
            ],
            [
                1,
                "Amisulpride",
                "No"
            ],
            [
                4,
                "Blonanserin",
                "No"
            ],
            [
                5,
                "Carpipramine",
                "No"
            ],
            [
                6,
                "Clocapramine",
                "No"
            ],
            [
                7,
                "Clozapine",
                "Yes"
            ],
            [
                9,
                "Lurasidone",
                "Yes"
            ],
            [
                10,
                "Melperone",
                "No"
            ],
            [
                13,
                "Paliperidone",
                "Yes"
            ],
            [
                19,
                "Sulpiride",
                "No"
            ]
        ]
    },
    {
        "question": "What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?",
        "query": "MATCH (T1:`medicine_enzyme_interaction.medicine`)-[T2:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-()\nWITH T1.name AS name, T1.FDA_approved AS FDA_approved, T1.id AS id, count(T1.id) AS count\nRETURN id,name,FDA_approved\nORDER BY count DESC",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                2,
                "Aripiprazole",
                "Yes"
            ],
            [
                3,
                "Asenapine",
                "Yes"
            ],
            [
                8,
                "Iloperidone",
                "Yes"
            ],
            [
                20,
                "Ziprasidone",
                "Yes"
            ],
            [
                1,
                "Amisulpride",
                "No"
            ],
            [
                4,
                "Blonanserin",
                "No"
            ],
            [
                5,
                "Carpipramine",
                "No"
            ],
            [
                6,
                "Clocapramine",
                "No"
            ],
            [
                7,
                "Clozapine",
                "Yes"
            ],
            [
                9,
                "Lurasidone",
                "Yes"
            ],
            [
                10,
                "Melperone",
                "No"
            ],
            [
                13,
                "Paliperidone",
                "Yes"
            ],
            [
                19,
                "Sulpiride",
                "No"
            ]
        ]
    },
    {
        "question": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?",
        "query": "MATCH (T1:`medicine_enzyme_interaction.enzyme`)-[T2:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-()\nWHERE T2.interaction_type = 'activitor'\nWITH T1.name AS name, T1.id AS id, count(T1.id) AS count\nRETURN id,name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                4,
                "Uroporphyrinogen III synthase"
            ]
        ]
    },
    {
        "question": "What is the id and name of the enzyme that can interact with the most medicines as an activator?",
        "query": "MATCH (T1:`medicine_enzyme_interaction.enzyme`)-[T2:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-()\nWHERE T2.interaction_type = 'activitor'\nWITH T1.name AS name, T1.id AS id, count(T1.id) AS count\nRETURN id,name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                4,
                "Uroporphyrinogen III synthase"
            ]
        ]
    },
    {
        "question": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "query": "MATCH ()-[T1:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-(T2:`medicine_enzyme_interaction.medicine`)-[]-(T3:`medicine_enzyme_interaction.enzyme`)\nWHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole'\nRETURN T1.interaction_type",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                "inhibitor"
            ],
            [
                "inhibitor"
            ]
        ]
    },
    {
        "question": "What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "query": "MATCH ()-[T1:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-(T2:`medicine_enzyme_interaction.medicine`)-[]-(T3:`medicine_enzyme_interaction.enzyme`)\nWHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole'\nRETURN T1.interaction_type",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                "inhibitor"
            ],
            [
                "inhibitor"
            ]
        ]
    },
    {
        "question": "How many medicines have the FDA approval status 'No' ?",
        "query": "MATCH (medicine:`medicine_enzyme_interaction.medicine`)\nWHERE medicine.FDA_approved = 'No'\nRETURN count(*)",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "question": "How many medicines were not approved by the FDA?",
        "query": "MATCH (medicine:`medicine_enzyme_interaction.medicine`)\nWHERE medicine.FDA_approved = 'No'\nRETURN count(*)",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "question": "How many enzymes do not have any interactions?",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nWHERE NOT (enzyme:`medicine_enzyme_interaction.enzyme`)-[:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-()\nRETURN count(*)",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "What is the count of enzymes without any interactions?",
        "query": "MATCH (enzyme:`medicine_enzyme_interaction.enzyme`)\nWHERE NOT (enzyme:`medicine_enzyme_interaction.enzyme`)-[:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-()\nRETURN count(*)",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "What is the id and trade name of the medicines can interact with at least 3 enzymes?",
        "query": "MATCH (T1:`medicine_enzyme_interaction.medicine`)-[T2:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-()\nWITH count(*) AS count, T1.id AS id, T1.Trade_Name AS Trade_Name\nWHERE count  >= 3\nRETURN id,Trade_Name",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                2,
                "Abilify"
            ],
            [
                3,
                "Saphris"
            ]
        ]
    },
    {
        "question": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?",
        "query": "MATCH (T1:`medicine_enzyme_interaction.medicine`)-[T2:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-()\nWITH count(*) AS count, T1.id AS id, T1.Trade_Name AS Trade_Name\nWHERE count  >= 3\nRETURN id,Trade_Name",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                2,
                "Abilify"
            ],
            [
                3,
                "Saphris"
            ]
        ]
    },
    {
        "question": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?",
        "query": "MATCH (T1:`medicine_enzyme_interaction.enzyme`)-[T2:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-()\nWHERE T2.interaction_type = 'inhibitor'\nRETURN DISTINCT T1.name,T1.Location,T1.Product",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                "ALA synthase",
                "Mitochondrion",
                "\u03b4-Aminolevulinic acid"
            ],
            [
                "ALA dehydratase",
                "Cytosol",
                "Porphobilinogen"
            ],
            [
                "PBG deaminase",
                "Cytosol",
                "Hydroxymethyl bilane"
            ]
        ]
    },
    {
        "question": "What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?",
        "query": "MATCH (T1:`medicine_enzyme_interaction.enzyme`)-[T2:`medicine_enzyme_interaction.medicine_enzyme_interaction`]-()\nWHERE T2.interaction_type = 'inhibitor'\nRETURN DISTINCT T1.name,T1.Location,T1.Product",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                "ALA synthase",
                "Mitochondrion",
                "\u03b4-Aminolevulinic acid"
            ],
            [
                "ALA dehydratase",
                "Cytosol",
                "Porphobilinogen"
            ],
            [
                "PBG deaminase",
                "Cytosol",
                "Hydroxymethyl bilane"
            ]
        ]
    },
    {
        "question": "How many distinct FDA approval statuses are there for the medicines?",
        "query": "MATCH (medicine:`medicine_enzyme_interaction.medicine`)\nRETURN count(DISTINCT medicine.FDA_approved)",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "How many different FDA approval statuses exist for medicines?",
        "query": "MATCH (medicine:`medicine_enzyme_interaction.medicine`)\nRETURN count(DISTINCT medicine.FDA_approved)",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "find the number of medicines offered by each trade.",
        "query": "MATCH (medicine:`medicine_enzyme_interaction.medicine`)\nWITH count(medicine.Trade_Name) AS count, medicine.Trade_Name AS Trade_Name\nRETURN Trade_Name,count",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                "Solian",
                1
            ],
            [
                "Abilify",
                1
            ],
            [
                "Saphris",
                1
            ],
            [
                "Lonasen",
                1
            ],
            [
                "Prazinil",
                1
            ],
            [
                "Clofekton",
                1
            ],
            [
                "Clozaril",
                1
            ],
            [
                "Fanapt",
                1
            ],
            [
                "Latuda",
                1
            ],
            [
                "Buronil",
                1
            ],
            [
                "Cremin",
                1
            ],
            [
                "Zyprexa",
                1
            ],
            [
                "Invega",
                1
            ],
            [
                "Lullan",
                1
            ],
            [
                "Seroquel",
                1
            ],
            [
                "Roxiam",
                1
            ],
            [
                "Risperdal",
                1
            ],
            [
                "Serdolect",
                1
            ],
            [
                "Sulpirid",
                1
            ],
            [
                "Geodon",
                1
            ],
            [
                "Nipolept",
                1
            ]
        ]
    },
    {
        "question": "How many medicines are offered by each trade name?",
        "query": "MATCH (medicine:`medicine_enzyme_interaction.medicine`)\nWITH count(medicine.Trade_Name) AS count, medicine.Trade_Name AS Trade_Name\nRETURN Trade_Name,count",
        "db_id": "medicine_enzyme_interaction",
        "answers": [
            [
                "Solian",
                1
            ],
            [
                "Abilify",
                1
            ],
            [
                "Saphris",
                1
            ],
            [
                "Lonasen",
                1
            ],
            [
                "Prazinil",
                1
            ],
            [
                "Clofekton",
                1
            ],
            [
                "Clozaril",
                1
            ],
            [
                "Fanapt",
                1
            ],
            [
                "Latuda",
                1
            ],
            [
                "Buronil",
                1
            ],
            [
                "Cremin",
                1
            ],
            [
                "Zyprexa",
                1
            ],
            [
                "Invega",
                1
            ],
            [
                "Lullan",
                1
            ],
            [
                "Seroquel",
                1
            ],
            [
                "Roxiam",
                1
            ],
            [
                "Risperdal",
                1
            ],
            [
                "Serdolect",
                1
            ],
            [
                "Sulpirid",
                1
            ],
            [
                "Geodon",
                1
            ],
            [
                "Nipolept",
                1
            ]
        ]
    },
    {
        "question": "List all schools and their nicknames in the order of founded year.",
        "query": "MATCH (university:`university_basketball.university`)\nRETURN university.School,university.Nickname\nORDER BY university.Founded",
        "db_id": "university_basketball",
        "answers": [
            [
                "University of Delaware",
                "Fightin' Blue Hens"
            ],
            [
                "Rutgers University",
                "Scarlet Knights"
            ],
            [
                "Lebanon Valley College",
                "Flying Dutchmen"
            ],
            [
                "University of Rhode Island",
                "Rams"
            ],
            [
                "Stony Brook University",
                "Seawolves"
            ]
        ]
    },
    {
        "question": "What are the different schools and their nicknames, ordered by their founding years?",
        "query": "MATCH (university:`university_basketball.university`)\nRETURN university.School,university.Nickname\nORDER BY university.Founded",
        "db_id": "university_basketball",
        "answers": [
            [
                "University of Delaware",
                "Fightin' Blue Hens"
            ],
            [
                "Rutgers University",
                "Scarlet Knights"
            ],
            [
                "Lebanon Valley College",
                "Flying Dutchmen"
            ],
            [
                "University of Rhode Island",
                "Rams"
            ],
            [
                "Stony Brook University",
                "Seawolves"
            ]
        ]
    },
    {
        "question": "List all public schools and their locations.",
        "query": "MATCH (university:`university_basketball.university`)\nWHERE university.Affiliation = 'Public'\nRETURN university.School,university.Location",
        "db_id": "university_basketball",
        "answers": [
            [
                "University of Delaware",
                "Newark, DE"
            ],
            [
                "University of Rhode Island",
                "Kingston, RI"
            ],
            [
                "Rutgers University",
                "New Brunswick, NJ"
            ],
            [
                "Stony Brook University",
                "Stony Brook, NY"
            ]
        ]
    },
    {
        "question": "What are the public schools and what are their locations?",
        "query": "MATCH (university:`university_basketball.university`)\nWHERE university.Affiliation = 'Public'\nRETURN university.School,university.Location",
        "db_id": "university_basketball",
        "answers": [
            [
                "University of Delaware",
                "Newark, DE"
            ],
            [
                "University of Rhode Island",
                "Kingston, RI"
            ],
            [
                "Rutgers University",
                "New Brunswick, NJ"
            ],
            [
                "Stony Brook University",
                "Stony Brook, NY"
            ]
        ]
    },
    {
        "question": "When was the school with the largest enrollment founded?",
        "query": "MATCH (university:`university_basketball.university`)\nRETURN university.Founded\nORDER BY university.Enrollment DESC\nLIMIT 1",
        "db_id": "university_basketball",
        "answers": [
            [
                1766.0
            ]
        ]
    },
    {
        "question": "Return the founded year for the school with the largest enrollment.",
        "query": "MATCH (university:`university_basketball.university`)\nRETURN university.Founded\nORDER BY university.Enrollment DESC\nLIMIT 1",
        "db_id": "university_basketball",
        "answers": [
            [
                1766.0
            ]
        ]
    },
    {
        "question": "Find the founded year of the newest non public school.",
        "query": "MATCH (university:`university_basketball.university`)\nWHERE university.Affiliation <> 'Public'\nRETURN university.Founded\nORDER BY university.Founded DESC\nLIMIT 1",
        "db_id": "university_basketball",
        "answers": [
            [
                1866.0
            ]
        ]
    },
    {
        "question": "What is the founded year of the non public school that was founded most recently?",
        "query": "MATCH (university:`university_basketball.university`)\nWHERE university.Affiliation <> 'Public'\nRETURN university.Founded\nORDER BY university.Founded DESC\nLIMIT 1",
        "db_id": "university_basketball",
        "answers": [
            [
                1866.0
            ]
        ]
    },
    {
        "question": "How many schools are in the basketball match?",
        "query": "MATCH (basketball_match:`university_basketball.basketball_match`)\nRETURN count(DISTINCT basketball_match.School_ID)",
        "db_id": "university_basketball",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "Count the number of schools that have had basketball matches.",
        "query": "MATCH (basketball_match:`university_basketball.basketball_match`)\nRETURN count(DISTINCT basketball_match.School_ID)",
        "db_id": "university_basketball",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "What is the highest acc percent score in the competition?",
        "query": "MATCH (basketball_match:`university_basketball.basketball_match`)\nRETURN basketball_match.ACC_Percent\nORDER BY basketball_match.ACC_Percent DESC\nLIMIT 1",
        "db_id": "university_basketball",
        "answers": [
            [
                ".875"
            ]
        ]
    },
    {
        "question": "Return the highest acc percent across all basketball matches.",
        "query": "MATCH (basketball_match:`university_basketball.basketball_match`)\nRETURN basketball_match.ACC_Percent\nORDER BY basketball_match.ACC_Percent DESC\nLIMIT 1",
        "db_id": "university_basketball",
        "answers": [
            [
                ".875"
            ]
        ]
    },
    {
        "question": "What are the average enrollment size of the universities that are founded before 1850?",
        "query": "MATCH (university:`university_basketball.university`)\nWHERE university.Founded < 1850\nRETURN avg(university.Enrollment)",
        "db_id": "university_basketball",
        "answers": [
            [
                37967.5
            ]
        ]
    },
    {
        "question": "Return the average enrollment of universities founded before 1850.",
        "query": "MATCH (university:`university_basketball.university`)\nWHERE university.Founded < 1850\nRETURN avg(university.Enrollment)",
        "db_id": "university_basketball",
        "answers": [
            [
                37967.5
            ]
        ]
    },
    {
        "question": "Show the enrollment and primary_conference of the oldest college.",
        "query": "MATCH (university:`university_basketball.university`)\nRETURN university.Enrollment,university.Primary_conference\nORDER BY university.Founded\nLIMIT 1",
        "db_id": "university_basketball",
        "answers": [
            [
                19067.0,
                "Colonial Athletic Association ( D-I )"
            ]
        ]
    },
    {
        "question": "What are the enrollment and primary conference for the university which was founded the earliest?",
        "query": "MATCH (university:`university_basketball.university`)\nRETURN university.Enrollment,university.Primary_conference\nORDER BY university.Founded\nLIMIT 1",
        "db_id": "university_basketball",
        "answers": [
            [
                19067.0,
                "Colonial Athletic Association ( D-I )"
            ]
        ]
    },
    {
        "question": "How many schools do not participate in the basketball match?",
        "query": "MATCH (university:`university_basketball.university`)\nWHERE NOT (university:`university_basketball.university`)-[]-(:`university_basketball.basketball_match`)\nRETURN count(*)",
        "db_id": "university_basketball",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "Count the number of universities that do not participate in the baketball match.",
        "query": "MATCH (university:`university_basketball.university`)\nWHERE NOT (university:`university_basketball.university`)-[]-(:`university_basketball.basketball_match`)\nRETURN count(*)",
        "db_id": "university_basketball",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "Find the schools that were either founded after 1850 or public.",
        "query": "MATCH (university:`university_basketball.university`)\nWHERE university.Founded > 1850 OR university.Affiliation = 'Public'\nRETURN university.School",
        "db_id": "university_basketball",
        "answers": [
            [
                "University of Delaware"
            ],
            [
                "Lebanon Valley College"
            ],
            [
                "University of Rhode Island"
            ],
            [
                "Rutgers University"
            ],
            [
                "Stony Brook University"
            ]
        ]
    },
    {
        "question": "What are the schools that were either founded before 1850 or are public?",
        "query": "MATCH (university:`university_basketball.university`)\nWHERE university.Founded > 1850 OR university.Affiliation = 'Public'\nRETURN university.School",
        "db_id": "university_basketball",
        "answers": [
            [
                "University of Delaware"
            ],
            [
                "Lebanon Valley College"
            ],
            [
                "University of Rhode Island"
            ],
            [
                "Rutgers University"
            ],
            [
                "Stony Brook University"
            ]
        ]
    },
    {
        "question": "Find how many different affiliation types there are.",
        "query": "MATCH (university:`university_basketball.university`)\nRETURN count(DISTINCT university.Affiliation)",
        "db_id": "university_basketball",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "Count the number of different affiliation types.",
        "query": "MATCH (university:`university_basketball.university`)\nRETURN count(DISTINCT university.Affiliation)",
        "db_id": "university_basketball",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "Find the number of universities that have over a 20000 enrollment size for each affiliation type.",
        "query": "MATCH (university:`university_basketball.university`)\nWHERE university.Enrollment > 20000\nWITH university.Affiliation AS Affiliation, count(university.Affiliation) AS count\nRETURN count,Affiliation",
        "db_id": "university_basketball",
        "answers": [
            [
                2,
                "Public"
            ]
        ]
    },
    {
        "question": "What are the different affiliations, and how many schools with each have an enrollment size of above 20000?",
        "query": "MATCH (university:`university_basketball.university`)\nWHERE university.Enrollment > 20000\nWITH university.Affiliation AS Affiliation, count(university.Affiliation) AS count\nRETURN count,Affiliation",
        "db_id": "university_basketball",
        "answers": [
            [
                2,
                "Public"
            ]
        ]
    },
    {
        "question": "What is the maximum enrollment across all schools?",
        "query": "MATCH (university:`university_basketball.university`)\nRETURN max(university.Enrollment)",
        "db_id": "university_basketball",
        "answers": [
            [
                56868.0
            ]
        ]
    },
    {
        "question": "Return the maximum enrollment across all schools.",
        "query": "MATCH (university:`university_basketball.university`)\nRETURN max(university.Enrollment)",
        "db_id": "university_basketball",
        "answers": [
            [
                56868.0
            ]
        ]
    },
    {
        "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order.",
        "query": "MATCH (basketball_match:`university_basketball.basketball_match`)\nRETURN basketball_match.Team_Name\nORDER BY basketball_match.All_Home DESC",
        "db_id": "university_basketball",
        "answers": [
            [
                "Duke"
            ],
            [
                "Virginia Tech"
            ],
            [
                "North Carolina"
            ],
            [
                "Clemson"
            ]
        ]
    },
    {
        "question": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?",
        "query": "MATCH (basketball_match:`university_basketball.basketball_match`)\nRETURN basketball_match.Team_Name\nORDER BY basketball_match.All_Home DESC",
        "db_id": "university_basketball",
        "answers": [
            [
                "Duke"
            ],
            [
                "Virginia Tech"
            ],
            [
                "North Carolina"
            ],
            [
                "Clemson"
            ]
        ]
    },
    {
        "question": "the names of models that launched between 2002 and 2004.",
        "query": "MATCH (chip_model:`phone_1.chip_model`)\nWHERE 2002<=chip_model.Launch_year<=2004\nRETURN chip_model.Model_name",
        "db_id": "phone_1",
        "answers": [
            [
                "X5"
            ],
            [
                "X5 high end"
            ],
            [
                "X3 Basic"
            ],
            [
                "X3 Advanced"
            ],
            [
                "X3i"
            ],
            [
                "X30 low-end"
            ],
            [
                "X30 mid-range"
            ],
            [
                "X30 high-end"
            ],
            [
                "X50 Standard"
            ],
            [
                "X50 Advanced"
            ],
            [
                "X50v"
            ]
        ]
    },
    {
        "question": "Which model has the least amount of RAM? List the model name and the amount of RAM.",
        "query": "MATCH (chip_model:`phone_1.chip_model`)\nRETURN chip_model.Model_name,chip_model.RAM_MiB\nORDER BY chip_model.RAM_MiB ASC\nLIMIT 1",
        "db_id": "phone_1",
        "answers": [
            [
                "X5",
                32.0
            ]
        ]
    },
    {
        "question": "What are the chip model and screen mode of the phone with hardware model name \"LG-P760\"?",
        "query": "MATCH (phone:`phone_1.phone`)\nWHERE phone.Hardware_Model_name = \"LG-P760\"\nRETURN phone.chip_model,phone.screen_mode",
        "db_id": "phone_1",
        "answers": [
            [
                "X51v",
                "3"
            ]
        ]
    },
    {
        "question": "How many phone hardware models are produced by the company named \"Nokia Corporation\"?",
        "query": "MATCH (phone:`phone_1.phone`)\nWHERE phone.Company_name = 'Nokia Corporation'\nRETURN count(*)",
        "db_id": "phone_1",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.",
        "query": "MATCH (phone:`phone_1.phone`)\nWHERE phone.Accreditation_type =~'.*[F|f]ull.*'\nRETURN phone.Hardware_Model_name,phone.Company_name",
        "db_id": "phone_1",
        "answers": [
            [
                "XPERIA T, XPERIA J",
                "Sony Mobile Communications"
            ],
            [
                "LG-P760",
                "LG Electronics"
            ],
            [
                "Lumia 920, Lumia 820, Lumia 620",
                "Nokia Corporation"
            ],
            [
                "GT-I9300",
                "Samsung Electronics Co Ltd"
            ]
        ]
    },
    {
        "question": "List the name of the company that produced more than one phone model.",
        "query": "MATCH (phone:`phone_1.phone`)\nWITH count(*) AS count, phone.Company_name AS Company_name\nWHERE count  > 1\nRETURN Company_name",
        "db_id": "phone_1",
        "answers": [
            [
                "Nokia Corporation"
            ],
            [
                "Samsung Electronics Co Ltd"
            ]
        ]
    },
    {
        "question": "List the maximum, minimum and average number of used kb in screen mode.",
        "query": "MATCH (screen_mode:`phone_1.screen_mode`)\nRETURN max(screen_mode.used_kb),min(screen_mode.used_kb),avg(screen_mode.used_kb)",
        "db_id": "phone_1",
        "answers": [
            [
                20.0,
                8.0,
                14.857142857142858
            ]
        ]
    },
    {
        "question": "Find the number of phones for each accreditation type.",
        "query": "MATCH (phone:`phone_1.phone`)\nWITH phone.Accreditation_type AS Accreditation_type, count(phone.Accreditation_type) AS count\nRETURN Accreditation_type,count",
        "db_id": "phone_1",
        "answers": [
            [
                "Full",
                4
            ],
            [
                "Provisional",
                4
            ]
        ]
    },
    {
        "question": "How many phones belongs to each accreditation type?",
        "query": "MATCH (phone:`phone_1.phone`)\nWITH phone.Accreditation_type AS Accreditation_type, count(phone.Accreditation_type) AS count\nRETURN Accreditation_type,count",
        "db_id": "phone_1",
        "answers": [
            [
                "Full",
                4
            ],
            [
                "Provisional",
                4
            ]
        ]
    },
    {
        "question": "Find the accreditation level that more than 3 phones use.",
        "query": "MATCH (phone:`phone_1.phone`)\nWITH count(*) AS count, phone.Accreditation_level AS Accreditation_level\nWHERE count  > 3\nRETURN Accreditation_level",
        "db_id": "phone_1",
        "answers": [
            [
                "joyn"
            ]
        ]
    },
    {
        "question": "How many models do not have the wifi function?",
        "query": "MATCH (chip_model:`phone_1.chip_model`)\nWHERE chip_model.WiFi = 'No'\nRETURN count(*)",
        "db_id": "phone_1",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "Count the number of chip model that do not have wifi.",
        "query": "MATCH (chip_model:`phone_1.chip_model`)\nWHERE chip_model.WiFi = 'No'\nRETURN count(*)",
        "db_id": "phone_1",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "List all the model names sorted by their launch year.",
        "query": "MATCH (chip_model:`phone_1.chip_model`)\nRETURN chip_model.Model_name\nORDER BY chip_model.Launch_year",
        "db_id": "phone_1",
        "answers": [
            [
                "X5"
            ],
            [
                "X5 high end"
            ],
            [
                "X3 Basic"
            ],
            [
                "X3 Advanced"
            ],
            [
                "X3i"
            ],
            [
                "X30 low-end"
            ],
            [
                "X30 mid-range"
            ],
            [
                "X30 high-end"
            ],
            [
                "X50 Standard"
            ],
            [
                "X50 Advanced"
            ],
            [
                "X50v"
            ],
            [
                "X51 low-end"
            ],
            [
                "X51 mid-range"
            ],
            [
                "X51v"
            ]
        ]
    },
    {
        "question": "How many countries are there in total?",
        "query": "MATCH (country:`match_season.country`)\nRETURN count(*)",
        "db_id": "match_season",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "Count the number of countries.",
        "query": "MATCH (country:`match_season.country`)\nRETURN count(*)",
        "db_id": "match_season",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "Show the country name and capital of all countries.",
        "query": "MATCH (country:`match_season.country`)\nRETURN country.Country_name,country.Capital",
        "db_id": "match_season",
        "answers": [
            [
                "Indonesia",
                "Jakarta"
            ],
            [
                "Iran",
                "Tehran"
            ],
            [
                "Iraq",
                "Baghdad"
            ],
            [
                "Ireland",
                "Dublin"
            ],
            [
                "Isle of Man",
                "Douglas"
            ],
            [
                "United States",
                "Washington"
            ]
        ]
    },
    {
        "question": "What are the names and capitals of each country?",
        "query": "MATCH (country:`match_season.country`)\nRETURN country.Country_name,country.Capital",
        "db_id": "match_season",
        "answers": [
            [
                "Indonesia",
                "Jakarta"
            ],
            [
                "Iran",
                "Tehran"
            ],
            [
                "Iraq",
                "Baghdad"
            ],
            [
                "Ireland",
                "Dublin"
            ],
            [
                "Isle of Man",
                "Douglas"
            ],
            [
                "United States",
                "Washington"
            ]
        ]
    },
    {
        "question": "Show all distinct positions of matches.",
        "query": "MATCH (match_season:`match_season.match_season`)\nRETURN DISTINCT match_season.Position",
        "db_id": "match_season",
        "answers": [
            [
                "Midfielder"
            ],
            [
                "Defender"
            ],
            [
                "Forward"
            ]
        ]
    },
    {
        "question": "What are the different positions for match season?",
        "query": "MATCH (match_season:`match_season.match_season`)\nRETURN DISTINCT match_season.Position",
        "db_id": "match_season",
        "answers": [
            [
                "Midfielder"
            ],
            [
                "Defender"
            ],
            [
                "Forward"
            ]
        ]
    },
    {
        "question": "Show the players from college UCLA.",
        "query": "MATCH (match_season:`match_season.match_season`)\nWHERE match_season.College = 'UCLA'\nRETURN match_season.Player",
        "db_id": "match_season",
        "answers": [
            [
                "Carlos Bocanegra Category:Articles with hCards"
            ],
            [
                "Jonathan Bornstein Category:Articles with hCards"
            ]
        ]
    },
    {
        "question": "Who are the players from UCLA?",
        "query": "MATCH (match_season:`match_season.match_season`)\nWHERE match_season.College = 'UCLA'\nRETURN match_season.Player",
        "db_id": "match_season",
        "answers": [
            [
                "Carlos Bocanegra Category:Articles with hCards"
            ],
            [
                "Jonathan Bornstein Category:Articles with hCards"
            ]
        ]
    },
    {
        "question": "Show the distinct position of players from college UCLA or Duke.",
        "query": "MATCH (match_season:`match_season.match_season`)\nWHERE match_season.College = 'UCLA' OR match_season.College = 'Duke'\nRETURN DISTINCT match_season.Position",
        "db_id": "match_season",
        "answers": [
            [
                "Defender"
            ]
        ]
    },
    {
        "question": "What are the different positions of players from UCLA or Duke colleges?",
        "query": "MATCH (match_season:`match_season.match_season`)\nWHERE match_season.College = 'UCLA' OR match_season.College = 'Duke'\nRETURN DISTINCT match_season.Position",
        "db_id": "match_season",
        "answers": [
            [
                "Defender"
            ]
        ]
    },
    {
        "question": "Show the draft pick numbers and draft classes of players whose positions are defenders.",
        "query": "MATCH (match_season:`match_season.match_season`)\nWHERE match_season.Position = 'Defender'\nRETURN match_season.Draft_Pick_Number,match_season.Draft_Class",
        "db_id": "match_season",
        "answers": [
            [
                87,
                "1996 MLS Inaugural Player Draft"
            ],
            [
                5,
                "1999 MLS College Draft"
            ],
            [
                4,
                "2000 MLS SuperDraft"
            ],
            [
                9,
                "2005 MLS SuperDraft"
            ],
            [
                37,
                "2006 MLS SuperDraft"
            ],
            [
                4,
                "2008 MLS SuperDraft"
            ],
            [
                3,
                "2009 MLS SuperDraft"
            ]
        ]
    },
    {
        "question": "What are the draft pick numbers and draft classes for players who play the Defender position?",
        "query": "MATCH (match_season:`match_season.match_season`)\nWHERE match_season.Position = 'Defender'\nRETURN match_season.Draft_Pick_Number,match_season.Draft_Class",
        "db_id": "match_season",
        "answers": [
            [
                87,
                "1996 MLS Inaugural Player Draft"
            ],
            [
                5,
                "1999 MLS College Draft"
            ],
            [
                4,
                "2000 MLS SuperDraft"
            ],
            [
                9,
                "2005 MLS SuperDraft"
            ],
            [
                37,
                "2006 MLS SuperDraft"
            ],
            [
                4,
                "2008 MLS SuperDraft"
            ],
            [
                3,
                "2009 MLS SuperDraft"
            ]
        ]
    },
    {
        "question": "How many distinct teams are involved in match seasons?",
        "query": "MATCH (match_season:`match_season.match_season`)\nRETURN count(DISTINCT match_season.Team)",
        "db_id": "match_season",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "Count the number of different teams involved in match season.",
        "query": "MATCH (match_season:`match_season.match_season`)\nRETURN count(DISTINCT match_season.Team)",
        "db_id": "match_season",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "Show the players and the years played.",
        "query": "MATCH (player:`match_season.player`)\nRETURN player.Player,player.Years_Played",
        "db_id": "match_season",
        "answers": [
            [
                "Cho Soong-Jae (630)",
                "1 (2011)"
            ],
            [
                "Chung Hong (717)",
                "1 (2011)"
            ],
            [
                "Im Kyu-tae (492)",
                "8 (2003\u20132005, 2007\u20132011)"
            ],
            [
                "Jeong Suk-Young (793)",
                "2 (2010\u20132011)"
            ],
            [
                "Kim Hyun-Joon (908)",
                "2 (2010\u20132011)"
            ],
            [
                "Kim Young-Jun (474)",
                "4 (2003\u20132004, 2010\u20132011)"
            ],
            [
                "Lim Yong-Kyu (288)",
                "3 (2009\u20132011)"
            ],
            [
                "Seol Jae-Min (none)",
                "2 (2010-2011)"
            ],
            [
                "An Jae-Sung",
                "3 (2005, 2007\u20132008)"
            ],
            [
                "Bae Nam-Ju",
                "2 (1988, 1990)"
            ]
        ]
    },
    {
        "question": "Who are the different players and how many years has each played?",
        "query": "MATCH (player:`match_season.player`)\nRETURN player.Player,player.Years_Played",
        "db_id": "match_season",
        "answers": [
            [
                "Cho Soong-Jae (630)",
                "1 (2011)"
            ],
            [
                "Chung Hong (717)",
                "1 (2011)"
            ],
            [
                "Im Kyu-tae (492)",
                "8 (2003\u20132005, 2007\u20132011)"
            ],
            [
                "Jeong Suk-Young (793)",
                "2 (2010\u20132011)"
            ],
            [
                "Kim Hyun-Joon (908)",
                "2 (2010\u20132011)"
            ],
            [
                "Kim Young-Jun (474)",
                "4 (2003\u20132004, 2010\u20132011)"
            ],
            [
                "Lim Yong-Kyu (288)",
                "3 (2009\u20132011)"
            ],
            [
                "Seol Jae-Min (none)",
                "2 (2010-2011)"
            ],
            [
                "An Jae-Sung",
                "3 (2005, 2007\u20132008)"
            ],
            [
                "Bae Nam-Ju",
                "2 (1988, 1990)"
            ]
        ]
    },
    {
        "question": "Show all team names.",
        "query": "MATCH (team:`match_season.team`)\nRETURN team.Name",
        "db_id": "match_season",
        "answers": [
            [
                "Columbus Crew"
            ],
            [
                "Evalyn Feil"
            ],
            [
                "Anais VonRueden"
            ],
            [
                "Miami Fusion"
            ],
            [
                "Enrique Osinski"
            ],
            [
                "Brown Erdman"
            ],
            [
                "Los Angeles Galaxy"
            ],
            [
                "Berneice Hand"
            ],
            [
                "Ryley Goldner"
            ],
            [
                "D.C. United"
            ]
        ]
    },
    {
        "question": "What are the names of all teams?",
        "query": "MATCH (team:`match_season.team`)\nRETURN team.Name",
        "db_id": "match_season",
        "answers": [
            [
                "Columbus Crew"
            ],
            [
                "Evalyn Feil"
            ],
            [
                "Anais VonRueden"
            ],
            [
                "Miami Fusion"
            ],
            [
                "Enrique Osinski"
            ],
            [
                "Brown Erdman"
            ],
            [
                "Los Angeles Galaxy"
            ],
            [
                "Berneice Hand"
            ],
            [
                "Ryley Goldner"
            ],
            [
                "D.C. United"
            ]
        ]
    },
    {
        "question": "Show the players and years played for players from team \"Columbus Crew\".",
        "query": "MATCH (T1:`match_season.player`)-[]-(T2:`match_season.team`)\nWHERE T2.Name = 'Columbus Crew'\nRETURN T1.Player,T1.Years_Played",
        "db_id": "match_season",
        "answers": [
            [
                "Chung Hong (717)",
                "1 (2011)"
            ],
            [
                "An Jae-Sung",
                "3 (2005, 2007\u20132008)"
            ],
            [
                "Im Kyu-tae (492)",
                "8 (2003\u20132005, 2007\u20132011)"
            ],
            [
                "Jeong Suk-Young (793)",
                "2 (2010\u20132011)"
            ],
            [
                "Seol Jae-Min (none)",
                "2 (2010-2011)"
            ],
            [
                "Cho Soong-Jae (630)",
                "1 (2011)"
            ]
        ]
    },
    {
        "question": "What are the players who played for Columbus Crew, and how many years did each play for?",
        "query": "MATCH (T1:`match_season.player`)-[]-(T2:`match_season.team`)\nWHERE T2.Name = 'Columbus Crew'\nRETURN T1.Player,T1.Years_Played",
        "db_id": "match_season",
        "answers": [
            [
                "Chung Hong (717)",
                "1 (2011)"
            ],
            [
                "An Jae-Sung",
                "3 (2005, 2007\u20132008)"
            ],
            [
                "Im Kyu-tae (492)",
                "8 (2003\u20132005, 2007\u20132011)"
            ],
            [
                "Jeong Suk-Young (793)",
                "2 (2010\u20132011)"
            ],
            [
                "Seol Jae-Min (none)",
                "2 (2010-2011)"
            ],
            [
                "Cho Soong-Jae (630)",
                "1 (2011)"
            ]
        ]
    },
    {
        "question": "Show the position of players and the corresponding number of players.",
        "query": "MATCH (match_season:`match_season.match_season`)\nWITH match_season.Position AS Position, count(match_season.Position) AS count\nRETURN Position,count",
        "db_id": "match_season",
        "answers": [
            [
                "Midfielder",
                6
            ],
            [
                "Defender",
                7
            ],
            [
                "Forward",
                3
            ]
        ]
    },
    {
        "question": "How many players played each position?",
        "query": "MATCH (match_season:`match_season.match_season`)\nWITH match_season.Position AS Position, count(match_season.Position) AS count\nRETURN Position,count",
        "db_id": "match_season",
        "answers": [
            [
                "Midfielder",
                6
            ],
            [
                "Defender",
                7
            ],
            [
                "Forward",
                3
            ]
        ]
    },
    {
        "question": "Return all players sorted by college in ascending alphabetical order.",
        "query": "MATCH (match_season:`match_season.match_season`)\nRETURN match_season.Player\nORDER BY match_season.College ASC",
        "db_id": "match_season",
        "answers": [
            [
                "Sean Franklin Category:Articles with hCards"
            ],
            [
                "Rodrigo Faria Category:Articles with hCards"
            ],
            [
                "Damani Ralph Category:Articles with hCards"
            ],
            [
                "Jay Heaps Category:Articles with hCards"
            ],
            [
                "Steve Ralston Category:Articles with hCards"
            ],
            [
                "Clint Dempsey Category:Articles with hCards"
            ],
            [
                "C. J. Sapong Category:Articles with hCards"
            ],
            [
                "Maurice Edu Category:Articles with hCards"
            ],
            [
                "Omar Gonzalez Category:Articles with hCards"
            ],
            [
                "Carlos Bocanegra Category:Articles with hCards"
            ],
            [
                "Jonathan Bornstein Category:Articles with hCards"
            ],
            [
                "Mike Duhaney Category:Articles with hCards"
            ],
            [
                "Ben Olsen Category:Articles with hCards"
            ],
            [
                "Kyle Martino Category:Articles with hCards"
            ],
            [
                "Michael Parkhurst Category:Articles with hCards"
            ],
            [
                "Andy Najar Category:Articles with hCards"
            ]
        ]
    },
    {
        "question": "What are all the players who played in match season, sorted by college in ascending alphabetical order?",
        "query": "MATCH (match_season:`match_season.match_season`)\nRETURN match_season.Player\nORDER BY match_season.College ASC",
        "db_id": "match_season",
        "answers": [
            [
                "Sean Franklin Category:Articles with hCards"
            ],
            [
                "Rodrigo Faria Category:Articles with hCards"
            ],
            [
                "Damani Ralph Category:Articles with hCards"
            ],
            [
                "Jay Heaps Category:Articles with hCards"
            ],
            [
                "Steve Ralston Category:Articles with hCards"
            ],
            [
                "Clint Dempsey Category:Articles with hCards"
            ],
            [
                "C. J. Sapong Category:Articles with hCards"
            ],
            [
                "Maurice Edu Category:Articles with hCards"
            ],
            [
                "Omar Gonzalez Category:Articles with hCards"
            ],
            [
                "Carlos Bocanegra Category:Articles with hCards"
            ],
            [
                "Jonathan Bornstein Category:Articles with hCards"
            ],
            [
                "Mike Duhaney Category:Articles with hCards"
            ],
            [
                "Ben Olsen Category:Articles with hCards"
            ],
            [
                "Kyle Martino Category:Articles with hCards"
            ],
            [
                "Michael Parkhurst Category:Articles with hCards"
            ],
            [
                "Andy Najar Category:Articles with hCards"
            ]
        ]
    },
    {
        "question": "Show the most common position of players in match seasons.",
        "query": "MATCH (match_season:`match_season.match_season`)\nWITH match_season.Position AS Position, count(match_season.Position) AS count\nRETURN Position\nORDER BY count DESC\nLIMIT 1",
        "db_id": "match_season",
        "answers": [
            [
                "Defender"
            ]
        ]
    },
    {
        "question": "What is the position that is most common among players in match seasons?",
        "query": "MATCH (match_season:`match_season.match_season`)\nWITH match_season.Position AS Position, count(match_season.Position) AS count\nRETURN Position\nORDER BY count DESC\nLIMIT 1",
        "db_id": "match_season",
        "answers": [
            [
                "Defender"
            ]
        ]
    },
    {
        "question": "Show the top 3 most common colleges of players in match seasons.",
        "query": "MATCH (match_season:`match_season.match_season`)\nWITH match_season.College AS College, count(match_season.College) AS count\nRETURN College\nORDER BY count DESC\nLIMIT 3",
        "db_id": "match_season",
        "answers": [
            [
                "UCLA"
            ],
            [
                "Virginia"
            ],
            [
                "Maryland"
            ]
        ]
    },
    {
        "question": "What are the three colleges from which the most players are from?",
        "query": "MATCH (match_season:`match_season.match_season`)\nWITH match_season.College AS College, count(match_season.College) AS count\nRETURN College\nORDER BY count DESC\nLIMIT 3",
        "db_id": "match_season",
        "answers": [
            [
                "UCLA"
            ],
            [
                "Virginia"
            ],
            [
                "Maryland"
            ]
        ]
    },
    {
        "question": "Show the name of colleges that have at least two players.",
        "query": "MATCH (match_season:`match_season.match_season`)\nWITH count(*) AS count, match_season.College AS College\nWHERE count  >= 2\nRETURN College",
        "db_id": "match_season",
        "answers": [
            [
                "Virginia"
            ],
            [
                "UCLA"
            ],
            [
                "Maryland"
            ]
        ]
    },
    {
        "question": "What are the names of all colleges that have two or more players?",
        "query": "MATCH (match_season:`match_season.match_season`)\nWITH count(*) AS count, match_season.College AS College\nWHERE count  >= 2\nRETURN College",
        "db_id": "match_season",
        "answers": [
            [
                "Virginia"
            ],
            [
                "UCLA"
            ],
            [
                "Maryland"
            ]
        ]
    },
    {
        "question": "How many climbers are there?",
        "query": "MATCH (climber:`climbing.climber`)\nRETURN count(*)",
        "db_id": "climbing",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "Count the number of climbers.",
        "query": "MATCH (climber:`climbing.climber`)\nRETURN count(*)",
        "db_id": "climbing",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "List the names of climbers in descending order of points.",
        "query": "MATCH (climber:`climbing.climber`)\nRETURN climber.Name\nORDER BY climber.Points DESC",
        "db_id": "climbing",
        "answers": [
            [
                "Klaus Enders"
            ],
            [
                "Siegfried Schauzu"
            ],
            [
                "Hans Luthringhauser"
            ],
            [
                "Jean Claude Castella"
            ],
            [
                "Horst Owesle"
            ],
            [
                "Georg Auerbacher"
            ],
            [
                "Arseneus Butscher"
            ],
            [
                "Charlie Freedman"
            ],
            [
                "L Currie"
            ],
            [
                "Mick Horsepole"
            ]
        ]
    },
    {
        "question": "What are the names of the climbers, ordered by points descending?",
        "query": "MATCH (climber:`climbing.climber`)\nRETURN climber.Name\nORDER BY climber.Points DESC",
        "db_id": "climbing",
        "answers": [
            [
                "Klaus Enders"
            ],
            [
                "Siegfried Schauzu"
            ],
            [
                "Hans Luthringhauser"
            ],
            [
                "Jean Claude Castella"
            ],
            [
                "Horst Owesle"
            ],
            [
                "Georg Auerbacher"
            ],
            [
                "Arseneus Butscher"
            ],
            [
                "Charlie Freedman"
            ],
            [
                "L Currie"
            ],
            [
                "Mick Horsepole"
            ]
        ]
    },
    {
        "question": "List the names of climbers whose country is not Switzerland.",
        "query": "MATCH (climber:`climbing.climber`)\nWHERE climber.Country <> 'Switzerland'\nRETURN climber.Name",
        "db_id": "climbing",
        "answers": [
            [
                "Klaus Enders"
            ],
            [
                "Siegfried Schauzu"
            ],
            [
                "Hans Luthringhauser"
            ],
            [
                "Horst Owesle"
            ],
            [
                "Georg Auerbacher"
            ],
            [
                "Arseneus Butscher"
            ],
            [
                "Charlie Freedman"
            ],
            [
                "L Currie"
            ],
            [
                "Mick Horsepole"
            ]
        ]
    },
    {
        "question": "What are the names of climbers who are not from the country of Switzerland?",
        "query": "MATCH (climber:`climbing.climber`)\nWHERE climber.Country <> 'Switzerland'\nRETURN climber.Name",
        "db_id": "climbing",
        "answers": [
            [
                "Klaus Enders"
            ],
            [
                "Siegfried Schauzu"
            ],
            [
                "Hans Luthringhauser"
            ],
            [
                "Horst Owesle"
            ],
            [
                "Georg Auerbacher"
            ],
            [
                "Arseneus Butscher"
            ],
            [
                "Charlie Freedman"
            ],
            [
                "L Currie"
            ],
            [
                "Mick Horsepole"
            ]
        ]
    },
    {
        "question": "What is the maximum point for climbers whose country is United Kingdom?",
        "query": "MATCH (climber:`climbing.climber`)\nWHERE climber.Country = 'United Kingdom'\nRETURN max(climber.Points)",
        "db_id": "climbing",
        "answers": [
            [
                3.0
            ]
        ]
    },
    {
        "question": "Return the maximum number of points for climbers from the United Kingdom.",
        "query": "MATCH (climber:`climbing.climber`)\nWHERE climber.Country = 'United Kingdom'\nRETURN max(climber.Points)",
        "db_id": "climbing",
        "answers": [
            [
                3.0
            ]
        ]
    },
    {
        "question": "How many distinct countries are the climbers from?",
        "query": "MATCH (climber:`climbing.climber`)\nRETURN count(DISTINCT climber.Country)",
        "db_id": "climbing",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Count the number of different countries that climbers are from.",
        "query": "MATCH (climber:`climbing.climber`)\nRETURN count(DISTINCT climber.Country)",
        "db_id": "climbing",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "What are the names of mountains in ascending alphabetical order?",
        "query": "MATCH (mountain:`climbing.mountain`)\nRETURN mountain.Name\nORDER BY mountain.Name ASC",
        "db_id": "climbing",
        "answers": [
            [
                "Duwoni / Mt Speke (Vittorio Emanuele Pk)"
            ],
            [
                "Kibo (Uhuru Pk)"
            ],
            [
                "Mawenzi (Hans Meyer Pk)"
            ],
            [
                "Mount Kenya (Batian)"
            ],
            [
                "Mount Kenya (Lenana)"
            ],
            [
                "Ngaliema / Mt Stanley (Margherita Pk)"
            ],
            [
                "Ngaliema / Mt Stanley (Savoia Pk)"
            ]
        ]
    },
    {
        "question": "Give the names of mountains in alphabetical order.",
        "query": "MATCH (mountain:`climbing.mountain`)\nRETURN mountain.Name\nORDER BY mountain.Name ASC",
        "db_id": "climbing",
        "answers": [
            [
                "Duwoni / Mt Speke (Vittorio Emanuele Pk)"
            ],
            [
                "Kibo (Uhuru Pk)"
            ],
            [
                "Mawenzi (Hans Meyer Pk)"
            ],
            [
                "Mount Kenya (Batian)"
            ],
            [
                "Mount Kenya (Lenana)"
            ],
            [
                "Ngaliema / Mt Stanley (Margherita Pk)"
            ],
            [
                "Ngaliema / Mt Stanley (Savoia Pk)"
            ]
        ]
    },
    {
        "question": "What are the countries of mountains with height bigger than 5000?",
        "query": "MATCH (mountain:`climbing.mountain`)\nWHERE mountain.Height > 5000\nRETURN mountain.Country",
        "db_id": "climbing",
        "answers": [
            [
                "Tanzania"
            ],
            [
                "Kenya"
            ],
            [
                "Tanzania"
            ],
            [
                "DR Congo Uganda"
            ]
        ]
    },
    {
        "question": "Return the countries of the mountains that have a height larger than 5000.",
        "query": "MATCH (mountain:`climbing.mountain`)\nWHERE mountain.Height > 5000\nRETURN mountain.Country",
        "db_id": "climbing",
        "answers": [
            [
                "Tanzania"
            ],
            [
                "Kenya"
            ],
            [
                "Tanzania"
            ],
            [
                "DR Congo Uganda"
            ]
        ]
    },
    {
        "question": "What is the name of the highest mountain?",
        "query": "MATCH (mountain:`climbing.mountain`)\nRETURN mountain.Name\nORDER BY mountain.Height DESC\nLIMIT 1",
        "db_id": "climbing",
        "answers": [
            [
                "Kibo (Uhuru Pk)"
            ]
        ]
    },
    {
        "question": "Return the name of the mountain with the greatest height.",
        "query": "MATCH (mountain:`climbing.mountain`)\nRETURN mountain.Name\nORDER BY mountain.Height DESC\nLIMIT 1",
        "db_id": "climbing",
        "answers": [
            [
                "Kibo (Uhuru Pk)"
            ]
        ]
    },
    {
        "question": "Show names of climbers and the names of mountains they climb.",
        "query": "MATCH (T1:`climbing.climber`)-[]-(T2:`climbing.mountain`)\nRETURN T1.Name,T2.Name",
        "db_id": "climbing",
        "answers": [
            [
                "Klaus Enders",
                "Kibo (Uhuru Pk)"
            ],
            [
                "Siegfried Schauzu",
                "Kibo (Uhuru Pk)"
            ],
            [
                "Hans Luthringhauser",
                "Mount Kenya (Batian)"
            ],
            [
                "Jean Claude Castella",
                "Mount Kenya (Batian)"
            ],
            [
                "Horst Owesle",
                "Mount Kenya (Batian)"
            ],
            [
                "Georg Auerbacher",
                "Mawenzi (Hans Meyer Pk)"
            ],
            [
                "Arseneus Butscher",
                "Mount Kenya (Lenana)"
            ],
            [
                "Charlie Freedman",
                "Mount Kenya (Lenana)"
            ],
            [
                "L Currie",
                "Duwoni / Mt Speke (Vittorio Emanuele Pk)"
            ],
            [
                "Mick Horsepole",
                "Duwoni / Mt Speke (Vittorio Emanuele Pk)"
            ]
        ]
    },
    {
        "question": "What are the names of climbers and the corresponding names of mountains that they climb?",
        "query": "MATCH (T1:`climbing.climber`)-[]-(T2:`climbing.mountain`)\nRETURN T1.Name,T2.Name",
        "db_id": "climbing",
        "answers": [
            [
                "Klaus Enders",
                "Kibo (Uhuru Pk)"
            ],
            [
                "Siegfried Schauzu",
                "Kibo (Uhuru Pk)"
            ],
            [
                "Hans Luthringhauser",
                "Mount Kenya (Batian)"
            ],
            [
                "Jean Claude Castella",
                "Mount Kenya (Batian)"
            ],
            [
                "Horst Owesle",
                "Mount Kenya (Batian)"
            ],
            [
                "Georg Auerbacher",
                "Mawenzi (Hans Meyer Pk)"
            ],
            [
                "Arseneus Butscher",
                "Mount Kenya (Lenana)"
            ],
            [
                "Charlie Freedman",
                "Mount Kenya (Lenana)"
            ],
            [
                "L Currie",
                "Duwoni / Mt Speke (Vittorio Emanuele Pk)"
            ],
            [
                "Mick Horsepole",
                "Duwoni / Mt Speke (Vittorio Emanuele Pk)"
            ]
        ]
    },
    {
        "question": "Show the names of climbers and the heights of mountains they climb.",
        "query": "MATCH (T1:`climbing.climber`)-[]-(T2:`climbing.mountain`)\nRETURN T1.Name,T2.Height",
        "db_id": "climbing",
        "answers": [
            [
                "Klaus Enders",
                5895.0
            ],
            [
                "Siegfried Schauzu",
                5895.0
            ],
            [
                "Hans Luthringhauser",
                5199.0
            ],
            [
                "Jean Claude Castella",
                5199.0
            ],
            [
                "Horst Owesle",
                5199.0
            ],
            [
                "Georg Auerbacher",
                5148.0
            ],
            [
                "Arseneus Butscher",
                4985.0
            ],
            [
                "Charlie Freedman",
                4985.0
            ],
            [
                "L Currie",
                4890.0
            ],
            [
                "Mick Horsepole",
                4890.0
            ]
        ]
    },
    {
        "question": "What are the names of climbers and the corresponding heights of the mountains that they climb?",
        "query": "MATCH (T1:`climbing.climber`)-[]-(T2:`climbing.mountain`)\nRETURN T1.Name,T2.Height",
        "db_id": "climbing",
        "answers": [
            [
                "Klaus Enders",
                5895.0
            ],
            [
                "Siegfried Schauzu",
                5895.0
            ],
            [
                "Hans Luthringhauser",
                5199.0
            ],
            [
                "Jean Claude Castella",
                5199.0
            ],
            [
                "Horst Owesle",
                5199.0
            ],
            [
                "Georg Auerbacher",
                5148.0
            ],
            [
                "Arseneus Butscher",
                4985.0
            ],
            [
                "Charlie Freedman",
                4985.0
            ],
            [
                "L Currie",
                4890.0
            ],
            [
                "Mick Horsepole",
                4890.0
            ]
        ]
    },
    {
        "question": "Show the height of the mountain climbed by the climber with the maximum points.",
        "query": "MATCH (T1:`climbing.climber`)-[]-(T2:`climbing.mountain`)\nRETURN T2.Height\nORDER BY T1.Points DESC\nLIMIT 1",
        "db_id": "climbing",
        "answers": [
            [
                5895.0
            ]
        ]
    },
    {
        "question": "What is the height of the mountain climbined by the climbing who had the most points?",
        "query": "MATCH (T1:`climbing.climber`)-[]-(T2:`climbing.mountain`)\nRETURN T2.Height\nORDER BY T1.Points DESC\nLIMIT 1",
        "db_id": "climbing",
        "answers": [
            [
                5895.0
            ]
        ]
    },
    {
        "question": "Show the distinct names of mountains climbed by climbers from country \"West Germany\".",
        "query": "MATCH (T1:`climbing.climber`)-[]-(T2:`climbing.mountain`)\nWHERE T1.Country = 'West Germany'\nRETURN DISTINCT T2.Name",
        "db_id": "climbing",
        "answers": [
            [
                "Kibo (Uhuru Pk)"
            ],
            [
                "Mount Kenya (Batian)"
            ],
            [
                "Mawenzi (Hans Meyer Pk)"
            ],
            [
                "Mount Kenya (Lenana)"
            ]
        ]
    },
    {
        "question": "What are the different names of mountains ascended by climbers from the country of West Germany?",
        "query": "MATCH (T1:`climbing.climber`)-[]-(T2:`climbing.mountain`)\nWHERE T1.Country = 'West Germany'\nRETURN DISTINCT T2.Name",
        "db_id": "climbing",
        "answers": [
            [
                "Kibo (Uhuru Pk)"
            ],
            [
                "Mount Kenya (Batian)"
            ],
            [
                "Mawenzi (Hans Meyer Pk)"
            ],
            [
                "Mount Kenya (Lenana)"
            ]
        ]
    },
    {
        "question": "Show the times used by climbers to climb mountains in Country Uganda.",
        "query": "MATCH (T1:`climbing.climber`)-[]-(T2:`climbing.mountain`)\nWHERE T2.Country = 'Uganda'\nRETURN T1.Time",
        "db_id": "climbing",
        "answers": [
            [
                "1:25.40.6"
            ],
            [
                "1:27.28.8"
            ]
        ]
    },
    {
        "question": "What are the times used by climbers who climbed mountains in the country of Uganda?",
        "query": "MATCH (T1:`climbing.climber`)-[]-(T2:`climbing.mountain`)\nWHERE T2.Country = 'Uganda'\nRETURN T1.Time",
        "db_id": "climbing",
        "answers": [
            [
                "1:25.40.6"
            ],
            [
                "1:27.28.8"
            ]
        ]
    },
    {
        "question": "Please show the countries and the number of climbers from each country.",
        "query": "MATCH (climber:`climbing.climber`)\nWITH climber.Country AS Country, count(climber.Country) AS count\nRETURN Country,count",
        "db_id": "climbing",
        "answers": [
            [
                "West Germany",
                6
            ],
            [
                "Switzerland",
                1
            ],
            [
                "United Kingdom",
                3
            ]
        ]
    },
    {
        "question": "How many climbers are from each country?",
        "query": "MATCH (climber:`climbing.climber`)\nWITH climber.Country AS Country, count(climber.Country) AS count\nRETURN Country,count",
        "db_id": "climbing",
        "answers": [
            [
                "West Germany",
                6
            ],
            [
                "Switzerland",
                1
            ],
            [
                "United Kingdom",
                3
            ]
        ]
    },
    {
        "question": "List the countries that have more than one mountain.",
        "query": "MATCH (mountain:`climbing.mountain`)\nWITH mountain.Country AS Country, count(*) AS count\nWHERE count  > 1\nRETURN Country",
        "db_id": "climbing",
        "answers": [
            [
                "Tanzania"
            ],
            [
                "Kenya"
            ],
            [
                "Uganda"
            ]
        ]
    },
    {
        "question": "Which countries have more than one mountain?",
        "query": "MATCH (mountain:`climbing.mountain`)\nWITH mountain.Country AS Country, count(*) AS count\nWHERE count  > 1\nRETURN Country",
        "db_id": "climbing",
        "answers": [
            [
                "Tanzania"
            ],
            [
                "Kenya"
            ],
            [
                "Uganda"
            ]
        ]
    },
    {
        "question": "List the names of mountains that do not have any climber.",
        "query": "MATCH (mountain:`climbing.mountain`)\nWHERE NOT (mountain:`climbing.mountain`)-[]-(:`climbing.climber`)\nRETURN mountain.Name",
        "db_id": "climbing",
        "answers": [
            [
                "Ngaliema / Mt Stanley (Margherita Pk)"
            ],
            [
                "Ngaliema / Mt Stanley (Savoia Pk)"
            ]
        ]
    },
    {
        "question": "What are the names of countains that no climber has climbed?",
        "query": "MATCH (mountain:`climbing.mountain`)\nWHERE NOT (mountain:`climbing.mountain`)-[]-(:`climbing.climber`)\nRETURN mountain.Name",
        "db_id": "climbing",
        "answers": [
            [
                "Ngaliema / Mt Stanley (Margherita Pk)"
            ],
            [
                "Ngaliema / Mt Stanley (Savoia Pk)"
            ]
        ]
    },
    {
        "question": "Show the range that has the most number of mountains.",
        "query": "MATCH (mountain:`climbing.mountain`)\nWITH count(mountain.Range) AS count, mountain.Range AS Range\nRETURN Range\nORDER BY count DESC\nLIMIT 1",
        "db_id": "climbing",
        "answers": [
            [
                "Rwenzori"
            ]
        ]
    },
    {
        "question": "Which range contains the most mountains?",
        "query": "MATCH (mountain:`climbing.mountain`)\nWITH count(mountain.Range) AS count, mountain.Range AS Range\nRETURN Range\nORDER BY count DESC\nLIMIT 1",
        "db_id": "climbing",
        "answers": [
            [
                "Rwenzori"
            ]
        ]
    },
    {
        "question": "Show the names of mountains with height more than 5000 or prominence more than 1000.",
        "query": "MATCH (mountain:`climbing.mountain`)\nWHERE mountain.Height > 5000 OR mountain.Prominence > 1000\nRETURN mountain.Name",
        "db_id": "climbing",
        "answers": [
            [
                "Kibo (Uhuru Pk)"
            ],
            [
                "Mount Kenya (Batian)"
            ],
            [
                "Mawenzi (Hans Meyer Pk)"
            ],
            [
                "Ngaliema / Mt Stanley (Margherita Pk)"
            ]
        ]
    },
    {
        "question": "What are the names of mountains that have a height of over 5000 or a prominence of over 1000?",
        "query": "MATCH (mountain:`climbing.mountain`)\nWHERE mountain.Height > 5000 OR mountain.Prominence > 1000\nRETURN mountain.Name",
        "db_id": "climbing",
        "answers": [
            [
                "Kibo (Uhuru Pk)"
            ],
            [
                "Mount Kenya (Batian)"
            ],
            [
                "Mawenzi (Hans Meyer Pk)"
            ],
            [
                "Ngaliema / Mt Stanley (Margherita Pk)"
            ]
        ]
    },
    {
        "question": "How many body builders are there?",
        "query": "MATCH (body_builder:`body_builder.body_builder`)\nRETURN count(*)",
        "db_id": "body_builder",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "List the total scores of body builders in ascending order.",
        "query": "MATCH (body_builder:`body_builder.body_builder`)\nRETURN body_builder.Total\nORDER BY body_builder.Total ASC",
        "db_id": "body_builder",
        "answers": [
            [
                292.5
            ],
            [
                312.5
            ],
            [
                315.0
            ],
            [
                315.0
            ],
            [
                317.5
            ]
        ]
    },
    {
        "question": "List the snatch score and clean jerk score of body builders in ascending order of snatch score.",
        "query": "MATCH (body_builder:`body_builder.body_builder`)\nRETURN body_builder.Snatch,body_builder.Clean_Jerk\nORDER BY body_builder.Snatch ASC",
        "db_id": "body_builder",
        "answers": [
            [
                130.0,
                162.5
            ],
            [
                137.5,
                177.5
            ],
            [
                137.5,
                175.0
            ],
            [
                140.0,
                175.0
            ],
            [
                142.5,
                175.0
            ]
        ]
    },
    {
        "question": "What is the average snatch score of body builders?",
        "query": "MATCH (body_builder:`body_builder.body_builder`)\nRETURN avg(body_builder.Snatch)",
        "db_id": "body_builder",
        "answers": [
            [
                137.5
            ]
        ]
    },
    {
        "question": "What are the clean and jerk score of the body builder with the highest total score?",
        "query": "MATCH (body_builder:`body_builder.body_builder`)\nRETURN body_builder.Clean_Jerk\nORDER BY body_builder.Total DESC\nLIMIT 1",
        "db_id": "body_builder",
        "answers": [
            [
                175.0
            ]
        ]
    },
    {
        "question": "What are the birthdays of people in ascending order of height?",
        "query": "MATCH (people:`body_builder.people`)\nRETURN people.Birth_Date\nORDER BY people.Height ASC",
        "db_id": "body_builder",
        "answers": [
            [
                "January 1, 1992"
            ],
            [
                "March 30, 1976"
            ],
            [
                "February 13, 1985"
            ],
            [
                "December 5, 1991"
            ],
            [
                "July 4, 1990"
            ],
            [
                "May 5, 1987"
            ]
        ]
    },
    {
        "question": "What are the names of body builders?",
        "query": "MATCH (T1:`body_builder.body_builder`)-[]-(T2:`body_builder.people`)\nRETURN T2.Name",
        "db_id": "body_builder",
        "answers": [
            [
                "Jack Campbell"
            ],
            [
                "Ty Conklin"
            ],
            [
                "Al Montoya"
            ],
            [
                "Cam Fowler"
            ],
            [
                "Jake Gardiner"
            ]
        ]
    },
    {
        "question": "What are the names of body builders whose total score is higher than 300?",
        "query": "MATCH (T1:`body_builder.body_builder`)-[]-(T2:`body_builder.people`)\nWHERE T1.Total > 300\nRETURN T2.Name",
        "db_id": "body_builder",
        "answers": [
            [
                "Jack Campbell"
            ],
            [
                "Ty Conklin"
            ],
            [
                "Al Montoya"
            ],
            [
                "Cam Fowler"
            ]
        ]
    },
    {
        "question": "What is the name of the body builder with the greatest body weight?",
        "query": "MATCH (T1:`body_builder.body_builder`)-[]-(T2:`body_builder.people`)\nRETURN T2.Name\nORDER BY T2.Weight DESC\nLIMIT 1",
        "db_id": "body_builder",
        "answers": [
            [
                "Al Montoya"
            ]
        ]
    },
    {
        "question": "What are the birth date and birth place of the body builder with the highest total points?",
        "query": "MATCH (T1:`body_builder.body_builder`)-[]-(T2:`body_builder.people`)\nRETURN T2.Birth_Date,T2.Birth_Place\nORDER BY T1.Total DESC\nLIMIT 1",
        "db_id": "body_builder",
        "answers": [
            [
                "January 1, 1992",
                "Port Huron, Michigan"
            ]
        ]
    },
    {
        "question": "What are the heights of body builders with total score smaller than 315?",
        "query": "MATCH (T1:`body_builder.body_builder`)-[]-(T2:`body_builder.people`)\nWHERE T1.Total < 315\nRETURN T2.Height",
        "db_id": "body_builder",
        "answers": [
            [
                196.0
            ],
            [
                205.0
            ]
        ]
    },
    {
        "question": "What is the average total score of body builders with height bigger than 200?",
        "query": "MATCH (T1:`body_builder.body_builder`)-[]-(T2:`body_builder.people`)\nWHERE T2.Height > 200\nRETURN avg(T1.Total)",
        "db_id": "body_builder",
        "answers": [
            [
                292.5
            ]
        ]
    },
    {
        "question": "What are the names of body builders in descending order of total scores?",
        "query": "MATCH (T1:`body_builder.body_builder`)-[]-(T2:`body_builder.people`)\nRETURN T2.Name\nORDER BY T1.Total DESC",
        "db_id": "body_builder",
        "answers": [
            [
                "Jack Campbell"
            ],
            [
                "Ty Conklin"
            ],
            [
                "Al Montoya"
            ],
            [
                "Cam Fowler"
            ],
            [
                "Jake Gardiner"
            ]
        ]
    },
    {
        "question": "List each birth place along with the number of people from there.",
        "query": "MATCH (people:`body_builder.people`)\nWITH people.Birth_Place AS Birth_Place, count(people.Birth_Place) AS count\nRETURN Birth_Place,count",
        "db_id": "body_builder",
        "answers": [
            [
                "Port Huron, Michigan",
                1
            ],
            [
                "Anchorage, Alaska",
                1
            ],
            [
                "Glenview, Illinois",
                1
            ],
            [
                "Nashua, New Hampshire",
                1
            ],
            [
                "Farmington Hills, Michigan",
                1
            ],
            [
                "Minnetonka, Minnesota",
                1
            ]
        ]
    },
    {
        "question": "What is the most common birth place of people?",
        "query": "MATCH (people:`body_builder.people`)\nWITH people.Birth_Place AS Birth_Place, count(people.Birth_Place) AS count\nRETURN Birth_Place\nORDER BY count DESC\nLIMIT 1",
        "db_id": "body_builder",
        "answers": [
            [
                "Port Huron, Michigan"
            ]
        ]
    },
    {
        "question": "List the height and weight of people in descending order of height.",
        "query": "MATCH (people:`body_builder.people`)\nRETURN people.Height,people.Weight\nORDER BY people.Height DESC",
        "db_id": "body_builder",
        "answers": [
            [
                215.0,
                102.0
            ],
            [
                205.0,
                92.0
            ],
            [
                196.0,
                89.0
            ],
            [
                195.0,
                100.0
            ],
            [
                192.0,
                90.0
            ],
            [
                182.0,
                80.0
            ]
        ]
    },
    {
        "question": "How many distinct birth places are there?",
        "query": "MATCH (people:`body_builder.people`)\nRETURN count(DISTINCT people.Birth_Place)",
        "db_id": "body_builder",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "How many persons are not body builders?",
        "query": "MATCH (people:`body_builder.people`)\nWHERE NOT (people:`body_builder.people`)-[]-(:`body_builder.body_builder`)\nRETURN count(*)",
        "db_id": "body_builder",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.",
        "query": "MATCH (T1:`body_builder.body_builder`)-[]-(T2:`body_builder.people`)\nWHERE T1.Snatch > 140 OR T2.Height > 200\nRETURN T2.Weight",
        "db_id": "body_builder",
        "answers": [
            [
                80.0
            ],
            [
                92.0
            ]
        ]
    },
    {
        "question": "What is the minimum snatch score?",
        "query": "MATCH (body_builder:`body_builder.body_builder`)\nRETURN min(body_builder.Snatch)",
        "db_id": "body_builder",
        "answers": [
            [
                130.0
            ]
        ]
    },
    {
        "question": "How many elections are there?",
        "query": "MATCH (election:`election_representative.election`)\nRETURN count(*)",
        "db_id": "election_representative",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "List the votes of elections in descending order.",
        "query": "MATCH (election:`election_representative.election`)\nRETURN election.Votes\nORDER BY election.Votes DESC",
        "db_id": "election_representative",
        "answers": [
            [
                14077.0
            ],
            [
                13049.0
            ],
            [
                12422.0
            ],
            [
                11059.0
            ],
            [
                9423.0
            ]
        ]
    },
    {
        "question": "What are the minimum and maximum vote percents of elections?",
        "query": "MATCH (election:`election_representative.election`)\nRETURN min(election.Vote_Percent),max(election.Vote_Percent)",
        "db_id": "election_representative",
        "answers": [
            [
                16.0,
                19.5
            ]
        ]
    },
    {
        "question": "What are the names and parties of representatives?",
        "query": "MATCH (representative:`election_representative.representative`)\nRETURN representative.Name,representative.Party",
        "db_id": "election_representative",
        "answers": [
            [
                "Dan Quayle",
                "Republican"
            ],
            [
                "John Quayle",
                "Democratic"
            ],
            [
                "Al Quie",
                "Republican"
            ],
            [
                "James M. Quigley",
                "Democratic"
            ],
            [
                "Jimmy Quillen",
                "Republican"
            ],
            [
                "Jack Quinn",
                "Republican"
            ],
            [
                "James L. Quinn",
                "Democratic"
            ]
        ]
    },
    {
        "question": "What are the names of representatives whose party is not \"Republican\"?",
        "query": "MATCH (representative:`election_representative.representative`)\nWHERE representative.Party <> 'Republican'\nRETURN representative.Name",
        "db_id": "election_representative",
        "answers": [
            [
                "John Quayle"
            ],
            [
                "James M. Quigley"
            ],
            [
                "James L. Quinn"
            ]
        ]
    },
    {
        "question": "What are the life spans of representatives from New York state or Indiana state?",
        "query": "MATCH (representative:`election_representative.representative`)\nWHERE representative.State = 'New York' OR representative.State = 'Indiana'\nRETURN representative.Lifespan",
        "db_id": "election_representative",
        "answers": [
            [
                "1947\u2013"
            ],
            [
                "1868\u20131930"
            ],
            [
                "1951\u2013"
            ]
        ]
    },
    {
        "question": "What are the names of representatives and the dates of elections they participated in.",
        "query": "MATCH (T1:`election_representative.election`)-[]-(T2:`election_representative.representative`)\nRETURN T2.Name,T1.Date",
        "db_id": "election_representative",
        "answers": [
            [
                "Dan Quayle",
                "July 1942"
            ],
            [
                "John Quayle",
                "October 1942"
            ],
            [
                "James M. Quigley",
                "1946"
            ],
            [
                "Jimmy Quillen",
                "1949"
            ],
            [
                "James L. Quinn",
                "1953"
            ]
        ]
    },
    {
        "question": "What are the names of representatives with more than 10000 votes in election?",
        "query": "MATCH (T1:`election_representative.election`)-[]-(T2:`election_representative.representative`)\nWHERE T1.Votes > 10000\nRETURN T2.Name",
        "db_id": "election_representative",
        "answers": [
            [
                "John Quayle"
            ],
            [
                "James M. Quigley"
            ],
            [
                "Jimmy Quillen"
            ],
            [
                "James L. Quinn"
            ]
        ]
    },
    {
        "question": "What are the names of representatives in descending order of votes?",
        "query": "MATCH (T1:`election_representative.election`)-[]-(T2:`election_representative.representative`)\nRETURN T2.Name\nORDER BY T1.Votes DESC",
        "db_id": "election_representative",
        "answers": [
            [
                "Jimmy Quillen"
            ],
            [
                "James M. Quigley"
            ],
            [
                "James L. Quinn"
            ],
            [
                "John Quayle"
            ],
            [
                "Dan Quayle"
            ]
        ]
    },
    {
        "question": "What is the party of the representative that has the smallest number of votes.",
        "query": "MATCH (T1:`election_representative.election`)-[]-(T2:`election_representative.representative`)\nRETURN T2.Party\nORDER BY T1.Votes ASC\nLIMIT 1",
        "db_id": "election_representative",
        "answers": [
            [
                "Republican"
            ]
        ]
    },
    {
        "question": "What are the lifespans of representatives in descending order of vote percent?",
        "query": "MATCH (T1:`election_representative.election`)-[]-(T2:`election_representative.representative`)\nRETURN T2.Lifespan\nORDER BY T1.Vote_Percent DESC",
        "db_id": "election_representative",
        "answers": [
            [
                "1918\u2013"
            ],
            [
                "1916\u20132003"
            ],
            [
                "1868\u20131930"
            ],
            [
                "1947\u2013"
            ],
            [
                "1875\u20131960"
            ]
        ]
    },
    {
        "question": "What is the average number of votes of representatives from party \"Republican\"?",
        "query": "MATCH (T1:`election_representative.election`)-[]-(T2:`election_representative.representative`)\nWHERE T2.Party = 'Republican'\nRETURN avg(T1.Votes)",
        "db_id": "election_representative",
        "answers": [
            [
                11750.0
            ]
        ]
    },
    {
        "question": "What are the different parties of representative? Show the party name and the number of representatives in each party.",
        "query": "MATCH (representative:`election_representative.representative`)\nWITH count(representative.Party) AS count, representative.Party AS Party\nRETURN Party,count",
        "db_id": "election_representative",
        "answers": [
            [
                "Republican",
                4
            ],
            [
                "Democratic",
                3
            ]
        ]
    },
    {
        "question": "What is the party that has the largest number of representatives?",
        "query": "MATCH (representative:`election_representative.representative`)\nWITH count(representative.Party) AS count, representative.Party AS Party\nRETURN Party,count\nORDER BY count DESC\nLIMIT 1",
        "db_id": "election_representative",
        "answers": [
            [
                "Republican",
                4
            ]
        ]
    },
    {
        "question": "What parties have at least three representatives?",
        "query": "MATCH (representative:`election_representative.representative`)\nWITH count(*) AS count, representative.Party AS Party\nWHERE count  >= 3\nRETURN Party",
        "db_id": "election_representative",
        "answers": [
            [
                "Republican"
            ],
            [
                "Democratic"
            ]
        ]
    },
    {
        "question": "What states have at least two representatives?",
        "query": "MATCH (representative:`election_representative.representative`)\nWITH count(*) AS count, representative.State AS State\nWHERE count  >= 2\nRETURN State",
        "db_id": "election_representative",
        "answers": [
            [
                "New York"
            ],
            [
                "Pennsylvania"
            ]
        ]
    },
    {
        "question": "List the names of representatives that have not participated in elections listed here.",
        "query": "MATCH (representative:`election_representative.representative`)\nWHERE NOT (representative:`election_representative.representative`)-[]-(:`election_representative.election`)\nRETURN representative.Name",
        "db_id": "election_representative",
        "answers": [
            [
                "Al Quie"
            ],
            [
                "Jack Quinn"
            ]
        ]
    },
    {
        "question": "How many distinct parties are there for representatives?",
        "query": "MATCH (representative:`election_representative.representative`)\nRETURN count(DISTINCT representative.Party)",
        "db_id": "election_representative",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "How many apartment bookings are there in total?",
        "query": "MATCH (apartment_bookings:`apartment_rentals.Apartment_Bookings`)\nRETURN count(*)",
        "db_id": "apartment_rentals",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Count the total number of apartment bookings.",
        "query": "MATCH (apartment_bookings:`apartment_rentals.Apartment_Bookings`)\nRETURN count(*)",
        "db_id": "apartment_rentals",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Show the start dates and end dates of all the apartment bookings.",
        "query": "MATCH (apartment_bookings:`apartment_rentals.Apartment_Bookings`)\nRETURN apartment_bookings.booking_start_date,apartment_bookings.booking_end_date",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "2016-09-26 17:13:49",
                "2017-10-07 11:38:48"
            ],
            [
                "2016-04-01 06:28:08",
                "2017-10-25 11:08:42"
            ],
            [
                "2017-03-13 16:20:14",
                "2018-02-19 16:59:08"
            ],
            [
                "2016-08-04 10:33:00",
                "2017-09-29 12:43:50"
            ],
            [
                "2017-02-11 14:34:14",
                "2017-10-07 20:47:19"
            ],
            [
                "2016-05-24 20:09:38",
                "2017-10-03 01:56:21"
            ],
            [
                "2016-07-25 02:57:04",
                "2017-09-28 11:08:15"
            ],
            [
                "2016-11-26 05:04:31",
                "2018-02-25 15:15:37"
            ],
            [
                "2017-05-13 18:17:20",
                "2017-10-06 11:15:58"
            ],
            [
                "2017-03-04 02:23:49",
                "2018-02-06 16:57:05"
            ],
            [
                "2016-06-07 05:05:18",
                "2017-11-13 13:59:45"
            ],
            [
                "2016-04-17 12:53:59",
                "2018-03-20 17:32:58"
            ],
            [
                "2016-09-28 05:00:50",
                "2017-09-30 18:41:04"
            ],
            [
                "2017-04-07 04:53:27",
                "2017-11-29 12:59:42"
            ],
            [
                "2017-07-03 14:15:56",
                "2017-11-12 01:05:09"
            ]
        ]
    },
    {
        "question": "What are the start date and end date of each apartment booking?",
        "query": "MATCH (apartment_bookings:`apartment_rentals.Apartment_Bookings`)\nRETURN apartment_bookings.booking_start_date,apartment_bookings.booking_end_date",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "2016-09-26 17:13:49",
                "2017-10-07 11:38:48"
            ],
            [
                "2016-04-01 06:28:08",
                "2017-10-25 11:08:42"
            ],
            [
                "2017-03-13 16:20:14",
                "2018-02-19 16:59:08"
            ],
            [
                "2016-08-04 10:33:00",
                "2017-09-29 12:43:50"
            ],
            [
                "2017-02-11 14:34:14",
                "2017-10-07 20:47:19"
            ],
            [
                "2016-05-24 20:09:38",
                "2017-10-03 01:56:21"
            ],
            [
                "2016-07-25 02:57:04",
                "2017-09-28 11:08:15"
            ],
            [
                "2016-11-26 05:04:31",
                "2018-02-25 15:15:37"
            ],
            [
                "2017-05-13 18:17:20",
                "2017-10-06 11:15:58"
            ],
            [
                "2017-03-04 02:23:49",
                "2018-02-06 16:57:05"
            ],
            [
                "2016-06-07 05:05:18",
                "2017-11-13 13:59:45"
            ],
            [
                "2016-04-17 12:53:59",
                "2018-03-20 17:32:58"
            ],
            [
                "2016-09-28 05:00:50",
                "2017-09-30 18:41:04"
            ],
            [
                "2017-04-07 04:53:27",
                "2017-11-29 12:59:42"
            ],
            [
                "2017-07-03 14:15:56",
                "2017-11-12 01:05:09"
            ]
        ]
    },
    {
        "question": "Show all distinct building descriptions.",
        "query": "MATCH (apartment_buildings:`apartment_rentals.Apartment_Buildings`)\nRETURN DISTINCT apartment_buildings.building_description",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Studio"
            ],
            [
                "Flat"
            ],
            [
                "Duplex"
            ]
        ]
    },
    {
        "question": "Give me a list of all the distinct building descriptions.",
        "query": "MATCH (apartment_buildings:`apartment_rentals.Apartment_Buildings`)\nRETURN DISTINCT apartment_buildings.building_description",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Studio"
            ],
            [
                "Flat"
            ],
            [
                "Duplex"
            ]
        ]
    },
    {
        "question": "Show the short names of the buildings managed by \"Emma\".",
        "query": "MATCH (apartment_buildings:`apartment_rentals.Apartment_Buildings`)\nWHERE apartment_buildings.building_manager = 'Emma'\nRETURN apartment_buildings.building_short_name",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Normandie Court"
            ]
        ]
    },
    {
        "question": "Which buildings does \"Emma\" manage? Give me the short names of the buildings.",
        "query": "MATCH (apartment_buildings:`apartment_rentals.Apartment_Buildings`)\nWHERE apartment_buildings.building_manager = 'Emma'\nRETURN apartment_buildings.building_short_name",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Normandie Court"
            ]
        ]
    },
    {
        "question": "Show the addresses and phones of all the buildings managed by \"Brenden\".",
        "query": "MATCH (apartment_buildings:`apartment_rentals.Apartment_Buildings`)\nWHERE apartment_buildings.building_manager = 'Brenden'\nRETURN apartment_buildings.building_address,apartment_buildings.building_phone",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "354 Otto Villages\nCharliefort, VT 71664",
                "915-617-2408x832"
            ]
        ]
    },
    {
        "question": "What are the address and phone number of the buildings managed by \"Brenden\"?",
        "query": "MATCH (apartment_buildings:`apartment_rentals.Apartment_Buildings`)\nWHERE apartment_buildings.building_manager = 'Brenden'\nRETURN apartment_buildings.building_address,apartment_buildings.building_phone",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "354 Otto Villages\nCharliefort, VT 71664",
                "915-617-2408x832"
            ]
        ]
    },
    {
        "question": "What is the minimum and maximum number of bathrooms of all the apartments?",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nRETURN min(apartments.bathroom_count),max(apartments.bathroom_count)",
        "db_id": "apartment_rentals",
        "answers": [
            [
                1,
                3
            ]
        ]
    },
    {
        "question": "Give me the minimum and maximum bathroom count among all the apartments.",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nRETURN min(apartments.bathroom_count),max(apartments.bathroom_count)",
        "db_id": "apartment_rentals",
        "answers": [
            [
                1,
                3
            ]
        ]
    },
    {
        "question": "Return the apartment number and the number of rooms for each apartment.",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nRETURN apartments.apt_number,apartments.room_count",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Suite 645",
                "7"
            ],
            [
                "Apt. 585",
                "5"
            ],
            [
                "Apt. 908",
                "7"
            ],
            [
                "Suite 749",
                "8"
            ],
            [
                "Suite 307",
                "9"
            ],
            [
                "Apt. 187",
                "9"
            ],
            [
                "Suite 088",
                "6"
            ],
            [
                "Suite 693",
                "9"
            ],
            [
                "Apt. 940",
                "8"
            ],
            [
                "Apt. 859",
                "6"
            ],
            [
                "Apt. 794",
                "3"
            ],
            [
                "Apt. 477",
                "3"
            ],
            [
                "Apt. 411",
                "9"
            ],
            [
                "Apt. 837",
                "8"
            ],
            [
                "Suite 634",
                "8"
            ]
        ]
    },
    {
        "question": "What are the apartment number and the room count of each apartment?",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nRETURN apartments.apt_number,apartments.room_count",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Suite 645",
                "7"
            ],
            [
                "Apt. 585",
                "5"
            ],
            [
                "Apt. 908",
                "7"
            ],
            [
                "Suite 749",
                "8"
            ],
            [
                "Suite 307",
                "9"
            ],
            [
                "Apt. 187",
                "9"
            ],
            [
                "Suite 088",
                "6"
            ],
            [
                "Suite 693",
                "9"
            ],
            [
                "Apt. 940",
                "8"
            ],
            [
                "Apt. 859",
                "6"
            ],
            [
                "Apt. 794",
                "3"
            ],
            [
                "Apt. 477",
                "3"
            ],
            [
                "Apt. 411",
                "9"
            ],
            [
                "Apt. 837",
                "8"
            ],
            [
                "Suite 634",
                "8"
            ]
        ]
    },
    {
        "question": "Return the apartment numbers of the apartments with type code \"Flat\".",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nWHERE apartments.apt_type_code = 'Flat'\nRETURN apartments.apt_number",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Suite 645"
            ],
            [
                "Apt. 585"
            ],
            [
                "Suite 307"
            ],
            [
                "Suite 693"
            ],
            [
                "Apt. 794"
            ],
            [
                "Apt. 837"
            ]
        ]
    },
    {
        "question": "Which apartments have type code \"Flat\"? Give me their apartment numbers.",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nWHERE apartments.apt_type_code = 'Flat'\nRETURN apartments.apt_number",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Suite 645"
            ],
            [
                "Apt. 585"
            ],
            [
                "Suite 307"
            ],
            [
                "Suite 693"
            ],
            [
                "Apt. 794"
            ],
            [
                "Apt. 837"
            ]
        ]
    },
    {
        "question": "Return the first names and last names of all guests",
        "query": "MATCH (guests:`apartment_rentals.Guests`)\nRETURN guests.guest_first_name,guests.guest_last_name",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Kip",
                "DuBuque"
            ],
            [
                "Rebeca",
                "Runolfsdottir"
            ],
            [
                "Keon",
                "Treutel"
            ],
            [
                "Gabe",
                "Bode"
            ],
            [
                "Lou",
                "Grady"
            ],
            [
                "Josefina",
                "Jerde"
            ],
            [
                "Mozell",
                "Toy"
            ],
            [
                "Keith",
                "Hoeger"
            ],
            [
                "Crystal",
                "Runolfsson"
            ],
            [
                "Nikki",
                "Lehner"
            ],
            [
                "Gregoria",
                "Schowalter"
            ],
            [
                "Louvenia",
                "Crona"
            ],
            [
                "Else",
                "Roberts"
            ],
            [
                "Juvenal",
                "Kautzer"
            ],
            [
                "Tamia",
                "Mante"
            ]
        ]
    },
    {
        "question": "What are the first names and last names of all the guests?",
        "query": "MATCH (guests:`apartment_rentals.Guests`)\nRETURN guests.guest_first_name,guests.guest_last_name",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Kip",
                "DuBuque"
            ],
            [
                "Rebeca",
                "Runolfsdottir"
            ],
            [
                "Keon",
                "Treutel"
            ],
            [
                "Gabe",
                "Bode"
            ],
            [
                "Lou",
                "Grady"
            ],
            [
                "Josefina",
                "Jerde"
            ],
            [
                "Mozell",
                "Toy"
            ],
            [
                "Keith",
                "Hoeger"
            ],
            [
                "Crystal",
                "Runolfsson"
            ],
            [
                "Nikki",
                "Lehner"
            ],
            [
                "Gregoria",
                "Schowalter"
            ],
            [
                "Louvenia",
                "Crona"
            ],
            [
                "Else",
                "Roberts"
            ],
            [
                "Juvenal",
                "Kautzer"
            ],
            [
                "Tamia",
                "Mante"
            ]
        ]
    },
    {
        "question": "Return the date of birth for all the guests with gender code \"Male\".",
        "query": "MATCH (guests:`apartment_rentals.Guests`)\nWHERE guests.gender_code = 'Male'\nRETURN guests.date_of_birth",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "1995-11-04 07:09:57"
            ],
            [
                "2015-02-03 23:34:13"
            ],
            [
                "1983-08-26 15:45:08"
            ]
        ]
    },
    {
        "question": "What are dates of birth of all the guests whose gender is \"Male\"?",
        "query": "MATCH (guests:`apartment_rentals.Guests`)\nWHERE guests.gender_code = 'Male'\nRETURN guests.date_of_birth",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "1995-11-04 07:09:57"
            ],
            [
                "2015-02-03 23:34:13"
            ],
            [
                "1983-08-26 15:45:08"
            ]
        ]
    },
    {
        "question": "Show the facility codes of apartments with more than 4 bedrooms.",
        "query": "MATCH (T1:`apartment_rentals.Apartment_Facilities`)-[]-(T2:`apartment_rentals.Apartments`)\nWHERE T2.bedroom_count > 4\nRETURN T1.facility_code",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Gym"
            ],
            [
                "Cable TV"
            ],
            [
                "Gym"
            ]
        ]
    },
    {
        "question": "What are the facility codes of the apartments with more than four bedrooms?",
        "query": "MATCH (T1:`apartment_rentals.Apartment_Facilities`)-[]-(T2:`apartment_rentals.Apartments`)\nWHERE T2.bedroom_count > 4\nRETURN T1.facility_code",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Gym"
            ],
            [
                "Cable TV"
            ],
            [
                "Gym"
            ]
        ]
    },
    {
        "question": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.",
        "query": "MATCH (T1:`apartment_rentals.Apartment_Buildings`)-[]-(T2:`apartment_rentals.Apartments`)\nWHERE T2.bathroom_count > 2\nRETURN T1.building_address",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "71537 Gorczany Inlet\nWisozkburgh, AL 08256"
            ],
            [
                "489 Josh Orchard Apt. 998\nSipesview, DE 69053"
            ]
        ]
    },
    {
        "question": "Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.",
        "query": "MATCH (T1:`apartment_rentals.Apartment_Buildings`)-[]-(T2:`apartment_rentals.Apartments`)\nWHERE T2.bathroom_count > 2\nRETURN T1.building_address",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "71537 Gorczany Inlet\nWisozkburgh, AL 08256"
            ],
            [
                "489 Josh Orchard Apt. 998\nSipesview, DE 69053"
            ]
        ]
    },
    {
        "question": "Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\".",
        "query": "MATCH (T1:`apartment_rentals.Apartment_Buildings`)-[]-(T2:`apartment_rentals.Apartments`)\nWHERE T1.building_manager = 'Kyle'\nRETURN T2.apt_type_code,T2.apt_number",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Duplex",
                "Apt. 859"
            ],
            [
                "Flat",
                "Apt. 837"
            ],
            [
                "Duplex",
                "Suite 749"
            ],
            [
                "Studio",
                "Apt. 908"
            ]
        ]
    },
    {
        "question": "What apartment type codes and apartment numbers do the buildings managed by \"Kyle\" have?",
        "query": "MATCH (T1:`apartment_rentals.Apartment_Buildings`)-[]-(T2:`apartment_rentals.Apartments`)\nWHERE T1.building_manager = 'Kyle'\nRETURN T2.apt_type_code,T2.apt_number",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Duplex",
                "Apt. 859"
            ],
            [
                "Flat",
                "Apt. 837"
            ],
            [
                "Duplex",
                "Suite 749"
            ],
            [
                "Studio",
                "Apt. 908"
            ]
        ]
    },
    {
        "question": "Show the booking status code and the corresponding number of bookings.",
        "query": "MATCH (apartment_bookings:`apartment_rentals.Apartment_Bookings`)\nWITH apartment_bookings.booking_status_code AS booking_status_code, count(apartment_bookings.booking_status_code) AS count\nRETURN booking_status_code,count",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Provisional",
                8
            ],
            [
                "Confirmed",
                7
            ]
        ]
    },
    {
        "question": "How many bookings does each booking status have? List the booking status code and the number of corresponding bookings.",
        "query": "MATCH (apartment_bookings:`apartment_rentals.Apartment_Bookings`)\nWITH apartment_bookings.booking_status_code AS booking_status_code, count(apartment_bookings.booking_status_code) AS count\nRETURN booking_status_code,count",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Provisional",
                8
            ],
            [
                "Confirmed",
                7
            ]
        ]
    },
    {
        "question": "Return all the apartment numbers sorted by the room count in ascending order.",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nRETURN apartments.apt_number\nORDER BY apartments.room_count ASC",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Apt. 794"
            ],
            [
                "Apt. 477"
            ],
            [
                "Apt. 585"
            ],
            [
                "Suite 088"
            ],
            [
                "Apt. 859"
            ],
            [
                "Suite 645"
            ],
            [
                "Apt. 908"
            ],
            [
                "Suite 749"
            ],
            [
                "Apt. 940"
            ],
            [
                "Apt. 837"
            ],
            [
                "Suite 634"
            ],
            [
                "Suite 307"
            ],
            [
                "Apt. 187"
            ],
            [
                "Suite 693"
            ],
            [
                "Apt. 411"
            ]
        ]
    },
    {
        "question": "Sort the apartment numbers in ascending order of room count.",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nRETURN apartments.apt_number\nORDER BY apartments.room_count ASC",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Apt. 794"
            ],
            [
                "Apt. 477"
            ],
            [
                "Apt. 585"
            ],
            [
                "Suite 088"
            ],
            [
                "Apt. 859"
            ],
            [
                "Suite 645"
            ],
            [
                "Apt. 908"
            ],
            [
                "Suite 749"
            ],
            [
                "Apt. 940"
            ],
            [
                "Apt. 837"
            ],
            [
                "Suite 634"
            ],
            [
                "Suite 307"
            ],
            [
                "Apt. 187"
            ],
            [
                "Suite 693"
            ],
            [
                "Apt. 411"
            ]
        ]
    },
    {
        "question": "Return the apartment number with the largest number of bedrooms.",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nRETURN apartments.apt_number\nORDER BY apartments.bedroom_count DESC\nLIMIT 1",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Apt. 908"
            ]
        ]
    },
    {
        "question": "What is the apartment number of the apartment with the most beds?",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nRETURN apartments.apt_number\nORDER BY apartments.bedroom_count DESC\nLIMIT 1",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Apt. 908"
            ]
        ]
    },
    {
        "question": "Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nWITH apartments.apt_type_code AS apt_type_code, count(apartments.apt_type_code) AS count\nRETURN apt_type_code,count\nORDER BY count ASC",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Studio",
                4
            ],
            [
                "Duplex",
                5
            ],
            [
                "Flat",
                6
            ]
        ]
    },
    {
        "question": "Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments.",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nWITH apartments.apt_type_code AS apt_type_code, count(apartments.apt_type_code) AS count\nRETURN apt_type_code,count\nORDER BY count ASC",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Studio",
                4
            ],
            [
                "Duplex",
                5
            ],
            [
                "Flat",
                6
            ]
        ]
    },
    {
        "question": "Show the most common apartment type code.",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nWITH apartments.apt_type_code AS apt_type_code, count(apartments.apt_type_code) AS count\nRETURN apt_type_code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Flat"
            ]
        ]
    },
    {
        "question": "Which apartment type code appears the most often?",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nWITH apartments.apt_type_code AS apt_type_code, count(apartments.apt_type_code) AS count\nRETURN apt_type_code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Flat"
            ]
        ]
    },
    {
        "question": "Show the most common apartment type code among apartments with more than 1 bathroom.",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nWHERE apartments.bathroom_count > 1\nWITH apartments.apt_type_code AS apt_type_code, count(apartments.apt_type_code) AS count\nRETURN apt_type_code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Flat"
            ]
        ]
    },
    {
        "question": "Which apartment type code is the most common among apartments with more than one bathroom?",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nWHERE apartments.bathroom_count > 1\nWITH apartments.apt_type_code AS apt_type_code, count(apartments.apt_type_code) AS count\nRETURN apt_type_code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Flat"
            ]
        ]
    },
    {
        "question": "Show each gender code and the corresponding count of guests sorted by the count in descending order.",
        "query": "MATCH (guests:`apartment_rentals.Guests`)\nWITH count(guests.gender_code) AS count, guests.gender_code AS gender_code\nRETURN gender_code,count\nORDER BY count DESC",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Female",
                9
            ],
            [
                "Male",
                3
            ],
            [
                "Unknown",
                3
            ]
        ]
    },
    {
        "question": "Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts.",
        "query": "MATCH (guests:`apartment_rentals.Guests`)\nWITH count(guests.gender_code) AS count, guests.gender_code AS gender_code\nRETURN gender_code,count\nORDER BY count DESC",
        "db_id": "apartment_rentals",
        "answers": [
            [
                "Female",
                9
            ],
            [
                "Male",
                3
            ],
            [
                "Unknown",
                3
            ]
        ]
    },
    {
        "question": "How many apartments do not have any facility?",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nWHERE NOT (apartments:`apartment_rentals.Apartments`)-[]-(:`apartment_rentals.Apartment_Facilities`)\nRETURN count(*)",
        "db_id": "apartment_rentals",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "Find the number of apartments that have no facility.",
        "query": "MATCH (apartments:`apartment_rentals.Apartments`)\nWHERE NOT (apartments:`apartment_rentals.Apartments`)-[]-(:`apartment_rentals.Apartment_Facilities`)\nRETURN count(*)",
        "db_id": "apartment_rentals",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "How many games are held after season 2007?",
        "query": "MATCH (game:`game_injury.game`)\nWHERE game.Season > 2007\nRETURN count(*)",
        "db_id": "game_injury",
        "answers": [
            [
                17
            ]
        ]
    },
    {
        "question": "List the season, home team, away team of all the games.",
        "query": "MATCH (game:`game_injury.game`)\nRETURN game.Season,game.Home_team,game.Away_team",
        "db_id": "game_injury",
        "answers": [
            [
                2007,
                "Quruvchi",
                "Pakhtakor"
            ],
            [
                2007,
                "Pakhtakor",
                "Quruvchi"
            ],
            [
                2007,
                "Pakhtakor",
                "Quruvchi"
            ],
            [
                2008,
                "Pakhtakor",
                "Quruvchi"
            ],
            [
                2008,
                "Bunyodkor",
                "Pakhtakor"
            ],
            [
                2008,
                "Bunyodkor",
                "Pakhtakor"
            ],
            [
                2009,
                "Bunyodkor",
                "Pakhtakor"
            ],
            [
                2009,
                "Pakhtakor",
                "Bunyodkor"
            ],
            [
                2009,
                "Pakhtakor",
                "Bunyodkor"
            ],
            [
                2010,
                "Bunyodkor",
                "Pakhtakor"
            ],
            [
                2010,
                "Pakhtakor",
                "Bunyodkor"
            ],
            [
                2011,
                "Pakhtakor",
                "Bunyodkor"
            ],
            [
                2011,
                "Bunyodkor",
                "Pakhtakor"
            ],
            [
                2012,
                "Bunyodkor",
                "Pakhtakor"
            ],
            [
                2012,
                "Bunyodkor",
                "Pakhtakor"
            ],
            [
                2012,
                "Pakhtakor",
                "Bunyodkor"
            ],
            [
                2012,
                "Bunyodkor",
                "Pakhtakor"
            ],
            [
                2012,
                "Pakhtakor",
                "Bunyodkor"
            ],
            [
                2013,
                "Pakhtakor",
                "Bunyodkor"
            ],
            [
                2013,
                "Bunyodkor",
                "Pakhtakor"
            ]
        ]
    },
    {
        "question": "What are the maximum, minimum and average home games each stadium held?",
        "query": "MATCH (stadium:`game_injury.stadium`)\nRETURN max(stadium.Home_Games),min(stadium.Home_Games),avg(stadium.Home_Games)",
        "db_id": "game_injury",
        "answers": [
            [
                8,
                8,
                8.0
            ]
        ]
    },
    {
        "question": "What is the average attendance of stadiums with capacity percentage higher than 100%?",
        "query": "MATCH (stadium:`game_injury.stadium`)\nWHERE stadium.Capacity_Percentage > 100\nRETURN stadium.Average_Attendance",
        "db_id": "game_injury",
        "answers": [
            [
                87047.0
            ],
            [
                71227.0
            ],
            [
                69144.0
            ]
        ]
    },
    {
        "question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?",
        "query": "MATCH (injury_accident:`game_injury.injury_accident`)\nWHERE injury_accident.Injury <> 'Knee problem'\nRETURN injury_accident.Player,injury_accident.Number_of_matches,injury_accident.Source",
        "db_id": "game_injury",
        "answers": [
            [
                "Davide Santon",
                "12",
                "inter.it"
            ],
            [
                "Dejan Stankovi\u0107",
                "2",
                "inter.it"
            ],
            [
                "Wesley Sneijder",
                "1",
                "inter.it"
            ],
            [
                "Diego Milito",
                "1",
                "inter.it"
            ],
            [
                "Javier Zanetti",
                "4",
                "inter.it"
            ],
            [
                "Walter Samuel",
                "3",
                "inter.it"
            ],
            [
                "Thiago Motta",
                "10",
                "inter.it"
            ],
            [
                "Goran Pandev",
                "3",
                "inter.it"
            ],
            [
                "Iv\u00e1n C\u00f3rdoba",
                "1",
                "inter.it"
            ],
            [
                "Esteban Cambiasso",
                "2",
                "inter.it"
            ],
            [
                "Dejan Stankovi\u0107 (2)",
                "4 (6)",
                "inter.it"
            ],
            [
                "Wesley Sneijder (2)",
                "1 (2)",
                "inter.it"
            ],
            [
                "Esteban Cambiasso (2)",
                "4 (6)",
                "inter.it"
            ]
        ]
    },
    {
        "question": "What is the season of the game which causes the player 'Walter Samuel' to get injured?",
        "query": "MATCH (T1:`game_injury.game`)-[]-(T2:`game_injury.injury_accident`)\nWHERE T2.Player = 'Walter Samuel'\nRETURN T1.Season",
        "db_id": "game_injury",
        "answers": [
            [
                2008
            ]
        ]
    },
    {
        "question": "What are the ids, scores, and dates of the games which caused at least two injury accidents?",
        "query": "MATCH (T1:`game_injury.game`)-[]-(T2:`game_injury.injury_accident`)\nWITH count(*) AS count, T1.Score AS Score, T1.id AS id, T1.Date AS Date\nWHERE count  >= 2\nRETURN id,Score,Date",
        "db_id": "game_injury",
        "answers": [
            [
                5,
                "1\u20131",
                "16 August 2008"
            ],
            [
                6,
                "3\u20131",
                "31 October 2008"
            ],
            [
                10,
                "2\u20131",
                "14 March 2010"
            ]
        ]
    },
    {
        "question": "How many different kinds of information sources are there for injury accidents?",
        "query": "MATCH (injury_accident:`game_injury.injury_accident`)\nRETURN count(DISTINCT injury_accident.Source)",
        "db_id": "game_injury",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "How many games are free of injury accidents?",
        "query": "MATCH (game:`game_injury.game`)\nWHERE NOT (game:`game_injury.game`)-[]-(:`game_injury.injury_accident`)\nRETURN count(*)",
        "db_id": "game_injury",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "How many games has each stadium held?",
        "query": "MATCH (T1:`game_injury.stadium`)-[]-(T2:`game_injury.game`)\nWITH T1.id AS id, count(T1.id) AS count\nRETURN id,count",
        "db_id": "game_injury",
        "answers": [
            [
                1,
                2
            ],
            [
                2,
                2
            ],
            [
                3,
                2
            ],
            [
                4,
                2
            ],
            [
                5,
                2
            ],
            [
                6,
                1
            ],
            [
                7,
                2
            ],
            [
                8,
                1
            ],
            [
                9,
                1
            ],
            [
                10,
                3
            ],
            [
                11,
                1
            ],
            [
                12,
                1
            ]
        ]
    },
    {
        "question": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.",
        "query": "MATCH (T1:`game_injury.game`)-[]-(T2:`game_injury.injury_accident`)\nRETURN T1.Date,T2.Player\nORDER BY T1.Season DESC",
        "db_id": "game_injury",
        "answers": [
            [
                "7 July 2011",
                "Thiago Motta (2)"
            ],
            [
                "14 March 2010",
                "Dejan Stankovi\u0107 (2)"
            ],
            [
                "14 March 2010",
                "Wesley Sneijder (2)"
            ],
            [
                "31 October 2010",
                "Esteban Cambiasso (2)"
            ],
            [
                "14 October 2009",
                "Iv\u00e1n C\u00f3rdoba"
            ],
            [
                "8 August 2009",
                "Esteban Cambiasso"
            ],
            [
                "10 July 2008",
                "Wesley Sneijder"
            ],
            [
                "16 August 2008",
                "Diego Milito"
            ],
            [
                "16 August 2008",
                "Javier Zanetti"
            ],
            [
                "31 October 2008",
                "Walter Samuel"
            ],
            [
                "31 October 2008",
                "Thiago Motta"
            ],
            [
                "31 October 2008",
                "Goran Pandev"
            ],
            [
                "18 May 2007",
                "Davide Santon"
            ],
            [
                "22 September 2007",
                "Maicon"
            ],
            [
                "9 December 2007",
                "Dejan Stankovi\u0107"
            ]
        ]
    },
    {
        "question": "How many performances are there?",
        "query": "MATCH (performance:`performance_attendance.performance`)\nRETURN count(*)",
        "db_id": "performance_attendance",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "List the hosts of performances in ascending order of attendance.",
        "query": "MATCH (performance:`performance_attendance.performance`)\nRETURN performance.Host\nORDER BY performance.Attendance ASC",
        "db_id": "performance_attendance",
        "answers": [
            [
                "Boston Bruins"
            ],
            [
                "New York Rangers"
            ],
            [
                "Pittsburgh Penguins"
            ],
            [
                "Atlanta Thrashers"
            ],
            [
                "Ottawa Senators"
            ],
            [
                "Montreal Canadiens"
            ]
        ]
    },
    {
        "question": "Show the attendances of the performances at location \"TD Garden\" or \"Bell Centre\"",
        "query": "MATCH (performance:`performance_attendance.performance`)\nWHERE performance.Location = 'TD Garden' OR performance.Location = 'Bell Centre'\nRETURN performance.Attendance",
        "db_id": "performance_attendance",
        "answers": [
            [
                165
            ],
            [
                2173
            ]
        ]
    },
    {
        "question": "Show different locations and the number of performances at each location.",
        "query": "MATCH (performance:`performance_attendance.performance`)\nWITH count(performance.Location) AS count, performance.Location AS Location\nRETURN Location,count",
        "db_id": "performance_attendance",
        "answers": [
            [
                "TD Garden",
                1
            ],
            [
                "Madison Square Garden",
                1
            ],
            [
                "Verizon Center",
                2
            ],
            [
                "Bell Centre",
                1
            ],
            [
                "Scotiabank Place",
                1
            ]
        ]
    },
    {
        "question": "Show the most common location of performances.",
        "query": "MATCH (performance:`performance_attendance.performance`)\nWITH count(performance.Location) AS count, performance.Location AS Location\nRETURN Location\nORDER BY count DESC\nLIMIT 1",
        "db_id": "performance_attendance",
        "answers": [
            [
                "Verizon Center"
            ]
        ]
    },
    {
        "question": "Show the locations that have at least two performances.",
        "query": "MATCH (performance:`performance_attendance.performance`)\nWITH count(*) AS count, performance.Location AS Location\nWHERE count  >= 2\nRETURN Location",
        "db_id": "performance_attendance",
        "answers": [
            [
                "Verizon Center"
            ]
        ]
    },
    {
        "question": "How many debates are there?",
        "query": "MATCH (debate:`debate.debate`)\nRETURN count(*)",
        "db_id": "debate",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "List the venues of debates in ascending order of the number of audience.",
        "query": "MATCH (debate:`debate.debate`)\nRETURN debate.Venue\nORDER BY debate.Num_of_Audience ASC",
        "db_id": "debate",
        "answers": [
            [
                "Manama , Bahrain"
            ],
            [
                "Doha , Qatar"
            ],
            [
                "Abu Dhabi , UAE"
            ],
            [
                "Manama , Bahrain"
            ],
            [
                "Dubai , UAE"
            ],
            [
                "Manama , Bahrain"
            ]
        ]
    },
    {
        "question": "Show the names of people aged either 35 or 36.",
        "query": "MATCH (people:`debate.people`)\nWHERE people.Age = 35 OR people.Age = 36\nRETURN people.Name",
        "db_id": "debate",
        "answers": [
            [
                "Luther C. Carter"
            ],
            [
                "William B. Maclay"
            ],
            [
                "Charles Van Wyck"
            ]
        ]
    },
    {
        "question": "What is the party of the youngest people?",
        "query": "MATCH (people:`debate.people`)\nRETURN people.Party\nORDER BY people.Age ASC\nLIMIT 1",
        "db_id": "debate",
        "answers": [
            [
                "Republican"
            ]
        ]
    },
    {
        "question": "Show different parties of people along with the number of people in each party.",
        "query": "MATCH (people:`debate.people`)\nWITH people.Party AS Party, count(people.Party) AS count\nRETURN Party,count",
        "db_id": "debate",
        "answers": [
            [
                "Republican",
                4
            ],
            [
                "Democratic",
                3
            ],
            [
                "Independent Democrat",
                1
            ],
            [
                "Anti-Lecompton Democrat",
                2
            ]
        ]
    },
    {
        "question": "Show the party that has the most people.",
        "query": "MATCH (people:`debate.people`)\nWITH people.Party AS Party, count(people.Party) AS count\nRETURN Party\nORDER BY count DESC\nLIMIT 1",
        "db_id": "debate",
        "answers": [
            [
                "Republican"
            ]
        ]
    },
    {
        "question": "Show the distinct venues of debates",
        "query": "MATCH (debate:`debate.debate`)\nRETURN DISTINCT debate.Venue",
        "db_id": "debate",
        "answers": [
            [
                "Manama , Bahrain"
            ],
            [
                "Doha , Qatar"
            ],
            [
                "Dubai , UAE"
            ],
            [
                "Abu Dhabi , UAE"
            ]
        ]
    },
    {
        "question": "List the names of all the customers in alphabetical order.",
        "query": "MATCH (customers:`insurance_and_eClaims.Customers`)\nRETURN customers.Customer_Details\nORDER BY customers.Customer_Details",
        "db_id": "insurance_and_eClaims",
        "answers": [
            [
                "America Jaskolski"
            ],
            [
                "Augustine Kerluke"
            ],
            [
                "Buddy Marquardt"
            ],
            [
                "Dayana Robel"
            ],
            [
                "Dr. Diana Rath"
            ],
            [
                "Ellsworth Paucek"
            ],
            [
                "Lauriane Ferry PhD"
            ],
            [
                "Miss Felicita Reichel"
            ],
            [
                "Mr. Edwardo Blanda I"
            ],
            [
                "Mr. Randal Lynch III"
            ],
            [
                "Mrs. Hanna Willms"
            ],
            [
                "Mrs. Lilly Graham III"
            ],
            [
                "Mrs. Liza Heller V"
            ],
            [
                "Selena Gerhold"
            ],
            [
                "Sydnie Friesen"
            ]
        ]
    },
    {
        "question": "Sort the customer names in alphabetical order.",
        "query": "MATCH (customers:`insurance_and_eClaims.Customers`)\nRETURN customers.Customer_Details\nORDER BY customers.Customer_Details",
        "db_id": "insurance_and_eClaims",
        "answers": [
            [
                "America Jaskolski"
            ],
            [
                "Augustine Kerluke"
            ],
            [
                "Buddy Marquardt"
            ],
            [
                "Dayana Robel"
            ],
            [
                "Dr. Diana Rath"
            ],
            [
                "Ellsworth Paucek"
            ],
            [
                "Lauriane Ferry PhD"
            ],
            [
                "Miss Felicita Reichel"
            ],
            [
                "Mr. Edwardo Blanda I"
            ],
            [
                "Mr. Randal Lynch III"
            ],
            [
                "Mrs. Hanna Willms"
            ],
            [
                "Mrs. Lilly Graham III"
            ],
            [
                "Mrs. Liza Heller V"
            ],
            [
                "Selena Gerhold"
            ],
            [
                "Sydnie Friesen"
            ]
        ]
    },
    {
        "question": "Which type of policy is most frequently used? Give me the policy type code.",
        "query": "MATCH (policies:`insurance_and_eClaims.Policies`)\nWITH count(policies.Policy_Type_Code) AS count, policies.Policy_Type_Code AS Policy_Type_Code\nRETURN Policy_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "insurance_and_eClaims",
        "answers": [
            [
                "Uniformed"
            ]
        ]
    },
    {
        "question": "Find the type code of the most frequently used policy.",
        "query": "MATCH (policies:`insurance_and_eClaims.Policies`)\nWITH count(policies.Policy_Type_Code) AS count, policies.Policy_Type_Code AS Policy_Type_Code\nRETURN Policy_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "insurance_and_eClaims",
        "answers": [
            [
                "Uniformed"
            ]
        ]
    },
    {
        "question": "Find all the policy types that are used by more than 2 customers.",
        "query": "MATCH (policies:`insurance_and_eClaims.Policies`)\nWITH count(*) AS count, policies.Policy_Type_Code AS Policy_Type_Code\nWHERE count  > 2\nRETURN Policy_Type_Code",
        "db_id": "insurance_and_eClaims",
        "answers": [
            [
                "Deputy"
            ],
            [
                "Jurisdiction"
            ],
            [
                "Uniformed"
            ]
        ]
    },
    {
        "question": "Which types of policy are chosen by more than 2 customers? Give me the policy type codes.",
        "query": "MATCH (policies:`insurance_and_eClaims.Policies`)\nWITH count(*) AS count, policies.Policy_Type_Code AS Policy_Type_Code\nWHERE count  > 2\nRETURN Policy_Type_Code",
        "db_id": "insurance_and_eClaims",
        "answers": [
            [
                "Deputy"
            ],
            [
                "Jurisdiction"
            ],
            [
                "Uniformed"
            ]
        ]
    },
    {
        "question": "How many claim processing stages are there in total?",
        "query": "MATCH (claims_processing_stages:`insurance_and_eClaims.Claims_Processing_Stages`)\nRETURN count(*)",
        "db_id": "insurance_and_eClaims",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "Find the number of distinct stages in claim processing.",
        "query": "MATCH (claims_processing_stages:`insurance_and_eClaims.Claims_Processing_Stages`)\nRETURN count(*)",
        "db_id": "insurance_and_eClaims",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "Find the number of records of each policy type and its type code.",
        "query": "MATCH (policies:`insurance_and_eClaims.Policies`)\nWITH count(policies.Policy_Type_Code) AS count, policies.Policy_Type_Code AS Policy_Type_Code\nRETURN Policy_Type_Code,count",
        "db_id": "insurance_and_eClaims",
        "answers": [
            [
                "Deputy",
                3
            ],
            [
                "Jurisdiction",
                3
            ],
            [
                "Uniformed",
                8
            ],
            [
                "Normal",
                1
            ]
        ]
    },
    {
        "question": "For each policy type, return its type code and its count in the record.",
        "query": "MATCH (policies:`insurance_and_eClaims.Policies`)\nWITH count(policies.Policy_Type_Code) AS count, policies.Policy_Type_Code AS Policy_Type_Code\nRETURN Policy_Type_Code,count",
        "db_id": "insurance_and_eClaims",
        "answers": [
            [
                "Deputy",
                3
            ],
            [
                "Jurisdiction",
                3
            ],
            [
                "Uniformed",
                8
            ],
            [
                "Normal",
                1
            ]
        ]
    },
    {
        "question": "What is the description of the claim status \"Open\"?",
        "query": "MATCH (claims_processing_stages:`insurance_and_eClaims.Claims_Processing_Stages`)\nWHERE claims_processing_stages.Claim_Status_Name = 'Open'\nRETURN claims_processing_stages.Claim_Status_Description",
        "db_id": "insurance_and_eClaims",
        "answers": [
            [
                "Open a new claim"
            ]
        ]
    },
    {
        "question": "Find the description of the claim status \"Open\".",
        "query": "MATCH (claims_processing_stages:`insurance_and_eClaims.Claims_Processing_Stages`)\nWHERE claims_processing_stages.Claim_Status_Name = 'Open'\nRETURN claims_processing_stages.Claim_Status_Description",
        "db_id": "insurance_and_eClaims",
        "answers": [
            [
                "Open a new claim"
            ]
        ]
    },
    {
        "question": "How many distinct claim outcome codes are there?",
        "query": "MATCH (claims_processing:`insurance_and_eClaims.Claims_Processing`)\nRETURN count(DISTINCT claims_processing.Claim_Outcome_Code)",
        "db_id": "insurance_and_eClaims",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Count the number of distinct claim outcome codes.",
        "query": "MATCH (claims_processing:`insurance_and_eClaims.Claims_Processing`)\nRETURN count(DISTINCT claims_processing.Claim_Outcome_Code)",
        "db_id": "insurance_and_eClaims",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Show the number of accounts.",
        "query": "MATCH (accounts:`customers_and_invoices.Accounts`)\nRETURN count(*)",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "How many accounts are there?",
        "query": "MATCH (accounts:`customers_and_invoices.Accounts`)\nRETURN count(*)",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "How many customers have opened an account?",
        "query": "MATCH (accounts:`customers_and_invoices.Accounts`)\nRETURN count(DISTINCT accounts.customer_id)",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "Count the number of customers who have an account.",
        "query": "MATCH (accounts:`customers_and_invoices.Accounts`)\nRETURN count(DISTINCT accounts.customer_id)",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "Show the id, the date of account opened, the account name, and other account detail for all accounts.",
        "query": "MATCH (accounts:`customers_and_invoices.Accounts`)\nRETURN accounts.account_id,accounts.date_account_opened,accounts.account_name,accounts.other_account_details",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                1,
                "2016-07-30 22:22:24",
                "900",
                "Regular"
            ],
            [
                2,
                "2017-05-29 16:45:17",
                "520",
                "VIP"
            ],
            [
                3,
                "2012-05-04 18:50:32",
                "323",
                "Regular"
            ],
            [
                4,
                "2011-03-29 15:06:59",
                "390",
                "VIP"
            ],
            [
                5,
                "2014-08-11 18:15:14",
                "935",
                "Regular"
            ],
            [
                6,
                "2014-05-30 12:16:52",
                "371",
                "Regular"
            ],
            [
                7,
                "2015-11-03 08:04:15",
                "398",
                "VIP"
            ],
            [
                8,
                "2009-06-13 11:41:52",
                "710",
                "Regular"
            ],
            [
                9,
                "2010-10-22 13:33:45",
                "337",
                "Regular"
            ],
            [
                10,
                "2016-04-25 21:49:17",
                "429",
                "VIP"
            ],
            [
                11,
                "2012-07-09 23:40:15",
                "191",
                "VIP"
            ],
            [
                12,
                "2015-02-02 09:47:08",
                "601",
                "Regular"
            ],
            [
                13,
                "2010-06-16 09:35:00",
                "272",
                "Regular"
            ],
            [
                14,
                "2014-12-28 07:29:42",
                "861",
                "VIP"
            ],
            [
                15,
                "2008-05-04 22:15:56",
                "662",
                "VIP"
            ]
        ]
    },
    {
        "question": "What are the ids, date opened, name, and other details for all accounts?",
        "query": "MATCH (accounts:`customers_and_invoices.Accounts`)\nRETURN accounts.account_id,accounts.date_account_opened,accounts.account_name,accounts.other_account_details",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                1,
                "2016-07-30 22:22:24",
                "900",
                "Regular"
            ],
            [
                2,
                "2017-05-29 16:45:17",
                "520",
                "VIP"
            ],
            [
                3,
                "2012-05-04 18:50:32",
                "323",
                "Regular"
            ],
            [
                4,
                "2011-03-29 15:06:59",
                "390",
                "VIP"
            ],
            [
                5,
                "2014-08-11 18:15:14",
                "935",
                "Regular"
            ],
            [
                6,
                "2014-05-30 12:16:52",
                "371",
                "Regular"
            ],
            [
                7,
                "2015-11-03 08:04:15",
                "398",
                "VIP"
            ],
            [
                8,
                "2009-06-13 11:41:52",
                "710",
                "Regular"
            ],
            [
                9,
                "2010-10-22 13:33:45",
                "337",
                "Regular"
            ],
            [
                10,
                "2016-04-25 21:49:17",
                "429",
                "VIP"
            ],
            [
                11,
                "2012-07-09 23:40:15",
                "191",
                "VIP"
            ],
            [
                12,
                "2015-02-02 09:47:08",
                "601",
                "Regular"
            ],
            [
                13,
                "2010-06-16 09:35:00",
                "272",
                "Regular"
            ],
            [
                14,
                "2014-12-28 07:29:42",
                "861",
                "VIP"
            ],
            [
                15,
                "2008-05-04 22:15:56",
                "662",
                "VIP"
            ]
        ]
    },
    {
        "question": "Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.",
        "query": "MATCH (T1:`customers_and_invoices.Accounts`)-[]-(T2:`customers_and_invoices.Customers`)\nWHERE T2.customer_first_name = 'Meaghan'\nRETURN T1.account_id,T1.date_account_opened,T1.account_name,T1.other_account_details",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                1,
                "2016-07-30 22:22:24",
                "900",
                "Regular"
            ],
            [
                12,
                "2015-02-02 09:47:08",
                "601",
                "Regular"
            ],
            [
                9,
                "2010-10-22 13:33:45",
                "337",
                "Regular"
            ],
            [
                3,
                "2012-05-04 18:50:32",
                "323",
                "Regular"
            ]
        ]
    },
    {
        "question": "What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name \"Meaghan\"?",
        "query": "MATCH (T1:`customers_and_invoices.Accounts`)-[]-(T2:`customers_and_invoices.Customers`)\nWHERE T2.customer_first_name = 'Meaghan'\nRETURN T1.account_id,T1.date_account_opened,T1.account_name,T1.other_account_details",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                1,
                "2016-07-30 22:22:24",
                "900",
                "Regular"
            ],
            [
                12,
                "2015-02-02 09:47:08",
                "601",
                "Regular"
            ],
            [
                9,
                "2010-10-22 13:33:45",
                "337",
                "Regular"
            ],
            [
                3,
                "2012-05-04 18:50:32",
                "323",
                "Regular"
            ]
        ]
    },
    {
        "question": "Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.",
        "query": "MATCH (T1:`customers_and_invoices.Accounts`)-[]-(T2:`customers_and_invoices.Customers`)\nWHERE T2.customer_first_name = 'Meaghan' AND T2.customer_last_name = 'Keeling'\nRETURN T1.account_name,T1.other_account_details",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                "900",
                "Regular"
            ],
            [
                "601",
                "Regular"
            ],
            [
                "337",
                "Regular"
            ],
            [
                "323",
                "Regular"
            ]
        ]
    },
    {
        "question": "What are the names and other details for accounts corresponding to the customer named Meaghan Keeling?",
        "query": "MATCH (T1:`customers_and_invoices.Accounts`)-[]-(T2:`customers_and_invoices.Customers`)\nWHERE T2.customer_first_name = 'Meaghan' AND T2.customer_last_name = 'Keeling'\nRETURN T1.account_name,T1.other_account_details",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                "900",
                "Regular"
            ],
            [
                "601",
                "Regular"
            ],
            [
                "337",
                "Regular"
            ],
            [
                "323",
                "Regular"
            ]
        ]
    },
    {
        "question": "Show the first name and last name for the customer with account name 900.",
        "query": "MATCH (T1:`customers_and_invoices.Accounts`)-[]-(T2:`customers_and_invoices.Customers`)\nWHERE T1.account_name = '900'\nRETURN T2.customer_first_name,T2.customer_last_name",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                "Meaghan",
                "Keeling"
            ]
        ]
    },
    {
        "question": "What are the full names of customers with the account name 900?",
        "query": "MATCH (T1:`customers_and_invoices.Accounts`)-[]-(T2:`customers_and_invoices.Customers`)\nWHERE T1.account_name = '900'\nRETURN T2.customer_first_name,T2.customer_last_name",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                "Meaghan",
                "Keeling"
            ]
        ]
    },
    {
        "question": "How many customers don't have an account?",
        "query": "MATCH (customers:`customers_and_invoices.Customers`)\nWHERE NOT (customers:`customers_and_invoices.Customers`)-[]-(:`customers_and_invoices.Accounts`)\nRETURN count(*)",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "Count the number of customers who do not have an account.",
        "query": "MATCH (customers:`customers_and_invoices.Customers`)\nWHERE NOT (customers:`customers_and_invoices.Customers`)-[]-(:`customers_and_invoices.Accounts`)\nRETURN count(*)",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "Show the unique first names, last names, and phone numbers for all customers with any account.",
        "query": "MATCH (T1:`customers_and_invoices.Customers`)-[]-(T2:`customers_and_invoices.Accounts`)\nRETURN DISTINCT T1.customer_first_name,T1.customer_last_name,T1.phone_number",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                "Meaghan",
                "Keeling",
                "06015518212"
            ],
            [
                "Joesph",
                "Schaefer",
                "(488)524-5345"
            ],
            [
                "Ruby",
                "Boyle",
                "1-546-302-5676"
            ],
            [
                "Jensen",
                "Muller",
                "(650)406-8761"
            ],
            [
                "Kieran",
                "Auer",
                "(157)046-6255x98627"
            ],
            [
                "Abbey",
                "Ruecker",
                "1-344-593-4896x425"
            ],
            [
                "Vesta",
                "Leuschke",
                "+69(0)7149212554"
            ]
        ]
    },
    {
        "question": "What are the distinct first names, last names, and phone numbers for customers with accounts?",
        "query": "MATCH (T1:`customers_and_invoices.Customers`)-[]-(T2:`customers_and_invoices.Accounts`)\nRETURN DISTINCT T1.customer_first_name,T1.customer_last_name,T1.phone_number",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                "Meaghan",
                "Keeling",
                "06015518212"
            ],
            [
                "Joesph",
                "Schaefer",
                "(488)524-5345"
            ],
            [
                "Ruby",
                "Boyle",
                "1-546-302-5676"
            ],
            [
                "Jensen",
                "Muller",
                "(650)406-8761"
            ],
            [
                "Kieran",
                "Auer",
                "(157)046-6255x98627"
            ],
            [
                "Abbey",
                "Ruecker",
                "1-344-593-4896x425"
            ],
            [
                "Vesta",
                "Leuschke",
                "+69(0)7149212554"
            ]
        ]
    },
    {
        "question": "How many accounts does each customer have? List the number and customer id.",
        "query": "MATCH (accounts:`customers_and_invoices.Accounts`)\nWITH count(accounts.customer_id) AS count, accounts.customer_id AS customer_id\nRETURN count,customer_id",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                4,
                8
            ],
            [
                1,
                3
            ],
            [
                3,
                15
            ],
            [
                1,
                12
            ],
            [
                4,
                13
            ],
            [
                1,
                9
            ],
            [
                1,
                6
            ]
        ]
    },
    {
        "question": "Count the number of accounts corresponding to each customer id.",
        "query": "MATCH (accounts:`customers_and_invoices.Accounts`)\nWITH count(accounts.customer_id) AS count, accounts.customer_id AS customer_id\nRETURN count,customer_id",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                4,
                8
            ],
            [
                1,
                3
            ],
            [
                3,
                15
            ],
            [
                1,
                12
            ],
            [
                4,
                13
            ],
            [
                1,
                9
            ],
            [
                1,
                6
            ]
        ]
    },
    {
        "question": "Show id, first name and last name for all customers and the number of accounts.",
        "query": "MATCH (T1:`customers_and_invoices.Accounts`)-[]-(T2:`customers_and_invoices.Customers`)\nWITH T2.customer_last_name AS customer_last_name, T2.customer_first_name AS customer_first_name, count(T1.customer_id) AS count, T1.customer_id AS customer_id\nRETURN customer_id,customer_first_name,customer_last_name,count",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                8,
                "Meaghan",
                "Keeling",
                4
            ],
            [
                3,
                "Joesph",
                "Schaefer",
                1
            ],
            [
                15,
                "Ruby",
                "Boyle",
                3
            ],
            [
                12,
                "Jensen",
                "Muller",
                1
            ],
            [
                13,
                "Kieran",
                "Auer",
                4
            ],
            [
                9,
                "Abbey",
                "Ruecker",
                1
            ],
            [
                6,
                "Vesta",
                "Leuschke",
                1
            ]
        ]
    },
    {
        "question": "What are the the full names and ids for all customers, and how many accounts does each have?",
        "query": "MATCH (T1:`customers_and_invoices.Accounts`)-[]-(T2:`customers_and_invoices.Customers`)\nWITH T2.customer_last_name AS customer_last_name, T2.customer_first_name AS customer_first_name, count(T1.customer_id) AS count, T1.customer_id AS customer_id\nRETURN customer_id,customer_first_name,customer_last_name,count",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                8,
                "Meaghan",
                "Keeling",
                4
            ],
            [
                3,
                "Joesph",
                "Schaefer",
                1
            ],
            [
                15,
                "Ruby",
                "Boyle",
                3
            ],
            [
                12,
                "Jensen",
                "Muller",
                1
            ],
            [
                13,
                "Kieran",
                "Auer",
                4
            ],
            [
                9,
                "Abbey",
                "Ruecker",
                1
            ],
            [
                6,
                "Vesta",
                "Leuschke",
                1
            ]
        ]
    },
    {
        "question": "Show first name and id for all customers with at least 2 accounts.",
        "query": "MATCH (T1:`customers_and_invoices.Accounts`)-[]-(T2:`customers_and_invoices.Customers`)\nWITH count(*) AS count, T2.customer_first_name AS customer_first_name, T1.customer_id AS customer_id\nWHERE count  >= 2\nRETURN customer_first_name,customer_id",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                "Meaghan",
                8
            ],
            [
                "Ruby",
                15
            ],
            [
                "Kieran",
                13
            ]
        ]
    },
    {
        "question": "What are the first names and ids for customers who have two or more accounts?",
        "query": "MATCH (T1:`customers_and_invoices.Accounts`)-[]-(T2:`customers_and_invoices.Customers`)\nWITH count(*) AS count, T2.customer_first_name AS customer_first_name, T1.customer_id AS customer_id\nWHERE count  >= 2\nRETURN customer_first_name,customer_id",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                "Meaghan",
                8
            ],
            [
                "Ruby",
                15
            ],
            [
                "Kieran",
                13
            ]
        ]
    },
    {
        "question": "Show the number of customers.",
        "query": "MATCH (customers:`customers_and_invoices.Customers`)\nRETURN count(*)",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Count the number of customers.",
        "query": "MATCH (customers:`customers_and_invoices.Customers`)\nRETURN count(*)",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Show the number of customers for each gender.",
        "query": "MATCH (customers:`customers_and_invoices.Customers`)\nWITH customers.gender AS gender, count(customers.gender) AS count\nRETURN gender,count",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                "1",
                6
            ],
            [
                "0",
                9
            ]
        ]
    },
    {
        "question": "How many customers are there of each gender?",
        "query": "MATCH (customers:`customers_and_invoices.Customers`)\nWITH customers.gender AS gender, count(customers.gender) AS count\nRETURN gender,count",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                "1",
                6
            ],
            [
                "0",
                9
            ]
        ]
    },
    {
        "question": "Show all product sizes.",
        "query": "MATCH (products:`customers_and_invoices.Products`)\nRETURN DISTINCT products.product_size",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                "Medium"
            ],
            [
                "Small"
            ],
            [
                "Large"
            ]
        ]
    },
    {
        "question": "What are the different product sizes?",
        "query": "MATCH (products:`customers_and_invoices.Products`)\nRETURN DISTINCT products.product_size",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                "Medium"
            ],
            [
                "Small"
            ],
            [
                "Large"
            ]
        ]
    },
    {
        "question": "Show all product colors.",
        "query": "MATCH (products:`customers_and_invoices.Products`)\nRETURN DISTINCT products.product_color",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                "Red"
            ],
            [
                "Yellow"
            ],
            [
                "Black"
            ]
        ]
    },
    {
        "question": "What are the different product colors?",
        "query": "MATCH (products:`customers_and_invoices.Products`)\nRETURN DISTINCT products.product_color",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                "Red"
            ],
            [
                "Yellow"
            ],
            [
                "Black"
            ]
        ]
    },
    {
        "question": "How many invoices do we have?",
        "query": "MATCH (invoices:`customers_and_invoices.Invoices`)\nRETURN count(*)",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Count the number of invoices.",
        "query": "MATCH (invoices:`customers_and_invoices.Invoices`)\nRETURN count(*)",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Show invoice dates and order id and details for all invoices.",
        "query": "MATCH (T1:`customers_and_invoices.Invoices`)-[]-(T2:`customers_and_invoices.Orders`)\nRETURN T1.invoice_date,T1.order_id,T2.order_details",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                "2018-03-15 21:24:13",
                3,
                null
            ],
            [
                "2018-03-05 08:47:33",
                3,
                null
            ],
            [
                "2018-03-03 20:44:06",
                3,
                null
            ],
            [
                "2018-03-19 22:38:10",
                4,
                null
            ],
            [
                "2018-03-23 04:59:28",
                5,
                null
            ],
            [
                "2018-03-16 21:57:43",
                8,
                null
            ],
            [
                "2018-03-20 00:21:41",
                9,
                null
            ],
            [
                "2018-02-28 19:01:06",
                9,
                null
            ],
            [
                "2018-03-01 16:40:48",
                9,
                null
            ],
            [
                "2018-03-13 07:27:38",
                10,
                null
            ],
            [
                "2018-03-19 17:06:30",
                10,
                null
            ],
            [
                "2018-03-01 01:44:08",
                11,
                null
            ],
            [
                "2018-03-16 11:01:06",
                12,
                null
            ],
            [
                "2018-03-07 02:04:32",
                13,
                null
            ],
            [
                "2018-03-15 09:38:49",
                14,
                null
            ]
        ]
    },
    {
        "question": "What are the invoice dates, order ids, and order details for all invoices?",
        "query": "MATCH (T1:`customers_and_invoices.Invoices`)-[]-(T2:`customers_and_invoices.Orders`)\nRETURN T1.invoice_date,T1.order_id,T2.order_details",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                "2018-03-15 21:24:13",
                3,
                null
            ],
            [
                "2018-03-05 08:47:33",
                3,
                null
            ],
            [
                "2018-03-03 20:44:06",
                3,
                null
            ],
            [
                "2018-03-19 22:38:10",
                4,
                null
            ],
            [
                "2018-03-23 04:59:28",
                5,
                null
            ],
            [
                "2018-03-16 21:57:43",
                8,
                null
            ],
            [
                "2018-03-20 00:21:41",
                9,
                null
            ],
            [
                "2018-02-28 19:01:06",
                9,
                null
            ],
            [
                "2018-03-01 16:40:48",
                9,
                null
            ],
            [
                "2018-03-13 07:27:38",
                10,
                null
            ],
            [
                "2018-03-19 17:06:30",
                10,
                null
            ],
            [
                "2018-03-01 01:44:08",
                11,
                null
            ],
            [
                "2018-03-16 11:01:06",
                12,
                null
            ],
            [
                "2018-03-07 02:04:32",
                13,
                null
            ],
            [
                "2018-03-15 09:38:49",
                14,
                null
            ]
        ]
    },
    {
        "question": "Show the order ids and the number of invoices for each order.",
        "query": "MATCH (invoices:`customers_and_invoices.Invoices`)\nWITH invoices.order_id AS order_id, count(invoices.order_id) AS count\nRETURN order_id,count",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                9,
                3
            ],
            [
                3,
                3
            ],
            [
                13,
                1
            ],
            [
                8,
                1
            ],
            [
                10,
                2
            ],
            [
                12,
                1
            ],
            [
                11,
                1
            ],
            [
                5,
                1
            ],
            [
                4,
                1
            ],
            [
                14,
                1
            ]
        ]
    },
    {
        "question": "How many invoices correspond to each order id?",
        "query": "MATCH (invoices:`customers_and_invoices.Invoices`)\nWITH invoices.order_id AS order_id, count(invoices.order_id) AS count\nRETURN order_id,count",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                9,
                3
            ],
            [
                3,
                3
            ],
            [
                13,
                1
            ],
            [
                8,
                1
            ],
            [
                10,
                2
            ],
            [
                12,
                1
            ],
            [
                11,
                1
            ],
            [
                5,
                1
            ],
            [
                4,
                1
            ],
            [
                14,
                1
            ]
        ]
    },
    {
        "question": "What is the order id and order details for the order more than two invoices.",
        "query": "MATCH (T1:`customers_and_invoices.Invoices`)-[]-(T2:`customers_and_invoices.Orders`)\nWITH count(*) AS count, T2.order_id AS order_id, T2.order_details AS order_details\nWHERE count  > 2\nRETURN order_id,order_details",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                3,
                null
            ],
            [
                9,
                null
            ]
        ]
    },
    {
        "question": "Return the order ids and details for orderes with two or more invoices.",
        "query": "MATCH (T1:`customers_and_invoices.Invoices`)-[]-(T2:`customers_and_invoices.Orders`)\nWITH count(*) AS count, T2.order_id AS order_id, T2.order_details AS order_details\nWHERE count  > 2\nRETURN order_id,order_details",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                3,
                null
            ],
            [
                9,
                null
            ]
        ]
    },
    {
        "question": "What is the customer last name, id and phone number with most number of orders?",
        "query": "MATCH (T1:`customers_and_invoices.Orders`)-[]-(T2:`customers_and_invoices.Customers`)\nWITH T2.customer_last_name AS customer_last_name, count(T1.customer_id) AS count, T2.phone_number AS phone_number, T1.customer_id AS customer_id\nRETURN customer_last_name,customer_id,phone_number\nORDER BY count DESC\nLIMIT 1",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                "Muller",
                12,
                "(650)406-8761"
            ]
        ]
    },
    {
        "question": "Return the last name, id and phone number of the customer who has made the greatest number of orders.",
        "query": "MATCH (T1:`customers_and_invoices.Orders`)-[]-(T2:`customers_and_invoices.Customers`)\nWITH T2.customer_last_name AS customer_last_name, count(T1.customer_id) AS count, T2.phone_number AS phone_number, T1.customer_id AS customer_id\nRETURN customer_last_name,customer_id,phone_number\nORDER BY count DESC\nLIMIT 1",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                "Muller",
                12,
                "(650)406-8761"
            ]
        ]
    },
    {
        "question": "Show the order ids and the number of items in each order.",
        "query": "MATCH (order_items:`customers_and_invoices.Order_Items`)\nWITH count(order_items.order_id) AS count, order_items.order_id AS order_id\nRETURN order_id,count",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                4,
                3
            ],
            [
                15,
                2
            ],
            [
                1,
                2
            ],
            [
                2,
                1
            ],
            [
                13,
                4
            ],
            [
                10,
                1
            ],
            [
                14,
                1
            ],
            [
                12,
                1
            ]
        ]
    },
    {
        "question": "How many order items correspond to each order id?",
        "query": "MATCH (order_items:`customers_and_invoices.Order_Items`)\nWITH count(order_items.order_id) AS count, order_items.order_id AS order_id\nRETURN order_id,count",
        "db_id": "customers_and_invoices",
        "answers": [
            [
                4,
                3
            ],
            [
                15,
                2
            ],
            [
                1,
                2
            ],
            [
                2,
                1
            ],
            [
                13,
                4
            ],
            [
                10,
                1
            ],
            [
                14,
                1
            ],
            [
                12,
                1
            ]
        ]
    },
    {
        "question": "How many churches opened before 1850 are there?",
        "query": "MATCH (church:`wedding.church`)\nWHERE church.Open_Date < 1850\nRETURN count(*)",
        "db_id": "wedding",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "Show the name, open date, and organizer for all churches.",
        "query": "MATCH (church:`wedding.church`)\nRETURN church.Name,church.Open_Date,church.Organized_by",
        "db_id": "wedding",
        "answers": [
            [
                "Pure Church of Christ",
                1831,
                "Wycam Clark"
            ],
            [
                "Independent Church",
                1832,
                "\u2013 Hoton"
            ],
            [
                "Church of Christ",
                1836,
                "Ezra Booth"
            ],
            [
                "Church of Christ (Parrishite)",
                1837,
                "Warren Parrish"
            ],
            [
                "Alston Church",
                1839,
                "Isaac Russell"
            ],
            [
                "Church of Christ",
                1830,
                "William Chubby"
            ],
            [
                "Church of Jesus Christ, the Bride, the Lamb's Wife",
                1840,
                "George M. Hinkle"
            ],
            [
                "Church of Christ",
                1842,
                "Hiram Page"
            ],
            [
                "True Church of Jesus Christ of Latter Day Saints",
                1844,
                "William Law"
            ]
        ]
    },
    {
        "question": "List all church names in descending order of opening date.",
        "query": "MATCH (church:`wedding.church`)\nRETURN church.Name\nORDER BY church.Open_Date DESC",
        "db_id": "wedding",
        "answers": [
            [
                "True Church of Jesus Christ of Latter Day Saints"
            ],
            [
                "Church of Christ"
            ],
            [
                "Church of Jesus Christ, the Bride, the Lamb's Wife"
            ],
            [
                "Alston Church"
            ],
            [
                "Church of Christ (Parrishite)"
            ],
            [
                "Church of Christ"
            ],
            [
                "Independent Church"
            ],
            [
                "Pure Church of Christ"
            ],
            [
                "Church of Christ"
            ]
        ]
    },
    {
        "question": "Show the organizer and name for churches that opened between 1830 and 1840.",
        "query": "MATCH (church:`wedding.church`)\nWHERE 1830<=church.Open_Date<=1840\nRETURN church.Organized_by,church.Name",
        "db_id": "wedding",
        "answers": [
            [
                "Wycam Clark",
                "Pure Church of Christ"
            ],
            [
                "\u2013 Hoton",
                "Independent Church"
            ],
            [
                "Ezra Booth",
                "Church of Christ"
            ],
            [
                "Warren Parrish",
                "Church of Christ (Parrishite)"
            ],
            [
                "Isaac Russell",
                "Alston Church"
            ],
            [
                "William Chubby",
                "Church of Christ"
            ],
            [
                "George M. Hinkle",
                "Church of Jesus Christ, the Bride, the Lamb's Wife"
            ]
        ]
    },
    {
        "question": "Show all opening years and the number of churches that opened in that year.",
        "query": "MATCH (church:`wedding.church`)\nWITH church.Open_Date AS Open_Date, count(church.Open_Date) AS count\nRETURN Open_Date,count",
        "db_id": "wedding",
        "answers": [
            [
                1831,
                1
            ],
            [
                1832,
                1
            ],
            [
                1836,
                1
            ],
            [
                1837,
                1
            ],
            [
                1839,
                1
            ],
            [
                1830,
                1
            ],
            [
                1840,
                1
            ],
            [
                1842,
                1
            ],
            [
                1844,
                1
            ]
        ]
    },
    {
        "question": "Show the name and opening year for three churches that opened most recently.",
        "query": "MATCH (church:`wedding.church`)\nRETURN church.Name,church.Open_Date\nORDER BY church.Open_Date DESC\nLIMIT 3",
        "db_id": "wedding",
        "answers": [
            [
                "True Church of Jesus Christ of Latter Day Saints",
                1844
            ],
            [
                "Church of Christ",
                1842
            ],
            [
                "Church of Jesus Christ, the Bride, the Lamb's Wife",
                1840
            ]
        ]
    },
    {
        "question": "How many female people are older than 30 in our record?",
        "query": "MATCH (people:`wedding.people`)\nWHERE people.Is_Male = 'F' AND people.Age > 30\nRETURN count(*)",
        "db_id": "wedding",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Show the minimum, maximum, and average age for all people.",
        "query": "MATCH (people:`wedding.people`)\nRETURN min(people.Age),max(people.Age),avg(people.Age)",
        "db_id": "wedding",
        "answers": [
            [
                25,
                36,
                30.166666666666668
            ]
        ]
    },
    {
        "question": "Show all countries and the number of people from each country.",
        "query": "MATCH (people:`wedding.people`)\nWITH people.Country AS Country, count(people.Country) AS count\nRETURN Country,count",
        "db_id": "wedding",
        "answers": [
            [
                "Canada",
                1
            ],
            [
                "Sweden",
                1
            ],
            [
                "United States",
                8
            ],
            [
                "Northern Ireland",
                1
            ],
            [
                "Australia",
                1
            ]
        ]
    },
    {
        "question": "How many artists do we have?",
        "query": "MATCH (artist:`theme_gallery.artist`)\nRETURN count(*)",
        "db_id": "theme_gallery",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "Count the number of artists.",
        "query": "MATCH (artist:`theme_gallery.artist`)\nRETURN count(*)",
        "db_id": "theme_gallery",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "Show all artist name, age, and country ordered by the yeared they joined.",
        "query": "MATCH (artist:`theme_gallery.artist`)\nRETURN artist.Name,artist.Age,artist.Country\nORDER BY artist.Year_Join",
        "db_id": "theme_gallery",
        "answers": [
            [
                "Larry Nelson",
                50,
                "United States"
            ],
            [
                "Jeff Sluman",
                57,
                "United States"
            ],
            [
                "John Daly",
                46,
                "United States"
            ],
            [
                "Paul Azinger",
                47,
                "United States"
            ],
            [
                "Nick Price",
                48,
                "Zimbabwe"
            ],
            [
                "Mark Brooks",
                48,
                "United States"
            ],
            [
                "Vijay Singh",
                45,
                "Fiji"
            ]
        ]
    },
    {
        "question": "What are the names, ages, and countries of artists, sorted by the year they joined?",
        "query": "MATCH (artist:`theme_gallery.artist`)\nRETURN artist.Name,artist.Age,artist.Country\nORDER BY artist.Year_Join",
        "db_id": "theme_gallery",
        "answers": [
            [
                "Larry Nelson",
                50,
                "United States"
            ],
            [
                "Jeff Sluman",
                57,
                "United States"
            ],
            [
                "John Daly",
                46,
                "United States"
            ],
            [
                "Paul Azinger",
                47,
                "United States"
            ],
            [
                "Nick Price",
                48,
                "Zimbabwe"
            ],
            [
                "Mark Brooks",
                48,
                "United States"
            ],
            [
                "Vijay Singh",
                45,
                "Fiji"
            ]
        ]
    },
    {
        "question": "What are all distinct country for artists?",
        "query": "MATCH (artist:`theme_gallery.artist`)\nRETURN DISTINCT artist.Country",
        "db_id": "theme_gallery",
        "answers": [
            [
                "Fiji"
            ],
            [
                "United States"
            ],
            [
                "Zimbabwe"
            ]
        ]
    },
    {
        "question": "Return the different countries for artists.",
        "query": "MATCH (artist:`theme_gallery.artist`)\nRETURN DISTINCT artist.Country",
        "db_id": "theme_gallery",
        "answers": [
            [
                "Fiji"
            ],
            [
                "United States"
            ],
            [
                "Zimbabwe"
            ]
        ]
    },
    {
        "question": "Show all artist names and the year joined who are not from United States.",
        "query": "MATCH (artist:`theme_gallery.artist`)\nWHERE artist.Country <> 'United States'\nRETURN artist.Name,artist.Year_Join",
        "db_id": "theme_gallery",
        "answers": [
            [
                "Vijay Singh",
                1998
            ],
            [
                "Nick Price",
                1994
            ]
        ]
    },
    {
        "question": "What are the names and year of joining for artists that do not have the country \"United States\"?",
        "query": "MATCH (artist:`theme_gallery.artist`)\nWHERE artist.Country <> 'United States'\nRETURN artist.Name,artist.Year_Join",
        "db_id": "theme_gallery",
        "answers": [
            [
                "Vijay Singh",
                1998
            ],
            [
                "Nick Price",
                1994
            ]
        ]
    },
    {
        "question": "How many artists are above age 46 and joined after 1990?",
        "query": "MATCH (artist:`theme_gallery.artist`)\nWHERE artist.Age > 46 AND artist.Year_Join > 1990\nRETURN count(*)",
        "db_id": "theme_gallery",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Count the number of artists who are older than 46 and joined after 1990.",
        "query": "MATCH (artist:`theme_gallery.artist`)\nWHERE artist.Age > 46 AND artist.Year_Join > 1990\nRETURN count(*)",
        "db_id": "theme_gallery",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "What is the average and minimum age of all artists from United States.",
        "query": "MATCH (artist:`theme_gallery.artist`)\nWHERE artist.Country = 'United States'\nRETURN avg(artist.Age),min(artist.Age)",
        "db_id": "theme_gallery",
        "answers": [
            [
                49.6,
                46
            ]
        ]
    },
    {
        "question": "Return the average and minimum ages across artists from the United States.",
        "query": "MATCH (artist:`theme_gallery.artist`)\nWHERE artist.Country = 'United States'\nRETURN avg(artist.Age),min(artist.Age)",
        "db_id": "theme_gallery",
        "answers": [
            [
                49.6,
                46
            ]
        ]
    },
    {
        "question": "What is the name of the artist who joined latest?",
        "query": "MATCH (artist:`theme_gallery.artist`)\nRETURN artist.Name\nORDER BY artist.Year_Join DESC\nLIMIT 1",
        "db_id": "theme_gallery",
        "answers": [
            [
                "Vijay Singh"
            ]
        ]
    },
    {
        "question": "Return the name of the artist who has the latest join year.",
        "query": "MATCH (artist:`theme_gallery.artist`)\nRETURN artist.Name\nORDER BY artist.Year_Join DESC\nLIMIT 1",
        "db_id": "theme_gallery",
        "answers": [
            [
                "Vijay Singh"
            ]
        ]
    },
    {
        "question": "How many exhibition are there in year 2005 or after?",
        "query": "MATCH (exhibition:`theme_gallery.exhibition`)\nWHERE exhibition.Year >= 2005\nRETURN count(*)",
        "db_id": "theme_gallery",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Count the number of exhibitions that happened in or after 2005.",
        "query": "MATCH (exhibition:`theme_gallery.exhibition`)\nWHERE exhibition.Year >= 2005\nRETURN count(*)",
        "db_id": "theme_gallery",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Show theme and year for all exhibitions with ticket prices lower than 15.",
        "query": "MATCH (exhibition:`theme_gallery.exhibition`)\nWHERE exhibition.Ticket_Price < 15\nRETURN exhibition.Theme,exhibition.Year",
        "db_id": "theme_gallery",
        "answers": [
            [
                "Santa Claus and Rudolph the Red-Nosed Reindeer",
                2006
            ],
            [
                "Summer",
                2009
            ]
        ]
    },
    {
        "question": "What are the theme and year for all exhibitions that have a ticket price under 15?",
        "query": "MATCH (exhibition:`theme_gallery.exhibition`)\nWHERE exhibition.Ticket_Price < 15\nRETURN exhibition.Theme,exhibition.Year",
        "db_id": "theme_gallery",
        "answers": [
            [
                "Santa Claus and Rudolph the Red-Nosed Reindeer",
                2006
            ],
            [
                "Summer",
                2009
            ]
        ]
    },
    {
        "question": "Show all artist names and the number of exhibitions for each artist.",
        "query": "MATCH (T1:`theme_gallery.exhibition`)-[]-(T2:`theme_gallery.artist`)\nWITH count(T1.Artist_ID) AS count, T2.Name AS Name\nRETURN Name,count",
        "db_id": "theme_gallery",
        "answers": [
            [
                "Vijay Singh",
                2
            ],
            [
                "John Daly",
                1
            ],
            [
                "Paul Azinger",
                1
            ],
            [
                "Jeff Sluman",
                1
            ],
            [
                "Nick Price",
                1
            ]
        ]
    },
    {
        "question": "How many exhibitions has each artist had?",
        "query": "MATCH (T1:`theme_gallery.exhibition`)-[]-(T2:`theme_gallery.artist`)\nWITH count(T1.Artist_ID) AS count, T2.Name AS Name\nRETURN Name,count",
        "db_id": "theme_gallery",
        "answers": [
            [
                "Vijay Singh",
                2
            ],
            [
                "John Daly",
                1
            ],
            [
                "Paul Azinger",
                1
            ],
            [
                "Jeff Sluman",
                1
            ],
            [
                "Nick Price",
                1
            ]
        ]
    },
    {
        "question": "What is the name and country for the artist with most number of exhibitions?",
        "query": "MATCH (T1:`theme_gallery.exhibition`)-[]-(T2:`theme_gallery.artist`)\nWITH count(T1.Artist_ID) AS count, T2.Country AS Country, T2.Name AS Name\nRETURN Name,Country\nORDER BY count DESC\nLIMIT 1",
        "db_id": "theme_gallery",
        "answers": [
            [
                "Vijay Singh",
                "Fiji"
            ]
        ]
    },
    {
        "question": "Return the name and country corresponding to the artist who has had the most exhibitions.",
        "query": "MATCH (T1:`theme_gallery.exhibition`)-[]-(T2:`theme_gallery.artist`)\nWITH count(T1.Artist_ID) AS count, T2.Country AS Country, T2.Name AS Name\nRETURN Name,Country\nORDER BY count DESC\nLIMIT 1",
        "db_id": "theme_gallery",
        "answers": [
            [
                "Vijay Singh",
                "Fiji"
            ]
        ]
    },
    {
        "question": "Show names for artists without any exhibition.",
        "query": "MATCH (artist:`theme_gallery.artist`)\nWHERE NOT (artist:`theme_gallery.artist`)-[]-(:`theme_gallery.exhibition`)\nRETURN artist.Name",
        "db_id": "theme_gallery",
        "answers": [
            [
                "Mark Brooks"
            ],
            [
                "Larry Nelson"
            ]
        ]
    },
    {
        "question": "What are the names of artists that have not had any exhibitions?",
        "query": "MATCH (artist:`theme_gallery.artist`)\nWHERE NOT (artist:`theme_gallery.artist`)-[]-(:`theme_gallery.exhibition`)\nRETURN artist.Name",
        "db_id": "theme_gallery",
        "answers": [
            [
                "Mark Brooks"
            ],
            [
                "Larry Nelson"
            ]
        ]
    },
    {
        "question": "Show theme and year for all exhibitions in an descending order of ticket price.",
        "query": "MATCH (exhibition:`theme_gallery.exhibition`)\nRETURN exhibition.Theme,exhibition.Year\nORDER BY exhibition.Ticket_Price DESC",
        "db_id": "theme_gallery",
        "answers": [
            [
                "Spring",
                2008
            ],
            [
                "Santa Claus",
                2004
            ],
            [
                "Christmas stocking",
                2005
            ],
            [
                "Christmas Tree",
                2007
            ],
            [
                "Santa Claus and Rudolph the Red-Nosed Reindeer",
                2006
            ],
            [
                "Summer",
                2009
            ]
        ]
    },
    {
        "question": "What are the themes and years for exhibitions, sorted by ticket price descending?",
        "query": "MATCH (exhibition:`theme_gallery.exhibition`)\nRETURN exhibition.Theme,exhibition.Year\nORDER BY exhibition.Ticket_Price DESC",
        "db_id": "theme_gallery",
        "answers": [
            [
                "Spring",
                2008
            ],
            [
                "Santa Claus",
                2004
            ],
            [
                "Christmas stocking",
                2005
            ],
            [
                "Christmas Tree",
                2007
            ],
            [
                "Santa Claus and Rudolph the Red-Nosed Reindeer",
                2006
            ],
            [
                "Summer",
                2009
            ]
        ]
    },
    {
        "question": "What is the theme, date, and attendance for the exhibition in year 2004?",
        "query": "MATCH (T1:`theme_gallery.exhibition_record`)-[]-(T2:`theme_gallery.exhibition`)\nWHERE T2.Year = 2004\nRETURN T2.Theme,T1.Date,T1.Attendance",
        "db_id": "theme_gallery",
        "answers": [
            [
                "Santa Claus",
                "December 5",
                1098
            ],
            [
                "Santa Claus",
                "December 2",
                965
            ],
            [
                "Santa Claus",
                "December 7",
                2983
            ]
        ]
    },
    {
        "question": "Return the themes, dates, and attendance for exhibitions that happened in 2004.",
        "query": "MATCH (T1:`theme_gallery.exhibition_record`)-[]-(T2:`theme_gallery.exhibition`)\nWHERE T2.Year = 2004\nRETURN T2.Theme,T1.Date,T1.Attendance",
        "db_id": "theme_gallery",
        "answers": [
            [
                "Santa Claus",
                "December 5",
                1098
            ],
            [
                "Santa Claus",
                "December 2",
                965
            ],
            [
                "Santa Claus",
                "December 7",
                2983
            ]
        ]
    },
    {
        "question": "How many exhibitions have a attendance more than 100 or have a ticket price below 10?",
        "query": "MATCH (T1:`theme_gallery.exhibition_record`)-[]-(T2:`theme_gallery.exhibition`)\nWHERE T1.Attendance > 100 OR T2.Ticket_Price < 10\nRETURN count(*)",
        "db_id": "theme_gallery",
        "answers": [
            [
                13
            ]
        ]
    },
    {
        "question": "Count the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10.",
        "query": "MATCH (T1:`theme_gallery.exhibition_record`)-[]-(T2:`theme_gallery.exhibition`)\nWHERE T1.Attendance > 100 OR T2.Ticket_Price < 10\nRETURN count(*)",
        "db_id": "theme_gallery",
        "answers": [
            [
                13
            ]
        ]
    },
    {
        "question": "Find the id of the item whose title is \"orange\".",
        "query": "MATCH (item:`epinions_1.item`)\nWHERE item.title = 'orange'\nRETURN item.i_id",
        "db_id": "epinions_1",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "Find the number of reviews.",
        "query": "MATCH (review:`epinions_1.review`)\nRETURN count(*)",
        "db_id": "epinions_1",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "How many users are there?",
        "query": "MATCH (useracct:`epinions_1.useracct`)\nRETURN count(*)",
        "db_id": "epinions_1",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "Find the highest rank of all reviews.",
        "query": "MATCH (review:`epinions_1.review`)\nRETURN min(review.rank)",
        "db_id": "epinions_1",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "How many different users wrote some reviews?",
        "query": "MATCH (review:`epinions_1.review`)\nRETURN count(DISTINCT review.u_id)",
        "db_id": "epinions_1",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "How many different items were reviewed by some users?",
        "query": "MATCH (review:`epinions_1.review`)\nRETURN count(DISTINCT review.i_id)",
        "db_id": "epinions_1",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "List the titles of all items in alphabetic order .",
        "query": "MATCH (item:`epinions_1.item`)\nRETURN item.title\nORDER BY item.title",
        "db_id": "epinions_1",
        "answers": [
            [
                "apple"
            ],
            [
                "avocado"
            ],
            [
                "blue hoodie"
            ],
            [
                "comb"
            ],
            [
                "cup"
            ],
            [
                "orange"
            ],
            [
                "pear"
            ],
            [
                "shampoo"
            ]
        ]
    },
    {
        "question": "How many players are there?",
        "query": "MATCH (player:`riding_club.player`)\nRETURN count(*)",
        "db_id": "riding_club",
        "answers": [
            [
                14
            ]
        ]
    },
    {
        "question": "List the names of players in ascending order of votes.",
        "query": "MATCH (player:`riding_club.player`)\nRETURN player.Player_name\nORDER BY player.Votes ASC",
        "db_id": "riding_club",
        "answers": [
            [
                "Mohamed Alli"
            ],
            [
                "Sean Robert"
            ],
            [
                "Ron Strynadka"
            ],
            [
                "Ross C. Martin"
            ],
            [
                "Rachel Heinrichs"
            ],
            [
                "Matt Schaubroeck"
            ],
            [
                "Jean Luc Bouch\u00e9"
            ],
            [
                "Fiona Shiells"
            ],
            [
                "Niki Ashton"
            ],
            [
                "Patricia Cordner"
            ],
            [
                "Ross Eadie"
            ],
            [
                "Pat Martin"
            ],
            [
                "Judy Wasylycia-Leis"
            ],
            [
                "Jim Maloway"
            ]
        ]
    },
    {
        "question": "What are the gender and occupation of players?",
        "query": "MATCH (player:`riding_club.player`)\nRETURN player.Gender,player.Occupation",
        "db_id": "riding_club",
        "answers": [
            [
                "M",
                "Locomotive Engineer"
            ],
            [
                "F",
                "Ministerial Assistant"
            ],
            [
                "F",
                "Researcher"
            ],
            [
                "M",
                "Retired"
            ],
            [
                "M",
                "Small Businessman"
            ],
            [
                "M",
                "Self Employed / Consultant"
            ],
            [
                "M",
                "Distribution Centre Associate"
            ],
            [
                "M",
                "Design Coordinator"
            ],
            [
                "M",
                "Student"
            ],
            [
                "F",
                "Retired"
            ],
            [
                "M",
                "Parliamentarian"
            ],
            [
                "F",
                "Parliamentarian"
            ],
            [
                "M",
                "Product Consultant - MLCC"
            ],
            [
                "F",
                "Student"
            ]
        ]
    },
    {
        "question": "List the name and residence for players whose occupation is not \"Researcher\".",
        "query": "MATCH (player:`riding_club.player`)\nWHERE player.Occupation <> 'Researcher'\nRETURN player.Player_name,player.Residence",
        "db_id": "riding_club",
        "answers": [
            [
                "Jean Luc Bouch\u00e9",
                "Brandon"
            ],
            [
                "Fiona Shiells",
                "Winnipeg"
            ],
            [
                "Ron Strynadka",
                "Birtle"
            ],
            [
                "Jim Maloway",
                "Winnipeg"
            ],
            [
                "Ross Eadie",
                "Winnipeg"
            ],
            [
                "Mohamed Alli",
                "Winnipeg"
            ],
            [
                "Ross C. Martin",
                "Oakbank"
            ],
            [
                "Matt Schaubroeck",
                "Winnipeg"
            ],
            [
                "Patricia Cordner",
                "Selkirk"
            ],
            [
                "Pat Martin",
                "Winnipeg"
            ],
            [
                "Judy Wasylycia-Leis",
                "Winnipeg"
            ],
            [
                "Sean Robert",
                "Winnipeg"
            ],
            [
                "Rachel Heinrichs",
                "Winnipeg"
            ]
        ]
    },
    {
        "question": "Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\".",
        "query": "MATCH (player:`riding_club.player`)\nWHERE player.Residence = 'Brandon' OR player.Residence = 'Birtle'\nRETURN player.Sponsor_name",
        "db_id": "riding_club",
        "answers": [
            [
                "Brandon\u2014Souris"
            ],
            [
                "Dauphin\u2014Swan River\u2014Marquette"
            ]
        ]
    },
    {
        "question": "What is the name of the player with the largest number of votes?",
        "query": "MATCH (player:`riding_club.player`)\nRETURN player.Player_name\nORDER BY player.Votes DESC\nLIMIT 1",
        "db_id": "riding_club",
        "answers": [
            [
                "Jim Maloway"
            ]
        ]
    },
    {
        "question": "Show different occupations along with the number of players in each occupation.",
        "query": "MATCH (player:`riding_club.player`)\nWITH player.Occupation AS Occupation, count(player.Occupation) AS count\nRETURN Occupation,count",
        "db_id": "riding_club",
        "answers": [
            [
                "Locomotive Engineer",
                1
            ],
            [
                "Ministerial Assistant",
                1
            ],
            [
                "Researcher",
                1
            ],
            [
                "Retired",
                2
            ],
            [
                "Small Businessman",
                1
            ],
            [
                "Self Employed / Consultant",
                1
            ],
            [
                "Distribution Centre Associate",
                1
            ],
            [
                "Design Coordinator",
                1
            ],
            [
                "Student",
                2
            ],
            [
                "Parliamentarian",
                2
            ],
            [
                "Product Consultant - MLCC",
                1
            ]
        ]
    },
    {
        "question": "Show the residences that have at least two players.",
        "query": "MATCH (player:`riding_club.player`)\nWITH count(*) AS count, player.Residence AS Residence\nWHERE count  >= 2\nRETURN Residence",
        "db_id": "riding_club",
        "answers": [
            [
                "Winnipeg"
            ]
        ]
    },
    {
        "question": "Show the names of players and names of their coaches.",
        "query": "MATCH ()-[T1:`riding_club.player_coach`]-(T2:`riding_club.coach`)-[]-(T3:`riding_club.player`)\nRETURN T3.Player_name,T2.Coach_name",
        "db_id": "riding_club",
        "answers": [
            [
                "Niki Ashton",
                "Jameson Tomas"
            ],
            [
                "Fiona Shiells",
                "Jameson Tomas"
            ],
            [
                "Jean Luc Bouch\u00e9",
                "Jameson Tomas"
            ],
            [
                "Fiona Shiells",
                "Jameson Tomas"
            ],
            [
                "Jean Luc Bouch\u00e9",
                "Jameson Tomas"
            ],
            [
                "Niki Ashton",
                "Jameson Tomas"
            ],
            [
                "Patricia Cordner",
                "Robert Chen"
            ],
            [
                "Ross Eadie",
                "Robert Chen"
            ]
        ]
    },
    {
        "question": "Show the names of players coached by the rank 1 coach.",
        "query": "MATCH ()-[T1:`riding_club.player_coach`]-(T2:`riding_club.coach`)-[]-(T3:`riding_club.player`)\nWHERE T2.Rank = 1\nRETURN T3.Player_name",
        "db_id": "riding_club",
        "answers": [
            [
                "Niki Ashton"
            ],
            [
                "Fiona Shiells"
            ],
            [
                "Jean Luc Bouch\u00e9"
            ],
            [
                "Fiona Shiells"
            ],
            [
                "Jean Luc Bouch\u00e9"
            ],
            [
                "Niki Ashton"
            ]
        ]
    },
    {
        "question": "Show the names of players and names of their coaches in descending order of the votes of players.",
        "query": "MATCH ()-[T1:`riding_club.player_coach`]-(T2:`riding_club.coach`)-[]-(T3:`riding_club.player`)\nRETURN T3.Player_name,T2.Coach_name\nORDER BY T3.Votes DESC",
        "db_id": "riding_club",
        "answers": [
            [
                "Ross Eadie",
                "Robert Chen"
            ],
            [
                "Patricia Cordner",
                "Robert Chen"
            ],
            [
                "Niki Ashton",
                "Jameson Tomas"
            ],
            [
                "Niki Ashton",
                "Jameson Tomas"
            ],
            [
                "Fiona Shiells",
                "Jameson Tomas"
            ],
            [
                "Fiona Shiells",
                "Jameson Tomas"
            ],
            [
                "Jean Luc Bouch\u00e9",
                "Jameson Tomas"
            ],
            [
                "Jean Luc Bouch\u00e9",
                "Jameson Tomas"
            ]
        ]
    },
    {
        "question": "List the names of players that do not have coaches.",
        "query": "MATCH (player:`riding_club.player`)\nWHERE NOT (player:`riding_club.player`)-[:`riding_club.player_coach`]-()\nRETURN player.Player_name",
        "db_id": "riding_club",
        "answers": [
            [
                "Jim Maloway"
            ],
            [
                "Mohamed Alli"
            ],
            [
                "Ross C. Martin"
            ],
            [
                "Matt Schaubroeck"
            ],
            [
                "Pat Martin"
            ],
            [
                "Judy Wasylycia-Leis"
            ],
            [
                "Sean Robert"
            ]
        ]
    },
    {
        "question": "How many coaches does each club has? List the club id, name and the number of coaches.",
        "query": "MATCH (T1:`riding_club.club`)-[]-(T2:`riding_club.coach`)\nWITH count(T1.Club_ID) AS count, T1.Club_name AS Club_name, T1.Club_ID AS Club_ID\nRETURN Club_ID,Club_name,count",
        "db_id": "riding_club",
        "answers": [
            [
                1,
                "AIK",
                3
            ],
            [
                3,
                "Djurg\u00e5rdens IF",
                2
            ]
        ]
    },
    {
        "question": "How many gymnasts are there?",
        "query": "MATCH (gymnast:`gymnast.gymnast`)\nRETURN count(*)",
        "db_id": "gymnast",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "Count the number of gymnasts.",
        "query": "MATCH (gymnast:`gymnast.gymnast`)\nRETURN count(*)",
        "db_id": "gymnast",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "List the total points of gymnasts in descending order.",
        "query": "MATCH (gymnast:`gymnast.gymnast`)\nRETURN gymnast.Total_Points\nORDER BY gymnast.Total_Points DESC",
        "db_id": "gymnast",
        "answers": [
            [
                58.061
            ],
            [
                57.924
            ],
            [
                57.649
            ],
            [
                57.436
            ],
            [
                57.424
            ],
            [
                57.398
            ],
            [
                57.374
            ]
        ]
    },
    {
        "question": "What are the total points for all gymnasts, ordered by total points descending?",
        "query": "MATCH (gymnast:`gymnast.gymnast`)\nRETURN gymnast.Total_Points\nORDER BY gymnast.Total_Points DESC",
        "db_id": "gymnast",
        "answers": [
            [
                58.061
            ],
            [
                57.924
            ],
            [
                57.649
            ],
            [
                57.436
            ],
            [
                57.424
            ],
            [
                57.398
            ],
            [
                57.374
            ]
        ]
    },
    {
        "question": "List the total points of gymnasts in descending order of floor exercise points.",
        "query": "MATCH (gymnast:`gymnast.gymnast`)\nRETURN gymnast.Total_Points\nORDER BY gymnast.Floor_Exercise_Points DESC",
        "db_id": "gymnast",
        "answers": [
            [
                57.436
            ],
            [
                58.061
            ],
            [
                57.924
            ],
            [
                57.424
            ],
            [
                57.398
            ],
            [
                57.374
            ],
            [
                57.649
            ]
        ]
    },
    {
        "question": "What are the total points of gymnasts, ordered by their floor exercise points descending?",
        "query": "MATCH (gymnast:`gymnast.gymnast`)\nRETURN gymnast.Total_Points\nORDER BY gymnast.Floor_Exercise_Points DESC",
        "db_id": "gymnast",
        "answers": [
            [
                57.436
            ],
            [
                58.061
            ],
            [
                57.924
            ],
            [
                57.424
            ],
            [
                57.398
            ],
            [
                57.374
            ],
            [
                57.649
            ]
        ]
    },
    {
        "question": "What is the average horizontal bar points for all gymnasts?",
        "query": "MATCH (gymnast:`gymnast.gymnast`)\nRETURN avg(gymnast.Horizontal_Bar_Points)",
        "db_id": "gymnast",
        "answers": [
            [
                9.603428571428571
            ]
        ]
    },
    {
        "question": "Return the average horizontal bar points across all gymnasts.",
        "query": "MATCH (gymnast:`gymnast.gymnast`)\nRETURN avg(gymnast.Horizontal_Bar_Points)",
        "db_id": "gymnast",
        "answers": [
            [
                9.603428571428571
            ]
        ]
    },
    {
        "question": "What are the names of people in ascending alphabetical order?",
        "query": "MATCH (people:`gymnast.people`)\nRETURN people.Name\nORDER BY people.Name ASC",
        "db_id": "gymnast",
        "answers": [
            [
                "Ashley P\u00e9rez Cabrera"
            ],
            [
                "Clary Sermina Delgado Cid"
            ],
            [
                "Elizabeth Qui\u00f1\u00f3nez Aroyo"
            ],
            [
                "Endis de los Santos \u00c1lvarez"
            ],
            [
                "Eve Tatiana Cruz Oviedo"
            ],
            [
                "Lorraine S\u00faarez Carmona"
            ],
            [
                "Marina Castro Medina"
            ],
            [
                "Nadia Caba Rodr\u00edguez"
            ],
            [
                "Paul Hamm"
            ],
            [
                "Rosa Clarissa Ort\u00edz Melo"
            ]
        ]
    },
    {
        "question": "Return the names of people, ordered alphabetically.",
        "query": "MATCH (people:`gymnast.people`)\nRETURN people.Name\nORDER BY people.Name ASC",
        "db_id": "gymnast",
        "answers": [
            [
                "Ashley P\u00e9rez Cabrera"
            ],
            [
                "Clary Sermina Delgado Cid"
            ],
            [
                "Elizabeth Qui\u00f1\u00f3nez Aroyo"
            ],
            [
                "Endis de los Santos \u00c1lvarez"
            ],
            [
                "Eve Tatiana Cruz Oviedo"
            ],
            [
                "Lorraine S\u00faarez Carmona"
            ],
            [
                "Marina Castro Medina"
            ],
            [
                "Nadia Caba Rodr\u00edguez"
            ],
            [
                "Paul Hamm"
            ],
            [
                "Rosa Clarissa Ort\u00edz Melo"
            ]
        ]
    },
    {
        "question": "What are the names of gymnasts?",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nRETURN T2.Name",
        "db_id": "gymnast",
        "answers": [
            [
                "Paul Hamm"
            ],
            [
                "Lorraine S\u00faarez Carmona"
            ],
            [
                "Elizabeth Qui\u00f1\u00f3nez Aroyo"
            ],
            [
                "Nadia Caba Rodr\u00edguez"
            ],
            [
                "Clary Sermina Delgado Cid"
            ],
            [
                "Marina Castro Medina"
            ],
            [
                "Endis de los Santos \u00c1lvarez"
            ]
        ]
    },
    {
        "question": "Return the names of the gymnasts.",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nRETURN T2.Name",
        "db_id": "gymnast",
        "answers": [
            [
                "Paul Hamm"
            ],
            [
                "Lorraine S\u00faarez Carmona"
            ],
            [
                "Elizabeth Qui\u00f1\u00f3nez Aroyo"
            ],
            [
                "Nadia Caba Rodr\u00edguez"
            ],
            [
                "Clary Sermina Delgado Cid"
            ],
            [
                "Marina Castro Medina"
            ],
            [
                "Endis de los Santos \u00c1lvarez"
            ]
        ]
    },
    {
        "question": "What are the names of gymnasts whose hometown is not \"Santo Domingo\"?",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nWHERE T2.Hometown <> 'Santo Domingo'\nRETURN T2.Name",
        "db_id": "gymnast",
        "answers": [
            [
                "Lorraine S\u00faarez Carmona"
            ],
            [
                "Clary Sermina Delgado Cid"
            ],
            [
                "Endis de los Santos \u00c1lvarez"
            ]
        ]
    },
    {
        "question": "Return the names of gymnasts who did not grow up in Santo Domingo.",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nWHERE T2.Hometown <> 'Santo Domingo'\nRETURN T2.Name",
        "db_id": "gymnast",
        "answers": [
            [
                "Lorraine S\u00faarez Carmona"
            ],
            [
                "Clary Sermina Delgado Cid"
            ],
            [
                "Endis de los Santos \u00c1lvarez"
            ]
        ]
    },
    {
        "question": "What is the age of the tallest person?",
        "query": "MATCH (people:`gymnast.people`)\nRETURN people.Age\nORDER BY people.Height DESC\nLIMIT 1",
        "db_id": "gymnast",
        "answers": [
            [
                23.0
            ]
        ]
    },
    {
        "question": "Return the age of the person with the greatest height.",
        "query": "MATCH (people:`gymnast.people`)\nRETURN people.Age\nORDER BY people.Height DESC\nLIMIT 1",
        "db_id": "gymnast",
        "answers": [
            [
                23.0
            ]
        ]
    },
    {
        "question": "List the names of the top 5 oldest people.",
        "query": "MATCH (people:`gymnast.people`)\nRETURN people.Name\nORDER BY people.Age DESC\nLIMIT 5",
        "db_id": "gymnast",
        "answers": [
            [
                "Paul Hamm"
            ],
            [
                "Endis de los Santos \u00c1lvarez"
            ],
            [
                "Rosa Clarissa Ort\u00edz Melo"
            ],
            [
                "Nadia Caba Rodr\u00edguez"
            ],
            [
                "Lorraine S\u00faarez Carmona"
            ]
        ]
    },
    {
        "question": "What are the names of the five oldest people?",
        "query": "MATCH (people:`gymnast.people`)\nRETURN people.Name\nORDER BY people.Age DESC\nLIMIT 5",
        "db_id": "gymnast",
        "answers": [
            [
                "Paul Hamm"
            ],
            [
                "Endis de los Santos \u00c1lvarez"
            ],
            [
                "Rosa Clarissa Ort\u00edz Melo"
            ],
            [
                "Nadia Caba Rodr\u00edguez"
            ],
            [
                "Lorraine S\u00faarez Carmona"
            ]
        ]
    },
    {
        "question": "What is the total point count of the youngest gymnast?",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nRETURN T1.Total_Points\nORDER BY T2.Age ASC\nLIMIT 1",
        "db_id": "gymnast",
        "answers": [
            [
                57.649
            ]
        ]
    },
    {
        "question": "Return the total points of the gymnast with the lowest age.",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nRETURN T1.Total_Points\nORDER BY T2.Age ASC\nLIMIT 1",
        "db_id": "gymnast",
        "answers": [
            [
                57.649
            ]
        ]
    },
    {
        "question": "What is the average age of all gymnasts?",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nRETURN avg(T2.Age)",
        "db_id": "gymnast",
        "answers": [
            [
                21.714285714285715
            ]
        ]
    },
    {
        "question": "Return the average age across all gymnasts.",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nRETURN avg(T2.Age)",
        "db_id": "gymnast",
        "answers": [
            [
                21.714285714285715
            ]
        ]
    },
    {
        "question": "What are the hometowns of gymnasts and the corresponding number of gymnasts?",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nWITH T2.Hometown AS Hometown, count(T2.Hometown) AS count\nRETURN Hometown,count",
        "db_id": "gymnast",
        "answers": [
            [
                "Santo Domingo",
                4
            ],
            [
                "Bonao",
                1
            ],
            [
                "Santiago de los Caballeros",
                1
            ],
            [
                "Los Alcarrizos",
                1
            ]
        ]
    },
    {
        "question": "How many gymnasts are from each hometown?",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nWITH T2.Hometown AS Hometown, count(T2.Hometown) AS count\nRETURN Hometown,count",
        "db_id": "gymnast",
        "answers": [
            [
                "Santo Domingo",
                4
            ],
            [
                "Bonao",
                1
            ],
            [
                "Santiago de los Caballeros",
                1
            ],
            [
                "Los Alcarrizos",
                1
            ]
        ]
    },
    {
        "question": "What is the most common hometown of gymnasts?",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nWITH T2.Hometown AS Hometown, count(T2.Hometown) AS count\nRETURN Hometown\nORDER BY count DESC\nLIMIT 1",
        "db_id": "gymnast",
        "answers": [
            [
                "Santo Domingo"
            ]
        ]
    },
    {
        "question": "Return the hometown that is most common among gymnasts.",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nWITH T2.Hometown AS Hometown, count(T2.Hometown) AS count\nRETURN Hometown\nORDER BY count DESC\nLIMIT 1",
        "db_id": "gymnast",
        "answers": [
            [
                "Santo Domingo"
            ]
        ]
    },
    {
        "question": "What are the hometowns that are shared by at least two gymnasts?",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nWITH count(*) AS count, T2.Hometown AS Hometown\nWHERE count  >= 2\nRETURN Hometown",
        "db_id": "gymnast",
        "answers": [
            [
                "Santo Domingo"
            ]
        ]
    },
    {
        "question": "Give the hometowns from which two or more gymnasts are from.",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nWITH count(*) AS count, T2.Hometown AS Hometown\nWHERE count  >= 2\nRETURN Hometown",
        "db_id": "gymnast",
        "answers": [
            [
                "Santo Domingo"
            ]
        ]
    },
    {
        "question": "List the names of gymnasts in ascending order by their heights.",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nRETURN T2.Name\nORDER BY T2.Height ASC",
        "db_id": "gymnast",
        "answers": [
            [
                "Paul Hamm"
            ],
            [
                "Elizabeth Qui\u00f1\u00f3nez Aroyo"
            ],
            [
                "Endis de los Santos \u00c1lvarez"
            ],
            [
                "Lorraine S\u00faarez Carmona"
            ],
            [
                "Clary Sermina Delgado Cid"
            ],
            [
                "Marina Castro Medina"
            ],
            [
                "Nadia Caba Rodr\u00edguez"
            ]
        ]
    },
    {
        "question": "What are the names of gymnasts, ordered by their heights ascending?",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nRETURN T2.Name\nORDER BY T2.Height ASC",
        "db_id": "gymnast",
        "answers": [
            [
                "Paul Hamm"
            ],
            [
                "Elizabeth Qui\u00f1\u00f3nez Aroyo"
            ],
            [
                "Endis de los Santos \u00c1lvarez"
            ],
            [
                "Lorraine S\u00faarez Carmona"
            ],
            [
                "Clary Sermina Delgado Cid"
            ],
            [
                "Marina Castro Medina"
            ],
            [
                "Nadia Caba Rodr\u00edguez"
            ]
        ]
    },
    {
        "question": "How many distinct hometowns did these people have?",
        "query": "MATCH (people:`gymnast.people`)\nRETURN count(DISTINCT people.Hometown)",
        "db_id": "gymnast",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "Count the number of different hometowns of these people.",
        "query": "MATCH (people:`gymnast.people`)\nRETURN count(DISTINCT people.Hometown)",
        "db_id": "gymnast",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "Show the ages of gymnasts in descending order of total points.",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nRETURN T2.Age\nORDER BY T1.Total_Points DESC",
        "db_id": "gymnast",
        "answers": [
            [
                24.0
            ],
            [
                21.0
            ],
            [
                20.0
            ],
            [
                22.0
            ],
            [
                21.0
            ],
            [
                20.0
            ],
            [
                24.0
            ]
        ]
    },
    {
        "question": "What are the ages of the gymnasts, ordered descending by their total points?",
        "query": "MATCH (T1:`gymnast.gymnast`)-[]-(T2:`gymnast.people`)\nRETURN T2.Age\nORDER BY T1.Total_Points DESC",
        "db_id": "gymnast",
        "answers": [
            [
                24.0
            ],
            [
                21.0
            ],
            [
                20.0
            ],
            [
                22.0
            ],
            [
                21.0
            ],
            [
                20.0
            ],
            [
                24.0
            ]
        ]
    },
    {
        "question": "How many accounts are there in total?",
        "query": "MATCH (accounts:`small_bank_1.ACCOUNTS`)\nRETURN count(*)",
        "db_id": "small_bank_1",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "Count the number of accounts.",
        "query": "MATCH (accounts:`small_bank_1.ACCOUNTS`)\nRETURN count(*)",
        "db_id": "small_bank_1",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "Find the average checking balance.",
        "query": "MATCH (checking:`small_bank_1.CHECKING`)\nRETURN avg(checking.balance)",
        "db_id": "small_bank_1",
        "answers": [
            [
                4583.428571428572
            ]
        ]
    },
    {
        "question": "What is the average balance in checking accounts?",
        "query": "MATCH (checking:`small_bank_1.CHECKING`)\nRETURN avg(checking.balance)",
        "db_id": "small_bank_1",
        "answers": [
            [
                4583.428571428572
            ]
        ]
    },
    {
        "question": "List all customers\u2019 names in the alphabetical order.",
        "query": "MATCH (accounts:`small_bank_1.ACCOUNTS`)\nRETURN accounts.name\nORDER BY accounts.name",
        "db_id": "small_bank_1",
        "answers": [
            [
                "Brown"
            ],
            [
                "Granger"
            ],
            [
                "O'mahony"
            ],
            [
                "Porter"
            ],
            [
                "Wang"
            ],
            [
                "Weeks"
            ],
            [
                "Wesley"
            ]
        ]
    },
    {
        "question": "What are the names of all the customers in alphabetical order?",
        "query": "MATCH (accounts:`small_bank_1.ACCOUNTS`)\nRETURN accounts.name\nORDER BY accounts.name",
        "db_id": "small_bank_1",
        "answers": [
            [
                "Brown"
            ],
            [
                "Granger"
            ],
            [
                "O'mahony"
            ],
            [
                "Porter"
            ],
            [
                "Wang"
            ],
            [
                "Weeks"
            ],
            [
                "Wesley"
            ]
        ]
    },
    {
        "question": "Find the number of checking accounts for each account name.",
        "query": "MATCH (T1:`small_bank_1.ACCOUNTS`)-[]-(T2:`small_bank_1.CHECKING`)\nWITH T1.name AS name, count(T1.name) AS count\nRETURN count,name",
        "db_id": "small_bank_1",
        "answers": [
            [
                1,
                "Brown"
            ],
            [
                1,
                "Wang"
            ],
            [
                1,
                "O'mahony"
            ],
            [
                1,
                "Weeks"
            ],
            [
                1,
                "Granger"
            ],
            [
                1,
                "Porter"
            ],
            [
                1,
                "Wesley"
            ]
        ]
    },
    {
        "question": "What are the names of customers with accounts, and how many checking accounts do each of them have?",
        "query": "MATCH (T1:`small_bank_1.ACCOUNTS`)-[]-(T2:`small_bank_1.CHECKING`)\nWITH T1.name AS name, count(T1.name) AS count\nRETURN count,name",
        "db_id": "small_bank_1",
        "answers": [
            [
                1,
                "Brown"
            ],
            [
                1,
                "Wang"
            ],
            [
                1,
                "O'mahony"
            ],
            [
                1,
                "Weeks"
            ],
            [
                1,
                "Granger"
            ],
            [
                1,
                "Porter"
            ],
            [
                1,
                "Wesley"
            ]
        ]
    },
    {
        "question": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.",
        "query": "MATCH (T1:`small_bank_1.ACCOUNTS`)-[]-(T2:`small_bank_1.SAVINGS`)\nRETURN T1.name,T2.balance\nORDER BY T2.balance DESC\nLIMIT 3",
        "db_id": "small_bank_1",
        "answers": [
            [
                "Wang",
                999999999.0
            ],
            [
                "O'mahony",
                230000.0
            ],
            [
                "Brown",
                200000.0
            ]
        ]
    },
    {
        "question": "What are names and savings balances of the three accounts with the highest savings balances?",
        "query": "MATCH (T1:`small_bank_1.ACCOUNTS`)-[]-(T2:`small_bank_1.SAVINGS`)\nRETURN T1.name,T2.balance\nORDER BY T2.balance DESC\nLIMIT 3",
        "db_id": "small_bank_1",
        "answers": [
            [
                "Wang",
                999999999.0
            ],
            [
                "O'mahony",
                230000.0
            ],
            [
                "Brown",
                200000.0
            ]
        ]
    },
    {
        "question": "How many main stream browsers whose market share is at least 5 exist?",
        "query": "MATCH (browser:`browser_web.browser`)\nWHERE browser.market_share >= 5\nRETURN count(*)",
        "db_id": "browser_web",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "List the name of browsers in descending order by market share.",
        "query": "MATCH (browser:`browser_web.browser`)\nRETURN browser.name\nORDER BY browser.market_share DESC",
        "db_id": "browser_web",
        "answers": [
            [
                "Internet Explorer"
            ],
            [
                "Firefox"
            ],
            [
                "Safari"
            ],
            [
                "Opera"
            ]
        ]
    },
    {
        "question": "List the ids, names and market shares of all browsers.",
        "query": "MATCH (browser:`browser_web.browser`)\nRETURN browser.id,browser.name,browser.market_share",
        "db_id": "browser_web",
        "answers": [
            [
                1,
                "Internet Explorer",
                28.96
            ],
            [
                2,
                "Firefox",
                18.11
            ],
            [
                3,
                "Safari",
                8.54
            ],
            [
                4,
                "Opera",
                1.2
            ]
        ]
    },
    {
        "question": "What is the id and market share of the browser Safari?",
        "query": "MATCH (browser:`browser_web.browser`)\nWHERE browser.name = 'Safari'\nRETURN browser.id,browser.market_share",
        "db_id": "browser_web",
        "answers": [
            [
                3,
                8.54
            ]
        ]
    },
    {
        "question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?",
        "query": "MATCH (web_client_accelerator:`browser_web.Web_client_accelerator`)\nWHERE web_client_accelerator.Connection <> 'Broadband'\nRETURN web_client_accelerator.name,web_client_accelerator.Operating_system",
        "db_id": "browser_web",
        "answers": [
            [
                "CACHEbox",
                "Appliance (Linux)"
            ],
            [
                "CProxy",
                "Windows"
            ],
            [
                "Fasterfox",
                "Windows, Mac, Linux and Mobile devices"
            ],
            [
                "fasTun",
                "Any"
            ],
            [
                "Freewire",
                "Windows, except NT and 95"
            ],
            [
                "Heigh Speed",
                "Windows"
            ],
            [
                "Netfury",
                "Windows, Mac"
            ],
            [
                "Nitro",
                "Windows, Mac"
            ],
            [
                "ONSPEED",
                "Windows, Mac and Mobile devices"
            ],
            [
                "Opera Turbo",
                "Android, Linux, Mac and Windows devices"
            ],
            [
                "Polipo",
                "Unix (Linux, *BSD, Mac OS X, others), Windows"
            ],
            [
                "Propel",
                "Windows, Mac"
            ],
            [
                "Proxyconn Web Accelerator",
                "Windows, Mac, Mobile devices"
            ],
            [
                "RabbIT",
                "Any system with Java 1.6 VM available"
            ],
            [
                "Squid",
                "Unix (Linux, *BSD, Mac OS X, others), Windows"
            ],
            [
                "Toonel",
                "Windows, Linux, Mac OS, Symbian, WindowsMobile"
            ],
            [
                "WinGate",
                "Windows (2000 onwards)"
            ],
            [
                "Ziproxy",
                "Unix (Linux, *BSD, Mac OS X, others)"
            ]
        ]
    },
    {
        "question": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?",
        "query": "MATCH (T1:`browser_web.browser`)-[T2:`browser_web.accelerator_compatible_browser`]-(T3:`browser_web.Web_client_accelerator`)\nWHERE T3.name = 'CProxy' AND T2.compatible_since_year > 1998\nRETURN T1.name",
        "db_id": "browser_web",
        "answers": [
            [
                "Opera"
            ]
        ]
    },
    {
        "question": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
        "query": "MATCH (T1:`browser_web.Web_client_accelerator`)-[T2:`browser_web.accelerator_compatible_browser`]-()\nWITH count(*) AS count, T1.id AS id, T1.name AS name\nWHERE count  >= 2\nRETURN id,name",
        "db_id": "browser_web",
        "answers": [
            [
                1,
                "CACHEbox"
            ],
            [
                2,
                "CProxy"
            ],
            [
                3,
                "Fasterfox"
            ]
        ]
    },
    {
        "question": "What is the id and name of the browser that is compatible with the most web accelerators?",
        "query": "MATCH (T1:`browser_web.browser`)-[T2:`browser_web.accelerator_compatible_browser`]-()\nWITH T1.name AS name, T1.id AS id, count(T1.id) AS count\nRETURN id,name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "browser_web",
        "answers": [
            [
                1,
                "Internet Explorer"
            ]
        ]
    },
    {
        "question": "How many different kinds of clients are supported by the web clients accelerators?",
        "query": "MATCH (web_client_accelerator:`browser_web.Web_client_accelerator`)\nRETURN count(DISTINCT web_client_accelerator.Client)",
        "db_id": "browser_web",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "How many accelerators are not compatible with the browsers listed ?",
        "query": "MATCH (web_client_accelerator:`browser_web.Web_client_accelerator`)\nWHERE NOT (web_client_accelerator:`browser_web.Web_client_accelerator`)-[:`browser_web.accelerator_compatible_browser`]-()\nRETURN count(*)",
        "db_id": "browser_web",
        "answers": [
            [
                14
            ]
        ]
    },
    {
        "question": "What distinct accelerator names are compatible with the browswers that have market share higher than 15?",
        "query": "MATCH (T1:`browser_web.Web_client_accelerator`)-[T2:`browser_web.accelerator_compatible_browser`]-(T3:`browser_web.browser`)\nWHERE T3.market_share > 15\nRETURN DISTINCT T1.name",
        "db_id": "browser_web",
        "answers": [
            [
                "CACHEbox"
            ],
            [
                "Fasterfox"
            ],
            [
                "Nitro"
            ]
        ]
    },
    {
        "question": "Find the number of web accelerators used for each Operating system.",
        "query": "MATCH (web_client_accelerator:`browser_web.Web_client_accelerator`)\nWITH web_client_accelerator.Operating_system AS Operating_system, count(web_client_accelerator.Operating_system) AS count\nRETURN Operating_system,count",
        "db_id": "browser_web",
        "answers": [
            [
                "Appliance (Linux)",
                1
            ],
            [
                "Windows",
                3
            ],
            [
                "Windows, Mac, Linux and Mobile devices",
                1
            ],
            [
                "Any",
                1
            ],
            [
                "Windows, except NT and 95",
                1
            ],
            [
                "Windows, Mac",
                3
            ],
            [
                "Windows, Mac and Mobile devices",
                1
            ],
            [
                "Android, Linux, Mac and Windows devices",
                1
            ],
            [
                "Unix (Linux, *BSD, Mac OS X, others), Windows",
                2
            ],
            [
                "Windows, Mac, Mobile devices",
                1
            ],
            [
                "Any system with Java 1.6 VM available",
                1
            ],
            [
                "Windows, Linux, Mac OS, Symbian, WindowsMobile",
                1
            ],
            [
                "Windows (2000 onwards)",
                1
            ],
            [
                "Unix (Linux, *BSD, Mac OS X, others)",
                1
            ]
        ]
    },
    {
        "question": "How many wrestlers are there?",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nRETURN count(*)",
        "db_id": "wrestler",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "Count the number of wrestlers.",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nRETURN count(*)",
        "db_id": "wrestler",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "List the names of wrestlers in descending order of days held.",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nRETURN wrestler.Name\nORDER BY wrestler.Days_held DESC",
        "db_id": "wrestler",
        "answers": [
            [
                "The Great Sasuke \u00a7"
            ],
            [
                "Gran Hamada"
            ],
            [
                "Shinjiro Otani \u00a7"
            ],
            [
                "\u00daltimo Drag\u00f3n \u00a7"
            ],
            [
                "El Samurai \u00a7"
            ],
            [
                "Rey Misterio Sr."
            ],
            [
                "Jushin Liger \u00a7"
            ],
            [
                "Villa\u00f1o IV"
            ],
            [
                "Fishman"
            ],
            [
                "El Samurai"
            ]
        ]
    },
    {
        "question": "What are the names of the wrestlers, ordered descending by days held?",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nRETURN wrestler.Name\nORDER BY wrestler.Days_held DESC",
        "db_id": "wrestler",
        "answers": [
            [
                "The Great Sasuke \u00a7"
            ],
            [
                "Gran Hamada"
            ],
            [
                "Shinjiro Otani \u00a7"
            ],
            [
                "\u00daltimo Drag\u00f3n \u00a7"
            ],
            [
                "El Samurai \u00a7"
            ],
            [
                "Rey Misterio Sr."
            ],
            [
                "Jushin Liger \u00a7"
            ],
            [
                "Villa\u00f1o IV"
            ],
            [
                "Fishman"
            ],
            [
                "El Samurai"
            ]
        ]
    },
    {
        "question": "What is the name of the wrestler with the fewest days held?",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nRETURN wrestler.Name\nORDER BY wrestler.Days_held ASC\nLIMIT 1",
        "db_id": "wrestler",
        "answers": [
            [
                "El Samurai"
            ]
        ]
    },
    {
        "question": "Return the name of the wrestler who had the lowest number of days held.",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nRETURN wrestler.Name\nORDER BY wrestler.Days_held ASC\nLIMIT 1",
        "db_id": "wrestler",
        "answers": [
            [
                "El Samurai"
            ]
        ]
    },
    {
        "question": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nWHERE wrestler.Location <> 'Tokyo , Japan'\nRETURN DISTINCT wrestler.Reign",
        "db_id": "wrestler",
        "answers": [
            [
                "1"
            ],
            [
                "2"
            ]
        ]
    },
    {
        "question": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nWHERE wrestler.Location <> 'Tokyo , Japan'\nRETURN DISTINCT wrestler.Reign",
        "db_id": "wrestler",
        "answers": [
            [
                "1"
            ],
            [
                "2"
            ]
        ]
    },
    {
        "question": "What are the names and location of the wrestlers?",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nRETURN wrestler.Name,wrestler.Location",
        "db_id": "wrestler",
        "answers": [
            [
                "Rey Misterio Sr.",
                "Tijuana , Mexico"
            ],
            [
                "Fishman",
                "Tijuana , Mexico"
            ],
            [
                "Villa\u00f1o IV",
                "Tijuana , Mexico"
            ],
            [
                "Gran Hamada",
                "Tokyo , Japan"
            ],
            [
                "El Samurai",
                "Tokyo , Japan"
            ],
            [
                "The Great Sasuke \u00a7",
                "Tokyo , Japan"
            ],
            [
                "\u00daltimo Drag\u00f3n \u00a7",
                "Osaka , Japan"
            ],
            [
                "Jushin Liger \u00a7",
                "Tokyo , Japan"
            ],
            [
                "El Samurai \u00a7",
                "Sapporo , Japan"
            ],
            [
                "Shinjiro Otani \u00a7",
                "Nagoya , Japan"
            ]
        ]
    },
    {
        "question": "Give the names and locations of all wrestlers.",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nRETURN wrestler.Name,wrestler.Location",
        "db_id": "wrestler",
        "answers": [
            [
                "Rey Misterio Sr.",
                "Tijuana , Mexico"
            ],
            [
                "Fishman",
                "Tijuana , Mexico"
            ],
            [
                "Villa\u00f1o IV",
                "Tijuana , Mexico"
            ],
            [
                "Gran Hamada",
                "Tokyo , Japan"
            ],
            [
                "El Samurai",
                "Tokyo , Japan"
            ],
            [
                "The Great Sasuke \u00a7",
                "Tokyo , Japan"
            ],
            [
                "\u00daltimo Drag\u00f3n \u00a7",
                "Osaka , Japan"
            ],
            [
                "Jushin Liger \u00a7",
                "Tokyo , Japan"
            ],
            [
                "El Samurai \u00a7",
                "Sapporo , Japan"
            ],
            [
                "Shinjiro Otani \u00a7",
                "Nagoya , Japan"
            ]
        ]
    },
    {
        "question": "What are the elimination moves of wrestlers whose team is \"Team Orton\"?",
        "query": "MATCH (elimination:`wrestler.Elimination`)\nWHERE elimination.Team = 'Team Orton'\nRETURN elimination.Elimination_Move",
        "db_id": "wrestler",
        "answers": [
            [
                "Go To Sleep"
            ],
            [
                "Spear"
            ]
        ]
    },
    {
        "question": "Return the elimination movies of wrestlers on Team Orton.",
        "query": "MATCH (elimination:`wrestler.Elimination`)\nWHERE elimination.Team = 'Team Orton'\nRETURN elimination.Elimination_Move",
        "db_id": "wrestler",
        "answers": [
            [
                "Go To Sleep"
            ],
            [
                "Spear"
            ]
        ]
    },
    {
        "question": "Show different teams in eliminations and the number of eliminations from each team.",
        "query": "MATCH (elimination:`wrestler.Elimination`)\nWITH count(elimination.Team) AS count, elimination.Team AS Team\nRETURN Team,count",
        "db_id": "wrestler",
        "answers": [
            [
                "Team Orton",
                2
            ],
            [
                "Team Batista",
                4
            ]
        ]
    },
    {
        "question": "How many eliminations did each team have?",
        "query": "MATCH (elimination:`wrestler.Elimination`)\nWITH count(elimination.Team) AS count, elimination.Team AS Team\nRETURN Team,count",
        "db_id": "wrestler",
        "answers": [
            [
                "Team Orton",
                2
            ],
            [
                "Team Batista",
                4
            ]
        ]
    },
    {
        "question": "Show teams that have suffered more than three eliminations.",
        "query": "MATCH (elimination:`wrestler.Elimination`)\nWITH count(*) AS count, elimination.Team AS Team\nWHERE count  > 3\nRETURN Team",
        "db_id": "wrestler",
        "answers": [
            [
                "Team Batista"
            ]
        ]
    },
    {
        "question": "Which teams had more than 3 eliminations?",
        "query": "MATCH (elimination:`wrestler.Elimination`)\nWITH count(*) AS count, elimination.Team AS Team\nWHERE count  > 3\nRETURN Team",
        "db_id": "wrestler",
        "answers": [
            [
                "Team Batista"
            ]
        ]
    },
    {
        "question": "Show the reign and days held of wrestlers.",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nRETURN wrestler.Reign,wrestler.Days_held",
        "db_id": "wrestler",
        "answers": [
            [
                "1",
                "344"
            ],
            [
                "1",
                "113"
            ],
            [
                "1",
                "1285"
            ],
            [
                "1",
                "960"
            ],
            [
                "1",
                "1"
            ],
            [
                "1",
                "99"
            ],
            [
                "1",
                "54"
            ],
            [
                "1",
                "183"
            ],
            [
                "2",
                "35"
            ],
            [
                "1",
                "56"
            ]
        ]
    },
    {
        "question": "What are the reigns and days held of all wrestlers?",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nRETURN wrestler.Reign,wrestler.Days_held",
        "db_id": "wrestler",
        "answers": [
            [
                "1",
                "344"
            ],
            [
                "1",
                "113"
            ],
            [
                "1",
                "1285"
            ],
            [
                "1",
                "960"
            ],
            [
                "1",
                "1"
            ],
            [
                "1",
                "99"
            ],
            [
                "1",
                "54"
            ],
            [
                "1",
                "183"
            ],
            [
                "2",
                "35"
            ],
            [
                "1",
                "56"
            ]
        ]
    },
    {
        "question": "Please show the most common reigns of wrestlers.",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nWITH count(wrestler.Reign) AS count, wrestler.Reign AS Reign\nRETURN Reign\nORDER BY count DESC\nLIMIT 1",
        "db_id": "wrestler",
        "answers": [
            [
                "1"
            ]
        ]
    },
    {
        "question": "Which reign is the most common among wrestlers?",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nWITH count(wrestler.Reign) AS count, wrestler.Reign AS Reign\nRETURN Reign\nORDER BY count DESC\nLIMIT 1",
        "db_id": "wrestler",
        "answers": [
            [
                "1"
            ]
        ]
    },
    {
        "question": "List the locations that are shared by more than two wrestlers.",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nWITH count(*) AS count, wrestler.Location AS Location\nWHERE count  > 2\nRETURN Location",
        "db_id": "wrestler",
        "answers": [
            [
                "Tijuana , Mexico"
            ],
            [
                "Tokyo , Japan"
            ]
        ]
    },
    {
        "question": "Which locations are shared by more than two wrestlers?",
        "query": "MATCH (wrestler:`wrestler.wrestler`)\nWITH count(*) AS count, wrestler.Location AS Location\nWHERE count  > 2\nRETURN Location",
        "db_id": "wrestler",
        "answers": [
            [
                "Tijuana , Mexico"
            ],
            [
                "Tokyo , Japan"
            ]
        ]
    },
    {
        "question": "What is the number of distinct teams that suffer elimination?",
        "query": "MATCH (elimination:`wrestler.Elimination`)\nRETURN count(DISTINCT elimination.Team)",
        "db_id": "wrestler",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "How many different teams have had eliminated wrestlers?",
        "query": "MATCH (elimination:`wrestler.Elimination`)\nRETURN count(DISTINCT elimination.Team)",
        "db_id": "wrestler",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "How many schools are there?",
        "query": "MATCH (school:`school_finance.School`)\nRETURN count(*)",
        "db_id": "school_finance",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "Count the number of schools.",
        "query": "MATCH (school:`school_finance.School`)\nRETURN count(*)",
        "db_id": "school_finance",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "Show all school names in alphabetical order.",
        "query": "MATCH (school:`school_finance.School`)\nRETURN school.School_name\nORDER BY school.School_name",
        "db_id": "school_finance",
        "answers": [
            [
                "Bremen"
            ],
            [
                "Culver Community"
            ],
            [
                "Glenn"
            ],
            [
                "Jimtown"
            ],
            [
                "Knox Community"
            ],
            [
                "LaVille"
            ],
            [
                "New Prairie 1"
            ],
            [
                "Triton"
            ]
        ]
    },
    {
        "question": "List the name, location, mascot for all schools.",
        "query": "MATCH (school:`school_finance.School`)\nRETURN school.School_name,school.Location,school.Mascot",
        "db_id": "school_finance",
        "answers": [
            [
                "Bremen",
                "Bremen",
                "Lions"
            ],
            [
                "Culver Community",
                "Culver",
                "Cavaliers"
            ],
            [
                "Glenn",
                "Walkerton",
                "Falcons"
            ],
            [
                "Jimtown",
                "Elkhart",
                "Jimmies"
            ],
            [
                "Knox Community",
                "Knox",
                "Redskins"
            ],
            [
                "LaVille",
                "Lakeville",
                "Lancers"
            ],
            [
                "New Prairie 1",
                "New Carlisle",
                "Cougars"
            ],
            [
                "Triton",
                "Bourbon",
                "Trojans"
            ]
        ]
    },
    {
        "question": "List the name of the school with the smallest enrollment.",
        "query": "MATCH (school:`school_finance.School`)\nRETURN school.School_name\nORDER BY school.Enrollment\nLIMIT 1",
        "db_id": "school_finance",
        "answers": [
            [
                "Culver Community"
            ]
        ]
    },
    {
        "question": "Show the average, maximum, minimum enrollment of all schools.",
        "query": "MATCH (school:`school_finance.School`)\nRETURN avg(school.Enrollment),max(school.Enrollment),min(school.Enrollment)",
        "db_id": "school_finance",
        "answers": [
            [
                519.375,
                852,
                287
            ]
        ]
    },
    {
        "question": "List the amount and donor name for the largest amount of donation.",
        "query": "MATCH (endowment:`school_finance.endowment`)\nRETURN endowment.amount,endowment.donator_name\nORDER BY endowment.amount DESC\nLIMIT 1",
        "db_id": "school_finance",
        "answers": [
            [
                9.83,
                "San Jos\u00e9 de Ocoa"
            ]
        ]
    },
    {
        "question": "How many budgets are above 3000 in year 2001 or before?",
        "query": "MATCH (budget:`school_finance.budget`)\nWHERE budget.Budgeted > 3000 AND budget.Year <= 2001\nRETURN count(*)",
        "db_id": "school_finance",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000",
        "query": "MATCH (budget:`school_finance.budget`)\nWHERE budget.Budgeted > 3000 AND budget.Year <= 2001\nRETURN count(*)",
        "db_id": "school_finance",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Show all donor names.",
        "query": "MATCH (endowment:`school_finance.endowment`)\nRETURN DISTINCT endowment.donator_name",
        "db_id": "school_finance",
        "answers": [
            [
                "Monte Plata"
            ],
            [
                "San Jos\u00e9 de Ocoa"
            ],
            [
                "Distrito Nacional"
            ],
            [
                "Valverde"
            ],
            [
                "San Crist\u00f3bal"
            ],
            [
                "Santo Domingo Este"
            ],
            [
                "Santiago"
            ],
            [
                "Duarte"
            ],
            [
                "Com. Dom. En Estados Unidos"
            ],
            [
                "La Vega"
            ],
            [
                "Peravia"
            ]
        ]
    },
    {
        "question": "How many budget record has a budget amount smaller than the invested amount?",
        "query": "MATCH (budget:`school_finance.budget`)\nWHERE budget.Budgeted < budget.Invested\nRETURN count(*)",
        "db_id": "school_finance",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "How many buildings are there?",
        "query": "MATCH (building:`protein_institute.building`)\nRETURN count(*)",
        "db_id": "protein_institute",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "Show the name, street address, and number of floors for all buildings ordered by the number of floors.",
        "query": "MATCH (building:`protein_institute.building`)\nRETURN building.Name,building.Street_address,building.Floors\nORDER BY building.Floors",
        "db_id": "protein_institute",
        "answers": [
            [
                "Tampa City Hall",
                "315 John F. Kennedy Boulevard",
                10
            ],
            [
                "Citizens Bank Building",
                "701 North Franklin Street",
                12
            ],
            [
                "Floridan Hotel",
                "905 Franklin Street",
                17
            ],
            [
                "Franklin Exchange Building",
                "655 North Franklin Street",
                22
            ],
            [
                "Park Tower",
                "400 North Tampa Street",
                36
            ],
            [
                "One Tampa City Center",
                "201 North Franklin Street",
                39
            ],
            [
                "Bank of America Tower",
                "101 East Kennedy Boulevard",
                42
            ],
            [
                "100 North Tampa",
                "100 North Tampa Street",
                42
            ]
        ]
    },
    {
        "question": "What is the name of the tallest building?",
        "query": "MATCH (building:`protein_institute.building`)\nRETURN building.Name\nORDER BY building.Height_feet DESC\nLIMIT 1",
        "db_id": "protein_institute",
        "answers": [
            [
                "100 North Tampa"
            ]
        ]
    },
    {
        "question": "What are the average, maximum, and minimum number of floors for all buildings?",
        "query": "MATCH (building:`protein_institute.building`)\nRETURN avg(building.Floors),max(building.Floors),min(building.Floors)",
        "db_id": "protein_institute",
        "answers": [
            [
                27.5,
                42,
                10
            ]
        ]
    },
    {
        "question": "List the names of buildings with at least 200 feet of height and with at least 20 floors.",
        "query": "MATCH (building:`protein_institute.building`)\nWHERE building.Height_feet >= 200 AND building.Floors >= 20\nRETURN building.Name",
        "db_id": "protein_institute",
        "answers": [
            [
                "Franklin Exchange Building"
            ],
            [
                "Park Tower"
            ],
            [
                "One Tampa City Center"
            ],
            [
                "Bank of America Tower"
            ],
            [
                "100 North Tampa"
            ]
        ]
    },
    {
        "question": "Show the names and locations of institutions that are founded after 1990 and have the type \"Private\".",
        "query": "MATCH (institution:`protein_institute.Institution`)\nWHERE institution.Founded > 1990 AND institution.Type = 'Private'\nRETURN institution.Institution,institution.Location",
        "db_id": "protein_institute",
        "answers": [
            [
                "Ave Maria University",
                "Ave Maria, Florida"
            ],
            [
                "Lindenwood University\u2013Belleville",
                "Belleville, Illinois"
            ]
        ]
    },
    {
        "question": "Show the institution type with the largest number of institutions.",
        "query": "MATCH (institution:`protein_institute.Institution`)\nWITH count(institution.Type) AS count, institution.Type AS Type\nRETURN Type\nORDER BY count DESC\nLIMIT 1",
        "db_id": "protein_institute",
        "answers": [
            [
                "Private"
            ]
        ]
    },
    {
        "question": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.",
        "query": "MATCH (institution:`protein_institute.Institution`)\nWHERE institution.Founded > 1990 AND institution.Enrollment >= 1000\nRETURN institution.Type",
        "db_id": "protein_institute",
        "answers": [
            [
                "Private"
            ],
            [
                "Private"
            ]
        ]
    },
    {
        "question": "Show the name of buildings that do not have any institution.",
        "query": "MATCH (building:`protein_institute.building`)\nWHERE NOT (building:`protein_institute.building`)-[]-(:`protein_institute.Institution`)\nRETURN building.Name",
        "db_id": "protein_institute",
        "answers": [
            [
                "Bank of America Tower"
            ]
        ]
    },
    {
        "question": "For each building, show the name of the building and the number of institutions in it.",
        "query": "MATCH (T1:`protein_institute.building`)-[]-(T2:`protein_institute.Institution`)\nWITH T1.Name AS Name, count(T1.building_id) AS count\nRETURN Name,count",
        "db_id": "protein_institute",
        "answers": [
            [
                "Citizens Bank Building",
                2
            ],
            [
                "Tampa City Hall",
                2
            ],
            [
                "Floridan Hotel",
                1
            ],
            [
                "Franklin Exchange Building",
                2
            ],
            [
                "Park Tower",
                1
            ],
            [
                "One Tampa City Center",
                2
            ],
            [
                "100 North Tampa",
                1
            ]
        ]
    },
    {
        "question": "Show the names and heights of buildings with at least two institutions founded after 1880.",
        "query": "MATCH (T1:`protein_institute.building`)-[]-(T2:`protein_institute.Institution`)\nWHERE T2.Founded > 1880\nWITH T1.Name AS Name, count(*) AS count, T1.Height_feet AS Height_feet\nWHERE count  >= 2\nRETURN Name,Height_feet",
        "db_id": "protein_institute",
        "answers": [
            [
                "Tampa City Hall",
                160
            ],
            [
                "One Tampa City Center",
                537
            ],
            [
                "Citizens Bank Building",
                145
            ]
        ]
    },
    {
        "question": "Show all the distinct institution types.",
        "query": "MATCH (institution:`protein_institute.Institution`)\nRETURN DISTINCT institution.Type",
        "db_id": "protein_institute",
        "answers": [
            [
                "Private"
            ],
            [
                "Public"
            ],
            [
                "Tribal"
            ]
        ]
    },
    {
        "question": "Show institution names along with the number of proteins for each institution.",
        "query": "MATCH (T1:`protein_institute.Institution`)-[]-(T2:`protein_institute.protein`)\nWITH T1.Institution AS Institution, count(T1.Institution_id) AS count\nRETURN Institution,count",
        "db_id": "protein_institute",
        "answers": [
            [
                "Dakota State University",
                1
            ],
            [
                "Haskell Indian Nations University",
                1
            ],
            [
                "Lindenwood University\u2013Belleville",
                2
            ],
            [
                "Valley City State University",
                1
            ]
        ]
    },
    {
        "question": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?",
        "query": "MATCH (T1:`protein_institute.Institution`)-[]-(T2:`protein_institute.protein`)\nWHERE T1.Founded > 1880 OR T1.Type = 'Private'\nRETURN count(*)",
        "db_id": "protein_institute",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Show the protein name and the institution name.",
        "query": "MATCH (T1:`protein_institute.Institution`)-[]-(T2:`protein_institute.protein`)\nRETURN T2.protein_name,T1.Institution",
        "db_id": "protein_institute",
        "answers": [
            [
                "uncharacterized protein C20orf117-like",
                "Dakota State University"
            ],
            [
                "uncharacterized protein LOC578090",
                "Haskell Indian Nations University"
            ],
            [
                "Centromeric protein E, putative",
                "Lindenwood University\u2013Belleville"
            ],
            [
                "conserved hypothetical protein",
                "Lindenwood University\u2013Belleville"
            ],
            [
                "surface antigen repeat family protein",
                "Valley City State University"
            ]
        ]
    },
    {
        "question": "How many institutions do not have an associated protein in our record?",
        "query": "MATCH (institution:`protein_institute.Institution`)\nWHERE NOT (institution:`protein_institute.Institution`)-[]-(:`protein_institute.protein`)\nRETURN count(*)",
        "db_id": "protein_institute",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "How many cinema do we have?",
        "query": "MATCH (cinema:`cinema.cinema`)\nRETURN count(*)",
        "db_id": "cinema",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "Count the number of cinemas.",
        "query": "MATCH (cinema:`cinema.cinema`)\nRETURN count(*)",
        "db_id": "cinema",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "Show name, opening year, and capacity for each cinema.",
        "query": "MATCH (cinema:`cinema.cinema`)\nRETURN cinema.Name,cinema.Openning_year,cinema.Capacity",
        "db_id": "cinema",
        "answers": [
            [
                "Codling",
                2010,
                1100
            ],
            [
                "Carrowleagh",
                2012,
                368
            ],
            [
                "Dublin Array",
                2015,
                364
            ],
            [
                "Glenmore",
                2009,
                305
            ],
            [
                "Glenough",
                2010,
                325
            ],
            [
                "Gortahile",
                2010,
                208
            ],
            [
                "Grouse Lodge",
                2011,
                203
            ],
            [
                "Moneypoint",
                2011,
                225
            ],
            [
                "Mount Callan",
                2011,
                908
            ],
            [
                "Oriel",
                2013,
                330
            ]
        ]
    },
    {
        "question": "What are all the locations with a cinema?",
        "query": "MATCH (cinema:`cinema.cinema`)\nRETURN DISTINCT cinema.Location",
        "db_id": "cinema",
        "answers": [
            [
                "County Wicklow"
            ],
            [
                "County Cork"
            ],
            [
                "County Dublin"
            ],
            [
                "County Clare"
            ],
            [
                "County Tipperary"
            ],
            [
                "County Laois"
            ],
            [
                "County Louth"
            ]
        ]
    },
    {
        "question": "Find the distinct locations that has a cinema.",
        "query": "MATCH (cinema:`cinema.cinema`)\nRETURN DISTINCT cinema.Location",
        "db_id": "cinema",
        "answers": [
            [
                "County Wicklow"
            ],
            [
                "County Cork"
            ],
            [
                "County Dublin"
            ],
            [
                "County Clare"
            ],
            [
                "County Tipperary"
            ],
            [
                "County Laois"
            ],
            [
                "County Louth"
            ]
        ]
    },
    {
        "question": "Show all the cinema names and opening years in descending order of opening year.",
        "query": "MATCH (cinema:`cinema.cinema`)\nRETURN cinema.Name,cinema.Openning_year\nORDER BY cinema.Openning_year DESC",
        "db_id": "cinema",
        "answers": [
            [
                "Dublin Array",
                2015
            ],
            [
                "Oriel",
                2013
            ],
            [
                "Carrowleagh",
                2012
            ],
            [
                "Grouse Lodge",
                2011
            ],
            [
                "Moneypoint",
                2011
            ],
            [
                "Mount Callan",
                2011
            ],
            [
                "Codling",
                2010
            ],
            [
                "Glenough",
                2010
            ],
            [
                "Gortahile",
                2010
            ],
            [
                "Glenmore",
                2009
            ]
        ]
    },
    {
        "question": "What are the name and location of the cinema with the largest capacity?",
        "query": "MATCH (cinema:`cinema.cinema`)\nRETURN cinema.Name,cinema.Location\nORDER BY cinema.Capacity DESC\nLIMIT 1",
        "db_id": "cinema",
        "answers": [
            [
                "Codling",
                "County Wicklow"
            ]
        ]
    },
    {
        "question": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.",
        "query": "MATCH (cinema:`cinema.cinema`)\nWHERE cinema.Openning_year >= 2011\nRETURN avg(cinema.Capacity),min(cinema.Capacity),max(cinema.Capacity)",
        "db_id": "cinema",
        "answers": [
            [
                399.6666666666667,
                203,
                908
            ]
        ]
    },
    {
        "question": "Show each location and the number of cinemas there.",
        "query": "MATCH (cinema:`cinema.cinema`)\nWITH cinema.Location AS Location, count(cinema.Location) AS count\nRETURN Location,count",
        "db_id": "cinema",
        "answers": [
            [
                "County Wicklow",
                1
            ],
            [
                "County Cork",
                1
            ],
            [
                "County Dublin",
                1
            ],
            [
                "County Clare",
                3
            ],
            [
                "County Tipperary",
                2
            ],
            [
                "County Laois",
                1
            ],
            [
                "County Louth",
                1
            ]
        ]
    },
    {
        "question": "What is the location with the most cinemas opened in year 2010 or later?",
        "query": "MATCH (cinema:`cinema.cinema`)\nWHERE cinema.Openning_year >= 2010\nWITH cinema.Location AS Location, count(cinema.Location) AS count\nRETURN Location\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cinema",
        "answers": [
            [
                "County Tipperary"
            ]
        ]
    },
    {
        "question": "Show all the locations with at least two cinemas with capacity above 300.",
        "query": "MATCH (cinema:`cinema.cinema`)\nWHERE cinema.Capacity > 300\nWITH cinema.Location AS Location, count(*) AS count\nWHERE count  >= 2\nRETURN Location",
        "db_id": "cinema",
        "answers": [
            [
                "County Clare"
            ]
        ]
    },
    {
        "question": "Which locations have 2 or more cinemas with capacity over 300?",
        "query": "MATCH (cinema:`cinema.cinema`)\nWHERE cinema.Capacity > 300\nWITH cinema.Location AS Location, count(*) AS count\nWHERE count  >= 2\nRETURN Location",
        "db_id": "cinema",
        "answers": [
            [
                "County Clare"
            ]
        ]
    },
    {
        "question": "Show the title and director for all films.",
        "query": "MATCH (film:`cinema.film`)\nRETURN film.Title,film.Directed_by",
        "db_id": "cinema",
        "answers": [
            [
                "The Case of the Mystery Weekend",
                "Bill Schreiner"
            ],
            [
                "The Case of the Smart Dummy",
                "Bill Schreiner"
            ],
            [
                "The Case: Off the Record",
                "Bill Schreiner"
            ],
            [
                "The Case of the Bermuda Triangle",
                "Jesus Salvador Trevi\u00f1o"
            ],
            [
                "The Case of the Piggy Banker",
                "Bill Schreiner"
            ]
        ]
    },
    {
        "question": "What are the title and director of each film?",
        "query": "MATCH (film:`cinema.film`)\nRETURN film.Title,film.Directed_by",
        "db_id": "cinema",
        "answers": [
            [
                "The Case of the Mystery Weekend",
                "Bill Schreiner"
            ],
            [
                "The Case of the Smart Dummy",
                "Bill Schreiner"
            ],
            [
                "The Case: Off the Record",
                "Bill Schreiner"
            ],
            [
                "The Case of the Bermuda Triangle",
                "Jesus Salvador Trevi\u00f1o"
            ],
            [
                "The Case of the Piggy Banker",
                "Bill Schreiner"
            ]
        ]
    },
    {
        "question": "Show all directors.",
        "query": "MATCH (film:`cinema.film`)\nRETURN DISTINCT film.Directed_by",
        "db_id": "cinema",
        "answers": [
            [
                "Bill Schreiner"
            ],
            [
                "Jesus Salvador Trevi\u00f1o"
            ]
        ]
    },
    {
        "question": "Who are all the directors?",
        "query": "MATCH (film:`cinema.film`)\nRETURN DISTINCT film.Directed_by",
        "db_id": "cinema",
        "answers": [
            [
                "Bill Schreiner"
            ],
            [
                "Jesus Salvador Trevi\u00f1o"
            ]
        ]
    },
    {
        "question": "List all directors along with the number of films directed by each director.",
        "query": "MATCH (film:`cinema.film`)\nWITH count(film.Directed_by) AS count, film.Directed_by AS Directed_by\nRETURN Directed_by,count",
        "db_id": "cinema",
        "answers": [
            [
                "Bill Schreiner",
                4
            ],
            [
                "Jesus Salvador Trevi\u00f1o",
                1
            ]
        ]
    },
    {
        "question": "Find the locations that have more than one movie theater with capacity above 300.",
        "query": "MATCH (cinema:`cinema.cinema`)\nWHERE cinema.Capacity > 300\nWITH cinema.Location AS Location, count(*) AS count\nWHERE count  > 1\nRETURN Location",
        "db_id": "cinema",
        "answers": [
            [
                "County Clare"
            ]
        ]
    },
    {
        "question": "In which locations are there more than one movie theater with capacity above 300?",
        "query": "MATCH (cinema:`cinema.cinema`)\nWHERE cinema.Capacity > 300\nWITH cinema.Location AS Location, count(*) AS count\nWHERE count  > 1\nRETURN Location",
        "db_id": "cinema",
        "answers": [
            [
                "County Clare"
            ]
        ]
    },
    {
        "question": "Are the customers holding coupons with amount 500 bad or good?",
        "query": "MATCH (T1:`products_for_hire.Customers`)-[]-(T2:`products_for_hire.Discount_Coupons`)\nWHERE T2.coupon_amount = 500\nRETURN T1.good_or_bad_customer",
        "db_id": "products_for_hire",
        "answers": [
            [
                "bad"
            ]
        ]
    },
    {
        "question": "How many bookings did each customer make? List the customer id, first name, and the count.",
        "query": "MATCH (T1:`products_for_hire.Customers`)-[]-(T2:`products_for_hire.Bookings`)\nWITH T1.first_name AS first_name, count(T1.customer_id) AS count, T1.customer_id AS customer_id\nRETURN customer_id,first_name,count",
        "db_id": "products_for_hire",
        "answers": [
            [
                7,
                "Marilou",
                3
            ],
            [
                15,
                "Jamir",
                1
            ],
            [
                3,
                "Rosalee",
                4
            ],
            [
                10,
                "Layne",
                2
            ],
            [
                11,
                "Maximilian",
                1
            ],
            [
                9,
                "German",
                2
            ],
            [
                8,
                "Elinore",
                2
            ]
        ]
    },
    {
        "question": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?",
        "query": "MATCH (T1:`products_for_hire.Products_for_Hire`)-[T2:`products_for_hire.Products_Booked`]-(T3:`products_for_hire.Bookings`)\nWHERE T1.product_name = 'Book collection A'\nRETURN T3.booking_start_date,T3.booking_end_date",
        "db_id": "products_for_hire",
        "answers": [
            [
                "2016-11-27 17:19:40",
                "2018-03-04 21:42:45"
            ],
            [
                "2017-04-28 08:35:56",
                "2018-01-18 23:54:44"
            ]
        ]
    },
    {
        "question": "How many different product types are there?",
        "query": "MATCH (products_for_hire:`products_for_hire.Products_for_Hire`)\nRETURN count(DISTINCT products_for_hire.product_type_code)",
        "db_id": "products_for_hire",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "What are the first name, last name, and gender of all the good customers? Order by their last name.",
        "query": "MATCH (customers:`products_for_hire.Customers`)\nWHERE customers.good_or_bad_customer = 'good'\nRETURN customers.first_name,customers.last_name,customers.gender_mf\nORDER BY customers.last_name",
        "db_id": "products_for_hire",
        "answers": [
            [
                "Tyler",
                "Breitenberg",
                "1"
            ],
            [
                "Elinore",
                "Crona",
                "0"
            ],
            [
                "Jailyn",
                "Gerlach",
                "0"
            ],
            [
                "Ericka",
                "Greenholt",
                "0"
            ],
            [
                "Geovany",
                "Homenick",
                "0"
            ],
            [
                "Rosalee",
                "Kessler",
                "0"
            ],
            [
                "Laury",
                "Lemke",
                "1"
            ],
            [
                "German",
                "Little",
                "1"
            ],
            [
                "Maximilian",
                "Murphy",
                "0"
            ],
            [
                "Vergie",
                "Nicolas",
                "0"
            ],
            [
                "Marilou",
                "Strosin",
                "1"
            ]
        ]
    },
    {
        "question": "What are all the distinct payment types?",
        "query": "MATCH (payments:`products_for_hire.Payments`)\nRETURN DISTINCT payments.payment_type_code",
        "db_id": "products_for_hire",
        "answers": [
            [
                "Check"
            ],
            [
                "Cash"
            ],
            [
                "Credit Card"
            ],
            [
                "Direct Debit"
            ]
        ]
    },
    {
        "question": "What are the daily hire costs for the products with substring 'Book' in its name?",
        "query": "MATCH (products_for_hire:`products_for_hire.Products_for_Hire`)\nWHERE products_for_hire.product_name =~'.*[B|b]ook.*'\nRETURN products_for_hire.daily_hire_cost",
        "db_id": "products_for_hire",
        "answers": [
            [
                26.15
            ],
            [
                15.62
            ],
            [
                39.73
            ]
        ]
    },
    {
        "question": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'",
        "query": "MATCH (payments:`products_for_hire.Payments`)\nWHERE payments.amount_paid > 300 OR payments.payment_type_code = 'Check'\nRETURN payments.payment_date",
        "db_id": "products_for_hire",
        "answers": [
            [
                "2018-03-09 16:28:00"
            ],
            [
                "2018-03-03 13:39:44"
            ],
            [
                "2018-03-22 02:28:11"
            ],
            [
                "2018-03-23 20:36:04"
            ],
            [
                "2018-03-19 12:39:31"
            ],
            [
                "2018-03-02 06:25:45"
            ],
            [
                "2018-03-12 23:00:55"
            ],
            [
                "2018-03-12 23:23:56"
            ],
            [
                "2018-03-23 13:24:33"
            ],
            [
                "2018-03-03 03:07:00"
            ],
            [
                "2018-02-27 10:50:39"
            ],
            [
                "2018-03-03 14:22:51"
            ],
            [
                "2018-03-17 15:51:52"
            ],
            [
                "2018-03-17 03:07:45"
            ]
        ]
    },
    {
        "question": "What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?",
        "query": "MATCH (products_for_hire:`products_for_hire.Products_for_Hire`)\nWHERE products_for_hire.product_type_code = 'Cutlery' AND products_for_hire.daily_hire_cost < 20\nRETURN products_for_hire.product_name,products_for_hire.product_description",
        "db_id": "products_for_hire",
        "answers": [
            [
                "Book collection B",
                "War and Peace"
            ]
        ]
    },
    {
        "question": "How many phones are there?",
        "query": "MATCH (phone:`phone_market.phone`)\nRETURN count(*)",
        "db_id": "phone_market",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "List the names of phones in ascending order of price.",
        "query": "MATCH (phone:`phone_market.phone`)\nRETURN phone.Name\nORDER BY phone.Price ASC",
        "db_id": "phone_market",
        "answers": [
            [
                "IPhone 5s"
            ],
            [
                "IPhone 6"
            ],
            [
                "IPhone 6s"
            ],
            [
                "IPhone 7"
            ],
            [
                "IPhone X"
            ]
        ]
    },
    {
        "question": "What are the memories and carriers of phones?",
        "query": "MATCH (phone:`phone_market.phone`)\nRETURN phone.Memory_in_G,phone.Carrier",
        "db_id": "phone_market",
        "answers": [
            [
                32,
                "Sprint"
            ],
            [
                128,
                "Sprint"
            ],
            [
                128,
                "TMobile"
            ],
            [
                16,
                "TMobile"
            ],
            [
                64,
                "TMobile"
            ]
        ]
    },
    {
        "question": "List the distinct carriers of phones with memories bigger than 32.",
        "query": "MATCH (phone:`phone_market.phone`)\nWHERE phone.Memory_in_G > 32\nRETURN DISTINCT phone.Carrier",
        "db_id": "phone_market",
        "answers": [
            [
                "Sprint"
            ],
            [
                "TMobile"
            ]
        ]
    },
    {
        "question": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\".",
        "query": "MATCH (phone:`phone_market.phone`)\nWHERE phone.Carrier = 'Sprint' OR phone.Carrier = 'TMobile'\nRETURN phone.Name",
        "db_id": "phone_market",
        "answers": [
            [
                "IPhone 5s"
            ],
            [
                "IPhone 6"
            ],
            [
                "IPhone 6s"
            ],
            [
                "IPhone 7"
            ],
            [
                "IPhone X"
            ]
        ]
    },
    {
        "question": "What is the carrier of the most expensive phone?",
        "query": "MATCH (phone:`phone_market.phone`)\nRETURN phone.Carrier\nORDER BY phone.Price DESC\nLIMIT 1",
        "db_id": "phone_market",
        "answers": [
            [
                "TMobile"
            ]
        ]
    },
    {
        "question": "Show different carriers of phones together with the number of phones with each carrier.",
        "query": "MATCH (phone:`phone_market.phone`)\nWITH count(phone.Carrier) AS count, phone.Carrier AS Carrier\nRETURN Carrier,count",
        "db_id": "phone_market",
        "answers": [
            [
                "Sprint",
                2
            ],
            [
                "TMobile",
                3
            ]
        ]
    },
    {
        "question": "Show the most frequently used carrier of the phones.",
        "query": "MATCH (phone:`phone_market.phone`)\nWITH count(phone.Carrier) AS count, phone.Carrier AS Carrier\nRETURN Carrier\nORDER BY count DESC\nLIMIT 1",
        "db_id": "phone_market",
        "answers": [
            [
                "TMobile"
            ]
        ]
    },
    {
        "question": "How many gas companies are there?",
        "query": "MATCH (company:`gas_company.company`)\nRETURN count(*)",
        "db_id": "gas_company",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "What is the total number of companies?",
        "query": "MATCH (company:`gas_company.company`)\nRETURN count(*)",
        "db_id": "gas_company",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "List the company name and rank for all companies in the decreasing order of their sales.",
        "query": "MATCH (company:`gas_company.company`)\nRETURN company.Company,company.Rank\nORDER BY company.Sales_billion DESC",
        "db_id": "gas_company",
        "answers": [
            [
                "Royal Dutch Shell",
                4
            ],
            [
                "ExxonMobil",
                1
            ],
            [
                "BP",
                11
            ],
            [
                "PetroChina",
                7
            ],
            [
                "General Electric",
                3
            ],
            [
                "Petrobras",
                10
            ],
            [
                "Berkshire Hathaway",
                8
            ],
            [
                "HSBC",
                6
            ],
            [
                "Wells Fargo",
                9
            ],
            [
                "Industrial and Commercial Bank of China",
                5
            ]
        ]
    },
    {
        "question": "What is the name and rank of every company ordered by descending number of sales?",
        "query": "MATCH (company:`gas_company.company`)\nRETURN company.Company,company.Rank\nORDER BY company.Sales_billion DESC",
        "db_id": "gas_company",
        "answers": [
            [
                "Royal Dutch Shell",
                4
            ],
            [
                "ExxonMobil",
                1
            ],
            [
                "BP",
                11
            ],
            [
                "PetroChina",
                7
            ],
            [
                "General Electric",
                3
            ],
            [
                "Petrobras",
                10
            ],
            [
                "Berkshire Hathaway",
                8
            ],
            [
                "HSBC",
                6
            ],
            [
                "Wells Fargo",
                9
            ],
            [
                "Industrial and Commercial Bank of China",
                5
            ]
        ]
    },
    {
        "question": "Show the company name and the main industry for all companies whose headquarters are not from USA.",
        "query": "MATCH (company:`gas_company.company`)\nWHERE company.Headquarters <> 'USA'\nRETURN company.Company,company.Main_Industry",
        "db_id": "gas_company",
        "answers": [
            [
                "Royal Dutch Shell",
                "Oil and gas"
            ],
            [
                "Industrial and Commercial Bank of China",
                "Banking"
            ],
            [
                "HSBC",
                "Banking"
            ],
            [
                "PetroChina",
                "Oil and gas"
            ],
            [
                "Petrobras",
                "Oil and gas"
            ],
            [
                "BP",
                "Oil and gas"
            ]
        ]
    },
    {
        "question": "What are the companies and main industries of all companies that are not headquartered in the United States?",
        "query": "MATCH (company:`gas_company.company`)\nWHERE company.Headquarters <> 'USA'\nRETURN company.Company,company.Main_Industry",
        "db_id": "gas_company",
        "answers": [
            [
                "Royal Dutch Shell",
                "Oil and gas"
            ],
            [
                "Industrial and Commercial Bank of China",
                "Banking"
            ],
            [
                "HSBC",
                "Banking"
            ],
            [
                "PetroChina",
                "Oil and gas"
            ],
            [
                "Petrobras",
                "Oil and gas"
            ],
            [
                "BP",
                "Oil and gas"
            ]
        ]
    },
    {
        "question": "Show all company names and headquarters in the descending order of market value.",
        "query": "MATCH (company:`gas_company.company`)\nRETURN company.Company,company.Headquarters\nORDER BY company.Market_Value DESC",
        "db_id": "gas_company",
        "answers": [
            [
                "ExxonMobil",
                "USA"
            ],
            [
                "PetroChina",
                "China"
            ],
            [
                "Industrial and Commercial Bank of China",
                "China"
            ],
            [
                "Royal Dutch Shell",
                "Netherlands"
            ],
            [
                "General Electric",
                "USA"
            ],
            [
                "Berkshire Hathaway",
                "USA"
            ],
            [
                "Petrobras",
                "Brazil"
            ],
            [
                "Wells Fargo",
                "USA"
            ],
            [
                "HSBC",
                "UK"
            ],
            [
                "BP",
                "UK"
            ]
        ]
    },
    {
        "question": "What are the names and headquarters of all companies ordered by descending market value?",
        "query": "MATCH (company:`gas_company.company`)\nRETURN company.Company,company.Headquarters\nORDER BY company.Market_Value DESC",
        "db_id": "gas_company",
        "answers": [
            [
                "ExxonMobil",
                "USA"
            ],
            [
                "PetroChina",
                "China"
            ],
            [
                "Industrial and Commercial Bank of China",
                "China"
            ],
            [
                "Royal Dutch Shell",
                "Netherlands"
            ],
            [
                "General Electric",
                "USA"
            ],
            [
                "Berkshire Hathaway",
                "USA"
            ],
            [
                "Petrobras",
                "Brazil"
            ],
            [
                "Wells Fargo",
                "USA"
            ],
            [
                "HSBC",
                "UK"
            ],
            [
                "BP",
                "UK"
            ]
        ]
    },
    {
        "question": "Show minimum, maximum, and average market value for all companies.",
        "query": "MATCH (company:`gas_company.company`)\nRETURN min(company.Market_Value),max(company.Market_Value),avg(company.Market_Value)",
        "db_id": "gas_company",
        "answers": [
            [
                147.4,
                407.4,
                225.34
            ]
        ]
    },
    {
        "question": "What is the minimum, maximum, and average market value for every company?",
        "query": "MATCH (company:`gas_company.company`)\nRETURN min(company.Market_Value),max(company.Market_Value),avg(company.Market_Value)",
        "db_id": "gas_company",
        "answers": [
            [
                147.4,
                407.4,
                225.34
            ]
        ]
    },
    {
        "question": "Show all main industry for all companies.",
        "query": "MATCH (company:`gas_company.company`)\nRETURN DISTINCT company.Main_Industry",
        "db_id": "gas_company",
        "answers": [
            [
                "Oil and gas"
            ],
            [
                "Conglomerate"
            ],
            [
                "Banking"
            ]
        ]
    },
    {
        "question": "What are the different main industries for all companies?",
        "query": "MATCH (company:`gas_company.company`)\nRETURN DISTINCT company.Main_Industry",
        "db_id": "gas_company",
        "answers": [
            [
                "Oil and gas"
            ],
            [
                "Conglomerate"
            ],
            [
                "Banking"
            ]
        ]
    },
    {
        "question": "List all headquarters and the number of companies in each headquarter.",
        "query": "MATCH (company:`gas_company.company`)\nWITH company.Headquarters AS Headquarters, count(company.Headquarters) AS count\nRETURN Headquarters,count",
        "db_id": "gas_company",
        "answers": [
            [
                "USA",
                4
            ],
            [
                "Netherlands",
                1
            ],
            [
                "China",
                2
            ],
            [
                "UK",
                2
            ],
            [
                "Brazil",
                1
            ]
        ]
    },
    {
        "question": "For each headquarter, what are the headquarter and how many companies are centered there?",
        "query": "MATCH (company:`gas_company.company`)\nWITH company.Headquarters AS Headquarters, count(company.Headquarters) AS count\nRETURN Headquarters,count",
        "db_id": "gas_company",
        "answers": [
            [
                "USA",
                4
            ],
            [
                "Netherlands",
                1
            ],
            [
                "China",
                2
            ],
            [
                "UK",
                2
            ],
            [
                "Brazil",
                1
            ]
        ]
    },
    {
        "question": "Show gas station id, location, and manager_name for all gas stations ordered by open year.",
        "query": "MATCH (gas_station:`gas_company.gas_station`)\nRETURN gas_station.Station_ID,gas_station.Location,gas_station.Manager_Name\nORDER BY gas_station.Open_Year",
        "db_id": "gas_company",
        "answers": [
            [
                1,
                "Herne Hill",
                "BrianWingrave"
            ],
            [
                2,
                "Channel Hill",
                "SimonMarloe"
            ],
            [
                3,
                "Reading North",
                "Simon Cope Derek Marloe"
            ],
            [
                4,
                "Herne St",
                "Colin Denman"
            ],
            [
                5,
                "Reading",
                "Colin Denman"
            ],
            [
                6,
                "Herne Ave",
                "Tom Whit"
            ],
            [
                7,
                "Hennry Hill",
                "Bryan Taylor"
            ],
            [
                8,
                "Jane Ave",
                "BryanDenman"
            ],
            [
                9,
                "Maindy Hill",
                "Tony Bristow"
            ],
            [
                10,
                "Maindy Ave",
                "Luke Rowe"
            ],
            [
                11,
                "Newport Rd",
                "Jon Rowe"
            ]
        ]
    },
    {
        "question": "What are the gas station ids, locations, and manager names for the gas stations ordered by opening year?",
        "query": "MATCH (gas_station:`gas_company.gas_station`)\nRETURN gas_station.Station_ID,gas_station.Location,gas_station.Manager_Name\nORDER BY gas_station.Open_Year",
        "db_id": "gas_company",
        "answers": [
            [
                1,
                "Herne Hill",
                "BrianWingrave"
            ],
            [
                2,
                "Channel Hill",
                "SimonMarloe"
            ],
            [
                3,
                "Reading North",
                "Simon Cope Derek Marloe"
            ],
            [
                4,
                "Herne St",
                "Colin Denman"
            ],
            [
                5,
                "Reading",
                "Colin Denman"
            ],
            [
                6,
                "Herne Ave",
                "Tom Whit"
            ],
            [
                7,
                "Hennry Hill",
                "Bryan Taylor"
            ],
            [
                8,
                "Jane Ave",
                "BryanDenman"
            ],
            [
                9,
                "Maindy Hill",
                "Tony Bristow"
            ],
            [
                10,
                "Maindy Ave",
                "Luke Rowe"
            ],
            [
                11,
                "Newport Rd",
                "Jon Rowe"
            ]
        ]
    },
    {
        "question": "How many gas station are opened between 2000 and 2005?",
        "query": "MATCH (gas_station:`gas_company.gas_station`)\nWHERE 2000<=gas_station.Open_Year<=2005\nRETURN count(*)",
        "db_id": "gas_company",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "What is the total number of gas stations that opened between 2000 and 2005?",
        "query": "MATCH (gas_station:`gas_company.gas_station`)\nWHERE 2000<=gas_station.Open_Year<=2005\nRETURN count(*)",
        "db_id": "gas_company",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Show all locations and the number of gas stations in each location ordered by the count.",
        "query": "MATCH (gas_station:`gas_company.gas_station`)\nWITH gas_station.Location AS Location, count(gas_station.Location) AS count\nRETURN Location,count\nORDER BY count",
        "db_id": "gas_company",
        "answers": [
            [
                "Herne Hill",
                1
            ],
            [
                "Channel Hill",
                1
            ],
            [
                "Reading North",
                1
            ],
            [
                "Herne St",
                1
            ],
            [
                "Reading",
                1
            ],
            [
                "Herne Ave",
                1
            ],
            [
                "Hennry Hill",
                1
            ],
            [
                "Jane Ave",
                1
            ],
            [
                "Maindy Hill",
                1
            ],
            [
                "Maindy Ave",
                1
            ],
            [
                "Newport Rd",
                1
            ]
        ]
    },
    {
        "question": "For each location, how many gas stations are there in order?",
        "query": "MATCH (gas_station:`gas_company.gas_station`)\nWITH gas_station.Location AS Location, count(gas_station.Location) AS count\nRETURN Location,count\nORDER BY count",
        "db_id": "gas_company",
        "answers": [
            [
                "Herne Hill",
                1
            ],
            [
                "Channel Hill",
                1
            ],
            [
                "Reading North",
                1
            ],
            [
                "Herne St",
                1
            ],
            [
                "Reading",
                1
            ],
            [
                "Herne Ave",
                1
            ],
            [
                "Hennry Hill",
                1
            ],
            [
                "Jane Ave",
                1
            ],
            [
                "Maindy Hill",
                1
            ],
            [
                "Maindy Ave",
                1
            ],
            [
                "Newport Rd",
                1
            ]
        ]
    },
    {
        "question": "Show company name and main industry without a gas station.",
        "query": "MATCH (company:`gas_company.company`)\nWHERE NOT (company:`gas_company.company`)-[:`gas_company.station_company`]-()\nRETURN company.Company,company.Main_Industry",
        "db_id": "gas_company",
        "answers": [
            [
                "General Electric",
                "Conglomerate"
            ],
            [
                "Industrial and Commercial Bank of China",
                "Banking"
            ],
            [
                "HSBC",
                "Banking"
            ],
            [
                "Berkshire Hathaway",
                "Conglomerate"
            ],
            [
                "Wells Fargo",
                "Banking"
            ]
        ]
    },
    {
        "question": "What are the main industries of the companies without gas stations and what are the companies?",
        "query": "MATCH (company:`gas_company.company`)\nWHERE NOT (company:`gas_company.company`)-[:`gas_company.station_company`]-()\nRETURN company.Company,company.Main_Industry",
        "db_id": "gas_company",
        "answers": [
            [
                "General Electric",
                "Conglomerate"
            ],
            [
                "Industrial and Commercial Bank of China",
                "Banking"
            ],
            [
                "HSBC",
                "Banking"
            ],
            [
                "Berkshire Hathaway",
                "Conglomerate"
            ],
            [
                "Wells Fargo",
                "Banking"
            ]
        ]
    },
    {
        "question": "Show the manager name for gas stations belonging to the ExxonMobil company.",
        "query": "MATCH ()-[T1:`gas_company.station_company`]-(T2:`gas_company.company`)-[]-(T3:`gas_company.gas_station`)\nWHERE T2.Company = 'ExxonMobil'\nRETURN T3.Manager_Name",
        "db_id": "gas_company",
        "answers": [
            [
                "Jon Rowe"
            ],
            [
                "Colin Denman"
            ]
        ]
    },
    {
        "question": "What are the names of the managers for gas stations that are operated by the ExxonMobil company?",
        "query": "MATCH ()-[T1:`gas_company.station_company`]-(T2:`gas_company.company`)-[]-(T3:`gas_company.gas_station`)\nWHERE T2.Company = 'ExxonMobil'\nRETURN T3.Manager_Name",
        "db_id": "gas_company",
        "answers": [
            [
                "Jon Rowe"
            ],
            [
                "Colin Denman"
            ]
        ]
    },
    {
        "question": "Show all locations where a gas station for company with market value greater than 100 is located.",
        "query": "MATCH ()-[T1:`gas_company.station_company`]-(T2:`gas_company.company`)-[]-(T3:`gas_company.gas_station`)\nWHERE T2.Market_Value > 100\nRETURN T3.Location",
        "db_id": "gas_company",
        "answers": [
            [
                "Newport Rd"
            ],
            [
                "Herne St"
            ]
        ]
    },
    {
        "question": "What are the locations that have gas stations owned by a company with a market value greater than 100?",
        "query": "MATCH ()-[T1:`gas_company.station_company`]-(T2:`gas_company.company`)-[]-(T3:`gas_company.gas_station`)\nWHERE T2.Market_Value > 100\nRETURN T3.Location",
        "db_id": "gas_company",
        "answers": [
            [
                "Newport Rd"
            ],
            [
                "Herne St"
            ]
        ]
    },
    {
        "question": "Show the manager name with most number of gas stations opened after 2000.",
        "query": "MATCH (gas_station:`gas_company.gas_station`)\nWHERE gas_station.Open_Year > 2000\nWITH count(gas_station.Manager_Name) AS count, gas_station.Manager_Name AS Manager_Name\nRETURN Manager_Name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "gas_company",
        "answers": [
            [
                "Colin Denman"
            ]
        ]
    },
    {
        "question": "What is the name of the manager with the most gas stations that opened after 2000?",
        "query": "MATCH (gas_station:`gas_company.gas_station`)\nWHERE gas_station.Open_Year > 2000\nWITH count(gas_station.Manager_Name) AS count, gas_station.Manager_Name AS Manager_Name\nRETURN Manager_Name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "gas_company",
        "answers": [
            [
                "Colin Denman"
            ]
        ]
    },
    {
        "question": "order all gas station locations by the opening year.",
        "query": "MATCH (gas_station:`gas_company.gas_station`)\nRETURN gas_station.Location\nORDER BY gas_station.Open_Year",
        "db_id": "gas_company",
        "answers": [
            [
                "Herne Hill"
            ],
            [
                "Channel Hill"
            ],
            [
                "Reading North"
            ],
            [
                "Herne St"
            ],
            [
                "Reading"
            ],
            [
                "Herne Ave"
            ],
            [
                "Hennry Hill"
            ],
            [
                "Jane Ave"
            ],
            [
                "Maindy Hill"
            ],
            [
                "Maindy Ave"
            ],
            [
                "Newport Rd"
            ]
        ]
    },
    {
        "question": "What are the locations of all the gas stations ordered by opening year?",
        "query": "MATCH (gas_station:`gas_company.gas_station`)\nRETURN gas_station.Location\nORDER BY gas_station.Open_Year",
        "db_id": "gas_company",
        "answers": [
            [
                "Herne Hill"
            ],
            [
                "Channel Hill"
            ],
            [
                "Reading North"
            ],
            [
                "Herne St"
            ],
            [
                "Reading"
            ],
            [
                "Herne Ave"
            ],
            [
                "Hennry Hill"
            ],
            [
                "Jane Ave"
            ],
            [
                "Maindy Hill"
            ],
            [
                "Maindy Ave"
            ],
            [
                "Newport Rd"
            ]
        ]
    },
    {
        "question": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.",
        "query": "MATCH (company:`gas_company.company`)\nWHERE company.Main_Industry = 'Banking'\nRETURN company.Rank,company.Company,company.Market_Value\nORDER BY company.Sales_billion,company.Profits_billion",
        "db_id": "gas_company",
        "answers": [
            [
                5,
                "Industrial and Commercial Bank of China",
                237.4
            ],
            [
                9,
                "Wells Fargo",
                178.7
            ],
            [
                6,
                "HSBC",
                164.3
            ]
        ]
    },
    {
        "question": "What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?",
        "query": "MATCH (company:`gas_company.company`)\nWHERE company.Main_Industry = 'Banking'\nRETURN company.Rank,company.Company,company.Market_Value\nORDER BY company.Sales_billion,company.Profits_billion",
        "db_id": "gas_company",
        "answers": [
            [
                5,
                "Industrial and Commercial Bank of China",
                237.4
            ],
            [
                9,
                "Wells Fargo",
                178.7
            ],
            [
                6,
                "HSBC",
                164.3
            ]
        ]
    },
    {
        "question": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.",
        "query": "MATCH ()-[T1:`gas_company.station_company`]-(T2:`gas_company.company`)-[]-(T3:`gas_company.gas_station`)\nRETURN T3.Location,T3.Representative_Name\nORDER BY T2.Assets_billion DESC\nLIMIT 3",
        "db_id": "gas_company",
        "answers": [
            [
                "Newport Rd",
                "Tim Read"
            ],
            [
                "Herne St",
                "Ray Hughes"
            ]
        ]
    },
    {
        "question": "What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?",
        "query": "MATCH ()-[T1:`gas_company.station_company`]-(T2:`gas_company.company`)-[]-(T3:`gas_company.gas_station`)\nRETURN T3.Location,T3.Representative_Name\nORDER BY T2.Assets_billion DESC\nLIMIT 3",
        "db_id": "gas_company",
        "answers": [
            [
                "Newport Rd",
                "Tim Read"
            ],
            [
                "Herne St",
                "Ray Hughes"
            ]
        ]
    },
    {
        "question": "How many regions do we have?",
        "query": "MATCH (region:`party_people.region`)\nRETURN count(*)",
        "db_id": "party_people",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Count the number of regions.",
        "query": "MATCH (region:`party_people.region`)\nRETURN count(*)",
        "db_id": "party_people",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "How many parties do we have?",
        "query": "MATCH (party:`party_people.party`)\nRETURN count(DISTINCT party.Party_name)",
        "db_id": "party_people",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Count the number of different parties.",
        "query": "MATCH (party:`party_people.party`)\nRETURN count(DISTINCT party.Party_name)",
        "db_id": "party_people",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Show the ministers and the time they took and left office, listed by the time they left office.",
        "query": "MATCH (party:`party_people.party`)\nRETURN party.Minister,party.Took_office,party.Left_office\nORDER BY party.Left_office",
        "db_id": "party_people",
        "answers": [
            [
                "Dr. Kwame Nkrumah (MP)",
                "1957",
                "1958"
            ],
            [
                "Kojo Botsio (MP)",
                "1958",
                "1959"
            ],
            [
                "Ebenezer Ako-Adjei (MP)",
                "1959",
                "1960"
            ],
            [
                "Imoru Egala (MP)",
                "1960",
                "1961"
            ],
            [
                "Ebenezer Ako-Adjei (MP)",
                "1961",
                "1962"
            ]
        ]
    },
    {
        "question": "Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office?",
        "query": "MATCH (party:`party_people.party`)\nRETURN party.Minister,party.Took_office,party.Left_office\nORDER BY party.Left_office",
        "db_id": "party_people",
        "answers": [
            [
                "Dr. Kwame Nkrumah (MP)",
                "1957",
                "1958"
            ],
            [
                "Kojo Botsio (MP)",
                "1958",
                "1959"
            ],
            [
                "Ebenezer Ako-Adjei (MP)",
                "1959",
                "1960"
            ],
            [
                "Imoru Egala (MP)",
                "1960",
                "1961"
            ],
            [
                "Ebenezer Ako-Adjei (MP)",
                "1961",
                "1962"
            ]
        ]
    },
    {
        "question": "Show all ministers who do not belong to Progress Party.",
        "query": "MATCH (party:`party_people.party`)\nWHERE party.Party_name <> 'Progress Party'\nRETURN party.Minister",
        "db_id": "party_people",
        "answers": [
            [
                "Dr. Kwame Nkrumah (MP)"
            ],
            [
                "Ebenezer Ako-Adjei (MP)"
            ],
            [
                "Imoru Egala (MP)"
            ],
            [
                "Ebenezer Ako-Adjei (MP)"
            ]
        ]
    },
    {
        "question": "Which ministers are not a part of the Progress Party?",
        "query": "MATCH (party:`party_people.party`)\nWHERE party.Party_name <> 'Progress Party'\nRETURN party.Minister",
        "db_id": "party_people",
        "answers": [
            [
                "Dr. Kwame Nkrumah (MP)"
            ],
            [
                "Ebenezer Ako-Adjei (MP)"
            ],
            [
                "Imoru Egala (MP)"
            ],
            [
                "Ebenezer Ako-Adjei (MP)"
            ]
        ]
    },
    {
        "question": "Show all ministers and parties they belong to in descending order of the time they took office.",
        "query": "MATCH (party:`party_people.party`)\nRETURN party.Minister,party.Party_name\nORDER BY party.Took_office DESC",
        "db_id": "party_people",
        "answers": [
            [
                "Ebenezer Ako-Adjei (MP)",
                "Sinefine Party"
            ],
            [
                "Imoru Egala (MP)",
                "Convention Union Party"
            ],
            [
                "Ebenezer Ako-Adjei (MP)",
                "3"
            ],
            [
                "Kojo Botsio (MP)",
                "Progress Party"
            ],
            [
                "Dr. Kwame Nkrumah (MP)",
                "Convention Peoples Party"
            ]
        ]
    },
    {
        "question": "Who are the ministers and what parties do they belong to, listed descending by the times they took office?",
        "query": "MATCH (party:`party_people.party`)\nRETURN party.Minister,party.Party_name\nORDER BY party.Took_office DESC",
        "db_id": "party_people",
        "answers": [
            [
                "Ebenezer Ako-Adjei (MP)",
                "Sinefine Party"
            ],
            [
                "Imoru Egala (MP)",
                "Convention Union Party"
            ],
            [
                "Ebenezer Ako-Adjei (MP)",
                "3"
            ],
            [
                "Kojo Botsio (MP)",
                "Progress Party"
            ],
            [
                "Dr. Kwame Nkrumah (MP)",
                "Convention Peoples Party"
            ]
        ]
    },
    {
        "question": "Return the minister who left office at the latest time.",
        "query": "MATCH (party:`party_people.party`)\nRETURN party.Minister\nORDER BY party.Left_office DESC\nLIMIT 1",
        "db_id": "party_people",
        "answers": [
            [
                "Ebenezer Ako-Adjei (MP)"
            ]
        ]
    },
    {
        "question": "Which minister left office the latest?",
        "query": "MATCH (party:`party_people.party`)\nRETURN party.Minister\nORDER BY party.Left_office DESC\nLIMIT 1",
        "db_id": "party_people",
        "answers": [
            [
                "Ebenezer Ako-Adjei (MP)"
            ]
        ]
    },
    {
        "question": "Show all party names and their region names.",
        "query": "MATCH (T1:`party_people.party`)-[]-(T2:`party_people.region`)\nRETURN T1.Party_name,T2.Region_name",
        "db_id": "party_people",
        "answers": [
            [
                "Convention Peoples Party",
                "United Kingdom"
            ],
            [
                "Progress Party",
                "United Kingdom"
            ],
            [
                "3",
                "Japan"
            ],
            [
                "Convention Union Party",
                "United States"
            ],
            [
                "Sinefine Party",
                "United States"
            ]
        ]
    },
    {
        "question": "What are the names of parties and their respective regions?",
        "query": "MATCH (T1:`party_people.party`)-[]-(T2:`party_people.region`)\nRETURN T1.Party_name,T2.Region_name",
        "db_id": "party_people",
        "answers": [
            [
                "Convention Peoples Party",
                "United Kingdom"
            ],
            [
                "Progress Party",
                "United Kingdom"
            ],
            [
                "3",
                "Japan"
            ],
            [
                "Convention Union Party",
                "United States"
            ],
            [
                "Sinefine Party",
                "United States"
            ]
        ]
    },
    {
        "question": "How many party events do we have?",
        "query": "MATCH (party_events:`party_people.party_events`)\nRETURN count(*)",
        "db_id": "party_people",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "Count the number of party events.",
        "query": "MATCH (party_events:`party_people.party_events`)\nRETURN count(*)",
        "db_id": "party_people",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "find the event names that have more than 2 records.",
        "query": "MATCH (party_events:`party_people.party_events`)\nWITH count(*) AS count, party_events.Event_Name AS Event_Name\nWHERE count  > 2\nRETURN Event_Name",
        "db_id": "party_people",
        "answers": [
            [
                "Annaual Meeting"
            ]
        ]
    },
    {
        "question": "Which event names were used more than twice for party events?",
        "query": "MATCH (party_events:`party_people.party_events`)\nWITH count(*) AS count, party_events.Event_Name AS Event_Name\nWHERE count  > 2\nRETURN Event_Name",
        "db_id": "party_people",
        "answers": [
            [
                "Annaual Meeting"
            ]
        ]
    },
    {
        "question": "How many pilots are there?",
        "query": "MATCH (pilot:`pilot_record.pilot`)\nRETURN count(*)",
        "db_id": "pilot_record",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "List the names of pilots in ascending order of rank.",
        "query": "MATCH (pilot:`pilot_record.pilot`)\nRETURN pilot.Pilot_name\nORDER BY pilot.Rank ASC",
        "db_id": "pilot_record",
        "answers": [
            [
                "Jermaine O'Neal"
            ],
            [
                "Patrick O'Bryant"
            ],
            [
                "Charles Oakley"
            ],
            [
                "Hakeem Olajuwon"
            ],
            [
                "Dan O'Sullivan"
            ]
        ]
    },
    {
        "question": "What are the positions and teams of pilots?",
        "query": "MATCH (pilot:`pilot_record.pilot`)\nRETURN pilot.Position,pilot.Team",
        "db_id": "pilot_record",
        "answers": [
            [
                "Center Team",
                "Bradley"
            ],
            [
                "Forward-Center Team",
                "Eau Claire High School"
            ],
            [
                "Center Team",
                "Fordham"
            ],
            [
                "Forward Team",
                "Virginia Union"
            ],
            [
                "Center Team",
                "Houston"
            ]
        ]
    },
    {
        "question": "List the distinct positions of pilots older than 30.",
        "query": "MATCH (pilot:`pilot_record.pilot`)\nWHERE pilot.Age > 30\nRETURN DISTINCT pilot.Position",
        "db_id": "pilot_record",
        "answers": [
            [
                "Center Team"
            ],
            [
                "Forward-Center Team"
            ]
        ]
    },
    {
        "question": "Show the names of pilots from team \"Bradley\" or \"Fordham\".",
        "query": "MATCH (pilot:`pilot_record.pilot`)\nWHERE pilot.Team = 'Bradley' OR pilot.Team = 'Fordham'\nRETURN pilot.Pilot_name",
        "db_id": "pilot_record",
        "answers": [
            [
                "Patrick O'Bryant"
            ],
            [
                "Dan O'Sullivan"
            ]
        ]
    },
    {
        "question": "What is the joined year of the pilot of the highest rank?",
        "query": "MATCH (pilot:`pilot_record.pilot`)\nRETURN pilot.Join_Year\nORDER BY pilot.Rank ASC\nLIMIT 1",
        "db_id": "pilot_record",
        "answers": [
            [
                2008
            ]
        ]
    },
    {
        "question": "What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality.",
        "query": "MATCH (pilot:`pilot_record.pilot`)\nWITH pilot.Nationality AS Nationality, count(pilot.Nationality) AS count\nRETURN Nationality,count",
        "db_id": "pilot_record",
        "answers": [
            [
                "United States",
                3
            ],
            [
                "United Kindom",
                1
            ],
            [
                "Nigeria",
                1
            ]
        ]
    },
    {
        "question": "Show the most common nationality of pilots.",
        "query": "MATCH (pilot:`pilot_record.pilot`)\nWITH pilot.Nationality AS Nationality, count(pilot.Nationality) AS count\nRETURN Nationality\nORDER BY count DESC\nLIMIT 1",
        "db_id": "pilot_record",
        "answers": [
            [
                "United States"
            ]
        ]
    },
    {
        "question": "Show the names of pilots and models of aircrafts they have flied with.",
        "query": "MATCH ()-[T1:`pilot_record.pilot_record`]-(T2:`pilot_record.aircraft`)-[]-(T3:`pilot_record.pilot`)\nRETURN T3.Pilot_name,T2.Model",
        "db_id": "pilot_record",
        "answers": [
            [
                "Jermaine O'Neal",
                "Phantom (High Floor)"
            ],
            [
                "Patrick O'Bryant",
                "Phantom (High Floor)"
            ]
        ]
    },
    {
        "question": "Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot.",
        "query": "MATCH ()-[T1:`pilot_record.pilot_record`]-(T2:`pilot_record.aircraft`)-[]-(T3:`pilot_record.pilot`)\nRETURN T3.Pilot_name,T2.Fleet_Series\nORDER BY T3.Rank",
        "db_id": "pilot_record",
        "answers": [
            [
                "Jermaine O'Neal",
                "444-464 (21)"
            ],
            [
                "Patrick O'Bryant",
                "444-464 (21)"
            ]
        ]
    },
    {
        "question": "Show the fleet series of the aircrafts flied by pilots younger than 34",
        "query": "MATCH ()-[T1:`pilot_record.pilot_record`]-(T2:`pilot_record.aircraft`)-[]-(T3:`pilot_record.pilot`)\nWHERE T3.Age < 34\nRETURN T2.Fleet_Series",
        "db_id": "pilot_record",
        "answers": [
            [
                "444-464 (21)"
            ]
        ]
    },
    {
        "question": "Show the names of pilots and the number of records they have.",
        "query": "MATCH ()-[T1:`pilot_record.pilot_record`]-(T2:`pilot_record.pilot`)\nWITH T2.Pilot_name AS Pilot_name, count(T2.Pilot_name) AS count\nRETURN Pilot_name,count",
        "db_id": "pilot_record",
        "answers": [
            [
                "Patrick O'Bryant",
                3
            ],
            [
                "Jermaine O'Neal",
                1
            ],
            [
                "Dan O'Sullivan",
                1
            ],
            [
                "Charles Oakley",
                1
            ]
        ]
    },
    {
        "question": "Show names of pilots that have more than one record.",
        "query": "MATCH ()-[T1:`pilot_record.pilot_record`]-(T2:`pilot_record.pilot`)\nWITH count(*) AS count, T2.Pilot_name AS Pilot_name\nWHERE count  > 1\nRETURN Pilot_name,count",
        "db_id": "pilot_record",
        "answers": [
            [
                "Patrick O'Bryant",
                3
            ]
        ]
    },
    {
        "question": "List the names of pilots that do not have any record.",
        "query": "MATCH (pilot:`pilot_record.pilot`)\nWHERE NOT (pilot:`pilot_record.pilot`)-[:`pilot_record.pilot_record`]-()\nRETURN pilot.Pilot_name",
        "db_id": "pilot_record",
        "answers": [
            [
                "Hakeem Olajuwon"
            ]
        ]
    },
    {
        "question": "What document status codes do we have?",
        "query": "MATCH (ref_document_status:`cre_Doc_Control_Systems.Ref_Document_Status`)\nRETURN ref_document_status.document_status_code",
        "db_id": "cre_Doc_Control_Systems",
        "answers": [
            [
                "working"
            ],
            [
                "done"
            ],
            [
                "overdue"
            ]
        ]
    },
    {
        "question": "What is the description of document status code 'working'?",
        "query": "MATCH (ref_document_status:`cre_Doc_Control_Systems.Ref_Document_Status`)\nWHERE ref_document_status.document_status_code = 'working'\nRETURN ref_document_status.document_status_description",
        "db_id": "cre_Doc_Control_Systems",
        "answers": [
            [
                "currently working on"
            ]
        ]
    },
    {
        "question": "What document type codes do we have?",
        "query": "MATCH (ref_document_types:`cre_Doc_Control_Systems.Ref_Document_Types`)\nRETURN ref_document_types.document_type_code",
        "db_id": "cre_Doc_Control_Systems",
        "answers": [
            [
                "CD"
            ],
            [
                "Paper"
            ],
            [
                "Hard Drive"
            ]
        ]
    },
    {
        "question": "What is the description of document type 'Paper'?",
        "query": "MATCH (ref_document_types:`cre_Doc_Control_Systems.Ref_Document_Types`)\nWHERE ref_document_types.document_type_code = 'Paper'\nRETURN ref_document_types.document_type_description",
        "db_id": "cre_Doc_Control_Systems",
        "answers": [
            [
                "u"
            ]
        ]
    },
    {
        "question": "What are the shipping agent names?",
        "query": "MATCH (ref_shipping_agents:`cre_Doc_Control_Systems.Ref_Shipping_Agents`)\nRETURN ref_shipping_agents.shipping_agent_name",
        "db_id": "cre_Doc_Control_Systems",
        "answers": [
            [
                "UPS"
            ],
            [
                "USPS"
            ],
            [
                "Airline"
            ],
            [
                "Fedex"
            ],
            [
                "Ship"
            ]
        ]
    },
    {
        "question": "What is the shipping agent code of shipping agent UPS?",
        "query": "MATCH (ref_shipping_agents:`cre_Doc_Control_Systems.Ref_Shipping_Agents`)\nWHERE ref_shipping_agents.shipping_agent_name = 'UPS'\nRETURN ref_shipping_agents.shipping_agent_code",
        "db_id": "cre_Doc_Control_Systems",
        "answers": [
            [
                "UP"
            ]
        ]
    },
    {
        "question": "What are all role codes?",
        "query": "MATCH (roles:`cre_Doc_Control_Systems.Roles`)\nRETURN roles.role_code",
        "db_id": "cre_Doc_Control_Systems",
        "answers": [
            [
                "ED"
            ],
            [
                "PT"
            ],
            [
                "MG"
            ],
            [
                "PR"
            ]
        ]
    },
    {
        "question": "What is the description of role code ED?",
        "query": "MATCH (roles:`cre_Doc_Control_Systems.Roles`)\nWHERE roles.role_code = 'ED'\nRETURN roles.role_description",
        "db_id": "cre_Doc_Control_Systems",
        "answers": [
            [
                "Editor"
            ]
        ]
    },
    {
        "question": "How many employees do we have?",
        "query": "MATCH (employees:`cre_Doc_Control_Systems.Employees`)\nRETURN count(*)",
        "db_id": "cre_Doc_Control_Systems",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "What is the role of the employee named Koby?",
        "query": "MATCH (T1:`cre_Doc_Control_Systems.Roles`)-[]-(T2:`cre_Doc_Control_Systems.Employees`)\nWHERE T2.employee_name = 'Koby'\nRETURN T1.role_description",
        "db_id": "cre_Doc_Control_Systems",
        "answers": [
            [
                "Editor"
            ]
        ]
    },
    {
        "question": "List all document ids and receipt dates of documents.",
        "query": "MATCH (documents:`cre_Doc_Control_Systems.Documents`)\nRETURN documents.document_id,documents.receipt_date",
        "db_id": "cre_Doc_Control_Systems",
        "answers": [
            [
                1,
                "2008-04-21 20:42:25"
            ],
            [
                2,
                "1974-05-08 00:00:46"
            ],
            [
                3,
                "2014-12-25 17:22:44"
            ],
            [
                4,
                "1973-11-05 21:48:53"
            ],
            [
                7,
                "1982-09-27 14:52:15"
            ],
            [
                10,
                "1976-09-15 19:24:17"
            ],
            [
                12,
                "1996-05-31 06:51:58"
            ],
            [
                13,
                "2015-04-03 09:36:19"
            ],
            [
                14,
                "2017-07-02 17:39:09"
            ],
            [
                15,
                "1986-12-14 14:18:59"
            ],
            [
                17,
                "1983-09-26 09:32:56"
            ],
            [
                20,
                "1996-07-27 03:30:40"
            ],
            [
                23,
                "1999-04-17 14:19:32"
            ],
            [
                24,
                "2005-09-30 00:10:02"
            ],
            [
                25,
                "1985-11-05 17:59:34"
            ]
        ]
    },
    {
        "question": "How many employees does each role have? List role description, id and number of employees.",
        "query": "MATCH (T1:`cre_Doc_Control_Systems.Roles`)-[]-(T2:`cre_Doc_Control_Systems.Employees`)\nWITH count(T2.role_code) AS count, T2.role_code AS role_code, T1.role_description AS role_description\nRETURN role_description,role_code,count",
        "db_id": "cre_Doc_Control_Systems",
        "answers": [
            [
                "Editor",
                "ED",
                2
            ],
            [
                "Photo",
                "PT",
                2
            ],
            [
                "Manager",
                "MG",
                1
            ],
            [
                "Proof Manager",
                "PR",
                1
            ]
        ]
    },
    {
        "question": "How many documents have the status code done?",
        "query": "MATCH (documents:`cre_Doc_Control_Systems.Documents`)\nWHERE documents.document_status_code = 'done'\nRETURN count(*)",
        "db_id": "cre_Doc_Control_Systems",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "List the document type code for the document with the id 2.",
        "query": "MATCH (documents:`cre_Doc_Control_Systems.Documents`)\nWHERE documents.document_id = 2\nRETURN documents.document_type_code",
        "db_id": "cre_Doc_Control_Systems",
        "answers": [
            [
                "Paper"
            ]
        ]
    },
    {
        "question": "List the document ids for any documents with the status code done and the type code paper.",
        "query": "MATCH (documents:`cre_Doc_Control_Systems.Documents`)\nWHERE documents.document_status_code = 'done' AND documents.document_type_code = 'Paper'\nRETURN documents.document_id",
        "db_id": "cre_Doc_Control_Systems",
        "answers": [
            [
                2
            ],
            [
                3
            ],
            [
                4
            ],
            [
                17
            ]
        ]
    },
    {
        "question": "What is the receipt date of the document with id 3?",
        "query": "MATCH (documents:`cre_Doc_Control_Systems.Documents`)\nWHERE documents.document_id = 3\nRETURN documents.receipt_date",
        "db_id": "cre_Doc_Control_Systems",
        "answers": [
            [
                "2014-12-25 17:22:44"
            ]
        ]
    },
    {
        "question": "What is draft detail of the document with id 7?",
        "query": "MATCH (document_drafts:`cre_Doc_Control_Systems.Document_Drafts`)\nWHERE document_drafts.document_id = 7\nRETURN document_drafts.draft_details",
        "db_id": "cre_Doc_Control_Systems",
        "answers": [
            [
                "m"
            ]
        ]
    },
    {
        "question": "List all department names ordered by their starting date.",
        "query": "MATCH (department:`company_1.department`)\nRETURN department.Dname\nORDER BY department.Mgr_start_date",
        "db_id": "company_1",
        "answers": [
            [
                "Headquarters"
            ],
            [
                "Research"
            ],
            [
                "Administration"
            ]
        ]
    },
    {
        "question": "find all dependent names who have a spouse relation with some employee.",
        "query": "MATCH (dependent:`company_1.dependent`)\nWHERE dependent.Relationship = 'Spouse'\nRETURN dependent.Dependent_name",
        "db_id": "company_1",
        "answers": [
            [
                "Joy"
            ],
            [
                "Abner"
            ],
            [
                "Elizabeth"
            ]
        ]
    },
    {
        "question": "how many female dependents are there?",
        "query": "MATCH (dependent:`company_1.dependent`)\nWHERE dependent.Sex = 'F'\nRETURN count(*)",
        "db_id": "company_1",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "Return the first names and last names of employees who earn more than 30000 in salary.",
        "query": "MATCH (employee:`company_1.employee`)\nWHERE employee.Salary > 30000\nRETURN employee.Fname,employee.Lname",
        "db_id": "company_1",
        "answers": [
            [
                "Franklin",
                "Wong"
            ],
            [
                "Ramesh",
                "Narayan"
            ],
            [
                "James",
                "Borg"
            ],
            [
                "Jennifier",
                "Wallace"
            ]
        ]
    },
    {
        "question": "Find the number of employees of each gender whose salary is lower than 50000.",
        "query": "MATCH (employee:`company_1.employee`)\nWHERE employee.Salary < 50000\nWITH employee.Sex AS Sex, count(employee.Sex) AS count\nRETURN count,Sex",
        "db_id": "company_1",
        "answers": [
            [
                4,
                "M"
            ],
            [
                3,
                "F"
            ]
        ]
    },
    {
        "question": "list the first and last names, and the addresses of all employees in the ascending order of their birth date.",
        "query": "MATCH (employee:`company_1.employee`)\nRETURN employee.Fname,employee.Lname,employee.Address\nORDER BY employee.Bdate",
        "db_id": "company_1",
        "answers": [
            [
                "James",
                "Borg",
                "450 Stone, Houston, TX"
            ],
            [
                "Jennifier",
                "Wallace",
                "291 Berry, Bellaire, TX"
            ],
            [
                "Franklin",
                "Wong",
                "638 Voss, Houston, TX"
            ],
            [
                "Ramesh",
                "Narayan",
                "975 Fire Oak, Humble, TX"
            ],
            [
                "Jonh",
                "Smith",
                "731 Fondren, Houston, TX"
            ],
            [
                "Alicia",
                "Zelaya",
                "3321 Castle, Spring, TX"
            ],
            [
                "Ahmad",
                "Jabbar",
                "980 Dallas, Houston, TX"
            ],
            [
                "Joyce",
                "English",
                "5631 Rice, Houston, TX"
            ]
        ]
    },
    {
        "question": "what are the event details of the services that have the type code 'Marriage'?",
        "query": "MATCH (T1:`local_govt_in_alabama.Events`)-[]-(T2:`local_govt_in_alabama.Services`)\nWHERE T2.Service_Type_Code = 'Marriage'\nRETURN T1.Event_Details",
        "db_id": "local_govt_in_alabama",
        "answers": [
            [
                "Fail"
            ],
            [
                "Fail"
            ],
            [
                "Fail"
            ],
            [
                "Success"
            ],
            [
                "Success"
            ]
        ]
    },
    {
        "question": "What are the ids and details of events that have more than one participants?",
        "query": "MATCH (T1:`local_govt_in_alabama.Events`)-[T2:`local_govt_in_alabama.Participants_in_Events`]-()\nWITH T1.Event_ID AS Event_ID, T1.Event_Details AS Event_Details, count(*) AS count\nWHERE count  > 1\nRETURN Event_ID,Event_Details",
        "db_id": "local_govt_in_alabama",
        "answers": [
            [
                3,
                "Success"
            ],
            [
                13,
                "Fail"
            ],
            [
                17,
                "Fail"
            ],
            [
                40,
                "Fail"
            ],
            [
                80,
                "Success"
            ]
        ]
    },
    {
        "question": "How many events have each participants attended? List the participant id, type and the number.",
        "query": "MATCH (T1:`local_govt_in_alabama.Participants`)-[T2:`local_govt_in_alabama.Participants_in_Events`]-()\nWITH T1.Participant_Type_Code AS Participant_Type_Code, count(T1.Participant_ID) AS count, T1.Participant_ID AS Participant_ID\nRETURN Participant_ID,Participant_Type_Code,count",
        "db_id": "local_govt_in_alabama",
        "answers": [
            [
                26,
                "Organizer",
                2
            ],
            [
                36,
                "Organizer",
                1
            ],
            [
                37,
                "Participant",
                2
            ],
            [
                60,
                "Participant",
                1
            ],
            [
                63,
                "Participant",
                1
            ],
            [
                64,
                "Participant",
                1
            ],
            [
                66,
                "Participant",
                4
            ],
            [
                86,
                "Organizer",
                2
            ],
            [
                90,
                "Participant",
                3
            ],
            [
                96,
                "Organizer",
                1
            ]
        ]
    },
    {
        "question": "What are all the the participant ids, type code and details?",
        "query": "MATCH (participants:`local_govt_in_alabama.Participants`)\nRETURN participants.Participant_ID,participants.Participant_Type_Code,participants.Participant_Details",
        "db_id": "local_govt_in_alabama",
        "answers": [
            [
                9,
                "Organizer",
                "Karlee Batz"
            ],
            [
                26,
                "Organizer",
                "Vilma Schinner"
            ],
            [
                28,
                "Organizer",
                "Lupe Deckow"
            ],
            [
                36,
                "Organizer",
                "Kenyatta Kuhn"
            ],
            [
                37,
                "Participant",
                "Miss Kaci Lebsack"
            ],
            [
                38,
                "Organizer",
                "Macy Mayer DDS"
            ],
            [
                60,
                "Participant",
                "Dewitt Walter"
            ],
            [
                63,
                "Participant",
                "Prof. Michelle Maggio Jr."
            ],
            [
                64,
                "Participant",
                "Dr. Jaydon Renner"
            ],
            [
                66,
                "Participant",
                "Justyn Lebsack"
            ],
            [
                75,
                "Participant",
                "Berniece Weimann"
            ],
            [
                86,
                "Organizer",
                "Neil Blick"
            ],
            [
                90,
                "Participant",
                "Dedrick Ebert"
            ],
            [
                96,
                "Organizer",
                "Miss Joyce Cremin"
            ],
            [
                98,
                "Participant",
                "Dr. Kris Deckow"
            ]
        ]
    },
    {
        "question": "How many participants belong to the type 'Organizer'?",
        "query": "MATCH (participants:`local_govt_in_alabama.Participants`)\nWHERE participants.Participant_Type_Code = 'Organizer'\nRETURN count(*)",
        "db_id": "local_govt_in_alabama",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "List the type of the services in alphabetical order.",
        "query": "MATCH (services:`local_govt_in_alabama.Services`)\nRETURN services.Service_Type_Code\nORDER BY services.Service_Type_Code",
        "db_id": "local_govt_in_alabama",
        "answers": [
            [
                "Birth Proof"
            ],
            [
                "Death Proof"
            ],
            [
                "Marriage"
            ],
            [
                "Property Change"
            ]
        ]
    },
    {
        "question": "List the service id and details for the events.",
        "query": "MATCH (events:`local_govt_in_alabama.Events`)\nRETURN events.Service_ID,events.Event_Details",
        "db_id": "local_govt_in_alabama",
        "answers": [
            [
                5,
                "Success"
            ],
            [
                8,
                "Success"
            ],
            [
                8,
                "Fail"
            ],
            [
                2,
                "Fail"
            ],
            [
                5,
                "Fail"
            ],
            [
                6,
                "Fail"
            ],
            [
                6,
                "Fail"
            ],
            [
                8,
                "Fail"
            ],
            [
                8,
                "Fail"
            ],
            [
                5,
                "Success"
            ],
            [
                2,
                "Fail"
            ],
            [
                2,
                "Success"
            ],
            [
                5,
                "Success"
            ],
            [
                2,
                "Fail"
            ],
            [
                2,
                "Success"
            ]
        ]
    },
    {
        "question": "What is the most common participant type?",
        "query": "MATCH (participants:`local_govt_in_alabama.Participants`)\nWITH count(participants.Participant_Type_Code) AS count, participants.Participant_Type_Code AS Participant_Type_Code\nRETURN Participant_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "local_govt_in_alabama",
        "answers": [
            [
                "Participant"
            ]
        ]
    },
    {
        "question": "Which service id and type has the least number of participants?",
        "query": "MATCH (T1:`local_govt_in_alabama.Participants`)-[T2:`local_govt_in_alabama.Participants_in_Events`]-(T3:`local_govt_in_alabama.Events`)-[]-(T4:`local_govt_in_alabama.Services`)\nWITH T4.Service_Type_Code AS Service_Type_Code, count(T3.Service_ID) AS count, T3.Service_ID AS Service_ID\nRETURN Service_ID,Service_Type_Code\nORDER BY count ASC\nLIMIT 1",
        "db_id": "local_govt_in_alabama",
        "answers": [
            [
                6,
                "Birth Proof"
            ]
        ]
    },
    {
        "question": "How many events did not have any participants?",
        "query": "MATCH (events:`local_govt_in_alabama.Events`)\nWHERE NOT (events:`local_govt_in_alabama.Events`)-[:`local_govt_in_alabama.Participants_in_Events`]-()\nRETURN count(*)",
        "db_id": "local_govt_in_alabama",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "How many technicians are there?",
        "query": "MATCH (technician:`machine_repair.technician`)\nRETURN count(*)",
        "db_id": "machine_repair",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "What is the number of technicians?",
        "query": "MATCH (technician:`machine_repair.technician`)\nRETURN count(*)",
        "db_id": "machine_repair",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "List the names of technicians in ascending order of age.",
        "query": "MATCH (technician:`machine_repair.technician`)\nRETURN technician.Name\nORDER BY technician.Age ASC",
        "db_id": "machine_repair",
        "answers": [
            [
                "Mark Sewell"
            ],
            [
                "Lou Boudreau"
            ],
            [
                "Charlie Hollocher"
            ],
            [
                "John Brown"
            ],
            [
                "Joe Sewell"
            ],
            [
                "Mickey Cochrane"
            ],
            [
                "Tony Sewell"
            ],
            [
                "Eddie Collins"
            ],
            [
                "Joe Cochrane"
            ],
            [
                "Eddie Collins"
            ]
        ]
    },
    {
        "question": "What are the names of the technicians by ascending order of age?",
        "query": "MATCH (technician:`machine_repair.technician`)\nRETURN technician.Name\nORDER BY technician.Age ASC",
        "db_id": "machine_repair",
        "answers": [
            [
                "Mark Sewell"
            ],
            [
                "Lou Boudreau"
            ],
            [
                "Charlie Hollocher"
            ],
            [
                "John Brown"
            ],
            [
                "Joe Sewell"
            ],
            [
                "Mickey Cochrane"
            ],
            [
                "Tony Sewell"
            ],
            [
                "Eddie Collins"
            ],
            [
                "Joe Cochrane"
            ],
            [
                "Eddie Collins"
            ]
        ]
    },
    {
        "question": "What are the team and starting year of technicians?",
        "query": "MATCH (technician:`machine_repair.technician`)\nRETURN technician.Team,technician.Starting_Year",
        "db_id": "machine_repair",
        "answers": [
            [
                "NYY",
                2012.0
            ],
            [
                "NYY",
                2013.0
            ],
            [
                "CLE",
                2005.0
            ],
            [
                "CLE",
                2009.0
            ],
            [
                "CHC",
                2002.0
            ],
            [
                "CLE",
                2016.0
            ],
            [
                "CWS",
                2005.0
            ],
            [
                "CLE",
                2006.0
            ],
            [
                "CWS",
                2003.0
            ],
            [
                "PHA",
                2009.0
            ]
        ]
    },
    {
        "question": "What is the team and starting year for each technician?",
        "query": "MATCH (technician:`machine_repair.technician`)\nRETURN technician.Team,technician.Starting_Year",
        "db_id": "machine_repair",
        "answers": [
            [
                "NYY",
                2012.0
            ],
            [
                "NYY",
                2013.0
            ],
            [
                "CLE",
                2005.0
            ],
            [
                "CLE",
                2009.0
            ],
            [
                "CHC",
                2002.0
            ],
            [
                "CLE",
                2016.0
            ],
            [
                "CWS",
                2005.0
            ],
            [
                "CLE",
                2006.0
            ],
            [
                "CWS",
                2003.0
            ],
            [
                "PHA",
                2009.0
            ]
        ]
    },
    {
        "question": "List the name of technicians whose team is not \"NYY\".",
        "query": "MATCH (technician:`machine_repair.technician`)\nWHERE technician.Team <> 'NYY'\nRETURN technician.Name",
        "db_id": "machine_repair",
        "answers": [
            [
                "Tony Sewell"
            ],
            [
                "Mark Sewell"
            ],
            [
                "Charlie Hollocher"
            ],
            [
                "Lou Boudreau"
            ],
            [
                "Eddie Collins"
            ],
            [
                "Joe Cochrane"
            ],
            [
                "Eddie Collins"
            ],
            [
                "Mickey Cochrane"
            ]
        ]
    },
    {
        "question": "What is the name of the technician whose team is not 'NYY'?",
        "query": "MATCH (technician:`machine_repair.technician`)\nWHERE technician.Team <> 'NYY'\nRETURN technician.Name",
        "db_id": "machine_repair",
        "answers": [
            [
                "Tony Sewell"
            ],
            [
                "Mark Sewell"
            ],
            [
                "Charlie Hollocher"
            ],
            [
                "Lou Boudreau"
            ],
            [
                "Eddie Collins"
            ],
            [
                "Joe Cochrane"
            ],
            [
                "Eddie Collins"
            ],
            [
                "Mickey Cochrane"
            ]
        ]
    },
    {
        "question": "Show the name of technicians aged either 36 or 37",
        "query": "MATCH (technician:`machine_repair.technician`)\nWHERE technician.Age = 36 OR technician.Age = 37\nRETURN technician.Name",
        "db_id": "machine_repair",
        "answers": [
            [
                "Joe Sewell"
            ],
            [
                "John Brown"
            ]
        ]
    },
    {
        "question": "What are the names of the technicians aged either 36 or 37?",
        "query": "MATCH (technician:`machine_repair.technician`)\nWHERE technician.Age = 36 OR technician.Age = 37\nRETURN technician.Name",
        "db_id": "machine_repair",
        "answers": [
            [
                "Joe Sewell"
            ],
            [
                "John Brown"
            ]
        ]
    },
    {
        "question": "What is the starting year of the oldest technicians?",
        "query": "MATCH (technician:`machine_repair.technician`)\nRETURN technician.Starting_Year\nORDER BY technician.Age DESC\nLIMIT 1",
        "db_id": "machine_repair",
        "answers": [
            [
                2003.0
            ]
        ]
    },
    {
        "question": "What is the starting year for the oldest technician?",
        "query": "MATCH (technician:`machine_repair.technician`)\nRETURN technician.Starting_Year\nORDER BY technician.Age DESC\nLIMIT 1",
        "db_id": "machine_repair",
        "answers": [
            [
                2003.0
            ]
        ]
    },
    {
        "question": "Show different teams of technicians and the number of technicians in each team.",
        "query": "MATCH (technician:`machine_repair.technician`)\nWITH count(technician.Team) AS count, technician.Team AS Team\nRETURN Team,count",
        "db_id": "machine_repair",
        "answers": [
            [
                "NYY",
                2
            ],
            [
                "CLE",
                4
            ],
            [
                "CHC",
                1
            ],
            [
                "CWS",
                2
            ],
            [
                "PHA",
                1
            ]
        ]
    },
    {
        "question": "For each team, how many technicians are there?",
        "query": "MATCH (technician:`machine_repair.technician`)\nWITH count(technician.Team) AS count, technician.Team AS Team\nRETURN Team,count",
        "db_id": "machine_repair",
        "answers": [
            [
                "NYY",
                2
            ],
            [
                "CLE",
                4
            ],
            [
                "CHC",
                1
            ],
            [
                "CWS",
                2
            ],
            [
                "PHA",
                1
            ]
        ]
    },
    {
        "question": "Please show the team that has the most number of technicians.",
        "query": "MATCH (technician:`machine_repair.technician`)\nWITH count(technician.Team) AS count, technician.Team AS Team\nRETURN Team\nORDER BY count DESC\nLIMIT 1",
        "db_id": "machine_repair",
        "answers": [
            [
                "CLE"
            ]
        ]
    },
    {
        "question": "What are the teams with the most technicians?",
        "query": "MATCH (technician:`machine_repair.technician`)\nWITH count(technician.Team) AS count, technician.Team AS Team\nRETURN Team\nORDER BY count DESC\nLIMIT 1",
        "db_id": "machine_repair",
        "answers": [
            [
                "CLE"
            ]
        ]
    },
    {
        "question": "Show the team that have at least two technicians.",
        "query": "MATCH (technician:`machine_repair.technician`)\nWITH count(*) AS count, technician.Team AS Team\nWHERE count  >= 2\nRETURN Team",
        "db_id": "machine_repair",
        "answers": [
            [
                "NYY"
            ],
            [
                "CLE"
            ],
            [
                "CWS"
            ]
        ]
    },
    {
        "question": "What is the team with at least 2 technicians?",
        "query": "MATCH (technician:`machine_repair.technician`)\nWITH count(*) AS count, technician.Team AS Team\nWHERE count  >= 2\nRETURN Team",
        "db_id": "machine_repair",
        "answers": [
            [
                "NYY"
            ],
            [
                "CLE"
            ],
            [
                "CWS"
            ]
        ]
    },
    {
        "question": "Show names of technicians and the number of machines they are assigned to repair.",
        "query": "MATCH (T1:`machine_repair.repair_assignment`)-[]-(T2:`machine_repair.technician`)\nWITH count(T2.Name) AS count, T2.Name AS Name\nRETURN Name,count",
        "db_id": "machine_repair",
        "answers": [
            [
                "Joe Sewell",
                5
            ],
            [
                "John Brown",
                1
            ],
            [
                "Tony Sewell",
                1
            ],
            [
                "Charlie Hollocher",
                1
            ],
            [
                "Eddie Collins",
                1
            ]
        ]
    },
    {
        "question": "What are the names of the technicians  and how many machines are they assigned to repair?",
        "query": "MATCH (T1:`machine_repair.repair_assignment`)-[]-(T2:`machine_repair.technician`)\nWITH count(T2.Name) AS count, T2.Name AS Name\nRETURN Name,count",
        "db_id": "machine_repair",
        "answers": [
            [
                "Joe Sewell",
                5
            ],
            [
                "John Brown",
                1
            ],
            [
                "Tony Sewell",
                1
            ],
            [
                "Charlie Hollocher",
                1
            ],
            [
                "Eddie Collins",
                1
            ]
        ]
    },
    {
        "question": "List the names of technicians who have not been assigned to repair machines.",
        "query": "MATCH (technician:`machine_repair.technician`)\nWHERE NOT (technician:`machine_repair.technician`)-[]-(:`machine_repair.repair_assignment`)\nRETURN technician.Name",
        "db_id": "machine_repair",
        "answers": [
            [
                "Mark Sewell"
            ],
            [
                "Lou Boudreau"
            ],
            [
                "Joe Cochrane"
            ],
            [
                "Eddie Collins"
            ],
            [
                "Mickey Cochrane"
            ]
        ]
    },
    {
        "question": "What are the names of the technicians that have not been assigned to repair machines?",
        "query": "MATCH (technician:`machine_repair.technician`)\nWHERE NOT (technician:`machine_repair.technician`)-[]-(:`machine_repair.repair_assignment`)\nRETURN technician.Name",
        "db_id": "machine_repair",
        "answers": [
            [
                "Mark Sewell"
            ],
            [
                "Lou Boudreau"
            ],
            [
                "Joe Cochrane"
            ],
            [
                "Eddie Collins"
            ],
            [
                "Mickey Cochrane"
            ]
        ]
    },
    {
        "question": "How many entrepreneurs are there?",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nRETURN count(*)",
        "db_id": "entrepreneur",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "Count the number of entrepreneurs.",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nRETURN count(*)",
        "db_id": "entrepreneur",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "List the companies of entrepreneurs in descending order of money requested.",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nRETURN entrepreneur.Company\nORDER BY entrepreneur.Money_Requested DESC",
        "db_id": "entrepreneur",
        "answers": [
            [
                "Umbrolly"
            ],
            [
                "Grails Ltd"
            ],
            [
                "Elizabeth Galton Ltd"
            ],
            [
                "Mycorrhizal Systems"
            ],
            [
                "Le Beanock"
            ],
            [
                "IV Cam"
            ]
        ]
    },
    {
        "question": "What are the companies of entrepreneurs, ordered descending by amount of money requested?",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nRETURN entrepreneur.Company\nORDER BY entrepreneur.Money_Requested DESC",
        "db_id": "entrepreneur",
        "answers": [
            [
                "Umbrolly"
            ],
            [
                "Grails Ltd"
            ],
            [
                "Elizabeth Galton Ltd"
            ],
            [
                "Mycorrhizal Systems"
            ],
            [
                "Le Beanock"
            ],
            [
                "IV Cam"
            ]
        ]
    },
    {
        "question": "List the companies and the investors of entrepreneurs.",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nRETURN entrepreneur.Company,entrepreneur.Investor",
        "db_id": "entrepreneur",
        "answers": [
            [
                "Umbrolly",
                "Duncan Bannatyne"
            ],
            [
                "Grails Ltd",
                "Doug Richard"
            ],
            [
                "Le Beanock",
                "Rachel Elnaugh"
            ],
            [
                "IV Cam",
                "Peter Jones"
            ],
            [
                "Mycorrhizal Systems",
                "Simon Woodroffe"
            ],
            [
                "Elizabeth Galton Ltd",
                "Duncan Bannatyne"
            ]
        ]
    },
    {
        "question": "What are the companies and investors that correspond to each entrepreneur?",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nRETURN entrepreneur.Company,entrepreneur.Investor",
        "db_id": "entrepreneur",
        "answers": [
            [
                "Umbrolly",
                "Duncan Bannatyne"
            ],
            [
                "Grails Ltd",
                "Doug Richard"
            ],
            [
                "Le Beanock",
                "Rachel Elnaugh"
            ],
            [
                "IV Cam",
                "Peter Jones"
            ],
            [
                "Mycorrhizal Systems",
                "Simon Woodroffe"
            ],
            [
                "Elizabeth Galton Ltd",
                "Duncan Bannatyne"
            ]
        ]
    },
    {
        "question": "What is the average money requested by all entrepreneurs?",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nRETURN avg(entrepreneur.Money_Requested)",
        "db_id": "entrepreneur",
        "answers": [
            [
                93166.66666666667
            ]
        ]
    },
    {
        "question": "Return the average money requested across all entrepreneurs.",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nRETURN avg(entrepreneur.Money_Requested)",
        "db_id": "entrepreneur",
        "answers": [
            [
                93166.66666666667
            ]
        ]
    },
    {
        "question": "What are the names of people in ascending order of weight?",
        "query": "MATCH (people:`entrepreneur.people`)\nRETURN people.Name\nORDER BY people.Weight ASC",
        "db_id": "entrepreneur",
        "answers": [
            [
                "Fabrizio Buonocore"
            ],
            [
                "Leonardo Binchi"
            ],
            [
                "Alberto Angelini"
            ],
            [
                "Roberto Calcaterra"
            ],
            [
                "Marco Gerini"
            ],
            [
                "Maurizio Felugo"
            ],
            [
                "Francesco Postiglione"
            ],
            [
                "Goran Fiorentini"
            ]
        ]
    },
    {
        "question": "Return the names of people, ordered by weight ascending.",
        "query": "MATCH (people:`entrepreneur.people`)\nRETURN people.Name\nORDER BY people.Weight ASC",
        "db_id": "entrepreneur",
        "answers": [
            [
                "Fabrizio Buonocore"
            ],
            [
                "Leonardo Binchi"
            ],
            [
                "Alberto Angelini"
            ],
            [
                "Roberto Calcaterra"
            ],
            [
                "Marco Gerini"
            ],
            [
                "Maurizio Felugo"
            ],
            [
                "Francesco Postiglione"
            ],
            [
                "Goran Fiorentini"
            ]
        ]
    },
    {
        "question": "What are the names of entrepreneurs?",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nRETURN T2.Name",
        "db_id": "entrepreneur",
        "answers": [
            [
                "Francesco Postiglione"
            ],
            [
                "Leonardo Binchi"
            ],
            [
                "Fabrizio Buonocore"
            ],
            [
                "Roberto Calcaterra"
            ],
            [
                "Goran Fiorentini"
            ],
            [
                "Maurizio Felugo"
            ]
        ]
    },
    {
        "question": "Return the names of entrepreneurs.",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nRETURN T2.Name",
        "db_id": "entrepreneur",
        "answers": [
            [
                "Francesco Postiglione"
            ],
            [
                "Leonardo Binchi"
            ],
            [
                "Fabrizio Buonocore"
            ],
            [
                "Roberto Calcaterra"
            ],
            [
                "Goran Fiorentini"
            ],
            [
                "Maurizio Felugo"
            ]
        ]
    },
    {
        "question": "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nWHERE T1.Investor <> 'Rachel Elnaugh'\nRETURN T2.Name",
        "db_id": "entrepreneur",
        "answers": [
            [
                "Francesco Postiglione"
            ],
            [
                "Leonardo Binchi"
            ],
            [
                "Roberto Calcaterra"
            ],
            [
                "Goran Fiorentini"
            ],
            [
                "Maurizio Felugo"
            ]
        ]
    },
    {
        "question": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nWHERE T1.Investor <> 'Rachel Elnaugh'\nRETURN T2.Name",
        "db_id": "entrepreneur",
        "answers": [
            [
                "Francesco Postiglione"
            ],
            [
                "Leonardo Binchi"
            ],
            [
                "Roberto Calcaterra"
            ],
            [
                "Goran Fiorentini"
            ],
            [
                "Maurizio Felugo"
            ]
        ]
    },
    {
        "question": "What is the weight of the shortest person?",
        "query": "MATCH (people:`entrepreneur.people`)\nRETURN people.Weight\nORDER BY people.Height ASC\nLIMIT 1",
        "db_id": "entrepreneur",
        "answers": [
            [
                75.0
            ]
        ]
    },
    {
        "question": "Return the weight of the shortest person.",
        "query": "MATCH (people:`entrepreneur.people`)\nRETURN people.Weight\nORDER BY people.Height ASC\nLIMIT 1",
        "db_id": "entrepreneur",
        "answers": [
            [
                75.0
            ]
        ]
    },
    {
        "question": "What is the name of the entrepreneur with the greatest weight?",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nRETURN T2.Name\nORDER BY T2.Weight DESC\nLIMIT 1",
        "db_id": "entrepreneur",
        "answers": [
            [
                "Goran Fiorentini"
            ]
        ]
    },
    {
        "question": "Return the name of the heaviest entrepreneur.",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nRETURN T2.Name\nORDER BY T2.Weight DESC\nLIMIT 1",
        "db_id": "entrepreneur",
        "answers": [
            [
                "Goran Fiorentini"
            ]
        ]
    },
    {
        "question": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nWHERE T1.Investor = 'Simon Woodroffe' OR T1.Investor = 'Peter Jones'\nRETURN T2.Date_of_Birth",
        "db_id": "entrepreneur",
        "answers": [
            [
                "1972-02-06"
            ],
            [
                "1981-11-21"
            ]
        ]
    },
    {
        "question": "Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nWHERE T1.Investor = 'Simon Woodroffe' OR T1.Investor = 'Peter Jones'\nRETURN T2.Date_of_Birth",
        "db_id": "entrepreneur",
        "answers": [
            [
                "1972-02-06"
            ],
            [
                "1981-11-21"
            ]
        ]
    },
    {
        "question": "What are the weights of entrepreneurs in descending order of money requested?",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nRETURN T2.Weight\nORDER BY T1.Money_Requested DESC",
        "db_id": "entrepreneur",
        "answers": [
            [
                80.0
            ],
            [
                57.0
            ],
            [
                76.0
            ],
            [
                89.0
            ],
            [
                45.0
            ],
            [
                67.0
            ]
        ]
    },
    {
        "question": "Return the weights of entrepreneurs, ordered descending by amount of money requested.",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nRETURN T2.Weight\nORDER BY T1.Money_Requested DESC",
        "db_id": "entrepreneur",
        "answers": [
            [
                80.0
            ],
            [
                57.0
            ],
            [
                76.0
            ],
            [
                89.0
            ],
            [
                45.0
            ],
            [
                67.0
            ]
        ]
    },
    {
        "question": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nWITH count(entrepreneur.Investor) AS count, entrepreneur.Investor AS Investor\nRETURN Investor,count",
        "db_id": "entrepreneur",
        "answers": [
            [
                "Duncan Bannatyne",
                2
            ],
            [
                "Doug Richard",
                1
            ],
            [
                "Rachel Elnaugh",
                1
            ],
            [
                "Peter Jones",
                1
            ],
            [
                "Simon Woodroffe",
                1
            ]
        ]
    },
    {
        "question": "How many entrepreneurs correspond to each investor?",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nWITH count(entrepreneur.Investor) AS count, entrepreneur.Investor AS Investor\nRETURN Investor,count",
        "db_id": "entrepreneur",
        "answers": [
            [
                "Duncan Bannatyne",
                2
            ],
            [
                "Doug Richard",
                1
            ],
            [
                "Rachel Elnaugh",
                1
            ],
            [
                "Peter Jones",
                1
            ],
            [
                "Simon Woodroffe",
                1
            ]
        ]
    },
    {
        "question": "What is the investor that has invested in the most number of entrepreneurs?",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nWITH count(entrepreneur.Investor) AS count, entrepreneur.Investor AS Investor\nRETURN Investor\nORDER BY count DESC\nLIMIT 1",
        "db_id": "entrepreneur",
        "answers": [
            [
                "Duncan Bannatyne"
            ]
        ]
    },
    {
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nWITH count(entrepreneur.Investor) AS count, entrepreneur.Investor AS Investor\nRETURN Investor\nORDER BY count DESC\nLIMIT 1",
        "db_id": "entrepreneur",
        "answers": [
            [
                "Duncan Bannatyne"
            ]
        ]
    },
    {
        "question": "What are the investors that have invested in at least two entrepreneurs?",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nWITH count(*) AS count, entrepreneur.Investor AS Investor\nWHERE count  >= 2\nRETURN Investor",
        "db_id": "entrepreneur",
        "answers": [
            [
                "Duncan Bannatyne"
            ]
        ]
    },
    {
        "question": "Return the investors who have invested in two or more entrepreneurs.",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nWITH count(*) AS count, entrepreneur.Investor AS Investor\nWHERE count  >= 2\nRETURN Investor",
        "db_id": "entrepreneur",
        "answers": [
            [
                "Duncan Bannatyne"
            ]
        ]
    },
    {
        "question": "List the names of entrepreneurs and their companies in descending order of money requested?",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nRETURN T2.Name,T1.Company\nORDER BY T1.Money_Requested",
        "db_id": "entrepreneur",
        "answers": [
            [
                "Roberto Calcaterra",
                "IV Cam"
            ],
            [
                "Fabrizio Buonocore",
                "Le Beanock"
            ],
            [
                "Goran Fiorentini",
                "Mycorrhizal Systems"
            ],
            [
                "Maurizio Felugo",
                "Elizabeth Galton Ltd"
            ],
            [
                "Leonardo Binchi",
                "Grails Ltd"
            ],
            [
                "Francesco Postiglione",
                "Umbrolly"
            ]
        ]
    },
    {
        "question": "What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nRETURN T2.Name,T1.Company\nORDER BY T1.Money_Requested",
        "db_id": "entrepreneur",
        "answers": [
            [
                "Roberto Calcaterra",
                "IV Cam"
            ],
            [
                "Fabrizio Buonocore",
                "Le Beanock"
            ],
            [
                "Goran Fiorentini",
                "Mycorrhizal Systems"
            ],
            [
                "Maurizio Felugo",
                "Elizabeth Galton Ltd"
            ],
            [
                "Leonardo Binchi",
                "Grails Ltd"
            ],
            [
                "Francesco Postiglione",
                "Umbrolly"
            ]
        ]
    },
    {
        "question": "List the names of people that are not entrepreneurs.",
        "query": "MATCH (people:`entrepreneur.people`)\nWHERE NOT (people:`entrepreneur.people`)-[]-(:`entrepreneur.entrepreneur`)\nRETURN people.Name",
        "db_id": "entrepreneur",
        "answers": [
            [
                "Marco Gerini"
            ],
            [
                "Alberto Angelini"
            ]
        ]
    },
    {
        "question": "What are the names of people who are not entrepreneurs?",
        "query": "MATCH (people:`entrepreneur.people`)\nWHERE NOT (people:`entrepreneur.people`)-[]-(:`entrepreneur.entrepreneur`)\nRETURN people.Name",
        "db_id": "entrepreneur",
        "answers": [
            [
                "Marco Gerini"
            ],
            [
                "Alberto Angelini"
            ]
        ]
    },
    {
        "question": "How many distinct companies are there?",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nRETURN count(DISTINCT entrepreneur.Company)",
        "db_id": "entrepreneur",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "Count the number of different companies.",
        "query": "MATCH (entrepreneur:`entrepreneur.entrepreneur`)\nRETURN count(DISTINCT entrepreneur.Company)",
        "db_id": "entrepreneur",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "Show the company of the tallest entrepreneur.",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nRETURN T1.Company\nORDER BY T2.Height DESC\nLIMIT 1",
        "db_id": "entrepreneur",
        "answers": [
            [
                "Elizabeth Galton Ltd"
            ]
        ]
    },
    {
        "question": "Which company was started by the entrepreneur with the greatest height?",
        "query": "MATCH (T1:`entrepreneur.entrepreneur`)-[]-(T2:`entrepreneur.people`)\nRETURN T1.Company\nORDER BY T2.Height DESC\nLIMIT 1",
        "db_id": "entrepreneur",
        "answers": [
            [
                "Elizabeth Galton Ltd"
            ]
        ]
    },
    {
        "question": "How many perpetrators are there?",
        "query": "MATCH (perpetrator:`perpetrator.perpetrator`)\nRETURN count(*)",
        "db_id": "perpetrator",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "List the number of people injured by perpetrators in ascending order.",
        "query": "MATCH (perpetrator:`perpetrator.perpetrator`)\nRETURN perpetrator.Injured\nORDER BY perpetrator.Injured ASC",
        "db_id": "perpetrator",
        "answers": [
            [
                0
            ],
            [
                3
            ],
            [
                16
            ],
            [
                37
            ],
            [
                80
            ]
        ]
    },
    {
        "question": "What is the average number of people injured by all perpetrators?",
        "query": "MATCH (perpetrator:`perpetrator.perpetrator`)\nRETURN avg(perpetrator.Injured)",
        "db_id": "perpetrator",
        "answers": [
            [
                27.2
            ]
        ]
    },
    {
        "question": "What is the location of the perpetrator with the largest kills.",
        "query": "MATCH (perpetrator:`perpetrator.perpetrator`)\nRETURN perpetrator.Location\nORDER BY perpetrator.Killed DESC\nLIMIT 1",
        "db_id": "perpetrator",
        "answers": [
            [
                "Uiryeong"
            ]
        ]
    },
    {
        "question": "What are the names of people in ascending order of height?",
        "query": "MATCH (people:`perpetrator.people`)\nRETURN people.Name\nORDER BY people.Height ASC",
        "db_id": "perpetrator",
        "answers": [
            [
                "Jim Krivacs"
            ],
            [
                "John Moore"
            ],
            [
                "Brent Boyd"
            ],
            [
                "Ron Baxter"
            ],
            [
                "Ovie Dotson"
            ],
            [
                "John Danks"
            ],
            [
                "Henry Johnson"
            ],
            [
                "Tyrone Brayan"
            ],
            [
                "Gary Goodner"
            ],
            [
                "Rob Cunningham"
            ],
            [
                "Mike Murphy"
            ]
        ]
    },
    {
        "question": "What are the names of perpetrators?",
        "query": "MATCH (T1:`perpetrator.people`)-[]-(T2:`perpetrator.perpetrator`)\nRETURN T1.Name",
        "db_id": "perpetrator",
        "answers": [
            [
                "Ron Baxter"
            ],
            [
                "Tyrone Brayan"
            ],
            [
                "Rob Cunningham"
            ],
            [
                "Ovie Dotson"
            ],
            [
                "Henry Johnson"
            ]
        ]
    },
    {
        "question": "What are the names of perpetrators whose country is not \"China\"?",
        "query": "MATCH (T1:`perpetrator.people`)-[]-(T2:`perpetrator.perpetrator`)\nWHERE T2.Country <> 'China'\nRETURN T1.Name",
        "db_id": "perpetrator",
        "answers": [
            [
                "Ron Baxter"
            ],
            [
                "Rob Cunningham"
            ],
            [
                "Henry Johnson"
            ]
        ]
    },
    {
        "question": "What is the name of the perpetrator with the biggest weight.",
        "query": "MATCH (T1:`perpetrator.people`)-[]-(T2:`perpetrator.perpetrator`)\nRETURN T1.Name\nORDER BY T1.Weight DESC\nLIMIT 1",
        "db_id": "perpetrator",
        "answers": [
            [
                "Tyrone Brayan"
            ]
        ]
    },
    {
        "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?",
        "query": "MATCH (T1:`perpetrator.people`)-[]-(T2:`perpetrator.perpetrator`)\nWHERE T2.Country = 'China' OR T2.Country = 'Japan'\nRETURN T1.Name",
        "db_id": "perpetrator",
        "answers": [
            [
                "Tyrone Brayan"
            ],
            [
                "Rob Cunningham"
            ],
            [
                "Ovie Dotson"
            ]
        ]
    },
    {
        "question": "What are the heights of perpetrators in descending order of the number of people they injured?",
        "query": "MATCH (T1:`perpetrator.people`)-[]-(T2:`perpetrator.perpetrator`)\nRETURN T1.Height\nORDER BY T2.Injured DESC",
        "db_id": "perpetrator",
        "answers": [
            [
                6.5
            ],
            [
                6.4
            ],
            [
                6.7
            ],
            [
                6.8
            ],
            [
                6.6
            ]
        ]
    },
    {
        "question": "What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.",
        "query": "MATCH (perpetrator:`perpetrator.perpetrator`)\nWITH perpetrator.Country AS Country, count(perpetrator.Country) AS count\nRETURN Country,count",
        "db_id": "perpetrator",
        "answers": [
            [
                "South Korea",
                1
            ],
            [
                "China",
                2
            ],
            [
                "Japan",
                1
            ],
            [
                "India",
                1
            ]
        ]
    },
    {
        "question": "What is the country that has the most perpetrators?",
        "query": "MATCH (perpetrator:`perpetrator.perpetrator`)\nWITH perpetrator.Country AS Country, count(perpetrator.Country) AS count\nRETURN Country,count\nORDER BY count DESC\nLIMIT 1",
        "db_id": "perpetrator",
        "answers": [
            [
                "China",
                2
            ]
        ]
    },
    {
        "question": "What are the countries that have at least two perpetrators?",
        "query": "MATCH (perpetrator:`perpetrator.perpetrator`)\nWITH perpetrator.Country AS Country, count(*) AS count\nWHERE count  >= 2\nRETURN Country,count",
        "db_id": "perpetrator",
        "answers": [
            [
                "China",
                2
            ]
        ]
    },
    {
        "question": "List the names of perpetrators in descending order of the year.",
        "query": "MATCH (T1:`perpetrator.people`)-[]-(T2:`perpetrator.perpetrator`)\nRETURN T1.Name\nORDER BY T2.Year DESC",
        "db_id": "perpetrator",
        "answers": [
            [
                "Tyrone Brayan"
            ],
            [
                "Ovie Dotson"
            ],
            [
                "Ron Baxter"
            ],
            [
                "Henry Johnson"
            ],
            [
                "Rob Cunningham"
            ]
        ]
    },
    {
        "question": "List the names of people that are not perpetrators.",
        "query": "MATCH (people:`perpetrator.people`)\nWHERE NOT (people:`perpetrator.people`)-[]-(:`perpetrator.perpetrator`)\nRETURN people.Name",
        "db_id": "perpetrator",
        "answers": [
            [
                "Brent Boyd"
            ],
            [
                "John Danks"
            ],
            [
                "Gary Goodner"
            ],
            [
                "Jim Krivacs"
            ],
            [
                "John Moore"
            ],
            [
                "Mike Murphy"
            ]
        ]
    },
    {
        "question": "How many distinct locations of perpetrators are there?",
        "query": "MATCH (perpetrator:`perpetrator.perpetrator`)\nRETURN count(DISTINCT perpetrator.Location)",
        "db_id": "perpetrator",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Show the date of the tallest perpetrator.",
        "query": "MATCH (T1:`perpetrator.people`)-[]-(T2:`perpetrator.perpetrator`)\nRETURN T2.Date\nORDER BY T1.Height DESC\nLIMIT 1",
        "db_id": "perpetrator",
        "answers": [
            [
                "05.21 May 21"
            ]
        ]
    },
    {
        "question": "In which year did the most recent crime happen?",
        "query": "MATCH (perpetrator:`perpetrator.perpetrator`)\nRETURN max(perpetrator.Year)",
        "db_id": "perpetrator",
        "answers": [
            [
                1995.0
            ]
        ]
    },
    {
        "question": "Report the name of all campuses in Los Angeles county.",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.County = 'Los Angeles'\nRETURN campuses.Campus",
        "db_id": "csu_1",
        "answers": [
            [
                "California State University-Dominguez Hills"
            ],
            [
                "Long Beach State University"
            ],
            [
                "California State University-Los Angeles"
            ],
            [
                "California State University-Northridge"
            ],
            [
                "California State Polytechnic University-Pomona"
            ]
        ]
    },
    {
        "question": "What campuses are located in the county of Los Angeles?",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.County = 'Los Angeles'\nRETURN campuses.Campus",
        "db_id": "csu_1",
        "answers": [
            [
                "California State University-Dominguez Hills"
            ],
            [
                "Long Beach State University"
            ],
            [
                "California State University-Los Angeles"
            ],
            [
                "California State University-Northridge"
            ],
            [
                "California State Polytechnic University-Pomona"
            ]
        ]
    },
    {
        "question": "What are the names of all campuses located at Chico?",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.Location = 'Chico'\nRETURN campuses.Campus",
        "db_id": "csu_1",
        "answers": [
            [
                "California State University-Chico"
            ]
        ]
    },
    {
        "question": "What campuses are located in Chico?",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.Location = 'Chico'\nRETURN campuses.Campus",
        "db_id": "csu_1",
        "answers": [
            [
                "California State University-Chico"
            ]
        ]
    },
    {
        "question": "Find all the campuses opened in 1958.",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.Year = 1958\nRETURN campuses.Campus",
        "db_id": "csu_1",
        "answers": [
            [
                "California State University-Northridge"
            ]
        ]
    },
    {
        "question": "What are the campuses that opened in 1958?",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.Year = 1958\nRETURN campuses.Campus",
        "db_id": "csu_1",
        "answers": [
            [
                "California State University-Northridge"
            ]
        ]
    },
    {
        "question": "Which campus was opened between 1935 and 1939?",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.Year >= 1935 AND campuses.Year <= 1939\nRETURN campuses.Campus",
        "db_id": "csu_1",
        "answers": [
            [
                "California State Polytechnic University-Pomona"
            ]
        ]
    },
    {
        "question": "What campuses opened between 1935 and 1939?",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.Year >= 1935 AND campuses.Year <= 1939\nRETURN campuses.Campus",
        "db_id": "csu_1",
        "answers": [
            [
                "California State Polytechnic University-Pomona"
            ]
        ]
    },
    {
        "question": "Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.Location = 'Northridge' AND campuses.County = 'Los Angeles'\nRETURN campuses.Campus  AS campus \nUNION\nMATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.Location = 'San Francisco' AND campuses.County = 'San Francisco'\nRETURN campuses.Campus  AS campus",
        "db_id": "csu_1",
        "answers": [
            [
                "California State University-Northridge"
            ],
            [
                "San Francisco State University"
            ]
        ]
    },
    {
        "question": "What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.Location = 'Northridge' AND campuses.County = 'Los Angeles'\nRETURN campuses.Campus  AS campus \nUNION\nMATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.Location = 'San Francisco' AND campuses.County = 'San Francisco'\nRETURN campuses.Campus  AS campus",
        "db_id": "csu_1",
        "answers": [
            [
                "California State University-Northridge"
            ],
            [
                "San Francisco State University"
            ]
        ]
    },
    {
        "question": "Which university is in Los Angeles county and opened after 1950?",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.County = 'Los Angeles' AND campuses.Year > 1950\nRETURN campuses.Campus",
        "db_id": "csu_1",
        "answers": [
            [
                "California State University-Dominguez Hills"
            ],
            [
                "California State University-Northridge"
            ]
        ]
    },
    {
        "question": "What campuses are located in Los Angeles county and opened after 1950?",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.County = 'Los Angeles' AND campuses.Year > 1950\nRETURN campuses.Campus",
        "db_id": "csu_1",
        "answers": [
            [
                "California State University-Dominguez Hills"
            ],
            [
                "California State University-Northridge"
            ]
        ]
    },
    {
        "question": "Which campus has the most faculties in year 2003?",
        "query": "MATCH (T1:`csu_1.Campuses`)-[]-(T2:`csu_1.faculty`)\nWHERE T2.Year = 2003\nRETURN T1.Campus\nORDER BY T2.Faculty DESC\nLIMIT 1",
        "db_id": "csu_1",
        "answers": [
            [
                "San Diego State University"
            ]
        ]
    },
    {
        "question": "What campus has the most faculties in 2003?",
        "query": "MATCH (T1:`csu_1.Campuses`)-[]-(T2:`csu_1.faculty`)\nWHERE T2.Year = 2003\nRETURN T1.Campus\nORDER BY T2.Faculty DESC\nLIMIT 1",
        "db_id": "csu_1",
        "answers": [
            [
                "San Diego State University"
            ]
        ]
    },
    {
        "question": "What is the average fee on a CSU campus in 2005?",
        "query": "MATCH (csu_fees:`csu_1.csu_fees`)\nWHERE csu_fees.Year = 2005\nRETURN avg(csu_fees.CampusFee)",
        "db_id": "csu_1",
        "answers": [
            [
                null
            ]
        ]
    },
    {
        "question": "What is the average fee for a CSU campus in the year of 2005?",
        "query": "MATCH (csu_fees:`csu_1.csu_fees`)\nWHERE csu_fees.Year = 2005\nRETURN avg(csu_fees.CampusFee)",
        "db_id": "csu_1",
        "answers": [
            [
                null
            ]
        ]
    },
    {
        "question": "How many campuses are there in Los Angeles county?",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.County = 'Los Angeles'\nRETURN count(*)",
        "db_id": "csu_1",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "How many campuses exist are in the county of LA?",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.County = 'Los Angeles'\nRETURN count(*)",
        "db_id": "csu_1",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "List the campuses in Los Angeles county.",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.County = 'Los Angeles'\nRETURN campuses.Campus",
        "db_id": "csu_1",
        "answers": [
            [
                "California State University-Dominguez Hills"
            ],
            [
                "Long Beach State University"
            ],
            [
                "California State University-Los Angeles"
            ],
            [
                "California State University-Northridge"
            ],
            [
                "California State Polytechnic University-Pomona"
            ]
        ]
    },
    {
        "question": "What campuses are in Los Angeles county?",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nWHERE campuses.County = 'Los Angeles'\nRETURN campuses.Campus",
        "db_id": "csu_1",
        "answers": [
            [
                "California State University-Dominguez Hills"
            ],
            [
                "Long Beach State University"
            ],
            [
                "California State University-Los Angeles"
            ],
            [
                "California State University-Northridge"
            ],
            [
                "California State Polytechnic University-Pomona"
            ]
        ]
    },
    {
        "question": "What is the number of faculty lines in campus \"Long Beach State University\" in 2002?",
        "query": "MATCH (T1:`csu_1.faculty`)-[]-(T2:`csu_1.Campuses`)\nWHERE T1.Year = 2002 AND T2.Campus = 'Long Beach State University'\nRETURN T1.Faculty",
        "db_id": "csu_1",
        "answers": [
            [
                1429.0
            ]
        ]
    },
    {
        "question": "What is the number of faculty at Long Beach State University in 2002?",
        "query": "MATCH (T1:`csu_1.faculty`)-[]-(T2:`csu_1.Campuses`)\nWHERE T1.Year = 2002 AND T2.Campus = 'Long Beach State University'\nRETURN T1.Faculty",
        "db_id": "csu_1",
        "answers": [
            [
                1429.0
            ]
        ]
    },
    {
        "question": "How many faculty lines are there in \"San Francisco State University\" in year 2004?",
        "query": "MATCH (T1:`csu_1.faculty`)-[]-(T2:`csu_1.Campuses`)\nWHERE T1.Year = 2004 AND T2.Campus = 'San Francisco State University'\nRETURN T1.Faculty",
        "db_id": "csu_1",
        "answers": [
            [
                1083.3
            ]
        ]
    },
    {
        "question": "How many faculty lines are there at San Francisco State University in 2004?",
        "query": "MATCH (T1:`csu_1.faculty`)-[]-(T2:`csu_1.Campuses`)\nWHERE T1.Year = 2004 AND T2.Campus = 'San Francisco State University'\nRETURN T1.Faculty",
        "db_id": "csu_1",
        "answers": [
            [
                1083.3
            ]
        ]
    },
    {
        "question": "How many CSU campuses are there?",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nRETURN count(*)",
        "db_id": "csu_1",
        "answers": [
            [
                23
            ]
        ]
    },
    {
        "question": "What is the total number of campuses?",
        "query": "MATCH (campuses:`csu_1.Campuses`)\nRETURN count(*)",
        "db_id": "csu_1",
        "answers": [
            [
                23
            ]
        ]
    },
    {
        "question": "How many candidates are there?",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nRETURN count(*)",
        "db_id": "candidate_poll",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "Count the number of candidates.",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nRETURN count(*)",
        "db_id": "candidate_poll",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "Which poll resource provided the most number of candidate information?",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nWITH candidate.Poll_Source AS Poll_Source, count(candidate.Poll_Source) AS count\nRETURN Poll_Source\nORDER BY count DESC\nLIMIT 1",
        "db_id": "candidate_poll",
        "answers": [
            [
                "Newsweek Poll"
            ]
        ]
    },
    {
        "question": "Return the poll resource associated with the most candidates.",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nWITH candidate.Poll_Source AS Poll_Source, count(candidate.Poll_Source) AS count\nRETURN Poll_Source\nORDER BY count DESC\nLIMIT 1",
        "db_id": "candidate_poll",
        "answers": [
            [
                "Newsweek Poll"
            ]
        ]
    },
    {
        "question": "what are the top 3 highest support rates?",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nRETURN candidate.Support_rate\nORDER BY candidate.Support_rate DESC\nLIMIT 3",
        "db_id": "candidate_poll",
        "answers": [
            [
                0.33
            ],
            [
                0.25
            ],
            [
                0.24
            ]
        ]
    },
    {
        "question": "Return the top 3 greatest support rates.",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nRETURN candidate.Support_rate\nORDER BY candidate.Support_rate DESC\nLIMIT 3",
        "db_id": "candidate_poll",
        "answers": [
            [
                0.33
            ],
            [
                0.25
            ],
            [
                0.24
            ]
        ]
    },
    {
        "question": "Find the id of the candidate who got the lowest oppose rate.",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nRETURN candidate.Candidate_ID\nORDER BY candidate.Oppose_rate\nLIMIT 1",
        "db_id": "candidate_poll",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "What is the id of the candidate with the lowest oppose rate?",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nRETURN candidate.Candidate_ID\nORDER BY candidate.Oppose_rate\nLIMIT 1",
        "db_id": "candidate_poll",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nRETURN candidate.Support_rate,candidate.Consider_rate,candidate.Oppose_rate\nORDER BY candidate.Unsure_rate",
        "db_id": "candidate_poll",
        "answers": [
            [
                0.25,
                0.3,
                0.43
            ],
            [
                0.33,
                0.2,
                0.45
            ],
            [
                0.24,
                0.27,
                0.43
            ],
            [
                0.18,
                0.34,
                0.44
            ],
            [
                0.24,
                0.3,
                0.32
            ],
            [
                0.17,
                0.42,
                0.32
            ]
        ]
    },
    {
        "question": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nRETURN candidate.Support_rate,candidate.Consider_rate,candidate.Oppose_rate\nORDER BY candidate.Unsure_rate",
        "db_id": "candidate_poll",
        "answers": [
            [
                0.25,
                0.3,
                0.43
            ],
            [
                0.33,
                0.2,
                0.45
            ],
            [
                0.24,
                0.27,
                0.43
            ],
            [
                0.18,
                0.34,
                0.44
            ],
            [
                0.24,
                0.3,
                0.32
            ],
            [
                0.17,
                0.42,
                0.32
            ]
        ]
    },
    {
        "question": "which poll source does the highest oppose rate come from?",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nRETURN candidate.Poll_Source\nORDER BY candidate.Oppose_rate DESC\nLIMIT 1",
        "db_id": "candidate_poll",
        "answers": [
            [
                "Newsweek Poll"
            ]
        ]
    },
    {
        "question": "Return the poll source corresponding to the candidate who has the oppose rate.",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nRETURN candidate.Poll_Source\nORDER BY candidate.Oppose_rate DESC\nLIMIT 1",
        "db_id": "candidate_poll",
        "answers": [
            [
                "Newsweek Poll"
            ]
        ]
    },
    {
        "question": "List all people names in the order of their date of birth from old to young.",
        "query": "MATCH (people:`candidate_poll.people`)\nRETURN people.Name\nORDER BY people.Date_of_Birth",
        "db_id": "candidate_poll",
        "answers": [
            [
                "Vincent Montm\u00e9at"
            ],
            [
                "St\u00e9phane Antiga"
            ],
            [
                "Laurent Capet"
            ],
            [
                "Hubert Henno"
            ],
            [
                "Frantz Granvorka"
            ],
            [
                "Dominique Daquin"
            ],
            [
                "Lo\u00efc De Kergret"
            ],
            [
                "Philippe Bar\u00e7a-Cysique"
            ],
            [
                "Guillaume Samica"
            ]
        ]
    },
    {
        "question": "What are the names of all people, ordered by their date of birth?",
        "query": "MATCH (people:`candidate_poll.people`)\nRETURN people.Name\nORDER BY people.Date_of_Birth",
        "db_id": "candidate_poll",
        "answers": [
            [
                "Vincent Montm\u00e9at"
            ],
            [
                "St\u00e9phane Antiga"
            ],
            [
                "Laurent Capet"
            ],
            [
                "Hubert Henno"
            ],
            [
                "Frantz Granvorka"
            ],
            [
                "Dominique Daquin"
            ],
            [
                "Lo\u00efc De Kergret"
            ],
            [
                "Philippe Bar\u00e7a-Cysique"
            ],
            [
                "Guillaume Samica"
            ]
        ]
    },
    {
        "question": "Find the average height and weight for all males (sex is M).",
        "query": "MATCH (people:`candidate_poll.people`)\nWHERE people.Sex = 'M'\nRETURN avg(people.Height),avg(people.Weight)",
        "db_id": "candidate_poll",
        "answers": [
            [
                195.14285714285714,
                86.71428571428571
            ]
        ]
    },
    {
        "question": "What are the average height and weight across males (sex is M)?",
        "query": "MATCH (people:`candidate_poll.people`)\nWHERE people.Sex = 'M'\nRETURN avg(people.Height),avg(people.Weight)",
        "db_id": "candidate_poll",
        "answers": [
            [
                195.14285714285714,
                86.71428571428571
            ]
        ]
    },
    {
        "question": "find the names of people who are taller than 200 or lower than 190.",
        "query": "MATCH (people:`candidate_poll.people`)\nWHERE people.Height > 200 OR people.Height < 190\nRETURN people.Name",
        "db_id": "candidate_poll",
        "answers": [
            [
                "Hubert Henno"
            ],
            [
                "Laurent Capet"
            ]
        ]
    },
    {
        "question": "What are the names of people who have a height greater than 200 or less than 190?",
        "query": "MATCH (people:`candidate_poll.people`)\nWHERE people.Height > 200 OR people.Height < 190\nRETURN people.Name",
        "db_id": "candidate_poll",
        "answers": [
            [
                "Hubert Henno"
            ],
            [
                "Laurent Capet"
            ]
        ]
    },
    {
        "question": "what are the names of people who did not participate in the candidate election.",
        "query": "MATCH (people:`candidate_poll.people`)\nWHERE NOT (people:`candidate_poll.people`)-[]-(:`candidate_poll.candidate`)\nRETURN people.Name",
        "db_id": "candidate_poll",
        "answers": [
            [
                "Dominique Daquin"
            ],
            [
                "Frantz Granvorka"
            ],
            [
                "Philippe Bar\u00e7a-Cysique"
            ]
        ]
    },
    {
        "question": "Give the names of people who did not participate in the candidate election.",
        "query": "MATCH (people:`candidate_poll.people`)\nWHERE NOT (people:`candidate_poll.people`)-[]-(:`candidate_poll.candidate`)\nRETURN people.Name",
        "db_id": "candidate_poll",
        "answers": [
            [
                "Dominique Daquin"
            ],
            [
                "Frantz Granvorka"
            ],
            [
                "Philippe Bar\u00e7a-Cysique"
            ]
        ]
    },
    {
        "question": "how many people are there whose weight is higher than 85 for each gender?",
        "query": "MATCH (people:`candidate_poll.people`)\nWHERE people.Weight > 85\nWITH people.Sex AS Sex, count(people.Sex) AS count\nRETURN count,Sex",
        "db_id": "candidate_poll",
        "answers": [
            [
                2,
                "F"
            ],
            [
                4,
                "M"
            ]
        ]
    },
    {
        "question": "Count the number of people of each sex who have a weight higher than 85.",
        "query": "MATCH (people:`candidate_poll.people`)\nWHERE people.Weight > 85\nWITH people.Sex AS Sex, count(people.Sex) AS count\nRETURN count,Sex",
        "db_id": "candidate_poll",
        "answers": [
            [
                2,
                "F"
            ],
            [
                4,
                "M"
            ]
        ]
    },
    {
        "question": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nRETURN max(candidate.Support_rate),min(candidate.Consider_rate),min(candidate.Oppose_rate)",
        "db_id": "candidate_poll",
        "answers": [
            [
                0.33,
                0.2,
                0.32
            ]
        ]
    },
    {
        "question": "Return the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates?",
        "query": "MATCH (candidate:`candidate_poll.candidate`)\nRETURN max(candidate.Support_rate),min(candidate.Consider_rate),min(candidate.Oppose_rate)",
        "db_id": "candidate_poll",
        "answers": [
            [
                0.33,
                0.2,
                0.32
            ]
        ]
    },
    {
        "question": "Find the titles of all movies directed by steven spielberg.",
        "query": "MATCH (movie:`movie_1.Movie`)\nWHERE movie.director = 'Steven Spielberg'\nRETURN movie.title",
        "db_id": "movie_1",
        "answers": [
            [
                "E.T."
            ],
            [
                "Raiders of the Lost Ark"
            ]
        ]
    },
    {
        "question": "What are the names of all movies directed by Steven Spielberg?",
        "query": "MATCH (movie:`movie_1.Movie`)\nWHERE movie.director = 'Steven Spielberg'\nRETURN movie.title",
        "db_id": "movie_1",
        "answers": [
            [
                "E.T."
            ],
            [
                "Raiders of the Lost Ark"
            ]
        ]
    },
    {
        "question": "What is the name of the movie produced after 2000 and directed by James Cameron?",
        "query": "MATCH (movie:`movie_1.Movie`)\nWHERE movie.director = 'James Cameron' AND movie.year > 2000\nRETURN movie.title",
        "db_id": "movie_1",
        "answers": [
            [
                "Avatar"
            ]
        ]
    },
    {
        "question": "What are the titles of all movies that James Cameron directed after 2000?",
        "query": "MATCH (movie:`movie_1.Movie`)\nWHERE movie.director = 'James Cameron' AND movie.year > 2000\nRETURN movie.title",
        "db_id": "movie_1",
        "answers": [
            [
                "Avatar"
            ]
        ]
    },
    {
        "question": "How many movies were made before 2000?",
        "query": "MATCH (movie:`movie_1.Movie`)\nWHERE movie.year < 2000\nRETURN count(*)",
        "db_id": "movie_1",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "How many movies were made before 2000?",
        "query": "MATCH (movie:`movie_1.Movie`)\nWHERE movie.year < 2000\nRETURN count(*)",
        "db_id": "movie_1",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "Who is the director of movie Avatar?",
        "query": "MATCH (movie:`movie_1.Movie`)\nWHERE movie.title = 'Avatar'\nRETURN movie.director",
        "db_id": "movie_1",
        "answers": [
            [
                "James Cameron"
            ]
        ]
    },
    {
        "question": "Who directed Avatar?",
        "query": "MATCH (movie:`movie_1.Movie`)\nWHERE movie.title = 'Avatar'\nRETURN movie.director",
        "db_id": "movie_1",
        "answers": [
            [
                "James Cameron"
            ]
        ]
    },
    {
        "question": "How many reviewers listed?",
        "query": "MATCH (reviewer:`movie_1.Reviewer`)\nRETURN count(*)",
        "db_id": "movie_1",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "How many reviewers are there?",
        "query": "MATCH (reviewer:`movie_1.Reviewer`)\nRETURN count(*)",
        "db_id": "movie_1",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "What is the reviewer id of Daniel Lewis?",
        "query": "MATCH (reviewer:`movie_1.Reviewer`)\nWHERE reviewer.name = 'Daniel Lewis'\nRETURN reviewer.rID",
        "db_id": "movie_1",
        "answers": [
            [
                202
            ]
        ]
    },
    {
        "question": "What is the id of the reviewer named Daniel Lewis?",
        "query": "MATCH (reviewer:`movie_1.Reviewer`)\nWHERE reviewer.name = 'Daniel Lewis'\nRETURN reviewer.rID",
        "db_id": "movie_1",
        "answers": [
            [
                202
            ]
        ]
    },
    {
        "question": "What are the names of the directors who made exactly one movie excluding director NULL?",
        "query": "MATCH (movie:`movie_1.Movie`)\nWHERE exists(movie.director)\nWITH count(*) AS count, movie.director AS director\nWHERE count  = 1\nRETURN director",
        "db_id": "movie_1",
        "answers": [
            [
                "Victor Fleming"
            ],
            [
                "George Lucas"
            ],
            [
                "Robert Wise"
            ]
        ]
    },
    {
        "question": "What are the names of all directors who have made one movie except for the director named NULL?",
        "query": "MATCH (movie:`movie_1.Movie`)\nWHERE exists(movie.director)\nWITH count(*) AS count, movie.director AS director\nWHERE count  = 1\nRETURN director",
        "db_id": "movie_1",
        "answers": [
            [
                "Victor Fleming"
            ],
            [
                "George Lucas"
            ],
            [
                "Robert Wise"
            ]
        ]
    },
    {
        "question": "What are names of the movies that are either made before 1980 or directed by James Cameron?",
        "query": "MATCH (movie:`movie_1.Movie`)\nWHERE movie.director = 'James Cameron' OR movie.year < 1980\nRETURN movie.title",
        "db_id": "movie_1",
        "answers": [
            [
                "Gone with the Wind"
            ],
            [
                "Star Wars"
            ],
            [
                "The Sound of Music"
            ],
            [
                "Titanic"
            ],
            [
                "Snow White"
            ],
            [
                "Avatar"
            ]
        ]
    },
    {
        "question": "What are the names of all movies made before 1980 or had James Cameron as the director?",
        "query": "MATCH (movie:`movie_1.Movie`)\nWHERE movie.director = 'James Cameron' OR movie.year < 1980\nRETURN movie.title",
        "db_id": "movie_1",
        "answers": [
            [
                "Gone with the Wind"
            ],
            [
                "Star Wars"
            ],
            [
                "The Sound of Music"
            ],
            [
                "Titanic"
            ],
            [
                "Snow White"
            ],
            [
                "Avatar"
            ]
        ]
    },
    {
        "question": "How many counties are there?",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN count(*)",
        "db_id": "county_public_safety",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "Count the number of countries.",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN count(*)",
        "db_id": "county_public_safety",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "List the names of counties in descending order of population.",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN county_public_safety.Name\nORDER BY county_public_safety.Population DESC",
        "db_id": "county_public_safety",
        "answers": [
            [
                "Burnaby"
            ],
            [
                "Abbotsford"
            ],
            [
                "Chilliwack"
            ],
            [
                "Campbell River"
            ],
            [
                "Central Saanich"
            ],
            [
                "Castlegar"
            ]
        ]
    },
    {
        "question": "What are the names of the counties of public safety, ordered by population descending?",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN county_public_safety.Name\nORDER BY county_public_safety.Population DESC",
        "db_id": "county_public_safety",
        "answers": [
            [
                "Burnaby"
            ],
            [
                "Abbotsford"
            ],
            [
                "Chilliwack"
            ],
            [
                "Campbell River"
            ],
            [
                "Central Saanich"
            ],
            [
                "Castlegar"
            ]
        ]
    },
    {
        "question": "List the distinct police forces of counties whose location is not on east side.",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nWHERE county_public_safety.Location <> 'East'\nRETURN DISTINCT county_public_safety.Police_force",
        "db_id": "county_public_safety",
        "answers": [
            [
                "RCMP"
            ]
        ]
    },
    {
        "question": "What are the different police forces of counties that are not located in the East?",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nWHERE county_public_safety.Location <> 'East'\nRETURN DISTINCT county_public_safety.Police_force",
        "db_id": "county_public_safety",
        "answers": [
            [
                "RCMP"
            ]
        ]
    },
    {
        "question": "What are the minimum and maximum crime rate of counties?",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN min(county_public_safety.Crime_rate),max(county_public_safety.Crime_rate)",
        "db_id": "county_public_safety",
        "answers": [
            [
                49.0,
                178.0
            ]
        ]
    },
    {
        "question": "Return the minimum and maximum crime rates across all counties.",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN min(county_public_safety.Crime_rate),max(county_public_safety.Crime_rate)",
        "db_id": "county_public_safety",
        "answers": [
            [
                49.0,
                178.0
            ]
        ]
    },
    {
        "question": "Show the crime rates of counties in ascending order of number of police officers.",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN county_public_safety.Crime_rate\nORDER BY county_public_safety.Police_officers ASC",
        "db_id": "county_public_safety",
        "answers": [
            [
                150.0
            ],
            [
                49.0
            ],
            [
                178.0
            ],
            [
                174.0
            ],
            [
                118.0
            ],
            [
                123.0
            ]
        ]
    },
    {
        "question": "What are the crime rates of counties sorted by number of offices ascending?",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN county_public_safety.Crime_rate\nORDER BY county_public_safety.Police_officers ASC",
        "db_id": "county_public_safety",
        "answers": [
            [
                150.0
            ],
            [
                49.0
            ],
            [
                178.0
            ],
            [
                174.0
            ],
            [
                118.0
            ],
            [
                123.0
            ]
        ]
    },
    {
        "question": "What are the names of cities in ascending alphabetical order?",
        "query": "MATCH (city:`county_public_safety.city`)\nRETURN city.Name\nORDER BY city.Name ASC",
        "db_id": "county_public_safety",
        "answers": [
            [
                "Adjuntas"
            ],
            [
                "Aguada"
            ],
            [
                "Aguadilla"
            ],
            [
                "Aguas Buenas"
            ],
            [
                "Aibonito"
            ],
            [
                "Arecibo"
            ],
            [
                "Arroyo"
            ],
            [
                "A\u00f1asco"
            ],
            [
                "Barceloneta"
            ],
            [
                "Barranquitas"
            ],
            [
                "Bayam\u00f3n"
            ],
            [
                "Cabo Rojo"
            ],
            [
                "Caguas"
            ],
            [
                "Camuy"
            ],
            [
                "Can\u00f3vanas"
            ],
            [
                "Carolina"
            ],
            [
                "Cata\u00f1o"
            ]
        ]
    },
    {
        "question": "Return the names of cities, ordered alphabetically.",
        "query": "MATCH (city:`county_public_safety.city`)\nRETURN city.Name\nORDER BY city.Name ASC",
        "db_id": "county_public_safety",
        "answers": [
            [
                "Adjuntas"
            ],
            [
                "Aguada"
            ],
            [
                "Aguadilla"
            ],
            [
                "Aguas Buenas"
            ],
            [
                "Aibonito"
            ],
            [
                "Arecibo"
            ],
            [
                "Arroyo"
            ],
            [
                "A\u00f1asco"
            ],
            [
                "Barceloneta"
            ],
            [
                "Barranquitas"
            ],
            [
                "Bayam\u00f3n"
            ],
            [
                "Cabo Rojo"
            ],
            [
                "Caguas"
            ],
            [
                "Camuy"
            ],
            [
                "Can\u00f3vanas"
            ],
            [
                "Carolina"
            ],
            [
                "Cata\u00f1o"
            ]
        ]
    },
    {
        "question": "What are the percentage of hispanics in cities with the black percentage higher than 10?",
        "query": "MATCH (city:`county_public_safety.city`)\nWHERE city.Black > 10\nRETURN city.Hispanic",
        "db_id": "county_public_safety",
        "answers": [
            [
                99.5
            ],
            [
                99.1
            ],
            [
                99.0
            ],
            [
                99.1
            ],
            [
                99.2
            ],
            [
                98.6
            ],
            [
                99.0
            ]
        ]
    },
    {
        "question": "Return the hispanic percentage for cities in which the black percentage is greater than 10.",
        "query": "MATCH (city:`county_public_safety.city`)\nWHERE city.Black > 10\nRETURN city.Hispanic",
        "db_id": "county_public_safety",
        "answers": [
            [
                99.5
            ],
            [
                99.1
            ],
            [
                99.0
            ],
            [
                99.1
            ],
            [
                99.2
            ],
            [
                98.6
            ],
            [
                99.0
            ]
        ]
    },
    {
        "question": "List the name of the county with the largest population.",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN county_public_safety.Name\nORDER BY county_public_safety.Population DESC\nLIMIT 1",
        "db_id": "county_public_safety",
        "answers": [
            [
                "Burnaby"
            ]
        ]
    },
    {
        "question": "What is the name of the county with the greatest population?",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN county_public_safety.Name\nORDER BY county_public_safety.Population DESC\nLIMIT 1",
        "db_id": "county_public_safety",
        "answers": [
            [
                "Burnaby"
            ]
        ]
    },
    {
        "question": "List the names of the city with the top 5 white percentages.",
        "query": "MATCH (city:`county_public_safety.city`)\nRETURN city.Name\nORDER BY city.White DESC\nLIMIT 5",
        "db_id": "county_public_safety",
        "answers": [
            [
                "Adjuntas"
            ],
            [
                "Camuy"
            ],
            [
                "Aguada"
            ],
            [
                "Barranquitas"
            ],
            [
                "Arecibo"
            ]
        ]
    },
    {
        "question": "What are the names of the five cities with the greatest proportion of white people?",
        "query": "MATCH (city:`county_public_safety.city`)\nRETURN city.Name\nORDER BY city.White DESC\nLIMIT 5",
        "db_id": "county_public_safety",
        "answers": [
            [
                "Adjuntas"
            ],
            [
                "Camuy"
            ],
            [
                "Aguada"
            ],
            [
                "Barranquitas"
            ],
            [
                "Arecibo"
            ]
        ]
    },
    {
        "question": "Show names of cities and names of counties they are in.",
        "query": "MATCH (T1:`county_public_safety.city`)-[]-(T2:`county_public_safety.county_public_safety`)\nRETURN T1.Name,T2.Name",
        "db_id": "county_public_safety",
        "answers": [
            [
                "Aguadilla",
                "Abbotsford"
            ],
            [
                "Aguada",
                "Abbotsford"
            ],
            [
                "Adjuntas",
                "Abbotsford"
            ],
            [
                "Aibonito",
                "Burnaby"
            ],
            [
                "Aguas Buenas",
                "Burnaby"
            ],
            [
                "Barceloneta",
                "Campbell River"
            ],
            [
                "Bayam\u00f3n",
                "Campbell River"
            ],
            [
                "Arecibo",
                "Campbell River"
            ],
            [
                "A\u00f1asco",
                "Campbell River"
            ],
            [
                "Barranquitas",
                "Campbell River"
            ],
            [
                "Arroyo",
                "Campbell River"
            ],
            [
                "Cabo Rojo",
                "Castlegar"
            ],
            [
                "Caguas",
                "Castlegar"
            ],
            [
                "Can\u00f3vanas",
                "Central Saanich"
            ],
            [
                "Camuy",
                "Central Saanich"
            ],
            [
                "Carolina",
                "Chilliwack"
            ],
            [
                "Cata\u00f1o",
                "Chilliwack"
            ]
        ]
    },
    {
        "question": "What are the names of cities, as well as the names of the counties they correspond to?",
        "query": "MATCH (T1:`county_public_safety.city`)-[]-(T2:`county_public_safety.county_public_safety`)\nRETURN T1.Name,T2.Name",
        "db_id": "county_public_safety",
        "answers": [
            [
                "Aguadilla",
                "Abbotsford"
            ],
            [
                "Aguada",
                "Abbotsford"
            ],
            [
                "Adjuntas",
                "Abbotsford"
            ],
            [
                "Aibonito",
                "Burnaby"
            ],
            [
                "Aguas Buenas",
                "Burnaby"
            ],
            [
                "Barceloneta",
                "Campbell River"
            ],
            [
                "Bayam\u00f3n",
                "Campbell River"
            ],
            [
                "Arecibo",
                "Campbell River"
            ],
            [
                "A\u00f1asco",
                "Campbell River"
            ],
            [
                "Barranquitas",
                "Campbell River"
            ],
            [
                "Arroyo",
                "Campbell River"
            ],
            [
                "Cabo Rojo",
                "Castlegar"
            ],
            [
                "Caguas",
                "Castlegar"
            ],
            [
                "Can\u00f3vanas",
                "Central Saanich"
            ],
            [
                "Camuy",
                "Central Saanich"
            ],
            [
                "Carolina",
                "Chilliwack"
            ],
            [
                "Cata\u00f1o",
                "Chilliwack"
            ]
        ]
    },
    {
        "question": "Show white percentages of cities and the crime rates of counties they are in.",
        "query": "MATCH (T1:`county_public_safety.city`)-[]-(T2:`county_public_safety.county_public_safety`)\nRETURN T1.White,T2.Crime_rate",
        "db_id": "county_public_safety",
        "answers": [
            [
                83.0,
                118.0
            ],
            [
                86.6,
                118.0
            ],
            [
                93.1,
                118.0
            ],
            [
                83.5,
                123.0
            ],
            [
                72.5,
                123.0
            ],
            [
                80.7,
                178.0
            ],
            [
                78.3,
                178.0
            ],
            [
                84.5,
                178.0
            ],
            [
                82.0,
                178.0
            ],
            [
                86.0,
                178.0
            ],
            [
                53.5,
                178.0
            ],
            [
                84.1,
                150.0
            ],
            [
                76.1,
                150.0
            ],
            [
                61.2,
                49.0
            ],
            [
                87.9,
                49.0
            ],
            [
                64.3,
                174.0
            ],
            [
                70.7,
                174.0
            ]
        ]
    },
    {
        "question": "What are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?",
        "query": "MATCH (T1:`county_public_safety.city`)-[]-(T2:`county_public_safety.county_public_safety`)\nRETURN T1.White,T2.Crime_rate",
        "db_id": "county_public_safety",
        "answers": [
            [
                83.0,
                118.0
            ],
            [
                86.6,
                118.0
            ],
            [
                93.1,
                118.0
            ],
            [
                83.5,
                123.0
            ],
            [
                72.5,
                123.0
            ],
            [
                80.7,
                178.0
            ],
            [
                78.3,
                178.0
            ],
            [
                84.5,
                178.0
            ],
            [
                82.0,
                178.0
            ],
            [
                86.0,
                178.0
            ],
            [
                53.5,
                178.0
            ],
            [
                84.1,
                150.0
            ],
            [
                76.1,
                150.0
            ],
            [
                61.2,
                49.0
            ],
            [
                87.9,
                49.0
            ],
            [
                64.3,
                174.0
            ],
            [
                70.7,
                174.0
            ]
        ]
    },
    {
        "question": "Show the crime rate of counties with a city having white percentage more than 90.",
        "query": "MATCH (T1:`county_public_safety.city`)-[]-(T2:`county_public_safety.county_public_safety`)\nWHERE T1.White > 90\nRETURN T2.Crime_rate",
        "db_id": "county_public_safety",
        "answers": [
            [
                118.0
            ]
        ]
    },
    {
        "question": "What are the crime rates of counties that contain cities that have white percentages of over 90?",
        "query": "MATCH (T1:`county_public_safety.city`)-[]-(T2:`county_public_safety.county_public_safety`)\nWHERE T1.White > 90\nRETURN T2.Crime_rate",
        "db_id": "county_public_safety",
        "answers": [
            [
                118.0
            ]
        ]
    },
    {
        "question": "Please show the police forces and the number of counties with each police force.",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nWITH county_public_safety.Police_force AS Police_force, count(county_public_safety.Police_force) AS count\nRETURN Police_force,count",
        "db_id": "county_public_safety",
        "answers": [
            [
                "Abbotsford Police Department",
                1
            ],
            [
                "RCMP",
                4
            ],
            [
                "Central Saanich Police",
                1
            ]
        ]
    },
    {
        "question": "How many counties correspond to each police force?",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nWITH county_public_safety.Police_force AS Police_force, count(county_public_safety.Police_force) AS count\nRETURN Police_force,count",
        "db_id": "county_public_safety",
        "answers": [
            [
                "Abbotsford Police Department",
                1
            ],
            [
                "RCMP",
                4
            ],
            [
                "Central Saanich Police",
                1
            ]
        ]
    },
    {
        "question": "What is the location shared by most counties?",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nWITH county_public_safety.Location AS Location, count(county_public_safety.Location) AS count\nRETURN Location\nORDER BY count DESC\nLIMIT 1",
        "db_id": "county_public_safety",
        "answers": [
            [
                "East"
            ]
        ]
    },
    {
        "question": "Which location has the most corresponding counties?",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nWITH county_public_safety.Location AS Location, count(county_public_safety.Location) AS count\nRETURN Location\nORDER BY count DESC\nLIMIT 1",
        "db_id": "county_public_safety",
        "answers": [
            [
                "East"
            ]
        ]
    },
    {
        "question": "Show the case burden of counties in descending order of population.",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN county_public_safety.Case_burden\nORDER BY county_public_safety.Population DESC",
        "db_id": "county_public_safety",
        "answers": [
            [
                100
            ],
            [
                81
            ],
            [
                140
            ],
            [
                137
            ],
            [
                39
            ],
            [
                107
            ]
        ]
    },
    {
        "question": "What are the case burdens of counties, ordered descending by population?",
        "query": "MATCH (county_public_safety:`county_public_safety.county_public_safety`)\nRETURN county_public_safety.Case_burden\nORDER BY county_public_safety.Population DESC",
        "db_id": "county_public_safety",
        "answers": [
            [
                100
            ],
            [
                81
            ],
            [
                140
            ],
            [
                137
            ],
            [
                39
            ],
            [
                107
            ]
        ]
    },
    {
        "question": "Find the names of all modern rooms with a base price below $160 and two beds.",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.basePrice < 160 AND rooms.beds = 2 AND rooms.decor = 'modern'\nRETURN rooms.roomName",
        "db_id": "inn_1",
        "answers": [
            [
                "Mendicant with cryptic"
            ]
        ]
    },
    {
        "question": "What are the names of modern rooms that have a base price lower than $160 and two beds.",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.basePrice < 160 AND rooms.beds = 2 AND rooms.decor = 'modern'\nRETURN rooms.roomName",
        "db_id": "inn_1",
        "answers": [
            [
                "Mendicant with cryptic"
            ]
        ]
    },
    {
        "question": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.basePrice > 160 AND rooms.maxOccupancy > 2\nRETURN rooms.roomName,rooms.RoomId",
        "db_id": "inn_1",
        "answers": [
            [
                "Abscond or bolster",
                "AOB"
            ],
            [
                "Convoke and sanguine",
                "CAS"
            ],
            [
                "Riddle to exculpate",
                "RTE"
            ],
            [
                "Frugal not apropos",
                "FNA"
            ]
        ]
    },
    {
        "question": "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.basePrice > 160 AND rooms.maxOccupancy > 2\nRETURN rooms.roomName,rooms.RoomId",
        "db_id": "inn_1",
        "answers": [
            [
                "Abscond or bolster",
                "AOB"
            ],
            [
                "Convoke and sanguine",
                "CAS"
            ],
            [
                "Riddle to exculpate",
                "RTE"
            ],
            [
                "Frugal not apropos",
                "FNA"
            ]
        ]
    },
    {
        "question": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.",
        "query": "MATCH (T1:`inn_1.Reservations`)-[]-(T2:`inn_1.Rooms`)\nWITH count(T1.Room) AS count, T2.roomName AS roomName\nRETURN roomName\nORDER BY count DESC\nLIMIT 1",
        "db_id": "inn_1",
        "answers": [
            [
                "Convoke and sanguine"
            ]
        ]
    },
    {
        "question": "Which room has the largest number of reservations?",
        "query": "MATCH (T1:`inn_1.Reservations`)-[]-(T2:`inn_1.Rooms`)\nWITH count(T1.Room) AS count, T2.roomName AS roomName\nRETURN roomName\nORDER BY count DESC\nLIMIT 1",
        "db_id": "inn_1",
        "answers": [
            [
                "Convoke and sanguine"
            ]
        ]
    },
    {
        "question": "How many kids stay in the rooms reserved by ROY SWEAZY?",
        "query": "MATCH (reservations:`inn_1.Reservations`)\nWHERE reservations.FirstName = 'ROY' AND reservations.LastName = 'SWEAZY'\nRETURN reservations.Kids",
        "db_id": "inn_1",
        "answers": [
            [
                1
            ],
            [
                1
            ]
        ]
    },
    {
        "question": "Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ.",
        "query": "MATCH (reservations:`inn_1.Reservations`)\nWHERE reservations.FirstName = 'ROY' AND reservations.LastName = 'SWEAZY'\nRETURN reservations.Kids",
        "db_id": "inn_1",
        "answers": [
            [
                1
            ],
            [
                1
            ]
        ]
    },
    {
        "question": "How many times does ROY SWEAZY has reserved a room.",
        "query": "MATCH (reservations:`inn_1.Reservations`)\nWHERE reservations.FirstName = 'ROY' AND reservations.LastName = 'SWEAZY'\nRETURN count(*)",
        "db_id": "inn_1",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "Find the number of times ROY SWEAZY has reserved a room.",
        "query": "MATCH (reservations:`inn_1.Reservations`)\nWHERE reservations.FirstName = 'ROY' AND reservations.LastName = 'SWEAZY'\nRETURN count(*)",
        "db_id": "inn_1",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "List the names and decor of rooms that have a king bed. Sort the list by their price.",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.bedType = 'King'\nRETURN rooms.roomName,rooms.decor\nORDER BY rooms.basePrice",
        "db_id": "inn_1",
        "answers": [
            [
                "Recluse and defiance",
                "modern"
            ],
            [
                "Interim but salutary",
                "traditional"
            ],
            [
                "Convoke and sanguine",
                "traditional"
            ],
            [
                "Frugal not apropos",
                "traditional"
            ]
        ]
    },
    {
        "question": "What are the names and decor of rooms with a king bed? Sort them by their price",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.bedType = 'King'\nRETURN rooms.roomName,rooms.decor\nORDER BY rooms.basePrice",
        "db_id": "inn_1",
        "answers": [
            [
                "Recluse and defiance",
                "modern"
            ],
            [
                "Interim but salutary",
                "traditional"
            ],
            [
                "Convoke and sanguine",
                "traditional"
            ],
            [
                "Frugal not apropos",
                "traditional"
            ]
        ]
    },
    {
        "question": "Which room has cheapest base price? List the room's name and the base price.",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.roomName,rooms.basePrice\nORDER BY rooms.basePrice ASC\nLIMIT 1",
        "db_id": "inn_1",
        "answers": [
            [
                "Thrift and accolade",
                75
            ]
        ]
    },
    {
        "question": "What are the room name and base price of the room with the lowest base price?",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.roomName,rooms.basePrice\nORDER BY rooms.basePrice ASC\nLIMIT 1",
        "db_id": "inn_1",
        "answers": [
            [
                "Thrift and accolade",
                75
            ]
        ]
    },
    {
        "question": "What is the decor of room Recluse and defiance?",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.roomName = 'Recluse and defiance'\nRETURN rooms.decor",
        "db_id": "inn_1",
        "answers": [
            [
                "modern"
            ]
        ]
    },
    {
        "question": "Return the decor of the room named \"Recluse and defiance\".",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.roomName = 'Recluse and defiance'\nRETURN rooms.decor",
        "db_id": "inn_1",
        "answers": [
            [
                "modern"
            ]
        ]
    },
    {
        "question": "List how many times the number of people in the room reached the maximum occupancy of the room. The number of people include adults and kids.",
        "query": "MATCH (T1:`inn_1.Reservations`)-[]-(T2:`inn_1.Rooms`)\nWHERE T2.maxOccupancy = T1.Adults + T1.Kids\nRETURN count(*)",
        "db_id": "inn_1",
        "answers": [
            [
                204
            ]
        ]
    },
    {
        "question": "How many times the number of adults and kids staying in a room reached the maximum capacity of the room?",
        "query": "MATCH (T1:`inn_1.Reservations`)-[]-(T2:`inn_1.Rooms`)\nWHERE T2.maxOccupancy = T1.Adults + T1.Kids\nRETURN count(*)",
        "db_id": "inn_1",
        "answers": [
            [
                204
            ]
        ]
    },
    {
        "question": "Find the first and last names of people who payed more than the rooms' base prices.",
        "query": "MATCH (T1:`inn_1.Reservations`)-[]-(T2:`inn_1.Rooms`)\nWHERE (T1.Rate - T2.basePrice) > 0\nRETURN T1.FirstName,T1.LastName",
        "db_id": "inn_1",
        "answers": [
            [
                "HERBERT",
                "FRANC"
            ],
            [
                "TEODORO",
                "MAURER"
            ],
            [
                "DARIUS",
                "HULETTE"
            ],
            [
                "ABBEY",
                "ALBERO"
            ],
            [
                "ERYN",
                "BAUGUESS"
            ],
            [
                "GLENNIS",
                "ROTHMAN"
            ],
            [
                "ALLEN",
                "GABBETT"
            ],
            [
                "OLYMPIA",
                "ALBROUGH"
            ],
            [
                "PORTER",
                "LELEUX"
            ],
            [
                "DIONNA",
                "MULE"
            ],
            [
                "LENA",
                "LEDOUX"
            ],
            [
                "CLINT",
                "BONIOL"
            ],
            [
                "KERRI",
                "MECHLING"
            ],
            [
                "NATHANAEL",
                "HARTFORD"
            ],
            [
                "JERROD",
                "WISWELL"
            ],
            [
                "NELL",
                "DEBARDELABEN"
            ],
            [
                "JEANMARIE",
                "LABAT"
            ],
            [
                "EUSEBIO",
                "WIDOWSKI"
            ],
            [
                "LANNY",
                "COSTON"
            ],
            [
                "ARTHUR",
                "MCNEELEY"
            ],
            [
                "LANDON",
                "SCARLES"
            ],
            [
                "ADAM",
                "COVERT"
            ],
            [
                "DENNY",
                "PERRINO"
            ],
            [
                "ELMIRA",
                "ATTEBURG"
            ],
            [
                "EFRAIN",
                "GISSLER"
            ],
            [
                "JESSIE",
                "JAHR"
            ],
            [
                "DAN",
                "DELGUIDICE"
            ],
            [
                "EMERY",
                "VOLANTE"
            ],
            [
                "GRANT",
                "KNERIEN"
            ],
            [
                "EBONY",
                "BORROMEO"
            ],
            [
                "VIRGIL",
                "ALLENDE"
            ],
            [
                "RASHAD",
                "BEALLE"
            ],
            [
                "HOUSTON",
                "WAGERS"
            ],
            [
                "ROBERT",
                "BURBANK"
            ],
            [
                "ALYSIA",
                "HOTARD"
            ],
            [
                "MARCIA",
                "WIXOM"
            ],
            [
                "EMILY",
                "LAURY"
            ],
            [
                "ELLAN",
                "ANA"
            ],
            [
                "PAMELIA",
                "KOLP"
            ],
            [
                "NEVILLE",
                "SCHLESSELMAN"
            ],
            [
                "IVA",
                "STUART"
            ],
            [
                "CLAIR",
                "ZAVADOSKI"
            ],
            [
                "JULIANA",
                "HONEYWELL"
            ],
            [
                "MERIDETH",
                "KU"
            ],
            [
                "ADELAIDE",
                "ZIEBARTH"
            ],
            [
                "HERBERT",
                "FRYDAY"
            ],
            [
                "ERYN",
                "BAUGUESS"
            ],
            [
                "BO",
                "DURAN"
            ],
            [
                "REGAN",
                "GATTSHALL"
            ],
            [
                "TODD",
                "PANARELLO"
            ],
            [
                "AUGUST",
                "SHERRANGE"
            ],
            [
                "ROCKY",
                "BRICKEL"
            ],
            [
                "RHEA",
                "ABAJA"
            ],
            [
                "RICKEY",
                "GALOW"
            ],
            [
                "WILLY",
                "ZULLO"
            ],
            [
                "NANCI",
                "FIGLIOLI"
            ],
            [
                "MARKITA",
                "CARISTO"
            ],
            [
                "ROBBY",
                "RICHARD"
            ],
            [
                "BOB",
                "KOHS"
            ],
            [
                "PIERRE",
                "CANDON"
            ],
            [
                "MELODY",
                "RUSSO"
            ],
            [
                "CLAYTON",
                "HARDYMAN"
            ],
            [
                "TERRY",
                "FANZO"
            ],
            [
                "ALEXIS",
                "FINEFROCK"
            ],
            [
                "SELINA",
                "RANAUDO"
            ],
            [
                "BYRON",
                "HORELICK"
            ],
            [
                "RHETT",
                "YONKERS"
            ],
            [
                "DELPHIA",
                "HERZING"
            ],
            [
                "MORGAN",
                "FERENCE"
            ],
            [
                "ISAAC",
                "HELKE"
            ],
            [
                "ELOISA",
                "FOLGER"
            ],
            [
                "MARGARITO",
                "QUISPE"
            ],
            [
                "DUSTY",
                "MAEDA"
            ],
            [
                "LATRISHA",
                "FROEHNER"
            ],
            [
                "MYRA",
                "LOTTO"
            ],
            [
                "BRAIN",
                "CASAGRANDA"
            ],
            [
                "SANDA",
                "SAILORS"
            ],
            [
                "MAURICIO",
                "KLEIMAN"
            ],
            [
                "TROY",
                "MASSER"
            ],
            [
                "CRISTIE",
                "GARCES"
            ],
            [
                "JESS",
                "TORNQUIST"
            ],
            [
                "JORDON",
                "FORESTA"
            ],
            [
                "JEFFEREY",
                "ARNDELL"
            ],
            [
                "MERLE",
                "COASTER"
            ],
            [
                "GARY",
                "NEUBECKER"
            ],
            [
                "HERB",
                "CRACE"
            ],
            [
                "MACY",
                "SIDDELL"
            ],
            [
                "CLAUDIE",
                "YAPLE"
            ],
            [
                "WINFRED",
                "RATTANA"
            ],
            [
                "ELMIRA",
                "ATTEBURG"
            ],
            [
                "ANGLA",
                "OCHS"
            ],
            [
                "SILVIA",
                "PENCEK"
            ],
            [
                "FLORENTINO",
                "SHOULDER"
            ],
            [
                "PHIL",
                "MELVE"
            ],
            [
                "CLIFTON",
                "WORKINGER"
            ],
            [
                "KEELY",
                "RIMAR"
            ],
            [
                "WYNELL",
                "WICKLIN"
            ],
            [
                "JENISE",
                "SANDLER"
            ],
            [
                "PABLO",
                "VIPPERMAN"
            ],
            [
                "KATTIE",
                "FLEURILUS"
            ],
            [
                "RAYMUNDO",
                "SUSMILCH"
            ],
            [
                "CLARINDA",
                "SHUTTERS"
            ],
            [
                "BENTON",
                "AKHTAR"
            ],
            [
                "HYACINTH",
                "BEAMON"
            ],
            [
                "FRANCISCO",
                "BOSE"
            ],
            [
                "FELIPE",
                "DINUNZIO"
            ],
            [
                "DELORSE",
                "JAHALY"
            ],
            [
                "RODERICK",
                "BRODOWSKI"
            ],
            [
                "NIKKI",
                "VELIE"
            ],
            [
                "SHERILYN",
                "HAVIS"
            ],
            [
                "EBONY",
                "BORROMEO"
            ],
            [
                "DOUGLASS",
                "KLAVETTER"
            ],
            [
                "DESPINA",
                "MARKWORTH"
            ],
            [
                "CHUNG",
                "ZINDEL"
            ],
            [
                "LORITA",
                "HARDINA"
            ],
            [
                "EMILIA",
                "FEYLER"
            ],
            [
                "BRIGIDA",
                "MIKEL"
            ],
            [
                "AUNDREA",
                "EASTLING"
            ],
            [
                "CODY",
                "EERKES"
            ],
            [
                "GIUSEPPE",
                "DEVEY"
            ],
            [
                "BROOKS",
                "WAEGNER"
            ],
            [
                "ROBERTO",
                "PULOS"
            ],
            [
                "ELANA",
                "ZEPEDA"
            ],
            [
                "JULI",
                "RENDLEMAN"
            ],
            [
                "EDIE",
                "ECKERT"
            ],
            [
                "ERWIN",
                "EMIGHOLZ"
            ],
            [
                "HARRISON",
                "INGUARDSEN"
            ],
            [
                "JOEY",
                "BALCOM"
            ],
            [
                "DUSTY",
                "BASSI"
            ],
            [
                "GEARLDINE",
                "STRINGFELLOW"
            ],
            [
                "TRICIA",
                "KLIGER"
            ],
            [
                "WOODROW",
                "BRINAR"
            ],
            [
                "RICKIE",
                "DEININGER"
            ],
            [
                "ROXANE",
                "GIOVANINI"
            ],
            [
                "CATHERIN",
                "KUDRON"
            ],
            [
                "ALLEN",
                "ROSSEY"
            ],
            [
                "REINALDO",
                "MUHLESTEIN"
            ],
            [
                "JULIO",
                "GRULKEY"
            ],
            [
                "SAM",
                "LIBBERTON"
            ],
            [
                "LYLA",
                "GIANOPULOS"
            ],
            [
                "MILLIE",
                "KABZINSKI"
            ],
            [
                "LARITA",
                "SLONE"
            ],
            [
                "ELKE",
                "PELLOWSKI"
            ],
            [
                "ERICH",
                "VANNAMAN"
            ],
            [
                "STEPHEN",
                "PLYMEL"
            ],
            [
                "TOVA",
                "LIESTMAN"
            ],
            [
                "ELVINA",
                "GRONDAHL"
            ],
            [
                "FREDRICK",
                "PFEUFFER"
            ],
            [
                "BEV",
                "WEINLAND"
            ],
            [
                "ALEIDA",
                "MCCULLARS"
            ],
            [
                "JACKIE",
                "EADER"
            ],
            [
                "KRIS",
                "MORAWSKI"
            ],
            [
                "CODY",
                "DISHAW"
            ],
            [
                "TIMMY",
                "WESTRUM"
            ],
            [
                "DARON",
                "RAUGHT"
            ],
            [
                "REGENIA",
                "HOTELLING"
            ],
            [
                "CHARISSA",
                "MAASCH"
            ],
            [
                "SHERRILL",
                "HALBERSTAM"
            ],
            [
                "MODESTO",
                "TOWBER"
            ],
            [
                "JERROD",
                "WISWELL"
            ],
            [
                "GARRY",
                "YOKUM"
            ],
            [
                "SON",
                "LORENZANO"
            ],
            [
                "THOMASINE",
                "MAIDENS"
            ],
            [
                "ALDO",
                "OULETTE"
            ],
            [
                "RUSSELL",
                "GOODHUE"
            ],
            [
                "DANNETTE",
                "SCHWEITZ"
            ],
            [
                "ROMEO",
                "NOWLEY"
            ],
            [
                "ARON",
                "KEBEDE"
            ],
            [
                "ODIS",
                "ENDLER"
            ],
            [
                "SOL",
                "GUEDESSE"
            ],
            [
                "SHAWANDA",
                "ALWINE"
            ],
            [
                "RAMONA",
                "ALLAIRE"
            ],
            [
                "INGRID",
                "TROKEY"
            ],
            [
                "MARCELINA",
                "ESPINO"
            ],
            [
                "QUENTIN",
                "RUBY"
            ],
            [
                "BEN",
                "FIGUROA"
            ],
            [
                "DORINE",
                "VORWERK"
            ],
            [
                "MONTE",
                "BOUGIE"
            ],
            [
                "ROY",
                "SWEAZY"
            ],
            [
                "QUIANA",
                "RUPE"
            ],
            [
                "MITZIE",
                "VANDERSCHAEGE"
            ],
            [
                "YAN",
                "SINGERMAN"
            ],
            [
                "RASHAD",
                "CONSTABLE"
            ],
            [
                "JEWEL",
                "BRISENDINE"
            ],
            [
                "HOYT",
                "SCHUL"
            ],
            [
                "LEROY",
                "SCHOENING"
            ]
        ]
    },
    {
        "question": "What are the first and last names of people who payed more than the rooms' base prices?",
        "query": "MATCH (T1:`inn_1.Reservations`)-[]-(T2:`inn_1.Rooms`)\nWHERE (T1.Rate - T2.basePrice) > 0\nRETURN T1.FirstName,T1.LastName",
        "db_id": "inn_1",
        "answers": [
            [
                "HERBERT",
                "FRANC"
            ],
            [
                "TEODORO",
                "MAURER"
            ],
            [
                "DARIUS",
                "HULETTE"
            ],
            [
                "ABBEY",
                "ALBERO"
            ],
            [
                "ERYN",
                "BAUGUESS"
            ],
            [
                "GLENNIS",
                "ROTHMAN"
            ],
            [
                "ALLEN",
                "GABBETT"
            ],
            [
                "OLYMPIA",
                "ALBROUGH"
            ],
            [
                "PORTER",
                "LELEUX"
            ],
            [
                "DIONNA",
                "MULE"
            ],
            [
                "LENA",
                "LEDOUX"
            ],
            [
                "CLINT",
                "BONIOL"
            ],
            [
                "KERRI",
                "MECHLING"
            ],
            [
                "NATHANAEL",
                "HARTFORD"
            ],
            [
                "JERROD",
                "WISWELL"
            ],
            [
                "NELL",
                "DEBARDELABEN"
            ],
            [
                "JEANMARIE",
                "LABAT"
            ],
            [
                "EUSEBIO",
                "WIDOWSKI"
            ],
            [
                "LANNY",
                "COSTON"
            ],
            [
                "ARTHUR",
                "MCNEELEY"
            ],
            [
                "LANDON",
                "SCARLES"
            ],
            [
                "ADAM",
                "COVERT"
            ],
            [
                "DENNY",
                "PERRINO"
            ],
            [
                "ELMIRA",
                "ATTEBURG"
            ],
            [
                "EFRAIN",
                "GISSLER"
            ],
            [
                "JESSIE",
                "JAHR"
            ],
            [
                "DAN",
                "DELGUIDICE"
            ],
            [
                "EMERY",
                "VOLANTE"
            ],
            [
                "GRANT",
                "KNERIEN"
            ],
            [
                "EBONY",
                "BORROMEO"
            ],
            [
                "VIRGIL",
                "ALLENDE"
            ],
            [
                "RASHAD",
                "BEALLE"
            ],
            [
                "HOUSTON",
                "WAGERS"
            ],
            [
                "ROBERT",
                "BURBANK"
            ],
            [
                "ALYSIA",
                "HOTARD"
            ],
            [
                "MARCIA",
                "WIXOM"
            ],
            [
                "EMILY",
                "LAURY"
            ],
            [
                "ELLAN",
                "ANA"
            ],
            [
                "PAMELIA",
                "KOLP"
            ],
            [
                "NEVILLE",
                "SCHLESSELMAN"
            ],
            [
                "IVA",
                "STUART"
            ],
            [
                "CLAIR",
                "ZAVADOSKI"
            ],
            [
                "JULIANA",
                "HONEYWELL"
            ],
            [
                "MERIDETH",
                "KU"
            ],
            [
                "ADELAIDE",
                "ZIEBARTH"
            ],
            [
                "HERBERT",
                "FRYDAY"
            ],
            [
                "ERYN",
                "BAUGUESS"
            ],
            [
                "BO",
                "DURAN"
            ],
            [
                "REGAN",
                "GATTSHALL"
            ],
            [
                "TODD",
                "PANARELLO"
            ],
            [
                "AUGUST",
                "SHERRANGE"
            ],
            [
                "ROCKY",
                "BRICKEL"
            ],
            [
                "RHEA",
                "ABAJA"
            ],
            [
                "RICKEY",
                "GALOW"
            ],
            [
                "WILLY",
                "ZULLO"
            ],
            [
                "NANCI",
                "FIGLIOLI"
            ],
            [
                "MARKITA",
                "CARISTO"
            ],
            [
                "ROBBY",
                "RICHARD"
            ],
            [
                "BOB",
                "KOHS"
            ],
            [
                "PIERRE",
                "CANDON"
            ],
            [
                "MELODY",
                "RUSSO"
            ],
            [
                "CLAYTON",
                "HARDYMAN"
            ],
            [
                "TERRY",
                "FANZO"
            ],
            [
                "ALEXIS",
                "FINEFROCK"
            ],
            [
                "SELINA",
                "RANAUDO"
            ],
            [
                "BYRON",
                "HORELICK"
            ],
            [
                "RHETT",
                "YONKERS"
            ],
            [
                "DELPHIA",
                "HERZING"
            ],
            [
                "MORGAN",
                "FERENCE"
            ],
            [
                "ISAAC",
                "HELKE"
            ],
            [
                "ELOISA",
                "FOLGER"
            ],
            [
                "MARGARITO",
                "QUISPE"
            ],
            [
                "DUSTY",
                "MAEDA"
            ],
            [
                "LATRISHA",
                "FROEHNER"
            ],
            [
                "MYRA",
                "LOTTO"
            ],
            [
                "BRAIN",
                "CASAGRANDA"
            ],
            [
                "SANDA",
                "SAILORS"
            ],
            [
                "MAURICIO",
                "KLEIMAN"
            ],
            [
                "TROY",
                "MASSER"
            ],
            [
                "CRISTIE",
                "GARCES"
            ],
            [
                "JESS",
                "TORNQUIST"
            ],
            [
                "JORDON",
                "FORESTA"
            ],
            [
                "JEFFEREY",
                "ARNDELL"
            ],
            [
                "MERLE",
                "COASTER"
            ],
            [
                "GARY",
                "NEUBECKER"
            ],
            [
                "HERB",
                "CRACE"
            ],
            [
                "MACY",
                "SIDDELL"
            ],
            [
                "CLAUDIE",
                "YAPLE"
            ],
            [
                "WINFRED",
                "RATTANA"
            ],
            [
                "ELMIRA",
                "ATTEBURG"
            ],
            [
                "ANGLA",
                "OCHS"
            ],
            [
                "SILVIA",
                "PENCEK"
            ],
            [
                "FLORENTINO",
                "SHOULDER"
            ],
            [
                "PHIL",
                "MELVE"
            ],
            [
                "CLIFTON",
                "WORKINGER"
            ],
            [
                "KEELY",
                "RIMAR"
            ],
            [
                "WYNELL",
                "WICKLIN"
            ],
            [
                "JENISE",
                "SANDLER"
            ],
            [
                "PABLO",
                "VIPPERMAN"
            ],
            [
                "KATTIE",
                "FLEURILUS"
            ],
            [
                "RAYMUNDO",
                "SUSMILCH"
            ],
            [
                "CLARINDA",
                "SHUTTERS"
            ],
            [
                "BENTON",
                "AKHTAR"
            ],
            [
                "HYACINTH",
                "BEAMON"
            ],
            [
                "FRANCISCO",
                "BOSE"
            ],
            [
                "FELIPE",
                "DINUNZIO"
            ],
            [
                "DELORSE",
                "JAHALY"
            ],
            [
                "RODERICK",
                "BRODOWSKI"
            ],
            [
                "NIKKI",
                "VELIE"
            ],
            [
                "SHERILYN",
                "HAVIS"
            ],
            [
                "EBONY",
                "BORROMEO"
            ],
            [
                "DOUGLASS",
                "KLAVETTER"
            ],
            [
                "DESPINA",
                "MARKWORTH"
            ],
            [
                "CHUNG",
                "ZINDEL"
            ],
            [
                "LORITA",
                "HARDINA"
            ],
            [
                "EMILIA",
                "FEYLER"
            ],
            [
                "BRIGIDA",
                "MIKEL"
            ],
            [
                "AUNDREA",
                "EASTLING"
            ],
            [
                "CODY",
                "EERKES"
            ],
            [
                "GIUSEPPE",
                "DEVEY"
            ],
            [
                "BROOKS",
                "WAEGNER"
            ],
            [
                "ROBERTO",
                "PULOS"
            ],
            [
                "ELANA",
                "ZEPEDA"
            ],
            [
                "JULI",
                "RENDLEMAN"
            ],
            [
                "EDIE",
                "ECKERT"
            ],
            [
                "ERWIN",
                "EMIGHOLZ"
            ],
            [
                "HARRISON",
                "INGUARDSEN"
            ],
            [
                "JOEY",
                "BALCOM"
            ],
            [
                "DUSTY",
                "BASSI"
            ],
            [
                "GEARLDINE",
                "STRINGFELLOW"
            ],
            [
                "TRICIA",
                "KLIGER"
            ],
            [
                "WOODROW",
                "BRINAR"
            ],
            [
                "RICKIE",
                "DEININGER"
            ],
            [
                "ROXANE",
                "GIOVANINI"
            ],
            [
                "CATHERIN",
                "KUDRON"
            ],
            [
                "ALLEN",
                "ROSSEY"
            ],
            [
                "REINALDO",
                "MUHLESTEIN"
            ],
            [
                "JULIO",
                "GRULKEY"
            ],
            [
                "SAM",
                "LIBBERTON"
            ],
            [
                "LYLA",
                "GIANOPULOS"
            ],
            [
                "MILLIE",
                "KABZINSKI"
            ],
            [
                "LARITA",
                "SLONE"
            ],
            [
                "ELKE",
                "PELLOWSKI"
            ],
            [
                "ERICH",
                "VANNAMAN"
            ],
            [
                "STEPHEN",
                "PLYMEL"
            ],
            [
                "TOVA",
                "LIESTMAN"
            ],
            [
                "ELVINA",
                "GRONDAHL"
            ],
            [
                "FREDRICK",
                "PFEUFFER"
            ],
            [
                "BEV",
                "WEINLAND"
            ],
            [
                "ALEIDA",
                "MCCULLARS"
            ],
            [
                "JACKIE",
                "EADER"
            ],
            [
                "KRIS",
                "MORAWSKI"
            ],
            [
                "CODY",
                "DISHAW"
            ],
            [
                "TIMMY",
                "WESTRUM"
            ],
            [
                "DARON",
                "RAUGHT"
            ],
            [
                "REGENIA",
                "HOTELLING"
            ],
            [
                "CHARISSA",
                "MAASCH"
            ],
            [
                "SHERRILL",
                "HALBERSTAM"
            ],
            [
                "MODESTO",
                "TOWBER"
            ],
            [
                "JERROD",
                "WISWELL"
            ],
            [
                "GARRY",
                "YOKUM"
            ],
            [
                "SON",
                "LORENZANO"
            ],
            [
                "THOMASINE",
                "MAIDENS"
            ],
            [
                "ALDO",
                "OULETTE"
            ],
            [
                "RUSSELL",
                "GOODHUE"
            ],
            [
                "DANNETTE",
                "SCHWEITZ"
            ],
            [
                "ROMEO",
                "NOWLEY"
            ],
            [
                "ARON",
                "KEBEDE"
            ],
            [
                "ODIS",
                "ENDLER"
            ],
            [
                "SOL",
                "GUEDESSE"
            ],
            [
                "SHAWANDA",
                "ALWINE"
            ],
            [
                "RAMONA",
                "ALLAIRE"
            ],
            [
                "INGRID",
                "TROKEY"
            ],
            [
                "MARCELINA",
                "ESPINO"
            ],
            [
                "QUENTIN",
                "RUBY"
            ],
            [
                "BEN",
                "FIGUROA"
            ],
            [
                "DORINE",
                "VORWERK"
            ],
            [
                "MONTE",
                "BOUGIE"
            ],
            [
                "ROY",
                "SWEAZY"
            ],
            [
                "QUIANA",
                "RUPE"
            ],
            [
                "MITZIE",
                "VANDERSCHAEGE"
            ],
            [
                "YAN",
                "SINGERMAN"
            ],
            [
                "RASHAD",
                "CONSTABLE"
            ],
            [
                "JEWEL",
                "BRISENDINE"
            ],
            [
                "HOYT",
                "SCHUL"
            ],
            [
                "LEROY",
                "SCHOENING"
            ]
        ]
    },
    {
        "question": "How many rooms are there?",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN count(*)",
        "db_id": "inn_1",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "What is the total number of rooms available in this inn?",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN count(*)",
        "db_id": "inn_1",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "Find the number of rooms with a king bed.",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.bedType = 'King'\nRETURN count(*)",
        "db_id": "inn_1",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "How many rooms have a king bed?",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.bedType = 'King'\nRETURN count(*)",
        "db_id": "inn_1",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "Find the number of rooms for each bed type.",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWITH count(rooms.bedType) AS count, rooms.bedType AS bedType\nRETURN bedType,count",
        "db_id": "inn_1",
        "answers": [
            [
                "King",
                4
            ],
            [
                "Queen",
                4
            ],
            [
                "Double",
                2
            ]
        ]
    },
    {
        "question": "What are the number of rooms for each bed type?",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWITH count(rooms.bedType) AS count, rooms.bedType AS bedType\nRETURN bedType,count",
        "db_id": "inn_1",
        "answers": [
            [
                "King",
                4
            ],
            [
                "Queen",
                4
            ],
            [
                "Double",
                2
            ]
        ]
    },
    {
        "question": "Find the name of the room with the maximum occupancy.",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.roomName\nORDER BY rooms.maxOccupancy DESC\nLIMIT 1",
        "db_id": "inn_1",
        "answers": [
            [
                "Abscond or bolster"
            ]
        ]
    },
    {
        "question": "What is the name of the room that can accommodate the most people?",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.roomName\nORDER BY rooms.maxOccupancy DESC\nLIMIT 1",
        "db_id": "inn_1",
        "answers": [
            [
                "Abscond or bolster"
            ]
        ]
    },
    {
        "question": "Find the id and name of the most expensive base price room.",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.RoomId,rooms.roomName\nORDER BY rooms.basePrice DESC\nLIMIT 1",
        "db_id": "inn_1",
        "answers": [
            [
                "FNA",
                "Frugal not apropos"
            ]
        ]
    },
    {
        "question": "Which room has the highest base price?",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.RoomId,rooms.roomName\nORDER BY rooms.basePrice DESC\nLIMIT 1",
        "db_id": "inn_1",
        "answers": [
            [
                "FNA",
                "Frugal not apropos"
            ]
        ]
    },
    {
        "question": "List the type of bed and name of all traditional rooms.",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.decor = 'traditional'\nRETURN rooms.roomName,rooms.bedType",
        "db_id": "inn_1",
        "answers": [
            [
                "Interim but salutary",
                "King"
            ],
            [
                "Abscond or bolster",
                "Queen"
            ],
            [
                "Convoke and sanguine",
                "King"
            ],
            [
                "Frugal not apropos",
                "King"
            ]
        ]
    },
    {
        "question": "What are the bed type and name of all the rooms with traditional decor?",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.decor = 'traditional'\nRETURN rooms.roomName,rooms.bedType",
        "db_id": "inn_1",
        "answers": [
            [
                "Interim but salutary",
                "King"
            ],
            [
                "Abscond or bolster",
                "Queen"
            ],
            [
                "Convoke and sanguine",
                "King"
            ],
            [
                "Frugal not apropos",
                "King"
            ]
        ]
    },
    {
        "question": "Find the number of rooms with king bed for each decor type.",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.bedType = 'King'\nWITH count(rooms.decor) AS count, rooms.decor AS decor\nRETURN decor,count",
        "db_id": "inn_1",
        "answers": [
            [
                "modern",
                1
            ],
            [
                "traditional",
                3
            ]
        ]
    },
    {
        "question": "How many rooms have king beds? Report the number for each decor type.",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.bedType = 'King'\nWITH count(rooms.decor) AS count, rooms.decor AS decor\nRETURN decor,count",
        "db_id": "inn_1",
        "answers": [
            [
                "modern",
                1
            ],
            [
                "traditional",
                3
            ]
        ]
    },
    {
        "question": "List the name of all rooms sorted by their prices.",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.roomName\nORDER BY rooms.basePrice",
        "db_id": "inn_1",
        "answers": [
            [
                "Thrift and accolade"
            ],
            [
                "Harbinger but bequest"
            ],
            [
                "Mendicant with cryptic"
            ],
            [
                "Recluse and defiance"
            ],
            [
                "Interim but salutary"
            ],
            [
                "Immutable before decorum"
            ],
            [
                "Abscond or bolster"
            ],
            [
                "Convoke and sanguine"
            ],
            [
                "Riddle to exculpate"
            ],
            [
                "Frugal not apropos"
            ]
        ]
    },
    {
        "question": "Sort all the rooms according to the price. Just report the room names.",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.roomName\nORDER BY rooms.basePrice",
        "db_id": "inn_1",
        "answers": [
            [
                "Thrift and accolade"
            ],
            [
                "Harbinger but bequest"
            ],
            [
                "Mendicant with cryptic"
            ],
            [
                "Recluse and defiance"
            ],
            [
                "Interim but salutary"
            ],
            [
                "Immutable before decorum"
            ],
            [
                "Abscond or bolster"
            ],
            [
                "Convoke and sanguine"
            ],
            [
                "Riddle to exculpate"
            ],
            [
                "Frugal not apropos"
            ]
        ]
    },
    {
        "question": "Find the number of rooms with price higher than 120 for different decor.",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.basePrice > 120\nWITH count(rooms.decor) AS count, rooms.decor AS decor\nRETURN decor,count",
        "db_id": "inn_1",
        "answers": [
            [
                "modern",
                2
            ],
            [
                "traditional",
                4
            ],
            [
                "rustic",
                2
            ]
        ]
    },
    {
        "question": "How many rooms cost more than 120, for each different decor?",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.basePrice > 120\nWITH count(rooms.decor) AS count, rooms.decor AS decor\nRETURN decor,count",
        "db_id": "inn_1",
        "answers": [
            [
                "modern",
                2
            ],
            [
                "traditional",
                4
            ],
            [
                "rustic",
                2
            ]
        ]
    },
    {
        "question": "List the name of rooms with king or queen bed.",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.bedType = 'King' OR rooms.bedType = 'Queen'\nRETURN rooms.roomName",
        "db_id": "inn_1",
        "answers": [
            [
                "Recluse and defiance"
            ],
            [
                "Interim but salutary"
            ],
            [
                "Abscond or bolster"
            ],
            [
                "Harbinger but bequest"
            ],
            [
                "Immutable before decorum"
            ],
            [
                "Convoke and sanguine"
            ],
            [
                "Riddle to exculpate"
            ],
            [
                "Frugal not apropos"
            ]
        ]
    },
    {
        "question": "What are the names of rooms that have either king or queen bed?",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE rooms.bedType = 'King' OR rooms.bedType = 'Queen'\nRETURN rooms.roomName",
        "db_id": "inn_1",
        "answers": [
            [
                "Recluse and defiance"
            ],
            [
                "Interim but salutary"
            ],
            [
                "Abscond or bolster"
            ],
            [
                "Harbinger but bequest"
            ],
            [
                "Immutable before decorum"
            ],
            [
                "Convoke and sanguine"
            ],
            [
                "Riddle to exculpate"
            ],
            [
                "Frugal not apropos"
            ]
        ]
    },
    {
        "question": "How many different types of beds are there?",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN count(DISTINCT rooms.bedType)",
        "db_id": "inn_1",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Find the number of distinct bed types available in this inn.",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN count(DISTINCT rooms.bedType)",
        "db_id": "inn_1",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Find the name and id of the top 3 expensive rooms.",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.RoomId,rooms.roomName\nORDER BY rooms.basePrice DESC\nLIMIT 3",
        "db_id": "inn_1",
        "answers": [
            [
                "FNA",
                "Frugal not apropos"
            ],
            [
                "AOB",
                "Abscond or bolster"
            ],
            [
                "CAS",
                "Convoke and sanguine"
            ]
        ]
    },
    {
        "question": "What are the name and id of the three highest priced rooms?",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nRETURN rooms.RoomId,rooms.roomName\nORDER BY rooms.basePrice DESC\nLIMIT 3",
        "db_id": "inn_1",
        "answers": [
            [
                "FNA",
                "Frugal not apropos"
            ],
            [
                "AOB",
                "Abscond or bolster"
            ],
            [
                "CAS",
                "Convoke and sanguine"
            ]
        ]
    },
    {
        "question": "Find the number of rooms that do not have any reservation.",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE NOT (rooms:`inn_1.Rooms`)-[]-(:`inn_1.Reservations`)\nRETURN count(*)",
        "db_id": "inn_1",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many rooms have not had any reservation yet?",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE NOT (rooms:`inn_1.Rooms`)-[]-(:`inn_1.Reservations`)\nRETURN count(*)",
        "db_id": "inn_1",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Return the name and number of reservations made for each of the rooms.",
        "query": "MATCH (T1:`inn_1.Reservations`)-[]-(T2:`inn_1.Rooms`)\nWITH T1.Room AS Room, count(T1.Room) AS count, T2.roomName AS roomName\nRETURN roomName,count,Room",
        "db_id": "inn_1",
        "answers": [
            [
                "Recluse and defiance",
                62,
                "RND"
            ],
            [
                "Interim but salutary",
                59,
                "IBS"
            ],
            [
                "Abscond or bolster",
                51,
                "AOB"
            ],
            [
                "Mendicant with cryptic",
                56,
                "MWC"
            ],
            [
                "Harbinger but bequest",
                60,
                "HBB"
            ],
            [
                "Immutable before decorum",
                63,
                "IBD"
            ],
            [
                "Thrift and accolade",
                59,
                "TAA"
            ],
            [
                "Convoke and sanguine",
                69,
                "CAS"
            ],
            [
                "Riddle to exculpate",
                55,
                "RTE"
            ],
            [
                "Frugal not apropos",
                66,
                "FNA"
            ]
        ]
    },
    {
        "question": "For each room, find its name and the number of times reservations were made for it.",
        "query": "MATCH (T1:`inn_1.Reservations`)-[]-(T2:`inn_1.Rooms`)\nWITH T1.Room AS Room, count(T1.Room) AS count, T2.roomName AS roomName\nRETURN roomName,count,Room",
        "db_id": "inn_1",
        "answers": [
            [
                "Recluse and defiance",
                62,
                "RND"
            ],
            [
                "Interim but salutary",
                59,
                "IBS"
            ],
            [
                "Abscond or bolster",
                51,
                "AOB"
            ],
            [
                "Mendicant with cryptic",
                56,
                "MWC"
            ],
            [
                "Harbinger but bequest",
                60,
                "HBB"
            ],
            [
                "Immutable before decorum",
                63,
                "IBD"
            ],
            [
                "Thrift and accolade",
                59,
                "TAA"
            ],
            [
                "Convoke and sanguine",
                69,
                "CAS"
            ],
            [
                "Riddle to exculpate",
                55,
                "RTE"
            ],
            [
                "Frugal not apropos",
                66,
                "FNA"
            ]
        ]
    },
    {
        "question": "Find the names of rooms that have been reserved for more than 60 times.",
        "query": "MATCH (T1:`inn_1.Reservations`)-[]-(T2:`inn_1.Rooms`)\nWITH count(*) AS count, T2.roomName AS roomName\nWHERE count  > 60\nRETURN roomName",
        "db_id": "inn_1",
        "answers": [
            [
                "Recluse and defiance"
            ],
            [
                "Immutable before decorum"
            ],
            [
                "Convoke and sanguine"
            ],
            [
                "Frugal not apropos"
            ]
        ]
    },
    {
        "question": "What are the names of rooms whose reservation frequency exceeds 60 times?",
        "query": "MATCH (T1:`inn_1.Reservations`)-[]-(T2:`inn_1.Rooms`)\nWITH count(*) AS count, T2.roomName AS roomName\nWHERE count  > 60\nRETURN roomName",
        "db_id": "inn_1",
        "answers": [
            [
                "Recluse and defiance"
            ],
            [
                "Immutable before decorum"
            ],
            [
                "Convoke and sanguine"
            ],
            [
                "Frugal not apropos"
            ]
        ]
    },
    {
        "question": "Find the name of rooms whose base price is between 120 and 150.",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE 120<=rooms.basePrice<=150\nRETURN rooms.roomName",
        "db_id": "inn_1",
        "answers": [
            [
                "Recluse and defiance"
            ],
            [
                "Interim but salutary"
            ],
            [
                "Mendicant with cryptic"
            ],
            [
                "Immutable before decorum"
            ]
        ]
    },
    {
        "question": "Which rooms cost between 120 and 150? Give me the room names.",
        "query": "MATCH (rooms:`inn_1.Rooms`)\nWHERE 120<=rooms.basePrice<=150\nRETURN rooms.roomName",
        "db_id": "inn_1",
        "answers": [
            [
                "Recluse and defiance"
            ],
            [
                "Interim but salutary"
            ],
            [
                "Mendicant with cryptic"
            ],
            [
                "Immutable before decorum"
            ]
        ]
    },
    {
        "question": "Find the name of rooms booked by some customers whose first name contains ROY.",
        "query": "MATCH (T1:`inn_1.Reservations`)-[]-(T2:`inn_1.Rooms`)\nWHERE T1.FirstName =~'.*[R|r]OY.*'\nRETURN T2.roomName",
        "db_id": "inn_1",
        "answers": [
            [
                "Harbinger but bequest"
            ],
            [
                "Harbinger but bequest"
            ],
            [
                "Harbinger but bequest"
            ],
            [
                "Thrift and accolade"
            ],
            [
                "Convoke and sanguine"
            ],
            [
                "Frugal not apropos"
            ],
            [
                "Frugal not apropos"
            ]
        ]
    },
    {
        "question": "What are the name of rooms booked by customers whose first name has \"ROY\" in part?",
        "query": "MATCH (T1:`inn_1.Reservations`)-[]-(T2:`inn_1.Rooms`)\nWHERE T1.FirstName =~'.*[R|r]OY.*'\nRETURN T2.roomName",
        "db_id": "inn_1",
        "answers": [
            [
                "Harbinger but bequest"
            ],
            [
                "Harbinger but bequest"
            ],
            [
                "Harbinger but bequest"
            ],
            [
                "Thrift and accolade"
            ],
            [
                "Convoke and sanguine"
            ],
            [
                "Frugal not apropos"
            ],
            [
                "Frugal not apropos"
            ]
        ]
    },
    {
        "question": "what are the details of the cmi masters that have the cross reference code 'Tax'?",
        "query": "MATCH (T1:`local_govt_mdm.Customer_Master_Index`)-[]-(T2:`local_govt_mdm.CMI_Cross_References`)\nWHERE T2.source_system_code = 'Tax'\nRETURN T1.cmi_details",
        "db_id": "local_govt_mdm",
        "answers": [
            [
                "Volkman, Mills and Ferry"
            ],
            [
                "Schmidt, Kertzmann and Lubowitz"
            ],
            [
                "Reynolds-McClure"
            ],
            [
                "Volkman, Mills and Ferry"
            ],
            [
                "Volkman, Mills and Ferry"
            ],
            [
                "Schmitt-Lang"
            ]
        ]
    },
    {
        "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.",
        "query": "MATCH (T1:`local_govt_mdm.CMI_Cross_References`)-[]-(T2:`local_govt_mdm.Council_Tax`)\nWITH count(*) AS count, T1.cmi_cross_ref_id AS cmi_cross_ref_id, T1.source_system_code AS source_system_code\nWHERE count  >= 1\nRETURN cmi_cross_ref_id,source_system_code",
        "db_id": "local_govt_mdm",
        "answers": [
            [
                101,
                "Tax"
            ],
            [
                103,
                "Tax"
            ],
            [
                104,
                "Tax"
            ],
            [
                102,
                "Tax"
            ],
            [
                106,
                "Tax"
            ],
            [
                105,
                "Tax"
            ]
        ]
    },
    {
        "question": "How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n",
        "query": "MATCH (T1:`local_govt_mdm.Business_Rates`)-[]-(T2:`local_govt_mdm.CMI_Cross_References`)\nWITH T2.cmi_cross_ref_id AS cmi_cross_ref_id, T2.master_customer_id AS master_customer_id, count(T2.cmi_cross_ref_id) AS count\nRETURN cmi_cross_ref_id,master_customer_id,count",
        "db_id": "local_govt_mdm",
        "answers": [
            [
                99,
                9,
                1
            ],
            [
                49,
                1,
                1
            ],
            [
                95,
                2,
                1
            ]
        ]
    },
    {
        "question": "What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.",
        "query": "MATCH (T1:`local_govt_mdm.CMI_Cross_References`)-[]-(T2:`local_govt_mdm.Benefits_Overpayments`)\nRETURN T1.source_system_code,T2.council_tax_id\nORDER BY T2.council_tax_id",
        "db_id": "local_govt_mdm",
        "answers": [
            [
                "Benefits",
                3
            ],
            [
                "Benefits",
                6
            ],
            [
                "Benefits",
                7
            ],
            [
                "Benefits",
                8
            ]
        ]
    },
    {
        "question": "Wat is the tax source system code and master customer id of the taxes related to each parking fine id?",
        "query": "MATCH (T1:`local_govt_mdm.CMI_Cross_References`)-[]-(T2:`local_govt_mdm.Parking_Fines`)\nRETURN T1.source_system_code,T1.master_customer_id,T2.council_tax_id",
        "db_id": "local_govt_mdm",
        "answers": [
            [
                "Parking",
                5,
                9
            ],
            [
                "Parking",
                9,
                10
            ]
        ]
    },
    {
        "question": "What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?",
        "query": "MATCH (T1:`local_govt_mdm.Electoral_Register`)-[]-(T2:`local_govt_mdm.CMI_Cross_References`)\nWHERE T2.source_system_code = 'Electoral' OR T2.source_system_code = 'Tax'\nRETURN T1.electoral_register_id",
        "db_id": "local_govt_mdm",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "How many different source system code for the cmi cross references are there?",
        "query": "MATCH (cmi_cross_references:`local_govt_mdm.CMI_Cross_References`)\nRETURN count(DISTINCT cmi_cross_references.source_system_code)",
        "db_id": "local_govt_mdm",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "List the council tax ids and their related cmi cross references of all the parking fines.",
        "query": "MATCH (parking_fines:`local_govt_mdm.Parking_Fines`)\nRETURN parking_fines.council_tax_id,parking_fines.cmi_cross_ref_id",
        "db_id": "local_govt_mdm",
        "answers": [
            [
                9,
                4
            ],
            [
                10,
                81
            ]
        ]
    },
    {
        "question": "How many council taxes are collected for renting arrears ?",
        "query": "MATCH (rent_arrears:`local_govt_mdm.Rent_Arrears`)\nRETURN count(*)",
        "db_id": "local_govt_mdm",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "Which distinct source system code includes the substring 'en'?",
        "query": "MATCH (cmi_cross_references:`local_govt_mdm.CMI_Cross_References`)\nWHERE cmi_cross_references.source_system_code =~'.*[E|e]n.*'\nRETURN DISTINCT cmi_cross_references.source_system_code",
        "db_id": "local_govt_mdm",
        "answers": [
            [
                "Rent"
            ],
            [
                "Benefits"
            ]
        ]
    },
    {
        "question": "How many parties are there?",
        "query": "MATCH (party:`party_host.party`)\nRETURN count(*)",
        "db_id": "party_host",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "Count the number of parties.",
        "query": "MATCH (party:`party_host.party`)\nRETURN count(*)",
        "db_id": "party_host",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "List the themes of parties in ascending order of number of hosts.",
        "query": "MATCH (party:`party_host.party`)\nRETURN party.Party_Theme\nORDER BY party.Number_of_hosts ASC",
        "db_id": "party_host",
        "answers": [
            [
                "Hardcore Resurrection"
            ],
            [
                "QrimeTime"
            ],
            [
                "Spring"
            ],
            [
                "Teqnology"
            ],
            [
                "In Qontrol"
            ],
            [
                "Houseqlassics"
            ],
            [
                "Club Q-BASE"
            ],
            [
                "Qlubtempo"
            ]
        ]
    },
    {
        "question": "What are the themes of parties ordered by the number of hosts in ascending manner?",
        "query": "MATCH (party:`party_host.party`)\nRETURN party.Party_Theme\nORDER BY party.Number_of_hosts ASC",
        "db_id": "party_host",
        "answers": [
            [
                "Hardcore Resurrection"
            ],
            [
                "QrimeTime"
            ],
            [
                "Spring"
            ],
            [
                "Teqnology"
            ],
            [
                "In Qontrol"
            ],
            [
                "Houseqlassics"
            ],
            [
                "Club Q-BASE"
            ],
            [
                "Qlubtempo"
            ]
        ]
    },
    {
        "question": "What are the themes and locations of parties?",
        "query": "MATCH (party:`party_host.party`)\nRETURN party.Party_Theme,party.Location",
        "db_id": "party_host",
        "answers": [
            [
                "Spring",
                "Hemkade 48 Zaandam"
            ],
            [
                "Club Q-BASE",
                "Hemkade 48 Zaandam"
            ],
            [
                "Hardcore Resurrection",
                "Various locations"
            ],
            [
                "Teqnology",
                "Heineken Music Hall Amsterdam"
            ],
            [
                "Qlubtempo",
                "Hemkade 48 Zaandam, Heineken Music Hall Amsterdam"
            ],
            [
                "QrimeTime",
                "Heineken Music Hall Amsterdam"
            ],
            [
                "In Qontrol",
                "RAI Amsterdam"
            ],
            [
                "Houseqlassics",
                "Various locations"
            ]
        ]
    },
    {
        "question": "Give me the theme and location of each party.",
        "query": "MATCH (party:`party_host.party`)\nRETURN party.Party_Theme,party.Location",
        "db_id": "party_host",
        "answers": [
            [
                "Spring",
                "Hemkade 48 Zaandam"
            ],
            [
                "Club Q-BASE",
                "Hemkade 48 Zaandam"
            ],
            [
                "Hardcore Resurrection",
                "Various locations"
            ],
            [
                "Teqnology",
                "Heineken Music Hall Amsterdam"
            ],
            [
                "Qlubtempo",
                "Hemkade 48 Zaandam, Heineken Music Hall Amsterdam"
            ],
            [
                "QrimeTime",
                "Heineken Music Hall Amsterdam"
            ],
            [
                "In Qontrol",
                "RAI Amsterdam"
            ],
            [
                "Houseqlassics",
                "Various locations"
            ]
        ]
    },
    {
        "question": "Show the first year and last year of parties with theme \"Spring\" or \"Teqnology\".",
        "query": "MATCH (party:`party_host.party`)\nWHERE party.Party_Theme = 'Spring' OR party.Party_Theme = 'Teqnology'\nRETURN party.First_year,party.Last_year",
        "db_id": "party_host",
        "answers": [
            [
                "2000",
                "2001"
            ],
            [
                "2002",
                "2004"
            ]
        ]
    },
    {
        "question": "What are the first year and last year of the parties whose theme is \"Spring\" or \"Teqnology\"?",
        "query": "MATCH (party:`party_host.party`)\nWHERE party.Party_Theme = 'Spring' OR party.Party_Theme = 'Teqnology'\nRETURN party.First_year,party.Last_year",
        "db_id": "party_host",
        "answers": [
            [
                "2000",
                "2001"
            ],
            [
                "2002",
                "2004"
            ]
        ]
    },
    {
        "question": "What is the average number of hosts for parties?",
        "query": "MATCH (party:`party_host.party`)\nRETURN avg(party.Number_of_hosts)",
        "db_id": "party_host",
        "answers": [
            [
                12.25
            ]
        ]
    },
    {
        "question": "Compute the average number of hosts for parties.",
        "query": "MATCH (party:`party_host.party`)\nRETURN avg(party.Number_of_hosts)",
        "db_id": "party_host",
        "answers": [
            [
                12.25
            ]
        ]
    },
    {
        "question": "What is the location of the party with the most hosts?",
        "query": "MATCH (party:`party_host.party`)\nRETURN party.Location\nORDER BY party.Number_of_hosts DESC\nLIMIT 1",
        "db_id": "party_host",
        "answers": [
            [
                "Hemkade 48 Zaandam, Heineken Music Hall Amsterdam"
            ]
        ]
    },
    {
        "question": "Which party had the most hosts? Give me the party location.",
        "query": "MATCH (party:`party_host.party`)\nRETURN party.Location\nORDER BY party.Number_of_hosts DESC\nLIMIT 1",
        "db_id": "party_host",
        "answers": [
            [
                "Hemkade 48 Zaandam, Heineken Music Hall Amsterdam"
            ]
        ]
    },
    {
        "question": "Show different nationalities along with the number of hosts of each nationality.",
        "query": "MATCH (host:`party_host.host`)\nWITH count(host.Nationality) AS count, host.Nationality AS Nationality\nRETURN Nationality,count",
        "db_id": "party_host",
        "answers": [
            [
                "United States",
                8
            ],
            [
                "Hungary",
                1
            ],
            [
                "Argentina",
                1
            ]
        ]
    },
    {
        "question": "How many hosts does each nationality have? List the nationality and the count.",
        "query": "MATCH (host:`party_host.host`)\nWITH count(host.Nationality) AS count, host.Nationality AS Nationality\nRETURN Nationality,count",
        "db_id": "party_host",
        "answers": [
            [
                "United States",
                8
            ],
            [
                "Hungary",
                1
            ],
            [
                "Argentina",
                1
            ]
        ]
    },
    {
        "question": "Show the most common nationality of hosts.",
        "query": "MATCH (host:`party_host.host`)\nWITH count(host.Nationality) AS count, host.Nationality AS Nationality\nRETURN Nationality\nORDER BY count DESC\nLIMIT 1",
        "db_id": "party_host",
        "answers": [
            [
                "United States"
            ]
        ]
    },
    {
        "question": "Which nationality has the most hosts?",
        "query": "MATCH (host:`party_host.host`)\nWITH count(host.Nationality) AS count, host.Nationality AS Nationality\nRETURN Nationality\nORDER BY count DESC\nLIMIT 1",
        "db_id": "party_host",
        "answers": [
            [
                "United States"
            ]
        ]
    },
    {
        "question": "Show the name and the nationality of the oldest host.",
        "query": "MATCH (host:`party_host.host`)\nRETURN host.Name,host.Nationality\nORDER BY host.Age DESC\nLIMIT 1",
        "db_id": "party_host",
        "answers": [
            [
                "Derrick Dial",
                "United States"
            ]
        ]
    },
    {
        "question": "What are the name and the nationality of the host of the highest age?",
        "query": "MATCH (host:`party_host.host`)\nRETURN host.Name,host.Nationality\nORDER BY host.Age DESC\nLIMIT 1",
        "db_id": "party_host",
        "answers": [
            [
                "Derrick Dial",
                "United States"
            ]
        ]
    },
    {
        "question": "List the names of hosts who did not serve as a host of any party in our record.",
        "query": "MATCH (host:`party_host.host`)\nWHERE NOT (host:`party_host.host`)-[:`party_host.party_host`]-()\nRETURN host.Name",
        "db_id": "party_host",
        "answers": [
            [
                "Antonio Davis"
            ],
            [
                "Hubert Davis"
            ],
            [
                "Justin Dentmon"
            ],
            [
                "DeMar DeRozan"
            ]
        ]
    },
    {
        "question": "What are the names of hosts who did not host any party in our record?",
        "query": "MATCH (host:`party_host.host`)\nWHERE NOT (host:`party_host.host`)-[:`party_host.party_host`]-()\nRETURN host.Name",
        "db_id": "party_host",
        "answers": [
            [
                "Antonio Davis"
            ],
            [
                "Hubert Davis"
            ],
            [
                "Justin Dentmon"
            ],
            [
                "DeMar DeRozan"
            ]
        ]
    },
    {
        "question": "How many regions do we have?",
        "query": "MATCH (region:`storm_record.region`)\nRETURN count(*)",
        "db_id": "storm_record",
        "answers": [
            [
                13
            ]
        ]
    },
    {
        "question": "Count the number of regions.",
        "query": "MATCH (region:`storm_record.region`)\nRETURN count(*)",
        "db_id": "storm_record",
        "answers": [
            [
                13
            ]
        ]
    },
    {
        "question": "Show all region code and region name sorted by the codes.",
        "query": "MATCH (region:`storm_record.region`)\nRETURN region.Region_code,region.Region_name\nORDER BY region.Region_code",
        "db_id": "storm_record",
        "answers": [
            [
                "AD",
                "Andorra"
            ],
            [
                "AF",
                "Afghanistan"
            ],
            [
                "AG",
                "Antigua and Barbuda"
            ],
            [
                "AI",
                "Anguilla"
            ],
            [
                "AL",
                "Albania"
            ],
            [
                "AO",
                "Angola"
            ],
            [
                "AQ",
                "Antarctica"
            ],
            [
                "CY",
                "Cyprus"
            ],
            [
                "CZ",
                "Czech Republic"
            ],
            [
                "DJ",
                "Djibouti"
            ],
            [
                "DK",
                "Denmark"
            ],
            [
                "DS",
                "American Samoa"
            ],
            [
                "DZ",
                "Algeria"
            ]
        ]
    },
    {
        "question": "What are the codes and names for all regions, sorted by codes?",
        "query": "MATCH (region:`storm_record.region`)\nRETURN region.Region_code,region.Region_name\nORDER BY region.Region_code",
        "db_id": "storm_record",
        "answers": [
            [
                "AD",
                "Andorra"
            ],
            [
                "AF",
                "Afghanistan"
            ],
            [
                "AG",
                "Antigua and Barbuda"
            ],
            [
                "AI",
                "Anguilla"
            ],
            [
                "AL",
                "Albania"
            ],
            [
                "AO",
                "Angola"
            ],
            [
                "AQ",
                "Antarctica"
            ],
            [
                "CY",
                "Cyprus"
            ],
            [
                "CZ",
                "Czech Republic"
            ],
            [
                "DJ",
                "Djibouti"
            ],
            [
                "DK",
                "Denmark"
            ],
            [
                "DS",
                "American Samoa"
            ],
            [
                "DZ",
                "Algeria"
            ]
        ]
    },
    {
        "question": "List all region names in alphabetical order.",
        "query": "MATCH (region:`storm_record.region`)\nRETURN region.Region_name\nORDER BY region.Region_name",
        "db_id": "storm_record",
        "answers": [
            [
                "Afghanistan"
            ],
            [
                "Albania"
            ],
            [
                "Algeria"
            ],
            [
                "American Samoa"
            ],
            [
                "Andorra"
            ],
            [
                "Angola"
            ],
            [
                "Anguilla"
            ],
            [
                "Antarctica"
            ],
            [
                "Antigua and Barbuda"
            ],
            [
                "Cyprus"
            ],
            [
                "Czech Republic"
            ],
            [
                "Denmark"
            ],
            [
                "Djibouti"
            ]
        ]
    },
    {
        "question": "What are the names of the regions in alphabetical order?",
        "query": "MATCH (region:`storm_record.region`)\nRETURN region.Region_name\nORDER BY region.Region_name",
        "db_id": "storm_record",
        "answers": [
            [
                "Afghanistan"
            ],
            [
                "Albania"
            ],
            [
                "Algeria"
            ],
            [
                "American Samoa"
            ],
            [
                "Andorra"
            ],
            [
                "Angola"
            ],
            [
                "Anguilla"
            ],
            [
                "Antarctica"
            ],
            [
                "Antigua and Barbuda"
            ],
            [
                "Cyprus"
            ],
            [
                "Czech Republic"
            ],
            [
                "Denmark"
            ],
            [
                "Djibouti"
            ]
        ]
    },
    {
        "question": "Show names for all regions except for Denmark.",
        "query": "MATCH (region:`storm_record.region`)\nWHERE region.Region_name <> 'Denmark'\nRETURN region.Region_name",
        "db_id": "storm_record",
        "answers": [
            [
                "Afghanistan"
            ],
            [
                "Albania"
            ],
            [
                "Algeria"
            ],
            [
                "American Samoa"
            ],
            [
                "Andorra"
            ],
            [
                "Angola"
            ],
            [
                "Anguilla"
            ],
            [
                "Antarctica"
            ],
            [
                "Antigua and Barbuda"
            ],
            [
                "Cyprus"
            ],
            [
                "Czech Republic"
            ],
            [
                "Djibouti"
            ]
        ]
    },
    {
        "question": "Return the names of all regions other than Denmark.",
        "query": "MATCH (region:`storm_record.region`)\nWHERE region.Region_name <> 'Denmark'\nRETURN region.Region_name",
        "db_id": "storm_record",
        "answers": [
            [
                "Afghanistan"
            ],
            [
                "Albania"
            ],
            [
                "Algeria"
            ],
            [
                "American Samoa"
            ],
            [
                "Andorra"
            ],
            [
                "Angola"
            ],
            [
                "Anguilla"
            ],
            [
                "Antarctica"
            ],
            [
                "Antigua and Barbuda"
            ],
            [
                "Cyprus"
            ],
            [
                "Czech Republic"
            ],
            [
                "Djibouti"
            ]
        ]
    },
    {
        "question": "How many storms had death records?",
        "query": "MATCH (storm:`storm_record.storm`)\nWHERE storm.Number_Deaths > 0\nRETURN count(*)",
        "db_id": "storm_record",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "Count the number of storms in which at least 1 person died.",
        "query": "MATCH (storm:`storm_record.storm`)\nWHERE storm.Number_Deaths > 0\nRETURN count(*)",
        "db_id": "storm_record",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "List name, dates active, and number of deaths for all storms with at least 1 death.",
        "query": "MATCH (storm:`storm_record.storm`)\nWHERE storm.Number_Deaths >= 1\nRETURN storm.Name,storm.Dates_active,storm.Number_Deaths",
        "db_id": "storm_record",
        "answers": [
            [
                "Two",
                "August3\u2013August10",
                7
            ],
            [
                "Three",
                "August5\u2013August14",
                52
            ],
            [
                "Four",
                "August26\u2013September2",
                7
            ],
            [
                "Five",
                "September7\u2013September17",
                3
            ],
            [
                "Six",
                "September18\u2013September25",
                2
            ],
            [
                "9 cyclones",
                "May19 \u2013October26",
                71
            ]
        ]
    },
    {
        "question": "What are the names, dates active, and number of deaths for storms that had 1 or more death?",
        "query": "MATCH (storm:`storm_record.storm`)\nWHERE storm.Number_Deaths >= 1\nRETURN storm.Name,storm.Dates_active,storm.Number_Deaths",
        "db_id": "storm_record",
        "answers": [
            [
                "Two",
                "August3\u2013August10",
                7
            ],
            [
                "Three",
                "August5\u2013August14",
                52
            ],
            [
                "Four",
                "August26\u2013September2",
                7
            ],
            [
                "Five",
                "September7\u2013September17",
                3
            ],
            [
                "Six",
                "September18\u2013September25",
                2
            ],
            [
                "9 cyclones",
                "May19 \u2013October26",
                71
            ]
        ]
    },
    {
        "question": "Show the average and maximum damage for all storms with max speed higher than 1000.",
        "query": "MATCH (storm:`storm_record.storm`)\nWHERE storm.Max_speed > 1000\nRETURN avg(storm.Damage_millions_USD),max(storm.Damage_millions_USD)",
        "db_id": "storm_record",
        "answers": [
            [
                6.5195,
                13.0
            ]
        ]
    },
    {
        "question": "What is the average and maximum damage in millions for storms that had a max speed over 1000?",
        "query": "MATCH (storm:`storm_record.storm`)\nWHERE storm.Max_speed > 1000\nRETURN avg(storm.Damage_millions_USD),max(storm.Damage_millions_USD)",
        "db_id": "storm_record",
        "answers": [
            [
                6.5195,
                13.0
            ]
        ]
    },
    {
        "question": "List name and damage for all storms in a descending order of max speed.",
        "query": "MATCH (storm:`storm_record.storm`)\nRETURN storm.Name,storm.Damage_millions_USD\nORDER BY storm.Max_speed DESC",
        "db_id": "storm_record",
        "answers": [
            [
                "Nine",
                13.0
            ],
            [
                "Six",
                0.039
            ],
            [
                "One",
                13.0
            ],
            [
                "Five",
                1.49
            ],
            [
                "Eight",
                13.0
            ],
            [
                "Seven",
                13.0
            ],
            [
                "Two",
                10.75
            ],
            [
                "Three",
                13.0
            ],
            [
                "Four",
                4.05
            ],
            [
                "9 cyclones",
                29.3
            ]
        ]
    },
    {
        "question": "What are the names and damage in millions for storms, ordered by their max speeds descending?",
        "query": "MATCH (storm:`storm_record.storm`)\nRETURN storm.Name,storm.Damage_millions_USD\nORDER BY storm.Max_speed DESC",
        "db_id": "storm_record",
        "answers": [
            [
                "Nine",
                13.0
            ],
            [
                "Six",
                0.039
            ],
            [
                "One",
                13.0
            ],
            [
                "Five",
                1.49
            ],
            [
                "Eight",
                13.0
            ],
            [
                "Seven",
                13.0
            ],
            [
                "Two",
                10.75
            ],
            [
                "Three",
                13.0
            ],
            [
                "Four",
                4.05
            ],
            [
                "9 cyclones",
                29.3
            ]
        ]
    },
    {
        "question": "Show the name for regions not affected.",
        "query": "MATCH (region:`storm_record.region`)\nWHERE NOT (region:`storm_record.region`)-[:`storm_record.affected_region`]-()\nRETURN region.Region_name",
        "db_id": "storm_record",
        "answers": [
            [
                "American Samoa"
            ],
            [
                "Andorra"
            ],
            [
                "Angola"
            ],
            [
                "Anguilla"
            ],
            [
                "Antarctica"
            ],
            [
                "Antigua and Barbuda"
            ],
            [
                "Cyprus"
            ],
            [
                "Czech Republic"
            ],
            [
                "Djibouti"
            ]
        ]
    },
    {
        "question": "What are the names of regions that were not affected?",
        "query": "MATCH (region:`storm_record.region`)\nWHERE NOT (region:`storm_record.region`)-[:`storm_record.affected_region`]-()\nRETURN region.Region_name",
        "db_id": "storm_record",
        "answers": [
            [
                "American Samoa"
            ],
            [
                "Andorra"
            ],
            [
                "Angola"
            ],
            [
                "Anguilla"
            ],
            [
                "Antarctica"
            ],
            [
                "Antigua and Barbuda"
            ],
            [
                "Cyprus"
            ],
            [
                "Czech Republic"
            ],
            [
                "Djibouti"
            ]
        ]
    },
    {
        "question": "Show the name for regions and the number of storms for each region.",
        "query": "MATCH (T1:`storm_record.region`)-[T2:`storm_record.affected_region`]-()\nWITH count(T1.Region_id) AS count, T1.Region_name AS Region_name\nRETURN Region_name,count",
        "db_id": "storm_record",
        "answers": [
            [
                "Afghanistan",
                2
            ],
            [
                "Albania",
                2
            ],
            [
                "Algeria",
                1
            ],
            [
                "Denmark",
                1
            ]
        ]
    },
    {
        "question": "How many storms occured in each region?",
        "query": "MATCH (T1:`storm_record.region`)-[T2:`storm_record.affected_region`]-()\nWITH count(T1.Region_id) AS count, T1.Region_name AS Region_name\nRETURN Region_name,count",
        "db_id": "storm_record",
        "answers": [
            [
                "Afghanistan",
                2
            ],
            [
                "Albania",
                2
            ],
            [
                "Algeria",
                1
            ],
            [
                "Denmark",
                1
            ]
        ]
    },
    {
        "question": "List the name for storms and the number of affected regions for each storm.",
        "query": "MATCH (T1:`storm_record.storm`)-[T2:`storm_record.affected_region`]-()\nWITH count(T1.Storm_ID) AS count, T1.Name AS Name\nRETURN Name,count",
        "db_id": "storm_record",
        "answers": [
            [
                "One",
                2
            ],
            [
                "Three",
                1
            ],
            [
                "Four",
                1
            ],
            [
                "Five",
                2
            ]
        ]
    },
    {
        "question": "How many regions were affected by each storm?",
        "query": "MATCH (T1:`storm_record.storm`)-[T2:`storm_record.affected_region`]-()\nWITH count(T1.Storm_ID) AS count, T1.Name AS Name\nRETURN Name,count",
        "db_id": "storm_record",
        "answers": [
            [
                "One",
                2
            ],
            [
                "Three",
                1
            ],
            [
                "Four",
                1
            ],
            [
                "Five",
                2
            ]
        ]
    },
    {
        "question": "Show the name of storms which don't have affected region in record.",
        "query": "MATCH (storm:`storm_record.storm`)\nWHERE NOT (storm:`storm_record.storm`)-[:`storm_record.affected_region`]-()\nRETURN storm.Name",
        "db_id": "storm_record",
        "answers": [
            [
                "Two"
            ],
            [
                "Six"
            ],
            [
                "Seven"
            ],
            [
                "Eight"
            ],
            [
                "Nine"
            ],
            [
                "9 cyclones"
            ]
        ]
    },
    {
        "question": "What are the names of storms that did not affect any regions?",
        "query": "MATCH (storm:`storm_record.storm`)\nWHERE NOT (storm:`storm_record.storm`)-[:`storm_record.affected_region`]-()\nRETURN storm.Name",
        "db_id": "storm_record",
        "answers": [
            [
                "Two"
            ],
            [
                "Six"
            ],
            [
                "Seven"
            ],
            [
                "Eight"
            ],
            [
                "Nine"
            ],
            [
                "9 cyclones"
            ]
        ]
    },
    {
        "question": "Show the region name with at least two storms.",
        "query": "MATCH (T1:`storm_record.region`)-[T2:`storm_record.affected_region`]-()\nWITH count(*) AS count, T1.Region_name AS Region_name\nWHERE count  >= 2\nRETURN Region_name",
        "db_id": "storm_record",
        "answers": [
            [
                "Afghanistan"
            ],
            [
                "Albania"
            ]
        ]
    },
    {
        "question": "What are the names of regions with two or more storms?",
        "query": "MATCH (T1:`storm_record.region`)-[T2:`storm_record.affected_region`]-()\nWITH count(*) AS count, T1.Region_name AS Region_name\nWHERE count  >= 2\nRETURN Region_name",
        "db_id": "storm_record",
        "answers": [
            [
                "Afghanistan"
            ],
            [
                "Albania"
            ]
        ]
    },
    {
        "question": "How many counties are there in total?",
        "query": "MATCH (county:`election.county`)\nRETURN count(*)",
        "db_id": "election",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Count the total number of counties.",
        "query": "MATCH (county:`election.county`)\nRETURN count(*)",
        "db_id": "election",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Show the county name and population of all counties.",
        "query": "MATCH (county:`election.county`)\nRETURN county.County_name,county.Population",
        "db_id": "election",
        "answers": [
            [
                "Howard",
                21000.0
            ],
            [
                "Baltimore County",
                90000.0
            ],
            [
                "Colony",
                79000.0
            ],
            [
                "Mansfield",
                87200.0
            ],
            [
                "Manning",
                13300.0
            ]
        ]
    },
    {
        "question": "What are the name and population of each county?",
        "query": "MATCH (county:`election.county`)\nRETURN county.County_name,county.Population",
        "db_id": "election",
        "answers": [
            [
                "Howard",
                21000.0
            ],
            [
                "Baltimore County",
                90000.0
            ],
            [
                "Colony",
                79000.0
            ],
            [
                "Mansfield",
                87200.0
            ],
            [
                "Manning",
                13300.0
            ]
        ]
    },
    {
        "question": "Show the average population of all counties.",
        "query": "MATCH (county:`election.county`)\nRETURN avg(county.Population)",
        "db_id": "election",
        "answers": [
            [
                58100.0
            ]
        ]
    },
    {
        "question": "On average how large is the population of the counties?",
        "query": "MATCH (county:`election.county`)\nRETURN avg(county.Population)",
        "db_id": "election",
        "answers": [
            [
                58100.0
            ]
        ]
    },
    {
        "question": "Return the maximum and minimum population among all counties.",
        "query": "MATCH (county:`election.county`)\nRETURN max(county.Population),min(county.Population)",
        "db_id": "election",
        "answers": [
            [
                90000.0,
                13300.0
            ]
        ]
    },
    {
        "question": "What are the maximum and minimum population of the counties?",
        "query": "MATCH (county:`election.county`)\nRETURN max(county.Population),min(county.Population)",
        "db_id": "election",
        "answers": [
            [
                90000.0,
                13300.0
            ]
        ]
    },
    {
        "question": "Show all the distinct districts for elections.",
        "query": "MATCH (election:`election.election`)\nRETURN DISTINCT election.District",
        "db_id": "election",
        "answers": [
            [
                1
            ],
            [
                2
            ],
            [
                3
            ],
            [
                4
            ]
        ]
    },
    {
        "question": "What are the distinct districts for elections?",
        "query": "MATCH (election:`election.election`)\nRETURN DISTINCT election.District",
        "db_id": "election",
        "answers": [
            [
                1
            ],
            [
                2
            ],
            [
                3
            ],
            [
                4
            ]
        ]
    },
    {
        "question": "Show the zip code of the county with name \"Howard\".",
        "query": "MATCH (county:`election.county`)\nWHERE county.County_name = 'Howard'\nRETURN county.Zip_code",
        "db_id": "election",
        "answers": [
            [
                "D21"
            ]
        ]
    },
    {
        "question": "What is the zip code the county named \"Howard\" is located in?",
        "query": "MATCH (county:`election.county`)\nWHERE county.County_name = 'Howard'\nRETURN county.Zip_code",
        "db_id": "election",
        "answers": [
            [
                "D21"
            ]
        ]
    },
    {
        "question": "Show the delegate from district 1 in election.",
        "query": "MATCH (election:`election.election`)\nWHERE election.District = 1\nRETURN election.Delegate",
        "db_id": "election",
        "answers": [
            [
                "Bates, Gail H. Gail H. Bates"
            ],
            [
                "Miller, Warren E. Warren E. Miller"
            ],
            [
                "Pendergrass, Shane E. Shane Pendergrass"
            ]
        ]
    },
    {
        "question": "Who is the delegate of district 1 in the elections?",
        "query": "MATCH (election:`election.election`)\nWHERE election.District = 1\nRETURN election.Delegate",
        "db_id": "election",
        "answers": [
            [
                "Bates, Gail H. Gail H. Bates"
            ],
            [
                "Miller, Warren E. Warren E. Miller"
            ],
            [
                "Pendergrass, Shane E. Shane Pendergrass"
            ]
        ]
    },
    {
        "question": "Show the delegate and committee information of elections.",
        "query": "MATCH (election:`election.election`)\nRETURN election.Delegate,election.Committee",
        "db_id": "election",
        "answers": [
            [
                "Bates, Gail H. Gail H. Bates",
                "Appropriations"
            ],
            [
                "Miller, Warren E. Warren E. Miller",
                "Economic Matters"
            ],
            [
                "DeBoy, Steven J. Sr. Steven J. DeBoy, Sr.",
                "Appropriations"
            ],
            [
                "Malone, James E. Jr. James E. Malone, Jr.",
                "Environmental Matters (Vice-Chair)"
            ],
            [
                "Bobo, Elizabeth Elizabeth Bobo",
                "Environmental Matters"
            ],
            [
                "Pendergrass, Shane E. Shane Pendergrass",
                "Health and Government Operations"
            ],
            [
                "Guzzone, Guy Guy Guzzone",
                "Appropriations"
            ],
            [
                "Turner, Frank S. Frank S. Turner",
                "Ways and Means"
            ]
        ]
    },
    {
        "question": "What are the delegate and committee information for each election record?",
        "query": "MATCH (election:`election.election`)\nRETURN election.Delegate,election.Committee",
        "db_id": "election",
        "answers": [
            [
                "Bates, Gail H. Gail H. Bates",
                "Appropriations"
            ],
            [
                "Miller, Warren E. Warren E. Miller",
                "Economic Matters"
            ],
            [
                "DeBoy, Steven J. Sr. Steven J. DeBoy, Sr.",
                "Appropriations"
            ],
            [
                "Malone, James E. Jr. James E. Malone, Jr.",
                "Environmental Matters (Vice-Chair)"
            ],
            [
                "Bobo, Elizabeth Elizabeth Bobo",
                "Environmental Matters"
            ],
            [
                "Pendergrass, Shane E. Shane Pendergrass",
                "Health and Government Operations"
            ],
            [
                "Guzzone, Guy Guy Guzzone",
                "Appropriations"
            ],
            [
                "Turner, Frank S. Frank S. Turner",
                "Ways and Means"
            ]
        ]
    },
    {
        "question": "How many distinct governors are there?",
        "query": "MATCH (party:`election.party`)\nRETURN count(DISTINCT party.Governor)",
        "db_id": "election",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Count the number of distinct governors.",
        "query": "MATCH (party:`election.party`)\nRETURN count(DISTINCT party.Governor)",
        "db_id": "election",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Show the lieutenant governor and comptroller from the democratic party.",
        "query": "MATCH (party:`election.party`)\nWHERE party.Party = 'Democratic'\nRETURN party.Lieutenant_Governor,party.Comptroller",
        "db_id": "election",
        "answers": [
            [
                "Sandra Frankel",
                "Carl McCall"
            ],
            [
                "Dennis Mehiel",
                "Alan Hevesi"
            ],
            [
                "David Paterson",
                "Alan Hevesi"
            ]
        ]
    },
    {
        "question": "Who are the lieutenant governor and comptroller from the democratic party?",
        "query": "MATCH (party:`election.party`)\nWHERE party.Party = 'Democratic'\nRETURN party.Lieutenant_Governor,party.Comptroller",
        "db_id": "election",
        "answers": [
            [
                "Sandra Frankel",
                "Carl McCall"
            ],
            [
                "Dennis Mehiel",
                "Alan Hevesi"
            ],
            [
                "David Paterson",
                "Alan Hevesi"
            ]
        ]
    },
    {
        "question": "In which distinct years was the governor \"Eliot Spitzer\"?",
        "query": "MATCH (party:`election.party`)\nWHERE party.Governor = 'Eliot Spitzer'\nRETURN DISTINCT party.Year",
        "db_id": "election",
        "answers": [
            [
                2006.0
            ]
        ]
    },
    {
        "question": "Find the distinct years when the governor was named \"Eliot Spitzer\".",
        "query": "MATCH (party:`election.party`)\nWHERE party.Governor = 'Eliot Spitzer'\nRETURN DISTINCT party.Year",
        "db_id": "election",
        "answers": [
            [
                2006.0
            ]
        ]
    },
    {
        "question": "Return the names of all counties sorted by population in ascending order.",
        "query": "MATCH (county:`election.county`)\nRETURN county.County_name\nORDER BY county.Population ASC",
        "db_id": "election",
        "answers": [
            [
                "Manning"
            ],
            [
                "Howard"
            ],
            [
                "Colony"
            ],
            [
                "Mansfield"
            ],
            [
                "Baltimore County"
            ]
        ]
    },
    {
        "question": "Sort the names of all counties in ascending order of population.",
        "query": "MATCH (county:`election.county`)\nRETURN county.County_name\nORDER BY county.Population ASC",
        "db_id": "election",
        "answers": [
            [
                "Manning"
            ],
            [
                "Howard"
            ],
            [
                "Colony"
            ],
            [
                "Mansfield"
            ],
            [
                "Baltimore County"
            ]
        ]
    },
    {
        "question": "Return the names of all counties sorted by county name in descending alphabetical order.",
        "query": "MATCH (county:`election.county`)\nRETURN county.County_name\nORDER BY county.County_name DESC",
        "db_id": "election",
        "answers": [
            [
                "Mansfield"
            ],
            [
                "Manning"
            ],
            [
                "Howard"
            ],
            [
                "Colony"
            ],
            [
                "Baltimore County"
            ]
        ]
    },
    {
        "question": "Sort the names of all counties in descending alphabetical order.",
        "query": "MATCH (county:`election.county`)\nRETURN county.County_name\nORDER BY county.County_name DESC",
        "db_id": "election",
        "answers": [
            [
                "Mansfield"
            ],
            [
                "Manning"
            ],
            [
                "Howard"
            ],
            [
                "Colony"
            ],
            [
                "Baltimore County"
            ]
        ]
    },
    {
        "question": "Show the name of the county with the biggest population.",
        "query": "MATCH (county:`election.county`)\nRETURN county.County_name\nORDER BY county.Population DESC\nLIMIT 1",
        "db_id": "election",
        "answers": [
            [
                "Baltimore County"
            ]
        ]
    },
    {
        "question": "Which county has the largest population? Give me the name of the county.",
        "query": "MATCH (county:`election.county`)\nRETURN county.County_name\nORDER BY county.Population DESC\nLIMIT 1",
        "db_id": "election",
        "answers": [
            [
                "Baltimore County"
            ]
        ]
    },
    {
        "question": "Show the 3 counties with the smallest population.",
        "query": "MATCH (county:`election.county`)\nRETURN county.County_name\nORDER BY county.Population ASC\nLIMIT 3",
        "db_id": "election",
        "answers": [
            [
                "Manning"
            ],
            [
                "Howard"
            ],
            [
                "Colony"
            ]
        ]
    },
    {
        "question": "What are the 3 counties that have the smallest population? Give me the county names.",
        "query": "MATCH (county:`election.county`)\nRETURN county.County_name\nORDER BY county.Population ASC\nLIMIT 3",
        "db_id": "election",
        "answers": [
            [
                "Manning"
            ],
            [
                "Howard"
            ],
            [
                "Colony"
            ]
        ]
    },
    {
        "question": "Show the name of the party that has at least two records.",
        "query": "MATCH (party:`election.party`)\nWITH count(*) AS count, party.Party AS Party\nWHERE count  >= 2\nRETURN Party",
        "db_id": "election",
        "answers": [
            [
                "Democratic"
            ],
            [
                "Independence"
            ]
        ]
    },
    {
        "question": "Which party has two or more records?",
        "query": "MATCH (party:`election.party`)\nWITH count(*) AS count, party.Party AS Party\nWHERE count  >= 2\nRETURN Party",
        "db_id": "election",
        "answers": [
            [
                "Democratic"
            ],
            [
                "Independence"
            ]
        ]
    },
    {
        "question": "Show the people that have been governor the most times.",
        "query": "MATCH (party:`election.party`)\nWITH party.Governor AS Governor, count(party.Governor) AS count\nRETURN Governor\nORDER BY count DESC\nLIMIT 1",
        "db_id": "election",
        "answers": [
            [
                "Eliot Spitzer"
            ]
        ]
    },
    {
        "question": "Which people severed as governor most frequently?",
        "query": "MATCH (party:`election.party`)\nWITH party.Governor AS Governor, count(party.Governor) AS count\nRETURN Governor\nORDER BY count DESC\nLIMIT 1",
        "db_id": "election",
        "answers": [
            [
                "Eliot Spitzer"
            ]
        ]
    },
    {
        "question": "Show the people that have been comptroller the most times and the corresponding number of times.",
        "query": "MATCH (party:`election.party`)\nWITH party.Comptroller AS Comptroller, count(party.Comptroller) AS count\nRETURN Comptroller,count\nORDER BY count DESC\nLIMIT 1",
        "db_id": "election",
        "answers": [
            [
                "Alan Hevesi",
                4
            ]
        ]
    },
    {
        "question": "Which people severed as comptroller most frequently? Give me the name of the person and the frequency count.",
        "query": "MATCH (party:`election.party`)\nWITH party.Comptroller AS Comptroller, count(party.Comptroller) AS count\nRETURN Comptroller,count\nORDER BY count DESC\nLIMIT 1",
        "db_id": "election",
        "answers": [
            [
                "Alan Hevesi",
                4
            ]
        ]
    },
    {
        "question": "How many journalists are there?",
        "query": "MATCH (journalist:`news_report.journalist`)\nRETURN count(*)",
        "db_id": "news_report",
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "question": "List the names of journalists in ascending order of years working.",
        "query": "MATCH (journalist:`news_report.journalist`)\nRETURN journalist.Name\nORDER BY journalist.Years_working ASC",
        "db_id": "news_report",
        "answers": [
            [
                "Tom Briggs"
            ],
            [
                "Ray Ferris"
            ],
            [
                "Fred Keenor"
            ],
            [
                "George Gilchrist"
            ],
            [
                "Fred Chandler"
            ],
            [
                "John Meaney"
            ],
            [
                "Jack Meaney"
            ],
            [
                "Frank Mitcheson"
            ],
            [
                "Herbert Swindells"
            ],
            [
                "Tony Waddington"
            ],
            [
                "Jackie Waring"
            ]
        ]
    },
    {
        "question": "What are the nationalities and ages of journalists?",
        "query": "MATCH (journalist:`news_report.journalist`)\nRETURN journalist.Nationality,journalist.Age",
        "db_id": "news_report",
        "answers": [
            [
                "England",
                "37"
            ],
            [
                "Wales",
                "27"
            ],
            [
                "England",
                "28"
            ],
            [
                "England",
                "43"
            ],
            [
                "England",
                "34"
            ],
            [
                "Northern Ireland",
                "29"
            ],
            [
                "England",
                "28"
            ],
            [
                "England",
                "43"
            ],
            [
                "England",
                "37"
            ],
            [
                "England",
                "33"
            ],
            [
                "England",
                "25"
            ]
        ]
    },
    {
        "question": "Show the names of journalists from \"England\" or \"Wales\".",
        "query": "MATCH (journalist:`news_report.journalist`)\nWHERE journalist.Nationality = 'England' OR journalist.Nationality = 'Wales'\nRETURN journalist.Name",
        "db_id": "news_report",
        "answers": [
            [
                "Herbert Swindells"
            ],
            [
                "Fred Keenor"
            ],
            [
                "George Gilchrist"
            ],
            [
                "Jackie Waring"
            ],
            [
                "Fred Chandler"
            ],
            [
                "John Meaney"
            ],
            [
                "Tony Waddington"
            ],
            [
                "Jack Meaney"
            ],
            [
                "Frank Mitcheson"
            ],
            [
                "Tom Briggs"
            ]
        ]
    },
    {
        "question": "What is the nationality of the journalist with the largest number of years working?",
        "query": "MATCH (journalist:`news_report.journalist`)\nRETURN journalist.Nationality\nORDER BY journalist.Years_working DESC\nLIMIT 1",
        "db_id": "news_report",
        "answers": [
            [
                "England"
            ]
        ]
    },
    {
        "question": "Show the different nationalities and the number of journalists of each nationality.",
        "query": "MATCH (journalist:`news_report.journalist`)\nWITH count(journalist.Nationality) AS count, journalist.Nationality AS Nationality\nRETURN Nationality,count",
        "db_id": "news_report",
        "answers": [
            [
                "England",
                9
            ],
            [
                "Wales",
                1
            ],
            [
                "Northern Ireland",
                1
            ]
        ]
    },
    {
        "question": "Show the most common nationality for journalists.",
        "query": "MATCH (journalist:`news_report.journalist`)\nWITH count(journalist.Nationality) AS count, journalist.Nationality AS Nationality\nRETURN Nationality\nORDER BY count DESC\nLIMIT 1",
        "db_id": "news_report",
        "answers": [
            [
                "England"
            ]
        ]
    },
    {
        "question": "Show the names of journalists and the dates of the events they reported.",
        "query": "MATCH ()-[T1:`news_report.news_report`]-(T2:`news_report.event`)-[]-(T3:`news_report.journalist`)\nRETURN T3.Name,T2.Date",
        "db_id": "news_report",
        "answers": [
            [
                "Jackie Waring",
                "13 October 2008"
            ],
            [
                "Ray Ferris",
                "13 October 2008"
            ],
            [
                "John Meaney",
                "9 April 2014"
            ],
            [
                "Tom Briggs",
                "9 April 2014"
            ]
        ]
    },
    {
        "question": "Show the names of journalists and the names of the events they reported in ascending order",
        "query": "MATCH ()-[T1:`news_report.news_report`]-(T2:`news_report.event`)-[]-(T3:`news_report.journalist`)\nRETURN T3.Name,T2.Name\nORDER BY T2.Event_Attendance ASC",
        "db_id": "news_report",
        "answers": [
            [
                "John Meaney",
                "Special Exhibition"
            ],
            [
                "Tom Briggs",
                "Special Exhibition"
            ],
            [
                "Jackie Waring",
                "Olympia Games Openning"
            ],
            [
                "Ray Ferris",
                "Olympia Games Openning"
            ]
        ]
    },
    {
        "question": "List the names of journalists who have not reported any event.",
        "query": "MATCH (journalist:`news_report.journalist`)\nWHERE NOT (journalist:`news_report.journalist`)-[:`news_report.news_report`]-()\nRETURN journalist.Name",
        "db_id": "news_report",
        "answers": [
            [
                "Fred Keenor"
            ],
            [
                "George Gilchrist"
            ],
            [
                "Fred Chandler"
            ],
            [
                "Jack Meaney"
            ],
            [
                "Frank Mitcheson"
            ]
        ]
    },
    {
        "question": "what are the average and maximum attendances of all events?",
        "query": "MATCH (event:`news_report.event`)\nRETURN avg(event.Event_Attendance),max(event.Event_Attendance)",
        "db_id": "news_report",
        "answers": [
            [
                2255.0,
                6650
            ]
        ]
    },
    {
        "question": "List the event venues and names that have the top 2 most number of people attended.",
        "query": "MATCH (event:`news_report.event`)\nRETURN event.Venue,event.Name\nORDER BY event.Event_Attendance DESC\nLIMIT 2",
        "db_id": "news_report",
        "answers": [
            [
                "Marathon",
                "Olympia Games Openning"
            ],
            [
                "Platense",
                "Global Awarding"
            ]
        ]
    },
    {
        "question": "Show me all the restaurants.",
        "query": "MATCH (restaurant:`restaurant_1.Restaurant`)\nRETURN restaurant.ResName",
        "db_id": "restaurant_1",
        "answers": [
            [
                "Subway"
            ],
            [
                "Honeygrow"
            ]
        ]
    },
    {
        "question": "What is the address of the restaurant Subway?",
        "query": "MATCH (restaurant:`restaurant_1.Restaurant`)\nWHERE restaurant.ResName = 'Subway'\nRETURN restaurant.Address",
        "db_id": "restaurant_1",
        "answers": [
            [
                "3233 St Paul St, Baltimore, MD 21218"
            ]
        ]
    },
    {
        "question": "What is the rating of the restaurant Subway?",
        "query": "MATCH (restaurant:`restaurant_1.Restaurant`)\nWHERE restaurant.ResName = 'Subway'\nRETURN restaurant.Rating",
        "db_id": "restaurant_1",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "List all restaurant types.",
        "query": "MATCH (restaurant_type:`restaurant_1.Restaurant_Type`)\nRETURN restaurant_type.ResTypeName",
        "db_id": "restaurant_1",
        "answers": [
            [
                "Sandwich"
            ],
            [
                "Stir-fry"
            ]
        ]
    },
    {
        "question": "What is the description of the restaurant type Sandwich?",
        "query": "MATCH (restaurant_type:`restaurant_1.Restaurant_Type`)\nWHERE restaurant_type.ResTypeName = 'Sandwich'\nRETURN restaurant_type.ResTypeDescription",
        "db_id": "restaurant_1",
        "answers": [
            [
                "Simplest there is."
            ]
        ]
    },
    {
        "question": "Which restaurants have highest rating? List the restaurant name and its rating.",
        "query": "MATCH (restaurant:`restaurant_1.Restaurant`)\nRETURN restaurant.ResName,restaurant.Rating\nORDER BY restaurant.Rating DESC\nLIMIT 1",
        "db_id": "restaurant_1",
        "answers": [
            [
                "Honeygrow",
                4
            ]
        ]
    },
    {
        "question": "What is the age of student Linda Smith?",
        "query": "MATCH (student:`restaurant_1.Student`)\nWHERE student.Fname = 'Linda' AND student.LName = 'Smith'\nRETURN student.Age",
        "db_id": "restaurant_1",
        "answers": [
            [
                18
            ]
        ]
    },
    {
        "question": "What is the gender of the student Linda Smith?",
        "query": "MATCH (student:`restaurant_1.Student`)\nWHERE student.Fname = 'Linda' AND student.LName = 'Smith'\nRETURN student.Sex",
        "db_id": "restaurant_1",
        "answers": [
            [
                "F"
            ]
        ]
    },
    {
        "question": "List all students' first names and last names who majored in 600.",
        "query": "MATCH (student:`restaurant_1.Student`)\nWHERE student.Major = 600\nRETURN student.Fname,student.LName",
        "db_id": "restaurant_1",
        "answers": [
            [
                "Linda",
                "Smith"
            ],
            [
                "Tracy",
                "Kim"
            ],
            [
                "Shiela",
                "Jones"
            ],
            [
                "Dinesh",
                "Kumar"
            ],
            [
                "Paul",
                "Gompers"
            ],
            [
                "Andy",
                "Schultz"
            ],
            [
                "Lisa",
                "Apap"
            ],
            [
                "Jandy",
                "Nelson"
            ],
            [
                "Eric",
                "Tai"
            ],
            [
                "Derek",
                "Lee"
            ],
            [
                "David",
                "Adams"
            ],
            [
                "Steven",
                "Davis"
            ],
            [
                "Charles",
                "Norris"
            ],
            [
                "Susan",
                "Lee"
            ],
            [
                "Mark",
                "Schwartz"
            ],
            [
                "Bruce",
                "Wilson"
            ],
            [
                "Michael",
                "Leighton"
            ],
            [
                "Arthur",
                "Pang"
            ]
        ]
    },
    {
        "question": "Which city does student Linda Smith live in?",
        "query": "MATCH (student:`restaurant_1.Student`)\nWHERE student.Fname = 'Linda' AND student.LName = 'Smith'\nRETURN student.city_code",
        "db_id": "restaurant_1",
        "answers": [
            [
                "BAL"
            ]
        ]
    },
    {
        "question": "Advisor 1121 has how many students?",
        "query": "MATCH (student:`restaurant_1.Student`)\nWHERE student.Advisor = 1121\nRETURN count(*)",
        "db_id": "restaurant_1",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Which student's age is older than 18 and is majoring in 600? List each student's first and last name.",
        "query": "MATCH (student:`restaurant_1.Student`)\nWHERE student.Age > 18 AND student.Major = 600\nRETURN student.Fname,student.LName",
        "db_id": "restaurant_1",
        "answers": [
            [
                "Tracy",
                "Kim"
            ],
            [
                "Shiela",
                "Jones"
            ],
            [
                "Dinesh",
                "Kumar"
            ],
            [
                "Paul",
                "Gompers"
            ],
            [
                "Jandy",
                "Nelson"
            ],
            [
                "Eric",
                "Tai"
            ],
            [
                "David",
                "Adams"
            ],
            [
                "Steven",
                "Davis"
            ],
            [
                "Bruce",
                "Wilson"
            ],
            [
                "Michael",
                "Leighton"
            ]
        ]
    },
    {
        "question": "List all female students age is older than 18 who is not majoring in 600. List students' first name and last name.",
        "query": "MATCH (student:`restaurant_1.Student`)\nWHERE student.Age > 18 AND student.Major <> 600 AND student.Sex = 'F'\nRETURN student.Fname,student.LName",
        "db_id": "restaurant_1",
        "answers": [
            [
                "Lisa",
                "Cheng"
            ],
            [
                "Sarah",
                "Smith"
            ],
            [
                "Sarah",
                "Schmidt"
            ]
        ]
    },
    {
        "question": "Find the ids of orders whose status is 'Success'.",
        "query": "MATCH (actual_orders:`customer_deliveries.Actual_Orders`)\nWHERE actual_orders.order_status_code = 'Success'\nRETURN actual_orders.actual_order_id",
        "db_id": "customer_deliveries",
        "answers": [
            [
                1
            ],
            [
                6
            ],
            [
                7
            ],
            [
                9
            ],
            [
                10
            ]
        ]
    },
    {
        "question": "Find the number of customers in total.",
        "query": "MATCH (customers:`customer_deliveries.Customers`)\nRETURN count(*)",
        "db_id": "customer_deliveries",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "How many different payment methods are there?",
        "query": "MATCH (customers:`customer_deliveries.Customers`)\nRETURN count(DISTINCT customers.payment_method)",
        "db_id": "customer_deliveries",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "Show the details of all trucks in the order of their license number.",
        "query": "MATCH (trucks:`customer_deliveries.Trucks`)\nRETURN trucks.truck_details\nORDER BY trucks.truck_licence_number",
        "db_id": "customer_deliveries",
        "answers": [
            [
                "Laverna"
            ],
            [
                "Kaya"
            ],
            [
                "Deon"
            ],
            [
                "Ricky"
            ],
            [
                "Randy"
            ],
            [
                "Holly"
            ],
            [
                "Rosamond"
            ],
            [
                "Frida"
            ],
            [
                "Queen"
            ],
            [
                "Rebeka"
            ],
            [
                "Luisa"
            ],
            [
                "Bud"
            ],
            [
                "Joanny"
            ],
            [
                "Efren"
            ],
            [
                "Stacy"
            ]
        ]
    },
    {
        "question": "Find the name of the most expensive product.",
        "query": "MATCH (products:`customer_deliveries.Products`)\nRETURN products.product_name\nORDER BY products.product_price DESC\nLIMIT 1",
        "db_id": "customer_deliveries",
        "answers": [
            [
                "books"
            ]
        ]
    },
    {
        "question": "List the names and emails of customers who payed by Visa card.",
        "query": "MATCH (customers:`customer_deliveries.Customers`)\nWHERE customers.payment_method = 'Visa'\nRETURN customers.customer_email,customers.customer_name",
        "db_id": "customer_deliveries",
        "answers": [
            [
                "shaniya45@example.net",
                "Ron Emard"
            ],
            [
                "dedric17@example.org",
                "Jaden Lang"
            ],
            [
                "elmira.langworth@example.org",
                "Geovanni Grady"
            ],
            [
                "reichel.winnifred@example.org",
                "Dr. Karine Farrell"
            ],
            [
                "leann.hamill@example.org",
                "Lila Howe"
            ],
            [
                "danika49@example.com",
                "Amalia Hudson DDS"
            ],
            [
                "adriana83@example.org",
                "Annabell Walsh"
            ],
            [
                "rollin95@example.net",
                "Aracely Borer V"
            ]
        ]
    },
    {
        "question": "Find the states which do not have any employee in their record.",
        "query": "MATCH (addresses:`customer_deliveries.Addresses`)\nWHERE NOT (addresses:`customer_deliveries.Addresses`)-[]-(:`customer_deliveries.Employees`)\nRETURN addresses.state_province_county",
        "db_id": "customer_deliveries",
        "answers": [
            [
                "Colorado"
            ],
            [
                "Idaho"
            ],
            [
                "Maine"
            ],
            [
                "Washington"
            ]
        ]
    },
    {
        "question": "List the names, phone numbers, and emails of all customers sorted by their dates of becoming customers.",
        "query": "MATCH (customers:`customer_deliveries.Customers`)\nRETURN customers.customer_name,customers.customer_phone,customers.customer_email\nORDER BY customers.date_became_customer",
        "db_id": "customer_deliveries",
        "answers": [
            [
                "Verda Streich",
                "06730471330",
                "xgraham@example.org"
            ],
            [
                "Jaden Lang",
                "361.151.3489x7272",
                "dedric17@example.org"
            ],
            [
                "Dr. Karine Farrell",
                "+49(2)0677806107",
                "reichel.winnifred@example.org"
            ],
            [
                "Ron Emard",
                "1-382-503-5179x53639",
                "shaniya45@example.net"
            ],
            [
                "Gabe Schroeder",
                "1-728-537-4293x0885",
                "alexandra91@example.net"
            ],
            [
                "Candace Schneider",
                "940.575.3682x7959",
                "tkassulke@example.com"
            ],
            [
                "Keenan Kuhic",
                "686-517-9923x348",
                "dallin76@example.org"
            ],
            [
                "Emmanuel Reilly",
                "129.959.6420",
                "gleichner.ethelyn@example.net"
            ],
            [
                "Lila Howe",
                "1-492-284-1097",
                "leann.hamill@example.org"
            ],
            [
                "Amalia Hudson DDS",
                "003-991-1506x483",
                "danika49@example.com"
            ],
            [
                "Rusty Morar",
                "1-123-197-9677x7194",
                "njenkins@example.org"
            ],
            [
                "Aracely Borer V",
                "531-617-3230",
                "rollin95@example.net"
            ],
            [
                "Patience Yundt",
                "969-208-8932x715",
                "kira82@example.com"
            ],
            [
                "Geovanni Grady",
                "1-005-644-2495",
                "elmira.langworth@example.org"
            ],
            [
                "Annabell Walsh",
                "(881)096-1281x6448",
                "adriana83@example.org"
            ]
        ]
    },
    {
        "question": "Find the name of the first 5 customers.",
        "query": "MATCH (customers:`customer_deliveries.Customers`)\nRETURN customers.customer_name\nORDER BY customers.date_became_customer\nLIMIT 5",
        "db_id": "customer_deliveries",
        "answers": [
            [
                "Verda Streich"
            ],
            [
                "Jaden Lang"
            ],
            [
                "Dr. Karine Farrell"
            ],
            [
                "Ron Emard"
            ],
            [
                "Gabe Schroeder"
            ]
        ]
    },
    {
        "question": "Find the payment method that is used most frequently.",
        "query": "MATCH (customers:`customer_deliveries.Customers`)\nWITH count(customers.payment_method) AS count, customers.payment_method AS payment_method\nRETURN payment_method\nORDER BY count DESC\nLIMIT 1",
        "db_id": "customer_deliveries",
        "answers": [
            [
                "Visa"
            ]
        ]
    },
    {
        "question": "List the names of all routes in alphabetic order.",
        "query": "MATCH (delivery_routes:`customer_deliveries.Delivery_Routes`)\nRETURN delivery_routes.route_name\nORDER BY delivery_routes.route_name",
        "db_id": "customer_deliveries",
        "answers": [
            [
                "Abshire Ltd"
            ],
            [
                "Adams, Macejkovic and Carroll"
            ],
            [
                "Brekke, Powlowski and Fritsch"
            ],
            [
                "Gerhold Inc"
            ],
            [
                "Gorczany Group"
            ],
            [
                "Grady, King and Price"
            ],
            [
                "Hegmann-Waters"
            ],
            [
                "Heidenreich Group"
            ],
            [
                "Hermiston, Feeney and Daugherty"
            ],
            [
                "Huel, Armstrong and Senger"
            ],
            [
                "Nader, Leuschke and Huels"
            ],
            [
                "Renner-Kovacek"
            ],
            [
                "Schowalter Group"
            ],
            [
                "Streich, Spencer and Brakus"
            ],
            [
                "Torphy Ltd"
            ]
        ]
    },
    {
        "question": "How many authors are there?",
        "query": "MATCH (authors:`icfp_1.Authors`)\nRETURN count(*)",
        "db_id": "icfp_1",
        "answers": [
            [
                13
            ]
        ]
    },
    {
        "question": "Count the number of authors.",
        "query": "MATCH (authors:`icfp_1.Authors`)\nRETURN count(*)",
        "db_id": "icfp_1",
        "answers": [
            [
                13
            ]
        ]
    },
    {
        "question": "How many institutions are there?",
        "query": "MATCH (inst:`icfp_1.Inst`)\nRETURN count(*)",
        "db_id": "icfp_1",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "Count the number of institutions.",
        "query": "MATCH (inst:`icfp_1.Inst`)\nRETURN count(*)",
        "db_id": "icfp_1",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "How many papers are published in total?",
        "query": "MATCH (papers:`icfp_1.Papers`)\nRETURN count(*)",
        "db_id": "icfp_1",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "Count the number of total papers.",
        "query": "MATCH (papers:`icfp_1.Papers`)\nRETURN count(*)",
        "db_id": "icfp_1",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "What is the first name of the author with last name \"Ueno\"?",
        "query": "MATCH (authors:`icfp_1.Authors`)\nWHERE authors.lname = 'Ueno'\nRETURN authors.fname",
        "db_id": "icfp_1",
        "answers": [
            [
                "Katsuhiro"
            ]
        ]
    },
    {
        "question": "Which authors have last name \"Ueno\"? List their first names.",
        "query": "MATCH (authors:`icfp_1.Authors`)\nWHERE authors.lname = 'Ueno'\nRETURN authors.fname",
        "db_id": "icfp_1",
        "answers": [
            [
                "Katsuhiro"
            ]
        ]
    },
    {
        "question": "Find the last name of the author with first name \"Amal\".",
        "query": "MATCH (authors:`icfp_1.Authors`)\nWHERE authors.fname = 'Amal'\nRETURN authors.lname",
        "db_id": "icfp_1",
        "answers": [
            [
                "Ahmed"
            ]
        ]
    },
    {
        "question": "Which authors have first name \"Amal\"? List their last names.",
        "query": "MATCH (authors:`icfp_1.Authors`)\nWHERE authors.fname = 'Amal'\nRETURN authors.lname",
        "db_id": "icfp_1",
        "answers": [
            [
                "Ahmed"
            ]
        ]
    },
    {
        "question": "Find the first names of all the authors ordered in alphabetical order.",
        "query": "MATCH (authors:`icfp_1.Authors`)\nRETURN authors.fname\nORDER BY authors.fname",
        "db_id": "icfp_1",
        "answers": [
            [
                "Aaron"
            ],
            [
                "Amal"
            ],
            [
                "Atsushi"
            ],
            [
                "Brent"
            ],
            [
                "Daniel W. H."
            ],
            [
                "Jeremy"
            ],
            [
                "Katsuhiro"
            ],
            [
                "Matthias"
            ],
            [
                "Nicolas"
            ],
            [
                "Olin"
            ],
            [
                "Ralf"
            ],
            [
                "Stephanie"
            ],
            [
                "Tim"
            ]
        ]
    },
    {
        "question": "Sort the first names of all the authors in alphabetical order.",
        "query": "MATCH (authors:`icfp_1.Authors`)\nRETURN authors.fname\nORDER BY authors.fname",
        "db_id": "icfp_1",
        "answers": [
            [
                "Aaron"
            ],
            [
                "Amal"
            ],
            [
                "Atsushi"
            ],
            [
                "Brent"
            ],
            [
                "Daniel W. H."
            ],
            [
                "Jeremy"
            ],
            [
                "Katsuhiro"
            ],
            [
                "Matthias"
            ],
            [
                "Nicolas"
            ],
            [
                "Olin"
            ],
            [
                "Ralf"
            ],
            [
                "Stephanie"
            ],
            [
                "Tim"
            ]
        ]
    },
    {
        "question": "Retrieve all the last names of authors in alphabetical order.",
        "query": "MATCH (authors:`icfp_1.Authors`)\nRETURN authors.lname\nORDER BY authors.lname",
        "db_id": "icfp_1",
        "answers": [
            [
                "Ahmed"
            ],
            [
                "Blume"
            ],
            [
                "Gibbons"
            ],
            [
                "Hinze"
            ],
            [
                "James"
            ],
            [
                "Ohori"
            ],
            [
                "Pouillard"
            ],
            [
                "Sheard"
            ],
            [
                "Shivers"
            ],
            [
                "Turon"
            ],
            [
                "Ueno"
            ],
            [
                "Weirich"
            ],
            [
                "Yorgey"
            ]
        ]
    },
    {
        "question": "Give me a list of all the last names of authors sorted in alphabetical order",
        "query": "MATCH (authors:`icfp_1.Authors`)\nRETURN authors.lname\nORDER BY authors.lname",
        "db_id": "icfp_1",
        "answers": [
            [
                "Ahmed"
            ],
            [
                "Blume"
            ],
            [
                "Gibbons"
            ],
            [
                "Hinze"
            ],
            [
                "James"
            ],
            [
                "Ohori"
            ],
            [
                "Pouillard"
            ],
            [
                "Sheard"
            ],
            [
                "Shivers"
            ],
            [
                "Turon"
            ],
            [
                "Ueno"
            ],
            [
                "Weirich"
            ],
            [
                "Yorgey"
            ]
        ]
    },
    {
        "question": "Retrieve all the first and last names of authors in the alphabetical order of last names.",
        "query": "MATCH (authors:`icfp_1.Authors`)\nRETURN authors.fname,authors.lname\nORDER BY authors.lname",
        "db_id": "icfp_1",
        "answers": [
            [
                "Amal",
                "Ahmed"
            ],
            [
                "Matthias",
                "Blume"
            ],
            [
                "Jeremy",
                "Gibbons"
            ],
            [
                "Ralf",
                "Hinze"
            ],
            [
                "Daniel W. H.",
                "James"
            ],
            [
                "Atsushi",
                "Ohori"
            ],
            [
                "Nicolas",
                "Pouillard"
            ],
            [
                "Tim",
                "Sheard"
            ],
            [
                "Olin",
                "Shivers"
            ],
            [
                "Aaron",
                "Turon"
            ],
            [
                "Katsuhiro",
                "Ueno"
            ],
            [
                "Stephanie",
                "Weirich"
            ],
            [
                "Brent",
                "Yorgey"
            ]
        ]
    },
    {
        "question": "Sort the list of all the first and last names of authors in alphabetical order of the last names.",
        "query": "MATCH (authors:`icfp_1.Authors`)\nRETURN authors.fname,authors.lname\nORDER BY authors.lname",
        "db_id": "icfp_1",
        "answers": [
            [
                "Amal",
                "Ahmed"
            ],
            [
                "Matthias",
                "Blume"
            ],
            [
                "Jeremy",
                "Gibbons"
            ],
            [
                "Ralf",
                "Hinze"
            ],
            [
                "Daniel W. H.",
                "James"
            ],
            [
                "Atsushi",
                "Ohori"
            ],
            [
                "Nicolas",
                "Pouillard"
            ],
            [
                "Tim",
                "Sheard"
            ],
            [
                "Olin",
                "Shivers"
            ],
            [
                "Aaron",
                "Turon"
            ],
            [
                "Katsuhiro",
                "Ueno"
            ],
            [
                "Stephanie",
                "Weirich"
            ],
            [
                "Brent",
                "Yorgey"
            ]
        ]
    },
    {
        "question": "How many stores are there?",
        "query": "MATCH (store:`sakila_1.store`)\nRETURN count(*)",
        "db_id": "sakila_1",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Count the number of stores.",
        "query": "MATCH (store:`sakila_1.store`)\nRETURN count(*)",
        "db_id": "sakila_1",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many bank branches are there?",
        "query": "MATCH (bank:`loan_1.bank`)\nRETURN count(*)",
        "db_id": "loan_1",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "Count the number of bank branches.",
        "query": "MATCH (bank:`loan_1.bank`)\nRETURN count(*)",
        "db_id": "loan_1",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "Find the average number of customers in all banks of Utah state.",
        "query": "MATCH (bank:`loan_1.bank`)\nWHERE bank.state = 'Utah'\nRETURN avg(bank.no_of_customers)",
        "db_id": "loan_1",
        "answers": [
            [
                123.0
            ]
        ]
    },
    {
        "question": "What is the average number of customers across banks in the state of Utah?",
        "query": "MATCH (bank:`loan_1.bank`)\nWHERE bank.state = 'Utah'\nRETURN avg(bank.no_of_customers)",
        "db_id": "loan_1",
        "answers": [
            [
                123.0
            ]
        ]
    },
    {
        "question": "Find the average number of customers cross all banks.",
        "query": "MATCH (bank:`loan_1.bank`)\nRETURN avg(bank.no_of_customers)",
        "db_id": "loan_1",
        "answers": [
            [
                286.5
            ]
        ]
    },
    {
        "question": "What is the average number of bank customers?",
        "query": "MATCH (bank:`loan_1.bank`)\nRETURN avg(bank.no_of_customers)",
        "db_id": "loan_1",
        "answers": [
            [
                286.5
            ]
        ]
    },
    {
        "question": "Find the city and state of the bank branch named morningside.",
        "query": "MATCH (bank:`loan_1.bank`)\nWHERE bank.bname = 'morningside'\nRETURN bank.city,bank.state",
        "db_id": "loan_1",
        "answers": [
            [
                "New York City",
                "New York"
            ]
        ]
    },
    {
        "question": "What city and state is the bank with the name morningside in?",
        "query": "MATCH (bank:`loan_1.bank`)\nWHERE bank.bname = 'morningside'\nRETURN bank.city,bank.state",
        "db_id": "loan_1",
        "answers": [
            [
                "New York City",
                "New York"
            ]
        ]
    },
    {
        "question": "Find the branch names of banks in the New York state.",
        "query": "MATCH (bank:`loan_1.bank`)\nWHERE bank.state = 'New York'\nRETURN bank.bname",
        "db_id": "loan_1",
        "answers": [
            [
                "morningside"
            ],
            [
                "broadway"
            ]
        ]
    },
    {
        "question": "What are the names of banks in the state of New York?",
        "query": "MATCH (bank:`loan_1.bank`)\nWHERE bank.state = 'New York'\nRETURN bank.bname",
        "db_id": "loan_1",
        "answers": [
            [
                "morningside"
            ],
            [
                "broadway"
            ]
        ]
    },
    {
        "question": "List the name of all customers sorted by their account balance in ascending order.",
        "query": "MATCH (customer:`loan_1.customer`)\nRETURN customer.cust_name\nORDER BY customer.acc_bal",
        "db_id": "loan_1",
        "answers": [
            [
                "Jack"
            ],
            [
                "Mary"
            ],
            [
                "Owen"
            ]
        ]
    },
    {
        "question": "What are the names of all customers, ordered by account balance?",
        "query": "MATCH (customer:`loan_1.customer`)\nRETURN customer.cust_name\nORDER BY customer.acc_bal",
        "db_id": "loan_1",
        "answers": [
            [
                "Jack"
            ],
            [
                "Mary"
            ],
            [
                "Owen"
            ]
        ]
    },
    {
        "question": "Find the state, account type, and credit score of the customer whose number of loan is 0.",
        "query": "MATCH (customer:`loan_1.customer`)\nWHERE customer.no_of_loans = 0\nRETURN customer.state,customer.acc_type,customer.credit_score",
        "db_id": "loan_1",
        "answers": [
            [
                "New York",
                "saving",
                210
            ]
        ]
    },
    {
        "question": "What are the states, account types, and credit scores for customers who have 0 loans?",
        "query": "MATCH (customer:`loan_1.customer`)\nWHERE customer.no_of_loans = 0\nRETURN customer.state,customer.acc_type,customer.credit_score",
        "db_id": "loan_1",
        "answers": [
            [
                "New York",
                "saving",
                210
            ]
        ]
    },
    {
        "question": "Find the number of different cities which banks are located at.",
        "query": "MATCH (bank:`loan_1.bank`)\nRETURN count(DISTINCT bank.city)",
        "db_id": "loan_1",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "In how many different cities are banks located?",
        "query": "MATCH (bank:`loan_1.bank`)\nRETURN count(DISTINCT bank.city)",
        "db_id": "loan_1",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Find the number of different states which banks are located at.",
        "query": "MATCH (bank:`loan_1.bank`)\nRETURN count(DISTINCT bank.state)",
        "db_id": "loan_1",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "In how many different states are banks located?",
        "query": "MATCH (bank:`loan_1.bank`)\nRETURN count(DISTINCT bank.state)",
        "db_id": "loan_1",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "How many distinct types of accounts are there?",
        "query": "MATCH (customer:`loan_1.customer`)\nRETURN count(DISTINCT customer.acc_type)",
        "db_id": "loan_1",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "Count the number of different account types.",
        "query": "MATCH (customer:`loan_1.customer`)\nRETURN count(DISTINCT customer.acc_type)",
        "db_id": "loan_1",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "Find the name and account balance of the customer whose name includes the letter \u2018a\u2019.",
        "query": "MATCH (customer:`loan_1.customer`)\nWHERE customer.cust_name =~'.*[A|a].*'\nRETURN customer.cust_name,customer.acc_bal",
        "db_id": "loan_1",
        "answers": [
            [
                "Mary",
                2000
            ],
            [
                "Jack",
                1000
            ]
        ]
    },
    {
        "question": "What are the names and account balances of customers with the letter a in their names?",
        "query": "MATCH (customer:`loan_1.customer`)\nWHERE customer.cust_name =~'.*[A|a].*'\nRETURN customer.cust_name,customer.acc_bal",
        "db_id": "loan_1",
        "answers": [
            [
                "Mary",
                2000
            ],
            [
                "Jack",
                1000
            ]
        ]
    },
    {
        "question": "Find the branch name of the bank that has the most number of customers.",
        "query": "MATCH (bank:`loan_1.bank`)\nRETURN bank.bname\nORDER BY bank.no_of_customers DESC\nLIMIT 1",
        "db_id": "loan_1",
        "answers": [
            [
                "broadway"
            ]
        ]
    },
    {
        "question": "What is the name of the bank branch with the greatest number of customers?",
        "query": "MATCH (bank:`loan_1.bank`)\nRETURN bank.bname\nORDER BY bank.no_of_customers DESC\nLIMIT 1",
        "db_id": "loan_1",
        "answers": [
            [
                "broadway"
            ]
        ]
    },
    {
        "question": "Find the name of customer who has the lowest credit score.",
        "query": "MATCH (customer:`loan_1.customer`)\nRETURN customer.cust_name\nORDER BY customer.credit_score\nLIMIT 1",
        "db_id": "loan_1",
        "answers": [
            [
                "Jack"
            ]
        ]
    },
    {
        "question": "What is the name of the customer with the worst credit score?",
        "query": "MATCH (customer:`loan_1.customer`)\nRETURN customer.cust_name\nORDER BY customer.credit_score\nLIMIT 1",
        "db_id": "loan_1",
        "answers": [
            [
                "Jack"
            ]
        ]
    },
    {
        "question": "Find the name, account type, and account balance of the customer who has the highest credit score.",
        "query": "MATCH (customer:`loan_1.customer`)\nRETURN customer.cust_name,customer.acc_type,customer.acc_bal\nORDER BY customer.credit_score DESC\nLIMIT 1",
        "db_id": "loan_1",
        "answers": [
            [
                "Owen",
                "saving",
                800000
            ]
        ]
    },
    {
        "question": "What is the name, account type, and account balance corresponding to the customer with the highest credit score?",
        "query": "MATCH (customer:`loan_1.customer`)\nRETURN customer.cust_name,customer.acc_type,customer.acc_bal\nORDER BY customer.credit_score DESC\nLIMIT 1",
        "db_id": "loan_1",
        "answers": [
            [
                "Owen",
                "saving",
                800000
            ]
        ]
    },
    {
        "question": "How many addresses have zip code 197?",
        "query": "MATCH (addresses:`behavior_monitoring.Addresses`)\nWHERE addresses.zip_postcode = '197'\nRETURN count(*)",
        "db_id": "behavior_monitoring",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "How many distinct incident type codes are there?",
        "query": "MATCH (behavior_incident:`behavior_monitoring.Behavior_Incident`)\nRETURN count(DISTINCT behavior_incident.incident_type_code)",
        "db_id": "behavior_monitoring",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Return all distinct detention type codes.",
        "query": "MATCH (detention:`behavior_monitoring.Detention`)\nRETURN DISTINCT detention.detention_type_code",
        "db_id": "behavior_monitoring",
        "answers": [
            [
                "AFTER"
            ],
            [
                "BREAK "
            ],
            [
                "LUNCH"
            ]
        ]
    },
    {
        "question": "What are the start and end dates for incidents with incident type code \"NOISE\"?",
        "query": "MATCH (behavior_incident:`behavior_monitoring.Behavior_Incident`)\nWHERE behavior_incident.incident_type_code = 'NOISE'\nRETURN behavior_incident.date_incident_start,behavior_incident.date_incident_end",
        "db_id": "behavior_monitoring",
        "answers": [
            [
                "2017-07-09 10:04:13",
                "2018-03-08 14:08:54"
            ],
            [
                "2017-08-13 22:15:05",
                "2018-02-25 05:38:58"
            ],
            [
                "2017-06-19 14:25:54",
                "2018-03-08 09:36:36"
            ],
            [
                "2018-01-27 09:24:45",
                "2018-03-13 05:18:05"
            ],
            [
                "2017-08-29 20:48:56",
                "2018-03-16 14:37:20"
            ],
            [
                "2018-02-05 13:13:45",
                "2018-03-08 09:00:48"
            ]
        ]
    },
    {
        "question": "Return the cell phone number and email address for all students.",
        "query": "MATCH (students:`behavior_monitoring.Students`)\nRETURN students.cell_mobile_number,students.email_address",
        "db_id": "behavior_monitoring",
        "answers": [
            [
                "235.899.9744",
                "derrick.jenkins@example.com"
            ],
            [
                "1-247-673-8446",
                "rohan.clarabelle@example.org"
            ],
            [
                "1-751-162-9676x115",
                "kkirlin@example.org"
            ],
            [
                "1-895-196-9979",
                "eolson@example.com"
            ],
            [
                "1-036-062-5465",
                "dicki.kathryne@example.org"
            ],
            [
                "(874)070-9495",
                "norwood.howell@example.org"
            ],
            [
                "763.072.5520x5907",
                "lisette.brekke@example.net"
            ],
            [
                "319.497.4575x2214",
                "jasmin.schuppe@example.com"
            ],
            [
                "(568)451-0917x3945",
                "dora.zboncak@example.org"
            ],
            [
                "08605192839",
                "frederique.mante@example.org"
            ],
            [
                "+60(5)3280072514",
                "qharvey@example.com"
            ],
            [
                "(921)011-7909x3518",
                "mitchel55@example.net"
            ],
            [
                "(062)892-7033",
                "gbeatty@example.com"
            ],
            [
                "(820)260-5721",
                "foster.zemlak@example.com"
            ],
            [
                "1-498-138-8088",
                "kertzmann.devon@example.net"
            ]
        ]
    },
    {
        "question": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?",
        "query": "MATCH (students:`behavior_monitoring.Students`)\nWHERE students.first_name = 'Emma' AND students.last_name = 'Rohan'\nRETURN students.email_address",
        "db_id": "behavior_monitoring",
        "answers": [
            [
                "derrick.jenkins@example.com"
            ]
        ]
    },
    {
        "question": "How many distinct students have been in detention?",
        "query": "MATCH (students_in_detention:`behavior_monitoring.Students_in_Detention`)\nRETURN count(DISTINCT students_in_detention.student_id)",
        "db_id": "behavior_monitoring",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "What is the gender of the teacher with last name \"Medhurst\"?",
        "query": "MATCH (teachers:`behavior_monitoring.Teachers`)\nWHERE teachers.last_name = 'Medhurst'\nRETURN teachers.gender",
        "db_id": "behavior_monitoring",
        "answers": [
            [
                "1"
            ]
        ]
    },
    {
        "question": "What is the incident type description for the incident type with code \"VIOLENCE\"?",
        "query": "MATCH (ref_incident_type:`behavior_monitoring.Ref_Incident_Type`)\nWHERE ref_incident_type.incident_type_code = 'VIOLENCE'\nRETURN ref_incident_type.incident_type_description",
        "db_id": "behavior_monitoring",
        "answers": [
            [
                "Violence"
            ]
        ]
    },
    {
        "question": "Find the first names of teachers whose email address contains the word \"man\".",
        "query": "MATCH (teachers:`behavior_monitoring.Teachers`)\nWHERE teachers.email_address =~'.*[M|m]an.*'\nRETURN teachers.first_name",
        "db_id": "behavior_monitoring",
        "answers": [
            [
                "Woodrow"
            ]
        ]
    },
    {
        "question": "List all cities of addresses in alphabetical order.",
        "query": "MATCH (addresses:`behavior_monitoring.Addresses`)\nRETURN addresses.city\nORDER BY addresses.city",
        "db_id": "behavior_monitoring",
        "answers": [
            [
                "Beierview"
            ],
            [
                "Caitlynstad"
            ],
            [
                "Corkeryborough"
            ],
            [
                "Edmundton"
            ],
            [
                "Elinoreport"
            ],
            [
                "Gleasonshire"
            ],
            [
                "Hegmannborough"
            ],
            [
                "Hintzport"
            ],
            [
                "Lake Ahmadland"
            ],
            [
                "Larkinport"
            ],
            [
                "Meganeland"
            ],
            [
                "New Annabellefort"
            ],
            [
                "North Fletcherside"
            ],
            [
                "North Jayceton"
            ],
            [
                "North Loyceville"
            ],
            [
                "North Orlobury"
            ],
            [
                "Tressamouth"
            ],
            [
                "Unachester"
            ],
            [
                "West Lianafurt"
            ],
            [
                "West Sean"
            ]
        ]
    },
    {
        "question": "Find the first names and last names of teachers in alphabetical order of last name.",
        "query": "MATCH (teachers:`behavior_monitoring.Teachers`)\nRETURN teachers.first_name,teachers.last_name\nORDER BY teachers.last_name",
        "db_id": "behavior_monitoring",
        "answers": [
            [
                "Aniya",
                "Becker"
            ],
            [
                "Hobart",
                "Bergnaum"
            ],
            [
                "Sid",
                "Brakus"
            ],
            [
                "Woodrow",
                "Goldner"
            ],
            [
                "Evelyn",
                "Hansen"
            ],
            [
                "Gregory",
                "Heller"
            ],
            [
                "Donnie",
                "Kuhic"
            ],
            [
                "Citlalli",
                "Kuhic"
            ],
            [
                "Edmond",
                "Lang"
            ],
            [
                "Lyla",
                "Medhurst"
            ],
            [
                "Camren",
                "Moore"
            ],
            [
                "Stephanie",
                "Price"
            ],
            [
                "Alvis",
                "Schultz"
            ],
            [
                "Trystan",
                "Schuster"
            ],
            [
                "Cecilia",
                "Ward"
            ]
        ]
    },
    {
        "question": "What is the zip code of the address where the teacher with first name \"Lyla\" lives?",
        "query": "MATCH (T1:`behavior_monitoring.Addresses`)-[]-(T2:`behavior_monitoring.Teachers`)\nWHERE T2.first_name = 'Lyla'\nRETURN T1.zip_postcode",
        "db_id": "behavior_monitoring",
        "answers": [
            [
                "435"
            ]
        ]
    },
    {
        "question": "What are the email addresses of teachers whose address has zip code \"918\"?",
        "query": "MATCH (T1:`behavior_monitoring.Addresses`)-[]-(T2:`behavior_monitoring.Teachers`)\nWHERE T1.zip_postcode = '918'\nRETURN T2.email_address",
        "db_id": "behavior_monitoring",
        "answers": [
            [
                "everardo.lynch@example.net"
            ]
        ]
    },
    {
        "question": "Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.",
        "query": "MATCH (T1:`assets_maintenance.Third_Party_Companies`)-[]-(T2:`assets_maintenance.Maintenance_Engineers`)\nWITH count(*) AS count, T1.company_name AS company_name, T1.company_id AS company_id\nWHERE count  >= 2\nRETURN company_id,company_name \nUNION\nMATCH (T3:`assets_maintenance.Third_Party_Companies`)-[]-(T4:`assets_maintenance.Maintenance_Contracts`)\nWITH count(*) AS count, T3.company_id AS company_id, T3.company_name AS company_name\nWHERE count  >= 2\nRETURN company_id,company_name",
        "db_id": "assets_maintenance",
        "answers": [
            [
                2,
                "McDermott Group"
            ],
            [
                3,
                "Schuppe-Carroll"
            ],
            [
                4,
                "Dooley-Langosh"
            ],
            [
                11,
                "Kuvalis, Boehm and Hettinger"
            ],
            [
                15,
                "Rau, Ullrich and King"
            ],
            [
                13,
                "Greenholt-D'Amore"
            ],
            [
                6,
                "Grimes, Mosciski and Renner"
            ]
        ]
    },
    {
        "question": "Which parts have more than 2 faults? Show the part name and id.",
        "query": "MATCH (T1:`assets_maintenance.Parts`)-[]-(T2:`assets_maintenance.Part_Faults`)\nWITH count(*) AS count, T1.part_name AS part_name, T1.part_id AS part_id\nWHERE count  > 2\nRETURN part_name,part_id",
        "db_id": "assets_maintenance",
        "answers": [
            [
                "top",
                1
            ],
            [
                "package",
                3
            ]
        ]
    },
    {
        "question": "How many engineer visits are required at most for a single fault log? List the number and the log entry id.",
        "query": "MATCH (T1:`assets_maintenance.Fault_Log`)-[]-(T2:`assets_maintenance.Engineer_Visits`)\nWITH T1.fault_log_entry_id AS fault_log_entry_id, count(T1.fault_log_entry_id) AS count\nRETURN count,fault_log_entry_id\nORDER BY count DESC\nLIMIT 1",
        "db_id": "assets_maintenance",
        "answers": [
            [
                5,
                13
            ]
        ]
    },
    {
        "question": "What are all the distinct last names of all the engineers?",
        "query": "MATCH (maintenance_engineers:`assets_maintenance.Maintenance_Engineers`)\nRETURN DISTINCT maintenance_engineers.last_name",
        "db_id": "assets_maintenance",
        "answers": [
            [
                "Reinger"
            ],
            [
                "Orn"
            ],
            [
                "Hauck"
            ],
            [
                "Morar"
            ],
            [
                "Grady"
            ],
            [
                "Adams"
            ],
            [
                "Harvey"
            ],
            [
                "Hirthe"
            ],
            [
                "Stamm"
            ],
            [
                "Price"
            ],
            [
                "Kunde"
            ],
            [
                "Simonis"
            ],
            [
                "Hahn"
            ],
            [
                "Goldner"
            ],
            [
                "Streich"
            ]
        ]
    },
    {
        "question": "Which engineers have never visited to maintain the assets? List the engineer first name and last name.",
        "query": "MATCH (maintenance_engineers:`assets_maintenance.Maintenance_Engineers`)\nWHERE NOT (maintenance_engineers:`assets_maintenance.Maintenance_Engineers`)-[]-(:`assets_maintenance.Engineer_Visits`)\nRETURN maintenance_engineers.first_name,maintenance_engineers.last_name",
        "db_id": "assets_maintenance",
        "answers": [
            [
                "Clemens",
                "Orn"
            ],
            [
                "Samanta",
                "Hauck"
            ],
            [
                "Manley",
                "Grady"
            ],
            [
                "Josie",
                "Harvey"
            ],
            [
                "Brian",
                "Stamm"
            ],
            [
                "Weston",
                "Hahn"
            ],
            [
                "Jules",
                "Goldner"
            ]
        ]
    },
    {
        "question": "List the asset id, details, make and model for every asset.",
        "query": "MATCH (assets:`assets_maintenance.Assets`)\nRETURN assets.asset_id,assets.asset_details,assets.asset_make,assets.asset_model",
        "db_id": "assets_maintenance",
        "answers": [
            [
                1,
                "dell laptop1",
                "PT",
                "58 ub"
            ],
            [
                2,
                "dell laptop2",
                "IN",
                "35 xt"
            ],
            [
                3,
                "dell laptop3",
                "IT",
                "63 ok"
            ],
            [
                4,
                "dell laptop4",
                "RU",
                "69 uv"
            ],
            [
                5,
                "dell laptop5",
                "DE",
                "90 oq"
            ],
            [
                6,
                "monitor1",
                "CN",
                "91 ub"
            ],
            [
                7,
                "monitor2",
                "CN",
                "27 du"
            ],
            [
                8,
                "monitor3",
                "GB",
                "94 kg"
            ],
            [
                9,
                "machine1",
                "RU",
                "07 yt"
            ],
            [
                10,
                "machine2",
                "FR",
                "20 tl"
            ],
            [
                11,
                "machine3",
                "FR",
                "11 wi"
            ],
            [
                12,
                "machine4",
                "RU",
                "95 vn"
            ],
            [
                13,
                "system1",
                "DE",
                "08 yy"
            ],
            [
                14,
                "system2",
                "IN",
                "66 xm"
            ],
            [
                15,
                "system3",
                "IE",
                "24 ak"
            ]
        ]
    },
    {
        "question": "When was the first asset acquired?",
        "query": "MATCH (assets:`assets_maintenance.Assets`)\nRETURN assets.asset_acquired_date\nORDER BY assets.asset_acquired_date ASC\nLIMIT 1",
        "db_id": "assets_maintenance",
        "answers": [
            [
                "2017-04-16 12:19:25"
            ]
        ]
    },
    {
        "question": "Which kind of part has the least number of faults? List the part name.",
        "query": "MATCH (T1:`assets_maintenance.Parts`)-[]-(T2:`assets_maintenance.Part_Faults`)\nWITH T1.part_name AS part_name, count(T1.part_name) AS count\nRETURN part_name\nORDER BY count ASC\nLIMIT 1",
        "db_id": "assets_maintenance",
        "answers": [
            [
                "middle"
            ]
        ]
    },
    {
        "question": "What are all the distinct asset models?",
        "query": "MATCH (assets:`assets_maintenance.Assets`)\nRETURN DISTINCT assets.asset_model",
        "db_id": "assets_maintenance",
        "answers": [
            [
                "58 ub"
            ],
            [
                "35 xt"
            ],
            [
                "63 ok"
            ],
            [
                "69 uv"
            ],
            [
                "90 oq"
            ],
            [
                "91 ub"
            ],
            [
                "27 du"
            ],
            [
                "94 kg"
            ],
            [
                "07 yt"
            ],
            [
                "20 tl"
            ],
            [
                "11 wi"
            ],
            [
                "95 vn"
            ],
            [
                "08 yy"
            ],
            [
                "66 xm"
            ],
            [
                "24 ak"
            ]
        ]
    },
    {
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "MATCH (assets:`assets_maintenance.Assets`)\nRETURN assets.asset_make,assets.asset_model,assets.asset_details\nORDER BY assets.asset_disposed_date ASC",
        "db_id": "assets_maintenance",
        "answers": [
            [
                "IE",
                "24 ak",
                "system3"
            ],
            [
                "DE",
                "90 oq",
                "dell laptop5"
            ],
            [
                "RU",
                "95 vn",
                "machine4"
            ],
            [
                "GB",
                "94 kg",
                "monitor3"
            ],
            [
                "FR",
                "20 tl",
                "machine2"
            ],
            [
                "DE",
                "08 yy",
                "system1"
            ],
            [
                "RU",
                "07 yt",
                "machine1"
            ],
            [
                "IT",
                "63 ok",
                "dell laptop3"
            ],
            [
                "CN",
                "91 ub",
                "monitor1"
            ],
            [
                "PT",
                "58 ub",
                "dell laptop1"
            ],
            [
                "RU",
                "69 uv",
                "dell laptop4"
            ],
            [
                "FR",
                "11 wi",
                "machine3"
            ],
            [
                "IN",
                "35 xt",
                "dell laptop2"
            ],
            [
                "CN",
                "27 du",
                "monitor2"
            ],
            [
                "IN",
                "66 xm",
                "system2"
            ]
        ]
    },
    {
        "question": "Which part has the least chargeable amount? List the part id and amount.",
        "query": "MATCH (parts:`assets_maintenance.Parts`)\nRETURN parts.part_id,parts.chargeable_amount\nORDER BY parts.chargeable_amount ASC\nLIMIT 1",
        "db_id": "assets_maintenance",
        "answers": [
            [
                1,
                "4"
            ]
        ]
    },
    {
        "question": "Which company started the earliest the maintenance contract? Show the company name.",
        "query": "MATCH (T1:`assets_maintenance.Third_Party_Companies`)-[]-(T2:`assets_maintenance.Maintenance_Contracts`)\nRETURN T1.company_name\nORDER BY T2.contract_start_date ASC\nLIMIT 1",
        "db_id": "assets_maintenance",
        "answers": [
            [
                "Grimes, Mosciski and Renner"
            ]
        ]
    },
    {
        "question": "Which gender makes up the majority of the staff?",
        "query": "MATCH (staff:`assets_maintenance.Staff`)\nWITH count(staff.gender) AS count, staff.gender AS gender\nRETURN gender\nORDER BY count DESC\nLIMIT 1",
        "db_id": "assets_maintenance",
        "answers": [
            [
                "1"
            ]
        ]
    },
    {
        "question": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.",
        "query": "MATCH (T1:`assets_maintenance.Staff`)-[]-(T2:`assets_maintenance.Engineer_Visits`)\nWITH count(T1.staff_name) AS count, T1.staff_name AS staff_name\nRETURN staff_name,count",
        "db_id": "assets_maintenance",
        "answers": [
            [
                "Berneice",
                2
            ],
            [
                "Edmond",
                3
            ],
            [
                "Rodger",
                1
            ],
            [
                "Kadin",
                4
            ],
            [
                "Christophe",
                1
            ],
            [
                "Bernice",
                2
            ],
            [
                "Oren",
                1
            ],
            [
                "Cyrus",
                1
            ]
        ]
    },
    {
        "question": "list the local authorities and services provided by all stations.",
        "query": "MATCH (station:`station_weather.station`)\nRETURN station.local_authority,station.services",
        "db_id": "station_weather",
        "answers": [
            [
                "Chiltern",
                "Metropolitan line and Chiltern Railways"
            ],
            [
                "Watford",
                "London Overground and London Midland"
            ],
            [
                "Brentwood",
                "Greater Anglia"
            ],
            [
                "Broxbourne",
                "Greater Anglia"
            ],
            [
                "Three Rivers",
                "London Overground"
            ],
            [
                "Thurrock",
                "c2c"
            ],
            [
                "Chiltern",
                "Metropolitan line and Chiltern Railways"
            ],
            [
                "Chiltern",
                "Metropolitan line"
            ],
            [
                "Broxbourne",
                "Greater Anglia"
            ],
            [
                "Three Rivers",
                "Metropolitan line and Chiltern Railways"
            ],
            [
                "Three Rivers",
                "Metropolitan line"
            ]
        ]
    },
    {
        "question": "Find the number of trains starting from each origin.",
        "query": "MATCH (train:`station_weather.train`)\nWITH count(train.origin) AS count, train.origin AS origin\nRETURN origin,count",
        "db_id": "station_weather",
        "answers": [
            [
                "Trivandrum",
                1
            ],
            [
                "Chennai",
                2
            ],
            [
                "Guruvayur",
                1
            ],
            [
                "Kanniyakumari",
                2
            ],
            [
                "Quilon",
                1
            ],
            [
                "Madurai",
                1
            ],
            [
                "Bangalore",
                1
            ],
            [
                "Mumbai",
                1
            ],
            [
                "Nagercoil",
                1
            ]
        ]
    },
    {
        "question": "How many different services are provided by all stations?",
        "query": "MATCH (station:`station_weather.station`)\nRETURN count(DISTINCT station.services)",
        "db_id": "station_weather",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "show the lowest low temperature and highest wind speed in miles per hour.",
        "query": "MATCH (weekly_weather:`station_weather.weekly_weather`)\nRETURN min(weekly_weather.low_temperature),max(weekly_weather.wind_speed_mph)",
        "db_id": "station_weather",
        "answers": [
            [
                46,
                24
            ]
        ]
    },
    {
        "question": "Find the origins from which more than 1 train starts.",
        "query": "MATCH (train:`station_weather.train`)\nWITH count(*) AS count, train.origin AS origin\nWHERE count  > 1\nRETURN origin",
        "db_id": "station_weather",
        "answers": [
            [
                "Chennai"
            ],
            [
                "Kanniyakumari"
            ]
        ]
    },
    {
        "question": "How many professors are teaching class with code ACCT-211?",
        "query": "MATCH (class:`college_1.CLASS`)\nWHERE class.CRS_CODE = \"ACCT-211\"\nRETURN count(DISTINCT class.PROF_NUM)",
        "db_id": "college_1",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "How many professors teach a class with the code ACCT-211?",
        "query": "MATCH (class:`college_1.CLASS`)\nWHERE class.CRS_CODE = \"ACCT-211\"\nRETURN count(DISTINCT class.PROF_NUM)",
        "db_id": "college_1",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "What is the code of the school where the accounting department belongs to?",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nWHERE department.DEPT_NAME = 'Accounting'\nRETURN department.SCHOOL_CODE",
        "db_id": "college_1",
        "answers": [
            [
                "BUS"
            ]
        ]
    },
    {
        "question": "What is the school code of the accounting department?",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nWHERE department.DEPT_NAME = 'Accounting'\nRETURN department.SCHOOL_CODE",
        "db_id": "college_1",
        "answers": [
            [
                "BUS"
            ]
        ]
    },
    {
        "question": "How many credits does course CIS-220 have, and what its description?",
        "query": "MATCH (course:`college_1.COURSE`)\nWHERE course.CRS_CODE = 'CIS-220'\nRETURN course.CRS_CREDIT,course.CRS_DESCRIPTION",
        "db_id": "college_1",
        "answers": [
            [
                3.0,
                "Intro. to Microcomputing"
            ]
        ]
    },
    {
        "question": "What is the description for the CIS-220 and how many credits does it have?",
        "query": "MATCH (course:`college_1.COURSE`)\nWHERE course.CRS_CODE = 'CIS-220'\nRETURN course.CRS_CREDIT,course.CRS_DESCRIPTION",
        "db_id": "college_1",
        "answers": [
            [
                3.0,
                "Intro. to Microcomputing"
            ]
        ]
    },
    {
        "question": "what is the address of history department?",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nWHERE department.DEPT_NAME = 'History'\nRETURN department.DEPT_ADDRESS",
        "db_id": "college_1",
        "answers": [
            [
                "DRE 156, Box 284"
            ]
        ]
    },
    {
        "question": "Where is the history department?",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nWHERE department.DEPT_NAME = 'History'\nRETURN department.DEPT_ADDRESS",
        "db_id": "college_1",
        "answers": [
            [
                "DRE 156, Box 284"
            ]
        ]
    },
    {
        "question": "How many different locations does the school with code BUS has?",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nWHERE department.SCHOOL_CODE = 'BUS'\nRETURN count(DISTINCT department.DEPT_ADDRESS)",
        "db_id": "college_1",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "What are the different locations of the school with the code BUS?",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nWHERE department.SCHOOL_CODE = 'BUS'\nRETURN count(DISTINCT department.DEPT_ADDRESS)",
        "db_id": "college_1",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "Find the description and credit for the course QM-261?",
        "query": "MATCH (course:`college_1.COURSE`)\nWHERE course.CRS_CODE = 'QM-261'\nRETURN course.CRS_CREDIT,course.CRS_DESCRIPTION",
        "db_id": "college_1",
        "answers": [
            [
                3.0,
                "Intro. to Statistics"
            ]
        ]
    },
    {
        "question": "What is the course description and number of credits for QM-261?",
        "query": "MATCH (course:`college_1.COURSE`)\nWHERE course.CRS_CODE = 'QM-261'\nRETURN course.CRS_CREDIT,course.CRS_DESCRIPTION",
        "db_id": "college_1",
        "answers": [
            [
                3.0,
                "Intro. to Statistics"
            ]
        ]
    },
    {
        "question": "How many sections does each course has?",
        "query": "MATCH (class:`college_1.CLASS`)\nWITH class.CRS_CODE AS CRS_CODE, count(class.CRS_CODE) AS count\nRETURN count,CRS_CODE",
        "db_id": "college_1",
        "answers": [
            [
                3,
                "ACCT-211"
            ],
            [
                2,
                "ACCT-212"
            ],
            [
                3,
                "CIS-220"
            ],
            [
                1,
                "CIS-420"
            ],
            [
                2,
                "QM-261"
            ],
            [
                2,
                "QM-362"
            ]
        ]
    },
    {
        "question": "How many sections does each course have?",
        "query": "MATCH (class:`college_1.CLASS`)\nWITH class.CRS_CODE AS CRS_CODE, count(class.CRS_CODE) AS count\nRETURN count,CRS_CODE",
        "db_id": "college_1",
        "answers": [
            [
                3,
                "ACCT-211"
            ],
            [
                2,
                "ACCT-212"
            ],
            [
                3,
                "CIS-220"
            ],
            [
                1,
                "CIS-420"
            ],
            [
                2,
                "QM-261"
            ],
            [
                2,
                "QM-362"
            ]
        ]
    },
    {
        "question": "Find the number of classes offered for all class rooms that held at least 2 classes.",
        "query": "MATCH (class:`college_1.CLASS`)\nWITH class.CLASS_ROOM AS CLASS_ROOM, count(*) AS count\nWHERE count  >= 2\nRETURN count,CLASS_ROOM",
        "db_id": "college_1",
        "answers": [
            [
                2,
                "BUS311"
            ],
            [
                2,
                "BUS252"
            ],
            [
                3,
                "KLR209"
            ],
            [
                4,
                "KLR200"
            ]
        ]
    },
    {
        "question": "For each classroom with at least 2 classes, how many classes are offered?",
        "query": "MATCH (class:`college_1.CLASS`)\nWITH class.CLASS_ROOM AS CLASS_ROOM, count(*) AS count\nWHERE count  >= 2\nRETURN count,CLASS_ROOM",
        "db_id": "college_1",
        "answers": [
            [
                2,
                "BUS311"
            ],
            [
                2,
                "BUS252"
            ],
            [
                3,
                "KLR209"
            ],
            [
                4,
                "KLR200"
            ]
        ]
    },
    {
        "question": "Find the count and code of the job has most employees.",
        "query": "MATCH (employee:`college_1.EMPLOYEE`)\nWITH count(employee.EMP_JOBCODE) AS count, employee.EMP_JOBCODE AS EMP_JOBCODE\nRETURN EMP_JOBCODE,count\nORDER BY count DESC\nLIMIT 1",
        "db_id": "college_1",
        "answers": [
            [
                "PROF",
                22
            ]
        ]
    },
    {
        "question": "What is the count and code of the job with the most employee?",
        "query": "MATCH (employee:`college_1.EMPLOYEE`)\nWITH count(employee.EMP_JOBCODE) AS count, employee.EMP_JOBCODE AS EMP_JOBCODE\nRETURN EMP_JOBCODE,count\nORDER BY count DESC\nLIMIT 1",
        "db_id": "college_1",
        "answers": [
            [
                "PROF",
                22
            ]
        ]
    },
    {
        "question": "Find the number of students for each department.",
        "query": "MATCH (student:`college_1.STUDENT`)\nWITH count(student.DEPT_CODE) AS count, student.DEPT_CODE AS DEPT_CODE\nRETURN count,DEPT_CODE",
        "db_id": "college_1",
        "answers": [
            [
                1,
                "BIOL"
            ],
            [
                2,
                "CIS"
            ],
            [
                3,
                "ACCT"
            ],
            [
                1,
                "ENGL"
            ],
            [
                1,
                "EDU"
            ]
        ]
    },
    {
        "question": "How many students are in each department?",
        "query": "MATCH (student:`college_1.STUDENT`)\nWITH count(student.DEPT_CODE) AS count, student.DEPT_CODE AS DEPT_CODE\nRETURN count,DEPT_CODE",
        "db_id": "college_1",
        "answers": [
            [
                1,
                "BIOL"
            ],
            [
                2,
                "CIS"
            ],
            [
                3,
                "ACCT"
            ],
            [
                1,
                "ENGL"
            ],
            [
                1,
                "EDU"
            ]
        ]
    },
    {
        "question": "how many schools exist in total?",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nRETURN count(DISTINCT department.SCHOOL_CODE)",
        "db_id": "college_1",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "How many schools are there in the department?",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nRETURN count(DISTINCT department.SCHOOL_CODE)",
        "db_id": "college_1",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "How many different classes are there?",
        "query": "MATCH (class:`college_1.CLASS`)\nRETURN count(DISTINCT class.CLASS_CODE)",
        "db_id": "college_1",
        "answers": [
            [
                13
            ]
        ]
    },
    {
        "question": "How many unique classes are offered?",
        "query": "MATCH (class:`college_1.CLASS`)\nRETURN count(DISTINCT class.CLASS_CODE)",
        "db_id": "college_1",
        "answers": [
            [
                13
            ]
        ]
    },
    {
        "question": "How many courses are offered?",
        "query": "MATCH (class:`college_1.CLASS`)\nRETURN count(DISTINCT class.CRS_CODE)",
        "db_id": "college_1",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "What are the number of different course codes?",
        "query": "MATCH (class:`college_1.CLASS`)\nRETURN count(DISTINCT class.CRS_CODE)",
        "db_id": "college_1",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "How many departments does the college has?",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nRETURN count(DISTINCT department.DEPT_NAME)",
        "db_id": "college_1",
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "question": "How many different departments are there?",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nRETURN count(DISTINCT department.DEPT_NAME)",
        "db_id": "college_1",
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "question": "How many sections does course ACCT-211 has?",
        "query": "MATCH (class:`college_1.CLASS`)\nWHERE class.CRS_CODE = 'ACCT-211'\nRETURN count(DISTINCT class.CLASS_SECTION)",
        "db_id": "college_1",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "What is the number of different class sections offered in the course ACCT-211?",
        "query": "MATCH (class:`college_1.CLASS`)\nWHERE class.CRS_CODE = 'ACCT-211'\nRETURN count(DISTINCT class.CLASS_SECTION)",
        "db_id": "college_1",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Find the total number of employees.",
        "query": "MATCH (employee:`college_1.EMPLOYEE`)\nRETURN count(*)",
        "db_id": "college_1",
        "answers": [
            [
                37
            ]
        ]
    },
    {
        "question": "How many employees are there all together?",
        "query": "MATCH (employee:`college_1.EMPLOYEE`)\nRETURN count(*)",
        "db_id": "college_1",
        "answers": [
            [
                37
            ]
        ]
    },
    {
        "question": "list names of all departments ordered by their names.",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nRETURN department.DEPT_NAME\nORDER BY department.DEPT_NAME",
        "db_id": "college_1",
        "answers": [
            [
                "Accounting"
            ],
            [
                "Biology"
            ],
            [
                "Computer Info. Systems"
            ],
            [
                "Economics/Finance"
            ],
            [
                "English"
            ],
            [
                "Fine Arts"
            ],
            [
                "History"
            ],
            [
                "Marketing/Management"
            ],
            [
                "Mathematics"
            ],
            [
                "Psychology"
            ],
            [
                "Sociology"
            ]
        ]
    },
    {
        "question": "What are the names of all departments in alphabetical order?",
        "query": "MATCH (department:`college_1.DEPARTMENT`)\nRETURN department.DEPT_NAME\nORDER BY department.DEPT_NAME",
        "db_id": "college_1",
        "answers": [
            [
                "Accounting"
            ],
            [
                "Biology"
            ],
            [
                "Computer Info. Systems"
            ],
            [
                "Economics/Finance"
            ],
            [
                "English"
            ],
            [
                "Fine Arts"
            ],
            [
                "History"
            ],
            [
                "Marketing/Management"
            ],
            [
                "Mathematics"
            ],
            [
                "Psychology"
            ],
            [
                "Sociology"
            ]
        ]
    },
    {
        "question": "List the codes of all courses that take place in room KLR209.",
        "query": "MATCH (class:`college_1.CLASS`)\nWHERE class.CLASS_ROOM = 'KLR209'\nRETURN class.CLASS_CODE",
        "db_id": "college_1",
        "answers": [
            [
                "10017"
            ],
            [
                "10019"
            ],
            [
                "10020"
            ]
        ]
    },
    {
        "question": "What are the codes of all the courses that are located in room KLR209?",
        "query": "MATCH (class:`college_1.CLASS`)\nWHERE class.CLASS_ROOM = 'KLR209'\nRETURN class.CLASS_CODE",
        "db_id": "college_1",
        "answers": [
            [
                "10017"
            ],
            [
                "10019"
            ],
            [
                "10020"
            ]
        ]
    },
    {
        "question": "List the first name of all employees with job code PROF ordered by their date of birth.",
        "query": "MATCH (employee:`college_1.EMPLOYEE`)\nWHERE employee.EMP_JOBCODE = 'PROF'\nRETURN employee.EMP_FNAME\nORDER BY employee.EMP_DOB",
        "db_id": "college_1",
        "answers": [
            [
                "Robert"
            ],
            [
                "Gerald"
            ],
            [
                "Peter"
            ],
            [
                "Ross"
            ],
            [
                "Ronald"
            ],
            [
                "James"
            ],
            [
                "Melanie"
            ],
            [
                "George"
            ],
            [
                "Preston"
            ],
            [
                "Carlos"
            ],
            [
                "Arnelle"
            ],
            [
                "Hermine"
            ],
            [
                "Van"
            ],
            [
                "Ronald"
            ],
            [
                "Ismael"
            ],
            [
                "Willa"
            ],
            [
                "Herman"
            ],
            [
                "Robert"
            ],
            [
                "Annelise"
            ],
            [
                "Doreen"
            ],
            [
                "Anne"
            ],
            [
                "Ralph"
            ]
        ]
    },
    {
        "question": "What are the first names of all employees that are professors ordered by date of birth?",
        "query": "MATCH (employee:`college_1.EMPLOYEE`)\nWHERE employee.EMP_JOBCODE = 'PROF'\nRETURN employee.EMP_FNAME\nORDER BY employee.EMP_DOB",
        "db_id": "college_1",
        "answers": [
            [
                "Robert"
            ],
            [
                "Gerald"
            ],
            [
                "Peter"
            ],
            [
                "Ross"
            ],
            [
                "Ronald"
            ],
            [
                "James"
            ],
            [
                "Melanie"
            ],
            [
                "George"
            ],
            [
                "Preston"
            ],
            [
                "Carlos"
            ],
            [
                "Arnelle"
            ],
            [
                "Hermine"
            ],
            [
                "Van"
            ],
            [
                "Ronald"
            ],
            [
                "Ismael"
            ],
            [
                "Willa"
            ],
            [
                "Herman"
            ],
            [
                "Robert"
            ],
            [
                "Annelise"
            ],
            [
                "Doreen"
            ],
            [
                "Anne"
            ],
            [
                "Ralph"
            ]
        ]
    },
    {
        "question": "What is the first and last name of the oldest employee?",
        "query": "MATCH (employee:`college_1.EMPLOYEE`)\nRETURN employee.EMP_FNAME,employee.EMP_LNAME\nORDER BY employee.EMP_DOB\nLIMIT 1",
        "db_id": "college_1",
        "answers": [
            [
                "Robert",
                "Smith"
            ]
        ]
    },
    {
        "question": "What are the first and last names of the employee with the earliest date of birth?",
        "query": "MATCH (employee:`college_1.EMPLOYEE`)\nRETURN employee.EMP_FNAME,employee.EMP_LNAME\nORDER BY employee.EMP_DOB\nLIMIT 1",
        "db_id": "college_1",
        "answers": [
            [
                "Robert",
                "Smith"
            ]
        ]
    },
    {
        "question": "What is the first, last name, gpa of the youngest one among students whose GPA is above 3?",
        "query": "MATCH (student:`college_1.STUDENT`)\nWHERE student.STU_GPA > 3\nRETURN student.STU_FNAME,student.STU_LNAME,student.STU_GPA\nORDER BY student.STU_DOB DESC\nLIMIT 1",
        "db_id": "college_1",
        "answers": [
            [
                "Anne",
                "Smithson",
                3.27
            ]
        ]
    },
    {
        "question": "What is the first and last name of the youngest student with a GPA above 3, and what is their GPA?",
        "query": "MATCH (student:`college_1.STUDENT`)\nWHERE student.STU_GPA > 3\nRETURN student.STU_FNAME,student.STU_LNAME,student.STU_GPA\nORDER BY student.STU_DOB DESC\nLIMIT 1",
        "db_id": "college_1",
        "answers": [
            [
                "Anne",
                "Smithson",
                3.27
            ]
        ]
    },
    {
        "question": "What is the first name, gpa and phone number of the top 5 students with highest gpa?",
        "query": "MATCH (student:`college_1.STUDENT`)\nRETURN student.STU_GPA,student.STU_PHONE,student.STU_FNAME\nORDER BY student.STU_GPA DESC\nLIMIT 5",
        "db_id": "college_1",
        "answers": [
            [
                3.87,
                "2267",
                "Gerald"
            ],
            [
                3.27,
                "2256",
                "Anne"
            ],
            [
                3.15,
                "2267",
                "Raphael"
            ],
            [
                3.09,
                "2114",
                "Walter"
            ],
            [
                2.92,
                "2315",
                "John"
            ]
        ]
    },
    {
        "question": "What is the first name, GPA, and phone number of the students with the top 5 GPAs?",
        "query": "MATCH (student:`college_1.STUDENT`)\nRETURN student.STU_GPA,student.STU_PHONE,student.STU_FNAME\nORDER BY student.STU_GPA DESC\nLIMIT 5",
        "db_id": "college_1",
        "answers": [
            [
                3.87,
                "2267",
                "Gerald"
            ],
            [
                3.27,
                "2256",
                "Anne"
            ],
            [
                3.15,
                "2267",
                "Raphael"
            ],
            [
                3.09,
                "2114",
                "Walter"
            ],
            [
                2.92,
                "2315",
                "John"
            ]
        ]
    },
    {
        "question": "What is the department name of the students with lowest gpa belongs to?",
        "query": "MATCH (T1:`college_1.STUDENT`)-[]-(T2:`college_1.DEPARTMENT`)\nRETURN T2.DEPT_NAME\nORDER BY T1.STU_GPA\nLIMIT 1",
        "db_id": "college_1",
        "answers": [
            [
                "Accounting"
            ]
        ]
    },
    {
        "question": "What is the name of the department with the student that has the lowest GPA?",
        "query": "MATCH (T1:`college_1.STUDENT`)-[]-(T2:`college_1.DEPARTMENT`)\nRETURN T2.DEPT_NAME\nORDER BY T1.STU_GPA\nLIMIT 1",
        "db_id": "college_1",
        "answers": [
            [
                "Accounting"
            ]
        ]
    },
    {
        "question": "Find the name and address of the department that has the highest number of students.",
        "query": "MATCH (T1:`college_1.STUDENT`)-[]-(T2:`college_1.DEPARTMENT`)\nWITH T2.DEPT_NAME AS DEPT_NAME, T2.DEPT_ADDRESS AS DEPT_ADDRESS, count(T1.DEPT_CODE) AS count\nRETURN DEPT_NAME,DEPT_ADDRESS\nORDER BY count DESC\nLIMIT 1",
        "db_id": "college_1",
        "answers": [
            [
                "Accounting",
                "KLR 211, Box 52"
            ]
        ]
    },
    {
        "question": "What is the name and address of the department with the most students?",
        "query": "MATCH (T1:`college_1.STUDENT`)-[]-(T2:`college_1.DEPARTMENT`)\nWITH T2.DEPT_NAME AS DEPT_NAME, T2.DEPT_ADDRESS AS DEPT_ADDRESS, count(T1.DEPT_CODE) AS count\nRETURN DEPT_NAME,DEPT_ADDRESS\nORDER BY count DESC\nLIMIT 1",
        "db_id": "college_1",
        "answers": [
            [
                "Accounting",
                "KLR 211, Box 52"
            ]
        ]
    },
    {
        "question": "Find the name, address, number of students in the departments that have the top 3 highest number of students.",
        "query": "MATCH (T1:`college_1.STUDENT`)-[]-(T2:`college_1.DEPARTMENT`)\nWITH T2.DEPT_NAME AS DEPT_NAME, T2.DEPT_ADDRESS AS DEPT_ADDRESS, count(T1.DEPT_CODE) AS count\nRETURN DEPT_NAME,DEPT_ADDRESS,count\nORDER BY count DESC\nLIMIT 3",
        "db_id": "college_1",
        "answers": [
            [
                "Accounting",
                "KLR 211, Box 52",
                3
            ],
            [
                "Computer Info. Systems",
                "KLR 333, Box 56",
                2
            ],
            [
                "Biology",
                "AAK 230, Box 415",
                1
            ]
        ]
    },
    {
        "question": "What is the name, address, and number of students in the departments that have the 3 most students?",
        "query": "MATCH (T1:`college_1.STUDENT`)-[]-(T2:`college_1.DEPARTMENT`)\nWITH T2.DEPT_NAME AS DEPT_NAME, T2.DEPT_ADDRESS AS DEPT_ADDRESS, count(T1.DEPT_CODE) AS count\nRETURN DEPT_NAME,DEPT_ADDRESS,count\nORDER BY count DESC\nLIMIT 3",
        "db_id": "college_1",
        "answers": [
            [
                "Accounting",
                "KLR 211, Box 52",
                3
            ],
            [
                "Computer Info. Systems",
                "KLR 333, Box 56",
                2
            ],
            [
                "Biology",
                "AAK 230, Box 415",
                1
            ]
        ]
    },
    {
        "question": "How many clubs are there?",
        "query": "MATCH (club:`sports_competition.club`)\nRETURN count(*)",
        "db_id": "sports_competition",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "What is the total number of clubs?",
        "query": "MATCH (club:`sports_competition.club`)\nRETURN count(*)",
        "db_id": "sports_competition",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "List the distinct region of clubs in ascending alphabetical order.",
        "query": "MATCH (club:`sports_competition.club`)\nRETURN DISTINCT club.Region\nORDER BY club.Region ASC",
        "db_id": "sports_competition",
        "answers": [
            [
                "Brazil"
            ],
            [
                "China"
            ],
            [
                "England"
            ],
            [
                "Japan"
            ],
            [
                "UK"
            ],
            [
                "USA"
            ]
        ]
    },
    {
        "question": "What are the different regions of clubs in ascending alphabetical order?",
        "query": "MATCH (club:`sports_competition.club`)\nRETURN DISTINCT club.Region\nORDER BY club.Region ASC",
        "db_id": "sports_competition",
        "answers": [
            [
                "Brazil"
            ],
            [
                "China"
            ],
            [
                "England"
            ],
            [
                "Japan"
            ],
            [
                "UK"
            ],
            [
                "USA"
            ]
        ]
    },
    {
        "question": "What is the average number of gold medals for clubs?",
        "query": "MATCH (club_rank:`sports_competition.club_rank`)\nRETURN avg(club_rank.Gold)",
        "db_id": "sports_competition",
        "answers": [
            [
                5.833333333333333
            ]
        ]
    },
    {
        "question": "What is the average number of gold medals for a club?",
        "query": "MATCH (club_rank:`sports_competition.club_rank`)\nRETURN avg(club_rank.Gold)",
        "db_id": "sports_competition",
        "answers": [
            [
                5.833333333333333
            ]
        ]
    },
    {
        "question": "What are the types and countries of competitions?",
        "query": "MATCH (competition:`sports_competition.competition`)\nRETURN competition.Competition_type,competition.Country",
        "db_id": "sports_competition",
        "answers": [
            [
                "Friendly",
                "Italy"
            ],
            [
                "Friendly",
                "Spain"
            ],
            [
                "Friendly",
                "Australia"
            ],
            [
                "Friendly",
                "Russia"
            ],
            [
                "Friendly",
                "Russia"
            ],
            [
                "Friendly",
                "Australia"
            ],
            [
                "Tournament",
                "Russia"
            ],
            [
                "Tournament",
                "Slovenia"
            ],
            [
                "Tournament",
                "Slovenia"
            ],
            [
                "Friendly",
                "Italy"
            ],
            [
                "Friendly",
                "Ireland"
            ]
        ]
    },
    {
        "question": "What are the types of every competition and in which countries are they located?",
        "query": "MATCH (competition:`sports_competition.competition`)\nRETURN competition.Competition_type,competition.Country",
        "db_id": "sports_competition",
        "answers": [
            [
                "Friendly",
                "Italy"
            ],
            [
                "Friendly",
                "Spain"
            ],
            [
                "Friendly",
                "Australia"
            ],
            [
                "Friendly",
                "Russia"
            ],
            [
                "Friendly",
                "Russia"
            ],
            [
                "Friendly",
                "Australia"
            ],
            [
                "Tournament",
                "Russia"
            ],
            [
                "Tournament",
                "Slovenia"
            ],
            [
                "Tournament",
                "Slovenia"
            ],
            [
                "Friendly",
                "Italy"
            ],
            [
                "Friendly",
                "Ireland"
            ]
        ]
    },
    {
        "question": "What are the distinct years in which the competitions type is not \"Tournament\"?",
        "query": "MATCH (competition:`sports_competition.competition`)\nWHERE competition.Competition_type <> 'Tournament'\nRETURN DISTINCT competition.Year",
        "db_id": "sports_competition",
        "answers": [
            [
                2006.0
            ],
            [
                2007.0
            ]
        ]
    },
    {
        "question": "What are the different years for all competitions that are not of type equal to tournament?",
        "query": "MATCH (competition:`sports_competition.competition`)\nWHERE competition.Competition_type <> 'Tournament'\nRETURN DISTINCT competition.Year",
        "db_id": "sports_competition",
        "answers": [
            [
                2006.0
            ],
            [
                2007.0
            ]
        ]
    },
    {
        "question": "What are the maximum and minimum number of silver medals for clubs.",
        "query": "MATCH (club_rank:`sports_competition.club_rank`)\nRETURN max(club_rank.Silver),min(club_rank.Silver)",
        "db_id": "sports_competition",
        "answers": [
            [
                11.0,
                1.0
            ]
        ]
    },
    {
        "question": "What are the maximum and minimum number of silver medals for all the clubs?",
        "query": "MATCH (club_rank:`sports_competition.club_rank`)\nRETURN max(club_rank.Silver),min(club_rank.Silver)",
        "db_id": "sports_competition",
        "answers": [
            [
                11.0,
                1.0
            ]
        ]
    },
    {
        "question": "How many clubs have total medals less than 10?",
        "query": "MATCH (club_rank:`sports_competition.club_rank`)\nWHERE club_rank.Total < 10\nRETURN count(*)",
        "db_id": "sports_competition",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "What is the total number of clubs that have less than 10 medals in total?",
        "query": "MATCH (club_rank:`sports_competition.club_rank`)\nWHERE club_rank.Total < 10\nRETURN count(*)",
        "db_id": "sports_competition",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "List all club names in ascending order of start year.",
        "query": "MATCH (club:`sports_competition.club`)\nRETURN club.name\nORDER BY club.Start_year ASC",
        "db_id": "sports_competition",
        "answers": [
            [
                "BK Slide"
            ],
            [
                "HGS2"
            ],
            [
                "ASC"
            ],
            [
                "IFG"
            ],
            [
                "AIB"
            ],
            [
                "HSBIF"
            ]
        ]
    },
    {
        "question": "What are the names of all the clubs starting with the oldest?",
        "query": "MATCH (club:`sports_competition.club`)\nRETURN club.name\nORDER BY club.Start_year ASC",
        "db_id": "sports_competition",
        "answers": [
            [
                "BK Slide"
            ],
            [
                "HGS2"
            ],
            [
                "ASC"
            ],
            [
                "IFG"
            ],
            [
                "AIB"
            ],
            [
                "HSBIF"
            ]
        ]
    },
    {
        "question": "List all club names in descending alphabetical order.",
        "query": "MATCH (club:`sports_competition.club`)\nRETURN club.name\nORDER BY club.name DESC",
        "db_id": "sports_competition",
        "answers": [
            [
                "IFG"
            ],
            [
                "HSBIF"
            ],
            [
                "HGS2"
            ],
            [
                "BK Slide"
            ],
            [
                "ASC"
            ],
            [
                "AIB"
            ]
        ]
    },
    {
        "question": "What are the names of all the clubs ordered in descending alphabetical order?",
        "query": "MATCH (club:`sports_competition.club`)\nRETURN club.name\nORDER BY club.name DESC",
        "db_id": "sports_competition",
        "answers": [
            [
                "IFG"
            ],
            [
                "HSBIF"
            ],
            [
                "HGS2"
            ],
            [
                "BK Slide"
            ],
            [
                "ASC"
            ],
            [
                "AIB"
            ]
        ]
    },
    {
        "question": "Please show the names and the players of clubs.",
        "query": "MATCH (T1:`sports_competition.club`)-[]-(T2:`sports_competition.player`)\nRETURN T1.name,T2.Player_ID",
        "db_id": "sports_competition",
        "answers": [
            [
                "AIB",
                3
            ],
            [
                "AIB",
                1
            ],
            [
                "BK Slide",
                9
            ],
            [
                "BK Slide",
                12
            ],
            [
                "BK Slide",
                10
            ],
            [
                "BK Slide",
                4
            ],
            [
                "BK Slide",
                11
            ],
            [
                "BK Slide",
                2
            ],
            [
                "IFG",
                13
            ],
            [
                "ASC",
                14
            ],
            [
                "ASC",
                6
            ],
            [
                "ASC",
                15
            ],
            [
                "ASC",
                5
            ],
            [
                "HGS2",
                7
            ],
            [
                "HGS2",
                8
            ]
        ]
    },
    {
        "question": "What are the names and players of all the clubs?",
        "query": "MATCH (T1:`sports_competition.club`)-[]-(T2:`sports_competition.player`)\nRETURN T1.name,T2.Player_ID",
        "db_id": "sports_competition",
        "answers": [
            [
                "AIB",
                3
            ],
            [
                "AIB",
                1
            ],
            [
                "BK Slide",
                9
            ],
            [
                "BK Slide",
                12
            ],
            [
                "BK Slide",
                10
            ],
            [
                "BK Slide",
                4
            ],
            [
                "BK Slide",
                11
            ],
            [
                "BK Slide",
                2
            ],
            [
                "IFG",
                13
            ],
            [
                "ASC",
                14
            ],
            [
                "ASC",
                6
            ],
            [
                "ASC",
                15
            ],
            [
                "ASC",
                5
            ],
            [
                "HGS2",
                7
            ],
            [
                "HGS2",
                8
            ]
        ]
    },
    {
        "question": "Show the names of clubs that have players with position \"Right Wing\".",
        "query": "MATCH (T1:`sports_competition.club`)-[]-(T2:`sports_competition.player`)\nWHERE T2.Position = 'Right Wing'\nRETURN T1.name",
        "db_id": "sports_competition",
        "answers": [
            [
                "BK Slide"
            ]
        ]
    },
    {
        "question": "What are the names of the clubs that have players in the position of \"Right Wing\"?",
        "query": "MATCH (T1:`sports_competition.club`)-[]-(T2:`sports_competition.player`)\nWHERE T2.Position = 'Right Wing'\nRETURN T1.name",
        "db_id": "sports_competition",
        "answers": [
            [
                "BK Slide"
            ]
        ]
    },
    {
        "question": "What is the average points of players from club with name \"AIB\".",
        "query": "MATCH (T1:`sports_competition.club`)-[]-(T2:`sports_competition.player`)\nWHERE T1.name = 'AIB'\nRETURN avg(T2.Points)",
        "db_id": "sports_competition",
        "answers": [
            [
                28.0
            ]
        ]
    },
    {
        "question": "What is the average number of points for players from the \"AIB\" club?",
        "query": "MATCH (T1:`sports_competition.club`)-[]-(T2:`sports_competition.player`)\nWHERE T1.name = 'AIB'\nRETURN avg(T2.Points)",
        "db_id": "sports_competition",
        "answers": [
            [
                28.0
            ]
        ]
    },
    {
        "question": "List the types of competition and the number of competitions of each type.",
        "query": "MATCH (competition:`sports_competition.competition`)\nWITH count(competition.Competition_type) AS count, competition.Competition_type AS Competition_type\nRETURN Competition_type,count",
        "db_id": "sports_competition",
        "answers": [
            [
                "Friendly",
                8
            ],
            [
                "Tournament",
                3
            ]
        ]
    },
    {
        "question": "What are the types of competition and number of competitions for that type?",
        "query": "MATCH (competition:`sports_competition.competition`)\nWITH count(competition.Competition_type) AS count, competition.Competition_type AS Competition_type\nRETURN Competition_type,count",
        "db_id": "sports_competition",
        "answers": [
            [
                "Friendly",
                8
            ],
            [
                "Tournament",
                3
            ]
        ]
    },
    {
        "question": "List the most common type of competition.",
        "query": "MATCH (competition:`sports_competition.competition`)\nWITH count(competition.Competition_type) AS count, competition.Competition_type AS Competition_type\nRETURN Competition_type\nORDER BY count DESC\nLIMIT 1",
        "db_id": "sports_competition",
        "answers": [
            [
                "Friendly"
            ]
        ]
    },
    {
        "question": "What is the most common competition type?",
        "query": "MATCH (competition:`sports_competition.competition`)\nWITH count(competition.Competition_type) AS count, competition.Competition_type AS Competition_type\nRETURN Competition_type\nORDER BY count DESC\nLIMIT 1",
        "db_id": "sports_competition",
        "answers": [
            [
                "Friendly"
            ]
        ]
    },
    {
        "question": "List the types of competition that have at most five competitions of that type.",
        "query": "MATCH (competition:`sports_competition.competition`)\nWITH count(*) AS count, competition.Competition_type AS Competition_type\nWHERE count  <= 5\nRETURN Competition_type",
        "db_id": "sports_competition",
        "answers": [
            [
                "Tournament"
            ]
        ]
    },
    {
        "question": "What are the types of competition that have most 5 competitions for that type?",
        "query": "MATCH (competition:`sports_competition.competition`)\nWITH count(*) AS count, competition.Competition_type AS Competition_type\nWHERE count  <= 5\nRETURN Competition_type",
        "db_id": "sports_competition",
        "answers": [
            [
                "Tournament"
            ]
        ]
    },
    {
        "question": "List the names of clubs that do not have any players.",
        "query": "MATCH (club:`sports_competition.club`)\nWHERE NOT (club:`sports_competition.club`)-[]-(:`sports_competition.player`)\nRETURN club.name",
        "db_id": "sports_competition",
        "answers": [
            [
                "HSBIF"
            ]
        ]
    },
    {
        "question": "What are the names of all clubs that do not have any players?",
        "query": "MATCH (club:`sports_competition.club`)\nWHERE NOT (club:`sports_competition.club`)-[]-(:`sports_competition.player`)\nRETURN club.name",
        "db_id": "sports_competition",
        "answers": [
            [
                "HSBIF"
            ]
        ]
    },
    {
        "question": "how many different positions are there?",
        "query": "MATCH (player:`sports_competition.player`)\nRETURN count(DISTINCT player.Position)",
        "db_id": "sports_competition",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "How many different position for players are listed?",
        "query": "MATCH (player:`sports_competition.player`)\nRETURN count(DISTINCT player.Position)",
        "db_id": "sports_competition",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "find the number of players whose points are lower than 30 in each position.",
        "query": "MATCH (player:`sports_competition.player`)\nWHERE player.Points < 30\nWITH player.Position AS Position, count(player.Position) AS count\nRETURN count,Position",
        "db_id": "sports_competition",
        "answers": [
            [
                1,
                "Full Back"
            ],
            [
                1,
                "Left Wing"
            ],
            [
                3,
                "Prop"
            ],
            [
                3,
                "Second Row"
            ],
            [
                1,
                "Loose Forward"
            ]
        ]
    },
    {
        "question": "What is the number of players who have points less than 30 for each position?",
        "query": "MATCH (player:`sports_competition.player`)\nWHERE player.Points < 30\nWITH player.Position AS Position, count(player.Position) AS count\nRETURN count,Position",
        "db_id": "sports_competition",
        "answers": [
            [
                1,
                "Full Back"
            ],
            [
                1,
                "Left Wing"
            ],
            [
                3,
                "Prop"
            ],
            [
                3,
                "Second Row"
            ],
            [
                1,
                "Loose Forward"
            ]
        ]
    },
    {
        "question": "which country did participated in the most number of Tournament competitions?",
        "query": "MATCH (competition:`sports_competition.competition`)\nWHERE competition.Competition_type = 'Tournament'\nWITH competition.Country AS Country, count(competition.Country) AS count\nRETURN Country\nORDER BY count DESC\nLIMIT 1",
        "db_id": "sports_competition",
        "answers": [
            [
                "Slovenia"
            ]
        ]
    },
    {
        "question": "what is the name of the country that participated in the most tournament competitions?",
        "query": "MATCH (competition:`sports_competition.competition`)\nWHERE competition.Competition_type = 'Tournament'\nWITH competition.Country AS Country, count(competition.Country) AS count\nRETURN Country\nORDER BY count DESC\nLIMIT 1",
        "db_id": "sports_competition",
        "answers": [
            [
                "Slovenia"
            ]
        ]
    },
    {
        "question": "Return the name and id of the furniture with the highest market rate.",
        "query": "MATCH (furniture:`manufacturer.furniture`)\nRETURN furniture.Name,furniture.Furniture_ID\nORDER BY furniture.Market_Rate DESC\nLIMIT 1",
        "db_id": "manufacturer",
        "answers": [
            [
                "Billiard table",
                1
            ]
        ]
    },
    {
        "question": "Find the component amounts and names of all furnitures that have more than 10 components.",
        "query": "MATCH (furniture:`manufacturer.furniture`)\nWHERE furniture.Num_of_Component > 10\nRETURN furniture.Num_of_Component,furniture.Name",
        "db_id": "manufacturer",
        "answers": [
            [
                14,
                "Billiard table"
            ],
            [
                12,
                "Dining set"
            ]
        ]
    },
    {
        "question": "Find the name and component amount of the least popular furniture.",
        "query": "MATCH (furniture:`manufacturer.furniture`)\nRETURN furniture.Name,furniture.Num_of_Component\nORDER BY furniture.Market_Rate\nLIMIT 1",
        "db_id": "manufacturer",
        "answers": [
            [
                "Hatstand",
                5
            ]
        ]
    },
    {
        "question": "Which manufacturer has the most number of shops? List its name and year of opening.",
        "query": "MATCH (manufacturer:`manufacturer.manufacturer`)\nRETURN manufacturer.Open_Year,manufacturer.Name\nORDER BY manufacturer.Num_of_Shops DESC\nLIMIT 1",
        "db_id": "manufacturer",
        "answers": [
            [
                1992.0,
                "Jiaju"
            ]
        ]
    },
    {
        "question": "Find the average number of factories for the manufacturers that have more than 20 shops.",
        "query": "MATCH (manufacturer:`manufacturer.manufacturer`)\nWHERE manufacturer.Num_of_Shops > 20\nRETURN avg(manufacturer.Num_of_Factories)",
        "db_id": "manufacturer",
        "answers": [
            [
                19.5
            ]
        ]
    },
    {
        "question": "List all manufacturer names and ids ordered by their opening year.",
        "query": "MATCH (manufacturer:`manufacturer.manufacturer`)\nRETURN manufacturer.Name,manufacturer.Manufacturer_ID\nORDER BY manufacturer.Open_Year",
        "db_id": "manufacturer",
        "answers": [
            [
                "Chevrolet House",
                1
            ],
            [
                "IKEA",
                2
            ],
            [
                "Ford Make",
                3
            ],
            [
                "Jiaju",
                4
            ],
            [
                "Chevrolet",
                5
            ],
            [
                "Dodge",
                6
            ],
            [
                "Tomorrow",
                7
            ]
        ]
    },
    {
        "question": "Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops.",
        "query": "MATCH (manufacturer:`manufacturer.manufacturer`)\nWHERE manufacturer.Num_of_Shops > 10 OR manufacturer.Num_of_Factories < 10\nRETURN manufacturer.Name,manufacturer.Open_Year",
        "db_id": "manufacturer",
        "answers": [
            [
                "IKEA",
                1990.0
            ],
            [
                "Jiaju",
                1992.0
            ],
            [
                "Chevrolet",
                2000.0
            ],
            [
                "Dodge",
                2001.0
            ]
        ]
    },
    {
        "question": "what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.",
        "query": "MATCH (manufacturer:`manufacturer.manufacturer`)\nWHERE manufacturer.Open_Year < 1990\nRETURN max(manufacturer.Num_of_Shops),avg(manufacturer.Num_of_Factories)",
        "db_id": "manufacturer",
        "answers": [
            [
                8,
                36.0
            ]
        ]
    },
    {
        "question": "Find the market shares and names of furnitures which no any company is producing in our records.",
        "query": "MATCH (furniture:`manufacturer.furniture`)\nWHERE NOT (furniture:`manufacturer.furniture`)-[:`manufacturer.furniture_manufacte`]-()\nRETURN furniture.Market_Rate,furniture.Name",
        "db_id": "manufacturer",
        "answers": [
            [
                3.5,
                "Bench"
            ],
            [
                2.0,
                "Four-poster bed"
            ]
        ]
    },
    {
        "question": "List the full name (first and last name), and salary for those employees who earn below 6000.",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE employees.SALARY < 6000\nRETURN employees.FIRST_NAME,employees.LAST_NAME,employees.SALARY",
        "db_id": "hr_1",
        "answers": [
            [
                "David",
                "Austin",
                4800
            ],
            [
                "Valli",
                "Pataballa",
                4800
            ],
            [
                "Diana",
                "Lorentz",
                4200
            ],
            [
                "Alexander",
                "Khoo",
                3100
            ],
            [
                "Shelli",
                "Baida",
                2900
            ],
            [
                "Sigal",
                "Tobias",
                2800
            ],
            [
                "Guy",
                "Himuro",
                2600
            ],
            [
                "Karen",
                "Colmenares",
                2500
            ],
            [
                "Kevin",
                "Mourgos",
                5800
            ],
            [
                "Julia",
                "Nayer",
                3200
            ],
            [
                "Irene",
                "Mikkilineni",
                2700
            ],
            [
                "James",
                "Landry",
                2400
            ],
            [
                "Steven",
                "Markle",
                2200
            ],
            [
                "Laura",
                "Bissot",
                3300
            ],
            [
                "Mozhe",
                "Atkinson",
                2800
            ],
            [
                "James",
                "Marlow",
                2500
            ],
            [
                "TJ",
                "Olson",
                2100
            ],
            [
                "Jason",
                "Mallin",
                3300
            ],
            [
                "Michael",
                "Rogers",
                2900
            ],
            [
                "Ki",
                "Gee",
                2400
            ],
            [
                "Hazel",
                "Philtanker",
                2200
            ],
            [
                "Renske",
                "Ladwig",
                3600
            ],
            [
                "Stephen",
                "Stiles",
                3200
            ],
            [
                "John",
                "Seo",
                2700
            ],
            [
                "Joshua",
                "Patel",
                2500
            ],
            [
                "Trenna",
                "Rajs",
                3500
            ],
            [
                "Curtis",
                "Davies",
                3100
            ],
            [
                "Randall",
                "Matos",
                2600
            ],
            [
                "Peter",
                "Vargas",
                2500
            ],
            [
                "Winston",
                "Taylor",
                3200
            ],
            [
                "Jean",
                "Fleaur",
                3100
            ],
            [
                "Martha",
                "Sullivan",
                2500
            ],
            [
                "Girard",
                "Geoni",
                2800
            ],
            [
                "Nandita",
                "Sarchand",
                4200
            ],
            [
                "Alexis",
                "Bull",
                4100
            ],
            [
                "Julia",
                "Dellinger",
                3400
            ],
            [
                "Anthony",
                "Cabrio",
                3000
            ],
            [
                "Kelly",
                "Chung",
                3800
            ],
            [
                "Jennifer",
                "Dilly",
                3600
            ],
            [
                "Timothy",
                "Gates",
                2900
            ],
            [
                "Randall",
                "Perkins",
                2500
            ],
            [
                "Sarah",
                "Bell",
                4000
            ],
            [
                "Britney",
                "Everett",
                3900
            ],
            [
                "Samuel",
                "McCain",
                3200
            ],
            [
                "Vance",
                "Jones",
                2800
            ],
            [
                "Alana",
                "Walsh",
                3100
            ],
            [
                "Kevin",
                "Feeney",
                3000
            ],
            [
                "Donald",
                "OConnell",
                2600
            ],
            [
                "Douglas",
                "Grant",
                2600
            ],
            [
                "Jennifer",
                "Whalen",
                4400
            ]
        ]
    },
    {
        "question": "What are the full names and salaries for any employees earning less than 6000?",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE employees.SALARY < 6000\nRETURN employees.FIRST_NAME,employees.LAST_NAME,employees.SALARY",
        "db_id": "hr_1",
        "answers": [
            [
                "David",
                "Austin",
                4800
            ],
            [
                "Valli",
                "Pataballa",
                4800
            ],
            [
                "Diana",
                "Lorentz",
                4200
            ],
            [
                "Alexander",
                "Khoo",
                3100
            ],
            [
                "Shelli",
                "Baida",
                2900
            ],
            [
                "Sigal",
                "Tobias",
                2800
            ],
            [
                "Guy",
                "Himuro",
                2600
            ],
            [
                "Karen",
                "Colmenares",
                2500
            ],
            [
                "Kevin",
                "Mourgos",
                5800
            ],
            [
                "Julia",
                "Nayer",
                3200
            ],
            [
                "Irene",
                "Mikkilineni",
                2700
            ],
            [
                "James",
                "Landry",
                2400
            ],
            [
                "Steven",
                "Markle",
                2200
            ],
            [
                "Laura",
                "Bissot",
                3300
            ],
            [
                "Mozhe",
                "Atkinson",
                2800
            ],
            [
                "James",
                "Marlow",
                2500
            ],
            [
                "TJ",
                "Olson",
                2100
            ],
            [
                "Jason",
                "Mallin",
                3300
            ],
            [
                "Michael",
                "Rogers",
                2900
            ],
            [
                "Ki",
                "Gee",
                2400
            ],
            [
                "Hazel",
                "Philtanker",
                2200
            ],
            [
                "Renske",
                "Ladwig",
                3600
            ],
            [
                "Stephen",
                "Stiles",
                3200
            ],
            [
                "John",
                "Seo",
                2700
            ],
            [
                "Joshua",
                "Patel",
                2500
            ],
            [
                "Trenna",
                "Rajs",
                3500
            ],
            [
                "Curtis",
                "Davies",
                3100
            ],
            [
                "Randall",
                "Matos",
                2600
            ],
            [
                "Peter",
                "Vargas",
                2500
            ],
            [
                "Winston",
                "Taylor",
                3200
            ],
            [
                "Jean",
                "Fleaur",
                3100
            ],
            [
                "Martha",
                "Sullivan",
                2500
            ],
            [
                "Girard",
                "Geoni",
                2800
            ],
            [
                "Nandita",
                "Sarchand",
                4200
            ],
            [
                "Alexis",
                "Bull",
                4100
            ],
            [
                "Julia",
                "Dellinger",
                3400
            ],
            [
                "Anthony",
                "Cabrio",
                3000
            ],
            [
                "Kelly",
                "Chung",
                3800
            ],
            [
                "Jennifer",
                "Dilly",
                3600
            ],
            [
                "Timothy",
                "Gates",
                2900
            ],
            [
                "Randall",
                "Perkins",
                2500
            ],
            [
                "Sarah",
                "Bell",
                4000
            ],
            [
                "Britney",
                "Everett",
                3900
            ],
            [
                "Samuel",
                "McCain",
                3200
            ],
            [
                "Vance",
                "Jones",
                2800
            ],
            [
                "Alana",
                "Walsh",
                3100
            ],
            [
                "Kevin",
                "Feeney",
                3000
            ],
            [
                "Donald",
                "OConnell",
                2600
            ],
            [
                "Douglas",
                "Grant",
                2600
            ],
            [
                "Jennifer",
                "Whalen",
                4400
            ]
        ]
    },
    {
        "question": "Display the first name, and department number for all employees whose last name is \"McEwen\".",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE employees.LAST_NAME = 'McEwen'\nRETURN employees.FIRST_NAME,employees.DEPARTMENT_ID",
        "db_id": "hr_1",
        "answers": [
            [
                "Allan",
                80
            ]
        ]
    },
    {
        "question": "What are the first names and department numbers for employees with last name McEwen?",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE employees.LAST_NAME = 'McEwen'\nRETURN employees.FIRST_NAME,employees.DEPARTMENT_ID",
        "db_id": "hr_1",
        "answers": [
            [
                "Allan",
                80
            ]
        ]
    },
    {
        "question": "what is the phone number of employees whose salary is in the range of 8000 and 12000?",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE 8000<=employees.SALARY<=12000\nRETURN employees.PHONE_NUMBER",
        "db_id": "hr_1",
        "answers": [
            [
                "590.423.4567"
            ],
            [
                "515.124.4569"
            ],
            [
                "515.124.4169"
            ],
            [
                "515.124.4269"
            ],
            [
                "515.127.4561"
            ],
            [
                "650.123.1234"
            ],
            [
                "650.123.2234"
            ],
            [
                "011.44.1344.429278"
            ],
            [
                "011.44.1344.619268"
            ],
            [
                "011.44.1344.429018"
            ],
            [
                "011.44.1344.129268"
            ],
            [
                "011.44.1344.345268"
            ],
            [
                "011.44.1344.478968"
            ],
            [
                "011.44.1344.498718"
            ],
            [
                "011.44.1345.429268"
            ],
            [
                "011.44.1345.929268"
            ],
            [
                "011.44.1345.829268"
            ],
            [
                "011.44.1345.729268"
            ],
            [
                "011.44.1346.129268"
            ],
            [
                "011.44.1346.229268"
            ],
            [
                "011.44.1343.929268"
            ],
            [
                "011.44.1343.829268"
            ],
            [
                "011.44.1343.729268"
            ],
            [
                "011.44.1644.429267"
            ],
            [
                "011.44.1644.429266"
            ],
            [
                "011.44.1644.429265"
            ],
            [
                "011.44.1644.429264"
            ],
            [
                "515.123.8888"
            ],
            [
                "515.123.8080"
            ],
            [
                "515.123.8181"
            ]
        ]
    },
    {
        "question": "Return the phone numbers of employees with salaries between 8000 and 12000.",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE 8000<=employees.SALARY<=12000\nRETURN employees.PHONE_NUMBER",
        "db_id": "hr_1",
        "answers": [
            [
                "590.423.4567"
            ],
            [
                "515.124.4569"
            ],
            [
                "515.124.4169"
            ],
            [
                "515.124.4269"
            ],
            [
                "515.127.4561"
            ],
            [
                "650.123.1234"
            ],
            [
                "650.123.2234"
            ],
            [
                "011.44.1344.429278"
            ],
            [
                "011.44.1344.619268"
            ],
            [
                "011.44.1344.429018"
            ],
            [
                "011.44.1344.129268"
            ],
            [
                "011.44.1344.345268"
            ],
            [
                "011.44.1344.478968"
            ],
            [
                "011.44.1344.498718"
            ],
            [
                "011.44.1345.429268"
            ],
            [
                "011.44.1345.929268"
            ],
            [
                "011.44.1345.829268"
            ],
            [
                "011.44.1345.729268"
            ],
            [
                "011.44.1346.129268"
            ],
            [
                "011.44.1346.229268"
            ],
            [
                "011.44.1343.929268"
            ],
            [
                "011.44.1343.829268"
            ],
            [
                "011.44.1343.729268"
            ],
            [
                "011.44.1644.429267"
            ],
            [
                "011.44.1644.429266"
            ],
            [
                "011.44.1644.429265"
            ],
            [
                "011.44.1644.429264"
            ],
            [
                "515.123.8888"
            ],
            [
                "515.123.8080"
            ],
            [
                "515.123.8181"
            ]
        ]
    },
    {
        "question": "What are the first and last name for those employees who works either in department 70 or 90?",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE employees.DEPARTMENT_ID = 70 OR employees.DEPARTMENT_ID = 90\nRETURN employees.FIRST_NAME,employees.LAST_NAME",
        "db_id": "hr_1",
        "answers": [
            [
                "Steven",
                "King"
            ],
            [
                "Neena",
                "Kochhar"
            ],
            [
                "Lex",
                "De Haan"
            ],
            [
                "Hermann",
                "Baer"
            ]
        ]
    },
    {
        "question": "What are the full names of employees who with in department 70 or 90?",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE employees.DEPARTMENT_ID = 70 OR employees.DEPARTMENT_ID = 90\nRETURN employees.FIRST_NAME,employees.LAST_NAME",
        "db_id": "hr_1",
        "answers": [
            [
                "Steven",
                "King"
            ],
            [
                "Neena",
                "Kochhar"
            ],
            [
                "Lex",
                "De Haan"
            ],
            [
                "Hermann",
                "Baer"
            ]
        ]
    },
    {
        "question": "Find the salary and manager number for those employees who is working under a manager.",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE exists(employees.MANAGER_ID)\nRETURN employees.SALARY,employees.MANAGER_ID",
        "db_id": "hr_1",
        "answers": [
            [
                24000,
                0
            ],
            [
                17000,
                100
            ],
            [
                17000,
                100
            ],
            [
                9000,
                102
            ],
            [
                6000,
                103
            ],
            [
                4800,
                103
            ],
            [
                4800,
                103
            ],
            [
                4200,
                103
            ],
            [
                12000,
                101
            ],
            [
                9000,
                108
            ],
            [
                8200,
                108
            ],
            [
                7700,
                108
            ],
            [
                7800,
                108
            ],
            [
                6900,
                108
            ],
            [
                11000,
                100
            ],
            [
                3100,
                114
            ],
            [
                2900,
                114
            ],
            [
                2800,
                114
            ],
            [
                2600,
                114
            ],
            [
                2500,
                114
            ],
            [
                8000,
                100
            ],
            [
                8200,
                100
            ],
            [
                7900,
                100
            ],
            [
                6500,
                100
            ],
            [
                5800,
                100
            ],
            [
                3200,
                120
            ],
            [
                2700,
                120
            ],
            [
                2400,
                120
            ],
            [
                2200,
                120
            ],
            [
                3300,
                121
            ],
            [
                2800,
                121
            ],
            [
                2500,
                121
            ],
            [
                2100,
                121
            ],
            [
                3300,
                122
            ],
            [
                2900,
                122
            ],
            [
                2400,
                122
            ],
            [
                2200,
                122
            ],
            [
                3600,
                123
            ],
            [
                3200,
                123
            ],
            [
                2700,
                123
            ],
            [
                2500,
                123
            ],
            [
                3500,
                124
            ],
            [
                3100,
                124
            ],
            [
                2600,
                124
            ],
            [
                2500,
                124
            ],
            [
                14000,
                100
            ],
            [
                13500,
                100
            ],
            [
                12000,
                100
            ],
            [
                11000,
                100
            ],
            [
                10500,
                100
            ],
            [
                10000,
                145
            ],
            [
                9500,
                145
            ],
            [
                9000,
                145
            ],
            [
                8000,
                145
            ],
            [
                7500,
                145
            ],
            [
                7000,
                145
            ],
            [
                10000,
                146
            ],
            [
                9500,
                146
            ],
            [
                9000,
                146
            ],
            [
                8000,
                146
            ],
            [
                7500,
                146
            ],
            [
                7000,
                146
            ],
            [
                10500,
                147
            ],
            [
                9500,
                147
            ],
            [
                7200,
                147
            ],
            [
                6800,
                147
            ],
            [
                6400,
                147
            ],
            [
                6200,
                147
            ],
            [
                11500,
                148
            ],
            [
                10000,
                148
            ],
            [
                9600,
                148
            ],
            [
                7400,
                148
            ],
            [
                7300,
                148
            ],
            [
                6100,
                148
            ],
            [
                11000,
                149
            ],
            [
                8800,
                149
            ],
            [
                8600,
                149
            ],
            [
                8400,
                149
            ],
            [
                7000,
                149
            ],
            [
                6200,
                149
            ],
            [
                3200,
                120
            ],
            [
                3100,
                120
            ],
            [
                2500,
                120
            ],
            [
                2800,
                120
            ],
            [
                4200,
                121
            ],
            [
                4100,
                121
            ],
            [
                3400,
                121
            ],
            [
                3000,
                121
            ],
            [
                3800,
                122
            ],
            [
                3600,
                122
            ],
            [
                2900,
                122
            ],
            [
                2500,
                122
            ],
            [
                4000,
                123
            ],
            [
                3900,
                123
            ],
            [
                3200,
                123
            ],
            [
                2800,
                123
            ],
            [
                3100,
                124
            ],
            [
                3000,
                124
            ],
            [
                2600,
                124
            ],
            [
                2600,
                124
            ],
            [
                4400,
                101
            ],
            [
                13000,
                100
            ],
            [
                6000,
                201
            ],
            [
                6500,
                101
            ],
            [
                10000,
                101
            ],
            [
                12000,
                101
            ],
            [
                8300,
                205
            ]
        ]
    },
    {
        "question": "What are the salaries and manager ids for employees who have managers?",
        "query": "MATCH (employees:`hr_1.employees`)\nWHERE exists(employees.MANAGER_ID)\nRETURN employees.SALARY,employees.MANAGER_ID",
        "db_id": "hr_1",
        "answers": [
            [
                24000,
                0
            ],
            [
                17000,
                100
            ],
            [
                17000,
                100
            ],
            [
                9000,
                102
            ],
            [
                6000,
                103
            ],
            [
                4800,
                103
            ],
            [
                4800,
                103
            ],
            [
                4200,
                103
            ],
            [
                12000,
                101
            ],
            [
                9000,
                108
            ],
            [
                8200,
                108
            ],
            [
                7700,
                108
            ],
            [
                7800,
                108
            ],
            [
                6900,
                108
            ],
            [
                11000,
                100
            ],
            [
                3100,
                114
            ],
            [
                2900,
                114
            ],
            [
                2800,
                114
            ],
            [
                2600,
                114
            ],
            [
                2500,
                114
            ],
            [
                8000,
                100
            ],
            [
                8200,
                100
            ],
            [
                7900,
                100
            ],
            [
                6500,
                100
            ],
            [
                5800,
                100
            ],
            [
                3200,
                120
            ],
            [
                2700,
                120
            ],
            [
                2400,
                120
            ],
            [
                2200,
                120
            ],
            [
                3300,
                121
            ],
            [
                2800,
                121
            ],
            [
                2500,
                121
            ],
            [
                2100,
                121
            ],
            [
                3300,
                122
            ],
            [
                2900,
                122
            ],
            [
                2400,
                122
            ],
            [
                2200,
                122
            ],
            [
                3600,
                123
            ],
            [
                3200,
                123
            ],
            [
                2700,
                123
            ],
            [
                2500,
                123
            ],
            [
                3500,
                124
            ],
            [
                3100,
                124
            ],
            [
                2600,
                124
            ],
            [
                2500,
                124
            ],
            [
                14000,
                100
            ],
            [
                13500,
                100
            ],
            [
                12000,
                100
            ],
            [
                11000,
                100
            ],
            [
                10500,
                100
            ],
            [
                10000,
                145
            ],
            [
                9500,
                145
            ],
            [
                9000,
                145
            ],
            [
                8000,
                145
            ],
            [
                7500,
                145
            ],
            [
                7000,
                145
            ],
            [
                10000,
                146
            ],
            [
                9500,
                146
            ],
            [
                9000,
                146
            ],
            [
                8000,
                146
            ],
            [
                7500,
                146
            ],
            [
                7000,
                146
            ],
            [
                10500,
                147
            ],
            [
                9500,
                147
            ],
            [
                7200,
                147
            ],
            [
                6800,
                147
            ],
            [
                6400,
                147
            ],
            [
                6200,
                147
            ],
            [
                11500,
                148
            ],
            [
                10000,
                148
            ],
            [
                9600,
                148
            ],
            [
                7400,
                148
            ],
            [
                7300,
                148
            ],
            [
                6100,
                148
            ],
            [
                11000,
                149
            ],
            [
                8800,
                149
            ],
            [
                8600,
                149
            ],
            [
                8400,
                149
            ],
            [
                7000,
                149
            ],
            [
                6200,
                149
            ],
            [
                3200,
                120
            ],
            [
                3100,
                120
            ],
            [
                2500,
                120
            ],
            [
                2800,
                120
            ],
            [
                4200,
                121
            ],
            [
                4100,
                121
            ],
            [
                3400,
                121
            ],
            [
                3000,
                121
            ],
            [
                3800,
                122
            ],
            [
                3600,
                122
            ],
            [
                2900,
                122
            ],
            [
                2500,
                122
            ],
            [
                4000,
                123
            ],
            [
                3900,
                123
            ],
            [
                3200,
                123
            ],
            [
                2800,
                123
            ],
            [
                3100,
                124
            ],
            [
                3000,
                124
            ],
            [
                2600,
                124
            ],
            [
                2600,
                124
            ],
            [
                4400,
                101
            ],
            [
                13000,
                100
            ],
            [
                6000,
                201
            ],
            [
                6500,
                101
            ],
            [
                10000,
                101
            ],
            [
                12000,
                101
            ],
            [
                8300,
                205
            ]
        ]
    },
    {
        "question": "display the job title of jobs which minimum salary is greater than 9000.",
        "query": "MATCH (jobs:`hr_1.jobs`)\nWHERE jobs.MIN_SALARY > 9000\nRETURN jobs.JOB_TITLE",
        "db_id": "hr_1",
        "answers": [
            [
                "President"
            ],
            [
                "Administration Vice President"
            ],
            [
                "Sales Manager"
            ]
        ]
    },
    {
        "question": "Which job titles correspond to jobs with salaries over 9000?",
        "query": "MATCH (jobs:`hr_1.jobs`)\nWHERE jobs.MIN_SALARY > 9000\nRETURN jobs.JOB_TITLE",
        "db_id": "hr_1",
        "answers": [
            [
                "President"
            ],
            [
                "Administration Vice President"
            ],
            [
                "Sales Manager"
            ]
        ]
    },
    {
        "question": "display the country ID and number of cities for each country.",
        "query": "MATCH (locations:`hr_1.locations`)\nWITH count(locations.COUNTRY_ID) AS count, locations.COUNTRY_ID AS COUNTRY_ID\nRETURN COUNTRY_ID,count",
        "db_id": "hr_1",
        "answers": [
            [
                "IT",
                2
            ],
            [
                "JP",
                2
            ],
            [
                "US",
                4
            ],
            [
                "CA",
                2
            ],
            [
                "CN",
                1
            ],
            [
                "IN",
                1
            ],
            [
                "AU",
                1
            ],
            [
                "SG",
                1
            ],
            [
                "UK",
                2
            ],
            [
                "Ox",
                1
            ],
            [
                "DE",
                1
            ],
            [
                "BR",
                1
            ],
            [
                "CH",
                2
            ],
            [
                "NL",
                1
            ],
            [
                "\"",
                1
            ]
        ]
    },
    {
        "question": "Give the country id and corresponding count of cities in each country.",
        "query": "MATCH (locations:`hr_1.locations`)\nWITH count(locations.COUNTRY_ID) AS count, locations.COUNTRY_ID AS COUNTRY_ID\nRETURN COUNTRY_ID,count",
        "db_id": "hr_1",
        "answers": [
            [
                "IT",
                2
            ],
            [
                "JP",
                2
            ],
            [
                "US",
                4
            ],
            [
                "CA",
                2
            ],
            [
                "CN",
                1
            ],
            [
                "IN",
                1
            ],
            [
                "AU",
                1
            ],
            [
                "SG",
                1
            ],
            [
                "UK",
                2
            ],
            [
                "Ox",
                1
            ],
            [
                "DE",
                1
            ],
            [
                "BR",
                1
            ],
            [
                "CH",
                2
            ],
            [
                "NL",
                1
            ],
            [
                "\"",
                1
            ]
        ]
    },
    {
        "question": "display the ID for those employees who did two or more jobs in the past.",
        "query": "MATCH (job_history:`hr_1.job_history`)\nWITH count(*) AS count, job_history.EMPLOYEE_ID AS EMPLOYEE_ID\nWHERE count  >= 2\nRETURN EMPLOYEE_ID",
        "db_id": "hr_1",
        "answers": [
            [
                101
            ],
            [
                200
            ],
            [
                176
            ]
        ]
    },
    {
        "question": "What are the employee ids for employees who have held two or more jobs?",
        "query": "MATCH (job_history:`hr_1.job_history`)\nWITH count(*) AS count, job_history.EMPLOYEE_ID AS EMPLOYEE_ID\nWHERE count  >= 2\nRETURN EMPLOYEE_ID",
        "db_id": "hr_1",
        "answers": [
            [
                101
            ],
            [
                200
            ],
            [
                176
            ]
        ]
    },
    {
        "question": "display the ID for those employees who did two or more jobs in the past.",
        "query": "MATCH (job_history:`hr_1.job_history`)\nWITH count(*) AS count, job_history.EMPLOYEE_ID AS EMPLOYEE_ID\nWHERE count  >= 2\nRETURN EMPLOYEE_ID",
        "db_id": "hr_1",
        "answers": [
            [
                101
            ],
            [
                200
            ],
            [
                176
            ]
        ]
    },
    {
        "question": "What are the employee ids for those who had two or more jobs.",
        "query": "MATCH (job_history:`hr_1.job_history`)\nWITH count(*) AS count, job_history.EMPLOYEE_ID AS EMPLOYEE_ID\nWHERE count  >= 2\nRETURN EMPLOYEE_ID",
        "db_id": "hr_1",
        "answers": [
            [
                101
            ],
            [
                200
            ],
            [
                176
            ]
        ]
    },
    {
        "question": "What is the name of the song that was released in the most recent year?",
        "query": "MATCH (song:`music_1.song`)\nRETURN song.song_name,song.releasedate\nORDER BY song.releasedate DESC\nLIMIT 1",
        "db_id": "music_1",
        "answers": [
            [
                "Ami opar hoye",
                "7-APR-2001"
            ]
        ]
    },
    {
        "question": "What is the name of the song that was released most recently?",
        "query": "MATCH (song:`music_1.song`)\nRETURN song.song_name,song.releasedate\nORDER BY song.releasedate DESC\nLIMIT 1",
        "db_id": "music_1",
        "answers": [
            [
                "Ami opar hoye",
                "7-APR-2001"
            ]
        ]
    },
    {
        "question": "What is the id of the longest song?",
        "query": "MATCH (files:`music_1.files`)\nRETURN files.f_id\nORDER BY files.duration DESC\nLIMIT 1",
        "db_id": "music_1",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "Find the id of the song that lasts the longest.",
        "query": "MATCH (files:`music_1.files`)\nRETURN files.f_id\nORDER BY files.duration DESC\nLIMIT 1",
        "db_id": "music_1",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "Find the names of all English songs.",
        "query": "MATCH (song:`music_1.song`)\nWHERE song.languages = 'english'\nRETURN song.song_name",
        "db_id": "music_1",
        "answers": [
            [
                "My love"
            ],
            [
                "Just beat it"
            ]
        ]
    },
    {
        "question": "What are the names of all songs in English?",
        "query": "MATCH (song:`music_1.song`)\nWHERE song.languages = 'english'\nRETURN song.song_name",
        "db_id": "music_1",
        "answers": [
            [
                "My love"
            ],
            [
                "Just beat it"
            ]
        ]
    },
    {
        "question": "What are the id of songs whose format is mp3.",
        "query": "MATCH (files:`music_1.files`)\nWHERE files.formats = 'mp3'\nRETURN files.f_id",
        "db_id": "music_1",
        "answers": [
            [
                2
            ],
            [
                5
            ]
        ]
    },
    {
        "question": "What are the id of all the files in mp3 format?",
        "query": "MATCH (files:`music_1.files`)\nWHERE files.formats = 'mp3'\nRETURN files.f_id",
        "db_id": "music_1",
        "answers": [
            [
                2
            ],
            [
                5
            ]
        ]
    },
    {
        "question": "List the name and country of origin for all singers who have produced songs with rating above 9.",
        "query": "MATCH (T1:`music_1.artist`)-[]-(T2:`music_1.song`)\nWHERE T2.rating > 9\nRETURN DISTINCT T1.artist_name,T1.country",
        "db_id": "music_1",
        "answers": [
            [
                "Topu",
                "India"
            ]
        ]
    },
    {
        "question": "What are the different names and countries of origins for all artists whose song ratings are above 9?",
        "query": "MATCH (T1:`music_1.artist`)-[]-(T2:`music_1.song`)\nWHERE T2.rating > 9\nRETURN DISTINCT T1.artist_name,T1.country",
        "db_id": "music_1",
        "answers": [
            [
                "Topu",
                "India"
            ]
        ]
    },
    {
        "question": "List the file size and format for all songs that have resolution lower than 800.",
        "query": "MATCH (T1:`music_1.files`)-[]-(T2:`music_1.song`)\nWHERE T2.resolution < 800\nRETURN DISTINCT T1.file_size,T1.formats",
        "db_id": "music_1",
        "answers": [
            [
                "4.12 MB",
                "mp3"
            ],
            [
                "3.69 MB",
                "mp4"
            ],
            [
                "5.10 MB",
                "mp3"
            ],
            [
                "4.10 MB",
                "mp4"
            ]
        ]
    },
    {
        "question": "What are the file sizes and formats for all songs with a resolution lower than 800?",
        "query": "MATCH (T1:`music_1.files`)-[]-(T2:`music_1.song`)\nWHERE T2.resolution < 800\nRETURN DISTINCT T1.file_size,T1.formats",
        "db_id": "music_1",
        "answers": [
            [
                "4.12 MB",
                "mp3"
            ],
            [
                "3.69 MB",
                "mp4"
            ],
            [
                "5.10 MB",
                "mp3"
            ],
            [
                "4.10 MB",
                "mp4"
            ]
        ]
    },
    {
        "question": "What is the name of the artist who produced the shortest song?",
        "query": "MATCH (T1:`music_1.song`)-[]-(T2:`music_1.files`)\nRETURN T1.artist_name\nORDER BY T2.duration\nLIMIT 1",
        "db_id": "music_1",
        "answers": [
            [
                "Prity"
            ]
        ]
    },
    {
        "question": "What are the names of the artists who sang the shortest song?",
        "query": "MATCH (T1:`music_1.song`)-[]-(T2:`music_1.files`)\nRETURN T1.artist_name\nORDER BY T2.duration\nLIMIT 1",
        "db_id": "music_1",
        "answers": [
            [
                "Prity"
            ]
        ]
    },
    {
        "question": "What are the names and countries of origin for the artists who produced the top three highly rated songs.",
        "query": "MATCH (T1:`music_1.artist`)-[]-(T2:`music_1.song`)\nRETURN T1.artist_name,T1.country\nORDER BY T2.rating DESC\nLIMIT 3",
        "db_id": "music_1",
        "answers": [
            [
                "Topu",
                "India"
            ],
            [
                "Shrikanta",
                "India"
            ],
            [
                "Michel",
                "UK"
            ]
        ]
    },
    {
        "question": "What are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from?",
        "query": "MATCH (T1:`music_1.artist`)-[]-(T2:`music_1.song`)\nRETURN T1.artist_name,T1.country\nORDER BY T2.rating DESC\nLIMIT 3",
        "db_id": "music_1",
        "answers": [
            [
                "Topu",
                "India"
            ],
            [
                "Shrikanta",
                "India"
            ],
            [
                "Michel",
                "UK"
            ]
        ]
    },
    {
        "question": "How many artists are from Bangladesh?",
        "query": "MATCH (artist:`music_1.artist`)\nWHERE artist.country = 'Bangladesh'\nRETURN count(*)",
        "db_id": "music_1",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "How many Bangladeshi artists are listed?",
        "query": "MATCH (artist:`music_1.artist`)\nWHERE artist.country = 'Bangladesh'\nRETURN count(*)",
        "db_id": "music_1",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "What is the average rating of songs produced by female artists?",
        "query": "MATCH (T1:`music_1.artist`)-[]-(T2:`music_1.song`)\nWHERE T1.gender = 'Female'\nRETURN avg(T2.rating)",
        "db_id": "music_1",
        "answers": [
            [
                7.333333333333333
            ]
        ]
    },
    {
        "question": "How many songs, on average, are sung by a female artist?",
        "query": "MATCH (T1:`music_1.artist`)-[]-(T2:`music_1.song`)\nWHERE T1.gender = 'Female'\nRETURN avg(T2.rating)",
        "db_id": "music_1",
        "answers": [
            [
                7.333333333333333
            ]
        ]
    },
    {
        "question": "What is the most popular file format?",
        "query": "MATCH (files:`music_1.files`)\nWITH count(files.formats) AS count, files.formats AS formats\nRETURN formats\nORDER BY count DESC\nLIMIT 1",
        "db_id": "music_1",
        "answers": [
            [
                "mp4"
            ]
        ]
    },
    {
        "question": "Find the file format that is used by the most files.",
        "query": "MATCH (files:`music_1.files`)\nWITH count(files.formats) AS count, files.formats AS formats\nRETURN formats\nORDER BY count DESC\nLIMIT 1",
        "db_id": "music_1",
        "answers": [
            [
                "mp4"
            ]
        ]
    },
    {
        "question": "What is the country of origin of the artist who is female and produced a song in Bangla?",
        "query": "MATCH (T1:`music_1.artist`)-[]-(T2:`music_1.song`)\nWHERE T1.gender = 'Female' AND T2.languages = 'bangla'\nRETURN T1.country",
        "db_id": "music_1",
        "answers": [
            [
                "Bangladesh"
            ],
            [
                "Bangladesh"
            ],
            [
                "India"
            ]
        ]
    },
    {
        "question": "What countries are the female artists who sung in the language Bangla from?",
        "query": "MATCH (T1:`music_1.artist`)-[]-(T2:`music_1.song`)\nWHERE T1.gender = 'Female' AND T2.languages = 'bangla'\nRETURN T1.country",
        "db_id": "music_1",
        "answers": [
            [
                "Bangladesh"
            ],
            [
                "Bangladesh"
            ],
            [
                "India"
            ]
        ]
    },
    {
        "question": "What is the number of artists for each gender?",
        "query": "MATCH (artist:`music_1.artist`)\nWITH artist.gender AS gender, count(artist.gender) AS count\nRETURN count,gender",
        "db_id": "music_1",
        "answers": [
            [
                3,
                "Male"
            ],
            [
                3,
                "Female"
            ]
        ]
    },
    {
        "question": "How many artists are male and how many are female?",
        "query": "MATCH (artist:`music_1.artist`)\nWITH artist.gender AS gender, count(artist.gender) AS count\nRETURN count,gender",
        "db_id": "music_1",
        "answers": [
            [
                3,
                "Male"
            ],
            [
                3,
                "Female"
            ]
        ]
    },
    {
        "question": "Return the gender and name of artist who produced the song with the lowest resolution.",
        "query": "MATCH (T1:`music_1.artist`)-[]-(T2:`music_1.song`)\nRETURN T1.gender,T1.artist_name\nORDER BY T2.resolution\nLIMIT 1",
        "db_id": "music_1",
        "answers": [
            [
                "Female",
                "Farida"
            ]
        ]
    },
    {
        "question": "What is the gender and name of the artist who sang the song with the smallest resolution?",
        "query": "MATCH (T1:`music_1.artist`)-[]-(T2:`music_1.song`)\nRETURN T1.gender,T1.artist_name\nORDER BY T2.resolution\nLIMIT 1",
        "db_id": "music_1",
        "answers": [
            [
                "Female",
                "Farida"
            ]
        ]
    },
    {
        "question": "For each file format, return the number of artists who released songs in that format.",
        "query": "MATCH (files:`music_1.files`)\nWITH count(files.formats) AS count, files.formats AS formats\nRETURN count,formats",
        "db_id": "music_1",
        "answers": [
            [
                4,
                "mp4"
            ],
            [
                2,
                "mp3"
            ]
        ]
    },
    {
        "question": "How many songs were released for each format?",
        "query": "MATCH (files:`music_1.files`)\nWITH count(files.formats) AS count, files.formats AS formats\nRETURN count,formats",
        "db_id": "music_1",
        "answers": [
            [
                4,
                "mp4"
            ],
            [
                2,
                "mp3"
            ]
        ]
    },
    {
        "question": "List the names of all genres in alphabetical oder, together with its ratings.",
        "query": "MATCH (genre:`music_1.genre`)\nRETURN genre.g_name,genre.rating\nORDER BY genre.g_name",
        "db_id": "music_1",
        "answers": [
            [
                "blues",
                "7"
            ],
            [
                "folk",
                "9"
            ],
            [
                "modern",
                "8"
            ],
            [
                "nazrul",
                "7"
            ],
            [
                "pop",
                "9"
            ],
            [
                "tagore",
                "8"
            ]
        ]
    },
    {
        "question": "What are the names of all genres in alphabetical order, combined with its ratings?",
        "query": "MATCH (genre:`music_1.genre`)\nRETURN genre.g_name,genre.rating\nORDER BY genre.g_name",
        "db_id": "music_1",
        "answers": [
            [
                "blues",
                "7"
            ],
            [
                "folk",
                "9"
            ],
            [
                "modern",
                "8"
            ],
            [
                "nazrul",
                "7"
            ],
            [
                "pop",
                "9"
            ],
            [
                "tagore",
                "8"
            ]
        ]
    },
    {
        "question": "Give me a list of the names of all songs ordered by their resolution.",
        "query": "MATCH (song:`music_1.song`)\nRETURN song.song_name\nORDER BY song.resolution",
        "db_id": "music_1",
        "answers": [
            [
                "Ami opar hoye"
            ],
            [
                "Aj ei akash"
            ],
            [
                "Shukno patar nupur pae"
            ],
            [
                "Just beat it"
            ],
            [
                "Tumi robe nirobe"
            ],
            [
                "My love"
            ]
        ]
    },
    {
        "question": "What are the names of all songs that are ordered by their resolution numbers?",
        "query": "MATCH (song:`music_1.song`)\nRETURN song.song_name\nORDER BY song.resolution",
        "db_id": "music_1",
        "answers": [
            [
                "Ami opar hoye"
            ],
            [
                "Aj ei akash"
            ],
            [
                "Shukno patar nupur pae"
            ],
            [
                "Just beat it"
            ],
            [
                "Tumi robe nirobe"
            ],
            [
                "My love"
            ]
        ]
    },
    {
        "question": "What is the language used most often in the songs?",
        "query": "MATCH (song:`music_1.song`)\nWITH song.languages AS languages, count(song.languages) AS count\nRETURN languages\nORDER BY count DESC\nLIMIT 1",
        "db_id": "music_1",
        "answers": [
            [
                "bangla"
            ]
        ]
    },
    {
        "question": "What are the languages that are used most often in songs?",
        "query": "MATCH (song:`music_1.song`)\nWITH song.languages AS languages, count(song.languages) AS count\nRETURN languages\nORDER BY count DESC\nLIMIT 1",
        "db_id": "music_1",
        "answers": [
            [
                "bangla"
            ]
        ]
    },
    {
        "question": "What are the names of artists who are Male and are from UK?",
        "query": "MATCH (artist:`music_1.artist`)\nWHERE artist.country = 'UK' AND artist.gender = 'Male'\nRETURN artist.artist_name",
        "db_id": "music_1",
        "answers": [
            [
                "Michel"
            ]
        ]
    },
    {
        "question": "What are the names of all male British artists?",
        "query": "MATCH (artist:`music_1.artist`)\nWHERE artist.country = 'UK' AND artist.gender = 'Male'\nRETURN artist.artist_name",
        "db_id": "music_1",
        "answers": [
            [
                "Michel"
            ]
        ]
    },
    {
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "MATCH (song:`music_1.song`)\nWHERE song.genre_is = 'modern' OR song.languages = 'english'\nRETURN song.song_name",
        "db_id": "music_1",
        "answers": [
            [
                "My love"
            ],
            [
                "Just beat it"
            ],
            [
                "Aj ei akash"
            ]
        ]
    },
    {
        "question": "What are the names of the songs that are modern or sung in English?",
        "query": "MATCH (song:`music_1.song`)\nWHERE song.genre_is = 'modern' OR song.languages = 'english'\nRETURN song.song_name",
        "db_id": "music_1",
        "answers": [
            [
                "My love"
            ],
            [
                "Just beat it"
            ],
            [
                "Aj ei akash"
            ]
        ]
    },
    {
        "question": "What are the average rating and resolution of songs that are in Bangla?",
        "query": "MATCH (song:`music_1.song`)\nWHERE song.languages = 'bangla'\nRETURN avg(song.rating),avg(song.resolution)",
        "db_id": "music_1",
        "answers": [
            [
                7.5,
                558.0
            ]
        ]
    },
    {
        "question": "What is the average rating and resolution of all bangla songs?",
        "query": "MATCH (song:`music_1.song`)\nWHERE song.languages = 'bangla'\nRETURN avg(song.rating),avg(song.resolution)",
        "db_id": "music_1",
        "answers": [
            [
                7.5,
                558.0
            ]
        ]
    },
    {
        "question": "Find the names and number of works of all artists who have at least one English songs.",
        "query": "MATCH (T1:`music_1.artist`)-[]-(T2:`music_1.song`)\nWHERE T2.languages = 'english'\nWITH count(*) AS count, T1.artist_name AS artist_name\nWHERE count  >= 1\nRETURN artist_name,count",
        "db_id": "music_1",
        "answers": [
            [
                "Enrique",
                1
            ],
            [
                "Michel",
                1
            ]
        ]
    },
    {
        "question": "What are the names and number of works for all artists who have sung at least one song in English?",
        "query": "MATCH (T1:`music_1.artist`)-[]-(T2:`music_1.song`)\nWHERE T2.languages = 'english'\nWITH count(*) AS count, T1.artist_name AS artist_name\nWHERE count  >= 1\nRETURN artist_name,count",
        "db_id": "music_1",
        "answers": [
            [
                "Enrique",
                1
            ],
            [
                "Michel",
                1
            ]
        ]
    },
    {
        "question": "Find the name and country of origin for all artists who have release at least one song of resolution above 900.",
        "query": "MATCH (T1:`music_1.artist`)-[]-(T2:`music_1.song`)\nWHERE T2.resolution > 900\nWITH count(*) AS count, T1.artist_name AS artist_name, T1.country AS country\nWHERE count  >= 1\nRETURN artist_name,country",
        "db_id": "music_1",
        "answers": [
            [
                "Shrikanta",
                "India"
            ],
            [
                "Enrique",
                "USA"
            ]
        ]
    },
    {
        "question": "What is the name and country of origin for each artist who has released a song with a resolution higher than 900?",
        "query": "MATCH (T1:`music_1.artist`)-[]-(T2:`music_1.song`)\nWHERE T2.resolution > 900\nWITH count(*) AS count, T1.artist_name AS artist_name, T1.country AS country\nWHERE count  >= 1\nRETURN artist_name,country",
        "db_id": "music_1",
        "answers": [
            [
                "Shrikanta",
                "India"
            ],
            [
                "Enrique",
                "USA"
            ]
        ]
    },
    {
        "question": "Find the country of origin for the artist who made the least number of songs?",
        "query": "MATCH (T1:`music_1.artist`)-[]-(T2:`music_1.song`)\nWITH count(T2.artist_name) AS count, T1.country AS country\nRETURN country\nORDER BY count\nLIMIT 1",
        "db_id": "music_1",
        "answers": [
            [
                "USA"
            ]
        ]
    },
    {
        "question": "What country is the artist who made the fewest songs from?",
        "query": "MATCH (T1:`music_1.artist`)-[]-(T2:`music_1.song`)\nWITH count(T2.artist_name) AS count, T1.country AS country\nRETURN country\nORDER BY count\nLIMIT 1",
        "db_id": "music_1",
        "answers": [
            [
                "USA"
            ]
        ]
    },
    {
        "question": "List the id, genre and artist name of English songs ordered by rating.",
        "query": "MATCH (song:`music_1.song`)\nWHERE song.languages = 'english'\nRETURN song.f_id,song.genre_is,song.artist_name\nORDER BY song.rating",
        "db_id": "music_1",
        "answers": [
            [
                4,
                "blues",
                "Enrique"
            ],
            [
                5,
                "pop",
                "Michel"
            ]
        ]
    },
    {
        "question": "What is the id, genre, and name of the artist for every English song ordered by ascending rating?",
        "query": "MATCH (song:`music_1.song`)\nWHERE song.languages = 'english'\nRETURN song.f_id,song.genre_is,song.artist_name\nORDER BY song.rating",
        "db_id": "music_1",
        "answers": [
            [
                4,
                "blues",
                "Enrique"
            ],
            [
                5,
                "pop",
                "Michel"
            ]
        ]
    },
    {
        "question": "List the duration, file size and format of songs whose genre is pop, ordered by title?",
        "query": "MATCH (T1:`music_1.files`)-[]-(T2:`music_1.song`)\nWHERE T2.genre_is = 'pop'\nRETURN T1.duration,T1.file_size,T1.formats\nORDER BY T2.song_name",
        "db_id": "music_1",
        "answers": [
            [
                "4:34",
                "5.10 MB",
                "mp3"
            ]
        ]
    },
    {
        "question": "What is the duration, file size, and song format for every pop song, ordered by title alphabetically?",
        "query": "MATCH (T1:`music_1.files`)-[]-(T2:`music_1.song`)\nWHERE T2.genre_is = 'pop'\nRETURN T1.duration,T1.file_size,T1.formats\nORDER BY T2.song_name",
        "db_id": "music_1",
        "answers": [
            [
                "4:34",
                "5.10 MB",
                "mp3"
            ]
        ]
    },
    {
        "question": "How many camera lenses have a focal length longer than 15 mm?",
        "query": "MATCH (camera_lens:`mountain_photos.camera_lens`)\nWHERE camera_lens.focal_length_mm > 15\nRETURN count(*)",
        "db_id": "mountain_photos",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "Find the brand and name for each camera lens, and sort in descending order of maximum aperture.",
        "query": "MATCH (camera_lens:`mountain_photos.camera_lens`)\nRETURN camera_lens.brand,camera_lens.name\nORDER BY camera_lens.max_aperture DESC",
        "db_id": "mountain_photos",
        "answers": [
            [
                "Olympus",
                "Olympus 15mm f/8.0 Body Cap"
            ],
            [
                "Panasonic",
                "Panasonic Lumix G 150mm f /2.8"
            ],
            [
                "Sigma",
                "Sigma 19mm f2.8 DN"
            ],
            [
                "Sigma",
                "Sigma 19mm f2.8 EX DN"
            ],
            [
                "Sigma",
                "Sigma 30mm f2.8 DN"
            ],
            [
                "Schneider Kreuznach",
                "Schneider Kreuznach Super Angulon 14mm f /2.0"
            ],
            [
                "Olympus",
                "Olympus M.Zuiko Digital ED 45mm f/1.8"
            ],
            [
                "Olympus",
                "Olympus M.Zuiko Digital ED 75mm f/1.8"
            ],
            [
                "Panasonic",
                "Panasonic Leica DG Summilux 25mm f /1.4 Asph."
            ],
            [
                "Schneider Kreuznach",
                "Schneider Kreuznach Xenon 30mm f /1.4"
            ],
            [
                "Panasonic",
                "Panasonic Leica DG Nocticron 42.5mm f /1.2"
            ]
        ]
    },
    {
        "question": "List the id, color scheme, and name for all the photos.",
        "query": "MATCH (photos:`mountain_photos.photos`)\nRETURN photos.id,photos.color,photos.name",
        "db_id": "mountain_photos",
        "answers": [
            [
                1,
                "RBG",
                "monkey"
            ],
            [
                2,
                "RBG",
                "rabbits"
            ],
            [
                3,
                "Black/White",
                "deers"
            ],
            [
                4,
                "RBG",
                "grass"
            ],
            [
                5,
                "RBG",
                "cloud"
            ],
            [
                6,
                "RBG",
                "sunset"
            ],
            [
                7,
                "RBG",
                "river"
            ],
            [
                8,
                "Black/White",
                "wolfs"
            ],
            [
                9,
                "RBG",
                "the mountain"
            ],
            [
                10,
                "RBG",
                "life"
            ]
        ]
    },
    {
        "question": "What are the average prominence of the mountains in country 'Morocco'?",
        "query": "MATCH (mountain:`mountain_photos.mountain`)\nWHERE mountain.Country = 'Morocco'\nRETURN avg(mountain.Prominence)",
        "db_id": "mountain_photos",
        "answers": [
            [
                1316.5
            ]
        ]
    },
    {
        "question": "What are the name, height and prominence of mountains which do not belong to the range 'Aberdare Range'?",
        "query": "MATCH (mountain:`mountain_photos.mountain`)\nWHERE mountain.Range <> 'Aberdare Range'\nRETURN mountain.name,mountain.Height,mountain.Prominence",
        "db_id": "mountain_photos",
        "answers": [
            [
                "Abune Yosef / Guliba Amba",
                4260.0,
                1909.0
            ],
            [
                "Ioll / Yoll",
                4220.0,
                350.0
            ],
            [
                "Bada",
                4195.0,
                1605.0
            ],
            [
                "Kaka / Kecha / Chiqe",
                4193.0,
                1215.0
            ],
            [
                "Jbel Toubkal",
                4167.0,
                3755.0
            ],
            [
                "Muhavura",
                4127.0,
                1530.0
            ],
            [
                "Hey / Hay",
                4125.0,
                660.0
            ],
            [
                "Guna",
                4120.0,
                1510.0
            ],
            [
                "Choqa / Choke / Birhan",
                4100.0,
                2225.0
            ],
            [
                "Ouanoukrim",
                4088.0,
                420.0
            ],
            [
                "Chilalo",
                4071.0,
                610.0
            ],
            [
                "Mount Cameroon",
                4070.0,
                3931.0
            ],
            [
                "Inatye",
                4070.0,
                500.0
            ],
            [
                "Ighil Mgoun",
                4068.0,
                1904.0
            ],
            [
                "Weshema / Wasema?",
                4030.0,
                420.0
            ],
            [
                "Jebel n'Tarourt / Tifnout / Iferouane",
                3996.0,
                910.0
            ],
            [
                "Muggia",
                3950.0,
                500.0
            ],
            [
                "Dubbai",
                3941.0,
                1540.0
            ],
            [
                "Taska n\u2019Zat",
                3912.0,
                460.0
            ],
            [
                "Aksou\u00e2l",
                3903.0,
                450.0
            ],
            [
                "Cimbia",
                3900.0,
                590.0
            ]
        ]
    },
    {
        "question": "How many different kinds of lens brands are there?",
        "query": "MATCH (camera_lens:`mountain_photos.camera_lens`)\nRETURN count(DISTINCT camera_lens.brand)",
        "db_id": "mountain_photos",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "Find the names of channels that are not owned by CCTV.",
        "query": "MATCH (channel:`program_share.channel`)\nWHERE channel.Owner <> 'CCTV'\nRETURN channel.Name",
        "db_id": "program_share",
        "answers": [
            [
                "Hunan Satellite TV"
            ],
            [
                "Anhui Satellite TV"
            ],
            [
                "Shandong Satellite TV"
            ]
        ]
    },
    {
        "question": "Which channels are not owned by CCTV? Give me the channel names.",
        "query": "MATCH (channel:`program_share.channel`)\nWHERE channel.Owner <> 'CCTV'\nRETURN channel.Name",
        "db_id": "program_share",
        "answers": [
            [
                "Hunan Satellite TV"
            ],
            [
                "Anhui Satellite TV"
            ],
            [
                "Shandong Satellite TV"
            ]
        ]
    },
    {
        "question": "List all channel names ordered by their rating in percent from big to small.",
        "query": "MATCH (channel:`program_share.channel`)\nRETURN channel.Name\nORDER BY channel.Rating_in_percent DESC",
        "db_id": "program_share",
        "answers": [
            [
                "CCTV-1"
            ],
            [
                "Hunan Satellite TV"
            ],
            [
                "CCTV-8"
            ],
            [
                "CCTV-13"
            ],
            [
                "CCTV-3"
            ],
            [
                "CCTV-6"
            ],
            [
                "CCTV-14"
            ],
            [
                "CCTV-4"
            ],
            [
                "Anhui Satellite TV"
            ],
            [
                "Shandong Satellite TV"
            ]
        ]
    },
    {
        "question": "Give me a list of all the channel names sorted by the channel rating in descending order.",
        "query": "MATCH (channel:`program_share.channel`)\nRETURN channel.Name\nORDER BY channel.Rating_in_percent DESC",
        "db_id": "program_share",
        "answers": [
            [
                "CCTV-1"
            ],
            [
                "Hunan Satellite TV"
            ],
            [
                "CCTV-8"
            ],
            [
                "CCTV-13"
            ],
            [
                "CCTV-3"
            ],
            [
                "CCTV-6"
            ],
            [
                "CCTV-14"
            ],
            [
                "CCTV-4"
            ],
            [
                "Anhui Satellite TV"
            ],
            [
                "Shandong Satellite TV"
            ]
        ]
    },
    {
        "question": "What is the owner of the channel that has the highest rating ratio?",
        "query": "MATCH (channel:`program_share.channel`)\nRETURN channel.Owner\nORDER BY channel.Rating_in_percent DESC\nLIMIT 1",
        "db_id": "program_share",
        "answers": [
            [
                "CCTV"
            ]
        ]
    },
    {
        "question": "Show me the owner of the channel with the highest rating.",
        "query": "MATCH (channel:`program_share.channel`)\nRETURN channel.Owner\nORDER BY channel.Rating_in_percent DESC\nLIMIT 1",
        "db_id": "program_share",
        "answers": [
            [
                "CCTV"
            ]
        ]
    },
    {
        "question": "how many programs are there?",
        "query": "MATCH (program:`program_share.program`)\nRETURN count(*)",
        "db_id": "program_share",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Count the number of programs.",
        "query": "MATCH (program:`program_share.program`)\nRETURN count(*)",
        "db_id": "program_share",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "list all the names of programs, ordering by launch time.",
        "query": "MATCH (program:`program_share.program`)\nRETURN program.Name\nORDER BY program.Launch",
        "db_id": "program_share",
        "answers": [
            [
                "Kaku"
            ],
            [
                "Aniworld"
            ],
            [
                "Toonmax"
            ],
            [
                "Jiajia"
            ],
            [
                "Youman"
            ]
        ]
    },
    {
        "question": "What is the list of program names, sorted by the order of launch date?",
        "query": "MATCH (program:`program_share.program`)\nRETURN program.Name\nORDER BY program.Launch",
        "db_id": "program_share",
        "answers": [
            [
                "Kaku"
            ],
            [
                "Aniworld"
            ],
            [
                "Toonmax"
            ],
            [
                "Jiajia"
            ],
            [
                "Youman"
            ]
        ]
    },
    {
        "question": "List the name, origin and owner of each program.",
        "query": "MATCH (program:`program_share.program`)\nRETURN program.Name,program.Origin,program.Owner",
        "db_id": "program_share",
        "answers": [
            [
                "Aniworld",
                "Hunan",
                "Hunan Broadcasting System (HBS)"
            ],
            [
                "Kaku",
                "Beijing",
                "Beijing Television (BTV)"
            ],
            [
                "Toonmax",
                "Shanghai",
                "Shanghai Media Group (SMG)"
            ],
            [
                "Jiajia",
                "Guangdong",
                "Southern Media Corporation (SMC)"
            ],
            [
                "Youman",
                "Jiangsu",
                "Jiangsu Broadcasting Corporation (JSBC)"
            ]
        ]
    },
    {
        "question": "What are the name, origin and owner of each program?",
        "query": "MATCH (program:`program_share.program`)\nRETURN program.Name,program.Origin,program.Owner",
        "db_id": "program_share",
        "answers": [
            [
                "Aniworld",
                "Hunan",
                "Hunan Broadcasting System (HBS)"
            ],
            [
                "Kaku",
                "Beijing",
                "Beijing Television (BTV)"
            ],
            [
                "Toonmax",
                "Shanghai",
                "Shanghai Media Group (SMG)"
            ],
            [
                "Jiajia",
                "Guangdong",
                "Southern Media Corporation (SMC)"
            ],
            [
                "Youman",
                "Jiangsu",
                "Jiangsu Broadcasting Corporation (JSBC)"
            ]
        ]
    },
    {
        "question": "find the name of the program that was launched most recently.",
        "query": "MATCH (program:`program_share.program`)\nRETURN program.Name\nORDER BY program.Launch DESC\nLIMIT 1",
        "db_id": "program_share",
        "answers": [
            [
                "Youman"
            ]
        ]
    },
    {
        "question": "Which program was launched most recently? Return the program name.",
        "query": "MATCH (program:`program_share.program`)\nRETURN program.Name\nORDER BY program.Launch DESC\nLIMIT 1",
        "db_id": "program_share",
        "answers": [
            [
                "Youman"
            ]
        ]
    },
    {
        "question": "List all program origins in the alphabetical order.",
        "query": "MATCH (program:`program_share.program`)\nRETURN program.Origin\nORDER BY program.Origin",
        "db_id": "program_share",
        "answers": [
            [
                "Beijing"
            ],
            [
                "Guangdong"
            ],
            [
                "Hunan"
            ],
            [
                "Jiangsu"
            ],
            [
                "Shanghai"
            ]
        ]
    },
    {
        "question": "What is the list of program origins ordered alphabetically?",
        "query": "MATCH (program:`program_share.program`)\nRETURN program.Origin\nORDER BY program.Origin",
        "db_id": "program_share",
        "answers": [
            [
                "Beijing"
            ],
            [
                "Guangdong"
            ],
            [
                "Hunan"
            ],
            [
                "Jiangsu"
            ],
            [
                "Shanghai"
            ]
        ]
    },
    {
        "question": "what is the number of different channel owners?",
        "query": "MATCH (channel:`program_share.channel`)\nRETURN count(DISTINCT channel.Owner)",
        "db_id": "program_share",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "Count the number of distinct channel owners.",
        "query": "MATCH (channel:`program_share.channel`)\nRETURN count(DISTINCT channel.Owner)",
        "db_id": "program_share",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "find the names of programs whose origin is not in Beijing.",
        "query": "MATCH (program:`program_share.program`)\nWHERE program.Origin <> 'Beijing'\nRETURN program.Name",
        "db_id": "program_share",
        "answers": [
            [
                "Aniworld"
            ],
            [
                "Toonmax"
            ],
            [
                "Jiajia"
            ],
            [
                "Youman"
            ]
        ]
    },
    {
        "question": "Which programs' origins are not \"Beijing\"? Give me the program names.",
        "query": "MATCH (program:`program_share.program`)\nWHERE program.Origin <> 'Beijing'\nRETURN program.Name",
        "db_id": "program_share",
        "answers": [
            [
                "Aniworld"
            ],
            [
                "Toonmax"
            ],
            [
                "Jiajia"
            ],
            [
                "Youman"
            ]
        ]
    },
    {
        "question": "What are the names of the channels owned by CCTV or HBS?",
        "query": "MATCH (channel:`program_share.channel`)\nWHERE channel.Owner = 'CCTV' OR channel.Owner = 'HBS'\nRETURN channel.Name",
        "db_id": "program_share",
        "answers": [
            [
                "CCTV-1"
            ],
            [
                "Hunan Satellite TV"
            ],
            [
                "CCTV-8"
            ],
            [
                "CCTV-13"
            ],
            [
                "CCTV-3"
            ],
            [
                "CCTV-6"
            ],
            [
                "CCTV-14"
            ],
            [
                "CCTV-4"
            ]
        ]
    },
    {
        "question": "List the names of all the channels owned by either CCTV or HBS",
        "query": "MATCH (channel:`program_share.channel`)\nWHERE channel.Owner = 'CCTV' OR channel.Owner = 'HBS'\nRETURN channel.Name",
        "db_id": "program_share",
        "answers": [
            [
                "CCTV-1"
            ],
            [
                "Hunan Satellite TV"
            ],
            [
                "CCTV-8"
            ],
            [
                "CCTV-13"
            ],
            [
                "CCTV-3"
            ],
            [
                "CCTV-6"
            ],
            [
                "CCTV-14"
            ],
            [
                "CCTV-4"
            ]
        ]
    },
    {
        "question": "How many courses are there in total?",
        "query": "MATCH (courses:`e_learning.Courses`)\nRETURN count(*)",
        "db_id": "e_learning",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Find the total number of courses offered.",
        "query": "MATCH (courses:`e_learning.Courses`)\nRETURN count(*)",
        "db_id": "e_learning",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "What are the descriptions of the courses with name \"database\"?",
        "query": "MATCH (courses:`e_learning.Courses`)\nWHERE courses.course_name = 'database'\nRETURN courses.course_description",
        "db_id": "e_learning",
        "answers": [
            [
                "database"
            ]
        ]
    },
    {
        "question": "Return the description for the courses named \"database\".",
        "query": "MATCH (courses:`e_learning.Courses`)\nWHERE courses.course_name = 'database'\nRETURN courses.course_description",
        "db_id": "e_learning",
        "answers": [
            [
                "database"
            ]
        ]
    },
    {
        "question": "What are the addresses of the course authors or tutors with personal name \"Cathrine\"",
        "query": "MATCH (course_authors_and_tutors:`e_learning.Course_Authors_and_Tutors`)\nWHERE course_authors_and_tutors.personal_name = 'Cathrine'\nRETURN course_authors_and_tutors.address_line_1",
        "db_id": "e_learning",
        "answers": [
            [
                "756 Monahan Mews\nSpinkashire, NJ 64230-5098"
            ]
        ]
    },
    {
        "question": "Return the addresses of the course authors or tutors whose personal name is \"Cathrine\".",
        "query": "MATCH (course_authors_and_tutors:`e_learning.Course_Authors_and_Tutors`)\nWHERE course_authors_and_tutors.personal_name = 'Cathrine'\nRETURN course_authors_and_tutors.address_line_1",
        "db_id": "e_learning",
        "answers": [
            [
                "756 Monahan Mews\nSpinkashire, NJ 64230-5098"
            ]
        ]
    },
    {
        "question": "List the addresses of all the course authors or tutors.",
        "query": "MATCH (course_authors_and_tutors:`e_learning.Course_Authors_and_Tutors`)\nRETURN course_authors_and_tutors.address_line_1",
        "db_id": "e_learning",
        "answers": [
            [
                "756 Monahan Mews\nSpinkashire, NJ 64230-5098"
            ],
            [
                "98623 Huels Manor\nJasttown, DE 31611"
            ],
            [
                "99296 Keeling Courts\nNorth Audreanne, IL 28272"
            ],
            [
                "644 Montana Hill Suite 489\nDaijamouth, CA 19587-4254"
            ],
            [
                "5284 Champlin Roads\nCassinport, WY 54636"
            ],
            [
                "92220 Hellen Skyway Apt. 635\nRennerview, MS 81036"
            ],
            [
                "67541 Osborne Creek Suite 532\nBernhardview, WV 30288-1050"
            ],
            [
                "0256 Walter Meadows Suite 523\nNorbertoborough, AZ 49193"
            ],
            [
                "445 Quigley Fall\nPort Antonette, IN 81992-1255"
            ],
            [
                "22575 Effertz Neck Apt. 046\nPort Scotty, NY 67108-9197"
            ],
            [
                "425 White Brooks\nEmmaleefort, IN 97850-2510"
            ],
            [
                "513 Collins Plain Apt. 829\nClementinaville, VT 59908-2793"
            ],
            [
                "139 O'Conner Circles\nVirginieland, KS 23365"
            ],
            [
                "3602 Boehm Forest\nZulaufton, DC 35229-0366"
            ],
            [
                "8928 Kunze Valley Apt. 747\nSouth Jedidiahmouth, DE 28167"
            ]
        ]
    },
    {
        "question": "What is the address of each course author or tutor?",
        "query": "MATCH (course_authors_and_tutors:`e_learning.Course_Authors_and_Tutors`)\nRETURN course_authors_and_tutors.address_line_1",
        "db_id": "e_learning",
        "answers": [
            [
                "756 Monahan Mews\nSpinkashire, NJ 64230-5098"
            ],
            [
                "98623 Huels Manor\nJasttown, DE 31611"
            ],
            [
                "99296 Keeling Courts\nNorth Audreanne, IL 28272"
            ],
            [
                "644 Montana Hill Suite 489\nDaijamouth, CA 19587-4254"
            ],
            [
                "5284 Champlin Roads\nCassinport, WY 54636"
            ],
            [
                "92220 Hellen Skyway Apt. 635\nRennerview, MS 81036"
            ],
            [
                "67541 Osborne Creek Suite 532\nBernhardview, WV 30288-1050"
            ],
            [
                "0256 Walter Meadows Suite 523\nNorbertoborough, AZ 49193"
            ],
            [
                "445 Quigley Fall\nPort Antonette, IN 81992-1255"
            ],
            [
                "22575 Effertz Neck Apt. 046\nPort Scotty, NY 67108-9197"
            ],
            [
                "425 White Brooks\nEmmaleefort, IN 97850-2510"
            ],
            [
                "513 Collins Plain Apt. 829\nClementinaville, VT 59908-2793"
            ],
            [
                "139 O'Conner Circles\nVirginieland, KS 23365"
            ],
            [
                "3602 Boehm Forest\nZulaufton, DC 35229-0366"
            ],
            [
                "8928 Kunze Valley Apt. 747\nSouth Jedidiahmouth, DE 28167"
            ]
        ]
    },
    {
        "question": "List all the login names and family names of course author and tutors.",
        "query": "MATCH (course_authors_and_tutors:`e_learning.Course_Authors_and_Tutors`)\nRETURN course_authors_and_tutors.login_name,course_authors_and_tutors.family_name",
        "db_id": "e_learning",
        "answers": [
            [
                "jmckenzie",
                "Grant"
            ],
            [
                "heidenreich.ara",
                "Armstrong"
            ],
            [
                "clementina29",
                "Reichel"
            ],
            [
                "wlehner",
                "Nader"
            ],
            [
                "nyundt",
                "Barrows"
            ],
            [
                "al75",
                "Rohan"
            ],
            [
                "marty.bergnaum",
                "Treutel"
            ],
            [
                "medhurst.alvah",
                "Rowe"
            ],
            [
                "antonetta19",
                "Zboncak"
            ],
            [
                "adam.rippin",
                "Champlin"
            ],
            [
                "dschaefer",
                "Greenholt"
            ],
            [
                "nellie.mosciski",
                "Kreiger"
            ],
            [
                "qking",
                "Effertz"
            ],
            [
                "fiona77",
                "Crist"
            ],
            [
                "ekshlerin",
                "Haley"
            ]
        ]
    },
    {
        "question": "What are the login names and family names of course author and tutors?",
        "query": "MATCH (course_authors_and_tutors:`e_learning.Course_Authors_and_Tutors`)\nRETURN course_authors_and_tutors.login_name,course_authors_and_tutors.family_name",
        "db_id": "e_learning",
        "answers": [
            [
                "jmckenzie",
                "Grant"
            ],
            [
                "heidenreich.ara",
                "Armstrong"
            ],
            [
                "clementina29",
                "Reichel"
            ],
            [
                "wlehner",
                "Nader"
            ],
            [
                "nyundt",
                "Barrows"
            ],
            [
                "al75",
                "Rohan"
            ],
            [
                "marty.bergnaum",
                "Treutel"
            ],
            [
                "medhurst.alvah",
                "Rowe"
            ],
            [
                "antonetta19",
                "Zboncak"
            ],
            [
                "adam.rippin",
                "Champlin"
            ],
            [
                "dschaefer",
                "Greenholt"
            ],
            [
                "nellie.mosciski",
                "Kreiger"
            ],
            [
                "qking",
                "Effertz"
            ],
            [
                "fiona77",
                "Crist"
            ],
            [
                "ekshlerin",
                "Haley"
            ]
        ]
    },
    {
        "question": "List all the dates of enrollment and completion of students.",
        "query": "MATCH (student_course_enrolment:`e_learning.Student_Course_Enrolment`)\nRETURN student_course_enrolment.date_of_enrolment,student_course_enrolment.date_of_completion",
        "db_id": "e_learning",
        "answers": [
            [
                "2017-10-09 07:09:02",
                "2018-02-26 07:48:52"
            ],
            [
                "2017-11-13 12:49:33",
                "2018-03-04 01:24:56"
            ],
            [
                "2017-10-17 13:50:40",
                "2018-03-22 02:53:01"
            ],
            [
                "2017-09-06 06:27:15",
                "2018-03-07 09:45:48"
            ],
            [
                "2017-08-20 01:07:18",
                "2018-03-06 00:27:09"
            ],
            [
                "2017-09-24 15:17:26",
                "2018-03-01 00:08:30"
            ],
            [
                "2017-09-21 07:05:01",
                "2018-03-04 22:34:37"
            ],
            [
                "2017-12-07 02:21:13",
                "2018-02-27 20:06:06"
            ],
            [
                "2017-08-02 17:21:44",
                "2018-03-07 00:39:37"
            ],
            [
                "2017-10-10 10:05:03",
                "2018-03-19 07:34:05"
            ],
            [
                "2017-08-17 00:16:46",
                "2018-03-16 09:00:44"
            ],
            [
                "2017-11-30 11:40:56",
                "2018-03-02 14:38:49"
            ],
            [
                "2017-10-26 20:42:34",
                "2018-03-10 16:38:28"
            ],
            [
                "2017-07-15 12:48:43",
                "2018-03-18 03:23:54"
            ],
            [
                "2017-12-09 20:49:23",
                "2018-02-28 09:34:51"
            ],
            [
                "2017-12-16 15:53:06",
                "2018-03-22 18:04:54"
            ],
            [
                "2017-10-29 15:39:31",
                "2018-03-01 07:12:39"
            ],
            [
                "2017-11-22 18:29:18",
                "2018-03-09 17:56:18"
            ],
            [
                "2017-10-23 08:23:22",
                "2018-02-26 23:46:25"
            ],
            [
                "2017-12-04 12:16:10",
                "2018-03-14 23:33:47"
            ]
        ]
    },
    {
        "question": "What are all the dates of enrollment and completion in record?",
        "query": "MATCH (student_course_enrolment:`e_learning.Student_Course_Enrolment`)\nRETURN student_course_enrolment.date_of_enrolment,student_course_enrolment.date_of_completion",
        "db_id": "e_learning",
        "answers": [
            [
                "2017-10-09 07:09:02",
                "2018-02-26 07:48:52"
            ],
            [
                "2017-11-13 12:49:33",
                "2018-03-04 01:24:56"
            ],
            [
                "2017-10-17 13:50:40",
                "2018-03-22 02:53:01"
            ],
            [
                "2017-09-06 06:27:15",
                "2018-03-07 09:45:48"
            ],
            [
                "2017-08-20 01:07:18",
                "2018-03-06 00:27:09"
            ],
            [
                "2017-09-24 15:17:26",
                "2018-03-01 00:08:30"
            ],
            [
                "2017-09-21 07:05:01",
                "2018-03-04 22:34:37"
            ],
            [
                "2017-12-07 02:21:13",
                "2018-02-27 20:06:06"
            ],
            [
                "2017-08-02 17:21:44",
                "2018-03-07 00:39:37"
            ],
            [
                "2017-10-10 10:05:03",
                "2018-03-19 07:34:05"
            ],
            [
                "2017-08-17 00:16:46",
                "2018-03-16 09:00:44"
            ],
            [
                "2017-11-30 11:40:56",
                "2018-03-02 14:38:49"
            ],
            [
                "2017-10-26 20:42:34",
                "2018-03-10 16:38:28"
            ],
            [
                "2017-07-15 12:48:43",
                "2018-03-18 03:23:54"
            ],
            [
                "2017-12-09 20:49:23",
                "2018-02-28 09:34:51"
            ],
            [
                "2017-12-16 15:53:06",
                "2018-03-22 18:04:54"
            ],
            [
                "2017-10-29 15:39:31",
                "2018-03-01 07:12:39"
            ],
            [
                "2017-11-22 18:29:18",
                "2018-03-09 17:56:18"
            ],
            [
                "2017-10-23 08:23:22",
                "2018-02-26 23:46:25"
            ],
            [
                "2017-12-04 12:16:10",
                "2018-03-14 23:33:47"
            ]
        ]
    },
    {
        "question": "How many distinct students are enrolled in courses?",
        "query": "MATCH (student_course_enrolment:`e_learning.Student_Course_Enrolment`)\nRETURN count(DISTINCT student_course_enrolment.student_id)",
        "db_id": "e_learning",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "question": "Find the number of distinct students enrolled in courses.",
        "query": "MATCH (student_course_enrolment:`e_learning.Student_Course_Enrolment`)\nRETURN count(DISTINCT student_course_enrolment.student_id)",
        "db_id": "e_learning",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "question": "How many distinct courses are enrolled in by students?",
        "query": "MATCH (student_course_enrolment:`e_learning.Student_Course_Enrolment`)\nRETURN count(student_course_enrolment.course_id)",
        "db_id": "e_learning",
        "answers": [
            [
                20
            ]
        ]
    },
    {
        "question": "Find the number of distinct courses that have enrolled students.",
        "query": "MATCH (student_course_enrolment:`e_learning.Student_Course_Enrolment`)\nRETURN count(student_course_enrolment.course_id)",
        "db_id": "e_learning",
        "answers": [
            [
                20
            ]
        ]
    },
    {
        "question": "Find the dates of the tests taken with result \"Pass\".",
        "query": "MATCH (student_tests_taken:`e_learning.Student_Tests_Taken`)\nWHERE student_tests_taken.test_result = 'Pass'\nRETURN student_tests_taken.date_test_taken",
        "db_id": "e_learning",
        "answers": [
            [
                "2018-03-25 21:50:22"
            ],
            [
                "2018-03-21 00:32:25"
            ],
            [
                "2018-03-25 00:44:50"
            ],
            [
                "2018-03-25 15:06:12"
            ],
            [
                "2018-03-24 13:22:17"
            ],
            [
                "2018-03-19 02:04:26"
            ],
            [
                "2018-03-23 23:47:42"
            ],
            [
                "2018-03-19 14:48:12"
            ]
        ]
    },
    {
        "question": "Which tests have \"Pass\" results? Return the dates when the tests were taken.",
        "query": "MATCH (student_tests_taken:`e_learning.Student_Tests_Taken`)\nWHERE student_tests_taken.test_result = 'Pass'\nRETURN student_tests_taken.date_test_taken",
        "db_id": "e_learning",
        "answers": [
            [
                "2018-03-25 21:50:22"
            ],
            [
                "2018-03-21 00:32:25"
            ],
            [
                "2018-03-25 00:44:50"
            ],
            [
                "2018-03-25 15:06:12"
            ],
            [
                "2018-03-24 13:22:17"
            ],
            [
                "2018-03-19 02:04:26"
            ],
            [
                "2018-03-23 23:47:42"
            ],
            [
                "2018-03-19 14:48:12"
            ]
        ]
    },
    {
        "question": "How many tests have result \"Fail\"?",
        "query": "MATCH (student_tests_taken:`e_learning.Student_Tests_Taken`)\nWHERE student_tests_taken.test_result = 'Fail'\nRETURN count(*)",
        "db_id": "e_learning",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "Count the number of tests with \"Fail\" result.",
        "query": "MATCH (student_tests_taken:`e_learning.Student_Tests_Taken`)\nWHERE student_tests_taken.test_result = 'Fail'\nRETURN count(*)",
        "db_id": "e_learning",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "What are the login names of the students with family name \"Ward\"?",
        "query": "MATCH (students:`e_learning.Students`)\nWHERE students.family_name = 'Ward'\nRETURN students.login_name",
        "db_id": "e_learning",
        "answers": [
            [
                "annamae.hoppe"
            ]
        ]
    },
    {
        "question": "Return the login names of the students whose family name is \"Ward\".",
        "query": "MATCH (students:`e_learning.Students`)\nWHERE students.family_name = 'Ward'\nRETURN students.login_name",
        "db_id": "e_learning",
        "answers": [
            [
                "annamae.hoppe"
            ]
        ]
    },
    {
        "question": "What are the dates of the latest logon of the students with family name \"Jaskolski\" or \"Langosh\"?",
        "query": "MATCH (students:`e_learning.Students`)\nWHERE students.family_name = 'Jaskolski' OR students.family_name = 'Langosh'\nRETURN students.date_of_latest_logon",
        "db_id": "e_learning",
        "answers": [
            [
                "2017-06-24 22:16:27"
            ],
            [
                "2018-02-24 23:15:41"
            ]
        ]
    },
    {
        "question": "Find the latest logon date of the students whose family name is \"Jaskolski\" or \"Langosh\".",
        "query": "MATCH (students:`e_learning.Students`)\nWHERE students.family_name = 'Jaskolski' OR students.family_name = 'Langosh'\nRETURN students.date_of_latest_logon",
        "db_id": "e_learning",
        "answers": [
            [
                "2017-06-24 22:16:27"
            ],
            [
                "2018-02-24 23:15:41"
            ]
        ]
    },
    {
        "question": "List all the subject names.",
        "query": "MATCH (subjects:`e_learning.Subjects`)\nRETURN subjects.subject_name",
        "db_id": "e_learning",
        "answers": [
            [
                "Computer Science"
            ],
            [
                "Arts"
            ],
            [
                "Language"
            ]
        ]
    },
    {
        "question": "What are the names of all the subjects.",
        "query": "MATCH (subjects:`e_learning.Subjects`)\nRETURN subjects.subject_name",
        "db_id": "e_learning",
        "answers": [
            [
                "Computer Science"
            ],
            [
                "Arts"
            ],
            [
                "Language"
            ]
        ]
    },
    {
        "question": "List the personal names and family names of all the students in alphabetical order of family name.",
        "query": "MATCH (students:`e_learning.Students`)\nRETURN students.personal_name,students.family_name\nORDER BY students.family_name",
        "db_id": "e_learning",
        "answers": [
            [
                "Alicia",
                "Carroll"
            ],
            [
                "Else",
                "Hartmann"
            ],
            [
                "Jewel",
                "Hodkiewicz"
            ],
            [
                "Karson",
                "Jaskolski"
            ],
            [
                "Marshall",
                "Johns"
            ],
            [
                "Krystel",
                "Langosh"
            ],
            [
                "Eliza",
                "Leannon"
            ],
            [
                "Mariela",
                "Legros"
            ],
            [
                "Claudia",
                "Mitchell"
            ],
            [
                "Cary",
                "O'Reilly"
            ],
            [
                "Autumn",
                "Schumm"
            ],
            [
                "Wilson",
                "Ward"
            ],
            [
                "Clotilde",
                "Windler"
            ],
            [
                "Prince",
                "Ziemann"
            ],
            [
                "Bernie",
                "Zieme"
            ]
        ]
    },
    {
        "question": "What are the personal names and family names of the students? Sort the result in alphabetical order of the family name.",
        "query": "MATCH (students:`e_learning.Students`)\nRETURN students.personal_name,students.family_name\nORDER BY students.family_name",
        "db_id": "e_learning",
        "answers": [
            [
                "Alicia",
                "Carroll"
            ],
            [
                "Else",
                "Hartmann"
            ],
            [
                "Jewel",
                "Hodkiewicz"
            ],
            [
                "Karson",
                "Jaskolski"
            ],
            [
                "Marshall",
                "Johns"
            ],
            [
                "Krystel",
                "Langosh"
            ],
            [
                "Eliza",
                "Leannon"
            ],
            [
                "Mariela",
                "Legros"
            ],
            [
                "Claudia",
                "Mitchell"
            ],
            [
                "Cary",
                "O'Reilly"
            ],
            [
                "Autumn",
                "Schumm"
            ],
            [
                "Wilson",
                "Ward"
            ],
            [
                "Clotilde",
                "Windler"
            ],
            [
                "Prince",
                "Ziemann"
            ],
            [
                "Bernie",
                "Zieme"
            ]
        ]
    },
    {
        "question": "List each test result and its count in descending order of count.",
        "query": "MATCH (student_tests_taken:`e_learning.Student_Tests_Taken`)\nWITH count(student_tests_taken.test_result) AS count, student_tests_taken.test_result AS test_result\nRETURN test_result,count\nORDER BY count DESC",
        "db_id": "e_learning",
        "answers": [
            [
                "Pass",
                8
            ],
            [
                "Fail",
                7
            ]
        ]
    },
    {
        "question": "For each distinct test result, find the number of students who got the result.",
        "query": "MATCH (student_tests_taken:`e_learning.Student_Tests_Taken`)\nWITH count(student_tests_taken.test_result) AS count, student_tests_taken.test_result AS test_result\nRETURN test_result,count\nORDER BY count DESC",
        "db_id": "e_learning",
        "answers": [
            [
                "Pass",
                8
            ],
            [
                "Fail",
                7
            ]
        ]
    },
    {
        "question": "What are the enrollment dates of all the tests that have result \"Pass\"?",
        "query": "MATCH (T1:`e_learning.Student_Course_Enrolment`)-[]-(T2:`e_learning.Student_Tests_Taken`)\nWHERE T2.test_result = 'Pass'\nRETURN T1.date_of_enrolment",
        "db_id": "e_learning",
        "answers": [
            [
                "2017-10-10 10:05:03"
            ],
            [
                "2017-09-21 07:05:01"
            ],
            [
                "2017-09-21 07:05:01"
            ],
            [
                "2017-09-06 06:27:15"
            ],
            [
                "2017-10-23 08:23:22"
            ],
            [
                "2017-08-02 17:21:44"
            ],
            [
                "2017-10-29 15:39:31"
            ],
            [
                "2017-11-13 12:49:33"
            ]
        ]
    },
    {
        "question": "Find the enrollment date for all the tests that have \"Pass\" result.",
        "query": "MATCH (T1:`e_learning.Student_Course_Enrolment`)-[]-(T2:`e_learning.Student_Tests_Taken`)\nWHERE T2.test_result = 'Pass'\nRETURN T1.date_of_enrolment",
        "db_id": "e_learning",
        "answers": [
            [
                "2017-10-10 10:05:03"
            ],
            [
                "2017-09-21 07:05:01"
            ],
            [
                "2017-09-21 07:05:01"
            ],
            [
                "2017-09-06 06:27:15"
            ],
            [
                "2017-10-23 08:23:22"
            ],
            [
                "2017-08-02 17:21:44"
            ],
            [
                "2017-10-29 15:39:31"
            ],
            [
                "2017-11-13 12:49:33"
            ]
        ]
    },
    {
        "question": "What are the completion dates of all the tests that have result \"Fail\"?",
        "query": "MATCH (T1:`e_learning.Student_Course_Enrolment`)-[]-(T2:`e_learning.Student_Tests_Taken`)\nWHERE T2.test_result = 'Fail'\nRETURN T1.date_of_completion",
        "db_id": "e_learning",
        "answers": [
            [
                "2018-03-02 14:38:49"
            ],
            [
                "2018-03-22 18:04:54"
            ],
            [
                "2018-03-22 18:04:54"
            ],
            [
                "2018-02-26 23:46:25"
            ],
            [
                "2018-03-07 09:45:48"
            ],
            [
                "2018-03-06 00:27:09"
            ],
            [
                "2018-03-04 01:24:56"
            ]
        ]
    },
    {
        "question": "Return the completion date for all the tests that have \"Fail\" result.",
        "query": "MATCH (T1:`e_learning.Student_Course_Enrolment`)-[]-(T2:`e_learning.Student_Tests_Taken`)\nWHERE T2.test_result = 'Fail'\nRETURN T1.date_of_completion",
        "db_id": "e_learning",
        "answers": [
            [
                "2018-03-02 14:38:49"
            ],
            [
                "2018-03-22 18:04:54"
            ],
            [
                "2018-03-22 18:04:54"
            ],
            [
                "2018-02-26 23:46:25"
            ],
            [
                "2018-03-07 09:45:48"
            ],
            [
                "2018-03-06 00:27:09"
            ],
            [
                "2018-03-04 01:24:56"
            ]
        ]
    },
    {
        "question": "List the method, date and amount of all the payments, in ascending order of date.",
        "query": "MATCH (payments:`insurance_policies.Payments`)\nRETURN payments.Payment_Method_Code,payments.Date_Payment_Made,payments.Amount_Payment\nORDER BY payments.Date_Payment_Made ASC",
        "db_id": "insurance_policies",
        "answers": [
            [
                "Visa",
                "2017-05-03",
                172309
            ],
            [
                "Discover Card",
                "2017-05-04",
                123255
            ],
            [
                "MasterCard",
                "2017-05-28",
                448613
            ],
            [
                "Visa",
                "2017-05-28",
                155654
            ],
            [
                "MasterCard",
                "2017-06-24",
                456098
            ],
            [
                "MasterCard",
                "2017-07-31",
                423154
            ],
            [
                "Discover Card",
                "2017-08-06",
                38324
            ],
            [
                "Discover Card",
                "2017-10-07",
                71246
            ],
            [
                "Visa",
                "2017-12-16",
                459407
            ],
            [
                "MasterCard",
                "2018-01-10",
                407235
            ],
            [
                "American Express",
                "2018-01-19",
                177130
            ],
            [
                "MasterCard",
                "2018-01-28",
                319142
            ],
            [
                "MasterCard",
                "2018-02-16",
                241730
            ],
            [
                "MasterCard",
                "2018-02-18",
                235893
            ],
            [
                "Visa",
                "2018-02-24",
                7343
            ]
        ]
    },
    {
        "question": "What are the method, date and amount of each payment? Sort the list in ascending order of date.",
        "query": "MATCH (payments:`insurance_policies.Payments`)\nRETURN payments.Payment_Method_Code,payments.Date_Payment_Made,payments.Amount_Payment\nORDER BY payments.Date_Payment_Made ASC",
        "db_id": "insurance_policies",
        "answers": [
            [
                "Visa",
                "2017-05-03",
                172309
            ],
            [
                "Discover Card",
                "2017-05-04",
                123255
            ],
            [
                "MasterCard",
                "2017-05-28",
                448613
            ],
            [
                "Visa",
                "2017-05-28",
                155654
            ],
            [
                "MasterCard",
                "2017-06-24",
                456098
            ],
            [
                "MasterCard",
                "2017-07-31",
                423154
            ],
            [
                "Discover Card",
                "2017-08-06",
                38324
            ],
            [
                "Discover Card",
                "2017-10-07",
                71246
            ],
            [
                "Visa",
                "2017-12-16",
                459407
            ],
            [
                "MasterCard",
                "2018-01-10",
                407235
            ],
            [
                "American Express",
                "2018-01-19",
                177130
            ],
            [
                "MasterCard",
                "2018-01-28",
                319142
            ],
            [
                "MasterCard",
                "2018-02-16",
                241730
            ],
            [
                "MasterCard",
                "2018-02-18",
                235893
            ],
            [
                "Visa",
                "2018-02-24",
                7343
            ]
        ]
    },
    {
        "question": "Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount.",
        "query": "MATCH (claims:`insurance_policies.Claims`)\nRETURN claims.Amount_Settled,claims.Amount_Claimed\nORDER BY claims.Amount_Claimed DESC\nLIMIT 1",
        "db_id": "insurance_policies",
        "answers": [
            [
                1528,
                89632
            ]
        ]
    },
    {
        "question": "Find the settlement amount of the claim with the largest claim amount. Show both the settlement amount and claim amount.",
        "query": "MATCH (claims:`insurance_policies.Claims`)\nRETURN claims.Amount_Settled,claims.Amount_Claimed\nORDER BY claims.Amount_Claimed DESC\nLIMIT 1",
        "db_id": "insurance_policies",
        "answers": [
            [
                1528,
                89632
            ]
        ]
    },
    {
        "question": "Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount.",
        "query": "MATCH (claims:`insurance_policies.Claims`)\nRETURN claims.Amount_Settled,claims.Amount_Claimed\nORDER BY claims.Amount_Settled ASC\nLIMIT 1",
        "db_id": "insurance_policies",
        "answers": [
            [
                930,
                49743
            ]
        ]
    },
    {
        "question": "Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount.",
        "query": "MATCH (claims:`insurance_policies.Claims`)\nRETURN claims.Amount_Settled,claims.Amount_Claimed\nORDER BY claims.Amount_Settled ASC\nLIMIT 1",
        "db_id": "insurance_policies",
        "answers": [
            [
                930,
                49743
            ]
        ]
    },
    {
        "question": "How many settlements does each claim correspond to? List the claim id and the number of settlements.",
        "query": "MATCH (T1:`insurance_policies.Claims`)-[]-(T2:`insurance_policies.Settlements`)\nWITH T1.Claim_ID AS Claim_ID, count(T1.Claim_ID) AS count\nRETURN Claim_ID,count",
        "db_id": "insurance_policies",
        "answers": [
            [
                486,
                2
            ],
            [
                563,
                1
            ],
            [
                569,
                1
            ],
            [
                571,
                1
            ],
            [
                621,
                2
            ],
            [
                761,
                2
            ],
            [
                801,
                4
            ],
            [
                843,
                1
            ],
            [
                957,
                1
            ]
        ]
    },
    {
        "question": "Find the number of settlements each claim corresponds to. Show the number together with the claim id.",
        "query": "MATCH (T1:`insurance_policies.Claims`)-[]-(T2:`insurance_policies.Settlements`)\nWITH T1.Claim_ID AS Claim_ID, count(T1.Claim_ID) AS count\nRETURN Claim_ID,count",
        "db_id": "insurance_policies",
        "answers": [
            [
                486,
                2
            ],
            [
                563,
                1
            ],
            [
                569,
                1
            ],
            [
                571,
                1
            ],
            [
                621,
                2
            ],
            [
                761,
                2
            ],
            [
                801,
                4
            ],
            [
                843,
                1
            ],
            [
                957,
                1
            ]
        ]
    },
    {
        "question": "Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number.",
        "query": "MATCH (T1:`insurance_policies.Claims`)-[]-(T2:`insurance_policies.Settlements`)\nWITH T1.Claim_ID AS Claim_ID, T1.Date_Claim_Made AS Date_Claim_Made, count(T1.Claim_ID) AS count\nRETURN Claim_ID,Date_Claim_Made,count\nORDER BY count DESC\nLIMIT 1",
        "db_id": "insurance_policies",
        "answers": [
            [
                801,
                "2017-10-21",
                4
            ]
        ]
    },
    {
        "question": "Find the claim id and claim date of the claim that incurred the most settlement count. Also tell me the count.",
        "query": "MATCH (T1:`insurance_policies.Claims`)-[]-(T2:`insurance_policies.Settlements`)\nWITH T1.Claim_ID AS Claim_ID, T1.Date_Claim_Made AS Date_Claim_Made, count(T1.Claim_ID) AS count\nRETURN Claim_ID,Date_Claim_Made,count\nORDER BY count DESC\nLIMIT 1",
        "db_id": "insurance_policies",
        "answers": [
            [
                801,
                "2017-10-21",
                4
            ]
        ]
    },
    {
        "question": "Of all the claims, what was the earliest date when any claim was made?",
        "query": "MATCH (claims:`insurance_policies.Claims`)\nRETURN claims.Date_Claim_Made\nORDER BY claims.Date_Claim_Made ASC\nLIMIT 1",
        "db_id": "insurance_policies",
        "answers": [
            [
                "2016-08-02"
            ]
        ]
    },
    {
        "question": "Tell me the the date when the first claim was made.",
        "query": "MATCH (claims:`insurance_policies.Claims`)\nRETURN claims.Date_Claim_Made\nORDER BY claims.Date_Claim_Made ASC\nLIMIT 1",
        "db_id": "insurance_policies",
        "answers": [
            [
                "2016-08-02"
            ]
        ]
    },
    {
        "question": "Who are the customers that had more than 1 policy? List the customer details and id.",
        "query": "MATCH (T1:`insurance_policies.Customers`)-[]-(T2:`insurance_policies.Customer_Policies`)\nWITH count(*) AS count, T1.Customer_ID AS Customer_ID, T1.Customer_Details AS Customer_Details\nWHERE count  > 1\nRETURN Customer_Details,Customer_ID",
        "db_id": "insurance_policies",
        "answers": [
            [
                "Ellsworth Paucek",
                2
            ],
            [
                "Mrs. Hanna Willms",
                3
            ],
            [
                "Dr. Diana Rath",
                4
            ],
            [
                "Lauriane Ferry PhD",
                6
            ]
        ]
    },
    {
        "question": "Find the the customer details and id for the customers who had more than one policy.",
        "query": "MATCH (T1:`insurance_policies.Customers`)-[]-(T2:`insurance_policies.Customer_Policies`)\nWITH count(*) AS count, T1.Customer_ID AS Customer_ID, T1.Customer_Details AS Customer_Details\nWHERE count  > 1\nRETURN Customer_Details,Customer_ID",
        "db_id": "insurance_policies",
        "answers": [
            [
                "Ellsworth Paucek",
                2
            ],
            [
                "Mrs. Hanna Willms",
                3
            ],
            [
                "Dr. Diana Rath",
                4
            ],
            [
                "Lauriane Ferry PhD",
                6
            ]
        ]
    },
    {
        "question": "What are the claim dates and settlement dates of all the settlements?",
        "query": "MATCH (settlements:`insurance_policies.Settlements`)\nRETURN settlements.Date_Claim_Made,settlements.Date_Claim_Settled",
        "db_id": "insurance_policies",
        "answers": [
            [
                "2018-08-07",
                "2018-01-16"
            ],
            [
                "2017-08-27",
                "2018-02-04"
            ],
            [
                "2016-09-05",
                "2018-03-02"
            ],
            [
                "2016-05-18",
                "2018-02-11"
            ],
            [
                "2017-05-19",
                "2017-10-06"
            ],
            [
                "2018-11-10",
                "2018-02-15"
            ],
            [
                "2018-05-12",
                "2017-11-30"
            ],
            [
                "2016-07-04",
                "2018-02-20"
            ],
            [
                "2017-04-18",
                "2017-12-24"
            ],
            [
                "2017-07-31",
                "2018-01-27"
            ],
            [
                "2017-09-22",
                "2018-02-14"
            ],
            [
                "2017-03-04",
                "2018-02-20"
            ],
            [
                "2017-04-14",
                "2017-11-15"
            ],
            [
                "2017-03-29",
                "2018-02-20"
            ],
            [
                "2016-07-19",
                "2017-11-04"
            ]
        ]
    },
    {
        "question": "Tell me the the claim date and settlement date for each settlement case.",
        "query": "MATCH (settlements:`insurance_policies.Settlements`)\nRETURN settlements.Date_Claim_Made,settlements.Date_Claim_Settled",
        "db_id": "insurance_policies",
        "answers": [
            [
                "2018-08-07",
                "2018-01-16"
            ],
            [
                "2017-08-27",
                "2018-02-04"
            ],
            [
                "2016-09-05",
                "2018-03-02"
            ],
            [
                "2016-05-18",
                "2018-02-11"
            ],
            [
                "2017-05-19",
                "2017-10-06"
            ],
            [
                "2018-11-10",
                "2018-02-15"
            ],
            [
                "2018-05-12",
                "2017-11-30"
            ],
            [
                "2016-07-04",
                "2018-02-20"
            ],
            [
                "2017-04-18",
                "2017-12-24"
            ],
            [
                "2017-07-31",
                "2018-01-27"
            ],
            [
                "2017-09-22",
                "2018-02-14"
            ],
            [
                "2017-03-04",
                "2018-02-20"
            ],
            [
                "2017-04-14",
                "2017-11-15"
            ],
            [
                "2017-03-29",
                "2018-02-20"
            ],
            [
                "2016-07-19",
                "2017-11-04"
            ]
        ]
    },
    {
        "question": "What is the most popular payment method?",
        "query": "MATCH (payments:`insurance_policies.Payments`)\nWITH payments.Payment_Method_Code AS Payment_Method_Code, count(payments.Payment_Method_Code) AS count\nRETURN Payment_Method_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "insurance_policies",
        "answers": [
            [
                "MasterCard"
            ]
        ]
    },
    {
        "question": "Which payment method is used the most often?",
        "query": "MATCH (payments:`insurance_policies.Payments`)\nWITH payments.Payment_Method_Code AS Payment_Method_Code, count(payments.Payment_Method_Code) AS count\nRETURN Payment_Method_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "insurance_policies",
        "answers": [
            [
                "MasterCard"
            ]
        ]
    },
    {
        "question": "With which kind of payment method were the least number of payments processed?",
        "query": "MATCH (payments:`insurance_policies.Payments`)\nWITH payments.Payment_Method_Code AS Payment_Method_Code, count(payments.Payment_Method_Code) AS count\nRETURN Payment_Method_Code\nORDER BY count ASC\nLIMIT 1",
        "db_id": "insurance_policies",
        "answers": [
            [
                "American Express"
            ]
        ]
    },
    {
        "question": "What is the payment method that were used the least often?",
        "query": "MATCH (payments:`insurance_policies.Payments`)\nWITH payments.Payment_Method_Code AS Payment_Method_Code, count(payments.Payment_Method_Code) AS count\nRETURN Payment_Method_Code\nORDER BY count ASC\nLIMIT 1",
        "db_id": "insurance_policies",
        "answers": [
            [
                "American Express"
            ]
        ]
    },
    {
        "question": "What are all the distinct details of the customers?",
        "query": "MATCH (customers:`insurance_policies.Customers`)\nRETURN DISTINCT customers.Customer_Details",
        "db_id": "insurance_policies",
        "answers": [
            [
                "America Jaskolski"
            ],
            [
                "Ellsworth Paucek"
            ],
            [
                "Mrs. Hanna Willms"
            ],
            [
                "Dr. Diana Rath"
            ],
            [
                "Selena Gerhold"
            ],
            [
                "Lauriane Ferry PhD"
            ],
            [
                "Sydnie Friesen"
            ],
            [
                "Dayana Robel"
            ],
            [
                "Mr. Edwardo Blanda I"
            ],
            [
                "Augustine Kerluke"
            ],
            [
                "Buddy Marquardt"
            ],
            [
                "Mr. Randal Lynch III"
            ],
            [
                "Mrs. Liza Heller V"
            ],
            [
                "Mrs. Lilly Graham III"
            ],
            [
                "Miss Felicita Reichel"
            ]
        ]
    },
    {
        "question": "Return the distinct customer details.",
        "query": "MATCH (customers:`insurance_policies.Customers`)\nRETURN DISTINCT customers.Customer_Details",
        "db_id": "insurance_policies",
        "answers": [
            [
                "America Jaskolski"
            ],
            [
                "Ellsworth Paucek"
            ],
            [
                "Mrs. Hanna Willms"
            ],
            [
                "Dr. Diana Rath"
            ],
            [
                "Selena Gerhold"
            ],
            [
                "Lauriane Ferry PhD"
            ],
            [
                "Sydnie Friesen"
            ],
            [
                "Dayana Robel"
            ],
            [
                "Mr. Edwardo Blanda I"
            ],
            [
                "Augustine Kerluke"
            ],
            [
                "Buddy Marquardt"
            ],
            [
                "Mr. Randal Lynch III"
            ],
            [
                "Mrs. Liza Heller V"
            ],
            [
                "Mrs. Lilly Graham III"
            ],
            [
                "Miss Felicita Reichel"
            ]
        ]
    },
    {
        "question": "Which kind of policy type was chosen by the most customers?",
        "query": "MATCH (customer_policies:`insurance_policies.Customer_Policies`)\nWITH count(customer_policies.Policy_Type_Code) AS count, customer_policies.Policy_Type_Code AS Policy_Type_Code\nRETURN Policy_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "insurance_policies",
        "answers": [
            [
                "Travel"
            ]
        ]
    },
    {
        "question": "Find the policy type the most customers choose.",
        "query": "MATCH (customer_policies:`insurance_policies.Customer_Policies`)\nWITH count(customer_policies.Policy_Type_Code) AS count, customer_policies.Policy_Type_Code AS Policy_Type_Code\nRETURN Policy_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "insurance_policies",
        "answers": [
            [
                "Travel"
            ]
        ]
    },
    {
        "question": "How many settlements are there in total?",
        "query": "MATCH (settlements:`insurance_policies.Settlements`)\nRETURN count(*)",
        "db_id": "insurance_policies",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Count the total number of settlements made.",
        "query": "MATCH (settlements:`insurance_policies.Settlements`)\nRETURN count(*)",
        "db_id": "insurance_policies",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Which Payments were processed with Visa? List the payment Id, the date and the amount.",
        "query": "MATCH (payments:`insurance_policies.Payments`)\nWHERE payments.Payment_Method_Code = 'Visa'\nRETURN payments.Payment_ID,payments.Date_Payment_Made,payments.Amount_Payment",
        "db_id": "insurance_policies",
        "answers": [
            [
                678,
                "2017-12-16",
                459407
            ],
            [
                754,
                "2018-02-24",
                7343
            ],
            [
                779,
                "2017-05-28",
                155654
            ],
            [
                791,
                "2017-05-03",
                172309
            ]
        ]
    },
    {
        "question": "Give me the payment Id, the date and the amount for all the payments processed with Visa.",
        "query": "MATCH (payments:`insurance_policies.Payments`)\nWHERE payments.Payment_Method_Code = 'Visa'\nRETURN payments.Payment_ID,payments.Date_Payment_Made,payments.Amount_Payment",
        "db_id": "insurance_policies",
        "answers": [
            [
                678,
                "2017-12-16",
                459407
            ],
            [
                754,
                "2018-02-24",
                7343
            ],
            [
                779,
                "2017-05-28",
                155654
            ],
            [
                791,
                "2017-05-03",
                172309
            ]
        ]
    },
    {
        "question": "List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement.",
        "query": "MATCH (T1:`insurance_policies.Claims`)-[]-(T2:`insurance_policies.Settlements`)\nWITH count(*) AS count, T1.Claim_ID AS Claim_ID, T1.Date_Claim_Made AS Date_Claim_Made, T1.Date_Claim_Settled AS Date_Claim_Settled\nWHERE count  = 1\nRETURN Claim_ID,Date_Claim_Made,Date_Claim_Settled",
        "db_id": "insurance_policies",
        "answers": [
            [
                563,
                "2016-08-02",
                "2017-09-04"
            ],
            [
                569,
                "2018-07-15",
                "2017-11-19"
            ],
            [
                571,
                "2017-08-03",
                "2018-02-18"
            ],
            [
                843,
                "2017-10-14",
                "2018-02-20"
            ],
            [
                957,
                "2018-11-08",
                "2017-09-15"
            ]
        ]
    },
    {
        "question": "Which claims had exactly one settlement? For each, tell me the the date the claim was made, the date it was settled and the amount settled.",
        "query": "MATCH (T1:`insurance_policies.Claims`)-[]-(T2:`insurance_policies.Settlements`)\nWITH count(*) AS count, T1.Claim_ID AS Claim_ID, T1.Date_Claim_Made AS Date_Claim_Made, T1.Date_Claim_Settled AS Date_Claim_Settled\nWHERE count  = 1\nRETURN Claim_ID,Date_Claim_Made,Date_Claim_Settled",
        "db_id": "insurance_policies",
        "answers": [
            [
                563,
                "2016-08-02",
                "2017-09-04"
            ],
            [
                569,
                "2018-07-15",
                "2017-11-19"
            ],
            [
                571,
                "2017-08-03",
                "2018-02-18"
            ],
            [
                843,
                "2017-10-14",
                "2018-02-20"
            ],
            [
                957,
                "2018-11-08",
                "2017-09-15"
            ]
        ]
    },
    {
        "question": "What are names of patients who made an appointment?",
        "query": "MATCH (T1:`hospital_1.Appointment`)-[]-(T2:`hospital_1.Patient`)\nRETURN T2.Name",
        "db_id": "hospital_1",
        "answers": [
            [
                "John Smith"
            ],
            [
                "John Smith"
            ],
            [
                "John Smith"
            ],
            [
                "Grace Ritchie"
            ],
            [
                "Grace Ritchie"
            ],
            [
                "Random J. Patient"
            ],
            [
                "Dennis Doe"
            ],
            [
                "Dennis Doe"
            ],
            [
                "Dennis Doe"
            ]
        ]
    },
    {
        "question": "List the names of patients who have made appointments.",
        "query": "MATCH (T1:`hospital_1.Appointment`)-[]-(T2:`hospital_1.Patient`)\nRETURN T2.Name",
        "db_id": "hospital_1",
        "answers": [
            [
                "John Smith"
            ],
            [
                "John Smith"
            ],
            [
                "John Smith"
            ],
            [
                "Grace Ritchie"
            ],
            [
                "Grace Ritchie"
            ],
            [
                "Random J. Patient"
            ],
            [
                "Dennis Doe"
            ],
            [
                "Dennis Doe"
            ],
            [
                "Dennis Doe"
            ]
        ]
    },
    {
        "question": "what are name and phone number of patients who had more than one appointment?",
        "query": "MATCH (T1:`hospital_1.Appointment`)-[]-(T2:`hospital_1.Patient`)\nWITH count(*) AS count, T2.Phone AS Phone, T2.Name AS Name\nWHERE count  > 1\nRETURN Name,Phone",
        "db_id": "hospital_1",
        "answers": [
            [
                "John Smith",
                "555-0256"
            ],
            [
                "Grace Ritchie",
                "555-0512"
            ],
            [
                "Dennis Doe",
                "555-2048"
            ]
        ]
    },
    {
        "question": "Which patients made more than one appointment? Tell me the name and phone number of these patients.",
        "query": "MATCH (T1:`hospital_1.Appointment`)-[]-(T2:`hospital_1.Patient`)\nWITH count(*) AS count, T2.Phone AS Phone, T2.Name AS Name\nWHERE count  > 1\nRETURN Name,Phone",
        "db_id": "hospital_1",
        "answers": [
            [
                "John Smith",
                "555-0256"
            ],
            [
                "Grace Ritchie",
                "555-0512"
            ],
            [
                "Dennis Doe",
                "555-2048"
            ]
        ]
    },
    {
        "question": "Find the id of the appointment with the most recent start date?",
        "query": "MATCH (appointment:`hospital_1.Appointment`)\nRETURN appointment.AppointmentID\nORDER BY appointment.Start DESC\nLIMIT 1",
        "db_id": "hospital_1",
        "answers": [
            [
                86213939
            ]
        ]
    },
    {
        "question": "What is the id of the appointment that started most recently?",
        "query": "MATCH (appointment:`hospital_1.Appointment`)\nRETURN appointment.AppointmentID\nORDER BY appointment.Start DESC\nLIMIT 1",
        "db_id": "hospital_1",
        "answers": [
            [
                86213939
            ]
        ]
    },
    {
        "question": "List the name of physicians who took some appointment.",
        "query": "MATCH (T1:`hospital_1.Appointment`)-[]-(T2:`hospital_1.Physician`)\nRETURN T2.Name",
        "db_id": "hospital_1",
        "answers": [
            [
                "John Dorian"
            ],
            [
                "Elliot Reid"
            ],
            [
                "John Dorian"
            ],
            [
                "Percival Cox"
            ],
            [
                "Percival Cox"
            ],
            [
                "Elliot Reid"
            ],
            [
                "Christopher Turk"
            ],
            [
                "Molly Clock"
            ],
            [
                "Elliot Reid"
            ]
        ]
    },
    {
        "question": "What are the names of all the physicians who took appointments.",
        "query": "MATCH (T1:`hospital_1.Appointment`)-[]-(T2:`hospital_1.Physician`)\nRETURN T2.Name",
        "db_id": "hospital_1",
        "answers": [
            [
                "John Dorian"
            ],
            [
                "Elliot Reid"
            ],
            [
                "John Dorian"
            ],
            [
                "Percival Cox"
            ],
            [
                "Percival Cox"
            ],
            [
                "Elliot Reid"
            ],
            [
                "Christopher Turk"
            ],
            [
                "Molly Clock"
            ],
            [
                "Elliot Reid"
            ]
        ]
    },
    {
        "question": "Find the names of all physicians and their primary affiliated departments' names.",
        "query": "MATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Affiliated_With`]-(T3:`hospital_1.Department`)\nWHERE T2.PrimaryAffiliation = 1\nRETURN T1.Name,T3.Name",
        "db_id": "hospital_1",
        "answers": [
            [
                "Bob Kelso",
                "General Medicine"
            ],
            [
                "Elliot Reid",
                "General Medicine"
            ],
            [
                "Keith Dudemeister",
                "General Medicine"
            ],
            [
                "John Dorian",
                "General Medicine"
            ],
            [
                "Percival Cox",
                "General Medicine"
            ],
            [
                "Todd Quinlan",
                "Surgery"
            ],
            [
                "John Wen",
                "Surgery"
            ],
            [
                "Christopher Turk",
                "Surgery"
            ],
            [
                "Molly Clock",
                "Psychiatry"
            ]
        ]
    },
    {
        "question": "What are the name and primarily affiliated department name of each physician?",
        "query": "MATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Affiliated_With`]-(T3:`hospital_1.Department`)\nWHERE T2.PrimaryAffiliation = 1\nRETURN T1.Name,T3.Name",
        "db_id": "hospital_1",
        "answers": [
            [
                "Bob Kelso",
                "General Medicine"
            ],
            [
                "Elliot Reid",
                "General Medicine"
            ],
            [
                "Keith Dudemeister",
                "General Medicine"
            ],
            [
                "John Dorian",
                "General Medicine"
            ],
            [
                "Percival Cox",
                "General Medicine"
            ],
            [
                "Todd Quinlan",
                "Surgery"
            ],
            [
                "John Wen",
                "Surgery"
            ],
            [
                "Christopher Turk",
                "Surgery"
            ],
            [
                "Molly Clock",
                "Psychiatry"
            ]
        ]
    },
    {
        "question": "What is the name of the patient who made the most recent appointment?",
        "query": "MATCH (T1:`hospital_1.Patient`)-[]-(T2:`hospital_1.Appointment`)\nRETURN T1.Name\nORDER BY T2.Start DESC\nLIMIT 1",
        "db_id": "hospital_1",
        "answers": [
            [
                "Dennis Doe"
            ]
        ]
    },
    {
        "question": "Find the name of the patient who made the appointment with the most recent start date.",
        "query": "MATCH (T1:`hospital_1.Patient`)-[]-(T2:`hospital_1.Appointment`)\nRETURN T1.Name\nORDER BY T2.Start DESC\nLIMIT 1",
        "db_id": "hospital_1",
        "answers": [
            [
                "Dennis Doe"
            ]
        ]
    },
    {
        "question": "How many patients stay in room 112?",
        "query": "MATCH (stay:`hospital_1.Stay`)\nWHERE stay.Room = 112\nRETURN count(stay.Patient)",
        "db_id": "hospital_1",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "Count the number of patients who stayed in room 112.",
        "query": "MATCH (stay:`hospital_1.Stay`)\nWHERE stay.Room = 112\nRETURN count(stay.Patient)",
        "db_id": "hospital_1",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "Find the patient who most recently stayed in room 111.",
        "query": "MATCH (stay:`hospital_1.Stay`)\nWHERE stay.Room = 111\nRETURN stay.Patient\nORDER BY stay.StayStart DESC\nLIMIT 1",
        "db_id": "hospital_1",
        "answers": [
            [
                100000001
            ]
        ]
    },
    {
        "question": "What is the id of the patient who stayed in room 111 most recently?",
        "query": "MATCH (stay:`hospital_1.Stay`)\nWHERE stay.Room = 111\nRETURN stay.Patient\nORDER BY stay.StayStart DESC\nLIMIT 1",
        "db_id": "hospital_1",
        "answers": [
            [
                100000001
            ]
        ]
    },
    {
        "question": "What is the name of the nurse has the most appointments?",
        "query": "MATCH (T1:`hospital_1.Nurse`)-[]-(T2:`hospital_1.Appointment`)\nWITH T1.Name AS Name, count(T1.EmployeeID) AS count\nRETURN Name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "hospital_1",
        "answers": [
            [
                "Carla Espinosa"
            ]
        ]
    },
    {
        "question": "Find the name of the nurse who has the largest number of appointments.",
        "query": "MATCH (T1:`hospital_1.Nurse`)-[]-(T2:`hospital_1.Appointment`)\nWITH T1.Name AS Name, count(T1.EmployeeID) AS count\nRETURN Name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "hospital_1",
        "answers": [
            [
                "Carla Espinosa"
            ]
        ]
    },
    {
        "question": "How many patients do each physician take care of? List their names and number of patients they take care of.",
        "query": "MATCH (T1:`hospital_1.Physician`)-[]-(T2:`hospital_1.Patient`)\nWITH T1.Name AS Name, count(T1.EmployeeID) AS count\nRETURN Name,count",
        "db_id": "hospital_1",
        "answers": [
            [
                "John Dorian",
                1
            ],
            [
                "Elliot Reid",
                2
            ],
            [
                "Christopher Turk",
                1
            ]
        ]
    },
    {
        "question": "Return the name of each physician and the number of patients he or she treats.",
        "query": "MATCH (T1:`hospital_1.Physician`)-[]-(T2:`hospital_1.Patient`)\nWITH T1.Name AS Name, count(T1.EmployeeID) AS count\nRETURN Name,count",
        "db_id": "hospital_1",
        "answers": [
            [
                "John Dorian",
                1
            ],
            [
                "Elliot Reid",
                2
            ],
            [
                "Christopher Turk",
                1
            ]
        ]
    },
    {
        "question": "Find the name of physicians who are in charge of more than one patient.",
        "query": "MATCH (T1:`hospital_1.Physician`)-[]-(T2:`hospital_1.Patient`)\nWITH T1.Name AS Name, count(*) AS count\nWHERE count  > 1\nRETURN Name",
        "db_id": "hospital_1",
        "answers": [
            [
                "Elliot Reid"
            ]
        ]
    },
    {
        "question": "Which physicians are in charge of more than one patient? Give me their names.",
        "query": "MATCH (T1:`hospital_1.Physician`)-[]-(T2:`hospital_1.Patient`)\nWITH T1.Name AS Name, count(*) AS count\nWHERE count  > 1\nRETURN Name",
        "db_id": "hospital_1",
        "answers": [
            [
                "Elliot Reid"
            ]
        ]
    },
    {
        "question": "What are the unique block codes that have available rooms?",
        "query": "MATCH (room:`hospital_1.Room`)\nWHERE room.Unavailable = 0\nRETURN DISTINCT room.BlockCode",
        "db_id": "hospital_1",
        "answers": [
            [
                1
            ],
            [
                2
            ],
            [
                3
            ]
        ]
    },
    {
        "question": "Tell me the distinct block codes where some rooms are available.",
        "query": "MATCH (room:`hospital_1.Room`)\nWHERE room.Unavailable = 0\nRETURN DISTINCT room.BlockCode",
        "db_id": "hospital_1",
        "answers": [
            [
                1
            ],
            [
                2
            ],
            [
                3
            ]
        ]
    },
    {
        "question": "How many different types of rooms are there?",
        "query": "MATCH (room:`hospital_1.Room`)\nRETURN count(DISTINCT room.RoomType)",
        "db_id": "hospital_1",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "Find the number of distinct room types available.",
        "query": "MATCH (room:`hospital_1.Room`)\nRETURN count(DISTINCT room.RoomType)",
        "db_id": "hospital_1",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "Find the number of medications prescribed for each brand.",
        "query": "MATCH (T1:`hospital_1.Medication`)-[]-(T2:`hospital_1.Prescribes`)\nWITH T1.Name AS Name, count(T1.Brand) AS count\nRETURN count,Name",
        "db_id": "hospital_1",
        "answers": [
            [
                1,
                "Procrastin-X"
            ],
            [
                2,
                "Thesisin"
            ]
        ]
    },
    {
        "question": "How many medications are prescribed for each brand?",
        "query": "MATCH (T1:`hospital_1.Medication`)-[]-(T2:`hospital_1.Prescribes`)\nWITH T1.Name AS Name, count(T1.Brand) AS count\nRETURN count,Name",
        "db_id": "hospital_1",
        "answers": [
            [
                1,
                "Procrastin-X"
            ],
            [
                2,
                "Thesisin"
            ]
        ]
    },
    {
        "question": "Find the name of physicians whose position title contains the word 'senior'.",
        "query": "MATCH (physician:`hospital_1.Physician`)\nWHERE physician.Position =~'.*[S|s]enior.*'\nRETURN physician.Name",
        "db_id": "hospital_1",
        "answers": [
            [
                "Percival Cox"
            ]
        ]
    },
    {
        "question": "What are the names of the physicians who have 'senior' in their titles.",
        "query": "MATCH (physician:`hospital_1.Physician`)\nWHERE physician.Position =~'.*[S|s]enior.*'\nRETURN physician.Name",
        "db_id": "hospital_1",
        "answers": [
            [
                "Percival Cox"
            ]
        ]
    },
    {
        "question": "Find the patient who has the most recent undergoing treatment?",
        "query": "MATCH (undergoes:`hospital_1.Undergoes`)\nRETURN undergoes.Patient\nORDER BY undergoes.DateUndergoes\nLIMIT 1",
        "db_id": "hospital_1",
        "answers": [
            [
                100000001
            ]
        ]
    },
    {
        "question": "Which patient is undergoing the most recent treatment?",
        "query": "MATCH (undergoes:`hospital_1.Undergoes`)\nRETURN undergoes.Patient\nORDER BY undergoes.DateUndergoes\nLIMIT 1",
        "db_id": "hospital_1",
        "answers": [
            [
                100000001
            ]
        ]
    },
    {
        "question": "List the names of all distinct nurses ordered by alphabetical order?",
        "query": "MATCH (nurse:`hospital_1.Nurse`)\nRETURN DISTINCT nurse.Name\nORDER BY nurse.Name",
        "db_id": "hospital_1",
        "answers": [
            [
                "Carla Espinosa"
            ],
            [
                "Laverne Roberts"
            ],
            [
                "Paul Flowers"
            ]
        ]
    },
    {
        "question": "What is the alphabetically ordered list of all the distinct names of nurses?",
        "query": "MATCH (nurse:`hospital_1.Nurse`)\nRETURN DISTINCT nurse.Name\nORDER BY nurse.Name",
        "db_id": "hospital_1",
        "answers": [
            [
                "Carla Espinosa"
            ],
            [
                "Laverne Roberts"
            ],
            [
                "Paul Flowers"
            ]
        ]
    },
    {
        "question": "Find the names of nurses who are nursing an undergoing treatment.",
        "query": "MATCH (T1:`hospital_1.Undergoes`)-[]-(T2:`hospital_1.Nurse`)\nRETURN DISTINCT T2.Name",
        "db_id": "hospital_1",
        "answers": [
            [
                "Carla Espinosa"
            ],
            [
                "Laverne Roberts"
            ],
            [
                "Paul Flowers"
            ]
        ]
    },
    {
        "question": "Which nurses are in charge of patients undergoing treatments?",
        "query": "MATCH (T1:`hospital_1.Undergoes`)-[]-(T2:`hospital_1.Nurse`)\nRETURN DISTINCT T2.Name",
        "db_id": "hospital_1",
        "answers": [
            [
                "Carla Espinosa"
            ],
            [
                "Laverne Roberts"
            ],
            [
                "Paul Flowers"
            ]
        ]
    },
    {
        "question": "List the names of all distinct medications, ordered in an alphabetical order.",
        "query": "MATCH (medication:`hospital_1.Medication`)\nRETURN DISTINCT medication.Name\nORDER BY medication.Name",
        "db_id": "hospital_1",
        "answers": [
            [
                "Awakin"
            ],
            [
                "Crescavitin"
            ],
            [
                "Melioraurin"
            ],
            [
                "Procrastin-X"
            ],
            [
                "Thesisin"
            ]
        ]
    },
    {
        "question": "What is the alphabetically ordered list of all distinct medications?",
        "query": "MATCH (medication:`hospital_1.Medication`)\nRETURN DISTINCT medication.Name\nORDER BY medication.Name",
        "db_id": "hospital_1",
        "answers": [
            [
                "Awakin"
            ],
            [
                "Crescavitin"
            ],
            [
                "Melioraurin"
            ],
            [
                "Procrastin-X"
            ],
            [
                "Thesisin"
            ]
        ]
    },
    {
        "question": "What are the names of the physician who prescribed the highest dose?",
        "query": "MATCH (T1:`hospital_1.Physician`)-[]-(T2:`hospital_1.Prescribes`)\nRETURN T1.Name\nORDER BY T2.Dose DESC\nLIMIT 1",
        "db_id": "hospital_1",
        "answers": [
            [
                "John Dorian"
            ]
        ]
    },
    {
        "question": "Find the physician who prescribed the highest dose. What is his or her name?",
        "query": "MATCH (T1:`hospital_1.Physician`)-[]-(T2:`hospital_1.Prescribes`)\nRETURN T1.Name\nORDER BY T2.Dose DESC\nLIMIT 1",
        "db_id": "hospital_1",
        "answers": [
            [
                "John Dorian"
            ]
        ]
    },
    {
        "question": "List the names of departments where some physicians are primarily affiliated with.",
        "query": "MATCH ()-[T1:`hospital_1.Affiliated_With`]-(T2:`hospital_1.Department`)\nWHERE T1.PrimaryAffiliation = 1\nRETURN DISTINCT T2.Name",
        "db_id": "hospital_1",
        "answers": [
            [
                "General Medicine"
            ],
            [
                "Surgery"
            ],
            [
                "Psychiatry"
            ]
        ]
    },
    {
        "question": "What are the names of departments that have primarily affiliated physicians.",
        "query": "MATCH ()-[T1:`hospital_1.Affiliated_With`]-(T2:`hospital_1.Department`)\nWHERE T1.PrimaryAffiliation = 1\nRETURN DISTINCT T2.Name",
        "db_id": "hospital_1",
        "answers": [
            [
                "General Medicine"
            ],
            [
                "Surgery"
            ],
            [
                "Psychiatry"
            ]
        ]
    },
    {
        "question": "What are the highest cost, lowest cost and average cost of procedures?",
        "query": "MATCH (procedures:`hospital_1.Procedures`)\nRETURN max(procedures.Cost),min(procedures.Cost),avg(procedures.Cost)",
        "db_id": "hospital_1",
        "answers": [
            [
                10000.0,
                25.0,
                4324.857142857143
            ]
        ]
    },
    {
        "question": "Tell me the highest, lowest, and average cost of procedures.",
        "query": "MATCH (procedures:`hospital_1.Procedures`)\nRETURN max(procedures.Cost),min(procedures.Cost),avg(procedures.Cost)",
        "db_id": "hospital_1",
        "answers": [
            [
                10000.0,
                25.0,
                4324.857142857143
            ]
        ]
    },
    {
        "question": "List the name and cost of all procedures sorted by the cost from the highest to the lowest.",
        "query": "MATCH (procedures:`hospital_1.Procedures`)\nRETURN procedures.Name,procedures.Cost\nORDER BY procedures.Cost DESC",
        "db_id": "hospital_1",
        "answers": [
            [
                "Complete Walletectomy",
                10000.0
            ],
            [
                "Reversible Pancreomyoplasty",
                5600.0
            ],
            [
                "Obfuscated Dermogastrotomy",
                4899.0
            ],
            [
                "Folded Demiophtalmectomy",
                4500.0
            ],
            [
                "Obtuse Pyloric Recombobulation",
                3750.0
            ],
            [
                "Reverse Rhinopodoplasty",
                1500.0
            ],
            [
                "Follicular Demiectomy",
                25.0
            ]
        ]
    },
    {
        "question": "Sort the list of names and costs of all procedures in the descending order of cost.",
        "query": "MATCH (procedures:`hospital_1.Procedures`)\nRETURN procedures.Name,procedures.Cost\nORDER BY procedures.Cost DESC",
        "db_id": "hospital_1",
        "answers": [
            [
                "Complete Walletectomy",
                10000.0
            ],
            [
                "Reversible Pancreomyoplasty",
                5600.0
            ],
            [
                "Obfuscated Dermogastrotomy",
                4899.0
            ],
            [
                "Folded Demiophtalmectomy",
                4500.0
            ],
            [
                "Obtuse Pyloric Recombobulation",
                3750.0
            ],
            [
                "Reverse Rhinopodoplasty",
                1500.0
            ],
            [
                "Follicular Demiectomy",
                25.0
            ]
        ]
    },
    {
        "question": "Find the three most expensive procedures.",
        "query": "MATCH (procedures:`hospital_1.Procedures`)\nRETURN procedures.Name\nORDER BY procedures.Cost\nLIMIT 3",
        "db_id": "hospital_1",
        "answers": [
            [
                "Follicular Demiectomy"
            ],
            [
                "Reverse Rhinopodoplasty"
            ],
            [
                "Obtuse Pyloric Recombobulation"
            ]
        ]
    },
    {
        "question": "What are the three most costly procedures?",
        "query": "MATCH (procedures:`hospital_1.Procedures`)\nRETURN procedures.Name\nORDER BY procedures.Cost\nLIMIT 3",
        "db_id": "hospital_1",
        "answers": [
            [
                "Follicular Demiectomy"
            ],
            [
                "Reverse Rhinopodoplasty"
            ],
            [
                "Obtuse Pyloric Recombobulation"
            ]
        ]
    },
    {
        "question": "Find the physicians who are trained in a procedure that costs more than 5000.",
        "query": "MATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Trained_In`]-(T3:`hospital_1.Procedures`)\nWHERE T3.Cost > 5000\nRETURN T1.Name",
        "db_id": "hospital_1",
        "answers": [
            [
                "John Wen"
            ],
            [
                "Todd Quinlan"
            ],
            [
                "Christopher Turk"
            ],
            [
                "John Wen"
            ]
        ]
    },
    {
        "question": "Which physicians are trained in procedures that are more expensive than 5000?",
        "query": "MATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Trained_In`]-(T3:`hospital_1.Procedures`)\nWHERE T3.Cost > 5000\nRETURN T1.Name",
        "db_id": "hospital_1",
        "answers": [
            [
                "John Wen"
            ],
            [
                "Todd Quinlan"
            ],
            [
                "Christopher Turk"
            ],
            [
                "John Wen"
            ]
        ]
    },
    {
        "question": "Find the physician who was trained in the most expensive procedure?",
        "query": "MATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Trained_In`]-(T3:`hospital_1.Procedures`)\nRETURN T1.Name\nORDER BY T3.Cost DESC\nLIMIT 1",
        "db_id": "hospital_1",
        "answers": [
            [
                "John Wen"
            ]
        ]
    },
    {
        "question": "Which physician was trained in the procedure that costs the most.",
        "query": "MATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Trained_In`]-(T3:`hospital_1.Procedures`)\nRETURN T1.Name\nORDER BY T3.Cost DESC\nLIMIT 1",
        "db_id": "hospital_1",
        "answers": [
            [
                "John Wen"
            ]
        ]
    },
    {
        "question": "What is the average cost of procedures that physician John Wen was trained in?",
        "query": "MATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Trained_In`]-(T3:`hospital_1.Procedures`)\nWHERE T1.Name = 'John Wen'\nRETURN avg(T3.Cost)",
        "db_id": "hospital_1",
        "answers": [
            [
                4324.857142857143
            ]
        ]
    },
    {
        "question": "Compute the mean price of procedures physician John Wen was trained in.",
        "query": "MATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Trained_In`]-(T3:`hospital_1.Procedures`)\nWHERE T1.Name = 'John Wen'\nRETURN avg(T3.Cost)",
        "db_id": "hospital_1",
        "answers": [
            [
                4324.857142857143
            ]
        ]
    },
    {
        "question": "Find the names of procedures which physician John Wen was trained in.",
        "query": "MATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Trained_In`]-(T3:`hospital_1.Procedures`)\nWHERE T1.Name = 'John Wen'\nRETURN T3.Name",
        "db_id": "hospital_1",
        "answers": [
            [
                "Reverse Rhinopodoplasty"
            ],
            [
                "Obfuscated Dermogastrotomy"
            ],
            [
                "Follicular Demiectomy"
            ],
            [
                "Folded Demiophtalmectomy"
            ],
            [
                "Complete Walletectomy"
            ],
            [
                "Obtuse Pyloric Recombobulation"
            ],
            [
                "Reversible Pancreomyoplasty"
            ]
        ]
    },
    {
        "question": "What are the names of procedures physician John Wen was trained in?",
        "query": "MATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Trained_In`]-(T3:`hospital_1.Procedures`)\nWHERE T1.Name = 'John Wen'\nRETURN T3.Name",
        "db_id": "hospital_1",
        "answers": [
            [
                "Reverse Rhinopodoplasty"
            ],
            [
                "Obfuscated Dermogastrotomy"
            ],
            [
                "Follicular Demiectomy"
            ],
            [
                "Folded Demiophtalmectomy"
            ],
            [
                "Complete Walletectomy"
            ],
            [
                "Obtuse Pyloric Recombobulation"
            ],
            [
                "Reversible Pancreomyoplasty"
            ]
        ]
    },
    {
        "question": "Find all procedures which cost more than 1000 or which physician John Wen was trained in.",
        "query": "MATCH (procedures:`hospital_1.Procedures`)\nWHERE procedures.Cost > 1000\nRETURN procedures.Name  AS name \nUNION\nMATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Trained_In`]-(T3:`hospital_1.Procedures`)\nWHERE T1.Name = 'John Wen'\nRETURN T3.Name  AS name",
        "db_id": "hospital_1",
        "answers": [
            [
                "Reverse Rhinopodoplasty"
            ],
            [
                "Obtuse Pyloric Recombobulation"
            ],
            [
                "Folded Demiophtalmectomy"
            ],
            [
                "Complete Walletectomy"
            ],
            [
                "Obfuscated Dermogastrotomy"
            ],
            [
                "Reversible Pancreomyoplasty"
            ],
            [
                "Follicular Demiectomy"
            ]
        ]
    },
    {
        "question": "What are the procedures that cost more than 1000 or are specialized in by physician John Wen?",
        "query": "MATCH (procedures:`hospital_1.Procedures`)\nWHERE procedures.Cost > 1000\nRETURN procedures.Name  AS name \nUNION\nMATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Trained_In`]-(T3:`hospital_1.Procedures`)\nWHERE T1.Name = 'John Wen'\nRETURN T3.Name  AS name",
        "db_id": "hospital_1",
        "answers": [
            [
                "Reverse Rhinopodoplasty"
            ],
            [
                "Obtuse Pyloric Recombobulation"
            ],
            [
                "Folded Demiophtalmectomy"
            ],
            [
                "Complete Walletectomy"
            ],
            [
                "Obfuscated Dermogastrotomy"
            ],
            [
                "Reversible Pancreomyoplasty"
            ],
            [
                "Follicular Demiectomy"
            ]
        ]
    },
    {
        "question": "Find the name of physicians who are affiliated with Surgery or Psychiatry department.",
        "query": "MATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Affiliated_With`]-(T3:`hospital_1.Department`)\nWHERE T3.Name = 'Surgery' OR T3.Name = 'Psychiatry'\nRETURN T1.Name",
        "db_id": "hospital_1",
        "answers": [
            [
                "Todd Quinlan"
            ],
            [
                "John Wen"
            ],
            [
                "Christopher Turk"
            ],
            [
                "Molly Clock"
            ]
        ]
    },
    {
        "question": "Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names.",
        "query": "MATCH (T1:`hospital_1.Physician`)-[T2:`hospital_1.Affiliated_With`]-(T3:`hospital_1.Department`)\nWHERE T3.Name = 'Surgery' OR T3.Name = 'Psychiatry'\nRETURN T1.Name",
        "db_id": "hospital_1",
        "answers": [
            [
                "Todd Quinlan"
            ],
            [
                "John Wen"
            ],
            [
                "Christopher Turk"
            ],
            [
                "Molly Clock"
            ]
        ]
    },
    {
        "question": "How many appointments are there?",
        "query": "MATCH (appointment:`hospital_1.Appointment`)\nRETURN count(*)",
        "db_id": "hospital_1",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "Count how many appointments have been made in total.",
        "query": "MATCH (appointment:`hospital_1.Appointment`)\nRETURN count(*)",
        "db_id": "hospital_1",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "How many ships are there?",
        "query": "MATCH (ship:`ship_mission.ship`)\nRETURN count(*)",
        "db_id": "ship_mission",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "What is the number of ships?",
        "query": "MATCH (ship:`ship_mission.ship`)\nRETURN count(*)",
        "db_id": "ship_mission",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "List the name of ships in ascending order of tonnage.",
        "query": "MATCH (ship:`ship_mission.ship`)\nRETURN ship.Name\nORDER BY ship.Tonnage ASC",
        "db_id": "ship_mission",
        "answers": [
            [
                "Ariadne"
            ],
            [
                "Farringford"
            ],
            [
                "Author"
            ],
            [
                "Trader"
            ],
            [
                "Dromonby"
            ],
            [
                "Corbridge"
            ],
            [
                "Clan McTavish"
            ],
            [
                "Appam"
            ]
        ]
    },
    {
        "question": "what are the names of the ships ordered by ascending tonnage?",
        "query": "MATCH (ship:`ship_mission.ship`)\nRETURN ship.Name\nORDER BY ship.Tonnage ASC",
        "db_id": "ship_mission",
        "answers": [
            [
                "Ariadne"
            ],
            [
                "Farringford"
            ],
            [
                "Author"
            ],
            [
                "Trader"
            ],
            [
                "Dromonby"
            ],
            [
                "Corbridge"
            ],
            [
                "Clan McTavish"
            ],
            [
                "Appam"
            ]
        ]
    },
    {
        "question": "What are the type and nationality of ships?",
        "query": "MATCH (ship:`ship_mission.ship`)\nRETURN ship.Type,ship.Nationality",
        "db_id": "ship_mission",
        "answers": [
            [
                "Cargo ship",
                "United Kingdom"
            ],
            [
                "Battle ship",
                "United States"
            ],
            [
                "Cargo ship",
                "United Kingdom"
            ],
            [
                "Cargo ship",
                "United Kingdom"
            ],
            [
                "Battle ship",
                "United Kingdom"
            ],
            [
                "Cargo ship",
                "United States"
            ],
            [
                "Battle ship",
                "United Kingdom"
            ],
            [
                "Cargo ship",
                "United States"
            ]
        ]
    },
    {
        "question": "What are the types and nationalities of every ship?",
        "query": "MATCH (ship:`ship_mission.ship`)\nRETURN ship.Type,ship.Nationality",
        "db_id": "ship_mission",
        "answers": [
            [
                "Cargo ship",
                "United Kingdom"
            ],
            [
                "Battle ship",
                "United States"
            ],
            [
                "Cargo ship",
                "United Kingdom"
            ],
            [
                "Cargo ship",
                "United Kingdom"
            ],
            [
                "Battle ship",
                "United Kingdom"
            ],
            [
                "Cargo ship",
                "United States"
            ],
            [
                "Battle ship",
                "United Kingdom"
            ],
            [
                "Cargo ship",
                "United States"
            ]
        ]
    },
    {
        "question": "List the name of ships whose nationality is not \"United States\".",
        "query": "MATCH (ship:`ship_mission.ship`)\nWHERE ship.Nationality <> 'United States'\nRETURN ship.Name",
        "db_id": "ship_mission",
        "answers": [
            [
                "Corbridge"
            ],
            [
                "Dromonby"
            ],
            [
                "Author"
            ],
            [
                "Trader"
            ],
            [
                "Appam"
            ]
        ]
    },
    {
        "question": "What are the names of the ships that are not from the United States?",
        "query": "MATCH (ship:`ship_mission.ship`)\nWHERE ship.Nationality <> 'United States'\nRETURN ship.Name",
        "db_id": "ship_mission",
        "answers": [
            [
                "Corbridge"
            ],
            [
                "Dromonby"
            ],
            [
                "Author"
            ],
            [
                "Trader"
            ],
            [
                "Appam"
            ]
        ]
    },
    {
        "question": "Show the name of ships whose nationality is either United States or United Kingdom.",
        "query": "MATCH (ship:`ship_mission.ship`)\nWHERE ship.Nationality = 'United States' OR ship.Nationality = 'United Kingdom'\nRETURN ship.Name",
        "db_id": "ship_mission",
        "answers": [
            [
                "Corbridge"
            ],
            [
                "Farringford"
            ],
            [
                "Dromonby"
            ],
            [
                "Author"
            ],
            [
                "Trader"
            ],
            [
                "Ariadne"
            ],
            [
                "Appam"
            ],
            [
                "Clan McTavish"
            ]
        ]
    },
    {
        "question": "What are the names of the ships  that are from either the US or the UK?",
        "query": "MATCH (ship:`ship_mission.ship`)\nWHERE ship.Nationality = 'United States' OR ship.Nationality = 'United Kingdom'\nRETURN ship.Name",
        "db_id": "ship_mission",
        "answers": [
            [
                "Corbridge"
            ],
            [
                "Farringford"
            ],
            [
                "Dromonby"
            ],
            [
                "Author"
            ],
            [
                "Trader"
            ],
            [
                "Ariadne"
            ],
            [
                "Appam"
            ],
            [
                "Clan McTavish"
            ]
        ]
    },
    {
        "question": "What is the name of the ship with the largest tonnage?",
        "query": "MATCH (ship:`ship_mission.ship`)\nRETURN ship.Name\nORDER BY ship.Tonnage DESC\nLIMIT 1",
        "db_id": "ship_mission",
        "answers": [
            [
                "Appam"
            ]
        ]
    },
    {
        "question": "What is the ship with the largest amount of tonnage called?",
        "query": "MATCH (ship:`ship_mission.ship`)\nRETURN ship.Name\nORDER BY ship.Tonnage DESC\nLIMIT 1",
        "db_id": "ship_mission",
        "answers": [
            [
                "Appam"
            ]
        ]
    },
    {
        "question": "Show different types of ships and the number of ships of each type.",
        "query": "MATCH (ship:`ship_mission.ship`)\nWITH ship.Type AS Type, count(ship.Type) AS count\nRETURN Type,count",
        "db_id": "ship_mission",
        "answers": [
            [
                "Cargo ship",
                5
            ],
            [
                "Battle ship",
                3
            ]
        ]
    },
    {
        "question": "For each type, how many ships are there?",
        "query": "MATCH (ship:`ship_mission.ship`)\nWITH ship.Type AS Type, count(ship.Type) AS count\nRETURN Type,count",
        "db_id": "ship_mission",
        "answers": [
            [
                "Cargo ship",
                5
            ],
            [
                "Battle ship",
                3
            ]
        ]
    },
    {
        "question": "Please show the most common type of ships.",
        "query": "MATCH (ship:`ship_mission.ship`)\nWITH ship.Type AS Type, count(ship.Type) AS count\nRETURN Type\nORDER BY count DESC\nLIMIT 1",
        "db_id": "ship_mission",
        "answers": [
            [
                "Cargo ship"
            ]
        ]
    },
    {
        "question": "What is the most common type of ships?",
        "query": "MATCH (ship:`ship_mission.ship`)\nWITH ship.Type AS Type, count(ship.Type) AS count\nRETURN Type\nORDER BY count DESC\nLIMIT 1",
        "db_id": "ship_mission",
        "answers": [
            [
                "Cargo ship"
            ]
        ]
    },
    {
        "question": "List the nations that have more than two ships.",
        "query": "MATCH (ship:`ship_mission.ship`)\nWITH ship.Nationality AS Nationality, count(*) AS count\nWHERE count  > 2\nRETURN Nationality",
        "db_id": "ship_mission",
        "answers": [
            [
                "United Kingdom"
            ],
            [
                "United States"
            ]
        ]
    },
    {
        "question": "What are the nations that have more than two ships?",
        "query": "MATCH (ship:`ship_mission.ship`)\nWITH ship.Nationality AS Nationality, count(*) AS count\nWHERE count  > 2\nRETURN Nationality",
        "db_id": "ship_mission",
        "answers": [
            [
                "United Kingdom"
            ],
            [
                "United States"
            ]
        ]
    },
    {
        "question": "Show codes and fates of missions, and names of ships involved.",
        "query": "MATCH (T1:`ship_mission.mission`)-[]-(T2:`ship_mission.ship`)\nRETURN T1.Code,T1.Fate,T2.Name",
        "db_id": "ship_mission",
        "answers": [
            [
                "VMV-1",
                "Decommissioned 1950",
                "Corbridge"
            ],
            [
                "VMV-2",
                "Decommissioned 1950",
                "Farringford"
            ],
            [
                "VMV-3",
                "Lost (burned) 1931",
                "Dromonby"
            ],
            [
                "VMV-4 Former: Sterling",
                "Retired 1939",
                "Trader"
            ],
            [
                "VMV-5",
                "Decommissioned 1959",
                "Ariadne"
            ],
            [
                "VMV-6",
                "Decommissioned 1960",
                "Appam"
            ],
            [
                "VMV-7",
                "Lost (burned and sunk) 1933",
                "Clan McTavish"
            ]
        ]
    },
    {
        "question": "What are the mission codes, fates, and names of the ships involved?",
        "query": "MATCH (T1:`ship_mission.mission`)-[]-(T2:`ship_mission.ship`)\nRETURN T1.Code,T1.Fate,T2.Name",
        "db_id": "ship_mission",
        "answers": [
            [
                "VMV-1",
                "Decommissioned 1950",
                "Corbridge"
            ],
            [
                "VMV-2",
                "Decommissioned 1950",
                "Farringford"
            ],
            [
                "VMV-3",
                "Lost (burned) 1931",
                "Dromonby"
            ],
            [
                "VMV-4 Former: Sterling",
                "Retired 1939",
                "Trader"
            ],
            [
                "VMV-5",
                "Decommissioned 1959",
                "Ariadne"
            ],
            [
                "VMV-6",
                "Decommissioned 1960",
                "Appam"
            ],
            [
                "VMV-7",
                "Lost (burned and sunk) 1933",
                "Clan McTavish"
            ]
        ]
    },
    {
        "question": "Show names of ships involved in a mission launched after 1928.",
        "query": "MATCH (T1:`ship_mission.mission`)-[]-(T2:`ship_mission.ship`)\nWHERE T1.Launched_Year > 1928\nRETURN T2.Name",
        "db_id": "ship_mission",
        "answers": [
            [
                "Corbridge"
            ],
            [
                "Farringford"
            ],
            [
                "Dromonby"
            ],
            [
                "Ariadne"
            ],
            [
                "Appam"
            ],
            [
                "Clan McTavish"
            ]
        ]
    },
    {
        "question": "What are the names of ships that were involved in a mission launched after 1928?",
        "query": "MATCH (T1:`ship_mission.mission`)-[]-(T2:`ship_mission.ship`)\nWHERE T1.Launched_Year > 1928\nRETURN T2.Name",
        "db_id": "ship_mission",
        "answers": [
            [
                "Corbridge"
            ],
            [
                "Farringford"
            ],
            [
                "Dromonby"
            ],
            [
                "Ariadne"
            ],
            [
                "Appam"
            ],
            [
                "Clan McTavish"
            ]
        ]
    },
    {
        "question": "Show the distinct fate of missions that involve ships with nationality \"United States\"",
        "query": "MATCH (T1:`ship_mission.mission`)-[]-(T2:`ship_mission.ship`)\nWHERE T2.Nationality = 'United States'\nRETURN DISTINCT T1.Fate",
        "db_id": "ship_mission",
        "answers": [
            [
                "Decommissioned 1950"
            ],
            [
                "Decommissioned 1959"
            ],
            [
                "Lost (burned and sunk) 1933"
            ]
        ]
    },
    {
        "question": "What are the different fates of the mission that involved ships from the United States?",
        "query": "MATCH (T1:`ship_mission.mission`)-[]-(T2:`ship_mission.ship`)\nWHERE T2.Nationality = 'United States'\nRETURN DISTINCT T1.Fate",
        "db_id": "ship_mission",
        "answers": [
            [
                "Decommissioned 1950"
            ],
            [
                "Decommissioned 1959"
            ],
            [
                "Lost (burned and sunk) 1933"
            ]
        ]
    },
    {
        "question": "List the name of ships that are not involved in any mission",
        "query": "MATCH (ship:`ship_mission.ship`)\nWHERE NOT (ship:`ship_mission.ship`)-[]-(:`ship_mission.mission`)\nRETURN ship.Name",
        "db_id": "ship_mission",
        "answers": [
            [
                "Author"
            ]
        ]
    },
    {
        "question": "What are the names of the ships that are not involved in any missions?",
        "query": "MATCH (ship:`ship_mission.ship`)\nWHERE NOT (ship:`ship_mission.ship`)-[]-(:`ship_mission.mission`)\nRETURN ship.Name",
        "db_id": "ship_mission",
        "answers": [
            [
                "Author"
            ]
        ]
    },
    {
        "question": "Find the number of students in total.",
        "query": "MATCH (list:`student_1.list`)\nRETURN count(*)",
        "db_id": "student_1",
        "answers": [
            [
                60
            ]
        ]
    },
    {
        "question": "How many students are there?",
        "query": "MATCH (list:`student_1.list`)\nRETURN count(*)",
        "db_id": "student_1",
        "answers": [
            [
                60
            ]
        ]
    },
    {
        "question": "Find the last names of students studying in room 111.",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Classroom = 111\nRETURN list.LastName",
        "db_id": "student_1",
        "answers": [
            [
                "DANESE"
            ],
            [
                "GOODNOE"
            ],
            [
                "LEAPER"
            ],
            [
                "FULVIO"
            ]
        ]
    },
    {
        "question": "What are the last names of students in room 111?",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Classroom = 111\nRETURN list.LastName",
        "db_id": "student_1",
        "answers": [
            [
                "DANESE"
            ],
            [
                "GOODNOE"
            ],
            [
                "LEAPER"
            ],
            [
                "FULVIO"
            ]
        ]
    },
    {
        "question": "Find the first names of students studying in room 108.",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Classroom = 108\nRETURN list.FirstName",
        "db_id": "student_1",
        "answers": [
            [
                " LYNNETTE"
            ],
            [
                " BRITT"
            ]
        ]
    },
    {
        "question": "What are the first names of students in room 108?",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Classroom = 108\nRETURN list.FirstName",
        "db_id": "student_1",
        "answers": [
            [
                " LYNNETTE"
            ],
            [
                " BRITT"
            ]
        ]
    },
    {
        "question": "What are the first names of students studying in room 107?",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Classroom = 107\nRETURN DISTINCT list.FirstName",
        "db_id": "student_1",
        "answers": [
            [
                " SHERWOOD"
            ],
            [
                " ROBBY"
            ],
            [
                " CRYSTA"
            ],
            [
                " VERTIE"
            ],
            [
                " CHRISSY"
            ],
            [
                " JORDON"
            ]
        ]
    },
    {
        "question": "List the first names of all the students in room 107.",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Classroom = 107\nRETURN DISTINCT list.FirstName",
        "db_id": "student_1",
        "answers": [
            [
                " SHERWOOD"
            ],
            [
                " ROBBY"
            ],
            [
                " CRYSTA"
            ],
            [
                " VERTIE"
            ],
            [
                " CHRISSY"
            ],
            [
                " JORDON"
            ]
        ]
    },
    {
        "question": "For each classroom report the grade that is taught in it. Report just the classroom number and the grade number.",
        "query": "MATCH (list:`student_1.list`)\nRETURN DISTINCT list.Classroom,list.Grade",
        "db_id": "student_1",
        "answers": [
            [
                101,
                2
            ],
            [
                112,
                6
            ],
            [
                107,
                3
            ],
            [
                105,
                0
            ],
            [
                111,
                4
            ],
            [
                102,
                1
            ],
            [
                104,
                0
            ],
            [
                109,
                5
            ],
            [
                110,
                4
            ],
            [
                103,
                1
            ],
            [
                106,
                0
            ],
            [
                108,
                4
            ]
        ]
    },
    {
        "question": "What are the grade number and classroom number of each class in the list?",
        "query": "MATCH (list:`student_1.list`)\nRETURN DISTINCT list.Classroom,list.Grade",
        "db_id": "student_1",
        "answers": [
            [
                101,
                2
            ],
            [
                112,
                6
            ],
            [
                107,
                3
            ],
            [
                105,
                0
            ],
            [
                111,
                4
            ],
            [
                102,
                1
            ],
            [
                104,
                0
            ],
            [
                109,
                5
            ],
            [
                110,
                4
            ],
            [
                103,
                1
            ],
            [
                106,
                0
            ],
            [
                108,
                4
            ]
        ]
    },
    {
        "question": "Which grade is studying in classroom 103?",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Classroom = 103\nRETURN DISTINCT list.Grade",
        "db_id": "student_1",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "Find the grade taught in classroom 103.",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Classroom = 103\nRETURN DISTINCT list.Grade",
        "db_id": "student_1",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "Find the grade studying in room 105.",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Classroom = 105\nRETURN DISTINCT list.Grade",
        "db_id": "student_1",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Which grade is studying in room 105?",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Classroom = 105\nRETURN DISTINCT list.Grade",
        "db_id": "student_1",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Which classrooms are used by grade 4?",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Grade = 4\nRETURN DISTINCT list.Classroom",
        "db_id": "student_1",
        "answers": [
            [
                111
            ],
            [
                110
            ],
            [
                108
            ]
        ]
    },
    {
        "question": "Find the classrooms in which grade 4 is studying.",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Grade = 4\nRETURN DISTINCT list.Classroom",
        "db_id": "student_1",
        "answers": [
            [
                111
            ],
            [
                110
            ],
            [
                108
            ]
        ]
    },
    {
        "question": "Which classrooms are used by grade 5?",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Grade = 5\nRETURN DISTINCT list.Classroom",
        "db_id": "student_1",
        "answers": [
            [
                109
            ]
        ]
    },
    {
        "question": "Show me the classrooms grade 5 is using.",
        "query": "MATCH (list:`student_1.list`)\nWHERE list.Grade = 5\nRETURN DISTINCT list.Classroom",
        "db_id": "student_1",
        "answers": [
            [
                109
            ]
        ]
    },
    {
        "question": "Find the first names of all the teachers that teach in classroom 110.",
        "query": "MATCH (teachers:`student_1.teachers`)\nWHERE teachers.Classroom = 110\nRETURN teachers.FirstName",
        "db_id": "student_1",
        "answers": [
            [
                " GEORGETTA"
            ]
        ]
    },
    {
        "question": "Which teachers teach in classroom 110? Give me their first names.",
        "query": "MATCH (teachers:`student_1.teachers`)\nWHERE teachers.Classroom = 110\nRETURN teachers.FirstName",
        "db_id": "student_1",
        "answers": [
            [
                " GEORGETTA"
            ]
        ]
    },
    {
        "question": "Find the last names of teachers teaching in classroom 109.",
        "query": "MATCH (teachers:`student_1.teachers`)\nWHERE teachers.Classroom = 109\nRETURN teachers.LastName",
        "db_id": "student_1",
        "answers": [
            [
                "KAWA"
            ]
        ]
    },
    {
        "question": "Which teachers teach in classroom 109? Give me their last names.",
        "query": "MATCH (teachers:`student_1.teachers`)\nWHERE teachers.Classroom = 109\nRETURN teachers.LastName",
        "db_id": "student_1",
        "answers": [
            [
                "KAWA"
            ]
        ]
    },
    {
        "question": "Report the first name and last name of all the teachers.",
        "query": "MATCH (teachers:`student_1.teachers`)\nRETURN DISTINCT teachers.FirstName,teachers.LastName",
        "db_id": "student_1",
        "answers": [
            [
                " MIN",
                "MACROSTIE"
            ],
            [
                " JEROME",
                "COVIN"
            ],
            [
                " OTHA",
                "MOYER"
            ],
            [
                " JERLENE",
                "NIBLER"
            ],
            [
                " KIRK",
                "MARROTTE"
            ],
            [
                " LEIA",
                "TARRING"
            ],
            [
                " CHARMAINE",
                "URSERY"
            ],
            [
                " LORIA",
                "ONDERSMA"
            ],
            [
                " GORDON",
                "KAWA"
            ],
            [
                " GEORGETTA",
                "SUMPTION"
            ],
            [
                " BILLIE",
                "KRIENER"
            ],
            [
                " ALFREDA",
                "SUGAI"
            ]
        ]
    },
    {
        "question": "What are the first name and last name of all the teachers?",
        "query": "MATCH (teachers:`student_1.teachers`)\nRETURN DISTINCT teachers.FirstName,teachers.LastName",
        "db_id": "student_1",
        "answers": [
            [
                " MIN",
                "MACROSTIE"
            ],
            [
                " JEROME",
                "COVIN"
            ],
            [
                " OTHA",
                "MOYER"
            ],
            [
                " JERLENE",
                "NIBLER"
            ],
            [
                " KIRK",
                "MARROTTE"
            ],
            [
                " LEIA",
                "TARRING"
            ],
            [
                " CHARMAINE",
                "URSERY"
            ],
            [
                " LORIA",
                "ONDERSMA"
            ],
            [
                " GORDON",
                "KAWA"
            ],
            [
                " GEORGETTA",
                "SUMPTION"
            ],
            [
                " BILLIE",
                "KRIENER"
            ],
            [
                " ALFREDA",
                "SUGAI"
            ]
        ]
    },
    {
        "question": "Report the first name and last name of all the students.",
        "query": "MATCH (list:`student_1.list`)\nRETURN DISTINCT list.FirstName,list.LastName",
        "db_id": "student_1",
        "answers": [
            [
                " MAUDE",
                "CAR"
            ],
            [
                " STORMY",
                "KRISTENSEN"
            ],
            [
                " SHERWOOD",
                "VANDERWOUDE"
            ],
            [
                " ISMAEL",
                "NOGODA"
            ],
            [
                " JANEE",
                "DANESE"
            ],
            [
                " PATRINA",
                "AMY"
            ],
            [
                " SHANEL",
                "PREHM"
            ],
            [
                " EMILE",
                "GRUNIN"
            ],
            [
                " TAMI",
                "GELL"
            ],
            [
                " RAY",
                "MADLOCK"
            ],
            [
                " DARLEEN",
                "SUDA"
            ],
            [
                " SHERMAN",
                "DROP"
            ],
            [
                " ROBBY",
                "PINNELL"
            ],
            [
                " EVELINA",
                "BROMLEY"
            ],
            [
                " ANIKA",
                "YUEN"
            ],
            [
                " HILMA",
                "BUSTILLOS"
            ],
            [
                " GAYLE",
                "GOODNOE"
            ],
            [
                " MEL",
                "BALBOA"
            ],
            [
                " REYNALDO",
                "BARTKUS"
            ],
            [
                " CRYSTA",
                "GROENEWEG"
            ],
            [
                " THEO",
                "HOUTCHENS"
            ],
            [
                " AL",
                "GERSTEIN"
            ],
            [
                " CHET",
                "MACIAG"
            ],
            [
                " TOBIE",
                "SAADE"
            ],
            [
                " FRANKLYN",
                "BRINE"
            ],
            [
                " CHANTAL",
                "HANNEMANN"
            ],
            [
                " BENNIE",
                "BYRUM"
            ],
            [
                " JODY",
                "NETZEL"
            ],
            [
                " COLLIN",
                "VANVLIET"
            ],
            [
                " GUILLERMINA",
                "HONES"
            ],
            [
                " JEFFRY",
                "FLACHS"
            ],
            [
                " JULIENNE",
                "GRABILL"
            ],
            [
                " VERTIE",
                "AREHART"
            ],
            [
                " MARCUS",
                "RUNKLE"
            ],
            [
                " KITTIE",
                "MOWATT"
            ],
            [
                " LANCE",
                "HOOSOCK"
            ],
            [
                " ADRIAN",
                "LEAPER"
            ],
            [
                " RAYLENE",
                "PASSEY"
            ],
            [
                " SHERON",
                "NAKAHARA"
            ],
            [
                " SHIRLEY",
                "STIRE"
            ],
            [
                " CYRUS",
                "RODDEY"
            ],
            [
                " CAREY",
                "CRANMER"
            ],
            [
                " LANELLE",
                "SCHUTZE"
            ],
            [
                " ELTON",
                "FULVIO"
            ],
            [
                " LYNNETTE",
                "HOESCHEN"
            ],
            [
                " BRODERICK",
                "SOLOMAN"
            ],
            [
                " SUMMER",
                "LAPLANT"
            ],
            [
                " BRITT",
                "LUSKEY"
            ],
            [
                " ELVIRA",
                "JAGNEAUX"
            ],
            [
                " SHANAE",
                "BIBB"
            ],
            [
                " DELORAS",
                "WIRTZFELD"
            ],
            [
                " RODGER",
                "RANSLER"
            ],
            [
                " CHRISSY",
                "NABOZNY"
            ],
            [
                " BETHEL",
                "ATWOOD"
            ],
            [
                " NOVELLA",
                "CHIARAMONTE"
            ],
            [
                " KERI",
                "TRAYWICK"
            ],
            [
                " ANTONY",
                "BRIGHTBILL"
            ],
            [
                " TAWANNA",
                "HUANG"
            ],
            [
                " JORDON",
                "SANTORY"
            ],
            [
                " GAYLE",
                "LARKINS"
            ]
        ]
    },
    {
        "question": "Show each student's first name and last name.",
        "query": "MATCH (list:`student_1.list`)\nRETURN DISTINCT list.FirstName,list.LastName",
        "db_id": "student_1",
        "answers": [
            [
                " MAUDE",
                "CAR"
            ],
            [
                " STORMY",
                "KRISTENSEN"
            ],
            [
                " SHERWOOD",
                "VANDERWOUDE"
            ],
            [
                " ISMAEL",
                "NOGODA"
            ],
            [
                " JANEE",
                "DANESE"
            ],
            [
                " PATRINA",
                "AMY"
            ],
            [
                " SHANEL",
                "PREHM"
            ],
            [
                " EMILE",
                "GRUNIN"
            ],
            [
                " TAMI",
                "GELL"
            ],
            [
                " RAY",
                "MADLOCK"
            ],
            [
                " DARLEEN",
                "SUDA"
            ],
            [
                " SHERMAN",
                "DROP"
            ],
            [
                " ROBBY",
                "PINNELL"
            ],
            [
                " EVELINA",
                "BROMLEY"
            ],
            [
                " ANIKA",
                "YUEN"
            ],
            [
                " HILMA",
                "BUSTILLOS"
            ],
            [
                " GAYLE",
                "GOODNOE"
            ],
            [
                " MEL",
                "BALBOA"
            ],
            [
                " REYNALDO",
                "BARTKUS"
            ],
            [
                " CRYSTA",
                "GROENEWEG"
            ],
            [
                " THEO",
                "HOUTCHENS"
            ],
            [
                " AL",
                "GERSTEIN"
            ],
            [
                " CHET",
                "MACIAG"
            ],
            [
                " TOBIE",
                "SAADE"
            ],
            [
                " FRANKLYN",
                "BRINE"
            ],
            [
                " CHANTAL",
                "HANNEMANN"
            ],
            [
                " BENNIE",
                "BYRUM"
            ],
            [
                " JODY",
                "NETZEL"
            ],
            [
                " COLLIN",
                "VANVLIET"
            ],
            [
                " GUILLERMINA",
                "HONES"
            ],
            [
                " JEFFRY",
                "FLACHS"
            ],
            [
                " JULIENNE",
                "GRABILL"
            ],
            [
                " VERTIE",
                "AREHART"
            ],
            [
                " MARCUS",
                "RUNKLE"
            ],
            [
                " KITTIE",
                "MOWATT"
            ],
            [
                " LANCE",
                "HOOSOCK"
            ],
            [
                " ADRIAN",
                "LEAPER"
            ],
            [
                " RAYLENE",
                "PASSEY"
            ],
            [
                " SHERON",
                "NAKAHARA"
            ],
            [
                " SHIRLEY",
                "STIRE"
            ],
            [
                " CYRUS",
                "RODDEY"
            ],
            [
                " CAREY",
                "CRANMER"
            ],
            [
                " LANELLE",
                "SCHUTZE"
            ],
            [
                " ELTON",
                "FULVIO"
            ],
            [
                " LYNNETTE",
                "HOESCHEN"
            ],
            [
                " BRODERICK",
                "SOLOMAN"
            ],
            [
                " SUMMER",
                "LAPLANT"
            ],
            [
                " BRITT",
                "LUSKEY"
            ],
            [
                " ELVIRA",
                "JAGNEAUX"
            ],
            [
                " SHANAE",
                "BIBB"
            ],
            [
                " DELORAS",
                "WIRTZFELD"
            ],
            [
                " RODGER",
                "RANSLER"
            ],
            [
                " CHRISSY",
                "NABOZNY"
            ],
            [
                " BETHEL",
                "ATWOOD"
            ],
            [
                " NOVELLA",
                "CHIARAMONTE"
            ],
            [
                " KERI",
                "TRAYWICK"
            ],
            [
                " ANTONY",
                "BRIGHTBILL"
            ],
            [
                " TAWANNA",
                "HUANG"
            ],
            [
                " JORDON",
                "SANTORY"
            ],
            [
                " GAYLE",
                "LARKINS"
            ]
        ]
    },
    {
        "question": "How many students does LORIA ONDERSMA teaches?",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T2.FirstName = 'LORIA' AND T2.LastName = 'ONDERSMA'\nRETURN count(*)",
        "db_id": "student_1",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Count the number of students the teacher LORIA ONDERSMA teaches.",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T2.FirstName = 'LORIA' AND T2.LastName = 'ONDERSMA'\nRETURN count(*)",
        "db_id": "student_1",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many students does KAWA GORDON teaches?",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T2.FirstName = 'KAWA' AND T2.LastName = 'GORDON'\nRETURN count(*)",
        "db_id": "student_1",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Find the number of students taught by the teacher KAWA GORDON.",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T2.FirstName = 'KAWA' AND T2.LastName = 'GORDON'\nRETURN count(*)",
        "db_id": "student_1",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Find the number of students taught by TARRING LEIA.",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T2.FirstName = 'TARRING' AND T2.LastName = 'LEIA'\nRETURN count(*)",
        "db_id": "student_1",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many students are taught by teacher TARRING LEIA?",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T2.FirstName = 'TARRING' AND T2.LastName = 'LEIA'\nRETURN count(*)",
        "db_id": "student_1",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many teachers does the student named CHRISSY NABOZNY have?",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T1.FirstName = 'CHRISSY' AND T1.LastName = 'NABOZNY'\nRETURN count(*)",
        "db_id": "student_1",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Find the number of teachers who teach the student called CHRISSY NABOZNY.",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T1.FirstName = 'CHRISSY' AND T1.LastName = 'NABOZNY'\nRETURN count(*)",
        "db_id": "student_1",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many teachers does the student named MADLOCK RAY have?",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T1.FirstName = 'MADLOCK' AND T1.LastName = 'RAY'\nRETURN count(*)",
        "db_id": "student_1",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Find the number of teachers who teach the student called MADLOCK RAY.",
        "query": "MATCH (T1:`student_1.list`)-[]-(T2:`student_1.teachers`)\nWHERE T1.FirstName = 'MADLOCK' AND T1.LastName = 'RAY'\nRETURN count(*)",
        "db_id": "student_1",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Which classroom has the most students?",
        "query": "MATCH (list:`student_1.list`)\nWITH count(list.Classroom) AS count, list.Classroom AS Classroom\nRETURN Classroom\nORDER BY count DESC\nLIMIT 1",
        "db_id": "student_1",
        "answers": [
            [
                109
            ]
        ]
    },
    {
        "question": "Find the classroom that the most students use.",
        "query": "MATCH (list:`student_1.list`)\nWITH count(list.Classroom) AS count, list.Classroom AS Classroom\nRETURN Classroom\nORDER BY count DESC\nLIMIT 1",
        "db_id": "student_1",
        "answers": [
            [
                109
            ]
        ]
    },
    {
        "question": "Report the number of students in each classroom.",
        "query": "MATCH (list:`student_1.list`)\nWITH count(list.Classroom) AS count, list.Classroom AS Classroom\nRETURN Classroom,count",
        "db_id": "student_1",
        "answers": [
            [
                101,
                3
            ],
            [
                112,
                3
            ],
            [
                107,
                6
            ],
            [
                105,
                5
            ],
            [
                111,
                4
            ],
            [
                102,
                7
            ],
            [
                104,
                4
            ],
            [
                109,
                8
            ],
            [
                110,
                6
            ],
            [
                103,
                5
            ],
            [
                106,
                7
            ],
            [
                108,
                2
            ]
        ]
    },
    {
        "question": "For each classroom, show the classroom number and find how many students are using it.",
        "query": "MATCH (list:`student_1.list`)\nWITH count(list.Classroom) AS count, list.Classroom AS Classroom\nRETURN Classroom,count",
        "db_id": "student_1",
        "answers": [
            [
                101,
                3
            ],
            [
                112,
                3
            ],
            [
                107,
                6
            ],
            [
                105,
                5
            ],
            [
                111,
                4
            ],
            [
                102,
                7
            ],
            [
                104,
                4
            ],
            [
                109,
                8
            ],
            [
                110,
                6
            ],
            [
                103,
                5
            ],
            [
                106,
                7
            ],
            [
                108,
                2
            ]
        ]
    },
    {
        "question": "Find the number of students in one classroom.",
        "query": "MATCH (list:`student_1.list`)\nWITH count(list.Classroom) AS count, list.Classroom AS Classroom\nRETURN count,Classroom",
        "db_id": "student_1",
        "answers": [
            [
                3,
                101
            ],
            [
                3,
                112
            ],
            [
                6,
                107
            ],
            [
                5,
                105
            ],
            [
                4,
                111
            ],
            [
                7,
                102
            ],
            [
                4,
                104
            ],
            [
                8,
                109
            ],
            [
                6,
                110
            ],
            [
                5,
                103
            ],
            [
                7,
                106
            ],
            [
                2,
                108
            ]
        ]
    },
    {
        "question": "How many students does one classroom have?",
        "query": "MATCH (list:`student_1.list`)\nWITH count(list.Classroom) AS count, list.Classroom AS Classroom\nRETURN count,Classroom",
        "db_id": "student_1",
        "answers": [
            [
                3,
                101
            ],
            [
                3,
                112
            ],
            [
                6,
                107
            ],
            [
                5,
                105
            ],
            [
                4,
                111
            ],
            [
                7,
                102
            ],
            [
                4,
                104
            ],
            [
                8,
                109
            ],
            [
                6,
                110
            ],
            [
                5,
                103
            ],
            [
                7,
                106
            ],
            [
                2,
                108
            ]
        ]
    },
    {
        "question": "How many companies are headquartered in the US?",
        "query": "MATCH (company:`company_employee.company`)\nWHERE company.Headquarters = 'USA'\nRETURN count(*)",
        "db_id": "company_employee",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "List the names of companies by ascending number of sales.",
        "query": "MATCH (company:`company_employee.company`)\nRETURN company.Name\nORDER BY company.Sales_in_Billion ASC",
        "db_id": "company_employee",
        "answers": [
            [
                "Agricultural Bank of China"
            ],
            [
                "China Construction Bank"
            ],
            [
                "Industrial and Commercial Bank of China"
            ],
            [
                "Wells Fargo"
            ],
            [
                "HSBC"
            ],
            [
                "Citigroup"
            ],
            [
                "JPMorgan Chase"
            ],
            [
                "Gazprom"
            ],
            [
                "Berkshire Hathaway"
            ],
            [
                "Petrobras"
            ],
            [
                "General Electric"
            ],
            [
                "Total"
            ],
            [
                "Volkswagen Group"
            ],
            [
                "Chevron"
            ],
            [
                "PetroChina"
            ],
            [
                "BP"
            ],
            [
                "ExxonMobil"
            ],
            [
                "Walmart"
            ],
            [
                "Royal Dutch Shell"
            ]
        ]
    },
    {
        "question": "What are the headquarters and industries of all companies?",
        "query": "MATCH (company:`company_employee.company`)\nRETURN company.Headquarters,company.Industry",
        "db_id": "company_employee",
        "answers": [
            [
                "USA",
                "Oil and gas"
            ],
            [
                "USA",
                "Banking"
            ],
            [
                "USA",
                "Conglomerate"
            ],
            [
                "Netherlands",
                "Oil and gas"
            ],
            [
                "China",
                "Banking"
            ],
            [
                "UK",
                "Banking"
            ],
            [
                "China",
                "Oil and gas"
            ],
            [
                "USA",
                "Conglomerate"
            ],
            [
                "USA",
                "Banking"
            ],
            [
                "Brazil",
                "Oil and gas"
            ],
            [
                "UK",
                "Oil and gas"
            ],
            [
                "USA",
                "Oil and gas"
            ],
            [
                "China",
                "Banking"
            ],
            [
                "USA",
                "Banking"
            ],
            [
                "Russia",
                "Oil and gas"
            ],
            [
                "USA",
                "Retailing"
            ],
            [
                "Germany",
                "Automotive"
            ],
            [
                "France",
                "Oil and gas"
            ],
            [
                "China",
                "Banking"
            ]
        ]
    },
    {
        "question": "Show the names of companies in the banking or retailing industry?",
        "query": "MATCH (company:`company_employee.company`)\nWHERE company.Industry = 'Banking' OR company.Industry = 'Retailing'\nRETURN company.Name",
        "db_id": "company_employee",
        "answers": [
            [
                "JPMorgan Chase"
            ],
            [
                "Industrial and Commercial Bank of China"
            ],
            [
                "HSBC"
            ],
            [
                "Wells Fargo"
            ],
            [
                "China Construction Bank"
            ],
            [
                "Citigroup"
            ],
            [
                "Walmart"
            ],
            [
                "Agricultural Bank of China"
            ]
        ]
    },
    {
        "question": "What is the maximum and minimum market value of companies?",
        "query": "MATCH (company:`company_employee.company`)\nRETURN max(company.Market_Value_in_Billion),min(company.Market_Value_in_Billion)",
        "db_id": "company_employee",
        "answers": [
            [
                407.4,
                79.5
            ]
        ]
    },
    {
        "question": "What is the headquarter of the company with the largest sales?",
        "query": "MATCH (company:`company_employee.company`)\nRETURN company.Headquarters\nORDER BY company.Sales_in_Billion DESC\nLIMIT 1",
        "db_id": "company_employee",
        "answers": [
            [
                "Netherlands"
            ]
        ]
    },
    {
        "question": "Show the different headquarters and number of companies at each headquarter.",
        "query": "MATCH (company:`company_employee.company`)\nWITH company.Headquarters AS Headquarters, count(company.Headquarters) AS count\nRETURN Headquarters,count",
        "db_id": "company_employee",
        "answers": [
            [
                "USA",
                8
            ],
            [
                "Netherlands",
                1
            ],
            [
                "China",
                4
            ],
            [
                "UK",
                2
            ],
            [
                "Brazil",
                1
            ],
            [
                "Russia",
                1
            ],
            [
                "Germany",
                1
            ],
            [
                "France",
                1
            ]
        ]
    },
    {
        "question": "Show the most common headquarter for companies.",
        "query": "MATCH (company:`company_employee.company`)\nWITH company.Headquarters AS Headquarters, count(company.Headquarters) AS count\nRETURN Headquarters\nORDER BY count DESC\nLIMIT 1",
        "db_id": "company_employee",
        "answers": [
            [
                "USA"
            ]
        ]
    },
    {
        "question": "Show the headquarters that have at least two companies.",
        "query": "MATCH (company:`company_employee.company`)\nWITH count(*) AS count, company.Headquarters AS Headquarters\nWHERE count  >= 2\nRETURN Headquarters",
        "db_id": "company_employee",
        "answers": [
            [
                "USA"
            ],
            [
                "China"
            ],
            [
                "UK"
            ]
        ]
    },
    {
        "question": "List the names of people that are not employed by any company",
        "query": "MATCH (people:`company_employee.people`)\nWHERE NOT (people:`company_employee.people`)-[:`company_employee.employment`]-()\nRETURN people.Name",
        "db_id": "company_employee",
        "answers": [
            [
                "David Butler"
            ],
            [
                "Tim Naegeli"
            ]
        ]
    },
    {
        "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "query": "MATCH (company:`company_employee.company`)\nWHERE company.Sales_in_Billion > 200\nRETURN company.Name\nORDER BY company.Sales_in_Billion,company.Profits_in_Billion DESC",
        "db_id": "company_employee",
        "answers": [
            [
                "Total"
            ],
            [
                "Volkswagen Group"
            ],
            [
                "Chevron"
            ],
            [
                "PetroChina"
            ],
            [
                "BP"
            ],
            [
                "ExxonMobil"
            ],
            [
                "Walmart"
            ],
            [
                "Royal Dutch Shell"
            ]
        ]
    },
    {
        "question": "How many film are there?",
        "query": "MATCH (film:`film_rank.film`)\nRETURN count(*)",
        "db_id": "film_rank",
        "answers": [
            [
                13
            ]
        ]
    },
    {
        "question": "Count the number of films.",
        "query": "MATCH (film:`film_rank.film`)\nRETURN count(*)",
        "db_id": "film_rank",
        "answers": [
            [
                13
            ]
        ]
    },
    {
        "question": "List the distinct director of all films.",
        "query": "MATCH (film:`film_rank.film`)\nRETURN DISTINCT film.Director",
        "db_id": "film_rank",
        "answers": [
            [
                "Steven Spielberg"
            ],
            [
                "Sydney Pollack"
            ],
            [
                "Taylor Hackford"
            ],
            [
                "Sylvester Stallone"
            ],
            [
                "Bob Clark"
            ],
            [
                "Nicholas Meyer"
            ],
            [
                "Walter Hill"
            ],
            [
                "Tobe Hooper"
            ],
            [
                "Colin Higgins"
            ],
            [
                "John Huston"
            ],
            [
                "Sidney Lumet"
            ],
            [
                "Richard Attenborough"
            ],
            [
                "Ted Kotcheff"
            ]
        ]
    },
    {
        "question": "What are the different film Directors?",
        "query": "MATCH (film:`film_rank.film`)\nRETURN DISTINCT film.Director",
        "db_id": "film_rank",
        "answers": [
            [
                "Steven Spielberg"
            ],
            [
                "Sydney Pollack"
            ],
            [
                "Taylor Hackford"
            ],
            [
                "Sylvester Stallone"
            ],
            [
                "Bob Clark"
            ],
            [
                "Nicholas Meyer"
            ],
            [
                "Walter Hill"
            ],
            [
                "Tobe Hooper"
            ],
            [
                "Colin Higgins"
            ],
            [
                "John Huston"
            ],
            [
                "Sidney Lumet"
            ],
            [
                "Richard Attenborough"
            ],
            [
                "Ted Kotcheff"
            ]
        ]
    },
    {
        "question": "What is the average ticket sales gross in dollars of films?",
        "query": "MATCH (film:`film_rank.film`)\nRETURN avg(film.Gross_in_dollar)",
        "db_id": "film_rank",
        "answers": [
            [
                114827242.38461539
            ]
        ]
    },
    {
        "question": "Return the average gross sales in dollars across all films.",
        "query": "MATCH (film:`film_rank.film`)\nRETURN avg(film.Gross_in_dollar)",
        "db_id": "film_rank",
        "answers": [
            [
                114827242.38461539
            ]
        ]
    },
    {
        "question": "What are the low and high estimates of film markets?",
        "query": "MATCH (film_market_estimation:`film_rank.film_market_estimation`)\nRETURN film_market_estimation.Low_Estimate,film_market_estimation.High_Estimate",
        "db_id": "film_rank",
        "answers": [
            [
                80000.0,
                80400.0
            ],
            [
                8000.0,
                8000.0
            ],
            [
                3000.0,
                80400.0
            ],
            [
                960.0,
                960.0
            ],
            [
                913.0,
                913.0
            ],
            [
                300.0,
                1000.0
            ],
            [
                53.0,
                53.0
            ],
            [
                39.0,
                39.0
            ],
            [
                16.0,
                16.0
            ]
        ]
    },
    {
        "question": "Return the low and high estimates for all film markets.",
        "query": "MATCH (film_market_estimation:`film_rank.film_market_estimation`)\nRETURN film_market_estimation.Low_Estimate,film_market_estimation.High_Estimate",
        "db_id": "film_rank",
        "answers": [
            [
                80000.0,
                80400.0
            ],
            [
                8000.0,
                8000.0
            ],
            [
                3000.0,
                80400.0
            ],
            [
                960.0,
                960.0
            ],
            [
                913.0,
                913.0
            ],
            [
                300.0,
                1000.0
            ],
            [
                53.0,
                53.0
            ],
            [
                39.0,
                39.0
            ],
            [
                16.0,
                16.0
            ]
        ]
    },
    {
        "question": "What are the types of film market estimations in year 1995?",
        "query": "MATCH (film_market_estimation:`film_rank.film_market_estimation`)\nWHERE film_market_estimation.Year = 1995\nRETURN film_market_estimation.Type",
        "db_id": "film_rank",
        "answers": [
            [
                "Mass suicide"
            ]
        ]
    },
    {
        "question": "Return the types of film market estimations in 1995.",
        "query": "MATCH (film_market_estimation:`film_rank.film_market_estimation`)\nWHERE film_market_estimation.Year = 1995\nRETURN film_market_estimation.Type",
        "db_id": "film_rank",
        "answers": [
            [
                "Mass suicide"
            ]
        ]
    },
    {
        "question": "What are the maximum and minimum number of cities in all markets.",
        "query": "MATCH (market:`film_rank.market`)\nRETURN max(market.Number_cities),min(market.Number_cities)",
        "db_id": "film_rank",
        "answers": [
            [
                700,
                209
            ]
        ]
    },
    {
        "question": "Return the maximum and minimum number of cities across all markets.",
        "query": "MATCH (market:`film_rank.market`)\nRETURN max(market.Number_cities),min(market.Number_cities)",
        "db_id": "film_rank",
        "answers": [
            [
                700,
                209
            ]
        ]
    },
    {
        "question": "How many markets have number of cities smaller than 300?",
        "query": "MATCH (market:`film_rank.market`)\nWHERE market.Number_cities < 300\nRETURN count(*)",
        "db_id": "film_rank",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Count the number of markets that have a number of cities lower than 300.",
        "query": "MATCH (market:`film_rank.market`)\nWHERE market.Number_cities < 300\nRETURN count(*)",
        "db_id": "film_rank",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "List all countries of markets in ascending alphabetical order.",
        "query": "MATCH (market:`film_rank.market`)\nRETURN market.Country\nORDER BY market.Country ASC",
        "db_id": "film_rank",
        "answers": [
            [
                "China"
            ],
            [
                "France"
            ],
            [
                "Japan"
            ],
            [
                "Poland"
            ],
            [
                "Russia"
            ],
            [
                "USA"
            ]
        ]
    },
    {
        "question": "What are the countries for each market, ordered alphabetically?",
        "query": "MATCH (market:`film_rank.market`)\nRETURN market.Country\nORDER BY market.Country ASC",
        "db_id": "film_rank",
        "answers": [
            [
                "China"
            ],
            [
                "France"
            ],
            [
                "Japan"
            ],
            [
                "Poland"
            ],
            [
                "Russia"
            ],
            [
                "USA"
            ]
        ]
    },
    {
        "question": "List all countries of markets in descending order of number of cities.",
        "query": "MATCH (market:`film_rank.market`)\nRETURN market.Country\nORDER BY market.Number_cities DESC",
        "db_id": "film_rank",
        "answers": [
            [
                "USA"
            ],
            [
                "China"
            ],
            [
                "Poland"
            ],
            [
                "Russia"
            ],
            [
                "France"
            ],
            [
                "Japan"
            ]
        ]
    },
    {
        "question": "What are the countries for each market ordered by decreasing number of cities?",
        "query": "MATCH (market:`film_rank.market`)\nRETURN market.Country\nORDER BY market.Number_cities DESC",
        "db_id": "film_rank",
        "answers": [
            [
                "USA"
            ],
            [
                "China"
            ],
            [
                "Poland"
            ],
            [
                "Russia"
            ],
            [
                "France"
            ],
            [
                "Japan"
            ]
        ]
    },
    {
        "question": "List the studios of each film and the number of films produced by that studio.",
        "query": "MATCH (film:`film_rank.film`)\nWITH count(film.Studio) AS count, film.Studio AS Studio\nRETURN Studio,count",
        "db_id": "film_rank",
        "answers": [
            [
                "Universal",
                1
            ],
            [
                "Columbia",
                2
            ],
            [
                "Paramount / Lorimar",
                1
            ],
            [
                "United Artists",
                1
            ],
            [
                "20th Century Fox",
                2
            ],
            [
                "Paramount",
                2
            ],
            [
                "MGM",
                1
            ],
            [
                "Universal / RKO",
                1
            ],
            [
                "Columbia / Rastar",
                1
            ],
            [
                "Orion / Carolco",
                1
            ]
        ]
    },
    {
        "question": "How films are produced by each studio?",
        "query": "MATCH (film:`film_rank.film`)\nWITH count(film.Studio) AS count, film.Studio AS Studio\nRETURN Studio,count",
        "db_id": "film_rank",
        "answers": [
            [
                "Universal",
                1
            ],
            [
                "Columbia",
                2
            ],
            [
                "Paramount / Lorimar",
                1
            ],
            [
                "United Artists",
                1
            ],
            [
                "20th Century Fox",
                2
            ],
            [
                "Paramount",
                2
            ],
            [
                "MGM",
                1
            ],
            [
                "Universal / RKO",
                1
            ],
            [
                "Columbia / Rastar",
                1
            ],
            [
                "Orion / Carolco",
                1
            ]
        ]
    },
    {
        "question": "List the names of studios that have at least two films.",
        "query": "MATCH (film:`film_rank.film`)\nWITH count(*) AS count, film.Studio AS Studio\nWHERE count  >= 2\nRETURN Studio",
        "db_id": "film_rank",
        "answers": [
            [
                "Columbia"
            ],
            [
                "20th Century Fox"
            ],
            [
                "Paramount"
            ]
        ]
    },
    {
        "question": "What are the names of studios that have made two or more films?",
        "query": "MATCH (film:`film_rank.film`)\nWITH count(*) AS count, film.Studio AS Studio\nWHERE count  >= 2\nRETURN Studio",
        "db_id": "film_rank",
        "answers": [
            [
                "Columbia"
            ],
            [
                "20th Century Fox"
            ],
            [
                "Paramount"
            ]
        ]
    },
    {
        "question": "How many calendar items do we have?",
        "query": "MATCH (ref_calendar:`cre_Doc_Tracking_DB.Ref_Calendar`)\nRETURN count(*)",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Count the number of all the calendar items.",
        "query": "MATCH (ref_calendar:`cre_Doc_Tracking_DB.Ref_Calendar`)\nRETURN count(*)",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Show all calendar dates and day Numbers.",
        "query": "MATCH (ref_calendar:`cre_Doc_Tracking_DB.Ref_Calendar`)\nRETURN ref_calendar.Calendar_Date,ref_calendar.Day_Number",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "1972-03-31 09:47:22",
                5
            ],
            [
                "1976-06-15 03:40:06",
                7
            ],
            [
                "1985-05-13 12:19:43",
                7
            ],
            [
                "1986-10-14 17:53:39",
                1
            ],
            [
                "1987-11-05 06:11:22",
                3
            ],
            [
                "1988-02-01 14:41:52",
                8
            ],
            [
                "1994-11-15 03:49:54",
                9
            ],
            [
                "1995-01-01 03:52:11",
                1
            ],
            [
                "1997-03-10 15:24:00",
                7
            ],
            [
                "2007-05-28 16:28:48",
                2
            ],
            [
                "2008-06-08 12:45:38",
                3
            ],
            [
                "2009-08-18 03:29:08",
                8
            ],
            [
                "2010-11-26 19:22:50",
                7
            ],
            [
                "2012-07-03 09:48:46",
                7
            ],
            [
                "2017-01-06 23:17:22",
                8
            ]
        ]
    },
    {
        "question": "What are all the calendar dates and day Numbers?",
        "query": "MATCH (ref_calendar:`cre_Doc_Tracking_DB.Ref_Calendar`)\nRETURN ref_calendar.Calendar_Date,ref_calendar.Day_Number",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "1972-03-31 09:47:22",
                5
            ],
            [
                "1976-06-15 03:40:06",
                7
            ],
            [
                "1985-05-13 12:19:43",
                7
            ],
            [
                "1986-10-14 17:53:39",
                1
            ],
            [
                "1987-11-05 06:11:22",
                3
            ],
            [
                "1988-02-01 14:41:52",
                8
            ],
            [
                "1994-11-15 03:49:54",
                9
            ],
            [
                "1995-01-01 03:52:11",
                1
            ],
            [
                "1997-03-10 15:24:00",
                7
            ],
            [
                "2007-05-28 16:28:48",
                2
            ],
            [
                "2008-06-08 12:45:38",
                3
            ],
            [
                "2009-08-18 03:29:08",
                8
            ],
            [
                "2010-11-26 19:22:50",
                7
            ],
            [
                "2012-07-03 09:48:46",
                7
            ],
            [
                "2017-01-06 23:17:22",
                8
            ]
        ]
    },
    {
        "question": "Show the number of document types.",
        "query": "MATCH (ref_document_types:`cre_Doc_Tracking_DB.Ref_Document_Types`)\nRETURN count(*)",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "How many document types are there?",
        "query": "MATCH (ref_document_types:`cre_Doc_Tracking_DB.Ref_Document_Types`)\nRETURN count(*)",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "List all document type codes and document type names.",
        "query": "MATCH (ref_document_types:`cre_Doc_Tracking_DB.Ref_Document_Types`)\nRETURN ref_document_types.Document_Type_Code,ref_document_types.Document_Type_Name",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "CV",
                "CV"
            ],
            [
                "BK",
                "Book"
            ],
            [
                "PR",
                "Paper"
            ],
            [
                "RV",
                "Review"
            ]
        ]
    },
    {
        "question": "What are all the document type codes and document type names?",
        "query": "MATCH (ref_document_types:`cre_Doc_Tracking_DB.Ref_Document_Types`)\nRETURN ref_document_types.Document_Type_Code,ref_document_types.Document_Type_Name",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "CV",
                "CV"
            ],
            [
                "BK",
                "Book"
            ],
            [
                "PR",
                "Paper"
            ],
            [
                "RV",
                "Review"
            ]
        ]
    },
    {
        "question": "What is the name and description for document type code RV?",
        "query": "MATCH (ref_document_types:`cre_Doc_Tracking_DB.Ref_Document_Types`)\nWHERE ref_document_types.Document_Type_Code = 'RV'\nRETURN ref_document_types.Document_Type_Name,ref_document_types.Document_Type_Description",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "Review",
                ""
            ]
        ]
    },
    {
        "question": "Give me the name and description of the document type code RV.",
        "query": "MATCH (ref_document_types:`cre_Doc_Tracking_DB.Ref_Document_Types`)\nWHERE ref_document_types.Document_Type_Code = 'RV'\nRETURN ref_document_types.Document_Type_Name,ref_document_types.Document_Type_Description",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "Review",
                ""
            ]
        ]
    },
    {
        "question": "What is the document type code for document type \"Paper\"?",
        "query": "MATCH (ref_document_types:`cre_Doc_Tracking_DB.Ref_Document_Types`)\nWHERE ref_document_types.Document_Type_Name = 'Paper'\nRETURN ref_document_types.Document_Type_Code",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "PR"
            ]
        ]
    },
    {
        "question": "Find the code of the document type \"Paper\".",
        "query": "MATCH (ref_document_types:`cre_Doc_Tracking_DB.Ref_Document_Types`)\nWHERE ref_document_types.Document_Type_Name = 'Paper'\nRETURN ref_document_types.Document_Type_Code",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "PR"
            ]
        ]
    },
    {
        "question": "Show the number of documents with document type code CV or BK.",
        "query": "MATCH (all_documents:`cre_Doc_Tracking_DB.All_Documents`)\nWHERE all_documents.Document_Type_Code = 'CV' OR all_documents.Document_Type_Code = 'BK'\nRETURN count(*)",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "How many documents have document type code CV or BK?",
        "query": "MATCH (all_documents:`cre_Doc_Tracking_DB.All_Documents`)\nWHERE all_documents.Document_Type_Code = 'CV' OR all_documents.Document_Type_Code = 'BK'\nRETURN count(*)",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "What is the date when the document \"Marry CV\" was stored?",
        "query": "MATCH (all_documents:`cre_Doc_Tracking_DB.All_Documents`)\nWHERE all_documents.Document_Name = 'Marry CV'\nRETURN all_documents.Date_Stored",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "1986-10-14 17:53:39"
            ]
        ]
    },
    {
        "question": "When was the document named \"Marry CV\" stored? Give me the date.",
        "query": "MATCH (all_documents:`cre_Doc_Tracking_DB.All_Documents`)\nWHERE all_documents.Document_Name = 'Marry CV'\nRETURN all_documents.Date_Stored",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "1986-10-14 17:53:39"
            ]
        ]
    },
    {
        "question": "Show the number of locations.",
        "query": "MATCH (ref_locations:`cre_Doc_Tracking_DB.Ref_Locations`)\nRETURN count(*)",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "How many locations are listed in the database?",
        "query": "MATCH (ref_locations:`cre_Doc_Tracking_DB.Ref_Locations`)\nRETURN count(*)",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "List all location codes and location names.",
        "query": "MATCH (ref_locations:`cre_Doc_Tracking_DB.Ref_Locations`)\nRETURN ref_locations.Location_Code,ref_locations.Location_Name",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "b",
                "Brazil"
            ],
            [
                "c",
                "Canada"
            ],
            [
                "e",
                "Edinburgh"
            ],
            [
                "n",
                "Nanjing"
            ],
            [
                "x",
                "Xiamen"
            ]
        ]
    },
    {
        "question": "What are all the location codes and location names?",
        "query": "MATCH (ref_locations:`cre_Doc_Tracking_DB.Ref_Locations`)\nRETURN ref_locations.Location_Code,ref_locations.Location_Name",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "b",
                "Brazil"
            ],
            [
                "c",
                "Canada"
            ],
            [
                "e",
                "Edinburgh"
            ],
            [
                "n",
                "Nanjing"
            ],
            [
                "x",
                "Xiamen"
            ]
        ]
    },
    {
        "question": "What are the name and description for location code x?",
        "query": "MATCH (ref_locations:`cre_Doc_Tracking_DB.Ref_Locations`)\nWHERE ref_locations.Location_Code = 'x'\nRETURN ref_locations.Location_Name,ref_locations.Location_Description",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "Xiamen",
                ""
            ]
        ]
    },
    {
        "question": "Give me the name and description of the location with code x.",
        "query": "MATCH (ref_locations:`cre_Doc_Tracking_DB.Ref_Locations`)\nWHERE ref_locations.Location_Code = 'x'\nRETURN ref_locations.Location_Name,ref_locations.Location_Description",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "Xiamen",
                ""
            ]
        ]
    },
    {
        "question": "What is the location code for the country \"Canada\"?",
        "query": "MATCH (ref_locations:`cre_Doc_Tracking_DB.Ref_Locations`)\nWHERE ref_locations.Location_Name = 'Canada'\nRETURN ref_locations.Location_Code",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "c"
            ]
        ]
    },
    {
        "question": "Show the location code of the country \"Canada\".",
        "query": "MATCH (ref_locations:`cre_Doc_Tracking_DB.Ref_Locations`)\nWHERE ref_locations.Location_Name = 'Canada'\nRETURN ref_locations.Location_Code",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "c"
            ]
        ]
    },
    {
        "question": "How many roles are there?",
        "query": "MATCH (roles:`cre_Doc_Tracking_DB.Roles`)\nRETURN count(*)",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Count the total number of roles listed.",
        "query": "MATCH (roles:`cre_Doc_Tracking_DB.Roles`)\nRETURN count(*)",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "List all role codes, role names, and role descriptions.",
        "query": "MATCH (roles:`cre_Doc_Tracking_DB.Roles`)\nRETURN roles.Role_Code,roles.Role_Name,roles.Role_Description",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "MG",
                "Manager",
                "Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti."
            ],
            [
                "ED",
                "Editor",
                "Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos."
            ],
            [
                "PT",
                "Photo",
                "Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt."
            ],
            [
                "PR",
                "Proof Reader",
                "Ut sed quae eaque mollitia qui hic. Natus ea expedita et odio illum fugiat qui natus. Consequatur velit ut dolorem cum ullam esse deserunt dignissimos. Enim non non rem officiis quis."
            ],
            [
                "HR",
                "Human Resource",
                "Et totam est quibusdam aspernatur ut. Vitae perferendis eligendi voluptatem molestiae rem ut enim. Ipsum expedita quae earum unde est. Repellendus ut ipsam nihil accusantium sit. Magni accusantium numquam quod et."
            ]
        ]
    },
    {
        "question": "What are all the role codes, role names, and role descriptions?",
        "query": "MATCH (roles:`cre_Doc_Tracking_DB.Roles`)\nRETURN roles.Role_Code,roles.Role_Name,roles.Role_Description",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "MG",
                "Manager",
                "Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti."
            ],
            [
                "ED",
                "Editor",
                "Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos."
            ],
            [
                "PT",
                "Photo",
                "Aut modi nihil molestias temporibus sit rerum. Sit neque eaque odio omnis incidunt."
            ],
            [
                "PR",
                "Proof Reader",
                "Ut sed quae eaque mollitia qui hic. Natus ea expedita et odio illum fugiat qui natus. Consequatur velit ut dolorem cum ullam esse deserunt dignissimos. Enim non non rem officiis quis."
            ],
            [
                "HR",
                "Human Resource",
                "Et totam est quibusdam aspernatur ut. Vitae perferendis eligendi voluptatem molestiae rem ut enim. Ipsum expedita quae earum unde est. Repellendus ut ipsam nihil accusantium sit. Magni accusantium numquam quod et."
            ]
        ]
    },
    {
        "question": "What are the name and description for role code \"MG\"?",
        "query": "MATCH (roles:`cre_Doc_Tracking_DB.Roles`)\nWHERE roles.Role_Code = 'MG'\nRETURN roles.Role_Name,roles.Role_Description",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "Manager",
                "Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti."
            ]
        ]
    },
    {
        "question": "Find the name and description of the role with code \"MG\".",
        "query": "MATCH (roles:`cre_Doc_Tracking_DB.Roles`)\nWHERE roles.Role_Code = 'MG'\nRETURN roles.Role_Name,roles.Role_Description",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "Manager",
                "Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti."
            ]
        ]
    },
    {
        "question": "Show the description for role name \"Proof Reader\".",
        "query": "MATCH (roles:`cre_Doc_Tracking_DB.Roles`)\nWHERE roles.Role_Name = 'Proof Reader'\nRETURN roles.Role_Description",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "Ut sed quae eaque mollitia qui hic. Natus ea expedita et odio illum fugiat qui natus. Consequatur velit ut dolorem cum ullam esse deserunt dignissimos. Enim non non rem officiis quis."
            ]
        ]
    },
    {
        "question": "What is the description of the role named \"Proof Reader\"?",
        "query": "MATCH (roles:`cre_Doc_Tracking_DB.Roles`)\nWHERE roles.Role_Name = 'Proof Reader'\nRETURN roles.Role_Description",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "Ut sed quae eaque mollitia qui hic. Natus ea expedita et odio illum fugiat qui natus. Consequatur velit ut dolorem cum ullam esse deserunt dignissimos. Enim non non rem officiis quis."
            ]
        ]
    },
    {
        "question": "How many employees do we have?",
        "query": "MATCH (employees:`cre_Doc_Tracking_DB.Employees`)\nRETURN count(*)",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Find the number of employees we have.",
        "query": "MATCH (employees:`cre_Doc_Tracking_DB.Employees`)\nRETURN count(*)",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Show the name, role code, and date of birth for the employee with name 'Armani'.",
        "query": "MATCH (employees:`cre_Doc_Tracking_DB.Employees`)\nWHERE employees.Employee_Name = 'Armani'\nRETURN employees.Employee_Name,employees.Role_Code,employees.Date_of_Birth",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "Armani",
                "ED",
                "1988-12-08 06:13:33"
            ]
        ]
    },
    {
        "question": "What are the name, role code, and date of birth of the employee named 'Armani'?",
        "query": "MATCH (employees:`cre_Doc_Tracking_DB.Employees`)\nWHERE employees.Employee_Name = 'Armani'\nRETURN employees.Employee_Name,employees.Role_Code,employees.Date_of_Birth",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "Armani",
                "ED",
                "1988-12-08 06:13:33"
            ]
        ]
    },
    {
        "question": "What is the id for the employee called Ebba?",
        "query": "MATCH (employees:`cre_Doc_Tracking_DB.Employees`)\nWHERE employees.Employee_Name = 'Ebba'\nRETURN employees.Employee_ID",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                30
            ]
        ]
    },
    {
        "question": "Show the id of the employee named Ebba.",
        "query": "MATCH (employees:`cre_Doc_Tracking_DB.Employees`)\nWHERE employees.Employee_Name = 'Ebba'\nRETURN employees.Employee_ID",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                30
            ]
        ]
    },
    {
        "question": "Show the names of all the employees with role \"HR\".",
        "query": "MATCH (employees:`cre_Doc_Tracking_DB.Employees`)\nWHERE employees.Role_Code = 'HR'\nRETURN employees.Employee_Name",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "Leo"
            ]
        ]
    },
    {
        "question": "Which employees have the role with code \"HR\"? Find their names.",
        "query": "MATCH (employees:`cre_Doc_Tracking_DB.Employees`)\nWHERE employees.Role_Code = 'HR'\nRETURN employees.Employee_Name",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "Leo"
            ]
        ]
    },
    {
        "question": "Show all role codes and the number of employees in each role.",
        "query": "MATCH (employees:`cre_Doc_Tracking_DB.Employees`)\nWITH employees.Role_Code AS Role_Code, count(employees.Role_Code) AS count\nRETURN Role_Code,count",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "HR",
                1
            ],
            [
                "MG",
                1
            ],
            [
                "ED",
                7
            ],
            [
                "PT",
                1
            ],
            [
                "PR",
                5
            ]
        ]
    },
    {
        "question": "What is the code of each role and the number of employees in each role?",
        "query": "MATCH (employees:`cre_Doc_Tracking_DB.Employees`)\nWITH employees.Role_Code AS Role_Code, count(employees.Role_Code) AS count\nRETURN Role_Code,count",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "HR",
                1
            ],
            [
                "MG",
                1
            ],
            [
                "ED",
                7
            ],
            [
                "PT",
                1
            ],
            [
                "PR",
                5
            ]
        ]
    },
    {
        "question": "What is the role code with the largest number of employees?",
        "query": "MATCH (employees:`cre_Doc_Tracking_DB.Employees`)\nWITH employees.Role_Code AS Role_Code, count(employees.Role_Code) AS count\nRETURN Role_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "ED"
            ]
        ]
    },
    {
        "question": "Find the code of the role that have the most employees.",
        "query": "MATCH (employees:`cre_Doc_Tracking_DB.Employees`)\nWITH employees.Role_Code AS Role_Code, count(employees.Role_Code) AS count\nRETURN Role_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "ED"
            ]
        ]
    },
    {
        "question": "Show all role codes with at least 3 employees.",
        "query": "MATCH (employees:`cre_Doc_Tracking_DB.Employees`)\nWITH count(*) AS count, employees.Role_Code AS Role_Code\nWHERE count  >= 3\nRETURN Role_Code",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "ED"
            ],
            [
                "PR"
            ]
        ]
    },
    {
        "question": "What are the roles with three or more employees? Give me the role codes.",
        "query": "MATCH (employees:`cre_Doc_Tracking_DB.Employees`)\nWITH count(*) AS count, employees.Role_Code AS Role_Code\nWHERE count  >= 3\nRETURN Role_Code",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "ED"
            ],
            [
                "PR"
            ]
        ]
    },
    {
        "question": "Show the role code with the least employees.",
        "query": "MATCH (employees:`cre_Doc_Tracking_DB.Employees`)\nWITH employees.Role_Code AS Role_Code, count(employees.Role_Code) AS count\nRETURN Role_Code\nORDER BY count ASC\nLIMIT 1",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "HR"
            ]
        ]
    },
    {
        "question": "What is the role with the smallest number of employees? Find the role codes.",
        "query": "MATCH (employees:`cre_Doc_Tracking_DB.Employees`)\nWITH employees.Role_Code AS Role_Code, count(employees.Role_Code) AS count\nRETURN Role_Code\nORDER BY count ASC\nLIMIT 1",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "HR"
            ]
        ]
    },
    {
        "question": "What is the role name and role description for employee called Ebba?",
        "query": "MATCH (T1:`cre_Doc_Tracking_DB.Employees`)-[]-(T2:`cre_Doc_Tracking_DB.Roles`)\nWHERE T1.Employee_Name = 'Ebba'\nRETURN T2.Role_Name,T2.Role_Description",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "Manager",
                "Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti."
            ]
        ]
    },
    {
        "question": "Show the name and description of the role played by the employee named Ebba.",
        "query": "MATCH (T1:`cre_Doc_Tracking_DB.Employees`)-[]-(T2:`cre_Doc_Tracking_DB.Roles`)\nWHERE T1.Employee_Name = 'Ebba'\nRETURN T2.Role_Name,T2.Role_Description",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "Manager",
                "Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti."
            ]
        ]
    },
    {
        "question": "Show the names of employees with role name Editor.",
        "query": "MATCH (T1:`cre_Doc_Tracking_DB.Employees`)-[]-(T2:`cre_Doc_Tracking_DB.Roles`)\nWHERE T2.Role_Name = 'Editor'\nRETURN T1.Employee_Name",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "Izabella"
            ],
            [
                "Gussie"
            ],
            [
                "Beatrice"
            ],
            [
                "Harley"
            ],
            [
                "Armani"
            ],
            [
                "Stephanie"
            ],
            [
                "Mallie"
            ]
        ]
    },
    {
        "question": "Find the names of all the employees whose the role name is \"Editor\".",
        "query": "MATCH (T1:`cre_Doc_Tracking_DB.Employees`)-[]-(T2:`cre_Doc_Tracking_DB.Roles`)\nWHERE T2.Role_Name = 'Editor'\nRETURN T1.Employee_Name",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "Izabella"
            ],
            [
                "Gussie"
            ],
            [
                "Beatrice"
            ],
            [
                "Harley"
            ],
            [
                "Armani"
            ],
            [
                "Stephanie"
            ],
            [
                "Mallie"
            ]
        ]
    },
    {
        "question": "Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\".",
        "query": "MATCH (T1:`cre_Doc_Tracking_DB.Employees`)-[]-(T2:`cre_Doc_Tracking_DB.Roles`)\nWHERE T2.Role_Name = 'Human Resource' OR T2.Role_Name = 'Manager'\nRETURN T1.Employee_ID",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                30
            ],
            [
                25
            ]
        ]
    },
    {
        "question": "What are the employee ids of the employees whose role name is \"Human Resource\" or \"Manager\"?",
        "query": "MATCH (T1:`cre_Doc_Tracking_DB.Employees`)-[]-(T2:`cre_Doc_Tracking_DB.Roles`)\nWHERE T2.Role_Name = 'Human Resource' OR T2.Role_Name = 'Manager'\nRETURN T1.Employee_ID",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                30
            ],
            [
                25
            ]
        ]
    },
    {
        "question": "What are the different location codes for documents?",
        "query": "MATCH (document_locations:`cre_Doc_Tracking_DB.Document_Locations`)\nRETURN DISTINCT document_locations.Location_Code",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "e"
            ],
            [
                "x"
            ],
            [
                "c"
            ],
            [
                "b"
            ],
            [
                "n"
            ]
        ]
    },
    {
        "question": "Give me all the distinct location codes for documents.",
        "query": "MATCH (document_locations:`cre_Doc_Tracking_DB.Document_Locations`)\nRETURN DISTINCT document_locations.Location_Code",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "e"
            ],
            [
                "x"
            ],
            [
                "c"
            ],
            [
                "b"
            ],
            [
                "n"
            ]
        ]
    },
    {
        "question": "Show the location code, the starting date and ending data in that location for all the documents.",
        "query": "MATCH (document_locations:`cre_Doc_Tracking_DB.Document_Locations`)\nRETURN document_locations.Location_Code,document_locations.Date_in_Location_From,document_locations.Date_in_Locaton_To",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "e",
                "2017-01-06 23:17:22",
                "2008-06-08 12:45:38"
            ],
            [
                "x",
                "2017-01-06 23:17:22",
                "2012-07-03 09:48:46"
            ],
            [
                "c",
                "1972-03-31 09:47:22",
                "1987-11-05 06:11:22"
            ],
            [
                "c",
                "2017-01-06 23:17:22",
                "2010-11-26 19:22:50"
            ],
            [
                "x",
                "2008-06-08 12:45:38",
                "1976-06-15 03:40:06"
            ],
            [
                "x",
                "1986-10-14 17:53:39",
                "2010-11-26 19:22:50"
            ],
            [
                "b",
                "2017-01-06 23:17:22",
                "1995-01-01 03:52:11"
            ],
            [
                "b",
                "1985-05-13 12:19:43",
                "1986-10-14 17:53:39"
            ],
            [
                "b",
                "1986-10-14 17:53:39",
                "2010-11-26 19:22:50"
            ],
            [
                "x",
                "1997-03-10 15:24:00",
                "1976-06-15 03:40:06"
            ],
            [
                "e",
                "1972-03-31 09:47:22",
                "1987-11-05 06:11:22"
            ],
            [
                "e",
                "2010-11-26 19:22:50",
                "2017-01-06 23:17:22"
            ],
            [
                "n",
                "2017-01-06 23:17:22",
                "1997-03-10 15:24:00"
            ],
            [
                "x",
                "1972-03-31 09:47:22",
                "2009-08-18 03:29:08"
            ],
            [
                "e",
                "2009-08-18 03:29:08",
                "1986-10-14 17:53:39"
            ]
        ]
    },
    {
        "question": "What are each document's location code, and starting date and ending data in that location?",
        "query": "MATCH (document_locations:`cre_Doc_Tracking_DB.Document_Locations`)\nRETURN document_locations.Location_Code,document_locations.Date_in_Location_From,document_locations.Date_in_Locaton_To",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "e",
                "2017-01-06 23:17:22",
                "2008-06-08 12:45:38"
            ],
            [
                "x",
                "2017-01-06 23:17:22",
                "2012-07-03 09:48:46"
            ],
            [
                "c",
                "1972-03-31 09:47:22",
                "1987-11-05 06:11:22"
            ],
            [
                "c",
                "2017-01-06 23:17:22",
                "2010-11-26 19:22:50"
            ],
            [
                "x",
                "2008-06-08 12:45:38",
                "1976-06-15 03:40:06"
            ],
            [
                "x",
                "1986-10-14 17:53:39",
                "2010-11-26 19:22:50"
            ],
            [
                "b",
                "2017-01-06 23:17:22",
                "1995-01-01 03:52:11"
            ],
            [
                "b",
                "1985-05-13 12:19:43",
                "1986-10-14 17:53:39"
            ],
            [
                "b",
                "1986-10-14 17:53:39",
                "2010-11-26 19:22:50"
            ],
            [
                "x",
                "1997-03-10 15:24:00",
                "1976-06-15 03:40:06"
            ],
            [
                "e",
                "1972-03-31 09:47:22",
                "1987-11-05 06:11:22"
            ],
            [
                "e",
                "2010-11-26 19:22:50",
                "2017-01-06 23:17:22"
            ],
            [
                "n",
                "2017-01-06 23:17:22",
                "1997-03-10 15:24:00"
            ],
            [
                "x",
                "1972-03-31 09:47:22",
                "2009-08-18 03:29:08"
            ],
            [
                "e",
                "2009-08-18 03:29:08",
                "1986-10-14 17:53:39"
            ]
        ]
    },
    {
        "question": "Show the location codes and the number of documents in each location.",
        "query": "MATCH (document_locations:`cre_Doc_Tracking_DB.Document_Locations`)\nWITH count(document_locations.Location_Code) AS count, document_locations.Location_Code AS Location_Code\nRETURN Location_Code,count",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "e",
                4
            ],
            [
                "x",
                5
            ],
            [
                "c",
                2
            ],
            [
                "b",
                3
            ],
            [
                "n",
                1
            ]
        ]
    },
    {
        "question": "What is the code of each location and the number of documents in that location?",
        "query": "MATCH (document_locations:`cre_Doc_Tracking_DB.Document_Locations`)\nWITH count(document_locations.Location_Code) AS count, document_locations.Location_Code AS Location_Code\nRETURN Location_Code,count",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "e",
                4
            ],
            [
                "x",
                5
            ],
            [
                "c",
                2
            ],
            [
                "b",
                3
            ],
            [
                "n",
                1
            ]
        ]
    },
    {
        "question": "What is the location code with the most documents?",
        "query": "MATCH (document_locations:`cre_Doc_Tracking_DB.Document_Locations`)\nWITH count(document_locations.Location_Code) AS count, document_locations.Location_Code AS Location_Code\nRETURN Location_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "x"
            ]
        ]
    },
    {
        "question": "Find the code of the location with the largest number of documents.",
        "query": "MATCH (document_locations:`cre_Doc_Tracking_DB.Document_Locations`)\nWITH count(document_locations.Location_Code) AS count, document_locations.Location_Code AS Location_Code\nRETURN Location_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "x"
            ]
        ]
    },
    {
        "question": "Show the location codes with at least 3 documents.",
        "query": "MATCH (document_locations:`cre_Doc_Tracking_DB.Document_Locations`)\nWITH count(*) AS count, document_locations.Location_Code AS Location_Code\nWHERE count  >= 3\nRETURN Location_Code",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "e"
            ],
            [
                "x"
            ],
            [
                "b"
            ]
        ]
    },
    {
        "question": "What are the codes of the locations with at least three documents?",
        "query": "MATCH (document_locations:`cre_Doc_Tracking_DB.Document_Locations`)\nWITH count(*) AS count, document_locations.Location_Code AS Location_Code\nWHERE count  >= 3\nRETURN Location_Code",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "e"
            ],
            [
                "x"
            ],
            [
                "b"
            ]
        ]
    },
    {
        "question": "Show the location name and code with the least documents.",
        "query": "MATCH (T1:`cre_Doc_Tracking_DB.Document_Locations`)-[]-(T2:`cre_Doc_Tracking_DB.Ref_Locations`)\nWITH T2.Location_Name AS Location_Name, count(T1.Location_Code) AS count, T1.Location_Code AS Location_Code\nRETURN Location_Name,Location_Code\nORDER BY count ASC\nLIMIT 1",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "Nanjing",
                "n"
            ]
        ]
    },
    {
        "question": "What are the name and code of the location with the smallest number of documents?",
        "query": "MATCH (T1:`cre_Doc_Tracking_DB.Document_Locations`)-[]-(T2:`cre_Doc_Tracking_DB.Ref_Locations`)\nWITH T2.Location_Name AS Location_Name, count(T1.Location_Code) AS count, T1.Location_Code AS Location_Code\nRETURN Location_Name,Location_Code\nORDER BY count ASC\nLIMIT 1",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                "Nanjing",
                "n"
            ]
        ]
    },
    {
        "question": "Show the id of each employee and the number of document destruction authorised by that employee.",
        "query": "MATCH (documents_to_be_destroyed:`cre_Doc_Tracking_DB.Documents_to_be_Destroyed`)\nWITH count(documents_to_be_destroyed.Destruction_Authorised_by_Employee_ID) AS count, documents_to_be_destroyed.Destruction_Authorised_by_Employee_ID AS Destruction_Authorised_by_Employee_ID\nRETURN Destruction_Authorised_by_Employee_ID,count",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                156,
                2
            ],
            [
                55,
                3
            ],
            [
                183,
                3
            ],
            [
                38,
                1
            ],
            [
                123,
                1
            ],
            [
                30,
                1
            ]
        ]
    },
    {
        "question": "What are the id of each employee and the number of document destruction authorised by that employee?",
        "query": "MATCH (documents_to_be_destroyed:`cre_Doc_Tracking_DB.Documents_to_be_Destroyed`)\nWITH count(documents_to_be_destroyed.Destruction_Authorised_by_Employee_ID) AS count, documents_to_be_destroyed.Destruction_Authorised_by_Employee_ID AS Destruction_Authorised_by_Employee_ID\nRETURN Destruction_Authorised_by_Employee_ID,count",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                156,
                2
            ],
            [
                55,
                3
            ],
            [
                183,
                3
            ],
            [
                38,
                1
            ],
            [
                123,
                1
            ],
            [
                30,
                1
            ]
        ]
    },
    {
        "question": "Show the employee ids and the number of documents destroyed by each employee.",
        "query": "MATCH (documents_to_be_destroyed:`cre_Doc_Tracking_DB.Documents_to_be_Destroyed`)\nWITH documents_to_be_destroyed.Destroyed_by_Employee_ID AS Destroyed_by_Employee_ID, count(documents_to_be_destroyed.Destroyed_by_Employee_ID) AS count\nRETURN Destroyed_by_Employee_ID,count",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                138,
                1
            ],
            [
                173,
                3
            ],
            [
                156,
                1
            ],
            [
                136,
                2
            ],
            [
                99,
                2
            ],
            [
                38,
                1
            ],
            [
                55,
                1
            ]
        ]
    },
    {
        "question": "What are the id of each employee and the number of document destroyed by that employee?",
        "query": "MATCH (documents_to_be_destroyed:`cre_Doc_Tracking_DB.Documents_to_be_Destroyed`)\nWITH documents_to_be_destroyed.Destroyed_by_Employee_ID AS Destroyed_by_Employee_ID, count(documents_to_be_destroyed.Destroyed_by_Employee_ID) AS count\nRETURN Destroyed_by_Employee_ID,count",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                138,
                1
            ],
            [
                173,
                3
            ],
            [
                156,
                1
            ],
            [
                136,
                2
            ],
            [
                99,
                2
            ],
            [
                38,
                1
            ],
            [
                55,
                1
            ]
        ]
    },
    {
        "question": "Show the ids of all employees who have authorized destruction.",
        "query": "MATCH (documents_to_be_destroyed:`cre_Doc_Tracking_DB.Documents_to_be_Destroyed`)\nRETURN DISTINCT documents_to_be_destroyed.Destruction_Authorised_by_Employee_ID",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                156
            ],
            [
                55
            ],
            [
                183
            ],
            [
                38
            ],
            [
                123
            ],
            [
                30
            ]
        ]
    },
    {
        "question": "What are the ids of all the employees who authorize document destruction?",
        "query": "MATCH (documents_to_be_destroyed:`cre_Doc_Tracking_DB.Documents_to_be_Destroyed`)\nRETURN DISTINCT documents_to_be_destroyed.Destruction_Authorised_by_Employee_ID",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                156
            ],
            [
                55
            ],
            [
                183
            ],
            [
                38
            ],
            [
                123
            ],
            [
                30
            ]
        ]
    },
    {
        "question": "Show the ids of all employees who have destroyed a document.",
        "query": "MATCH (documents_to_be_destroyed:`cre_Doc_Tracking_DB.Documents_to_be_Destroyed`)\nRETURN DISTINCT documents_to_be_destroyed.Destroyed_by_Employee_ID",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                138
            ],
            [
                173
            ],
            [
                156
            ],
            [
                136
            ],
            [
                99
            ],
            [
                38
            ],
            [
                55
            ]
        ]
    },
    {
        "question": "What are the ids of all the employees who have destroyed documents?",
        "query": "MATCH (documents_to_be_destroyed:`cre_Doc_Tracking_DB.Documents_to_be_Destroyed`)\nRETURN DISTINCT documents_to_be_destroyed.Destroyed_by_Employee_ID",
        "db_id": "cre_Doc_Tracking_DB",
        "answers": [
            [
                138
            ],
            [
                173
            ],
            [
                156
            ],
            [
                136
            ],
            [
                99
            ],
            [
                38
            ],
            [
                55
            ]
        ]
    },
    {
        "question": "How many clubs are there?",
        "query": "MATCH (club:`club_1.Club`)\nRETURN count(*)",
        "db_id": "club_1",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "Count the total number of clubs.",
        "query": "MATCH (club:`club_1.Club`)\nRETURN count(*)",
        "db_id": "club_1",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "What are the names of all clubs?",
        "query": "MATCH (club:`club_1.Club`)\nRETURN club.ClubName",
        "db_id": "club_1",
        "answers": [
            [
                "Bootup Baltimore"
            ],
            [
                "Hopkins Student Enterprises"
            ],
            [
                "Pen and Paper Gaming"
            ],
            [
                "Tennis Club"
            ]
        ]
    },
    {
        "question": "Give me the name of each club.",
        "query": "MATCH (club:`club_1.Club`)\nRETURN club.ClubName",
        "db_id": "club_1",
        "answers": [
            [
                "Bootup Baltimore"
            ],
            [
                "Hopkins Student Enterprises"
            ],
            [
                "Pen and Paper Gaming"
            ],
            [
                "Tennis Club"
            ]
        ]
    },
    {
        "question": "How many students are there?",
        "query": "MATCH (student:`club_1.Student`)\nRETURN count(*)",
        "db_id": "club_1",
        "answers": [
            [
                34
            ]
        ]
    },
    {
        "question": "Count the total number of students.",
        "query": "MATCH (student:`club_1.Student`)\nRETURN count(*)",
        "db_id": "club_1",
        "answers": [
            [
                34
            ]
        ]
    },
    {
        "question": "What are the first names of all the students?",
        "query": "MATCH (student:`club_1.Student`)\nRETURN DISTINCT student.Fname",
        "db_id": "club_1",
        "answers": [
            [
                "Linda"
            ],
            [
                "Tracy"
            ],
            [
                "Shiela"
            ],
            [
                "Dinesh"
            ],
            [
                "Paul"
            ],
            [
                "Andy"
            ],
            [
                "Lisa"
            ],
            [
                "Jandy"
            ],
            [
                "Eric"
            ],
            [
                "Derek"
            ],
            [
                "David"
            ],
            [
                "Steven"
            ],
            [
                "Charles"
            ],
            [
                "Susan"
            ],
            [
                "Mark"
            ],
            [
                "Bruce"
            ],
            [
                "Michael"
            ],
            [
                "Arthur"
            ],
            [
                "Ian"
            ],
            [
                "George"
            ],
            [
                "Stacy"
            ],
            [
                "Jun"
            ],
            [
                "Sarah"
            ],
            [
                "William"
            ]
        ]
    },
    {
        "question": "Find each student's first name.",
        "query": "MATCH (student:`club_1.Student`)\nRETURN DISTINCT student.Fname",
        "db_id": "club_1",
        "answers": [
            [
                "Linda"
            ],
            [
                "Tracy"
            ],
            [
                "Shiela"
            ],
            [
                "Dinesh"
            ],
            [
                "Paul"
            ],
            [
                "Andy"
            ],
            [
                "Lisa"
            ],
            [
                "Jandy"
            ],
            [
                "Eric"
            ],
            [
                "Derek"
            ],
            [
                "David"
            ],
            [
                "Steven"
            ],
            [
                "Charles"
            ],
            [
                "Susan"
            ],
            [
                "Mark"
            ],
            [
                "Bruce"
            ],
            [
                "Michael"
            ],
            [
                "Arthur"
            ],
            [
                "Ian"
            ],
            [
                "George"
            ],
            [
                "Stacy"
            ],
            [
                "Jun"
            ],
            [
                "Sarah"
            ],
            [
                "William"
            ]
        ]
    },
    {
        "question": "What is the description of the club named \"Tennis Club\"?",
        "query": "MATCH (club:`club_1.Club`)\nWHERE club.ClubName = 'Tennis Club'\nRETURN club.ClubDesc",
        "db_id": "club_1",
        "answers": [
            [
                "A competitive tennis club."
            ]
        ]
    },
    {
        "question": "Find the description of the club called \"Tennis Club\".",
        "query": "MATCH (club:`club_1.Club`)\nWHERE club.ClubName = 'Tennis Club'\nRETURN club.ClubDesc",
        "db_id": "club_1",
        "answers": [
            [
                "A competitive tennis club."
            ]
        ]
    },
    {
        "question": "Find the description of the club \"Pen and Paper Gaming\".",
        "query": "MATCH (club:`club_1.Club`)\nWHERE club.ClubName = 'Pen and Paper Gaming'\nRETURN club.ClubDesc",
        "db_id": "club_1",
        "answers": [
            [
                "Play pen and paper games on campus."
            ]
        ]
    },
    {
        "question": "What is the description of the club \"Pen and Paper Gaming\"?",
        "query": "MATCH (club:`club_1.Club`)\nWHERE club.ClubName = 'Pen and Paper Gaming'\nRETURN club.ClubDesc",
        "db_id": "club_1",
        "answers": [
            [
                "Play pen and paper games on campus."
            ]
        ]
    },
    {
        "question": "What is the location of the club named \"Tennis Club\"?",
        "query": "MATCH (club:`club_1.Club`)\nWHERE club.ClubName = 'Tennis Club'\nRETURN club.ClubLocation",
        "db_id": "club_1",
        "answers": [
            [
                "AKW"
            ]
        ]
    },
    {
        "question": "Where us the club named \"Tennis Club\" located?",
        "query": "MATCH (club:`club_1.Club`)\nWHERE club.ClubName = 'Tennis Club'\nRETURN club.ClubLocation",
        "db_id": "club_1",
        "answers": [
            [
                "AKW"
            ]
        ]
    },
    {
        "question": "Find the location of the club \"Pen and Paper Gaming\".",
        "query": "MATCH (club:`club_1.Club`)\nWHERE club.ClubName = 'Pen and Paper Gaming'\nRETURN club.ClubLocation",
        "db_id": "club_1",
        "answers": [
            [
                "HHH"
            ]
        ]
    },
    {
        "question": "Where is the club \"Pen and Paper Gaming\" located?",
        "query": "MATCH (club:`club_1.Club`)\nWHERE club.ClubName = 'Pen and Paper Gaming'\nRETURN club.ClubLocation",
        "db_id": "club_1",
        "answers": [
            [
                "HHH"
            ]
        ]
    },
    {
        "question": "Where is the club \"Hopkins Student Enterprises\" located?",
        "query": "MATCH (club:`club_1.Club`)\nWHERE club.ClubName = 'Hopkins Student Enterprises'\nRETURN club.ClubLocation",
        "db_id": "club_1",
        "answers": [
            [
                "AKW"
            ]
        ]
    },
    {
        "question": "Tell me the location of the club \"Hopkins Student Enterprises\".",
        "query": "MATCH (club:`club_1.Club`)\nWHERE club.ClubName = 'Hopkins Student Enterprises'\nRETURN club.ClubLocation",
        "db_id": "club_1",
        "answers": [
            [
                "AKW"
            ]
        ]
    },
    {
        "question": "Find the name of all the clubs at \"AKW\".",
        "query": "MATCH (club:`club_1.Club`)\nWHERE club.ClubLocation = 'AKW'\nRETURN club.ClubName",
        "db_id": "club_1",
        "answers": [
            [
                "Bootup Baltimore"
            ],
            [
                "Hopkins Student Enterprises"
            ],
            [
                "Tennis Club"
            ]
        ]
    },
    {
        "question": "Which clubs are located at \"AKW\"? Return the club names.",
        "query": "MATCH (club:`club_1.Club`)\nWHERE club.ClubLocation = 'AKW'\nRETURN club.ClubName",
        "db_id": "club_1",
        "answers": [
            [
                "Bootup Baltimore"
            ],
            [
                "Hopkins Student Enterprises"
            ],
            [
                "Tennis Club"
            ]
        ]
    },
    {
        "question": "How many clubs are located at \"HHH\"?",
        "query": "MATCH (club:`club_1.Club`)\nWHERE club.ClubLocation = 'HHH'\nRETURN count(*)",
        "db_id": "club_1",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "Count the number of clubs located at \"HHH\".",
        "query": "MATCH (club:`club_1.Club`)\nWHERE club.ClubLocation = 'HHH'\nRETURN count(*)",
        "db_id": "club_1",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "What is the organisation type and id of the organisation which has the most number of research staff?",
        "query": "MATCH (T1:`tracking_grants_for_research.Organisations`)-[]-(T2:`tracking_grants_for_research.Research_Staff`)\nWITH T1.organisation_id AS organisation_id, count(T1.organisation_id) AS count, T1.organisation_type AS organisation_type\nRETURN organisation_type,organisation_id\nORDER BY count DESC\nLIMIT 1",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                "SPON",
                5
            ]
        ]
    },
    {
        "question": "What is the type and id of the organization that has the most research staff?",
        "query": "MATCH (T1:`tracking_grants_for_research.Organisations`)-[]-(T2:`tracking_grants_for_research.Research_Staff`)\nWITH T1.organisation_id AS organisation_id, count(T1.organisation_id) AS count, T1.organisation_type AS organisation_type\nRETURN organisation_type,organisation_id\nORDER BY count DESC\nLIMIT 1",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                "SPON",
                5
            ]
        ]
    },
    {
        "question": "Which organisation type hires most research staff?",
        "query": "MATCH (T1:`tracking_grants_for_research.Organisations`)-[]-(T2:`tracking_grants_for_research.Research_Staff`)\nWITH count(T1.organisation_type) AS count, T1.organisation_type AS organisation_type\nRETURN organisation_type\nORDER BY count DESC\nLIMIT 1",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                "RES"
            ]
        ]
    },
    {
        "question": "What is the type of the organization with the most research staff?",
        "query": "MATCH (T1:`tracking_grants_for_research.Organisations`)-[]-(T2:`tracking_grants_for_research.Research_Staff`)\nWITH count(T1.organisation_type) AS count, T1.organisation_type AS organisation_type\nRETURN organisation_type\nORDER BY count DESC\nLIMIT 1",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                "RES"
            ]
        ]
    },
    {
        "question": "How many kinds of roles are there for the staff?",
        "query": "MATCH (project_staff:`tracking_grants_for_research.Project_Staff`)\nRETURN count(DISTINCT project_staff.role_code)",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "How many different roles are there on the project staff?",
        "query": "MATCH (project_staff:`tracking_grants_for_research.Project_Staff`)\nRETURN count(DISTINCT project_staff.role_code)",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "What is the complete description of the researcher role.",
        "query": "MATCH (staff_roles:`tracking_grants_for_research.Staff_Roles`)\nWHERE staff_roles.role_code = 'researcher'\nRETURN staff_roles.role_description",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                "Project Researcher"
            ]
        ]
    },
    {
        "question": "What is the complete description of the job of a researcher?",
        "query": "MATCH (staff_roles:`tracking_grants_for_research.Staff_Roles`)\nWHERE staff_roles.role_code = 'researcher'\nRETURN staff_roles.role_description",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                "Project Researcher"
            ]
        ]
    },
    {
        "question": "When did the first staff for the projects started working?",
        "query": "MATCH (project_staff:`tracking_grants_for_research.Project_Staff`)\nRETURN project_staff.date_from\nORDER BY project_staff.date_from ASC\nLIMIT 1",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                "1970-01-02 15:35:05"
            ]
        ]
    },
    {
        "question": "When did the first staff member start working?",
        "query": "MATCH (project_staff:`tracking_grants_for_research.Project_Staff`)\nRETURN project_staff.date_from\nORDER BY project_staff.date_from ASC\nLIMIT 1",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                "1970-01-02 15:35:05"
            ]
        ]
    },
    {
        "question": "Which organisation hired the most number of research staff? List the organisation id, type and detail.",
        "query": "MATCH (T1:`tracking_grants_for_research.Organisations`)-[]-(T2:`tracking_grants_for_research.Research_Staff`)\nWITH T1.organisation_id AS organisation_id, count(T1.organisation_id) AS count, T1.organisation_details AS organisation_details, T1.organisation_type AS organisation_type\nRETURN organisation_id,organisation_type,organisation_details\nORDER BY count DESC\nLIMIT 1",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                5,
                "SPON",
                "tenetur"
            ]
        ]
    },
    {
        "question": "What are the ids, types, and details of the organization with the most research staff?",
        "query": "MATCH (T1:`tracking_grants_for_research.Organisations`)-[]-(T2:`tracking_grants_for_research.Research_Staff`)\nWITH T1.organisation_id AS organisation_id, count(T1.organisation_id) AS count, T1.organisation_details AS organisation_details, T1.organisation_type AS organisation_type\nRETURN organisation_id,organisation_type,organisation_details\nORDER BY count DESC\nLIMIT 1",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                5,
                "SPON",
                "tenetur"
            ]
        ]
    },
    {
        "question": "Which document type is described with the prefix 'Initial'?",
        "query": "MATCH (document_types:`tracking_grants_for_research.Document_Types`)\nWHERE document_types.document_description =~'.*[I|i]nitial.*'\nRETURN document_types.document_type_code",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                "APP"
            ]
        ]
    },
    {
        "question": "What is the type of the document whose description starts with the word 'Initial'?",
        "query": "MATCH (document_types:`tracking_grants_for_research.Document_Types`)\nWHERE document_types.document_description =~'.*[I|i]nitial.*'\nRETURN document_types.document_type_code",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                "APP"
            ]
        ]
    },
    {
        "question": "How many documents can one grant have at most? List the grant id and number.",
        "query": "MATCH (documents:`tracking_grants_for_research.Documents`)\nWITH documents.grant_id AS grant_id, count(documents.grant_id) AS count\nRETURN grant_id,count\nORDER BY count DESC\nLIMIT 1",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                13,
                5
            ]
        ]
    },
    {
        "question": "For each grant id, how many documents does it have, and which one has the most?",
        "query": "MATCH (documents:`tracking_grants_for_research.Documents`)\nWITH documents.grant_id AS grant_id, count(documents.grant_id) AS count\nRETURN grant_id,count\nORDER BY count DESC\nLIMIT 1",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                13,
                5
            ]
        ]
    },
    {
        "question": "Find the organisation type description of the organisation detailed as 'quo'.",
        "query": "MATCH (T1:`tracking_grants_for_research.Organisation_Types`)-[]-(T2:`tracking_grants_for_research.Organisations`)\nWHERE T2.organisation_details = 'quo'\nRETURN T1.organisation_type_description",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                "Research"
            ]
        ]
    },
    {
        "question": "What is the type description of the organization whose detail is listed as 'quo'?",
        "query": "MATCH (T1:`tracking_grants_for_research.Organisation_Types`)-[]-(T2:`tracking_grants_for_research.Organisations`)\nWHERE T2.organisation_details = 'quo'\nRETURN T1.organisation_type_description",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                "Research"
            ]
        ]
    },
    {
        "question": "What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order.",
        "query": "MATCH (T1:`tracking_grants_for_research.Organisations`)-[]-(T2:`tracking_grants_for_research.Organisation_Types`)\nWHERE T2.organisation_type_description = 'Sponsor'\nRETURN T1.organisation_details\nORDER BY T1.organisation_details",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                "aperiam"
            ],
            [
                "consequuntur"
            ],
            [
                "eos"
            ],
            [
                "eveniet"
            ],
            [
                "officiis"
            ],
            [
                "tenetur"
            ],
            [
                "voluptas"
            ]
        ]
    },
    {
        "question": "What are the details of all organizations that are described as Sponsors and sort the results in ascending order?",
        "query": "MATCH (T1:`tracking_grants_for_research.Organisations`)-[]-(T2:`tracking_grants_for_research.Organisation_Types`)\nWHERE T2.organisation_type_description = 'Sponsor'\nRETURN T1.organisation_details\nORDER BY T1.organisation_details",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                "aperiam"
            ],
            [
                "consequuntur"
            ],
            [
                "eos"
            ],
            [
                "eveniet"
            ],
            [
                "officiis"
            ],
            [
                "tenetur"
            ],
            [
                "voluptas"
            ]
        ]
    },
    {
        "question": "What is the last date of the staff leaving the projects?",
        "query": "MATCH (project_staff:`tracking_grants_for_research.Project_Staff`)\nRETURN project_staff.date_to\nORDER BY project_staff.date_to DESC\nLIMIT 1",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                "2016-03-15 00:33:18"
            ]
        ]
    },
    {
        "question": "What is the last date that a staff member left a project?",
        "query": "MATCH (project_staff:`tracking_grants_for_research.Project_Staff`)\nRETURN project_staff.date_to\nORDER BY project_staff.date_to DESC\nLIMIT 1",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                "2016-03-15 00:33:18"
            ]
        ]
    },
    {
        "question": "List the research staff details, and order in ascending order.",
        "query": "MATCH (research_staff:`tracking_grants_for_research.Research_Staff`)\nRETURN research_staff.staff_details\nORDER BY research_staff.staff_details ASC",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                "ab"
            ],
            [
                "accusamus"
            ],
            [
                "animi"
            ],
            [
                "aspernatur"
            ],
            [
                "consequatur"
            ],
            [
                "consequatur"
            ],
            [
                "dicta"
            ],
            [
                "dolor"
            ],
            [
                "doloribus"
            ],
            [
                "est"
            ],
            [
                "iure"
            ],
            [
                "nulla"
            ],
            [
                "quo"
            ],
            [
                "sint"
            ],
            [
                "voluptatibus"
            ]
        ]
    },
    {
        "question": "What details are there on the research staff? List the result in ascending alphabetical order.",
        "query": "MATCH (research_staff:`tracking_grants_for_research.Research_Staff`)\nRETURN research_staff.staff_details\nORDER BY research_staff.staff_details ASC",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                "ab"
            ],
            [
                "accusamus"
            ],
            [
                "animi"
            ],
            [
                "aspernatur"
            ],
            [
                "consequatur"
            ],
            [
                "consequatur"
            ],
            [
                "dicta"
            ],
            [
                "dolor"
            ],
            [
                "doloribus"
            ],
            [
                "est"
            ],
            [
                "iure"
            ],
            [
                "nulla"
            ],
            [
                "quo"
            ],
            [
                "sint"
            ],
            [
                "voluptatibus"
            ]
        ]
    },
    {
        "question": "How many tasks are there in total?",
        "query": "MATCH (tasks:`tracking_grants_for_research.Tasks`)\nRETURN count(*)",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "How many tasks are there?",
        "query": "MATCH (tasks:`tracking_grants_for_research.Tasks`)\nRETURN count(*)",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "How many tasks does each project have? List the task count and the project detail.",
        "query": "MATCH (T1:`tracking_grants_for_research.Projects`)-[]-(T2:`tracking_grants_for_research.Tasks`)\nWITH count(T1.project_id) AS count, T1.project_details AS project_details\nRETURN count,project_details",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                1,
                "porro"
            ],
            [
                1,
                "et"
            ],
            [
                1,
                "sint"
            ],
            [
                1,
                "doloremque"
            ],
            [
                1,
                "vel"
            ],
            [
                1,
                "deserunt"
            ],
            [
                1,
                "deleniti"
            ],
            [
                1,
                "ad"
            ],
            [
                1,
                "sed"
            ],
            [
                1,
                "consectetur"
            ],
            [
                1,
                "impedit"
            ],
            [
                1,
                "omnis"
            ],
            [
                1,
                "non"
            ],
            [
                1,
                "beatae"
            ],
            [
                1,
                "dolorem"
            ]
        ]
    },
    {
        "question": "For each project id, how many tasks are there?",
        "query": "MATCH (T1:`tracking_grants_for_research.Projects`)-[]-(T2:`tracking_grants_for_research.Tasks`)\nWITH count(T1.project_id) AS count, T1.project_details AS project_details\nRETURN count,project_details",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                1,
                "porro"
            ],
            [
                1,
                "et"
            ],
            [
                1,
                "sint"
            ],
            [
                1,
                "doloremque"
            ],
            [
                1,
                "vel"
            ],
            [
                1,
                "deserunt"
            ],
            [
                1,
                "deleniti"
            ],
            [
                1,
                "ad"
            ],
            [
                1,
                "sed"
            ],
            [
                1,
                "consectetur"
            ],
            [
                1,
                "impedit"
            ],
            [
                1,
                "omnis"
            ],
            [
                1,
                "non"
            ],
            [
                1,
                "beatae"
            ],
            [
                1,
                "dolorem"
            ]
        ]
    },
    {
        "question": "Which role is most common for the staff?",
        "query": "MATCH (project_staff:`tracking_grants_for_research.Project_Staff`)\nWITH project_staff.role_code AS role_code, count(project_staff.role_code) AS count\nRETURN role_code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                "researcher"
            ]
        ]
    },
    {
        "question": "What is the most common role for the staff?",
        "query": "MATCH (project_staff:`tracking_grants_for_research.Project_Staff`)\nWITH project_staff.role_code AS role_code, count(project_staff.role_code) AS count\nRETURN role_code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "tracking_grants_for_research",
        "answers": [
            [
                "researcher"
            ]
        ]
    },
    {
        "question": "How many friends does Dan have?",
        "query": "MATCH (T1:`network_2.Person`)-[]-(T2:`network_2.PersonFriend`)\nWHERE T1.name = 'Dan'\nRETURN count(T2.friend)",
        "db_id": "network_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many friends does Dan have?",
        "query": "MATCH (T1:`network_2.Person`)-[]-(T2:`network_2.PersonFriend`)\nWHERE T1.name = 'Dan'\nRETURN count(T2.friend)",
        "db_id": "network_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many females does this network has?",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.gender = 'female'\nRETURN count(*)",
        "db_id": "network_2",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "How many females are in the network?",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.gender = 'female'\nRETURN count(*)",
        "db_id": "network_2",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "What is the average age for all person?",
        "query": "MATCH (person:`network_2.Person`)\nRETURN avg(person.age)",
        "db_id": "network_2",
        "answers": [
            [
                32.75
            ]
        ]
    },
    {
        "question": "What is the average age for all people in the table?",
        "query": "MATCH (person:`network_2.Person`)\nRETURN avg(person.age)",
        "db_id": "network_2",
        "answers": [
            [
                32.75
            ]
        ]
    },
    {
        "question": "How many different cities are they from?",
        "query": "MATCH (person:`network_2.Person`)\nRETURN count(DISTINCT person.city)",
        "db_id": "network_2",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "How many different cities do people originate from?",
        "query": "MATCH (person:`network_2.Person`)\nRETURN count(DISTINCT person.city)",
        "db_id": "network_2",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "How many type of jobs do they have?",
        "query": "MATCH (person:`network_2.Person`)\nRETURN count(DISTINCT person.job)",
        "db_id": "network_2",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "How many different jobs are listed?",
        "query": "MATCH (person:`network_2.Person`)\nRETURN count(DISTINCT person.job)",
        "db_id": "network_2",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "How old is the doctor named Zach?",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.job = 'doctor' AND person.name = 'Zach'\nRETURN person.age",
        "db_id": "network_2",
        "answers": [
            [
                45
            ]
        ]
    },
    {
        "question": "What is the age of the doctor named Zach?",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.job = 'doctor' AND person.name = 'Zach'\nRETURN person.age",
        "db_id": "network_2",
        "answers": [
            [
                45
            ]
        ]
    },
    {
        "question": "Who is the person whose age is below 30?",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.age < 30\nRETURN person.name",
        "db_id": "network_2",
        "answers": [
            [
                "Alice"
            ],
            [
                "Dan"
            ]
        ]
    },
    {
        "question": "What is the name of the person whose age is below 30?",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.age < 30\nRETURN person.name",
        "db_id": "network_2",
        "answers": [
            [
                "Alice"
            ],
            [
                "Dan"
            ]
        ]
    },
    {
        "question": "How many people whose age is greater 30 and job is engineer?",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.age > 30 AND person.job = 'engineer'\nRETURN count(*)",
        "db_id": "network_2",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "HOw many engineers are older than 30?",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.age > 30 AND person.job = 'engineer'\nRETURN count(*)",
        "db_id": "network_2",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "Find the number of people who is under 40 for each gender.",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.age < 40\nWITH person.gender AS gender, count(person.gender) AS count\nRETURN count,gender",
        "db_id": "network_2",
        "answers": [
            [
                2,
                "female"
            ],
            [
                1,
                "male"
            ]
        ]
    },
    {
        "question": "How many people are under 40 for each gender?",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.age < 40\nWITH person.gender AS gender, count(person.gender) AS count\nRETURN count,gender",
        "db_id": "network_2",
        "answers": [
            [
                2,
                "female"
            ],
            [
                1,
                "male"
            ]
        ]
    },
    {
        "question": "list the name, job title of all people ordered by their names.",
        "query": "MATCH (person:`network_2.Person`)\nRETURN person.name,person.job\nORDER BY person.name",
        "db_id": "network_2",
        "answers": [
            [
                "Alice",
                "student"
            ],
            [
                "Bob",
                "engineer"
            ],
            [
                "Dan",
                "student"
            ],
            [
                "Zach",
                "doctor"
            ]
        ]
    },
    {
        "question": "What are the names and job titles of every person ordered alphabetically by name?",
        "query": "MATCH (person:`network_2.Person`)\nRETURN person.name,person.job\nORDER BY person.name",
        "db_id": "network_2",
        "answers": [
            [
                "Alice",
                "student"
            ],
            [
                "Bob",
                "engineer"
            ],
            [
                "Dan",
                "student"
            ],
            [
                "Zach",
                "doctor"
            ]
        ]
    },
    {
        "question": "Find the names of all person sorted in the descending order using age.",
        "query": "MATCH (person:`network_2.Person`)\nRETURN person.name\nORDER BY person.age DESC",
        "db_id": "network_2",
        "answers": [
            [
                "Zach"
            ],
            [
                "Bob"
            ],
            [
                "Dan"
            ],
            [
                "Alice"
            ]
        ]
    },
    {
        "question": "What are the names of everybody sorted by age in descending order?",
        "query": "MATCH (person:`network_2.Person`)\nRETURN person.name\nORDER BY person.age DESC",
        "db_id": "network_2",
        "answers": [
            [
                "Zach"
            ],
            [
                "Bob"
            ],
            [
                "Dan"
            ],
            [
                "Alice"
            ]
        ]
    },
    {
        "question": "Find the name and age of all males in order of their age.",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.gender = 'male'\nRETURN person.name\nORDER BY person.age",
        "db_id": "network_2",
        "answers": [
            [
                "Bob"
            ],
            [
                "Zach"
            ]
        ]
    },
    {
        "question": "What is the name and age of every male? Order the results by age.",
        "query": "MATCH (person:`network_2.Person`)\nWHERE person.gender = 'male'\nRETURN person.name\nORDER BY person.age",
        "db_id": "network_2",
        "answers": [
            [
                "Bob"
            ],
            [
                "Zach"
            ]
        ]
    },
    {
        "question": "Find the person who has exactly one friend.",
        "query": "MATCH (personfriend:`network_2.PersonFriend`)\nWITH count(*) AS count, personfriend.name AS name\nWHERE count  = 1\nRETURN name",
        "db_id": "network_2",
        "answers": [
            [
                "Alice"
            ],
            [
                "Bob"
            ]
        ]
    },
    {
        "question": "What are the names of everybody who has exactly one friend?",
        "query": "MATCH (personfriend:`network_2.PersonFriend`)\nWITH count(*) AS count, personfriend.name AS name\nWHERE count  = 1\nRETURN name",
        "db_id": "network_2",
        "answers": [
            [
                "Alice"
            ],
            [
                "Bob"
            ]
        ]
    },
    {
        "question": "What is the total number of people who has no friend living in the city of Austin.",
        "query": "MATCH (personfriend:`network_2.PersonFriend`)\nWHERE NOT (personfriend:`network_2.PersonFriend`)-[]-(:`network_2.Person { city : 'Austin' }`)\nRETURN count(DISTINCT personfriend.name)",
        "db_id": "network_2",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "What is the total number of people who have no friends living in Austin?",
        "query": "MATCH (personfriend:`network_2.PersonFriend`)\nWHERE NOT (personfriend:`network_2.PersonFriend`)-[]-(:`network_2.Person { city : 'Austin' }`)\nRETURN count(DISTINCT personfriend.name)",
        "db_id": "network_2",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "How many members are there?",
        "query": "MATCH (member:`decoration_competition.member`)\nRETURN count(*)",
        "db_id": "decoration_competition",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "List the names of members in ascending alphabetical order.",
        "query": "MATCH (member:`decoration_competition.member`)\nRETURN member.Name\nORDER BY member.Name ASC",
        "db_id": "decoration_competition",
        "answers": [
            [
                "Arnold Palmer"
            ],
            [
                "Billy Casper"
            ],
            [
                "Bobby Nichols"
            ],
            [
                "Homero Blancas"
            ],
            [
                "J. C. Snead"
            ],
            [
                "Jack Nicklaus"
            ],
            [
                "Lee Trevino"
            ],
            [
                "Pat Fitzsimons"
            ],
            [
                "Tom Watson"
            ],
            [
                "Tom Weiskopf"
            ]
        ]
    },
    {
        "question": "What are the names and countries of members?",
        "query": "MATCH (member:`decoration_competition.member`)\nRETURN member.Name,member.Country",
        "db_id": "decoration_competition",
        "answers": [
            [
                "Jack Nicklaus",
                "United States"
            ],
            [
                "Billy Casper",
                "United States"
            ],
            [
                "Arnold Palmer",
                "Canada"
            ],
            [
                "Tom Watson",
                "United States"
            ],
            [
                "Homero Blancas",
                "United States"
            ],
            [
                "Pat Fitzsimons",
                "Canada"
            ],
            [
                "Bobby Nichols",
                "Canada"
            ],
            [
                "J. C. Snead",
                "Canada"
            ],
            [
                "Lee Trevino",
                "United States"
            ],
            [
                "Tom Weiskopf",
                "United States"
            ]
        ]
    },
    {
        "question": "Show the names of members whose country is \"United States\" or \"Canada\".",
        "query": "MATCH (member:`decoration_competition.member`)\nWHERE member.Country = 'United States' OR member.Country = 'Canada'\nRETURN member.Name",
        "db_id": "decoration_competition",
        "answers": [
            [
                "Jack Nicklaus"
            ],
            [
                "Billy Casper"
            ],
            [
                "Arnold Palmer"
            ],
            [
                "Tom Watson"
            ],
            [
                "Homero Blancas"
            ],
            [
                "Pat Fitzsimons"
            ],
            [
                "Bobby Nichols"
            ],
            [
                "J. C. Snead"
            ],
            [
                "Lee Trevino"
            ],
            [
                "Tom Weiskopf"
            ]
        ]
    },
    {
        "question": "Show the different countries and the number of members from each.",
        "query": "MATCH (member:`decoration_competition.member`)\nWITH member.Country AS Country, count(member.Country) AS count\nRETURN Country,count",
        "db_id": "decoration_competition",
        "answers": [
            [
                "United States",
                6
            ],
            [
                "Canada",
                4
            ]
        ]
    },
    {
        "question": "Show the most common country across members.",
        "query": "MATCH (member:`decoration_competition.member`)\nWITH member.Country AS Country, count(member.Country) AS count\nRETURN Country\nORDER BY count DESC\nLIMIT 1",
        "db_id": "decoration_competition",
        "answers": [
            [
                "United States"
            ]
        ]
    },
    {
        "question": "Which countries have more than two members?",
        "query": "MATCH (member:`decoration_competition.member`)\nWITH member.Country AS Country, count(*) AS count\nWHERE count  > 2\nRETURN Country",
        "db_id": "decoration_competition",
        "answers": [
            [
                "United States"
            ],
            [
                "Canada"
            ]
        ]
    },
    {
        "question": "Show the leader names and locations of colleges.",
        "query": "MATCH (college:`decoration_competition.college`)\nRETURN college.Leader_Name,college.College_Location",
        "db_id": "decoration_competition",
        "answers": [
            [
                "Ousame Tounkara",
                "Ottawa"
            ],
            [
                "Ryan Thelwell",
                "Minnesota"
            ],
            [
                "Andre Arlain",
                "St. Francis Xavier"
            ],
            [
                "Samir Chahine",
                "McGill"
            ],
            [
                "Roger Dunbrack",
                "Western Ontario"
            ]
        ]
    },
    {
        "question": "Show the names of members and names of colleges they go to.",
        "query": "MATCH (T1:`decoration_competition.college`)-[]-(T2:`decoration_competition.member`)\nRETURN T2.Name,T1.Name",
        "db_id": "decoration_competition",
        "answers": [
            [
                "Jack Nicklaus",
                "Saskatchewan School"
            ],
            [
                "Billy Casper",
                "Saskatchewan School"
            ],
            [
                "Homero Blancas",
                "B.C. School"
            ],
            [
                "Lee Trevino",
                "Calgary School"
            ],
            [
                "Tom Weiskopf",
                "Calgary School"
            ],
            [
                "Arnold Palmer",
                "Edmonton School"
            ],
            [
                "J. C. Snead",
                "Edmonton School"
            ],
            [
                "Tom Watson",
                "Edmonton School"
            ],
            [
                "Bobby Nichols",
                "Toronto School"
            ],
            [
                "Pat Fitzsimons",
                "Toronto School"
            ]
        ]
    },
    {
        "question": "Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.",
        "query": "MATCH (T1:`decoration_competition.college`)-[]-(T2:`decoration_competition.member`)\nRETURN T2.Name,T1.College_Location\nORDER BY T2.Name ASC",
        "db_id": "decoration_competition",
        "answers": [
            [
                "Arnold Palmer",
                "McGill"
            ],
            [
                "Billy Casper",
                "Ottawa"
            ],
            [
                "Bobby Nichols",
                "Western Ontario"
            ],
            [
                "Homero Blancas",
                "Minnesota"
            ],
            [
                "J. C. Snead",
                "McGill"
            ],
            [
                "Jack Nicklaus",
                "Ottawa"
            ],
            [
                "Lee Trevino",
                "St. Francis Xavier"
            ],
            [
                "Pat Fitzsimons",
                "Western Ontario"
            ],
            [
                "Tom Watson",
                "McGill"
            ],
            [
                "Tom Weiskopf",
                "St. Francis Xavier"
            ]
        ]
    },
    {
        "question": "Show the distinct leader names of colleges associated with members from country \"Canada\".",
        "query": "MATCH (T1:`decoration_competition.college`)-[]-(T2:`decoration_competition.member`)\nWHERE T2.Country = 'Canada'\nRETURN DISTINCT T1.Leader_Name",
        "db_id": "decoration_competition",
        "answers": [
            [
                "Samir Chahine"
            ],
            [
                "Roger Dunbrack"
            ]
        ]
    },
    {
        "question": "Show the names of members and the decoration themes they have.",
        "query": "MATCH (T1:`decoration_competition.member`)-[]-(T2:`decoration_competition.round`)\nRETURN T1.Name,T2.Decoration_Theme",
        "db_id": "decoration_competition",
        "answers": [
            [
                "Jack Nicklaus",
                "Walk on the Moon"
            ],
            [
                "Billy Casper",
                "Soft Dream"
            ],
            [
                "Tom Weiskopf",
                "Dark Nights"
            ],
            [
                "Tom Watson",
                "Sweetie"
            ],
            [
                "Pat Fitzsimons",
                "Summer"
            ],
            [
                "Lee Trevino",
                "Happiness"
            ]
        ]
    },
    {
        "question": "Show the names of members that have a rank in round higher than 3.",
        "query": "MATCH (T1:`decoration_competition.member`)-[]-(T2:`decoration_competition.round`)\nWHERE T2.Rank_in_Round > 3\nRETURN T1.Name",
        "db_id": "decoration_competition",
        "answers": [
            [
                "Tom Weiskopf"
            ]
        ]
    },
    {
        "question": "Show the names of members in ascending order of their rank in rounds.",
        "query": "MATCH (T1:`decoration_competition.member`)-[]-(T2:`decoration_competition.round`)\nRETURN T1.Name\nORDER BY T2.Rank_in_Round ASC",
        "db_id": "decoration_competition",
        "answers": [
            [
                "Jack Nicklaus"
            ],
            [
                "Lee Trevino"
            ],
            [
                "Billy Casper"
            ],
            [
                "Pat Fitzsimons"
            ],
            [
                "Tom Watson"
            ],
            [
                "Tom Weiskopf"
            ]
        ]
    },
    {
        "question": "List the names of members who did not participate in any round.",
        "query": "MATCH (member:`decoration_competition.member`)\nWHERE NOT (member:`decoration_competition.member`)-[]-(:`decoration_competition.round`)\nRETURN member.Name",
        "db_id": "decoration_competition",
        "answers": [
            [
                "Arnold Palmer"
            ],
            [
                "Homero Blancas"
            ],
            [
                "Bobby Nichols"
            ],
            [
                "J. C. Snead"
            ]
        ]
    },
    {
        "question": "Find the name and access counts of all documents, in alphabetic order of the document name.",
        "query": "MATCH (documents:`document_management.Documents`)\nRETURN documents.document_name,documents.access_count\nORDER BY documents.document_name",
        "db_id": "document_management",
        "answers": [
            [
                "David CV",
                6345
            ],
            [
                "Fall Sails",
                7509
            ],
            [
                "How to cook pasta",
                2045
            ],
            [
                "Humanity: a fact",
                3479
            ],
            [
                "Joe CV",
                2294
            ],
            [
                "John CV",
                5924
            ],
            [
                "Learning Database",
                3769
            ],
            [
                "Learning English",
                1864
            ],
            [
                "Learning Japanese",
                2910
            ],
            [
                "Life about Claude Monet",
                1219
            ],
            [
                "Relationships between History and Arts",
                9948
            ],
            [
                "Research about Art history",
                8208
            ],
            [
                "Spring Sails",
                3289
            ],
            [
                "Summer Sails",
                6661
            ],
            [
                "Winter Sails",
                8623
            ]
        ]
    },
    {
        "question": "What are the names of all the documents, as well as the access counts of each, ordered alphabetically?",
        "query": "MATCH (documents:`document_management.Documents`)\nRETURN documents.document_name,documents.access_count\nORDER BY documents.document_name",
        "db_id": "document_management",
        "answers": [
            [
                "David CV",
                6345
            ],
            [
                "Fall Sails",
                7509
            ],
            [
                "How to cook pasta",
                2045
            ],
            [
                "Humanity: a fact",
                3479
            ],
            [
                "Joe CV",
                2294
            ],
            [
                "John CV",
                5924
            ],
            [
                "Learning Database",
                3769
            ],
            [
                "Learning English",
                1864
            ],
            [
                "Learning Japanese",
                2910
            ],
            [
                "Life about Claude Monet",
                1219
            ],
            [
                "Relationships between History and Arts",
                9948
            ],
            [
                "Research about Art history",
                8208
            ],
            [
                "Spring Sails",
                3289
            ],
            [
                "Summer Sails",
                6661
            ],
            [
                "Winter Sails",
                8623
            ]
        ]
    },
    {
        "question": "Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?",
        "query": "MATCH (documents:`document_management.Documents`)\nRETURN documents.document_name,documents.access_count\nORDER BY documents.access_count DESC\nLIMIT 1",
        "db_id": "document_management",
        "answers": [
            [
                "Relationships between History and Arts",
                9948
            ]
        ]
    },
    {
        "question": "What is the name of the document which has been accessed the most times, as well as the number of times it has been accessed?",
        "query": "MATCH (documents:`document_management.Documents`)\nRETURN documents.document_name,documents.access_count\nORDER BY documents.access_count DESC\nLIMIT 1",
        "db_id": "document_management",
        "answers": [
            [
                "Relationships between History and Arts",
                9948
            ]
        ]
    },
    {
        "question": "Find the types of documents with more than 4 documents.",
        "query": "MATCH (documents:`document_management.Documents`)\nWITH count(*) AS count, documents.document_type_code AS document_type_code\nWHERE count  > 4\nRETURN document_type_code",
        "db_id": "document_management",
        "answers": [
            [
                "Book"
            ]
        ]
    },
    {
        "question": "What are the codes of types of documents of which there are for or more?",
        "query": "MATCH (documents:`document_management.Documents`)\nWITH count(*) AS count, documents.document_type_code AS document_type_code\nWHERE count  > 4\nRETURN document_type_code",
        "db_id": "document_management",
        "answers": [
            [
                "Book"
            ]
        ]
    },
    {
        "question": "What is the average access count of documents?",
        "query": "MATCH (documents:`document_management.Documents`)\nRETURN avg(documents.access_count)",
        "db_id": "document_management",
        "answers": [
            [
                4939.133333333333
            ]
        ]
    },
    {
        "question": "Find the average access count across all documents?",
        "query": "MATCH (documents:`document_management.Documents`)\nRETURN avg(documents.access_count)",
        "db_id": "document_management",
        "answers": [
            [
                4939.133333333333
            ]
        ]
    },
    {
        "question": "What is the type of the document named \"David CV\"?",
        "query": "MATCH (documents:`document_management.Documents`)\nWHERE documents.document_name = 'David CV'\nRETURN documents.document_type_code",
        "db_id": "document_management",
        "answers": [
            [
                "CV"
            ]
        ]
    },
    {
        "question": "Return the type code of the document named \"David CV\".",
        "query": "MATCH (documents:`document_management.Documents`)\nWHERE documents.document_name = 'David CV'\nRETURN documents.document_type_code",
        "db_id": "document_management",
        "answers": [
            [
                "CV"
            ]
        ]
    },
    {
        "question": "Find all the name of documents without any sections.",
        "query": "MATCH (documents:`document_management.Documents`)\nWHERE NOT (documents:`document_management.Documents`)-[]-(:`document_management.Document_Sections`)\nRETURN documents.document_name",
        "db_id": "document_management",
        "answers": [
            [
                "Learning Database"
            ],
            [
                "How to cook pasta"
            ],
            [
                "Humanity: a fact"
            ],
            [
                "Life about Claude Monet"
            ]
        ]
    },
    {
        "question": "What are the names of documents that do not have any sections?",
        "query": "MATCH (documents:`document_management.Documents`)\nWHERE NOT (documents:`document_management.Documents`)-[]-(:`document_management.Document_Sections`)\nRETURN documents.document_name",
        "db_id": "document_management",
        "answers": [
            [
                "Learning Database"
            ],
            [
                "How to cook pasta"
            ],
            [
                "Humanity: a fact"
            ],
            [
                "Life about Claude Monet"
            ]
        ]
    },
    {
        "question": "List all the image name and URLs in the order of their names.",
        "query": "MATCH (images:`document_management.Images`)\nRETURN images.image_name,images.image_url\nORDER BY images.image_name",
        "db_id": "document_management",
        "answers": [
            [
                "chapter1",
                "http://gaylord.info/1.jpg"
            ],
            [
                "chapter2",
                "http://www.hellerreinger.com/1.jpg"
            ],
            [
                "chapter3",
                "http://faycummerata.net/1.jpg"
            ],
            [
                "chapter4",
                "http://haleychamplin.net/1.jpg"
            ],
            [
                "chapter5",
                "http://www.fritsch.net/1.jpg"
            ],
            [
                "data1",
                "http://sauer.com/1.jpg"
            ],
            [
                "data2",
                "http://www.heller.com/1.jpg"
            ],
            [
                "data3",
                "http://www.hermann.com/1.jpg"
            ],
            [
                "data4",
                "http://rowelakin.com/1.jpg"
            ],
            [
                "data5",
                "http://andersonluettgen.net/1.jpg"
            ],
            [
                "data6",
                "http://www.beahan.biz/1.jpg"
            ],
            [
                "top1",
                "http://www.rempelnader.com/1.jpg"
            ],
            [
                "top2",
                "http://connellykertzmann.org/1.jpg"
            ],
            [
                "top3",
                "http://www.bernierconnelly.com/1.jpg"
            ],
            [
                "top4",
                "http://abernathyboehm.com/1.jpg"
            ]
        ]
    },
    {
        "question": "What are the names and urls of images, sorted alphabetically?",
        "query": "MATCH (images:`document_management.Images`)\nRETURN images.image_name,images.image_url\nORDER BY images.image_name",
        "db_id": "document_management",
        "answers": [
            [
                "chapter1",
                "http://gaylord.info/1.jpg"
            ],
            [
                "chapter2",
                "http://www.hellerreinger.com/1.jpg"
            ],
            [
                "chapter3",
                "http://faycummerata.net/1.jpg"
            ],
            [
                "chapter4",
                "http://haleychamplin.net/1.jpg"
            ],
            [
                "chapter5",
                "http://www.fritsch.net/1.jpg"
            ],
            [
                "data1",
                "http://sauer.com/1.jpg"
            ],
            [
                "data2",
                "http://www.heller.com/1.jpg"
            ],
            [
                "data3",
                "http://www.hermann.com/1.jpg"
            ],
            [
                "data4",
                "http://rowelakin.com/1.jpg"
            ],
            [
                "data5",
                "http://andersonluettgen.net/1.jpg"
            ],
            [
                "data6",
                "http://www.beahan.biz/1.jpg"
            ],
            [
                "top1",
                "http://www.rempelnader.com/1.jpg"
            ],
            [
                "top2",
                "http://connellykertzmann.org/1.jpg"
            ],
            [
                "top3",
                "http://www.bernierconnelly.com/1.jpg"
            ],
            [
                "top4",
                "http://abernathyboehm.com/1.jpg"
            ]
        ]
    },
    {
        "question": "Find the number of users in each role.",
        "query": "MATCH (users:`document_management.Users`)\nWITH users.role_code AS role_code, count(users.role_code) AS count\nRETURN count,role_code",
        "db_id": "document_management",
        "answers": [
            [
                7,
                "PROJ-MGR"
            ],
            [
                8,
                "DBA"
            ]
        ]
    },
    {
        "question": "What are the different role codes for users, and how many users have each?",
        "query": "MATCH (users:`document_management.Users`)\nWITH users.role_code AS role_code, count(users.role_code) AS count\nRETURN count,role_code",
        "db_id": "document_management",
        "answers": [
            [
                7,
                "PROJ-MGR"
            ],
            [
                8,
                "DBA"
            ]
        ]
    },
    {
        "question": "What document types have more than 2 corresponding documents?",
        "query": "MATCH (documents:`document_management.Documents`)\nWITH count(*) AS count, documents.document_type_code AS document_type_code\nWHERE count  > 2\nRETURN document_type_code",
        "db_id": "document_management",
        "answers": [
            [
                "Book"
            ],
            [
                "Paper"
            ],
            [
                "Advertisement"
            ],
            [
                "CV"
            ]
        ]
    },
    {
        "question": "Give the codes of document types that have more than 2 corresponding documents.",
        "query": "MATCH (documents:`document_management.Documents`)\nWITH count(*) AS count, documents.document_type_code AS document_type_code\nWHERE count  > 2\nRETURN document_type_code",
        "db_id": "document_management",
        "answers": [
            [
                "Book"
            ],
            [
                "Paper"
            ],
            [
                "Advertisement"
            ],
            [
                "CV"
            ]
        ]
    },
    {
        "question": "How many companies are there?",
        "query": "MATCH (companies:`company_office.Companies`)\nRETURN count(*)",
        "db_id": "company_office",
        "answers": [
            [
                19
            ]
        ]
    },
    {
        "question": "Count the number of companies.",
        "query": "MATCH (companies:`company_office.Companies`)\nRETURN count(*)",
        "db_id": "company_office",
        "answers": [
            [
                19
            ]
        ]
    },
    {
        "question": "List the names of companies in descending order of market value.",
        "query": "MATCH (companies:`company_office.Companies`)\nRETURN companies.name\nORDER BY companies.Market_Value_billion DESC",
        "db_id": "company_office",
        "answers": [
            [
                "Santander Group"
            ],
            [
                "BNP Paribas"
            ],
            [
                "ExxonMobil"
            ],
            [
                "PetroChina"
            ],
            [
                "Industrial and Commercial Bank of China"
            ],
            [
                "Petrobras"
            ],
            [
                "China Construction Bank"
            ],
            [
                "General Electric"
            ],
            [
                "Royal Dutch Shell"
            ],
            [
                "Berkshire Hathaway"
            ],
            [
                "Chevron"
            ],
            [
                "Walmart"
            ],
            [
                "HSBC"
            ],
            [
                "JPMorgan Chase"
            ],
            [
                "Gazprom"
            ],
            [
                "Wells Fargo"
            ],
            [
                "AT&T Inc."
            ],
            [
                "Total"
            ],
            [
                "Citigroup"
            ]
        ]
    },
    {
        "question": "Sort the company names in descending order of the company's market value.",
        "query": "MATCH (companies:`company_office.Companies`)\nRETURN companies.name\nORDER BY companies.Market_Value_billion DESC",
        "db_id": "company_office",
        "answers": [
            [
                "Santander Group"
            ],
            [
                "BNP Paribas"
            ],
            [
                "ExxonMobil"
            ],
            [
                "PetroChina"
            ],
            [
                "Industrial and Commercial Bank of China"
            ],
            [
                "Petrobras"
            ],
            [
                "China Construction Bank"
            ],
            [
                "General Electric"
            ],
            [
                "Royal Dutch Shell"
            ],
            [
                "Berkshire Hathaway"
            ],
            [
                "Chevron"
            ],
            [
                "Walmart"
            ],
            [
                "HSBC"
            ],
            [
                "JPMorgan Chase"
            ],
            [
                "Gazprom"
            ],
            [
                "Wells Fargo"
            ],
            [
                "AT&T Inc."
            ],
            [
                "Total"
            ],
            [
                "Citigroup"
            ]
        ]
    },
    {
        "question": "What are the names of companies whose headquarters are not \"USA\"?",
        "query": "MATCH (companies:`company_office.Companies`)\nWHERE companies.Headquarters <> 'USA'\nRETURN companies.name",
        "db_id": "company_office",
        "answers": [
            [
                "HSBC"
            ],
            [
                "Royal Dutch Shell"
            ],
            [
                "PetroChina"
            ],
            [
                "Industrial and Commercial Bank of China"
            ],
            [
                "Petrobras"
            ],
            [
                "BNP Paribas"
            ],
            [
                "Santander Group"
            ],
            [
                "Gazprom"
            ],
            [
                "China Construction Bank"
            ],
            [
                "Total"
            ]
        ]
    },
    {
        "question": "Find the names of the companies whose headquarters are not located in \"USA\".",
        "query": "MATCH (companies:`company_office.Companies`)\nWHERE companies.Headquarters <> 'USA'\nRETURN companies.name",
        "db_id": "company_office",
        "answers": [
            [
                "HSBC"
            ],
            [
                "Royal Dutch Shell"
            ],
            [
                "PetroChina"
            ],
            [
                "Industrial and Commercial Bank of China"
            ],
            [
                "Petrobras"
            ],
            [
                "BNP Paribas"
            ],
            [
                "Santander Group"
            ],
            [
                "Gazprom"
            ],
            [
                "China Construction Bank"
            ],
            [
                "Total"
            ]
        ]
    },
    {
        "question": "What are the name and assets of each company, sorted in ascending order of company name?",
        "query": "MATCH (companies:`company_office.Companies`)\nRETURN companies.name,companies.Assets_billion\nORDER BY companies.name ASC",
        "db_id": "company_office",
        "answers": [
            [
                "AT&T Inc.",
                268.5
            ],
            [
                "BNP Paribas",
                2680.7
            ],
            [
                "Berkshire Hathaway",
                372.2
            ],
            [
                "Chevron",
                184.8
            ],
            [
                "China Construction Bank",
                1408.0
            ],
            [
                "Citigroup",
                1913.9
            ],
            [
                "ExxonMobil",
                302.5
            ],
            [
                "Gazprom",
                275.9
            ],
            [
                "General Electric",
                751.2
            ],
            [
                "HSBC",
                2467.9
            ],
            [
                "Industrial and Commercial Bank of China",
                1723.5
            ],
            [
                "JPMorgan Chase",
                2117.6
            ],
            [
                "PetroChina",
                251.3
            ],
            [
                "Petrobras",
                313.2
            ],
            [
                "Royal Dutch Shell",
                317.2
            ],
            [
                "Santander Group",
                1570.6
            ],
            [
                "Total",
                192.8
            ],
            [
                "Walmart",
                180.7
            ],
            [
                "Wells Fargo",
                1258.1
            ]
        ]
    },
    {
        "question": "List the name and assets of each company in ascending order of company name.",
        "query": "MATCH (companies:`company_office.Companies`)\nRETURN companies.name,companies.Assets_billion\nORDER BY companies.name ASC",
        "db_id": "company_office",
        "answers": [
            [
                "AT&T Inc.",
                268.5
            ],
            [
                "BNP Paribas",
                2680.7
            ],
            [
                "Berkshire Hathaway",
                372.2
            ],
            [
                "Chevron",
                184.8
            ],
            [
                "China Construction Bank",
                1408.0
            ],
            [
                "Citigroup",
                1913.9
            ],
            [
                "ExxonMobil",
                302.5
            ],
            [
                "Gazprom",
                275.9
            ],
            [
                "General Electric",
                751.2
            ],
            [
                "HSBC",
                2467.9
            ],
            [
                "Industrial and Commercial Bank of China",
                1723.5
            ],
            [
                "JPMorgan Chase",
                2117.6
            ],
            [
                "PetroChina",
                251.3
            ],
            [
                "Petrobras",
                313.2
            ],
            [
                "Royal Dutch Shell",
                317.2
            ],
            [
                "Santander Group",
                1570.6
            ],
            [
                "Total",
                192.8
            ],
            [
                "Walmart",
                180.7
            ],
            [
                "Wells Fargo",
                1258.1
            ]
        ]
    },
    {
        "question": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\".",
        "query": "MATCH (companies:`company_office.Companies`)\nWHERE companies.Industry <> 'Banking'\nRETURN max(companies.Sales_billion),min(companies.Sales_billion)",
        "db_id": "company_office",
        "answers": [
            [
                421.8,
                98.7
            ]
        ]
    },
    {
        "question": "Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry.",
        "query": "MATCH (companies:`company_office.Companies`)\nWHERE companies.Industry <> 'Banking'\nRETURN max(companies.Sales_billion),min(companies.Sales_billion)",
        "db_id": "company_office",
        "answers": [
            [
                421.8,
                98.7
            ]
        ]
    },
    {
        "question": "How many different industries are the companies in?",
        "query": "MATCH (companies:`company_office.Companies`)\nRETURN count(DISTINCT companies.Industry)",
        "db_id": "company_office",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Count the number of distinct company industries.",
        "query": "MATCH (companies:`company_office.Companies`)\nRETURN count(DISTINCT companies.Industry)",
        "db_id": "company_office",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "List the names of buildings in descending order of building height.",
        "query": "MATCH (buildings:`company_office.buildings`)\nRETURN buildings.name\nORDER BY buildings.Height DESC",
        "db_id": "company_office",
        "answers": [
            [
                "Torre Reforma"
            ],
            [
                "Reforma 432"
            ],
            [
                "Torre KOI"
            ],
            [
                "Corporativo BBVA Bancomer"
            ],
            [
                "Torre Mitikah"
            ],
            [
                "Punto Chapultepec"
            ],
            [
                "Residencial Vidalta Torre Altaire 3"
            ],
            [
                "Reforma 90"
            ],
            [
                "Residencial Vidalta Torre Altaire 2"
            ],
            [
                "Ritz-Carlton Mexico City"
            ],
            [
                "LIU East"
            ],
            [
                "Torre New York Life"
            ]
        ]
    },
    {
        "question": "What are the names of buildings sorted in descending order of building height?",
        "query": "MATCH (buildings:`company_office.buildings`)\nRETURN buildings.name\nORDER BY buildings.Height DESC",
        "db_id": "company_office",
        "answers": [
            [
                "Torre Reforma"
            ],
            [
                "Reforma 432"
            ],
            [
                "Torre KOI"
            ],
            [
                "Corporativo BBVA Bancomer"
            ],
            [
                "Torre Mitikah"
            ],
            [
                "Punto Chapultepec"
            ],
            [
                "Residencial Vidalta Torre Altaire 3"
            ],
            [
                "Reforma 90"
            ],
            [
                "Residencial Vidalta Torre Altaire 2"
            ],
            [
                "Ritz-Carlton Mexico City"
            ],
            [
                "LIU East"
            ],
            [
                "Torre New York Life"
            ]
        ]
    },
    {
        "question": "Find the stories of the building with the largest height.",
        "query": "MATCH (buildings:`company_office.buildings`)\nRETURN buildings.Stories\nORDER BY buildings.Height DESC\nLIMIT 1",
        "db_id": "company_office",
        "answers": [
            [
                57
            ]
        ]
    },
    {
        "question": "What is the stories of highest building?",
        "query": "MATCH (buildings:`company_office.buildings`)\nRETURN buildings.Stories\nORDER BY buildings.Height DESC\nLIMIT 1",
        "db_id": "company_office",
        "answers": [
            [
                57
            ]
        ]
    },
    {
        "question": "List the name of a building along with the name of a company whose office is in the building.",
        "query": "MATCH ()-[T1:`company_office.Office_locations`]-(T2:`company_office.buildings`)-[]-(T3:`company_office.Companies`)\nRETURN T3.name,T2.name",
        "db_id": "company_office",
        "answers": [
            [
                "BNP Paribas",
                "Torre Mitikah"
            ],
            [
                "HSBC",
                "Torre Mitikah"
            ],
            [
                "BNP Paribas",
                "Punto Chapultepec"
            ],
            [
                "BNP Paribas",
                "Punto Chapultepec"
            ],
            [
                "BNP Paribas",
                "Punto Chapultepec"
            ],
            [
                "Petrobras",
                "Punto Chapultepec"
            ],
            [
                "Petrobras",
                "Punto Chapultepec"
            ],
            [
                "Petrobras",
                "Punto Chapultepec"
            ],
            [
                "HSBC",
                "Punto Chapultepec"
            ],
            [
                "HSBC",
                "Punto Chapultepec"
            ],
            [
                "HSBC",
                "Punto Chapultepec"
            ],
            [
                "ExxonMobil",
                "Punto Chapultepec"
            ],
            [
                "ExxonMobil",
                "Punto Chapultepec"
            ],
            [
                "ExxonMobil",
                "Punto Chapultepec"
            ],
            [
                "Industrial and Commercial Bank of China",
                "Corporativo BBVA Bancomer"
            ],
            [
                "General Electric",
                "Corporativo BBVA Bancomer"
            ]
        ]
    },
    {
        "question": "For each company, return the company name and the name of the building its office is located in.",
        "query": "MATCH ()-[T1:`company_office.Office_locations`]-(T2:`company_office.buildings`)-[]-(T3:`company_office.Companies`)\nRETURN T3.name,T2.name",
        "db_id": "company_office",
        "answers": [
            [
                "BNP Paribas",
                "Torre Mitikah"
            ],
            [
                "HSBC",
                "Torre Mitikah"
            ],
            [
                "BNP Paribas",
                "Punto Chapultepec"
            ],
            [
                "BNP Paribas",
                "Punto Chapultepec"
            ],
            [
                "BNP Paribas",
                "Punto Chapultepec"
            ],
            [
                "Petrobras",
                "Punto Chapultepec"
            ],
            [
                "Petrobras",
                "Punto Chapultepec"
            ],
            [
                "Petrobras",
                "Punto Chapultepec"
            ],
            [
                "HSBC",
                "Punto Chapultepec"
            ],
            [
                "HSBC",
                "Punto Chapultepec"
            ],
            [
                "HSBC",
                "Punto Chapultepec"
            ],
            [
                "ExxonMobil",
                "Punto Chapultepec"
            ],
            [
                "ExxonMobil",
                "Punto Chapultepec"
            ],
            [
                "ExxonMobil",
                "Punto Chapultepec"
            ],
            [
                "Industrial and Commercial Bank of China",
                "Corporativo BBVA Bancomer"
            ],
            [
                "General Electric",
                "Corporativo BBVA Bancomer"
            ]
        ]
    },
    {
        "question": "Show the names of the buildings that have more than one company offices.",
        "query": "MATCH ()-[T1:`company_office.Office_locations`]-(T2:`company_office.buildings`)-[]-(T3:`company_office.Companies`)\nWITH count(*) AS count, T2.name AS name\nWHERE count  > 1\nRETURN name",
        "db_id": "company_office",
        "answers": [
            [
                "Torre Mitikah"
            ],
            [
                "Punto Chapultepec"
            ],
            [
                "Corporativo BBVA Bancomer"
            ]
        ]
    },
    {
        "question": "Which buildings have more than one company offices? Give me the building names.",
        "query": "MATCH ()-[T1:`company_office.Office_locations`]-(T2:`company_office.buildings`)-[]-(T3:`company_office.Companies`)\nWITH count(*) AS count, T2.name AS name\nWHERE count  > 1\nRETURN name",
        "db_id": "company_office",
        "answers": [
            [
                "Torre Mitikah"
            ],
            [
                "Punto Chapultepec"
            ],
            [
                "Corporativo BBVA Bancomer"
            ]
        ]
    },
    {
        "question": "Please show the names of the buildings whose status is \"on-hold\", in ascending order of stories.",
        "query": "MATCH (buildings:`company_office.buildings`)\nWHERE buildings.Status = \"on-hold\"\nRETURN buildings.name\nORDER BY buildings.Stories ASC",
        "db_id": "company_office",
        "answers": [
            [
                "Ritz-Carlton Mexico City"
            ],
            [
                "Reforma 90"
            ],
            [
                "Residencial Vidalta Torre Altaire 2"
            ],
            [
                "Residencial Vidalta Torre Altaire 3"
            ]
        ]
    },
    {
        "question": "Find the names of the buildings in \"on-hold\" status, and sort them in ascending order of building stories.",
        "query": "MATCH (buildings:`company_office.buildings`)\nWHERE buildings.Status = \"on-hold\"\nRETURN buildings.name\nORDER BY buildings.Stories ASC",
        "db_id": "company_office",
        "answers": [
            [
                "Ritz-Carlton Mexico City"
            ],
            [
                "Reforma 90"
            ],
            [
                "Residencial Vidalta Torre Altaire 2"
            ],
            [
                "Residencial Vidalta Torre Altaire 3"
            ]
        ]
    },
    {
        "question": "Please show each industry and the corresponding number of companies in that industry.",
        "query": "MATCH (companies:`company_office.Companies`)\nWITH count(companies.Industry) AS count, companies.Industry AS Industry\nRETURN Industry,count",
        "db_id": "company_office",
        "answers": [
            [
                "Banking",
                8
            ],
            [
                "Conglomerate",
                2
            ],
            [
                "Oil and gas",
                7
            ],
            [
                "Telecommunications",
                1
            ],
            [
                "Retailing",
                1
            ]
        ]
    },
    {
        "question": "Whah are the name of each industry and the number of companies in that industry?",
        "query": "MATCH (companies:`company_office.Companies`)\nWITH count(companies.Industry) AS count, companies.Industry AS Industry\nRETURN Industry,count",
        "db_id": "company_office",
        "answers": [
            [
                "Banking",
                8
            ],
            [
                "Conglomerate",
                2
            ],
            [
                "Oil and gas",
                7
            ],
            [
                "Telecommunications",
                1
            ],
            [
                "Retailing",
                1
            ]
        ]
    },
    {
        "question": "Please show the industries of companies in descending order of the number of companies.",
        "query": "MATCH (companies:`company_office.Companies`)\nWITH count(companies.Industry) AS count, companies.Industry AS Industry\nRETURN Industry\nORDER BY count DESC",
        "db_id": "company_office",
        "answers": [
            [
                "Banking"
            ],
            [
                "Oil and gas"
            ],
            [
                "Conglomerate"
            ],
            [
                "Telecommunications"
            ],
            [
                "Retailing"
            ]
        ]
    },
    {
        "question": "Sort all the industries in descending order of the count of companies in each industry",
        "query": "MATCH (companies:`company_office.Companies`)\nWITH count(companies.Industry) AS count, companies.Industry AS Industry\nRETURN Industry\nORDER BY count DESC",
        "db_id": "company_office",
        "answers": [
            [
                "Banking"
            ],
            [
                "Oil and gas"
            ],
            [
                "Conglomerate"
            ],
            [
                "Telecommunications"
            ],
            [
                "Retailing"
            ]
        ]
    },
    {
        "question": "List the industry shared by the most companies.",
        "query": "MATCH (companies:`company_office.Companies`)\nWITH count(companies.Industry) AS count, companies.Industry AS Industry\nRETURN Industry\nORDER BY count DESC\nLIMIT 1",
        "db_id": "company_office",
        "answers": [
            [
                "Banking"
            ]
        ]
    },
    {
        "question": "Which industry has the most companies?",
        "query": "MATCH (companies:`company_office.Companies`)\nWITH count(companies.Industry) AS count, companies.Industry AS Industry\nRETURN Industry\nORDER BY count DESC\nLIMIT 1",
        "db_id": "company_office",
        "answers": [
            [
                "Banking"
            ]
        ]
    },
    {
        "question": "List the names of buildings that have no company office.",
        "query": "MATCH (buildings:`company_office.buildings`)\nWHERE NOT (buildings:`company_office.buildings`)-[:`company_office.Office_locations`]-()\nRETURN buildings.name",
        "db_id": "company_office",
        "answers": [
            [
                "Ritz-Carlton Mexico City"
            ]
        ]
    },
    {
        "question": "Which buildings do not have any company office? Give me the building names.",
        "query": "MATCH (buildings:`company_office.buildings`)\nWHERE NOT (buildings:`company_office.buildings`)-[:`company_office.Office_locations`]-()\nRETURN buildings.name",
        "db_id": "company_office",
        "answers": [
            [
                "Ritz-Carlton Mexico City"
            ]
        ]
    },
    {
        "question": "Find the number of companies whose industry is \"Banking\" or \"Conglomerate\",",
        "query": "MATCH (companies:`company_office.Companies`)\nWHERE companies.Industry = 'Banking' OR companies.Industry = 'Conglomerate'\nRETURN count(*)",
        "db_id": "company_office",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "How many companies are in either \"Banking\" industry or \"Conglomerate\" industry?",
        "query": "MATCH (companies:`company_office.Companies`)\nWHERE companies.Industry = 'Banking' OR companies.Industry = 'Conglomerate'\nRETURN count(*)",
        "db_id": "company_office",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "Show the headquarters shared by more than two companies.",
        "query": "MATCH (companies:`company_office.Companies`)\nWITH count(*) AS count, companies.Headquarters AS Headquarters\nWHERE count  > 2\nRETURN Headquarters",
        "db_id": "company_office",
        "answers": [
            [
                "USA"
            ],
            [
                "China"
            ]
        ]
    },
    {
        "question": "Which headquarter locations are used by more than 2 companies?",
        "query": "MATCH (companies:`company_office.Companies`)\nWITH count(*) AS count, companies.Headquarters AS Headquarters\nWHERE count  > 2\nRETURN Headquarters",
        "db_id": "company_office",
        "answers": [
            [
                "USA"
            ],
            [
                "China"
            ]
        ]
    },
    {
        "question": "How many products are there?",
        "query": "MATCH (products:`solvency_ii.Products`)\nRETURN count(*)",
        "db_id": "solvency_ii",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "List the name of products in ascending order of price.",
        "query": "MATCH (products:`solvency_ii.Products`)\nRETURN products.Product_Name\nORDER BY products.Product_Price ASC",
        "db_id": "solvency_ii",
        "answers": [
            [
                "Special Dinning"
            ],
            [
                "TV Equipments"
            ],
            [
                "TV Equipments"
            ],
            [
                "Business Policy"
            ],
            [
                "Dinning"
            ],
            [
                "Special Dinning"
            ],
            [
                "Business Policy B"
            ],
            [
                "Trading Policy"
            ],
            [
                "Conference Equipments"
            ],
            [
                "Men suits"
            ],
            [
                "Men suits"
            ],
            [
                "Dinning"
            ],
            [
                "Trading Policy B"
            ],
            [
                "TV Equipments"
            ],
            [
                "Dinning"
            ]
        ]
    },
    {
        "question": "What are the names and type codes of products?",
        "query": "MATCH (products:`solvency_ii.Products`)\nRETURN products.Product_Name,products.Product_Type_Code",
        "db_id": "solvency_ii",
        "answers": [
            [
                "Business Policy",
                "Books"
            ],
            [
                "Special Dinning",
                "Food"
            ],
            [
                "Men suits",
                "Clothes"
            ],
            [
                "TV Equipments",
                "Electronics"
            ],
            [
                "Business Policy B",
                "Books"
            ],
            [
                "TV Equipments",
                "Electronics"
            ],
            [
                "Conference Equipments",
                "Electronics"
            ],
            [
                "Trading Policy",
                "Books"
            ],
            [
                "Trading Policy B",
                "Books"
            ],
            [
                "Dinning",
                "Food"
            ],
            [
                "Dinning",
                "Food"
            ],
            [
                "Dinning",
                "Food"
            ],
            [
                "Special Dinning",
                "Food"
            ],
            [
                "TV Equipments",
                "Electronics"
            ],
            [
                "Men suits",
                "Clothes"
            ]
        ]
    },
    {
        "question": "Show the prices of the products named \"Dining\" or \"Trading Policy\".",
        "query": "MATCH (products:`solvency_ii.Products`)\nWHERE products.Product_Name = 'Dining' OR products.Product_Name = 'Trading Policy'\nRETURN products.Product_Price",
        "db_id": "solvency_ii",
        "answers": [
            [
                3228.49
            ]
        ]
    },
    {
        "question": "What is the name of the product with the highest price?",
        "query": "MATCH (products:`solvency_ii.Products`)\nRETURN products.Product_Name\nORDER BY products.Product_Price DESC\nLIMIT 1",
        "db_id": "solvency_ii",
        "answers": [
            [
                "Dinning"
            ]
        ]
    },
    {
        "question": "Show different type codes of products and the number of products with each type code.",
        "query": "MATCH (products:`solvency_ii.Products`)\nWITH products.Product_Type_Code AS Product_Type_Code, count(products.Product_Type_Code) AS count\nRETURN Product_Type_Code,count",
        "db_id": "solvency_ii",
        "answers": [
            [
                "Books",
                4
            ],
            [
                "Food",
                5
            ],
            [
                "Clothes",
                2
            ],
            [
                "Electronics",
                4
            ]
        ]
    },
    {
        "question": "Show the most common type code across products.",
        "query": "MATCH (products:`solvency_ii.Products`)\nWITH products.Product_Type_Code AS Product_Type_Code, count(products.Product_Type_Code) AS count\nRETURN Product_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "solvency_ii",
        "answers": [
            [
                "Food"
            ]
        ]
    },
    {
        "question": "Show the product type codes that have at least two products.",
        "query": "MATCH (products:`solvency_ii.Products`)\nWITH count(*) AS count, products.Product_Type_Code AS Product_Type_Code\nWHERE count  >= 2\nRETURN Product_Type_Code",
        "db_id": "solvency_ii",
        "answers": [
            [
                "Books"
            ],
            [
                "Food"
            ],
            [
                "Clothes"
            ],
            [
                "Electronics"
            ]
        ]
    },
    {
        "question": "How many artworks are there?",
        "query": "MATCH (artwork:`entertainment_awards.artwork`)\nRETURN count(*)",
        "db_id": "entertainment_awards",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "List the name of artworks in ascending alphabetical order.",
        "query": "MATCH (artwork:`entertainment_awards.artwork`)\nRETURN artwork.Name\nORDER BY artwork.Name ASC",
        "db_id": "entertainment_awards",
        "answers": [
            [
                "Back Home"
            ],
            [
                "Boys"
            ],
            [
                "Cats"
            ],
            [
                "Daniel Mananta"
            ],
            [
                "I Know"
            ],
            [
                "Indonesian Idol"
            ],
            [
                "Loving you"
            ],
            [
                "Martin"
            ],
            [
                "Why"
            ]
        ]
    },
    {
        "question": "List the name of artworks whose type is not \"Program Talent Show\".",
        "query": "MATCH (artwork:`entertainment_awards.artwork`)\nWHERE artwork.Type <> 'Program Talent Show'\nRETURN artwork.Name",
        "db_id": "entertainment_awards",
        "answers": [
            [
                "Indonesian Idol"
            ],
            [
                "I Know"
            ],
            [
                "Loving you"
            ],
            [
                "Why"
            ],
            [
                "Boys"
            ],
            [
                "Daniel Mananta"
            ],
            [
                "Back Home"
            ]
        ]
    },
    {
        "question": "What are the names and locations of festivals?",
        "query": "MATCH (festival_detail:`entertainment_awards.festival_detail`)\nRETURN festival_detail.Festival_Name,festival_detail.Location",
        "db_id": "entertainment_awards",
        "answers": [
            [
                "Panasonic Awards",
                "United States"
            ],
            [
                "Flower Awards",
                "United States"
            ],
            [
                "Cherry Awards",
                "United States"
            ],
            [
                "Gobel Awards",
                "United States"
            ],
            [
                "LA Awards",
                "United States"
            ]
        ]
    },
    {
        "question": "What are the names of the chairs of festivals, sorted in ascending order of the year held?",
        "query": "MATCH (festival_detail:`entertainment_awards.festival_detail`)\nRETURN festival_detail.Chair_Name\nORDER BY festival_detail.Year ASC",
        "db_id": "entertainment_awards",
        "answers": [
            [
                "Raymond Floyd"
            ],
            [
                "Charles Coody"
            ],
            [
                "Doug Ford"
            ],
            [
                "Arnold Palmer"
            ],
            [
                "Lucy Lu"
            ]
        ]
    },
    {
        "question": "What is the location of the festival with the largest number of audience?",
        "query": "MATCH (festival_detail:`entertainment_awards.festival_detail`)\nRETURN festival_detail.Location\nORDER BY festival_detail.Num_of_Audience DESC\nLIMIT 1",
        "db_id": "entertainment_awards",
        "answers": [
            [
                "United States"
            ]
        ]
    },
    {
        "question": "What are the names of festivals held in year 2007?",
        "query": "MATCH (festival_detail:`entertainment_awards.festival_detail`)\nWHERE festival_detail.Year = 2007\nRETURN festival_detail.Festival_Name",
        "db_id": "entertainment_awards",
        "answers": [
            [
                "Flower Awards"
            ],
            [
                "Cherry Awards"
            ]
        ]
    },
    {
        "question": "What is the average number of audience for festivals?",
        "query": "MATCH (festival_detail:`entertainment_awards.festival_detail`)\nRETURN avg(festival_detail.Num_of_Audience)",
        "db_id": "entertainment_awards",
        "answers": [
            [
                157.6
            ]
        ]
    },
    {
        "question": "Please show different types of artworks with the corresponding number of artworks of each type.",
        "query": "MATCH (artwork:`entertainment_awards.artwork`)\nWITH count(artwork.Type) AS count, artwork.Type AS Type\nRETURN Type,count",
        "db_id": "entertainment_awards",
        "answers": [
            [
                "Program Music/Variety Show",
                3
            ],
            [
                "Presenter Music/Variety Show",
                2
            ],
            [
                "Program Talent Show",
                2
            ],
            [
                "Presenter Talent Show",
                2
            ]
        ]
    },
    {
        "question": "List the most common type of artworks.",
        "query": "MATCH (artwork:`entertainment_awards.artwork`)\nWITH count(artwork.Type) AS count, artwork.Type AS Type\nRETURN Type\nORDER BY count DESC\nLIMIT 1",
        "db_id": "entertainment_awards",
        "answers": [
            [
                "Program Music/Variety Show"
            ]
        ]
    },
    {
        "question": "List the year in which there are more than one festivals.",
        "query": "MATCH (festival_detail:`entertainment_awards.festival_detail`)\nWITH count(*) AS count, festival_detail.Year AS Year\nWHERE count  > 1\nRETURN Year",
        "db_id": "entertainment_awards",
        "answers": [
            [
                2007
            ]
        ]
    },
    {
        "question": "List the name of artworks that are not nominated.",
        "query": "MATCH (artwork:`entertainment_awards.artwork`)\nWHERE NOT (artwork:`entertainment_awards.artwork`)-[:`entertainment_awards.nomination`]-()\nRETURN artwork.Name",
        "db_id": "entertainment_awards",
        "answers": [
            [
                "Boys"
            ],
            [
                "Cats"
            ],
            [
                "Daniel Mananta"
            ]
        ]
    },
    {
        "question": "Show the number of audience in year 2008 or 2010.",
        "query": "MATCH (festival_detail:`entertainment_awards.festival_detail`)\nWHERE festival_detail.Year = 2008 OR festival_detail.Year = 2010\nRETURN festival_detail.Num_of_Audience",
        "db_id": "entertainment_awards",
        "answers": [
            [
                160
            ],
            [
                161
            ]
        ]
    },
    {
        "question": "How many premises are there?",
        "query": "MATCH (premises:`customers_campaigns_ecommerce.Premises`)\nRETURN count(*)",
        "db_id": "customers_campaigns_ecommerce",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "What are all the distinct premise types?",
        "query": "MATCH (premises:`customers_campaigns_ecommerce.Premises`)\nRETURN DISTINCT premises.premises_type",
        "db_id": "customers_campaigns_ecommerce",
        "answers": [
            [
                "Warehouse"
            ],
            [
                "Residence"
            ],
            [
                "Office"
            ]
        ]
    },
    {
        "question": "Find the types and details for all premises and order by the premise type.",
        "query": "MATCH (premises:`customers_campaigns_ecommerce.Premises`)\nRETURN premises.premises_type,premises.premise_details\nORDER BY premises.premises_type",
        "db_id": "customers_campaigns_ecommerce",
        "answers": [
            [
                "Office",
                "38291 Jerde Light Apt. 713"
            ],
            [
                "Office",
                "5585 Abbott Walk"
            ],
            [
                "Office",
                "07318 Annetta Motorway"
            ],
            [
                "Office",
                "00100 Green Mountains Apt. 653"
            ],
            [
                "Office",
                "33294 William Lodge Apt. 953"
            ],
            [
                "Office",
                "2760 Austin Station"
            ],
            [
                "Office",
                "867 Emard Drives Apt. 066"
            ],
            [
                "Residence",
                "27839 Carissa Tunnel Suite 048"
            ],
            [
                "Residence",
                "2219 Barrows Tunnel Apt. 893"
            ],
            [
                "Residence",
                "5510 Veum Green"
            ],
            [
                "Residence",
                "5109 Jules Squares Apt. 082"
            ],
            [
                "Warehouse",
                "036 Lueilwitz Harbor"
            ],
            [
                "Warehouse",
                "676 Kelly Spur"
            ],
            [
                "Warehouse",
                "7230 Tillman Glens Suite 202"
            ],
            [
                "Warehouse",
                "62282 Wiza Glen Apt. 430"
            ]
        ]
    },
    {
        "question": "Show each premise type and the number of premises in that type.",
        "query": "MATCH (premises:`customers_campaigns_ecommerce.Premises`)\nWITH count(premises.premises_type) AS count, premises.premises_type AS premises_type\nRETURN premises_type,count",
        "db_id": "customers_campaigns_ecommerce",
        "answers": [
            [
                "Warehouse",
                4
            ],
            [
                "Residence",
                4
            ],
            [
                "Office",
                7
            ]
        ]
    },
    {
        "question": "Show all distinct product categories along with the number of mailshots in each category.",
        "query": "MATCH (mailshot_campaigns:`customers_campaigns_ecommerce.Mailshot_Campaigns`)\nWITH count(mailshot_campaigns.product_category) AS count, mailshot_campaigns.product_category AS product_category\nRETURN product_category,count",
        "db_id": "customers_campaigns_ecommerce",
        "answers": [
            [
                "food",
                11
            ],
            [
                "clothes",
                9
            ]
        ]
    },
    {
        "question": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.",
        "query": "MATCH (customer_orders:`customers_campaigns_ecommerce.Customer_Orders`)\nWHERE customer_orders.order_status_code = 'Cancelled' OR customer_orders.order_status_code = 'Paid'\nRETURN customer_orders.order_shipping_charges,customer_orders.customer_id",
        "db_id": "customers_campaigns_ecommerce",
        "answers": [
            [
                "85.79",
                2
            ],
            [
                "98.4",
                8
            ],
            [
                "36.87",
                9
            ],
            [
                "35.63",
                7
            ],
            [
                "99.26",
                2
            ],
            [
                "26.56",
                15
            ],
            [
                "57.36",
                1
            ],
            [
                "33.58",
                14
            ],
            [
                "22.84",
                1
            ],
            [
                "21.24",
                12
            ],
            [
                "31.33",
                12
            ],
            [
                "46.4",
                14
            ]
        ]
    },
    {
        "question": "Show the names of customers having an order with shipping method FedEx and order status Paid.",
        "query": "MATCH (T1:`customers_campaigns_ecommerce.Customers`)-[]-(T2:`customers_campaigns_ecommerce.Customer_Orders`)\nWHERE T2.shipping_method_code = 'FedEx' AND T2.order_status_code = 'Paid'\nRETURN T1.customer_name",
        "db_id": "customers_campaigns_ecommerce",
        "answers": [
            [
                "Leanna"
            ],
            [
                "Kyle"
            ]
        ]
    },
    {
        "question": "How many courses are there in total?",
        "query": "MATCH (course:`college_3.Course`)\nRETURN count(*)",
        "db_id": "college_3",
        "answers": [
            [
                76
            ]
        ]
    },
    {
        "question": "Count the number of courses.",
        "query": "MATCH (course:`college_3.Course`)\nRETURN count(*)",
        "db_id": "college_3",
        "answers": [
            [
                76
            ]
        ]
    },
    {
        "question": "How many courses have more than 2 credits?",
        "query": "MATCH (course:`college_3.Course`)\nWHERE course.Credits > 2\nRETURN count(*)",
        "db_id": "college_3",
        "answers": [
            [
                71
            ]
        ]
    },
    {
        "question": "Count the number of courses with more than 2 credits.",
        "query": "MATCH (course:`college_3.Course`)\nWHERE course.Credits > 2\nRETURN count(*)",
        "db_id": "college_3",
        "answers": [
            [
                71
            ]
        ]
    },
    {
        "question": "List all names of courses with 1 credit?",
        "query": "MATCH (course:`college_3.Course`)\nWHERE course.Credits = 1\nRETURN course.CName",
        "db_id": "college_3",
        "answers": [
            [
                "INTRODUCTION TO COMPUTER SCIENCE"
            ],
            [
                "SUPERCOMPUTING"
            ],
            [
                "COMPUTER SCIENCE SEMINAR"
            ],
            [
                "RESEARCH SEMINAR IN COGNITIVE PROCESSES"
            ]
        ]
    },
    {
        "question": "What are the names of courses with 1 credit?",
        "query": "MATCH (course:`college_3.Course`)\nWHERE course.Credits = 1\nRETURN course.CName",
        "db_id": "college_3",
        "answers": [
            [
                "INTRODUCTION TO COMPUTER SCIENCE"
            ],
            [
                "SUPERCOMPUTING"
            ],
            [
                "COMPUTER SCIENCE SEMINAR"
            ],
            [
                "RESEARCH SEMINAR IN COGNITIVE PROCESSES"
            ]
        ]
    },
    {
        "question": "Which courses are taught on days MTW?",
        "query": "MATCH (course:`college_3.Course`)\nWHERE course.Days = 'MTW'\nRETURN course.CName",
        "db_id": "college_3",
        "answers": [
            [
                "COMPUTER LITERACY"
            ],
            [
                "INTRO TO PROGRAMMING IN JAVA"
            ],
            [
                "INTRO TO PROGRAMMING IN C/C++"
            ],
            [
                "EXPLORING THE INTERNET"
            ],
            [
                "DATA STRUCTURES in JAVA"
            ],
            [
                "COMPUTATIONAL MODELS"
            ],
            [
                "COMPUTER SYSTEM FUNDAMENTALS"
            ],
            [
                "INTRODUCTION TO ALGORITHMS"
            ],
            [
                "COMPUTER SYSTEMS"
            ],
            [
                "COMPUTER VISION"
            ],
            [
                "ALGORITHMS I"
            ],
            [
                "INTRO TO NATURAL LANGUAGE PROCESSING"
            ],
            [
                "STATISTICAL ANALYSIS"
            ],
            [
                "DISCRETE MATHEMATICS"
            ],
            [
                "LINEAR ALGEBRA AND DIFFERENTIAL EQNS"
            ],
            [
                "PROBABILITY AND STATISTICS"
            ],
            [
                "INTRODUCTION TO OPTIMIZATION"
            ],
            [
                "APPLIED STATISTICS AND DATA ANALYSIS"
            ],
            [
                "INTRODUCTION TO PROBABILITY"
            ],
            [
                "COMBINATORIAL ANALYSIS"
            ],
            [
                "PROBABILITY THEORY I"
            ],
            [
                "STOCHASTIC PROCESSES II"
            ],
            [
                "STATISTICAL INFERENCE"
            ],
            [
                "FOUNDATIONS OF OPTIMIZATION"
            ],
            [
                "COMBINATORIAL ANALYSIS"
            ],
            [
                "NUMERICAL ANALYSIS"
            ],
            [
                "PERCOLATION THEORY"
            ],
            [
                "INTRODUCTION TO ECE"
            ],
            [
                "CIRCUITS"
            ],
            [
                "FIELDS, MATTER AND WAVES"
            ],
            [
                "INTEGRATED ELECTRONICS"
            ],
            [
                "CONTROL SYSTEMS"
            ],
            [
                "BASIC COMMUNICATIONS"
            ],
            [
                "FIBER OPTICS AND PHOTONICS"
            ],
            [
                "INTRODUCTION TO NON-LINEAR SYSTEMS"
            ],
            [
                "DIGITAL SIGNAL PROCESSING"
            ],
            [
                "LANGUAGE AND MIND"
            ]
        ]
    },
    {
        "question": "What are the course names for courses taught on MTW?",
        "query": "MATCH (course:`college_3.Course`)\nWHERE course.Days = 'MTW'\nRETURN course.CName",
        "db_id": "college_3",
        "answers": [
            [
                "COMPUTER LITERACY"
            ],
            [
                "INTRO TO PROGRAMMING IN JAVA"
            ],
            [
                "INTRO TO PROGRAMMING IN C/C++"
            ],
            [
                "EXPLORING THE INTERNET"
            ],
            [
                "DATA STRUCTURES in JAVA"
            ],
            [
                "COMPUTATIONAL MODELS"
            ],
            [
                "COMPUTER SYSTEM FUNDAMENTALS"
            ],
            [
                "INTRODUCTION TO ALGORITHMS"
            ],
            [
                "COMPUTER SYSTEMS"
            ],
            [
                "COMPUTER VISION"
            ],
            [
                "ALGORITHMS I"
            ],
            [
                "INTRO TO NATURAL LANGUAGE PROCESSING"
            ],
            [
                "STATISTICAL ANALYSIS"
            ],
            [
                "DISCRETE MATHEMATICS"
            ],
            [
                "LINEAR ALGEBRA AND DIFFERENTIAL EQNS"
            ],
            [
                "PROBABILITY AND STATISTICS"
            ],
            [
                "INTRODUCTION TO OPTIMIZATION"
            ],
            [
                "APPLIED STATISTICS AND DATA ANALYSIS"
            ],
            [
                "INTRODUCTION TO PROBABILITY"
            ],
            [
                "COMBINATORIAL ANALYSIS"
            ],
            [
                "PROBABILITY THEORY I"
            ],
            [
                "STOCHASTIC PROCESSES II"
            ],
            [
                "STATISTICAL INFERENCE"
            ],
            [
                "FOUNDATIONS OF OPTIMIZATION"
            ],
            [
                "COMBINATORIAL ANALYSIS"
            ],
            [
                "NUMERICAL ANALYSIS"
            ],
            [
                "PERCOLATION THEORY"
            ],
            [
                "INTRODUCTION TO ECE"
            ],
            [
                "CIRCUITS"
            ],
            [
                "FIELDS, MATTER AND WAVES"
            ],
            [
                "INTEGRATED ELECTRONICS"
            ],
            [
                "CONTROL SYSTEMS"
            ],
            [
                "BASIC COMMUNICATIONS"
            ],
            [
                "FIBER OPTICS AND PHOTONICS"
            ],
            [
                "INTRODUCTION TO NON-LINEAR SYSTEMS"
            ],
            [
                "DIGITAL SIGNAL PROCESSING"
            ],
            [
                "LANGUAGE AND MIND"
            ]
        ]
    },
    {
        "question": "What is the number of departments in Division \"AS\"?",
        "query": "MATCH (department:`college_3.Department`)\nWHERE department.Division = 'AS'\nRETURN count(*)",
        "db_id": "college_3",
        "answers": [
            [
                19
            ]
        ]
    },
    {
        "question": "How many departments are in the division AS?",
        "query": "MATCH (department:`college_3.Department`)\nWHERE department.Division = 'AS'\nRETURN count(*)",
        "db_id": "college_3",
        "answers": [
            [
                19
            ]
        ]
    },
    {
        "question": "Find the number of students that have at least one grade \"B\".",
        "query": "MATCH (enrolled_in:`college_3.Enrolled_in`)\nWHERE enrolled_in.Grade = 'B'\nRETURN count(DISTINCT enrolled_in.StuID)",
        "db_id": "college_3",
        "answers": [
            [
                24
            ]
        ]
    },
    {
        "question": "How many students have had at least one \"B\" grade?",
        "query": "MATCH (enrolled_in:`college_3.Enrolled_in`)\nWHERE enrolled_in.Grade = 'B'\nRETURN count(DISTINCT enrolled_in.StuID)",
        "db_id": "college_3",
        "answers": [
            [
                24
            ]
        ]
    },
    {
        "question": "Find the max and min grade point for all letter grade.",
        "query": "MATCH (gradeconversion:`college_3.Gradeconversion`)\nRETURN max(gradeconversion.gradepoint),min(gradeconversion.gradepoint)",
        "db_id": "college_3",
        "answers": [
            [
                4.0,
                0.0
            ]
        ]
    },
    {
        "question": "What are the maximum and minumum grade points?",
        "query": "MATCH (gradeconversion:`college_3.Gradeconversion`)\nRETURN max(gradeconversion.gradepoint),min(gradeconversion.gradepoint)",
        "db_id": "college_3",
        "answers": [
            [
                4.0,
                0.0
            ]
        ]
    },
    {
        "question": "Find the first names of students whose first names contain letter \"a\".",
        "query": "MATCH (student:`college_3.Student`)\nWHERE student.Fname =~'.*[A|a].*'\nRETURN DISTINCT student.Fname",
        "db_id": "college_3",
        "answers": [
            [
                "Linda"
            ],
            [
                "Tracy"
            ],
            [
                "Shiela"
            ],
            [
                "Paul"
            ],
            [
                "Andy"
            ],
            [
                "Lisa"
            ],
            [
                "Jandy"
            ],
            [
                "David"
            ],
            [
                "Charles"
            ],
            [
                "Susan"
            ],
            [
                "Mark"
            ],
            [
                "Michael"
            ],
            [
                "Arthur"
            ],
            [
                "Ian"
            ],
            [
                "Stacy"
            ],
            [
                "Sarah"
            ],
            [
                "William"
            ]
        ]
    },
    {
        "question": "What are the first names for students who have an \"a\" in their first name?",
        "query": "MATCH (student:`college_3.Student`)\nWHERE student.Fname =~'.*[A|a].*'\nRETURN DISTINCT student.Fname",
        "db_id": "college_3",
        "answers": [
            [
                "Linda"
            ],
            [
                "Tracy"
            ],
            [
                "Shiela"
            ],
            [
                "Paul"
            ],
            [
                "Andy"
            ],
            [
                "Lisa"
            ],
            [
                "Jandy"
            ],
            [
                "David"
            ],
            [
                "Charles"
            ],
            [
                "Susan"
            ],
            [
                "Mark"
            ],
            [
                "Michael"
            ],
            [
                "Arthur"
            ],
            [
                "Ian"
            ],
            [
                "Stacy"
            ],
            [
                "Sarah"
            ],
            [
                "William"
            ]
        ]
    },
    {
        "question": "Find the first names and last names of male (sex is M) faculties who live in building NEB.",
        "query": "MATCH (faculty:`college_3.Faculty`)\nWHERE faculty.Sex = 'M' AND faculty.Building = 'NEB'\nRETURN faculty.Fname,faculty.Lname",
        "db_id": "college_3",
        "answers": [
            [
                "Mark",
                "Giuliano"
            ],
            [
                "Michael",
                "Goodrich"
            ],
            [
                "Gerald",
                "Masson"
            ],
            [
                "David",
                "Yarowsky"
            ],
            [
                "Scott",
                "Smith"
            ],
            [
                "Louis",
                "Beach"
            ],
            [
                "Baruch",
                "Awerbuch"
            ],
            [
                "Russell",
                "Taylor"
            ],
            [
                "Eric",
                "Brill"
            ],
            [
                "Subodh",
                "Kumar"
            ],
            [
                "Lawrence",
                "Wolff"
            ],
            [
                "Steven",
                "Salzberg"
            ],
            [
                "Yair",
                "Amir"
            ],
            [
                "Rao",
                "Kosaraju"
            ],
            [
                "Arthur",
                "Delcher"
            ]
        ]
    },
    {
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "MATCH (faculty:`college_3.Faculty`)\nWHERE faculty.Sex = 'M' AND faculty.Building = 'NEB'\nRETURN faculty.Fname,faculty.Lname",
        "db_id": "college_3",
        "answers": [
            [
                "Mark",
                "Giuliano"
            ],
            [
                "Michael",
                "Goodrich"
            ],
            [
                "Gerald",
                "Masson"
            ],
            [
                "David",
                "Yarowsky"
            ],
            [
                "Scott",
                "Smith"
            ],
            [
                "Louis",
                "Beach"
            ],
            [
                "Baruch",
                "Awerbuch"
            ],
            [
                "Russell",
                "Taylor"
            ],
            [
                "Eric",
                "Brill"
            ],
            [
                "Subodh",
                "Kumar"
            ],
            [
                "Lawrence",
                "Wolff"
            ],
            [
                "Steven",
                "Salzberg"
            ],
            [
                "Yair",
                "Amir"
            ],
            [
                "Rao",
                "Kosaraju"
            ],
            [
                "Arthur",
                "Delcher"
            ]
        ]
    },
    {
        "question": "Find the rooms of faculties with rank professor who live in building NEB.",
        "query": "MATCH (faculty:`college_3.Faculty`)\nWHERE faculty.Rank = 'Professor' AND faculty.Building = 'NEB'\nRETURN faculty.Room",
        "db_id": "college_3",
        "answers": [
            [
                "219"
            ],
            [
                "224B"
            ],
            [
                "220"
            ],
            [
                "317"
            ],
            [
                "319"
            ]
        ]
    },
    {
        "question": "What are the rooms for members of the faculty who are professors and who live in building NEB?",
        "query": "MATCH (faculty:`college_3.Faculty`)\nWHERE faculty.Rank = 'Professor' AND faculty.Building = 'NEB'\nRETURN faculty.Room",
        "db_id": "college_3",
        "answers": [
            [
                "219"
            ],
            [
                "224B"
            ],
            [
                "220"
            ],
            [
                "317"
            ],
            [
                "319"
            ]
        ]
    },
    {
        "question": "Find the department name that is in Building \"Mergenthaler\".",
        "query": "MATCH (department:`college_3.Department`)\nWHERE department.Building = 'Mergenthaler'\nRETURN department.DName",
        "db_id": "college_3",
        "answers": [
            [
                "History of Art"
            ],
            [
                "Economics"
            ],
            [
                "Political Science"
            ]
        ]
    },
    {
        "question": "What is the name of the department in the Building Mergenthaler?",
        "query": "MATCH (department:`college_3.Department`)\nWHERE department.Building = 'Mergenthaler'\nRETURN department.DName",
        "db_id": "college_3",
        "answers": [
            [
                "History of Art"
            ],
            [
                "Economics"
            ],
            [
                "Political Science"
            ]
        ]
    },
    {
        "question": "List the course name of courses sorted by credits.",
        "query": "MATCH (course:`college_3.Course`)\nRETURN course.CName\nORDER BY course.Credits",
        "db_id": "college_3",
        "answers": [
            [
                "INTRODUCTION TO COMPUTER SCIENCE"
            ],
            [
                "SUPERCOMPUTING"
            ],
            [
                "COMPUTER SCIENCE SEMINAR"
            ],
            [
                "RESEARCH SEMINAR IN COGNITIVE PROCESSES"
            ],
            [
                "TOPICS IN APPLIED MATH"
            ],
            [
                "COMPUTER LITERACY"
            ],
            [
                "INTRO TO PROGRAMMING IN JAVA"
            ],
            [
                "INTRO TO PROGRAMMING IN C/C++"
            ],
            [
                "EXPLORING THE INTERNET"
            ],
            [
                "JAVA PROGRAMMING"
            ],
            [
                "UNIX SYSTEMS PROGRAMMING"
            ],
            [
                "DATA STRUCTURES in JAVA"
            ],
            [
                "MULTIMEDIA COMPUTING"
            ],
            [
                "COMPUTATIONAL MODELS"
            ],
            [
                "DATABASE SYSTEMS"
            ],
            [
                "COMPUTER SYSTEM FUNDAMENTALS"
            ],
            [
                "DISTRIBUTED SYSTEMS"
            ],
            [
                "INTRODUCTION TO ALGORITHMS"
            ],
            [
                "DATABASE SYSTEMS"
            ],
            [
                "COMPUTER SYSTEMS"
            ],
            [
                "DISTRIBUTED SYSTEMS"
            ],
            [
                "QUANTITATIVE MEDICAL COMPUTING"
            ],
            [
                "COMPUTER VISION"
            ],
            [
                "ALGORITHMS I"
            ],
            [
                "INTRO TO NATURAL LANGUAGE PROCESSING"
            ],
            [
                "COMPUTER SCIENCE INTERNSHIP"
            ],
            [
                "HIGH PERFORMANCE GRAPHICS AND MODELING"
            ],
            [
                "SEMINAR ON COMPUTATIONAL GEOMETRY"
            ],
            [
                "ACCOUNTING I"
            ],
            [
                "ACCOUNTING II"
            ],
            [
                "BUSINESS LAW I"
            ],
            [
                "BUSINESS LAW II"
            ],
            [
                "PROBABILITY THEORY I"
            ],
            [
                "STOCHASTIC PROCESSES II"
            ],
            [
                "STATISTICAL INFERENCE"
            ],
            [
                "FOUNDATIONS OF OPTIMIZATION"
            ],
            [
                "COMBINATORIAL ANALYSIS"
            ],
            [
                "NUMERICAL ANALYSIS"
            ],
            [
                "PERCOLATION THEORY"
            ],
            [
                "TOPICS IN OPERATIONS RESEARCH"
            ],
            [
                "INTRODUCTION TO ECE"
            ],
            [
                "FIELDS, MATTER AND WAVES"
            ],
            [
                "INTEGRATED ELECTRONICS"
            ],
            [
                "ECE LABORATORY"
            ],
            [
                "MICROPROCESSOR LAB I"
            ],
            [
                "CONTROL SYSTEMS"
            ],
            [
                "BASIC COMMUNICATIONS"
            ],
            [
                "FIBER OPTICS AND PHOTONICS"
            ],
            [
                "ITERATIVE ALGORITHMS"
            ],
            [
                "INTRODUCTION TO NON-LINEAR SYSTEMS"
            ],
            [
                "TOPICS IN MEDICAL IMAGING SYSTEMS"
            ],
            [
                "PROCESSING AND RECOGNITION OF SPEECH"
            ],
            [
                "ANALOG AND DIGITAL VLSI SYSTEMS"
            ],
            [
                "SOLID STATE PHYSICS"
            ],
            [
                "NONLINEAR TECHNICAL IMAGE PROCESSING"
            ],
            [
                "RANDOM SIGNAL ANALYSIS"
            ],
            [
                "LANGUAGE AND MIND"
            ],
            [
                "MIND, BRAIN, COMPUTERS"
            ],
            [
                "SOUND STRUCTURES IN NATURAL LANGUAGE"
            ],
            [
                "FORMAL METHODS IN COGNITIVE SCIENCE"
            ],
            [
                "LANGUAGE DEVELOPMENT"
            ],
            [
                "THE HISTORY OF ROMANCE LANGUAGES"
            ],
            [
                "FORMAL METHODS IN COGNITIVE SCIENCE"
            ],
            [
                "COMP. MODELS OF SENTENCE PROCESSING"
            ],
            [
                "STATISTICAL ANALYSIS"
            ],
            [
                "DISCRETE MATHEMATICS"
            ],
            [
                "LINEAR ALGEBRA AND DIFFERENTIAL EQNS"
            ],
            [
                "PROBABILITY AND STATISTICS"
            ],
            [
                "INTRODUCTION TO OPTIMIZATION"
            ],
            [
                "APPLIED STATISTICS AND DATA ANALYSIS"
            ],
            [
                "INTRODUCTION TO PROBABILITY"
            ],
            [
                "COMBINATORIAL ANALYSIS"
            ],
            [
                "CIRCUITS"
            ],
            [
                "DIGITAL SIGNAL PROCESSING"
            ],
            [
                "ELECTROMAGNETIC WAVES"
            ],
            [
                "COGNITIVE NEUROSCIENCE"
            ]
        ]
    },
    {
        "question": "What are the course names, ordered by credits?",
        "query": "MATCH (course:`college_3.Course`)\nRETURN course.CName\nORDER BY course.Credits",
        "db_id": "college_3",
        "answers": [
            [
                "INTRODUCTION TO COMPUTER SCIENCE"
            ],
            [
                "SUPERCOMPUTING"
            ],
            [
                "COMPUTER SCIENCE SEMINAR"
            ],
            [
                "RESEARCH SEMINAR IN COGNITIVE PROCESSES"
            ],
            [
                "TOPICS IN APPLIED MATH"
            ],
            [
                "COMPUTER LITERACY"
            ],
            [
                "INTRO TO PROGRAMMING IN JAVA"
            ],
            [
                "INTRO TO PROGRAMMING IN C/C++"
            ],
            [
                "EXPLORING THE INTERNET"
            ],
            [
                "JAVA PROGRAMMING"
            ],
            [
                "UNIX SYSTEMS PROGRAMMING"
            ],
            [
                "DATA STRUCTURES in JAVA"
            ],
            [
                "MULTIMEDIA COMPUTING"
            ],
            [
                "COMPUTATIONAL MODELS"
            ],
            [
                "DATABASE SYSTEMS"
            ],
            [
                "COMPUTER SYSTEM FUNDAMENTALS"
            ],
            [
                "DISTRIBUTED SYSTEMS"
            ],
            [
                "INTRODUCTION TO ALGORITHMS"
            ],
            [
                "DATABASE SYSTEMS"
            ],
            [
                "COMPUTER SYSTEMS"
            ],
            [
                "DISTRIBUTED SYSTEMS"
            ],
            [
                "QUANTITATIVE MEDICAL COMPUTING"
            ],
            [
                "COMPUTER VISION"
            ],
            [
                "ALGORITHMS I"
            ],
            [
                "INTRO TO NATURAL LANGUAGE PROCESSING"
            ],
            [
                "COMPUTER SCIENCE INTERNSHIP"
            ],
            [
                "HIGH PERFORMANCE GRAPHICS AND MODELING"
            ],
            [
                "SEMINAR ON COMPUTATIONAL GEOMETRY"
            ],
            [
                "ACCOUNTING I"
            ],
            [
                "ACCOUNTING II"
            ],
            [
                "BUSINESS LAW I"
            ],
            [
                "BUSINESS LAW II"
            ],
            [
                "PROBABILITY THEORY I"
            ],
            [
                "STOCHASTIC PROCESSES II"
            ],
            [
                "STATISTICAL INFERENCE"
            ],
            [
                "FOUNDATIONS OF OPTIMIZATION"
            ],
            [
                "COMBINATORIAL ANALYSIS"
            ],
            [
                "NUMERICAL ANALYSIS"
            ],
            [
                "PERCOLATION THEORY"
            ],
            [
                "TOPICS IN OPERATIONS RESEARCH"
            ],
            [
                "INTRODUCTION TO ECE"
            ],
            [
                "FIELDS, MATTER AND WAVES"
            ],
            [
                "INTEGRATED ELECTRONICS"
            ],
            [
                "ECE LABORATORY"
            ],
            [
                "MICROPROCESSOR LAB I"
            ],
            [
                "CONTROL SYSTEMS"
            ],
            [
                "BASIC COMMUNICATIONS"
            ],
            [
                "FIBER OPTICS AND PHOTONICS"
            ],
            [
                "ITERATIVE ALGORITHMS"
            ],
            [
                "INTRODUCTION TO NON-LINEAR SYSTEMS"
            ],
            [
                "TOPICS IN MEDICAL IMAGING SYSTEMS"
            ],
            [
                "PROCESSING AND RECOGNITION OF SPEECH"
            ],
            [
                "ANALOG AND DIGITAL VLSI SYSTEMS"
            ],
            [
                "SOLID STATE PHYSICS"
            ],
            [
                "NONLINEAR TECHNICAL IMAGE PROCESSING"
            ],
            [
                "RANDOM SIGNAL ANALYSIS"
            ],
            [
                "LANGUAGE AND MIND"
            ],
            [
                "MIND, BRAIN, COMPUTERS"
            ],
            [
                "SOUND STRUCTURES IN NATURAL LANGUAGE"
            ],
            [
                "FORMAL METHODS IN COGNITIVE SCIENCE"
            ],
            [
                "LANGUAGE DEVELOPMENT"
            ],
            [
                "THE HISTORY OF ROMANCE LANGUAGES"
            ],
            [
                "FORMAL METHODS IN COGNITIVE SCIENCE"
            ],
            [
                "COMP. MODELS OF SENTENCE PROCESSING"
            ],
            [
                "STATISTICAL ANALYSIS"
            ],
            [
                "DISCRETE MATHEMATICS"
            ],
            [
                "LINEAR ALGEBRA AND DIFFERENTIAL EQNS"
            ],
            [
                "PROBABILITY AND STATISTICS"
            ],
            [
                "INTRODUCTION TO OPTIMIZATION"
            ],
            [
                "APPLIED STATISTICS AND DATA ANALYSIS"
            ],
            [
                "INTRODUCTION TO PROBABILITY"
            ],
            [
                "COMBINATORIAL ANALYSIS"
            ],
            [
                "CIRCUITS"
            ],
            [
                "DIGITAL SIGNAL PROCESSING"
            ],
            [
                "ELECTROMAGNETIC WAVES"
            ],
            [
                "COGNITIVE NEUROSCIENCE"
            ]
        ]
    },
    {
        "question": "Find the first name of students in the descending order of age.",
        "query": "MATCH (student:`college_3.Student`)\nRETURN student.Fname\nORDER BY student.Age DESC",
        "db_id": "college_3",
        "answers": [
            [
                "Bruce"
            ],
            [
                "Paul"
            ],
            [
                "Sarah"
            ],
            [
                "David"
            ],
            [
                "Ian"
            ],
            [
                "Shiela"
            ],
            [
                "Lisa"
            ],
            [
                "Dinesh"
            ],
            [
                "Jandy"
            ],
            [
                "Steven"
            ],
            [
                "Michael"
            ],
            [
                "David"
            ],
            [
                "Eric"
            ],
            [
                "Sarah"
            ],
            [
                "Eric"
            ],
            [
                "Tracy"
            ],
            [
                "Eric"
            ],
            [
                "George"
            ],
            [
                "Eric"
            ],
            [
                "Linda"
            ],
            [
                "Andy"
            ],
            [
                "Lisa"
            ],
            [
                "Charles"
            ],
            [
                "Arthur"
            ],
            [
                "Stacy"
            ],
            [
                "Mark"
            ],
            [
                "Paul"
            ],
            [
                "William"
            ],
            [
                "Eric"
            ],
            [
                "Derek"
            ],
            [
                "Mark"
            ],
            [
                "Michael"
            ],
            [
                "Jun"
            ],
            [
                "Susan"
            ]
        ]
    },
    {
        "question": "What are the first names of students, ordered by age from greatest to least?",
        "query": "MATCH (student:`college_3.Student`)\nRETURN student.Fname\nORDER BY student.Age DESC",
        "db_id": "college_3",
        "answers": [
            [
                "Bruce"
            ],
            [
                "Paul"
            ],
            [
                "Sarah"
            ],
            [
                "David"
            ],
            [
                "Ian"
            ],
            [
                "Shiela"
            ],
            [
                "Lisa"
            ],
            [
                "Dinesh"
            ],
            [
                "Jandy"
            ],
            [
                "Steven"
            ],
            [
                "Michael"
            ],
            [
                "David"
            ],
            [
                "Eric"
            ],
            [
                "Sarah"
            ],
            [
                "Eric"
            ],
            [
                "Tracy"
            ],
            [
                "Eric"
            ],
            [
                "George"
            ],
            [
                "Eric"
            ],
            [
                "Linda"
            ],
            [
                "Andy"
            ],
            [
                "Lisa"
            ],
            [
                "Charles"
            ],
            [
                "Arthur"
            ],
            [
                "Stacy"
            ],
            [
                "Mark"
            ],
            [
                "Paul"
            ],
            [
                "William"
            ],
            [
                "Eric"
            ],
            [
                "Derek"
            ],
            [
                "Mark"
            ],
            [
                "Michael"
            ],
            [
                "Jun"
            ],
            [
                "Susan"
            ]
        ]
    },
    {
        "question": "Find the last name of female (sex is F) students in the descending order of age.",
        "query": "MATCH (student:`college_3.Student`)\nWHERE student.Sex = 'F'\nRETURN student.LName\nORDER BY student.Age DESC",
        "db_id": "college_3",
        "answers": [
            [
                "Schmidt"
            ],
            [
                "Jones"
            ],
            [
                "Cheng"
            ],
            [
                "Nelson"
            ],
            [
                "Smith"
            ],
            [
                "Kim"
            ],
            [
                "Smith"
            ],
            [
                "Apap"
            ],
            [
                "Prater"
            ],
            [
                "Lee"
            ]
        ]
    },
    {
        "question": "What are the last names of female students, ordered by age descending?",
        "query": "MATCH (student:`college_3.Student`)\nWHERE student.Sex = 'F'\nRETURN student.LName\nORDER BY student.Age DESC",
        "db_id": "college_3",
        "answers": [
            [
                "Schmidt"
            ],
            [
                "Jones"
            ],
            [
                "Cheng"
            ],
            [
                "Nelson"
            ],
            [
                "Smith"
            ],
            [
                "Kim"
            ],
            [
                "Smith"
            ],
            [
                "Apap"
            ],
            [
                "Prater"
            ],
            [
                "Lee"
            ]
        ]
    },
    {
        "question": "Find the last names of faculties in building Barton in alphabetic order.",
        "query": "MATCH (faculty:`college_3.Faculty`)\nWHERE faculty.Building = 'Barton'\nRETURN faculty.Lname\nORDER BY faculty.Lname",
        "db_id": "college_3",
        "answers": [
            [
                "Andreou"
            ],
            [
                "Brody"
            ],
            [
                "Byrne"
            ],
            [
                "Cauwenberghs"
            ],
            [
                "Collins"
            ],
            [
                "Davidson"
            ],
            [
                "Glaser"
            ],
            [
                "Goutsias"
            ],
            [
                "Hughes"
            ],
            [
                "Iglesias"
            ],
            [
                "Jelinek"
            ],
            [
                "Joseph"
            ],
            [
                "Kaplan"
            ],
            [
                "Khurgin"
            ],
            [
                "Meyer"
            ],
            [
                "Prince"
            ],
            [
                "Rugh"
            ],
            [
                "Runolfsson"
            ],
            [
                "Weinert"
            ],
            [
                "Westgate"
            ]
        ]
    },
    {
        "question": "What are the last names of faculty in building Barton, sorted by last name?",
        "query": "MATCH (faculty:`college_3.Faculty`)\nWHERE faculty.Building = 'Barton'\nRETURN faculty.Lname\nORDER BY faculty.Lname",
        "db_id": "college_3",
        "answers": [
            [
                "Andreou"
            ],
            [
                "Brody"
            ],
            [
                "Byrne"
            ],
            [
                "Cauwenberghs"
            ],
            [
                "Collins"
            ],
            [
                "Davidson"
            ],
            [
                "Glaser"
            ],
            [
                "Goutsias"
            ],
            [
                "Hughes"
            ],
            [
                "Iglesias"
            ],
            [
                "Jelinek"
            ],
            [
                "Joseph"
            ],
            [
                "Kaplan"
            ],
            [
                "Khurgin"
            ],
            [
                "Meyer"
            ],
            [
                "Prince"
            ],
            [
                "Rugh"
            ],
            [
                "Runolfsson"
            ],
            [
                "Weinert"
            ],
            [
                "Westgate"
            ]
        ]
    },
    {
        "question": "Find the first names of faculties of rank Professor in alphabetic order.",
        "query": "MATCH (faculty:`college_3.Faculty`)\nWHERE faculty.Rank = 'Professor'\nRETURN faculty.Fname\nORDER BY faculty.Fname",
        "db_id": "college_3",
        "answers": [
            [
                "Alan"
            ],
            [
                "Alexander"
            ],
            [
                "Andreas"
            ],
            [
                "Baruch"
            ],
            [
                "Charles"
            ],
            [
                "Daniel"
            ],
            [
                "Edward"
            ],
            [
                "Frederic"
            ],
            [
                "Frederick"
            ],
            [
                "Gerald"
            ],
            [
                "Gerard"
            ],
            [
                "Howard"
            ],
            [
                "Jacob"
            ],
            [
                "James"
            ],
            [
                "John"
            ],
            [
                "John"
            ],
            [
                "Jong-Shi"
            ],
            [
                "Luigi"
            ],
            [
                "Michael"
            ],
            [
                "Michael"
            ],
            [
                "Paul"
            ],
            [
                "Rao"
            ],
            [
                "Richard"
            ],
            [
                "Russell"
            ],
            [
                "Shih-Ping"
            ],
            [
                "William"
            ],
            [
                "Wilson"
            ]
        ]
    },
    {
        "question": "What are the first names for all faculty professors, ordered by first name?",
        "query": "MATCH (faculty:`college_3.Faculty`)\nWHERE faculty.Rank = 'Professor'\nRETURN faculty.Fname\nORDER BY faculty.Fname",
        "db_id": "college_3",
        "answers": [
            [
                "Alan"
            ],
            [
                "Alexander"
            ],
            [
                "Andreas"
            ],
            [
                "Baruch"
            ],
            [
                "Charles"
            ],
            [
                "Daniel"
            ],
            [
                "Edward"
            ],
            [
                "Frederic"
            ],
            [
                "Frederick"
            ],
            [
                "Gerald"
            ],
            [
                "Gerard"
            ],
            [
                "Howard"
            ],
            [
                "Jacob"
            ],
            [
                "James"
            ],
            [
                "John"
            ],
            [
                "John"
            ],
            [
                "Jong-Shi"
            ],
            [
                "Luigi"
            ],
            [
                "Michael"
            ],
            [
                "Michael"
            ],
            [
                "Paul"
            ],
            [
                "Rao"
            ],
            [
                "Richard"
            ],
            [
                "Russell"
            ],
            [
                "Shih-Ping"
            ],
            [
                "William"
            ],
            [
                "Wilson"
            ]
        ]
    },
    {
        "question": "What are the name of courses that have at least five enrollments?",
        "query": "MATCH (T1:`college_3.Course`)-[]-(T2:`college_3.Enrolled_in`)\nWITH count(*) AS count, T1.CName AS CName\nWHERE count  >= 5\nRETURN CName",
        "db_id": "college_3",
        "answers": [
            [
                "INTRO TO PROGRAMMING IN JAVA"
            ],
            [
                "EXPLORING THE INTERNET"
            ],
            [
                "DATA STRUCTURES in JAVA"
            ],
            [
                "MULTIMEDIA COMPUTING"
            ],
            [
                "SUPERCOMPUTING"
            ],
            [
                "DATABASE SYSTEMS"
            ],
            [
                "COMPUTER SYSTEM FUNDAMENTALS"
            ],
            [
                "DISTRIBUTED SYSTEMS"
            ],
            [
                "QUANTITATIVE MEDICAL COMPUTING"
            ],
            [
                "COMPUTER VISION"
            ],
            [
                "ALGORITHMS I"
            ],
            [
                "INTRO TO NATURAL LANGUAGE PROCESSING"
            ],
            [
                "APPLIED STATISTICS AND DATA ANALYSIS"
            ],
            [
                "INTRODUCTION TO PROBABILITY"
            ],
            [
                "COMBINATORIAL ANALYSIS"
            ],
            [
                "CIRCUITS"
            ]
        ]
    },
    {
        "question": "Give the names of the courses with at least five enrollments.",
        "query": "MATCH (T1:`college_3.Course`)-[]-(T2:`college_3.Enrolled_in`)\nWITH count(*) AS count, T1.CName AS CName\nWHERE count  >= 5\nRETURN CName",
        "db_id": "college_3",
        "answers": [
            [
                "INTRO TO PROGRAMMING IN JAVA"
            ],
            [
                "EXPLORING THE INTERNET"
            ],
            [
                "DATA STRUCTURES in JAVA"
            ],
            [
                "MULTIMEDIA COMPUTING"
            ],
            [
                "SUPERCOMPUTING"
            ],
            [
                "DATABASE SYSTEMS"
            ],
            [
                "COMPUTER SYSTEM FUNDAMENTALS"
            ],
            [
                "DISTRIBUTED SYSTEMS"
            ],
            [
                "QUANTITATIVE MEDICAL COMPUTING"
            ],
            [
                "COMPUTER VISION"
            ],
            [
                "ALGORITHMS I"
            ],
            [
                "INTRO TO NATURAL LANGUAGE PROCESSING"
            ],
            [
                "APPLIED STATISTICS AND DATA ANALYSIS"
            ],
            [
                "INTRODUCTION TO PROBABILITY"
            ],
            [
                "COMBINATORIAL ANALYSIS"
            ],
            [
                "CIRCUITS"
            ]
        ]
    },
    {
        "question": "Find the names of courses that have either 3 credits or 1 credit but 4 hours.",
        "query": "MATCH (course:`college_3.Course`)\nWHERE course.Credits = 3\nRETURN course.CName  AS cname \nUNION\nMATCH (course:`college_3.Course`)\nWHERE course.Credits = 1 AND course.Hours = 4\nRETURN course.CName  AS cname",
        "db_id": "college_3",
        "answers": [
            [
                "COMPUTER LITERACY"
            ],
            [
                "INTRO TO PROGRAMMING IN JAVA"
            ],
            [
                "INTRO TO PROGRAMMING IN C/C++"
            ],
            [
                "EXPLORING THE INTERNET"
            ],
            [
                "JAVA PROGRAMMING"
            ],
            [
                "UNIX SYSTEMS PROGRAMMING"
            ],
            [
                "DATA STRUCTURES in JAVA"
            ],
            [
                "MULTIMEDIA COMPUTING"
            ],
            [
                "COMPUTATIONAL MODELS"
            ],
            [
                "DATABASE SYSTEMS"
            ],
            [
                "COMPUTER SYSTEM FUNDAMENTALS"
            ],
            [
                "DISTRIBUTED SYSTEMS"
            ],
            [
                "INTRODUCTION TO ALGORITHMS"
            ],
            [
                "COMPUTER SYSTEMS"
            ],
            [
                "QUANTITATIVE MEDICAL COMPUTING"
            ],
            [
                "COMPUTER VISION"
            ],
            [
                "ALGORITHMS I"
            ],
            [
                "INTRO TO NATURAL LANGUAGE PROCESSING"
            ],
            [
                "COMPUTER SCIENCE INTERNSHIP"
            ],
            [
                "HIGH PERFORMANCE GRAPHICS AND MODELING"
            ],
            [
                "SEMINAR ON COMPUTATIONAL GEOMETRY"
            ],
            [
                "ACCOUNTING I"
            ],
            [
                "ACCOUNTING II"
            ],
            [
                "BUSINESS LAW I"
            ],
            [
                "BUSINESS LAW II"
            ],
            [
                "PROBABILITY THEORY I"
            ],
            [
                "STOCHASTIC PROCESSES II"
            ],
            [
                "STATISTICAL INFERENCE"
            ],
            [
                "FOUNDATIONS OF OPTIMIZATION"
            ],
            [
                "COMBINATORIAL ANALYSIS"
            ],
            [
                "NUMERICAL ANALYSIS"
            ],
            [
                "PERCOLATION THEORY"
            ],
            [
                "TOPICS IN OPERATIONS RESEARCH"
            ],
            [
                "INTRODUCTION TO ECE"
            ],
            [
                "FIELDS, MATTER AND WAVES"
            ],
            [
                "INTEGRATED ELECTRONICS"
            ],
            [
                "ECE LABORATORY"
            ],
            [
                "MICROPROCESSOR LAB I"
            ],
            [
                "CONTROL SYSTEMS"
            ],
            [
                "BASIC COMMUNICATIONS"
            ],
            [
                "FIBER OPTICS AND PHOTONICS"
            ],
            [
                "ITERATIVE ALGORITHMS"
            ],
            [
                "INTRODUCTION TO NON-LINEAR SYSTEMS"
            ],
            [
                "TOPICS IN MEDICAL IMAGING SYSTEMS"
            ],
            [
                "PROCESSING AND RECOGNITION OF SPEECH"
            ],
            [
                "ANALOG AND DIGITAL VLSI SYSTEMS"
            ],
            [
                "SOLID STATE PHYSICS"
            ],
            [
                "NONLINEAR TECHNICAL IMAGE PROCESSING"
            ],
            [
                "RANDOM SIGNAL ANALYSIS"
            ],
            [
                "LANGUAGE AND MIND"
            ],
            [
                "MIND, BRAIN, COMPUTERS"
            ],
            [
                "SOUND STRUCTURES IN NATURAL LANGUAGE"
            ],
            [
                "FORMAL METHODS IN COGNITIVE SCIENCE"
            ],
            [
                "LANGUAGE DEVELOPMENT"
            ],
            [
                "THE HISTORY OF ROMANCE LANGUAGES"
            ],
            [
                "COMP. MODELS OF SENTENCE PROCESSING"
            ]
        ]
    },
    {
        "question": "What are the names of courses that give either 3 credits, or 1 credit and 4 hours?",
        "query": "MATCH (course:`college_3.Course`)\nWHERE course.Credits = 3\nRETURN course.CName  AS cname \nUNION\nMATCH (course:`college_3.Course`)\nWHERE course.Credits = 1 AND course.Hours = 4\nRETURN course.CName  AS cname",
        "db_id": "college_3",
        "answers": [
            [
                "COMPUTER LITERACY"
            ],
            [
                "INTRO TO PROGRAMMING IN JAVA"
            ],
            [
                "INTRO TO PROGRAMMING IN C/C++"
            ],
            [
                "EXPLORING THE INTERNET"
            ],
            [
                "JAVA PROGRAMMING"
            ],
            [
                "UNIX SYSTEMS PROGRAMMING"
            ],
            [
                "DATA STRUCTURES in JAVA"
            ],
            [
                "MULTIMEDIA COMPUTING"
            ],
            [
                "COMPUTATIONAL MODELS"
            ],
            [
                "DATABASE SYSTEMS"
            ],
            [
                "COMPUTER SYSTEM FUNDAMENTALS"
            ],
            [
                "DISTRIBUTED SYSTEMS"
            ],
            [
                "INTRODUCTION TO ALGORITHMS"
            ],
            [
                "COMPUTER SYSTEMS"
            ],
            [
                "QUANTITATIVE MEDICAL COMPUTING"
            ],
            [
                "COMPUTER VISION"
            ],
            [
                "ALGORITHMS I"
            ],
            [
                "INTRO TO NATURAL LANGUAGE PROCESSING"
            ],
            [
                "COMPUTER SCIENCE INTERNSHIP"
            ],
            [
                "HIGH PERFORMANCE GRAPHICS AND MODELING"
            ],
            [
                "SEMINAR ON COMPUTATIONAL GEOMETRY"
            ],
            [
                "ACCOUNTING I"
            ],
            [
                "ACCOUNTING II"
            ],
            [
                "BUSINESS LAW I"
            ],
            [
                "BUSINESS LAW II"
            ],
            [
                "PROBABILITY THEORY I"
            ],
            [
                "STOCHASTIC PROCESSES II"
            ],
            [
                "STATISTICAL INFERENCE"
            ],
            [
                "FOUNDATIONS OF OPTIMIZATION"
            ],
            [
                "COMBINATORIAL ANALYSIS"
            ],
            [
                "NUMERICAL ANALYSIS"
            ],
            [
                "PERCOLATION THEORY"
            ],
            [
                "TOPICS IN OPERATIONS RESEARCH"
            ],
            [
                "INTRODUCTION TO ECE"
            ],
            [
                "FIELDS, MATTER AND WAVES"
            ],
            [
                "INTEGRATED ELECTRONICS"
            ],
            [
                "ECE LABORATORY"
            ],
            [
                "MICROPROCESSOR LAB I"
            ],
            [
                "CONTROL SYSTEMS"
            ],
            [
                "BASIC COMMUNICATIONS"
            ],
            [
                "FIBER OPTICS AND PHOTONICS"
            ],
            [
                "ITERATIVE ALGORITHMS"
            ],
            [
                "INTRODUCTION TO NON-LINEAR SYSTEMS"
            ],
            [
                "TOPICS IN MEDICAL IMAGING SYSTEMS"
            ],
            [
                "PROCESSING AND RECOGNITION OF SPEECH"
            ],
            [
                "ANALOG AND DIGITAL VLSI SYSTEMS"
            ],
            [
                "SOLID STATE PHYSICS"
            ],
            [
                "NONLINEAR TECHNICAL IMAGE PROCESSING"
            ],
            [
                "RANDOM SIGNAL ANALYSIS"
            ],
            [
                "LANGUAGE AND MIND"
            ],
            [
                "MIND, BRAIN, COMPUTERS"
            ],
            [
                "SOUND STRUCTURES IN NATURAL LANGUAGE"
            ],
            [
                "FORMAL METHODS IN COGNITIVE SCIENCE"
            ],
            [
                "LANGUAGE DEVELOPMENT"
            ],
            [
                "THE HISTORY OF ROMANCE LANGUAGES"
            ],
            [
                "COMP. MODELS OF SENTENCE PROCESSING"
            ]
        ]
    },
    {
        "question": "Find the names of departments that are either in division AS or in division EN and in Building NEB.",
        "query": "MATCH (department:`college_3.Department`)\nWHERE department.Division = 'AS'\nRETURN department.DName  AS dname \nUNION\nMATCH (department:`college_3.Department`)\nWHERE department.Division = 'EN' AND department.Building = 'NEB'\nRETURN department.DName  AS dname",
        "db_id": "college_3",
        "answers": [
            [
                "History of Art"
            ],
            [
                "Biology"
            ],
            [
                "Chemistry"
            ],
            [
                "Classics"
            ],
            [
                "Cognitive Science"
            ],
            [
                "English"
            ],
            [
                "Anthropology"
            ],
            [
                "German"
            ],
            [
                "History"
            ],
            [
                "Mathematics"
            ],
            [
                "Near Eastern Studies"
            ],
            [
                "History of Science"
            ],
            [
                "Philosophy"
            ],
            [
                "Physics and Astronomy"
            ],
            [
                "Economics"
            ],
            [
                "Political Science"
            ],
            [
                "Psychology"
            ],
            [
                "French"
            ],
            [
                "Hispanic/Italian Studies"
            ],
            [
                "Chemical Engineering"
            ],
            [
                "Biomedical Engineering"
            ],
            [
                "Computer Science"
            ]
        ]
    },
    {
        "question": "What are the names of departments either in division AS, or in division EN and in building NEB?",
        "query": "MATCH (department:`college_3.Department`)\nWHERE department.Division = 'AS'\nRETURN department.DName  AS dname \nUNION\nMATCH (department:`college_3.Department`)\nWHERE department.Division = 'EN' AND department.Building = 'NEB'\nRETURN department.DName  AS dname",
        "db_id": "college_3",
        "answers": [
            [
                "History of Art"
            ],
            [
                "Biology"
            ],
            [
                "Chemistry"
            ],
            [
                "Classics"
            ],
            [
                "Cognitive Science"
            ],
            [
                "English"
            ],
            [
                "Anthropology"
            ],
            [
                "German"
            ],
            [
                "History"
            ],
            [
                "Mathematics"
            ],
            [
                "Near Eastern Studies"
            ],
            [
                "History of Science"
            ],
            [
                "Philosophy"
            ],
            [
                "Physics and Astronomy"
            ],
            [
                "Economics"
            ],
            [
                "Political Science"
            ],
            [
                "Psychology"
            ],
            [
                "French"
            ],
            [
                "Hispanic/Italian Studies"
            ],
            [
                "Chemical Engineering"
            ],
            [
                "Biomedical Engineering"
            ],
            [
                "Computer Science"
            ]
        ]
    },
    {
        "question": "What are the product id and product type of the cheapest product?",
        "query": "MATCH (products:`department_store.Products`)\nRETURN products.product_id,products.product_type_code\nORDER BY products.product_price\nLIMIT 1",
        "db_id": "department_store",
        "answers": [
            [
                6,
                "Clothes"
            ]
        ]
    },
    {
        "question": "Give the id and product type of the product with the lowest price.",
        "query": "MATCH (products:`department_store.Products`)\nRETURN products.product_id,products.product_type_code\nORDER BY products.product_price\nLIMIT 1",
        "db_id": "department_store",
        "answers": [
            [
                6,
                "Clothes"
            ]
        ]
    },
    {
        "question": "Find the number of different product types.",
        "query": "MATCH (products:`department_store.Products`)\nRETURN count(DISTINCT products.product_type_code)",
        "db_id": "department_store",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "Count the number of distinct product types.",
        "query": "MATCH (products:`department_store.Products`)\nRETURN count(DISTINCT products.product_type_code)",
        "db_id": "department_store",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "What are the staff ids and genders of all staffs whose job title is Department Manager?",
        "query": "MATCH (T1:`department_store.Staff`)-[T2:`department_store.Staff_Department_Assignments`]-()\nWHERE T2.job_title_code = 'Department Manager'\nRETURN T1.staff_id,T1.staff_gender",
        "db_id": "department_store",
        "answers": [
            [
                5,
                "0"
            ],
            [
                6,
                "1"
            ],
            [
                15,
                "1"
            ]
        ]
    },
    {
        "question": "Return the staff ids and genders for any staff with the title Department Manager.",
        "query": "MATCH (T1:`department_store.Staff`)-[T2:`department_store.Staff_Department_Assignments`]-()\nWHERE T2.job_title_code = 'Department Manager'\nRETURN T1.staff_id,T1.staff_gender",
        "db_id": "department_store",
        "answers": [
            [
                5,
                "0"
            ],
            [
                6,
                "1"
            ],
            [
                15,
                "1"
            ]
        ]
    },
    {
        "question": "For each payment method, return how many customers use it.",
        "query": "MATCH (customers:`department_store.Customers`)\nWITH count(customers.payment_method_code) AS count, customers.payment_method_code AS payment_method_code\nRETURN payment_method_code,count",
        "db_id": "department_store",
        "answers": [
            [
                "Credit Card",
                10
            ],
            [
                "Direct Debit",
                5
            ]
        ]
    },
    {
        "question": "How many customers use each payment method?",
        "query": "MATCH (customers:`department_store.Customers`)\nWITH count(customers.payment_method_code) AS count, customers.payment_method_code AS payment_method_code\nRETURN payment_method_code,count",
        "db_id": "department_store",
        "answers": [
            [
                "Credit Card",
                10
            ],
            [
                "Direct Debit",
                5
            ]
        ]
    },
    {
        "question": "What is the id of the product that was ordered the most often?",
        "query": "MATCH (order_items:`department_store.Order_Items`)\nWITH order_items.product_id AS product_id, count(order_items.product_id) AS count\nRETURN product_id\nORDER BY count DESC\nLIMIT 1",
        "db_id": "department_store",
        "answers": [
            [
                13
            ]
        ]
    },
    {
        "question": "Give the product id for the product that was ordered most frequently.",
        "query": "MATCH (order_items:`department_store.Order_Items`)\nWITH order_items.product_id AS product_id, count(order_items.product_id) AS count\nRETURN product_id\nORDER BY count DESC\nLIMIT 1",
        "db_id": "department_store",
        "answers": [
            [
                13
            ]
        ]
    },
    {
        "question": "What are the name, phone number and email address of the customer who made the largest number of orders?",
        "query": "MATCH (T1:`department_store.Customers`)-[]-(T2:`department_store.Customer_Orders`)\nWITH count(T2.customer_id) AS count, T1.customer_email AS customer_email, T1.customer_name AS customer_name, T1.customer_phone AS customer_phone\nRETURN customer_name,customer_phone,customer_email\nORDER BY count DESC\nLIMIT 1",
        "db_id": "department_store",
        "answers": [
            [
                "Lexus",
                "+08(3)8056580281",
                "gbrekke@example.com"
            ]
        ]
    },
    {
        "question": "Return the name, phone number and email address for the customer with the most orders.",
        "query": "MATCH (T1:`department_store.Customers`)-[]-(T2:`department_store.Customer_Orders`)\nWITH count(T2.customer_id) AS count, T1.customer_email AS customer_email, T1.customer_name AS customer_name, T1.customer_phone AS customer_phone\nRETURN customer_name,customer_phone,customer_email\nORDER BY count DESC\nLIMIT 1",
        "db_id": "department_store",
        "answers": [
            [
                "Lexus",
                "+08(3)8056580281",
                "gbrekke@example.com"
            ]
        ]
    },
    {
        "question": "How many department stores does the store chain South have?",
        "query": "MATCH (T1:`department_store.Department_Stores`)-[]-(T2:`department_store.Department_Store_Chain`)\nWHERE T2.dept_store_chain_name = 'South'\nRETURN count(*)",
        "db_id": "department_store",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "Count the number of stores the chain South has.",
        "query": "MATCH (T1:`department_store.Department_Stores`)-[]-(T2:`department_store.Department_Store_Chain`)\nWHERE T2.dept_store_chain_name = 'South'\nRETURN count(*)",
        "db_id": "department_store",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "What are the ids of the two department store chains with the largest number of department stores?",
        "query": "MATCH (department_stores:`department_store.Department_Stores`)\nWITH department_stores.dept_store_chain_id AS dept_store_chain_id, count(department_stores.dept_store_chain_id) AS count\nRETURN dept_store_chain_id\nORDER BY count DESC\nLIMIT 2",
        "db_id": "department_store",
        "answers": [
            [
                4
            ],
            [
                3
            ]
        ]
    },
    {
        "question": "Return the ids of the two department store chains with the most department stores.",
        "query": "MATCH (department_stores:`department_store.Department_Stores`)\nWITH department_stores.dept_store_chain_id AS dept_store_chain_id, count(department_stores.dept_store_chain_id) AS count\nRETURN dept_store_chain_id\nORDER BY count DESC\nLIMIT 2",
        "db_id": "department_store",
        "answers": [
            [
                4
            ],
            [
                3
            ]
        ]
    },
    {
        "question": "Return the names and ids of all products whose price is between 600 and 700.",
        "query": "MATCH (products:`department_store.Products`)\nWHERE 600<=products.product_price<=700\nRETURN products.product_name,products.product_id",
        "db_id": "department_store",
        "answers": [
            [
                "yellow jeans",
                2
            ],
            [
                "black jeans",
                3
            ],
            [
                "blue topping",
                9
            ],
            [
                "keyboard",
                13
            ],
            [
                "speaker",
                14
            ]
        ]
    },
    {
        "question": "What are the names and ids of products costing between 600 and 700?",
        "query": "MATCH (products:`department_store.Products`)\nWHERE 600<=products.product_price<=700\nRETURN products.product_name,products.product_id",
        "db_id": "department_store",
        "answers": [
            [
                "yellow jeans",
                2
            ],
            [
                "black jeans",
                3
            ],
            [
                "blue topping",
                9
            ],
            [
                "keyboard",
                13
            ],
            [
                "speaker",
                14
            ]
        ]
    },
    {
        "question": "List the name of staff who has been assigned multiple jobs.",
        "query": "MATCH (T1:`department_store.Staff`)-[T2:`department_store.Staff_Department_Assignments`]-()\nWITH count(*) AS count, T1.staff_name AS staff_name\nWHERE count  > 1\nRETURN staff_name",
        "db_id": "department_store",
        "answers": [
            [
                "Malika"
            ],
            [
                "Tyson"
            ],
            [
                "Vito"
            ]
        ]
    },
    {
        "question": "What are the names of staff who have been assigned multiple jobs?",
        "query": "MATCH (T1:`department_store.Staff`)-[T2:`department_store.Staff_Department_Assignments`]-()\nWITH count(*) AS count, T1.staff_name AS staff_name\nWHERE count  > 1\nRETURN staff_name",
        "db_id": "department_store",
        "answers": [
            [
                "Malika"
            ],
            [
                "Tyson"
            ],
            [
                "Vito"
            ]
        ]
    },
    {
        "question": "List the name and phone number of all suppliers in the alphabetical order of their addresses.",
        "query": "MATCH (T1:`department_store.Suppliers`)-[T2:`department_store.Supplier_Addresses`]-(T3:`department_store.Addresses`)\nRETURN T1.supplier_name,T1.supplier_phone\nORDER BY T3.address_details",
        "db_id": "department_store",
        "answers": [
            [
                "AB Store",
                "1-483-283-4742"
            ],
            [
                "Tesco",
                "287-071-1153x254"
            ],
            [
                "Audi",
                "1-432-960-2402x1734"
            ],
            [
                "Tesco",
                "287-071-1153x254"
            ]
        ]
    },
    {
        "question": "What are the names and phone numbers for all suppliers, sorted in alphabetical order of their addressed?",
        "query": "MATCH (T1:`department_store.Suppliers`)-[T2:`department_store.Supplier_Addresses`]-(T3:`department_store.Addresses`)\nRETURN T1.supplier_name,T1.supplier_phone\nORDER BY T3.address_details",
        "db_id": "department_store",
        "answers": [
            [
                "AB Store",
                "1-483-283-4742"
            ],
            [
                "Tesco",
                "287-071-1153x254"
            ],
            [
                "Audi",
                "1-432-960-2402x1734"
            ],
            [
                "Tesco",
                "287-071-1153x254"
            ]
        ]
    },
    {
        "question": "What are id and name of the products whose price is lower than 600 or higher than 900?",
        "query": "MATCH (products:`department_store.Products`)\nWHERE products.product_price < 600 OR products.product_price > 900\nRETURN products.product_id,products.product_name",
        "db_id": "department_store",
        "answers": [
            [
                4,
                "blue jeans"
            ],
            [
                5,
                "red jeans"
            ],
            [
                6,
                "red topping"
            ],
            [
                7,
                "black topping"
            ],
            [
                8,
                "yellow topping"
            ],
            [
                12,
                "drive"
            ],
            [
                15,
                "mic"
            ]
        ]
    },
    {
        "question": "Give the ids and names of products with price lower than 600 or higher than 900.",
        "query": "MATCH (products:`department_store.Products`)\nWHERE products.product_price < 600 OR products.product_price > 900\nRETURN products.product_id,products.product_name",
        "db_id": "department_store",
        "answers": [
            [
                4,
                "blue jeans"
            ],
            [
                5,
                "red jeans"
            ],
            [
                6,
                "red topping"
            ],
            [
                7,
                "black topping"
            ],
            [
                8,
                "yellow topping"
            ],
            [
                12,
                "drive"
            ],
            [
                15,
                "mic"
            ]
        ]
    },
    {
        "question": "What is the largest and smallest customer codes?",
        "query": "MATCH (customers:`department_store.Customers`)\nRETURN max(customers.customer_code),min(customers.customer_code)",
        "db_id": "department_store",
        "answers": [
            [
                "980",
                "172"
            ]
        ]
    },
    {
        "question": "Return the maximum and minimum customer codes.",
        "query": "MATCH (customers:`department_store.Customers`)\nRETURN max(customers.customer_code),min(customers.customer_code)",
        "db_id": "department_store",
        "answers": [
            [
                "980",
                "172"
            ]
        ]
    },
    {
        "question": "List the names and phone numbers of all the distinct suppliers who supply red jeans.",
        "query": "MATCH (T1:`department_store.Suppliers`)-[T2:`department_store.Product_Suppliers`]-(T3:`department_store.Products`)\nWHERE T3.product_name = 'red jeans'\nRETURN DISTINCT T1.supplier_name,T1.supplier_phone",
        "db_id": "department_store",
        "answers": [
            [
                "AB Store",
                "1-483-283-4742"
            ]
        ]
    },
    {
        "question": "What are the distinct names and phone numbers for suppliers who have red jeans?",
        "query": "MATCH (T1:`department_store.Suppliers`)-[T2:`department_store.Product_Suppliers`]-(T3:`department_store.Products`)\nWHERE T3.product_name = 'red jeans'\nRETURN DISTINCT T1.supplier_name,T1.supplier_phone",
        "db_id": "department_store",
        "answers": [
            [
                "AB Store",
                "1-483-283-4742"
            ]
        ]
    },
    {
        "question": "List the order id, customer id for orders in Cancelled status, ordered by their order dates.",
        "query": "MATCH (customer_orders:`department_store.Customer_Orders`)\nWHERE customer_orders.order_status_code = 'Cancelled'\nRETURN customer_orders.order_id,customer_orders.customer_id\nORDER BY customer_orders.order_date",
        "db_id": "department_store",
        "answers": [
            [
                7,
                1
            ],
            [
                11,
                8
            ],
            [
                10,
                11
            ]
        ]
    },
    {
        "question": "What are the order ids and customer ids for orders that have been Cancelled, sorted by their order dates?",
        "query": "MATCH (customer_orders:`department_store.Customer_Orders`)\nWHERE customer_orders.order_status_code = 'Cancelled'\nRETURN customer_orders.order_id,customer_orders.customer_id\nORDER BY customer_orders.order_date",
        "db_id": "department_store",
        "answers": [
            [
                7,
                1
            ],
            [
                11,
                8
            ],
            [
                10,
                11
            ]
        ]
    },
    {
        "question": "Find the average price of all product clothes.",
        "query": "MATCH (products:`department_store.Products`)\nWHERE products.product_type_code = 'Clothes'\nRETURN avg(products.product_price)",
        "db_id": "department_store",
        "answers": [
            [
                715.5366666666666
            ]
        ]
    },
    {
        "question": "What is the average price of clothes?",
        "query": "MATCH (products:`department_store.Products`)\nWHERE products.product_type_code = 'Clothes'\nRETURN avg(products.product_price)",
        "db_id": "department_store",
        "answers": [
            [
                715.5366666666666
            ]
        ]
    },
    {
        "question": "Find the name of the most expensive hardware product.",
        "query": "MATCH (products:`department_store.Products`)\nWHERE products.product_type_code = 'Hardware'\nRETURN products.product_name\nORDER BY products.product_price DESC\nLIMIT 1",
        "db_id": "department_store",
        "answers": [
            [
                "mic"
            ]
        ]
    },
    {
        "question": "What is the name of the hardware product with the greatest price?",
        "query": "MATCH (products:`department_store.Products`)\nWHERE products.product_type_code = 'Hardware'\nRETURN products.product_name\nORDER BY products.product_price DESC\nLIMIT 1",
        "db_id": "department_store",
        "answers": [
            [
                "mic"
            ]
        ]
    },
    {
        "question": "How many aircrafts are there?",
        "query": "MATCH (aircraft:`aircraft.aircraft`)\nRETURN count(*)",
        "db_id": "aircraft",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "What is the number of aircraft?",
        "query": "MATCH (aircraft:`aircraft.aircraft`)\nRETURN count(*)",
        "db_id": "aircraft",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "List the description of all aircrafts.",
        "query": "MATCH (aircraft:`aircraft.aircraft`)\nRETURN aircraft.Description",
        "db_id": "aircraft",
        "answers": [
            [
                "Light utility helicopter"
            ],
            [
                "Turboshaft utility helicopter"
            ],
            [
                "Tandem rotor helicopter"
            ],
            [
                "Heavy-lift helicopter"
            ],
            [
                "Heavy-lift helicopter"
            ]
        ]
    },
    {
        "question": "What are the descriptions for the aircrafts?",
        "query": "MATCH (aircraft:`aircraft.aircraft`)\nRETURN aircraft.Description",
        "db_id": "aircraft",
        "answers": [
            [
                "Light utility helicopter"
            ],
            [
                "Turboshaft utility helicopter"
            ],
            [
                "Tandem rotor helicopter"
            ],
            [
                "Heavy-lift helicopter"
            ],
            [
                "Heavy-lift helicopter"
            ]
        ]
    },
    {
        "question": "What is the average number of international passengers of all airports?",
        "query": "MATCH (airport:`aircraft.airport`)\nRETURN avg(airport.International_Passengers)",
        "db_id": "aircraft",
        "answers": [
            [
                16443156.6
            ]
        ]
    },
    {
        "question": "What is the average number of international passengers for an airport?",
        "query": "MATCH (airport:`aircraft.airport`)\nRETURN avg(airport.International_Passengers)",
        "db_id": "aircraft",
        "answers": [
            [
                16443156.6
            ]
        ]
    },
    {
        "question": "What are the number of international and domestic passengers of the airport named London \"Heathrow\"?",
        "query": "MATCH (airport:`aircraft.airport`)\nWHERE airport.Airport_Name = 'London Heathrow'\nRETURN airport.International_Passengers,airport.Domestic_Passengers",
        "db_id": "aircraft",
        "answers": [
            [
                61344438.0,
                5562516.0
            ]
        ]
    },
    {
        "question": "How many international and domestic passengers are there in the airport London Heathrow?",
        "query": "MATCH (airport:`aircraft.airport`)\nWHERE airport.Airport_Name = 'London Heathrow'\nRETURN airport.International_Passengers,airport.Domestic_Passengers",
        "db_id": "aircraft",
        "answers": [
            [
                61344438.0,
                5562516.0
            ]
        ]
    },
    {
        "question": "What are the maximum and minimum number of transit passengers of all aiports.",
        "query": "MATCH (airport:`aircraft.airport`)\nRETURN max(airport.Transit_Passengers),min(airport.Transit_Passengers)",
        "db_id": "aircraft",
        "answers": [
            [
                156246.0,
                4395.0
            ]
        ]
    },
    {
        "question": "What is the maximum and mininum number of transit passengers for all airports?",
        "query": "MATCH (airport:`aircraft.airport`)\nRETURN max(airport.Transit_Passengers),min(airport.Transit_Passengers)",
        "db_id": "aircraft",
        "answers": [
            [
                156246.0,
                4395.0
            ]
        ]
    },
    {
        "question": "What are the name of pilots aged 25 or older?",
        "query": "MATCH (pilot:`aircraft.pilot`)\nWHERE pilot.Age >= 25\nRETURN pilot.Name",
        "db_id": "aircraft",
        "answers": [
            [
                "Ayana Spencer"
            ],
            [
                "Ellen Ledner III"
            ],
            [
                "Elisha Hickle V"
            ],
            [
                "Dr. Jade Bradtke V"
            ],
            [
                "Winnifred Boyle"
            ],
            [
                "Della Lindgren"
            ],
            [
                "Maxwell Graham"
            ],
            [
                "Blaise Muller"
            ],
            [
                "Baylee Steuber"
            ]
        ]
    },
    {
        "question": "what is the name of every pilot who is at least 25 years old?",
        "query": "MATCH (pilot:`aircraft.pilot`)\nWHERE pilot.Age >= 25\nRETURN pilot.Name",
        "db_id": "aircraft",
        "answers": [
            [
                "Ayana Spencer"
            ],
            [
                "Ellen Ledner III"
            ],
            [
                "Elisha Hickle V"
            ],
            [
                "Dr. Jade Bradtke V"
            ],
            [
                "Winnifred Boyle"
            ],
            [
                "Della Lindgren"
            ],
            [
                "Maxwell Graham"
            ],
            [
                "Blaise Muller"
            ],
            [
                "Baylee Steuber"
            ]
        ]
    },
    {
        "question": "List all pilot names in ascending alphabetical order.",
        "query": "MATCH (pilot:`aircraft.pilot`)\nRETURN pilot.Name\nORDER BY pilot.Name ASC",
        "db_id": "aircraft",
        "answers": [
            [
                "Ayana Spencer"
            ],
            [
                "Baylee Steuber"
            ],
            [
                "Blaise Muller"
            ],
            [
                "Della Lindgren"
            ],
            [
                "Dr. Jade Bradtke V"
            ],
            [
                "Elisha Hickle V"
            ],
            [
                "Ellen Ledner III"
            ],
            [
                "Katheryn Gorczany IV"
            ],
            [
                "Maxwell Graham"
            ],
            [
                "Mr. Cristian Halvorson II"
            ],
            [
                "Prof. Zackery Collins"
            ],
            [
                "Winnifred Boyle"
            ]
        ]
    },
    {
        "question": "What are the names of the pilots in alphabetical order?",
        "query": "MATCH (pilot:`aircraft.pilot`)\nRETURN pilot.Name\nORDER BY pilot.Name ASC",
        "db_id": "aircraft",
        "answers": [
            [
                "Ayana Spencer"
            ],
            [
                "Baylee Steuber"
            ],
            [
                "Blaise Muller"
            ],
            [
                "Della Lindgren"
            ],
            [
                "Dr. Jade Bradtke V"
            ],
            [
                "Elisha Hickle V"
            ],
            [
                "Ellen Ledner III"
            ],
            [
                "Katheryn Gorczany IV"
            ],
            [
                "Maxwell Graham"
            ],
            [
                "Mr. Cristian Halvorson II"
            ],
            [
                "Prof. Zackery Collins"
            ],
            [
                "Winnifred Boyle"
            ]
        ]
    },
    {
        "question": "List names of all pilot aged 30 or younger in descending alphabetical order.",
        "query": "MATCH (pilot:`aircraft.pilot`)\nWHERE pilot.Age <= 30\nRETURN pilot.Name\nORDER BY pilot.Name DESC",
        "db_id": "aircraft",
        "answers": [
            [
                "Winnifred Boyle"
            ],
            [
                "Prof. Zackery Collins"
            ],
            [
                "Mr. Cristian Halvorson II"
            ],
            [
                "Maxwell Graham"
            ],
            [
                "Katheryn Gorczany IV"
            ],
            [
                "Dr. Jade Bradtke V"
            ],
            [
                "Della Lindgren"
            ],
            [
                "Baylee Steuber"
            ],
            [
                "Ayana Spencer"
            ]
        ]
    },
    {
        "question": "What are the names of all pilots 30 years old or young in descending alphabetical order?",
        "query": "MATCH (pilot:`aircraft.pilot`)\nWHERE pilot.Age <= 30\nRETURN pilot.Name\nORDER BY pilot.Name DESC",
        "db_id": "aircraft",
        "answers": [
            [
                "Winnifred Boyle"
            ],
            [
                "Prof. Zackery Collins"
            ],
            [
                "Mr. Cristian Halvorson II"
            ],
            [
                "Maxwell Graham"
            ],
            [
                "Katheryn Gorczany IV"
            ],
            [
                "Dr. Jade Bradtke V"
            ],
            [
                "Della Lindgren"
            ],
            [
                "Baylee Steuber"
            ],
            [
                "Ayana Spencer"
            ]
        ]
    },
    {
        "question": "Please show the names of aircrafts associated with airport with name \"London Gatwick\".",
        "query": "MATCH (T1:`aircraft.aircraft`)-[T2:`aircraft.airport_aircraft`]-(T3:`aircraft.airport`)\nWHERE T3.Airport_Name = 'London Gatwick'\nRETURN T1.Aircraft",
        "db_id": "aircraft",
        "answers": [
            [
                "Robinson R-22"
            ]
        ]
    },
    {
        "question": "What are the names of all the aircrafts associated with London Gatwick airport?",
        "query": "MATCH (T1:`aircraft.aircraft`)-[T2:`aircraft.airport_aircraft`]-(T3:`aircraft.airport`)\nWHERE T3.Airport_Name = 'London Gatwick'\nRETURN T1.Aircraft",
        "db_id": "aircraft",
        "answers": [
            [
                "Robinson R-22"
            ]
        ]
    },
    {
        "question": "Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000.",
        "query": "MATCH (T1:`aircraft.aircraft`)-[T2:`aircraft.airport_aircraft`]-(T3:`aircraft.airport`)\nWHERE T3.Total_Passengers > 10000000\nRETURN T1.Aircraft,T1.Description",
        "db_id": "aircraft",
        "answers": [
            [
                "Robinson R-22",
                "Light utility helicopter"
            ],
            [
                "Bell 206B3 JetRanger",
                "Turboshaft utility helicopter"
            ]
        ]
    },
    {
        "question": "What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?",
        "query": "MATCH (T1:`aircraft.aircraft`)-[T2:`aircraft.airport_aircraft`]-(T3:`aircraft.airport`)\nWHERE T3.Total_Passengers > 10000000\nRETURN T1.Aircraft,T1.Description",
        "db_id": "aircraft",
        "answers": [
            [
                "Robinson R-22",
                "Light utility helicopter"
            ],
            [
                "Bell 206B3 JetRanger",
                "Turboshaft utility helicopter"
            ]
        ]
    },
    {
        "question": "What is the average total number of passengers of airports that are associated with aircraft \"Robinson R-22\"?",
        "query": "MATCH (T1:`aircraft.aircraft`)-[T2:`aircraft.airport_aircraft`]-(T3:`aircraft.airport`)\nWHERE T1.Aircraft = \"Robinson R-22\"\nRETURN avg(T3.Total_Passengers)",
        "db_id": "aircraft",
        "answers": [
            [
                34205887.0
            ]
        ]
    },
    {
        "question": "What is the average total number of passengers for all airports that the aircraft \"Robinson R-22\" visits?",
        "query": "MATCH (T1:`aircraft.aircraft`)-[T2:`aircraft.airport_aircraft`]-(T3:`aircraft.airport`)\nWHERE T1.Aircraft = \"Robinson R-22\"\nRETURN avg(T3.Total_Passengers)",
        "db_id": "aircraft",
        "answers": [
            [
                34205887.0
            ]
        ]
    },
    {
        "question": "List names of all pilot in descending order of age.",
        "query": "MATCH (pilot:`aircraft.pilot`)\nRETURN pilot.Name\nORDER BY pilot.Age DESC",
        "db_id": "aircraft",
        "answers": [
            [
                "Elisha Hickle V"
            ],
            [
                "Blaise Muller"
            ],
            [
                "Ellen Ledner III"
            ],
            [
                "Winnifred Boyle"
            ],
            [
                "Baylee Steuber"
            ],
            [
                "Della Lindgren"
            ],
            [
                "Dr. Jade Bradtke V"
            ],
            [
                "Maxwell Graham"
            ],
            [
                "Ayana Spencer"
            ],
            [
                "Prof. Zackery Collins"
            ],
            [
                "Mr. Cristian Halvorson II"
            ],
            [
                "Katheryn Gorczany IV"
            ]
        ]
    },
    {
        "question": "What are the names of all pilots listed by descending age?",
        "query": "MATCH (pilot:`aircraft.pilot`)\nRETURN pilot.Name\nORDER BY pilot.Age DESC",
        "db_id": "aircraft",
        "answers": [
            [
                "Elisha Hickle V"
            ],
            [
                "Blaise Muller"
            ],
            [
                "Ellen Ledner III"
            ],
            [
                "Winnifred Boyle"
            ],
            [
                "Baylee Steuber"
            ],
            [
                "Della Lindgren"
            ],
            [
                "Dr. Jade Bradtke V"
            ],
            [
                "Maxwell Graham"
            ],
            [
                "Ayana Spencer"
            ],
            [
                "Prof. Zackery Collins"
            ],
            [
                "Mr. Cristian Halvorson II"
            ],
            [
                "Katheryn Gorczany IV"
            ]
        ]
    },
    {
        "question": "How many residents does each property have? List property id and resident count.",
        "query": "MATCH (T1:`local_govt_and_lot.Properties`)-[]-(T2:`local_govt_and_lot.Residents`)\nWITH T1.property_id AS property_id, count(T1.property_id) AS count\nRETURN property_id,count",
        "db_id": "local_govt_and_lot",
        "answers": [
            [
                107,
                2
            ],
            [
                108,
                1
            ],
            [
                120,
                1
            ],
            [
                373,
                1
            ],
            [
                445,
                1
            ],
            [
                605,
                1
            ],
            [
                629,
                1
            ],
            [
                669,
                2
            ],
            [
                748,
                2
            ],
            [
                879,
                1
            ],
            [
                954,
                2
            ]
        ]
    },
    {
        "question": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
        "query": "MATCH (T1:`local_govt_and_lot.Services`)-[]-(T2:`local_govt_and_lot.Organizations`)\nWHERE T2.organization_details = 'Denesik and Sons Party'\nRETURN DISTINCT T1.service_type_code",
        "db_id": "local_govt_and_lot",
        "answers": [
            [
                "Moving Out"
            ],
            [
                "Pay bills"
            ],
            [
                "Check"
            ],
            [
                "Cleanning"
            ]
        ]
    },
    {
        "question": "List the id and type of each thing, and the details of the organization that owns it.",
        "query": "MATCH (T1:`local_govt_and_lot.Things`)-[]-(T2:`local_govt_and_lot.Organizations`)\nRETURN T1.thing_id,T1.Type_of_Thing_Code,T2.organization_details",
        "db_id": "local_govt_and_lot",
        "answers": [
            [
                92,
                "Commen",
                "Reinger, Hudson and Nolan Group"
            ],
            [
                35,
                "Electronics",
                "Reinger, Hudson and Nolan Group"
            ],
            [
                84,
                "Commen",
                "Denesik and Sons Party"
            ],
            [
                2,
                "Electronics",
                "Denesik and Sons Party"
            ],
            [
                45,
                "Commen",
                "Denesik and Sons Party"
            ],
            [
                85,
                "Commen",
                "Denesik and Sons Party"
            ],
            [
                58,
                "Electronics",
                "Denesik and Sons Party"
            ],
            [
                26,
                "Electronics",
                "Denesik and Sons Party"
            ],
            [
                80,
                "Furniture",
                "Denesik and Sons Party"
            ],
            [
                1,
                "Electronics",
                "Denesik and Sons Party"
            ],
            [
                10,
                "Commen",
                "Denesik and Sons Party"
            ],
            [
                46,
                "Commen",
                "Denesik and Sons Party"
            ],
            [
                14,
                "Furniture",
                "Robel-Schulist Group"
            ],
            [
                47,
                "Commen",
                "Robel-Schulist Group"
            ],
            [
                68,
                "Commen",
                "Robel-Schulist Group"
            ]
        ]
    },
    {
        "question": "What are the id and details of the customers who have at least 3 events?",
        "query": "MATCH (T1:`local_govt_and_lot.Customers`)-[]-(T2:`local_govt_and_lot.Customer_Events`)\nWITH count(*) AS count, T1.customer_details AS customer_details, T1.customer_id AS customer_id\nWHERE count  >= 3\nRETURN customer_id,customer_details",
        "db_id": "local_govt_and_lot",
        "answers": [
            [
                19,
                "Sabryna Moore PhD"
            ]
        ]
    },
    {
        "question": "What is each customer's move in date, and the corresponding customer id and details?",
        "query": "MATCH (T1:`local_govt_and_lot.Customers`)-[]-(T2:`local_govt_and_lot.Customer_Events`)\nRETURN T2.date_moved_in,T1.customer_id,T1.customer_details",
        "db_id": "local_govt_and_lot",
        "answers": [
            [
                "2015-03-27 12:00:00",
                4,
                "Mr. Raul Prosacco"
            ],
            [
                "2015-03-27 12:00:00",
                5,
                "Esteban Senger"
            ],
            [
                "2015-03-27 12:00:00",
                16,
                "Tyrique Durgan II"
            ],
            [
                "2015-03-27 12:00:00",
                19,
                "Sabryna Moore PhD"
            ],
            [
                "2015-03-27 12:00:00",
                19,
                "Sabryna Moore PhD"
            ],
            [
                "2016-09-27 12:00:00",
                19,
                "Sabryna Moore PhD"
            ],
            [
                "2015-03-27 12:00:00",
                19,
                "Sabryna Moore PhD"
            ],
            [
                "2016-09-27 12:00:00",
                31,
                "Monty Sauer III"
            ],
            [
                "2015-03-27 12:00:00",
                63,
                "Vincenza Price"
            ],
            [
                "2015-03-27 12:00:00",
                79,
                "Oma Smith"
            ],
            [
                "2015-03-27 12:00:00",
                79,
                "Oma Smith"
            ],
            [
                "2016-09-27 12:00:00",
                91,
                "Mackenzie Hettinger V"
            ],
            [
                "2016-09-27 12:00:00",
                91,
                "Mackenzie Hettinger V"
            ]
        ]
    },
    {
        "question": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'",
        "query": "MATCH (T1:`local_govt_and_lot.Timed_Status_of_Things`)-[]-(T2:`local_govt_and_lot.Things`)\nWHERE T1.Status_of_Thing_Code = 'Close' OR T1.Date_and_Date < '2017-06-19 02:59:21'\nRETURN DISTINCT T2.thing_id,T2.Type_of_Thing_Code",
        "db_id": "local_govt_and_lot",
        "answers": [
            [
                2,
                "Electronics"
            ],
            [
                10,
                "Commen"
            ],
            [
                26,
                "Electronics"
            ],
            [
                47,
                "Commen"
            ],
            [
                58,
                "Electronics"
            ],
            [
                80,
                "Furniture"
            ],
            [
                85,
                "Commen"
            ],
            [
                92,
                "Commen"
            ]
        ]
    },
    {
        "question": "How many different status codes of things are there?",
        "query": "MATCH (timed_status_of_things:`local_govt_and_lot.Timed_Status_of_Things`)\nRETURN count(DISTINCT timed_status_of_things.Status_of_Thing_Code)",
        "db_id": "local_govt_and_lot",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "When is the last day any resident moved in?",
        "query": "MATCH (residents:`local_govt_and_lot.Residents`)\nRETURN max(residents.date_moved_in)",
        "db_id": "local_govt_and_lot",
        "answers": [
            [
                "2017-06-17 15:43:33"
            ]
        ]
    },
    {
        "question": "What are the resident details containing the substring 'Miss'?",
        "query": "MATCH (residents:`local_govt_and_lot.Residents`)\nWHERE residents.other_details =~'.*[M|m]iss.*'\nRETURN residents.other_details",
        "db_id": "local_govt_and_lot",
        "answers": [
            [
                "Miss Naomie Osinski"
            ],
            [
                "Miss Alanis Lockman"
            ]
        ]
    },
    {
        "question": "List the customer event id and the corresponding move in date and property id.",
        "query": "MATCH (customer_events:`local_govt_and_lot.Customer_Events`)\nRETURN customer_events.Customer_Event_ID,customer_events.date_moved_in,customer_events.property_id",
        "db_id": "local_govt_and_lot",
        "answers": [
            [
                70,
                "2015-03-27 12:00:00",
                605
            ],
            [
                160,
                "2015-03-27 12:00:00",
                879
            ],
            [
                166,
                "2015-03-27 12:00:00",
                629
            ],
            [
                216,
                "2015-03-27 12:00:00",
                669
            ],
            [
                226,
                "2015-03-27 12:00:00",
                748
            ],
            [
                256,
                "2015-03-27 12:00:00",
                108
            ],
            [
                428,
                "2015-03-27 12:00:00",
                954
            ],
            [
                530,
                "2015-03-27 12:00:00",
                669
            ],
            [
                559,
                "2015-03-27 12:00:00",
                107
            ],
            [
                591,
                "2016-09-27 12:00:00",
                120
            ],
            [
                606,
                "2016-09-27 12:00:00",
                445
            ],
            [
                627,
                "2016-09-27 12:00:00",
                748
            ],
            [
                817,
                "2016-09-27 12:00:00",
                107
            ]
        ]
    },
    {
        "question": "How many customers did not have any event?",
        "query": "MATCH (customers:`local_govt_and_lot.Customers`)\nWHERE NOT (customers:`local_govt_and_lot.Customers`)-[]-(:`local_govt_and_lot.Customer_Events`)\nRETURN count(*)",
        "db_id": "local_govt_and_lot",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "What are the distinct move in dates of the residents?",
        "query": "MATCH (residents:`local_govt_and_lot.Residents`)\nRETURN DISTINCT residents.date_moved_in",
        "db_id": "local_govt_and_lot",
        "answers": [
            [
                "2017-06-17 15:43:33"
            ],
            [
                "2015-03-27 12:00:00"
            ],
            [
                "2016-09-27 12:00:00"
            ]
        ]
    },
    {
        "question": "How many schools are there?",
        "query": "MATCH (school:`school_player.school`)\nRETURN count(*)",
        "db_id": "school_player",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "Count the number of schools.",
        "query": "MATCH (school:`school_player.school`)\nRETURN count(*)",
        "db_id": "school_player",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "List the locations of schools in ascending order of enrollment.",
        "query": "MATCH (school:`school_player.school`)\nRETURN school.Location\nORDER BY school.Enrollment ASC",
        "db_id": "school_player",
        "answers": [
            [
                "Bellevue Hill"
            ],
            [
                "Milsons Point"
            ],
            [
                "Waverley"
            ],
            [
                "Wahroonga"
            ],
            [
                "Summer Hill"
            ],
            [
                "Hornsby"
            ]
        ]
    },
    {
        "question": "What is the list of school locations sorted in ascending order of school enrollment?",
        "query": "MATCH (school:`school_player.school`)\nRETURN school.Location\nORDER BY school.Enrollment ASC",
        "db_id": "school_player",
        "answers": [
            [
                "Bellevue Hill"
            ],
            [
                "Milsons Point"
            ],
            [
                "Waverley"
            ],
            [
                "Wahroonga"
            ],
            [
                "Summer Hill"
            ],
            [
                "Hornsby"
            ]
        ]
    },
    {
        "question": "List the locations of schools in descending order of founded year.",
        "query": "MATCH (school:`school_player.school`)\nRETURN school.Location\nORDER BY school.Founded DESC",
        "db_id": "school_player",
        "answers": [
            [
                "Wahroonga"
            ],
            [
                "Bellevue Hill"
            ],
            [
                "Summer Hill"
            ],
            [
                "Waverley"
            ],
            [
                "Hornsby"
            ],
            [
                "Milsons Point"
            ]
        ]
    },
    {
        "question": "What is the list of school locations sorted in descending order of school foundation year?",
        "query": "MATCH (school:`school_player.school`)\nRETURN school.Location\nORDER BY school.Founded DESC",
        "db_id": "school_player",
        "answers": [
            [
                "Wahroonga"
            ],
            [
                "Bellevue Hill"
            ],
            [
                "Summer Hill"
            ],
            [
                "Waverley"
            ],
            [
                "Hornsby"
            ],
            [
                "Milsons Point"
            ]
        ]
    },
    {
        "question": "What are the enrollments of schools whose denomination is not \"Catholic\"?",
        "query": "MATCH (school:`school_player.school`)\nWHERE school.Denomination <> 'Catholic'\nRETURN school.Enrollment",
        "db_id": "school_player",
        "answers": [
            [
                2300.0
            ],
            [
                1000.0
            ],
            [
                1850.0
            ],
            [
                2200.0
            ]
        ]
    },
    {
        "question": "List the enrollment for each school that does not have \"Catholic\" as denomination.",
        "query": "MATCH (school:`school_player.school`)\nWHERE school.Denomination <> 'Catholic'\nRETURN school.Enrollment",
        "db_id": "school_player",
        "answers": [
            [
                2300.0
            ],
            [
                1000.0
            ],
            [
                1850.0
            ],
            [
                2200.0
            ]
        ]
    },
    {
        "question": "What is the average enrollment of schools?",
        "query": "MATCH (school:`school_player.school`)\nRETURN avg(school.Enrollment)",
        "db_id": "school_player",
        "answers": [
            [
                1663.3333333333333
            ]
        ]
    },
    {
        "question": "Take the average of the school enrollment.",
        "query": "MATCH (school:`school_player.school`)\nRETURN avg(school.Enrollment)",
        "db_id": "school_player",
        "answers": [
            [
                1663.3333333333333
            ]
        ]
    },
    {
        "question": "What are the teams of the players, sorted in ascending alphabetical order?",
        "query": "MATCH (player:`school_player.player`)\nRETURN player.Team\nORDER BY player.Team ASC",
        "db_id": "school_player",
        "answers": [
            [
                "Baltimore Orioles"
            ],
            [
                "Chicago Cubs"
            ],
            [
                "Chicago White Sox"
            ],
            [
                "Cincinnati Reds"
            ],
            [
                "Detroit Tigers"
            ],
            [
                "Florida Marlins"
            ],
            [
                "Houston Astros"
            ],
            [
                "Kansas City Royals"
            ],
            [
                "Los Angeles Dodgers"
            ],
            [
                "Milwaukee Brewers"
            ],
            [
                "Minnesota Twins"
            ],
            [
                "New York Mets"
            ],
            [
                "New York Mets"
            ],
            [
                "Oakland Athletics"
            ],
            [
                "Pittsburgh Pirates"
            ],
            [
                "San Diego Padres"
            ],
            [
                "San Francisco Giants"
            ],
            [
                "Seattle Mariners"
            ],
            [
                "St. Louis Cardinals"
            ],
            [
                "Tampa Bay Devil Rays"
            ],
            [
                "Texas Rangers"
            ],
            [
                "Toronto Blue Jays"
            ],
            [
                "Washington Nationals"
            ]
        ]
    },
    {
        "question": "Find the team of each player and sort them in ascending alphabetical order.",
        "query": "MATCH (player:`school_player.player`)\nRETURN player.Team\nORDER BY player.Team ASC",
        "db_id": "school_player",
        "answers": [
            [
                "Baltimore Orioles"
            ],
            [
                "Chicago Cubs"
            ],
            [
                "Chicago White Sox"
            ],
            [
                "Cincinnati Reds"
            ],
            [
                "Detroit Tigers"
            ],
            [
                "Florida Marlins"
            ],
            [
                "Houston Astros"
            ],
            [
                "Kansas City Royals"
            ],
            [
                "Los Angeles Dodgers"
            ],
            [
                "Milwaukee Brewers"
            ],
            [
                "Minnesota Twins"
            ],
            [
                "New York Mets"
            ],
            [
                "New York Mets"
            ],
            [
                "Oakland Athletics"
            ],
            [
                "Pittsburgh Pirates"
            ],
            [
                "San Diego Padres"
            ],
            [
                "San Francisco Giants"
            ],
            [
                "Seattle Mariners"
            ],
            [
                "St. Louis Cardinals"
            ],
            [
                "Tampa Bay Devil Rays"
            ],
            [
                "Texas Rangers"
            ],
            [
                "Toronto Blue Jays"
            ],
            [
                "Washington Nationals"
            ]
        ]
    },
    {
        "question": "How many different positions of players are there?",
        "query": "MATCH (player:`school_player.player`)\nRETURN count(DISTINCT player.Position)",
        "db_id": "school_player",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "Count the number of distinct player positions.",
        "query": "MATCH (player:`school_player.player`)\nRETURN count(DISTINCT player.Position)",
        "db_id": "school_player",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "Find the team of the player of the highest age.",
        "query": "MATCH (player:`school_player.player`)\nRETURN player.Team\nORDER BY player.Age DESC\nLIMIT 1",
        "db_id": "school_player",
        "answers": [
            [
                "New York Mets"
            ]
        ]
    },
    {
        "question": "Which team has the oldest player?",
        "query": "MATCH (player:`school_player.player`)\nRETURN player.Team\nORDER BY player.Age DESC\nLIMIT 1",
        "db_id": "school_player",
        "answers": [
            [
                "New York Mets"
            ]
        ]
    },
    {
        "question": "List the teams of the players with the top 5 largest ages.",
        "query": "MATCH (player:`school_player.player`)\nRETURN player.Team\nORDER BY player.Age DESC\nLIMIT 5",
        "db_id": "school_player",
        "answers": [
            [
                "New York Mets"
            ],
            [
                "Detroit Tigers"
            ],
            [
                "Baltimore Orioles"
            ],
            [
                "St. Louis Cardinals"
            ],
            [
                "Toronto Blue Jays"
            ]
        ]
    },
    {
        "question": "What are the teams that have the 5 oldest players?",
        "query": "MATCH (player:`school_player.player`)\nRETURN player.Team\nORDER BY player.Age DESC\nLIMIT 5",
        "db_id": "school_player",
        "answers": [
            [
                "New York Mets"
            ],
            [
                "Detroit Tigers"
            ],
            [
                "Baltimore Orioles"
            ],
            [
                "St. Louis Cardinals"
            ],
            [
                "Toronto Blue Jays"
            ]
        ]
    },
    {
        "question": "For each player, show the team and the location of school they belong to.",
        "query": "MATCH (T1:`school_player.player`)-[]-(T2:`school_player.school`)\nRETURN T1.Team,T2.Location",
        "db_id": "school_player",
        "answers": [
            [
                "Washington Nationals",
                "Milsons Point"
            ],
            [
                "Milwaukee Brewers",
                "Milsons Point"
            ],
            [
                "Baltimore Orioles",
                "Milsons Point"
            ],
            [
                "Kansas City Royals",
                "Milsons Point"
            ],
            [
                "Toronto Blue Jays",
                "Milsons Point"
            ],
            [
                "Los Angeles Dodgers",
                "Milsons Point"
            ],
            [
                "Houston Astros",
                "Milsons Point"
            ],
            [
                "Cincinnati Reds",
                "Milsons Point"
            ],
            [
                "Tampa Bay Devil Rays",
                "Milsons Point"
            ],
            [
                "Chicago White Sox",
                "Milsons Point"
            ],
            [
                "Texas Rangers",
                "Milsons Point"
            ],
            [
                "Oakland Athletics",
                "Hornsby"
            ],
            [
                "Florida Marlins",
                "Hornsby"
            ],
            [
                "Pittsburgh Pirates",
                "Hornsby"
            ],
            [
                "San Francisco Giants",
                "Hornsby"
            ],
            [
                "Detroit Tigers",
                "Bellevue Hill"
            ],
            [
                "New York Mets",
                "Wahroonga"
            ],
            [
                "Seattle Mariners",
                "Wahroonga"
            ],
            [
                "Chicago Cubs",
                "Wahroonga"
            ],
            [
                "New York Mets",
                "Summer Hill"
            ],
            [
                "San Diego Padres",
                "Summer Hill"
            ],
            [
                "St. Louis Cardinals",
                "Summer Hill"
            ],
            [
                "Minnesota Twins",
                "Waverley"
            ]
        ]
    },
    {
        "question": "What are the team and the location of school each player belongs to?",
        "query": "MATCH (T1:`school_player.player`)-[]-(T2:`school_player.school`)\nRETURN T1.Team,T2.Location",
        "db_id": "school_player",
        "answers": [
            [
                "Washington Nationals",
                "Milsons Point"
            ],
            [
                "Milwaukee Brewers",
                "Milsons Point"
            ],
            [
                "Baltimore Orioles",
                "Milsons Point"
            ],
            [
                "Kansas City Royals",
                "Milsons Point"
            ],
            [
                "Toronto Blue Jays",
                "Milsons Point"
            ],
            [
                "Los Angeles Dodgers",
                "Milsons Point"
            ],
            [
                "Houston Astros",
                "Milsons Point"
            ],
            [
                "Cincinnati Reds",
                "Milsons Point"
            ],
            [
                "Tampa Bay Devil Rays",
                "Milsons Point"
            ],
            [
                "Chicago White Sox",
                "Milsons Point"
            ],
            [
                "Texas Rangers",
                "Milsons Point"
            ],
            [
                "Oakland Athletics",
                "Hornsby"
            ],
            [
                "Florida Marlins",
                "Hornsby"
            ],
            [
                "Pittsburgh Pirates",
                "Hornsby"
            ],
            [
                "San Francisco Giants",
                "Hornsby"
            ],
            [
                "Detroit Tigers",
                "Bellevue Hill"
            ],
            [
                "New York Mets",
                "Wahroonga"
            ],
            [
                "Seattle Mariners",
                "Wahroonga"
            ],
            [
                "Chicago Cubs",
                "Wahroonga"
            ],
            [
                "New York Mets",
                "Summer Hill"
            ],
            [
                "San Diego Padres",
                "Summer Hill"
            ],
            [
                "St. Louis Cardinals",
                "Summer Hill"
            ],
            [
                "Minnesota Twins",
                "Waverley"
            ]
        ]
    },
    {
        "question": "Show the locations of schools that have more than 1 player.",
        "query": "MATCH (T1:`school_player.player`)-[]-(T2:`school_player.school`)\nWITH count(*) AS count, T2.Location AS Location\nWHERE count  > 1\nRETURN Location",
        "db_id": "school_player",
        "answers": [
            [
                "Milsons Point"
            ],
            [
                "Hornsby"
            ],
            [
                "Wahroonga"
            ],
            [
                "Summer Hill"
            ]
        ]
    },
    {
        "question": "Which schools have more than 1 player? Give me the school locations.",
        "query": "MATCH (T1:`school_player.player`)-[]-(T2:`school_player.school`)\nWITH count(*) AS count, T2.Location AS Location\nWHERE count  > 1\nRETURN Location",
        "db_id": "school_player",
        "answers": [
            [
                "Milsons Point"
            ],
            [
                "Hornsby"
            ],
            [
                "Wahroonga"
            ],
            [
                "Summer Hill"
            ]
        ]
    },
    {
        "question": "Show the denomination of the school that has the most players.",
        "query": "MATCH (T1:`school_player.player`)-[]-(T2:`school_player.school`)\nWITH count(T1.School_ID) AS count, T2.Denomination AS Denomination\nRETURN Denomination\nORDER BY count DESC\nLIMIT 1",
        "db_id": "school_player",
        "answers": [
            [
                "Catholic"
            ]
        ]
    },
    {
        "question": "What is the denomination of the school the most players belong to?",
        "query": "MATCH (T1:`school_player.player`)-[]-(T2:`school_player.school`)\nWITH count(T1.School_ID) AS count, T2.Denomination AS Denomination\nRETURN Denomination\nORDER BY count DESC\nLIMIT 1",
        "db_id": "school_player",
        "answers": [
            [
                "Catholic"
            ]
        ]
    },
    {
        "question": "Show locations and nicknames of schools.",
        "query": "MATCH (T1:`school_player.school`)-[]-(T2:`school_player.school_details`)\nRETURN T1.Location,T2.Nickname",
        "db_id": "school_player",
        "answers": [
            [
                "Milsons Point",
                "Tigers"
            ],
            [
                "Hornsby",
                "Auks"
            ],
            [
                "Bellevue Hill",
                "Buccaneers"
            ],
            [
                "Wahroonga",
                "Raiders"
            ],
            [
                "Summer Hill",
                "Seahawks"
            ],
            [
                "Waverley",
                "Silver Eagles"
            ]
        ]
    },
    {
        "question": "What are the location and nickname of each school?",
        "query": "MATCH (T1:`school_player.school`)-[]-(T2:`school_player.school_details`)\nRETURN T1.Location,T2.Nickname",
        "db_id": "school_player",
        "answers": [
            [
                "Milsons Point",
                "Tigers"
            ],
            [
                "Hornsby",
                "Auks"
            ],
            [
                "Bellevue Hill",
                "Buccaneers"
            ],
            [
                "Wahroonga",
                "Raiders"
            ],
            [
                "Summer Hill",
                "Seahawks"
            ],
            [
                "Waverley",
                "Silver Eagles"
            ]
        ]
    },
    {
        "question": "Please show different denominations and the corresponding number of schools.",
        "query": "MATCH (school:`school_player.school`)\nWITH school.Denomination AS Denomination, count(school.Denomination) AS count\nRETURN Denomination,count",
        "db_id": "school_player",
        "answers": [
            [
                "Catholic",
                2
            ],
            [
                "Anglican",
                3
            ],
            [
                "Uniting Church",
                1
            ]
        ]
    },
    {
        "question": "For each denomination, return the denomination and the count of schools with that denomination.",
        "query": "MATCH (school:`school_player.school`)\nWITH school.Denomination AS Denomination, count(school.Denomination) AS count\nRETURN Denomination,count",
        "db_id": "school_player",
        "answers": [
            [
                "Catholic",
                2
            ],
            [
                "Anglican",
                3
            ],
            [
                "Uniting Church",
                1
            ]
        ]
    },
    {
        "question": "Please show different denominations and the corresponding number of schools in descending order.",
        "query": "MATCH (school:`school_player.school`)\nWITH school.Denomination AS Denomination, count(school.Denomination) AS count\nRETURN Denomination,count\nORDER BY count DESC",
        "db_id": "school_player",
        "answers": [
            [
                "Anglican",
                3
            ],
            [
                "Catholic",
                2
            ],
            [
                "Uniting Church",
                1
            ]
        ]
    },
    {
        "question": "Order denominations in descending order of the count of schools with the denomination. Return each denomination with the count of schools.",
        "query": "MATCH (school:`school_player.school`)\nWITH school.Denomination AS Denomination, count(school.Denomination) AS count\nRETURN Denomination,count\nORDER BY count DESC",
        "db_id": "school_player",
        "answers": [
            [
                "Anglican",
                3
            ],
            [
                "Catholic",
                2
            ],
            [
                "Uniting Church",
                1
            ]
        ]
    },
    {
        "question": "List the school color of the school that has the largest enrollment.",
        "query": "MATCH (school:`school_player.school`)\nRETURN school.School_Colors\nORDER BY school.Enrollment DESC\nLIMIT 1",
        "db_id": "school_player",
        "answers": [
            [
                "Red & Blue"
            ]
        ]
    },
    {
        "question": "What is the school color of the school with the largest enrollment?",
        "query": "MATCH (school:`school_player.school`)\nRETURN school.School_Colors\nORDER BY school.Enrollment DESC\nLIMIT 1",
        "db_id": "school_player",
        "answers": [
            [
                "Red & Blue"
            ]
        ]
    },
    {
        "question": "Show the nicknames of schools that are not in division 1.",
        "query": "MATCH (school_details:`school_player.school_details`)\nWHERE school_details.Division <> 'Division 1'\nRETURN school_details.Nickname",
        "db_id": "school_player",
        "answers": [
            [
                "Auks"
            ],
            [
                "Raiders"
            ],
            [
                "Seahawks"
            ],
            [
                "Silver Eagles"
            ]
        ]
    },
    {
        "question": "What are the nicknames of schools whose division is not 1?",
        "query": "MATCH (school_details:`school_player.school_details`)\nWHERE school_details.Division <> 'Division 1'\nRETURN school_details.Nickname",
        "db_id": "school_player",
        "answers": [
            [
                "Auks"
            ],
            [
                "Raiders"
            ],
            [
                "Seahawks"
            ],
            [
                "Silver Eagles"
            ]
        ]
    },
    {
        "question": "Show the denomination shared by more than one school.",
        "query": "MATCH (school:`school_player.school`)\nWITH school.Denomination AS Denomination, count(*) AS count\nWHERE count  > 1\nRETURN Denomination",
        "db_id": "school_player",
        "answers": [
            [
                "Catholic"
            ],
            [
                "Anglican"
            ]
        ]
    },
    {
        "question": "What are the denomination more than one school have?",
        "query": "MATCH (school:`school_player.school`)\nWITH school.Denomination AS Denomination, count(*) AS count\nWHERE count  > 1\nRETURN Denomination",
        "db_id": "school_player",
        "answers": [
            [
                "Catholic"
            ],
            [
                "Anglican"
            ]
        ]
    },
    {
        "question": "Find the list of page size which have more than 3 product listed",
        "query": "MATCH (product:`store_product.product`)\nWITH count(*) AS count, product.max_page_size AS max_page_size\nWHERE count  > 3\nRETURN max_page_size",
        "db_id": "store_product",
        "answers": [
            [
                "A4"
            ]
        ]
    },
    {
        "question": "What is the maximum page size for everything that has more than 3 products listed?",
        "query": "MATCH (product:`store_product.product`)\nWITH count(*) AS count, product.max_page_size AS max_page_size\nWHERE count  > 3\nRETURN max_page_size",
        "db_id": "store_product",
        "answers": [
            [
                "A4"
            ]
        ]
    },
    {
        "question": "Find the name and population of district with population between 200000 and 2000000",
        "query": "MATCH (district:`store_product.district`)\nWHERE 200000<=district.City_Population<=2000000\nRETURN district.District_name,district.City_Population",
        "db_id": "store_product",
        "answers": [
            [
                "Bahawalpur District",
                530438.0
            ],
            [
                "Chiniot District",
                219254.0
            ],
            [
                "Dera Ghazi Khan District",
                464742.0
            ],
            [
                "Gujranwala District",
                1526168.0
            ],
            [
                "Gujrat District",
                328512.0
            ],
            [
                "Jhang District",
                365198.0
            ],
            [
                "Kasur District",
                314617.0
            ]
        ]
    },
    {
        "question": "What are the district names and city populations for all districts that between 200,000 and 2,000,000 residents?",
        "query": "MATCH (district:`store_product.district`)\nWHERE 200000<=district.City_Population<=2000000\nRETURN district.District_name,district.City_Population",
        "db_id": "store_product",
        "answers": [
            [
                "Bahawalpur District",
                530438.0
            ],
            [
                "Chiniot District",
                219254.0
            ],
            [
                "Dera Ghazi Khan District",
                464742.0
            ],
            [
                "Gujranwala District",
                1526168.0
            ],
            [
                "Gujrat District",
                328512.0
            ],
            [
                "Jhang District",
                365198.0
            ],
            [
                "Kasur District",
                314617.0
            ]
        ]
    },
    {
        "question": "Find the name all districts with city area greater than 10 or population larger than 100000",
        "query": "MATCH (district:`store_product.district`)\nWHERE district.City_Area > 10 OR district.City_Population > 100000\nRETURN district.District_name",
        "db_id": "store_product",
        "answers": [
            [
                "Attock District"
            ],
            [
                "Bahawalnagar District"
            ],
            [
                "Bahawalpur District"
            ],
            [
                "Bhakkar District"
            ],
            [
                "Chakwal District"
            ],
            [
                "Chiniot District"
            ],
            [
                "Dera Ghazi Khan District"
            ],
            [
                "Faisalabad District"
            ],
            [
                "Gujranwala District"
            ],
            [
                "Gujrat District"
            ],
            [
                "Hafizabad District"
            ],
            [
                "Jhang District"
            ],
            [
                "Jhelum District"
            ],
            [
                "Kasur District"
            ],
            [
                "Khanewal District"
            ]
        ]
    },
    {
        "question": "What are the names of all districts with a city area greater than 10 or have more than 100000 people living there?",
        "query": "MATCH (district:`store_product.district`)\nWHERE district.City_Area > 10 OR district.City_Population > 100000\nRETURN district.District_name",
        "db_id": "store_product",
        "answers": [
            [
                "Attock District"
            ],
            [
                "Bahawalnagar District"
            ],
            [
                "Bahawalpur District"
            ],
            [
                "Bhakkar District"
            ],
            [
                "Chakwal District"
            ],
            [
                "Chiniot District"
            ],
            [
                "Dera Ghazi Khan District"
            ],
            [
                "Faisalabad District"
            ],
            [
                "Gujranwala District"
            ],
            [
                "Gujrat District"
            ],
            [
                "Hafizabad District"
            ],
            [
                "Jhang District"
            ],
            [
                "Jhelum District"
            ],
            [
                "Kasur District"
            ],
            [
                "Khanewal District"
            ]
        ]
    },
    {
        "question": "Which district has the largest population?",
        "query": "MATCH (district:`store_product.district`)\nRETURN district.District_name\nORDER BY district.City_Population DESC\nLIMIT 1",
        "db_id": "store_product",
        "answers": [
            [
                "Faisalabad District"
            ]
        ]
    },
    {
        "question": "What is the name of the district with the most residents?",
        "query": "MATCH (district:`store_product.district`)\nRETURN district.District_name\nORDER BY district.City_Population DESC\nLIMIT 1",
        "db_id": "store_product",
        "answers": [
            [
                "Faisalabad District"
            ]
        ]
    },
    {
        "question": "Which district has the least area?",
        "query": "MATCH (district:`store_product.district`)\nRETURN district.District_name\nORDER BY district.City_Area ASC\nLIMIT 1",
        "db_id": "store_product",
        "answers": [
            [
                "Chakwal District"
            ]
        ]
    },
    {
        "question": "What is the name of the district with the smallest area?",
        "query": "MATCH (district:`store_product.district`)\nRETURN district.District_name\nORDER BY district.City_Area ASC\nLIMIT 1",
        "db_id": "store_product",
        "answers": [
            [
                "Chakwal District"
            ]
        ]
    },
    {
        "question": "Find all types of store and number of them.",
        "query": "MATCH (store:`store_product.store`)\nWITH store.Type AS Type, count(store.Type) AS count\nRETURN Type,count",
        "db_id": "store_product",
        "answers": [
            [
                "City Mall",
                2
            ],
            [
                "Village Store",
                3
            ]
        ]
    },
    {
        "question": "For each type of store, how many of them are there?",
        "query": "MATCH (store:`store_product.store`)\nWITH store.Type AS Type, count(store.Type) AS count\nRETURN Type,count",
        "db_id": "store_product",
        "answers": [
            [
                "City Mall",
                2
            ],
            [
                "Village Store",
                3
            ]
        ]
    },
    {
        "question": "What is the average pages per minute color?",
        "query": "MATCH (product:`store_product.product`)\nRETURN avg(product.pages_per_minute_color)",
        "db_id": "store_product",
        "answers": [
            [
                18.5
            ]
        ]
    },
    {
        "question": "What is the average number of pages per minute color?",
        "query": "MATCH (product:`store_product.product`)\nRETURN avg(product.pages_per_minute_color)",
        "db_id": "store_product",
        "answers": [
            [
                18.5
            ]
        ]
    },
    {
        "question": "Find products with max page size as \"A4\" and pages per minute color smaller than 5.",
        "query": "MATCH (product:`store_product.product`)\nWHERE product.max_page_size = 'A4' AND product.pages_per_minute_color < 5\nRETURN product.product",
        "db_id": "store_product",
        "answers": [
            [
                "Xerox Travel Scanner 100"
            ],
            [
                "ScanShell 3000DN"
            ]
        ]
    },
    {
        "question": "What are the products with the maximum page size A4 that also have a pages per minute color smaller than 5?",
        "query": "MATCH (product:`store_product.product`)\nWHERE product.max_page_size = 'A4' AND product.pages_per_minute_color < 5\nRETURN product.product",
        "db_id": "store_product",
        "answers": [
            [
                "Xerox Travel Scanner 100"
            ],
            [
                "ScanShell 3000DN"
            ]
        ]
    },
    {
        "question": "Find products with max page size as \"A4\" or pages per minute color smaller than 5.",
        "query": "MATCH (product:`store_product.product`)\nWHERE product.max_page_size = 'A4' OR product.pages_per_minute_color < 5\nRETURN product.product",
        "db_id": "store_product",
        "answers": [
            [
                "Fujitsu fi-6130 A4 Series Scanner"
            ],
            [
                "Plustek MobileOffice D28 Corporate"
            ],
            [
                "Xerox Travel Scanner 100"
            ],
            [
                "ScanShell 3000DN"
            ]
        ]
    },
    {
        "question": "What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?",
        "query": "MATCH (product:`store_product.product`)\nWHERE product.max_page_size = 'A4' OR product.pages_per_minute_color < 5\nRETURN product.product",
        "db_id": "store_product",
        "answers": [
            [
                "Fujitsu fi-6130 A4 Series Scanner"
            ],
            [
                "Plustek MobileOffice D28 Corporate"
            ],
            [
                "Xerox Travel Scanner 100"
            ],
            [
                "ScanShell 3000DN"
            ]
        ]
    },
    {
        "question": "Find the most prominent max page size among all the products.",
        "query": "MATCH (product:`store_product.product`)\nWITH count(product.max_page_size) AS count, product.max_page_size AS max_page_size\nRETURN max_page_size\nORDER BY count DESC\nLIMIT 1",
        "db_id": "store_product",
        "answers": [
            [
                "A4"
            ]
        ]
    },
    {
        "question": "What is the most common maximum page size?",
        "query": "MATCH (product:`store_product.product`)\nWITH count(product.max_page_size) AS count, product.max_page_size AS max_page_size\nRETURN max_page_size\nORDER BY count DESC\nLIMIT 1",
        "db_id": "store_product",
        "answers": [
            [
                "A4"
            ]
        ]
    },
    {
        "question": "What is the average enrollment number?",
        "query": "MATCH (college:`soccer_2.College`)\nRETURN avg(college.enr)",
        "db_id": "soccer_2",
        "answers": [
            [
                17750.0
            ]
        ]
    },
    {
        "question": "How many students, on average, does each college have enrolled?",
        "query": "MATCH (college:`soccer_2.College`)\nRETURN avg(college.enr)",
        "db_id": "soccer_2",
        "answers": [
            [
                17750.0
            ]
        ]
    },
    {
        "question": "How many colleges in total?",
        "query": "MATCH (college:`soccer_2.College`)\nRETURN count(*)",
        "db_id": "soccer_2",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "How many different colleges are there?",
        "query": "MATCH (college:`soccer_2.College`)\nRETURN count(*)",
        "db_id": "soccer_2",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "How many players have more than 1000 hours of training?",
        "query": "MATCH (player:`soccer_2.Player`)\nWHERE player.HS > 1000\nRETURN count(*)",
        "db_id": "soccer_2",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "How many different players trained for more than 1000 hours?",
        "query": "MATCH (player:`soccer_2.Player`)\nWHERE player.HS > 1000\nRETURN count(*)",
        "db_id": "soccer_2",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "How many colleges has more than 15000 students?",
        "query": "MATCH (college:`soccer_2.College`)\nWHERE college.enr > 15000\nRETURN count(*)",
        "db_id": "soccer_2",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "What is the number of colleges with a student population greater than 15000?",
        "query": "MATCH (college:`soccer_2.College`)\nWHERE college.enr > 15000\nRETURN count(*)",
        "db_id": "soccer_2",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "What is the average training hours of all players?",
        "query": "MATCH (player:`soccer_2.Player`)\nRETURN avg(player.HS)",
        "db_id": "soccer_2",
        "answers": [
            [
                1150.0
            ]
        ]
    },
    {
        "question": "How many hours do the players train on average?",
        "query": "MATCH (player:`soccer_2.Player`)\nRETURN avg(player.HS)",
        "db_id": "soccer_2",
        "answers": [
            [
                1150.0
            ]
        ]
    },
    {
        "question": "Find the name and training hours of players whose hours are below 1500.",
        "query": "MATCH (player:`soccer_2.Player`)\nWHERE player.HS < 1500\nRETURN player.pName,player.HS",
        "db_id": "soccer_2",
        "answers": [
            [
                "Andrew",
                1200
            ],
            [
                "Charles",
                300
            ],
            [
                "Eddie",
                600
            ]
        ]
    },
    {
        "question": "What are the names and number of hours spent training for each player who trains for less than 1500 hours?",
        "query": "MATCH (player:`soccer_2.Player`)\nWHERE player.HS < 1500\nRETURN player.pName,player.HS",
        "db_id": "soccer_2",
        "answers": [
            [
                "Andrew",
                1200
            ],
            [
                "Charles",
                300
            ],
            [
                "Eddie",
                600
            ]
        ]
    },
    {
        "question": "What are the unique types of player positions in the tryout?",
        "query": "MATCH ()-[tryout:`soccer_2.Tryout`]-()\nRETURN count(DISTINCT tryout.pPos)",
        "db_id": "soccer_2",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "What are the different types of player positions?",
        "query": "MATCH ()-[tryout:`soccer_2.Tryout`]-()\nRETURN count(DISTINCT tryout.pPos)",
        "db_id": "soccer_2",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Find the max, average and min training hours of all players.",
        "query": "MATCH (player:`soccer_2.Player`)\nRETURN avg(player.HS),max(player.HS),min(player.HS)",
        "db_id": "soccer_2",
        "answers": [
            [
                1150.0,
                1600,
                300
            ]
        ]
    },
    {
        "question": "What is the average, maximum, and minimum for the number of hours spent training?",
        "query": "MATCH (player:`soccer_2.Player`)\nRETURN avg(player.HS),max(player.HS),min(player.HS)",
        "db_id": "soccer_2",
        "answers": [
            [
                1150.0,
                1600,
                300
            ]
        ]
    },
    {
        "question": "What is average enrollment of colleges in the state FL?",
        "query": "MATCH (college:`soccer_2.College`)\nWHERE college.state = 'FL'\nRETURN avg(college.enr)",
        "db_id": "soccer_2",
        "answers": [
            [
                19000.0
            ]
        ]
    },
    {
        "question": "What is average number of students enrolled in Florida colleges?",
        "query": "MATCH (college:`soccer_2.College`)\nWHERE college.state = 'FL'\nRETURN avg(college.enr)",
        "db_id": "soccer_2",
        "answers": [
            [
                19000.0
            ]
        ]
    },
    {
        "question": "What are the names of players whose training hours is between 500 and 1500?",
        "query": "MATCH (player:`soccer_2.Player`)\nWHERE 500<=player.HS<=1500\nRETURN player.pName",
        "db_id": "soccer_2",
        "answers": [
            [
                "Andrew"
            ],
            [
                "Eddie"
            ]
        ]
    },
    {
        "question": "What are the names of players who train between 500 and 1500 hours?",
        "query": "MATCH (player:`soccer_2.Player`)\nWHERE 500<=player.HS<=1500\nRETURN player.pName",
        "db_id": "soccer_2",
        "answers": [
            [
                "Andrew"
            ],
            [
                "Eddie"
            ]
        ]
    },
    {
        "question": "Find the players whose names contain letter 'a'.",
        "query": "MATCH (player:`soccer_2.Player`)\nWHERE player.pName =~'.*[A|a].*'\nRETURN DISTINCT player.pName",
        "db_id": "soccer_2",
        "answers": [
            [
                "Andrew"
            ],
            [
                "Blake"
            ],
            [
                "Charles"
            ],
            [
                "David"
            ],
            [
                "Drago"
            ]
        ]
    },
    {
        "question": "Who are the players that have names containing the letter a?",
        "query": "MATCH (player:`soccer_2.Player`)\nWHERE player.pName =~'.*[A|a].*'\nRETURN DISTINCT player.pName",
        "db_id": "soccer_2",
        "answers": [
            [
                "Andrew"
            ],
            [
                "Blake"
            ],
            [
                "Charles"
            ],
            [
                "David"
            ],
            [
                "Drago"
            ]
        ]
    },
    {
        "question": "Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.",
        "query": "MATCH (college:`soccer_2.College`)\nWHERE college.enr > 10000 AND college.state = 'LA'\nRETURN college.cName,college.enr",
        "db_id": "soccer_2",
        "answers": [
            [
                "LSU",
                18000
            ]
        ]
    },
    {
        "question": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?",
        "query": "MATCH (college:`soccer_2.College`)\nWHERE college.enr > 10000 AND college.state = 'LA'\nRETURN college.cName,college.enr",
        "db_id": "soccer_2",
        "answers": [
            [
                "LSU",
                18000
            ]
        ]
    },
    {
        "question": "List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.",
        "query": "MATCH (college:`soccer_2.College`)\nWHERE college.enr > 18000\nRETURN college.cName\nORDER BY college.cName",
        "db_id": "soccer_2",
        "answers": [
            [
                "FSU"
            ],
            [
                "OU"
            ]
        ]
    },
    {
        "question": "What is the name of every college in alphabetical order that has more than 18000 students enrolled?",
        "query": "MATCH (college:`soccer_2.College`)\nWHERE college.enr > 18000\nRETURN college.cName\nORDER BY college.cName",
        "db_id": "soccer_2",
        "answers": [
            [
                "FSU"
            ],
            [
                "OU"
            ]
        ]
    },
    {
        "question": "Find the name of players whose card is yes in the descending order of training hours.",
        "query": "MATCH (player:`soccer_2.Player`)\nWHERE player.yCard = 'yes'\nRETURN player.pName\nORDER BY player.HS DESC",
        "db_id": "soccer_2",
        "answers": [
            [
                "David"
            ],
            [
                "Drago"
            ],
            [
                "Eddie"
            ]
        ]
    },
    {
        "question": "What are the name of the players who received a card in descending order of the hours of training?",
        "query": "MATCH (player:`soccer_2.Player`)\nWHERE player.yCard = 'yes'\nRETURN player.pName\nORDER BY player.HS DESC",
        "db_id": "soccer_2",
        "answers": [
            [
                "David"
            ],
            [
                "Drago"
            ],
            [
                "Eddie"
            ]
        ]
    },
    {
        "question": "Which position is most popular among players in the tryout?",
        "query": "MATCH ()-[tryout:`soccer_2.Tryout`]-()\nWITH tryout.pPos AS pPos, count(tryout.pPos) AS count\nRETURN pPos\nORDER BY count DESC\nLIMIT 1",
        "db_id": "soccer_2",
        "answers": [
            [
                "goalie"
            ]
        ]
    },
    {
        "question": "What was the most popular position at tryouts?",
        "query": "MATCH ()-[tryout:`soccer_2.Tryout`]-()\nWITH tryout.pPos AS pPos, count(tryout.pPos) AS count\nRETURN pPos\nORDER BY count DESC\nLIMIT 1",
        "db_id": "soccer_2",
        "answers": [
            [
                "goalie"
            ]
        ]
    },
    {
        "question": "What are the names of schools with the top 3 largest size?",
        "query": "MATCH (college:`soccer_2.College`)\nRETURN college.cName\nORDER BY college.enr DESC\nLIMIT 3",
        "db_id": "soccer_2",
        "answers": [
            [
                "OU"
            ],
            [
                "FSU"
            ],
            [
                "LSU"
            ]
        ]
    },
    {
        "question": "What are the names of the schools with the top 3 largest class sizes?",
        "query": "MATCH (college:`soccer_2.College`)\nRETURN college.cName\nORDER BY college.enr DESC\nLIMIT 3",
        "db_id": "soccer_2",
        "answers": [
            [
                "OU"
            ],
            [
                "FSU"
            ],
            [
                "LSU"
            ]
        ]
    },
    {
        "question": "Find the states where have some college students in tryout.",
        "query": "MATCH (T1:`soccer_2.College`)-[T2:`soccer_2.Tryout`]-()\nRETURN DISTINCT T1.state",
        "db_id": "soccer_2",
        "answers": [
            [
                "LA"
            ],
            [
                "AZ"
            ],
            [
                "OK"
            ],
            [
                "FL"
            ]
        ]
    },
    {
        "question": "What are the different states that have students trying out?",
        "query": "MATCH (T1:`soccer_2.College`)-[T2:`soccer_2.Tryout`]-()\nRETURN DISTINCT T1.state",
        "db_id": "soccer_2",
        "answers": [
            [
                "LA"
            ],
            [
                "AZ"
            ],
            [
                "OK"
            ],
            [
                "FL"
            ]
        ]
    },
    {
        "question": "Find the states where have some college students in tryout and their decisions are yes.",
        "query": "MATCH (T1:`soccer_2.College`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.decision = 'yes'\nRETURN DISTINCT T1.state",
        "db_id": "soccer_2",
        "answers": [
            [
                "AZ"
            ],
            [
                "FL"
            ]
        ]
    },
    {
        "question": "What are the different states that had students successfully try out?",
        "query": "MATCH (T1:`soccer_2.College`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.decision = 'yes'\nRETURN DISTINCT T1.state",
        "db_id": "soccer_2",
        "answers": [
            [
                "AZ"
            ],
            [
                "FL"
            ]
        ]
    },
    {
        "question": "Find the name of all students who were in the tryout sorted in alphabetic order.",
        "query": "MATCH (T1:`soccer_2.Player`)-[T2:`soccer_2.Tryout`]-()\nRETURN T1.pName\nORDER BY T1.pName",
        "db_id": "soccer_2",
        "answers": [
            [
                "Andrew"
            ],
            [
                "Andrew"
            ],
            [
                "Blake"
            ],
            [
                "Charles"
            ],
            [
                "David"
            ],
            [
                "Eddie"
            ]
        ]
    },
    {
        "question": "What are the names of all students who tried out in alphabetical order?",
        "query": "MATCH (T1:`soccer_2.Player`)-[T2:`soccer_2.Tryout`]-()\nRETURN T1.pName\nORDER BY T1.pName",
        "db_id": "soccer_2",
        "answers": [
            [
                "Andrew"
            ],
            [
                "Andrew"
            ],
            [
                "Blake"
            ],
            [
                "Charles"
            ],
            [
                "David"
            ],
            [
                "Eddie"
            ]
        ]
    },
    {
        "question": "Find the name and hours of the students whose tryout decision is yes.",
        "query": "MATCH (T1:`soccer_2.Player`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.decision = 'yes'\nRETURN T1.pName,T1.HS",
        "db_id": "soccer_2",
        "answers": [
            [
                "Andrew",
                1200
            ],
            [
                "Blake",
                1600
            ]
        ]
    },
    {
        "question": "What are the names and hours spent practicing of every student who received a yes at tryouts?",
        "query": "MATCH (T1:`soccer_2.Player`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.decision = 'yes'\nRETURN T1.pName,T1.HS",
        "db_id": "soccer_2",
        "answers": [
            [
                "Andrew",
                1200
            ],
            [
                "Blake",
                1600
            ]
        ]
    },
    {
        "question": "Find the states of the colleges that have students in the tryout who played in striker position.",
        "query": "MATCH (T1:`soccer_2.College`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.pPos = 'striker'\nRETURN T1.state",
        "db_id": "soccer_2",
        "answers": [
            [
                "FL"
            ]
        ]
    },
    {
        "question": "What are the states of the colleges where students who tried out for the striker position attend?",
        "query": "MATCH (T1:`soccer_2.College`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.pPos = 'striker'\nRETURN T1.state",
        "db_id": "soccer_2",
        "answers": [
            [
                "FL"
            ]
        ]
    },
    {
        "question": "Find the names of the students who are in the position of striker and got a yes tryout decision.",
        "query": "MATCH (T1:`soccer_2.Player`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.decision = 'yes' AND T2.pPos = 'striker'\nRETURN T1.pName",
        "db_id": "soccer_2",
        "answers": [
            [
                "Blake"
            ]
        ]
    },
    {
        "question": "What are the names of all students who successfully tried out for the position of striker?",
        "query": "MATCH (T1:`soccer_2.Player`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.decision = 'yes' AND T2.pPos = 'striker'\nRETURN T1.pName",
        "db_id": "soccer_2",
        "answers": [
            [
                "Blake"
            ]
        ]
    },
    {
        "question": "Find the state of the college which player Charles is attending.",
        "query": "MATCH (T1:`soccer_2.College`)-[T2:`soccer_2.Tryout`]-(T3:`soccer_2.Player`)\nWHERE T3.pName = 'Charles'\nRETURN T1.state",
        "db_id": "soccer_2",
        "answers": [
            [
                "OK"
            ]
        ]
    },
    {
        "question": "In which state is the college that Charles attends?",
        "query": "MATCH (T1:`soccer_2.College`)-[T2:`soccer_2.Tryout`]-(T3:`soccer_2.Player`)\nWHERE T3.pName = 'Charles'\nRETURN T1.state",
        "db_id": "soccer_2",
        "answers": [
            [
                "OK"
            ]
        ]
    },
    {
        "question": "Find the average and maximum hours for the students whose tryout decision is yes.",
        "query": "MATCH (T1:`soccer_2.Player`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.decision = 'yes'\nRETURN avg(T1.HS),max(T1.HS)",
        "db_id": "soccer_2",
        "answers": [
            [
                1400.0,
                1600
            ]
        ]
    },
    {
        "question": "What is the average and maximum number of hours students who made the team practiced?",
        "query": "MATCH (T1:`soccer_2.Player`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.decision = 'yes'\nRETURN avg(T1.HS),max(T1.HS)",
        "db_id": "soccer_2",
        "answers": [
            [
                1400.0,
                1600
            ]
        ]
    },
    {
        "question": "Find the average hours for the students whose tryout decision is no.",
        "query": "MATCH (T1:`soccer_2.Player`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.decision = 'no'\nRETURN avg(T1.HS)",
        "db_id": "soccer_2",
        "answers": [
            [
                925.0
            ]
        ]
    },
    {
        "question": "What is the average number of hours spent practicing for students who got rejected?",
        "query": "MATCH (T1:`soccer_2.Player`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.decision = 'no'\nRETURN avg(T1.HS)",
        "db_id": "soccer_2",
        "answers": [
            [
                925.0
            ]
        ]
    },
    {
        "question": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.",
        "query": "MATCH (T1:`soccer_2.College`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.decision = 'yes'\nRETURN DISTINCT T1.state,T1.enr",
        "db_id": "soccer_2",
        "answers": [
            [
                "AZ",
                12000
            ],
            [
                "FL",
                19000
            ]
        ]
    },
    {
        "question": "How many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges?",
        "query": "MATCH (T1:`soccer_2.College`)-[T2:`soccer_2.Tryout`]-()\nWHERE T2.decision = 'yes'\nRETURN DISTINCT T1.state,T1.enr",
        "db_id": "soccer_2",
        "answers": [
            [
                "AZ",
                12000
            ],
            [
                "FL",
                19000
            ]
        ]
    },
    {
        "question": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.",
        "query": "MATCH (college:`soccer_2.College`)\nWHERE college.enr < 13000 AND college.state = 'AZ'\nRETURN college.cName  AS cname \nUNION\nMATCH (college:`soccer_2.College`)\nWHERE college.enr > 15000 AND college.state = 'LA'\nRETURN college.cName  AS cname",
        "db_id": "soccer_2",
        "answers": [
            [
                "ASU"
            ],
            [
                "LSU"
            ]
        ]
    },
    {
        "question": "What are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students?",
        "query": "MATCH (college:`soccer_2.College`)\nWHERE college.enr < 13000 AND college.state = 'AZ'\nRETURN college.cName  AS cname \nUNION\nMATCH (college:`soccer_2.College`)\nWHERE college.enr > 15000 AND college.state = 'LA'\nRETURN college.cName  AS cname",
        "db_id": "soccer_2",
        "answers": [
            [
                "ASU"
            ],
            [
                "LSU"
            ]
        ]
    },
    {
        "question": "How many devices are there?",
        "query": "MATCH (device:`device.device`)\nRETURN count(*)",
        "db_id": "device",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "Count the number of devices.",
        "query": "MATCH (device:`device.device`)\nRETURN count(*)",
        "db_id": "device",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "List the carriers of devices in ascending alphabetical order.",
        "query": "MATCH (device:`device.device`)\nRETURN device.Carrier\nORDER BY device.Carrier ASC",
        "db_id": "device",
        "answers": [
            [
                "Bell Mobility"
            ],
            [
                "Iusacell"
            ],
            [
                "MTS Mobility"
            ],
            [
                "Telus Mobility"
            ],
            [
                "Verizon Wireless"
            ],
            [
                "Vodafone AU"
            ]
        ]
    },
    {
        "question": "What are the different carriers for devices, listed in alphabetical order?",
        "query": "MATCH (device:`device.device`)\nRETURN device.Carrier\nORDER BY device.Carrier ASC",
        "db_id": "device",
        "answers": [
            [
                "Bell Mobility"
            ],
            [
                "Iusacell"
            ],
            [
                "MTS Mobility"
            ],
            [
                "Telus Mobility"
            ],
            [
                "Verizon Wireless"
            ],
            [
                "Vodafone AU"
            ]
        ]
    },
    {
        "question": "What are the carriers of devices whose software platforms are not \"Android\"?",
        "query": "MATCH (device:`device.device`)\nWHERE device.Software_Platform <> 'Android'\nRETURN device.Carrier",
        "db_id": "device",
        "answers": [
            [
                "Verizon Wireless"
            ]
        ]
    },
    {
        "question": "Return the device carriers that do not have Android as their software platform.",
        "query": "MATCH (device:`device.device`)\nWHERE device.Software_Platform <> 'Android'\nRETURN device.Carrier",
        "db_id": "device",
        "answers": [
            [
                "Verizon Wireless"
            ]
        ]
    },
    {
        "question": "What are the names of shops in ascending order of open year?",
        "query": "MATCH (shop:`device.shop`)\nRETURN shop.Shop_Name\nORDER BY shop.Open_Year ASC",
        "db_id": "device",
        "answers": [
            [
                "Best Buy"
            ],
            [
                "Tynewydd repair"
            ],
            [
                "Ferndale"
            ],
            [
                "Apple"
            ],
            [
                "Dinas store"
            ],
            [
                "Naval repair"
            ],
            [
                "Pentre store"
            ],
            [
                "Gelli repair"
            ],
            [
                "Dinas Device"
            ],
            [
                "Naval's shop"
            ],
            [
                "ATnT"
            ],
            [
                "National Cellphone"
            ]
        ]
    },
    {
        "question": "Return the names of shops, ordered by year of opening ascending.",
        "query": "MATCH (shop:`device.shop`)\nRETURN shop.Shop_Name\nORDER BY shop.Open_Year ASC",
        "db_id": "device",
        "answers": [
            [
                "Best Buy"
            ],
            [
                "Tynewydd repair"
            ],
            [
                "Ferndale"
            ],
            [
                "Apple"
            ],
            [
                "Dinas store"
            ],
            [
                "Naval repair"
            ],
            [
                "Pentre store"
            ],
            [
                "Gelli repair"
            ],
            [
                "Dinas Device"
            ],
            [
                "Naval's shop"
            ],
            [
                "ATnT"
            ],
            [
                "National Cellphone"
            ]
        ]
    },
    {
        "question": "What is the average quantity of stocks?",
        "query": "MATCH ()-[stock:`device.stock`]-()\nRETURN avg(stock.Quantity)",
        "db_id": "device",
        "answers": [
            [
                110.875
            ]
        ]
    },
    {
        "question": "Give the average quantity of stocks.",
        "query": "MATCH ()-[stock:`device.stock`]-()\nRETURN avg(stock.Quantity)",
        "db_id": "device",
        "answers": [
            [
                110.875
            ]
        ]
    },
    {
        "question": "What are the names and location of the shops in ascending alphabetical order of name.",
        "query": "MATCH (shop:`device.shop`)\nRETURN shop.Shop_Name,shop.Location\nORDER BY shop.Shop_Name ASC",
        "db_id": "device",
        "answers": [
            [
                "ATnT",
                "Maerdy"
            ],
            [
                "Apple",
                "Blaenllechau"
            ],
            [
                "Best Buy",
                "Cymmer"
            ],
            [
                "Dinas Device",
                "Dinas"
            ],
            [
                "Dinas store",
                "Dinas"
            ],
            [
                "Ferndale",
                "Blaenllechau"
            ],
            [
                "Gelli repair",
                "Gelli"
            ],
            [
                "National Cellphone",
                "Wattstown"
            ],
            [
                "Naval repair",
                "Penygraig"
            ],
            [
                "Naval's shop",
                "Penygraig"
            ],
            [
                "Pentre store",
                "Pentre"
            ],
            [
                "Tynewydd repair",
                "Porth"
            ]
        ]
    },
    {
        "question": "Return the names and locations of shops, ordered by name in alphabetical order.",
        "query": "MATCH (shop:`device.shop`)\nRETURN shop.Shop_Name,shop.Location\nORDER BY shop.Shop_Name ASC",
        "db_id": "device",
        "answers": [
            [
                "ATnT",
                "Maerdy"
            ],
            [
                "Apple",
                "Blaenllechau"
            ],
            [
                "Best Buy",
                "Cymmer"
            ],
            [
                "Dinas Device",
                "Dinas"
            ],
            [
                "Dinas store",
                "Dinas"
            ],
            [
                "Ferndale",
                "Blaenllechau"
            ],
            [
                "Gelli repair",
                "Gelli"
            ],
            [
                "National Cellphone",
                "Wattstown"
            ],
            [
                "Naval repair",
                "Penygraig"
            ],
            [
                "Naval's shop",
                "Penygraig"
            ],
            [
                "Pentre store",
                "Pentre"
            ],
            [
                "Tynewydd repair",
                "Porth"
            ]
        ]
    },
    {
        "question": "How many different software platforms are there for devices?",
        "query": "MATCH (device:`device.device`)\nRETURN count(DISTINCT device.Software_Platform)",
        "db_id": "device",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "Count the number of different software platforms.",
        "query": "MATCH (device:`device.device`)\nRETURN count(DISTINCT device.Software_Platform)",
        "db_id": "device",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "List the open date of open year of the shop named \"Apple\".",
        "query": "MATCH (shop:`device.shop`)\nWHERE shop.Shop_Name = 'Apple'\nRETURN shop.Open_Date,shop.Open_Year",
        "db_id": "device",
        "answers": [
            [
                "10 June",
                2009
            ]
        ]
    },
    {
        "question": "What are the open dates and years for the shop named Apple?",
        "query": "MATCH (shop:`device.shop`)\nWHERE shop.Shop_Name = 'Apple'\nRETURN shop.Open_Date,shop.Open_Year",
        "db_id": "device",
        "answers": [
            [
                "10 June",
                2009
            ]
        ]
    },
    {
        "question": "List the name of the shop with the latest open year.",
        "query": "MATCH (shop:`device.shop`)\nRETURN shop.Shop_Name\nORDER BY shop.Open_Year DESC\nLIMIT 1",
        "db_id": "device",
        "answers": [
            [
                "National Cellphone"
            ]
        ]
    },
    {
        "question": "What is the shop name corresponding to the shop that opened in the most recent year?",
        "query": "MATCH (shop:`device.shop`)\nRETURN shop.Shop_Name\nORDER BY shop.Open_Year DESC\nLIMIT 1",
        "db_id": "device",
        "answers": [
            [
                "National Cellphone"
            ]
        ]
    },
    {
        "question": "Show names of shops and the carriers of devices they have in stock.",
        "query": "MATCH ()-[T1:`device.stock`]-(T2:`device.device`)-[]-(T3:`device.shop`)\nRETURN T3.Shop_Name,T2.Carrier",
        "db_id": "device",
        "answers": [
            [
                "Ferndale",
                "Bell Mobility"
            ],
            [
                "Gelli repair",
                "Bell Mobility"
            ],
            [
                "Dinas Device",
                "Bell Mobility"
            ],
            [
                "Gelli repair",
                "Bell Mobility"
            ],
            [
                "Dinas Device",
                "Bell Mobility"
            ],
            [
                "Ferndale",
                "Bell Mobility"
            ],
            [
                "Apple",
                "Vodafone AU"
            ],
            [
                "Ferndale",
                "Vodafone AU"
            ],
            [
                "ATnT",
                "Vodafone AU"
            ],
            [
                "Best Buy",
                "Vodafone AU"
            ],
            [
                "Dinas Device",
                "Vodafone AU"
            ],
            [
                "Ferndale",
                "Vodafone AU"
            ],
            [
                "ATnT",
                "Vodafone AU"
            ],
            [
                "Best Buy",
                "Vodafone AU"
            ],
            [
                "Dinas Device",
                "Vodafone AU"
            ],
            [
                "Apple",
                "Vodafone AU"
            ],
            [
                "ATnT",
                "Vodafone AU"
            ],
            [
                "Best Buy",
                "Vodafone AU"
            ],
            [
                "Dinas Device",
                "Vodafone AU"
            ],
            [
                "Apple",
                "Vodafone AU"
            ],
            [
                "Ferndale",
                "Vodafone AU"
            ],
            [
                "Best Buy",
                "Vodafone AU"
            ],
            [
                "Dinas Device",
                "Vodafone AU"
            ],
            [
                "Apple",
                "Vodafone AU"
            ],
            [
                "Ferndale",
                "Vodafone AU"
            ],
            [
                "ATnT",
                "Vodafone AU"
            ]
        ]
    },
    {
        "question": "What are the names of device shops, and what are the carriers that they carry devices in stock for?",
        "query": "MATCH ()-[T1:`device.stock`]-(T2:`device.device`)-[]-(T3:`device.shop`)\nRETURN T3.Shop_Name,T2.Carrier",
        "db_id": "device",
        "answers": [
            [
                "Ferndale",
                "Bell Mobility"
            ],
            [
                "Gelli repair",
                "Bell Mobility"
            ],
            [
                "Dinas Device",
                "Bell Mobility"
            ],
            [
                "Gelli repair",
                "Bell Mobility"
            ],
            [
                "Dinas Device",
                "Bell Mobility"
            ],
            [
                "Ferndale",
                "Bell Mobility"
            ],
            [
                "Apple",
                "Vodafone AU"
            ],
            [
                "Ferndale",
                "Vodafone AU"
            ],
            [
                "ATnT",
                "Vodafone AU"
            ],
            [
                "Best Buy",
                "Vodafone AU"
            ],
            [
                "Dinas Device",
                "Vodafone AU"
            ],
            [
                "Ferndale",
                "Vodafone AU"
            ],
            [
                "ATnT",
                "Vodafone AU"
            ],
            [
                "Best Buy",
                "Vodafone AU"
            ],
            [
                "Dinas Device",
                "Vodafone AU"
            ],
            [
                "Apple",
                "Vodafone AU"
            ],
            [
                "ATnT",
                "Vodafone AU"
            ],
            [
                "Best Buy",
                "Vodafone AU"
            ],
            [
                "Dinas Device",
                "Vodafone AU"
            ],
            [
                "Apple",
                "Vodafone AU"
            ],
            [
                "Ferndale",
                "Vodafone AU"
            ],
            [
                "Best Buy",
                "Vodafone AU"
            ],
            [
                "Dinas Device",
                "Vodafone AU"
            ],
            [
                "Apple",
                "Vodafone AU"
            ],
            [
                "Ferndale",
                "Vodafone AU"
            ],
            [
                "ATnT",
                "Vodafone AU"
            ]
        ]
    },
    {
        "question": "Show names of shops that have more than one kind of device in stock.",
        "query": "MATCH ()-[T1:`device.stock`]-(T2:`device.shop`)\nWITH count(*) AS count, T2.Shop_Name AS Shop_Name\nWHERE count  > 1\nRETURN Shop_Name",
        "db_id": "device",
        "answers": [
            [
                "Dinas Device"
            ],
            [
                "Ferndale"
            ]
        ]
    },
    {
        "question": "What are the names of shops that have more than a single kind of device in stock?",
        "query": "MATCH ()-[T1:`device.stock`]-(T2:`device.shop`)\nWITH count(*) AS count, T2.Shop_Name AS Shop_Name\nWHERE count  > 1\nRETURN Shop_Name",
        "db_id": "device",
        "answers": [
            [
                "Dinas Device"
            ],
            [
                "Ferndale"
            ]
        ]
    },
    {
        "question": "Show the name of the shop that has the most kind of devices in stock.",
        "query": "MATCH ()-[T1:`device.stock`]-(T2:`device.shop`)\nWITH T2.Shop_Name AS Shop_Name, count(T1.Shop_ID) AS count\nRETURN Shop_Name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "device",
        "answers": [
            [
                "Dinas Device"
            ]
        ]
    },
    {
        "question": "What is the name of the shop that has the most different kinds of devices in stock?",
        "query": "MATCH ()-[T1:`device.stock`]-(T2:`device.shop`)\nWITH T2.Shop_Name AS Shop_Name, count(T1.Shop_ID) AS count\nRETURN Shop_Name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "device",
        "answers": [
            [
                "Dinas Device"
            ]
        ]
    },
    {
        "question": "Please show different software platforms and the corresponding number of devices using each.",
        "query": "MATCH (device:`device.device`)\nWITH device.Software_Platform AS Software_Platform, count(device.Software_Platform) AS count\nRETURN Software_Platform,count",
        "db_id": "device",
        "answers": [
            [
                "Android",
                5
            ],
            [
                "iOS",
                1
            ]
        ]
    },
    {
        "question": "What are the different software platforms for devices, and how many devices have each?",
        "query": "MATCH (device:`device.device`)\nWITH device.Software_Platform AS Software_Platform, count(device.Software_Platform) AS count\nRETURN Software_Platform,count",
        "db_id": "device",
        "answers": [
            [
                "Android",
                5
            ],
            [
                "iOS",
                1
            ]
        ]
    },
    {
        "question": "Please show the software platforms of devices in descending order of the count.",
        "query": "MATCH (device:`device.device`)\nWITH device.Software_Platform AS Software_Platform, count(device.Software_Platform) AS count\nRETURN Software_Platform\nORDER BY count DESC",
        "db_id": "device",
        "answers": [
            [
                "Android"
            ],
            [
                "iOS"
            ]
        ]
    },
    {
        "question": "What are the different software platforms for devices, ordered by frequency descending?",
        "query": "MATCH (device:`device.device`)\nWITH device.Software_Platform AS Software_Platform, count(device.Software_Platform) AS count\nRETURN Software_Platform\nORDER BY count DESC",
        "db_id": "device",
        "answers": [
            [
                "Android"
            ],
            [
                "iOS"
            ]
        ]
    },
    {
        "question": "List the software platform shared by the greatest number of devices.",
        "query": "MATCH (device:`device.device`)\nWITH device.Software_Platform AS Software_Platform, count(device.Software_Platform) AS count\nRETURN Software_Platform\nORDER BY count DESC\nLIMIT 1",
        "db_id": "device",
        "answers": [
            [
                "Android"
            ]
        ]
    },
    {
        "question": "What is the software platform that is most common amongst all devices?",
        "query": "MATCH (device:`device.device`)\nWITH device.Software_Platform AS Software_Platform, count(device.Software_Platform) AS count\nRETURN Software_Platform\nORDER BY count DESC\nLIMIT 1",
        "db_id": "device",
        "answers": [
            [
                "Android"
            ]
        ]
    },
    {
        "question": "List the names of shops that have no devices in stock.",
        "query": "MATCH (shop:`device.shop`)\nWHERE NOT (shop:`device.shop`)-[:`device.stock`]-()\nRETURN shop.Shop_Name",
        "db_id": "device",
        "answers": [
            [
                "Pentre store"
            ],
            [
                "Tynewydd repair"
            ],
            [
                "Dinas store"
            ],
            [
                "Naval repair"
            ],
            [
                "Naval's shop"
            ],
            [
                "National Cellphone"
            ]
        ]
    },
    {
        "question": "What are the names of shops that do not have any devices in stock?",
        "query": "MATCH (shop:`device.shop`)\nWHERE NOT (shop:`device.shop`)-[:`device.stock`]-()\nRETURN shop.Shop_Name",
        "db_id": "device",
        "answers": [
            [
                "Pentre store"
            ],
            [
                "Tynewydd repair"
            ],
            [
                "Dinas store"
            ],
            [
                "Naval repair"
            ],
            [
                "Naval's shop"
            ],
            [
                "National Cellphone"
            ]
        ]
    },
    {
        "question": "List the carriers of devices that have no devices in stock.",
        "query": "MATCH (device:`device.device`)\nWHERE NOT (device:`device.device`)-[:`device.stock`]-()\nRETURN device.Carrier",
        "db_id": "device",
        "answers": [
            [
                "MTS Mobility"
            ],
            [
                "Verizon Wireless"
            ],
            [
                "Telus Mobility"
            ],
            [
                "Iusacell"
            ]
        ]
    },
    {
        "question": "What are the carriers of devices that are not in stock anywhere?",
        "query": "MATCH (device:`device.device`)\nWHERE NOT (device:`device.device`)-[:`device.stock`]-()\nRETURN device.Carrier",
        "db_id": "device",
        "answers": [
            [
                "MTS Mobility"
            ],
            [
                "Verizon Wireless"
            ],
            [
                "Telus Mobility"
            ],
            [
                "Iusacell"
            ]
        ]
    },
    {
        "question": "Show the carriers of devices in stock at more than one shop.",
        "query": "MATCH ()-[T1:`device.stock`]-(T2:`device.device`)\nWITH count(*) AS count, T2.Carrier AS Carrier\nWHERE count  > 1\nRETURN Carrier",
        "db_id": "device",
        "answers": [
            [
                "Bell Mobility"
            ],
            [
                "Vodafone AU"
            ]
        ]
    },
    {
        "question": "What are the carriers of devices that are in stock in more than a single shop?",
        "query": "MATCH ()-[T1:`device.stock`]-(T2:`device.device`)\nWITH count(*) AS count, T2.Carrier AS Carrier\nWHERE count  > 1\nRETURN Carrier",
        "db_id": "device",
        "answers": [
            [
                "Bell Mobility"
            ],
            [
                "Vodafone AU"
            ]
        ]
    },
    {
        "question": "How many bookings do we have?",
        "query": "MATCH (bookings:`cre_Drama_Workshop_Groups.Bookings`)\nRETURN count(*)",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Count the total number of bookings made.",
        "query": "MATCH (bookings:`cre_Drama_Workshop_Groups.Bookings`)\nRETURN count(*)",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "List the order dates of all the bookings.",
        "query": "MATCH (bookings:`cre_Drama_Workshop_Groups.Bookings`)\nRETURN bookings.Order_Date",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "2016-12-12 10:43:01"
            ],
            [
                "1976-08-20 00:33:08"
            ],
            [
                "1975-11-23 06:28:47"
            ],
            [
                "1995-02-02 15:52:57"
            ],
            [
                "1995-05-10 14:49:47"
            ],
            [
                "1992-11-26 18:11:10"
            ],
            [
                "1975-12-30 14:12:32"
            ],
            [
                "1992-05-11 23:22:41"
            ],
            [
                "1971-05-11 06:53:01"
            ],
            [
                "1982-05-19 05:37:51"
            ],
            [
                "1991-10-11 17:24:15"
            ],
            [
                "1984-12-17 12:53:51"
            ],
            [
                "1996-09-14 10:17:55"
            ],
            [
                "2007-08-05 15:46:29"
            ],
            [
                "1976-10-24 07:40:47"
            ]
        ]
    },
    {
        "question": "What is the order date of each booking?",
        "query": "MATCH (bookings:`cre_Drama_Workshop_Groups.Bookings`)\nRETURN bookings.Order_Date",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "2016-12-12 10:43:01"
            ],
            [
                "1976-08-20 00:33:08"
            ],
            [
                "1975-11-23 06:28:47"
            ],
            [
                "1995-02-02 15:52:57"
            ],
            [
                "1995-05-10 14:49:47"
            ],
            [
                "1992-11-26 18:11:10"
            ],
            [
                "1975-12-30 14:12:32"
            ],
            [
                "1992-05-11 23:22:41"
            ],
            [
                "1971-05-11 06:53:01"
            ],
            [
                "1982-05-19 05:37:51"
            ],
            [
                "1991-10-11 17:24:15"
            ],
            [
                "1984-12-17 12:53:51"
            ],
            [
                "1996-09-14 10:17:55"
            ],
            [
                "2007-08-05 15:46:29"
            ],
            [
                "1976-10-24 07:40:47"
            ]
        ]
    },
    {
        "question": "Show all the planned delivery dates and actual delivery dates of bookings.",
        "query": "MATCH (bookings:`cre_Drama_Workshop_Groups.Bookings`)\nRETURN bookings.Planned_Delivery_Date,bookings.Actual_Delivery_Date",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "2013-03-10 18:47:05",
                "1997-11-21 10:07:40"
            ],
            [
                "2009-07-09 09:18:38",
                "1976-01-08 07:19:23"
            ],
            [
                "1989-01-05 19:24:45",
                "1990-03-16 19:38:47"
            ],
            [
                "2017-04-27 00:16:00",
                "1996-10-24 21:15:27"
            ],
            [
                "1979-07-19 19:44:01",
                "1971-01-13 13:24:52"
            ],
            [
                "2016-06-06 20:35:14",
                "2016-04-30 11:45:39"
            ],
            [
                "2008-07-18 18:15:40",
                "1983-10-09 10:48:48"
            ],
            [
                "1973-04-02 03:10:21",
                "1983-07-01 22:10:19"
            ],
            [
                "1974-05-07 21:40:39",
                "1986-10-04 13:31:10"
            ],
            [
                "1999-05-11 01:26:06",
                "1989-11-17 00:32:13"
            ],
            [
                "1978-04-10 12:23:59",
                "1983-02-07 20:27:10"
            ],
            [
                "2014-06-05 10:19:46",
                "1985-09-02 11:34:39"
            ],
            [
                "1993-04-17 23:53:01",
                "1982-04-18 02:59:08"
            ],
            [
                "1971-06-29 03:04:47",
                "1995-12-21 05:01:38"
            ],
            [
                "1972-06-25 15:51:34",
                "2004-02-22 04:37:14"
            ]
        ]
    },
    {
        "question": "What are the planned delivery date and actual delivery date for each booking?",
        "query": "MATCH (bookings:`cre_Drama_Workshop_Groups.Bookings`)\nRETURN bookings.Planned_Delivery_Date,bookings.Actual_Delivery_Date",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "2013-03-10 18:47:05",
                "1997-11-21 10:07:40"
            ],
            [
                "2009-07-09 09:18:38",
                "1976-01-08 07:19:23"
            ],
            [
                "1989-01-05 19:24:45",
                "1990-03-16 19:38:47"
            ],
            [
                "2017-04-27 00:16:00",
                "1996-10-24 21:15:27"
            ],
            [
                "1979-07-19 19:44:01",
                "1971-01-13 13:24:52"
            ],
            [
                "2016-06-06 20:35:14",
                "2016-04-30 11:45:39"
            ],
            [
                "2008-07-18 18:15:40",
                "1983-10-09 10:48:48"
            ],
            [
                "1973-04-02 03:10:21",
                "1983-07-01 22:10:19"
            ],
            [
                "1974-05-07 21:40:39",
                "1986-10-04 13:31:10"
            ],
            [
                "1999-05-11 01:26:06",
                "1989-11-17 00:32:13"
            ],
            [
                "1978-04-10 12:23:59",
                "1983-02-07 20:27:10"
            ],
            [
                "2014-06-05 10:19:46",
                "1985-09-02 11:34:39"
            ],
            [
                "1993-04-17 23:53:01",
                "1982-04-18 02:59:08"
            ],
            [
                "1971-06-29 03:04:47",
                "1995-12-21 05:01:38"
            ],
            [
                "1972-06-25 15:51:34",
                "2004-02-22 04:37:14"
            ]
        ]
    },
    {
        "question": "How many customers do we have?",
        "query": "MATCH (customers:`cre_Drama_Workshop_Groups.Customers`)\nRETURN count(*)",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Count the number of customers recorded.",
        "query": "MATCH (customers:`cre_Drama_Workshop_Groups.Customers`)\nRETURN count(*)",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "What are the phone and email for customer Harold?",
        "query": "MATCH (customers:`cre_Drama_Workshop_Groups.Customers`)\nWHERE customers.Customer_Name = 'Harold'\nRETURN customers.Customer_Phone,customers.Customer_Email_Address",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "624-096-7791",
                "jerde.harmon@example.com"
            ]
        ]
    },
    {
        "question": "Find the phone number and email address of customer \"Harold\".",
        "query": "MATCH (customers:`cre_Drama_Workshop_Groups.Customers`)\nWHERE customers.Customer_Name = 'Harold'\nRETURN customers.Customer_Phone,customers.Customer_Email_Address",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "624-096-7791",
                "jerde.harmon@example.com"
            ]
        ]
    },
    {
        "question": "Show all the Store_Name of drama workshop groups.",
        "query": "MATCH (drama_workshop_groups:`cre_Drama_Workshop_Groups.Drama_Workshop_Groups`)\nRETURN drama_workshop_groups.Store_Name",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "Amely Cafe"
            ],
            [
                "Veda Film"
            ],
            [
                "Queen Art"
            ],
            [
                "Kole Photo"
            ],
            [
                "WAT Food"
            ],
            [
                "Hansen Print"
            ],
            [
                "Roo Place"
            ],
            [
                "Uhuels Fruit"
            ],
            [
                "Harry Beef"
            ],
            [
                "Welch Flower"
            ],
            [
                "Kling Workshop"
            ],
            [
                "Orn News"
            ],
            [
                "Bednar Film"
            ],
            [
                "Kessler Exploration"
            ],
            [
                "Warino Photo"
            ]
        ]
    },
    {
        "question": "What are the store names of drama workshop groups?",
        "query": "MATCH (drama_workshop_groups:`cre_Drama_Workshop_Groups.Drama_Workshop_Groups`)\nRETURN drama_workshop_groups.Store_Name",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "Amely Cafe"
            ],
            [
                "Veda Film"
            ],
            [
                "Queen Art"
            ],
            [
                "Kole Photo"
            ],
            [
                "WAT Food"
            ],
            [
                "Hansen Print"
            ],
            [
                "Roo Place"
            ],
            [
                "Uhuels Fruit"
            ],
            [
                "Harry Beef"
            ],
            [
                "Welch Flower"
            ],
            [
                "Kling Workshop"
            ],
            [
                "Orn News"
            ],
            [
                "Bednar Film"
            ],
            [
                "Kessler Exploration"
            ],
            [
                "Warino Photo"
            ]
        ]
    },
    {
        "question": "What are the distinct payment method codes in all the invoices?",
        "query": "MATCH (invoices:`cre_Drama_Workshop_Groups.Invoices`)\nRETURN DISTINCT invoices.payment_method_code",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "MasterCard"
            ],
            [
                "Visa"
            ],
            [
                "American E"
            ]
        ]
    },
    {
        "question": "Show me the distinct payment method codes from the invoice record.",
        "query": "MATCH (invoices:`cre_Drama_Workshop_Groups.Invoices`)\nRETURN DISTINCT invoices.payment_method_code",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "MasterCard"
            ],
            [
                "Visa"
            ],
            [
                "American E"
            ]
        ]
    },
    {
        "question": "What is the description of the marketing region China?",
        "query": "MATCH (marketing_regions:`cre_Drama_Workshop_Groups.Marketing_Regions`)\nWHERE marketing_regions.Marketing_Region_Name = 'China'\nRETURN marketing_regions.Marketing_Region_Descriptrion",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "Our largest market"
            ]
        ]
    },
    {
        "question": "Find the marketing region description of China?",
        "query": "MATCH (marketing_regions:`cre_Drama_Workshop_Groups.Marketing_Regions`)\nWHERE marketing_regions.Marketing_Region_Name = 'China'\nRETURN marketing_regions.Marketing_Region_Descriptrion",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "Our largest market"
            ]
        ]
    },
    {
        "question": "What is the name of the most expensive product?",
        "query": "MATCH (products:`cre_Drama_Workshop_Groups.Products`)\nRETURN products.Product_Name\nORDER BY products.Product_Price DESC\nLIMIT 1",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "film"
            ]
        ]
    },
    {
        "question": "Tell me the name of the most pricy product.",
        "query": "MATCH (products:`cre_Drama_Workshop_Groups.Products`)\nRETURN products.Product_Name\nORDER BY products.Product_Price DESC\nLIMIT 1",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "film"
            ]
        ]
    },
    {
        "question": "List all product names in ascending order of price.",
        "query": "MATCH (products:`cre_Drama_Workshop_Groups.Products`)\nRETURN products.Product_Name\nORDER BY products.Product_Price ASC",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "photo"
            ],
            [
                "photo"
            ],
            [
                "film"
            ],
            [
                "photo"
            ],
            [
                "film"
            ],
            [
                "dinning"
            ],
            [
                "dinning"
            ],
            [
                "film"
            ],
            [
                "dinning"
            ],
            [
                "film"
            ],
            [
                "photo"
            ],
            [
                "photo"
            ],
            [
                "film"
            ],
            [
                "photo"
            ],
            [
                "film"
            ]
        ]
    },
    {
        "question": "Sort the names of products in ascending order of their price.",
        "query": "MATCH (products:`cre_Drama_Workshop_Groups.Products`)\nRETURN products.Product_Name\nORDER BY products.Product_Price ASC",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "photo"
            ],
            [
                "photo"
            ],
            [
                "film"
            ],
            [
                "photo"
            ],
            [
                "film"
            ],
            [
                "dinning"
            ],
            [
                "dinning"
            ],
            [
                "film"
            ],
            [
                "dinning"
            ],
            [
                "film"
            ],
            [
                "photo"
            ],
            [
                "photo"
            ],
            [
                "film"
            ],
            [
                "photo"
            ],
            [
                "film"
            ]
        ]
    },
    {
        "question": "What is the phone number of the performer Ashley?",
        "query": "MATCH (performers:`cre_Drama_Workshop_Groups.Performers`)\nWHERE performers.Customer_Name = 'Ashley'\nRETURN performers.Customer_Phone",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "893-536-8857"
            ]
        ]
    },
    {
        "question": "Find the phone number of performer \"Ashley\".",
        "query": "MATCH (performers:`cre_Drama_Workshop_Groups.Performers`)\nWHERE performers.Customer_Name = 'Ashley'\nRETURN performers.Customer_Phone",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "893-536-8857"
            ]
        ]
    },
    {
        "question": "Show all payment method codes and the number of orders for each code.",
        "query": "MATCH (invoices:`cre_Drama_Workshop_Groups.Invoices`)\nWITH invoices.payment_method_code AS payment_method_code, count(invoices.payment_method_code) AS count\nRETURN payment_method_code,count",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "MasterCard",
                6
            ],
            [
                "Visa",
                5
            ],
            [
                "American E",
                4
            ]
        ]
    },
    {
        "question": "List the distinct payment method codes with the number of orders made",
        "query": "MATCH (invoices:`cre_Drama_Workshop_Groups.Invoices`)\nWITH invoices.payment_method_code AS payment_method_code, count(invoices.payment_method_code) AS count\nRETURN payment_method_code,count",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "MasterCard",
                6
            ],
            [
                "Visa",
                5
            ],
            [
                "American E",
                4
            ]
        ]
    },
    {
        "question": "What is the payment method code used by the most orders?",
        "query": "MATCH (invoices:`cre_Drama_Workshop_Groups.Invoices`)\nWITH invoices.payment_method_code AS payment_method_code, count(invoices.payment_method_code) AS count\nRETURN payment_method_code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "MasterCard"
            ]
        ]
    },
    {
        "question": "Find the payment method that is used the most often in all the invoices. Give me its code.",
        "query": "MATCH (invoices:`cre_Drama_Workshop_Groups.Invoices`)\nWITH invoices.payment_method_code AS payment_method_code, count(invoices.payment_method_code) AS count\nRETURN payment_method_code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "MasterCard"
            ]
        ]
    },
    {
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "query": "MATCH (drama_workshop_groups:`cre_Drama_Workshop_Groups.Drama_Workshop_Groups`)\nRETURN count(DISTINCT drama_workshop_groups.Currency_Code)",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "query": "MATCH (drama_workshop_groups:`cre_Drama_Workshop_Groups.Drama_Workshop_Groups`)\nRETURN count(DISTINCT drama_workshop_groups.Currency_Code)",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "What is the marketing region code that has the most drama workshop groups?",
        "query": "MATCH (drama_workshop_groups:`cre_Drama_Workshop_Groups.Drama_Workshop_Groups`)\nWITH drama_workshop_groups.Marketing_Region_Code AS Marketing_Region_Code, count(drama_workshop_groups.Marketing_Region_Code) AS count\nRETURN Marketing_Region_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "RU"
            ]
        ]
    },
    {
        "question": "Which marketing region has the most drama workshop groups? Give me the region code.",
        "query": "MATCH (drama_workshop_groups:`cre_Drama_Workshop_Groups.Drama_Workshop_Groups`)\nWITH drama_workshop_groups.Marketing_Region_Code AS Marketing_Region_Code, count(drama_workshop_groups.Marketing_Region_Code) AS count\nRETURN Marketing_Region_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "RU"
            ]
        ]
    },
    {
        "question": "What is the most frequent status of bookings?",
        "query": "MATCH (bookings:`cre_Drama_Workshop_Groups.Bookings`)\nWITH count(bookings.Status_Code) AS count, bookings.Status_Code AS Status_Code\nRETURN Status_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "good"
            ]
        ]
    },
    {
        "question": "Which status code is the most common of all the bookings?",
        "query": "MATCH (bookings:`cre_Drama_Workshop_Groups.Bookings`)\nWITH count(bookings.Status_Code) AS count, bookings.Status_Code AS Status_Code\nRETURN Status_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                "good"
            ]
        ]
    },
    {
        "question": "What is the product ID of the most frequently ordered item on invoices?",
        "query": "MATCH (invoices:`cre_Drama_Workshop_Groups.Invoices`)\nWITH count(invoices.Product_ID) AS count, invoices.Product_ID AS Product_ID\nRETURN Product_ID\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "Find the id of the product ordered the most often on invoices.",
        "query": "MATCH (invoices:`cre_Drama_Workshop_Groups.Invoices`)\nWITH count(invoices.Product_ID) AS count, invoices.Product_ID AS Product_ID\nRETURN Product_ID\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Drama_Workshop_Groups",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "Hom many musicians performed in the song \"Flash\"?",
        "query": "MATCH ()-[T1:`music_2.Performance`]-(T2:`music_2.Band`)-[]-(T3:`music_2.Songs`)\nWHERE T3.Title = 'Flash'\nRETURN count(*)",
        "db_id": "music_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many musicians play in the song \"Flash\"?",
        "query": "MATCH ()-[T1:`music_2.Performance`]-(T2:`music_2.Band`)-[]-(T3:`music_2.Songs`)\nWHERE T3.Title = 'Flash'\nRETURN count(*)",
        "db_id": "music_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many songs have used the instrument \"drums\"?",
        "query": "MATCH ()-[instruments:`music_2.Instruments`]-()\nWHERE instruments.Instrument = 'drums'\nRETURN count(*)",
        "db_id": "music_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many songs use drums as an instrument?",
        "query": "MATCH ()-[instruments:`music_2.Instruments`]-()\nWHERE instruments.Instrument = 'drums'\nRETURN count(*)",
        "db_id": "music_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many instruments does the song \"Le Pop\" use?",
        "query": "MATCH ()-[T1:`music_2.Instruments`]-(T2:`music_2.Songs`)\nWHERE T2.Title = 'Le Pop'\nRETURN count(DISTINCT T1.Instrument)",
        "db_id": "music_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many different instruments are used in the song \"Le Pop\"?",
        "query": "MATCH ()-[T1:`music_2.Instruments`]-(T2:`music_2.Songs`)\nWHERE T2.Title = 'Le Pop'\nRETURN count(DISTINCT T1.Instrument)",
        "db_id": "music_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many instrument does the musician with last name \"Heilo\" use?",
        "query": "MATCH ()-[T1:`music_2.Instruments`]-(T2:`music_2.Band`)\nWHERE T2.Lastname = 'Heilo'\nRETURN count(DISTINCT T1.Instrument)",
        "db_id": "music_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many different instruments does the musician with the last name \"Heilo\" use?",
        "query": "MATCH ()-[T1:`music_2.Instruments`]-(T2:`music_2.Band`)\nWHERE T2.Lastname = 'Heilo'\nRETURN count(DISTINCT T1.Instrument)",
        "db_id": "music_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Find the number of vocal types used in song \"Demon Kitty Rag\"?",
        "query": "MATCH ()-[T1:`music_2.Vocals`]-(T2:`music_2.Songs`)\nWHERE T2.Title = 'Demon Kitty Rag'\nRETURN count(*)",
        "db_id": "music_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "What are the types of vocals used in the song \"Demon Kitty Rag\"?",
        "query": "MATCH ()-[T1:`music_2.Vocals`]-(T2:`music_2.Songs`)\nWHERE T2.Title = 'Demon Kitty Rag'\nRETURN count(*)",
        "db_id": "music_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many songs have a lead vocal?",
        "query": "MATCH ()-[T1:`music_2.Vocals`]-(T2:`music_2.Songs`)\nWHERE T1.Type = 'lead'\nRETURN count(DISTINCT T2.Title)",
        "db_id": "music_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many songs have vocals of type lead?",
        "query": "MATCH ()-[T1:`music_2.Vocals`]-(T2:`music_2.Songs`)\nWHERE T1.Type = 'lead'\nRETURN count(DISTINCT T2.Title)",
        "db_id": "music_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many instruments does the song \"Badlands\" use?",
        "query": "MATCH ()-[T1:`music_2.Instruments`]-(T2:`music_2.Songs`)\nWHERE T2.Title = 'Badlands'\nRETURN count(DISTINCT T1.Instrument)",
        "db_id": "music_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many different instruments are used in the song \"Badlands\"?",
        "query": "MATCH ()-[T1:`music_2.Instruments`]-(T2:`music_2.Songs`)\nWHERE T2.Title = 'Badlands'\nRETURN count(DISTINCT T1.Instrument)",
        "db_id": "music_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Find the number of vocal types used in song \"Le Pop\"",
        "query": "MATCH ()-[T1:`music_2.Vocals`]-(T2:`music_2.Songs`)\nWHERE T2.Title = 'Le Pop'\nRETURN count(*)",
        "db_id": "music_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many vocal types are used in the song \"Le Pop\"?",
        "query": "MATCH ()-[T1:`music_2.Vocals`]-(T2:`music_2.Songs`)\nWHERE T2.Title = 'Le Pop'\nRETURN count(*)",
        "db_id": "music_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many songs have a shared vocal?",
        "query": "MATCH ()-[T1:`music_2.Vocals`]-(T2:`music_2.Songs`)\nWHERE T1.Type = 'shared'\nRETURN count(DISTINCT T2.Title)",
        "db_id": "music_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many different songs have shared vocals?",
        "query": "MATCH ()-[T1:`music_2.Vocals`]-(T2:`music_2.Songs`)\nWHERE T1.Type = 'shared'\nRETURN count(DISTINCT T2.Title)",
        "db_id": "music_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Who is the founder of Sony?",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE manufacturers.Name = 'Sony'\nRETURN manufacturers.Founder",
        "db_id": "manufactory_1",
        "answers": [
            [
                "Andy"
            ]
        ]
    },
    {
        "question": "Return the founder of Sony.",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE manufacturers.Name = 'Sony'\nRETURN manufacturers.Founder",
        "db_id": "manufactory_1",
        "answers": [
            [
                "Andy"
            ]
        ]
    },
    {
        "question": "Where is the headquarter of the company founded by James?",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE manufacturers.Founder = 'James'\nRETURN manufacturers.Headquarter",
        "db_id": "manufactory_1",
        "answers": [
            [
                "Los Angeles"
            ]
        ]
    },
    {
        "question": "What is the headquarter of the company whose founder is James?",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE manufacturers.Founder = 'James'\nRETURN manufacturers.Headquarter",
        "db_id": "manufactory_1",
        "answers": [
            [
                "Los Angeles"
            ]
        ]
    },
    {
        "question": "Find all manufacturers' names and their headquarters, sorted by the ones with highest revenue first.",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nRETURN manufacturers.Name,manufacturers.Headquarter\nORDER BY manufacturers.Revenue DESC",
        "db_id": "manufactory_1",
        "answers": [
            [
                "Iomega",
                "Beijing"
            ],
            [
                "Fujitsu",
                "Taiwan"
            ],
            [
                "Sony",
                "Tokyo"
            ],
            [
                "Creative Labs",
                "Austin"
            ],
            [
                "Hewlett-Packard",
                "Los Angeles"
            ],
            [
                "Winchester",
                "Paris"
            ]
        ]
    },
    {
        "question": "What are the names and headquarters of all manufacturers, ordered by revenue descending?",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nRETURN manufacturers.Name,manufacturers.Headquarter\nORDER BY manufacturers.Revenue DESC",
        "db_id": "manufactory_1",
        "answers": [
            [
                "Iomega",
                "Beijing"
            ],
            [
                "Fujitsu",
                "Taiwan"
            ],
            [
                "Sony",
                "Tokyo"
            ],
            [
                "Creative Labs",
                "Austin"
            ],
            [
                "Hewlett-Packard",
                "Los Angeles"
            ],
            [
                "Winchester",
                "Paris"
            ]
        ]
    },
    {
        "question": "How many companies were created by Andy?",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE manufacturers.Founder = 'Andy'\nRETURN count(*)",
        "db_id": "manufactory_1",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "Return the number of companies created by Andy.",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE manufacturers.Founder = 'Andy'\nRETURN count(*)",
        "db_id": "manufactory_1",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "What are the different cities listed?",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nRETURN DISTINCT manufacturers.Headquarter",
        "db_id": "manufactory_1",
        "answers": [
            [
                "Tokyo"
            ],
            [
                "Austin"
            ],
            [
                "Los Angeles"
            ],
            [
                "Beijing"
            ],
            [
                "Taiwan"
            ],
            [
                "Paris"
            ]
        ]
    },
    {
        "question": "Give the distinct headquarters of manufacturers.",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nRETURN DISTINCT manufacturers.Headquarter",
        "db_id": "manufactory_1",
        "answers": [
            [
                "Tokyo"
            ],
            [
                "Austin"
            ],
            [
                "Los Angeles"
            ],
            [
                "Beijing"
            ],
            [
                "Taiwan"
            ],
            [
                "Paris"
            ]
        ]
    },
    {
        "question": "Find the number of manufactures that are based in Tokyo or Beijing.",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE manufacturers.Headquarter = 'Tokyo' OR manufacturers.Headquarter = 'Beijing'\nRETURN count(*)",
        "db_id": "manufactory_1",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "How many manufacturers have headquarters in either Tokyo or Beijing?",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE manufacturers.Headquarter = 'Tokyo' OR manufacturers.Headquarter = 'Beijing'\nRETURN count(*)",
        "db_id": "manufactory_1",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "Find the name of companies whose revenue is between 100 and 150.",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE 100<=manufacturers.Revenue<=150\nRETURN manufacturers.Name",
        "db_id": "manufactory_1",
        "answers": [
            [
                "Sony"
            ],
            [
                "Creative Labs"
            ],
            [
                "Fujitsu"
            ]
        ]
    },
    {
        "question": "What are the names of companies with revenue between 100 and 150?",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nWHERE 100<=manufacturers.Revenue<=150\nRETURN manufacturers.Name",
        "db_id": "manufactory_1",
        "answers": [
            [
                "Sony"
            ],
            [
                "Creative Labs"
            ],
            [
                "Fujitsu"
            ]
        ]
    },
    {
        "question": "Find the name, headquarter and founder of the manufacturer that has the highest revenue.",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nRETURN manufacturers.Name,manufacturers.Headquarter,manufacturers.Founder\nORDER BY manufacturers.Revenue DESC\nLIMIT 1",
        "db_id": "manufactory_1",
        "answers": [
            [
                "Iomega",
                "Beijing",
                "Mary"
            ]
        ]
    },
    {
        "question": "What are the names, headquarters and founders of the company with the highest revenue?",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nRETURN manufacturers.Name,manufacturers.Headquarter,manufacturers.Founder\nORDER BY manufacturers.Revenue DESC\nLIMIT 1",
        "db_id": "manufactory_1",
        "answers": [
            [
                "Iomega",
                "Beijing",
                "Mary"
            ]
        ]
    },
    {
        "question": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order.",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nRETURN manufacturers.Name,manufacturers.Headquarter,manufacturers.Revenue\nORDER BY manufacturers.Revenue DESC",
        "db_id": "manufactory_1",
        "answers": [
            [
                "Iomega",
                "Beijing",
                200.0
            ],
            [
                "Fujitsu",
                "Taiwan",
                130.0
            ],
            [
                "Sony",
                "Tokyo",
                120.0
            ],
            [
                "Creative Labs",
                "Austin",
                100.0
            ],
            [
                "Hewlett-Packard",
                "Los Angeles",
                50.0
            ],
            [
                "Winchester",
                "Paris",
                30.0
            ]
        ]
    },
    {
        "question": "What are the names, headquarters and revenues for manufacturers, sorted by revenue descending?",
        "query": "MATCH (manufacturers:`manufactory_1.Manufacturers`)\nRETURN manufacturers.Name,manufacturers.Headquarter,manufacturers.Revenue\nORDER BY manufacturers.Revenue DESC",
        "db_id": "manufactory_1",
        "answers": [
            [
                "Iomega",
                "Beijing",
                200.0
            ],
            [
                "Fujitsu",
                "Taiwan",
                130.0
            ],
            [
                "Sony",
                "Tokyo",
                120.0
            ],
            [
                "Creative Labs",
                "Austin",
                100.0
            ],
            [
                "Hewlett-Packard",
                "Los Angeles",
                50.0
            ],
            [
                "Winchester",
                "Paris",
                30.0
            ]
        ]
    },
    {
        "question": "Find the number of products for each manufacturer, showing the name of each company.",
        "query": "MATCH (T1:`manufactory_1.Products`)-[]-(T2:`manufactory_1.Manufacturers`)\nWITH count(T2.Name) AS count, T2.Name AS Name\nRETURN count,Name",
        "db_id": "manufactory_1",
        "answers": [
            [
                1,
                "Sony"
            ],
            [
                3,
                "Creative Labs"
            ],
            [
                3,
                "Hewlett-Packard"
            ],
            [
                1,
                "Iomega"
            ],
            [
                1,
                "Fujitsu"
            ],
            [
                2,
                "Winchester"
            ]
        ]
    },
    {
        "question": "How many products are there for each manufacturer?",
        "query": "MATCH (T1:`manufactory_1.Products`)-[]-(T2:`manufactory_1.Manufacturers`)\nWITH count(T2.Name) AS count, T2.Name AS Name\nRETURN count,Name",
        "db_id": "manufactory_1",
        "answers": [
            [
                1,
                "Sony"
            ],
            [
                3,
                "Creative Labs"
            ],
            [
                3,
                "Hewlett-Packard"
            ],
            [
                1,
                "Iomega"
            ],
            [
                1,
                "Fujitsu"
            ],
            [
                2,
                "Winchester"
            ]
        ]
    },
    {
        "question": "Select the names of all the products in the store.",
        "query": "MATCH (products:`manufactory_1.Products`)\nRETURN products.Name",
        "db_id": "manufactory_1",
        "answers": [
            [
                "Hard drive"
            ],
            [
                "Memory"
            ],
            [
                "ZIP drive"
            ],
            [
                "Floppy disk"
            ],
            [
                "Monitor"
            ],
            [
                "DVD drive"
            ],
            [
                "CD drive"
            ],
            [
                "Printer"
            ],
            [
                "Toner cartridge"
            ],
            [
                "DVD burner"
            ],
            [
                "DVD drive"
            ]
        ]
    },
    {
        "question": "What are the names of all products?",
        "query": "MATCH (products:`manufactory_1.Products`)\nRETURN products.Name",
        "db_id": "manufactory_1",
        "answers": [
            [
                "Hard drive"
            ],
            [
                "Memory"
            ],
            [
                "ZIP drive"
            ],
            [
                "Floppy disk"
            ],
            [
                "Monitor"
            ],
            [
                "DVD drive"
            ],
            [
                "CD drive"
            ],
            [
                "Printer"
            ],
            [
                "Toner cartridge"
            ],
            [
                "DVD burner"
            ],
            [
                "DVD drive"
            ]
        ]
    },
    {
        "question": "Select the names and the prices of all the products in the store.",
        "query": "MATCH (products:`manufactory_1.Products`)\nRETURN products.Name,products.Price",
        "db_id": "manufactory_1",
        "answers": [
            [
                "Hard drive",
                240
            ],
            [
                "Memory",
                120
            ],
            [
                "ZIP drive",
                150
            ],
            [
                "Floppy disk",
                5
            ],
            [
                "Monitor",
                240
            ],
            [
                "DVD drive",
                180
            ],
            [
                "CD drive",
                90
            ],
            [
                "Printer",
                270
            ],
            [
                "Toner cartridge",
                66
            ],
            [
                "DVD burner",
                180
            ],
            [
                "DVD drive",
                150
            ]
        ]
    },
    {
        "question": "What are the names and prices of all products in the store?",
        "query": "MATCH (products:`manufactory_1.Products`)\nRETURN products.Name,products.Price",
        "db_id": "manufactory_1",
        "answers": [
            [
                "Hard drive",
                240
            ],
            [
                "Memory",
                120
            ],
            [
                "ZIP drive",
                150
            ],
            [
                "Floppy disk",
                5
            ],
            [
                "Monitor",
                240
            ],
            [
                "DVD drive",
                180
            ],
            [
                "CD drive",
                90
            ],
            [
                "Printer",
                270
            ],
            [
                "Toner cartridge",
                66
            ],
            [
                "DVD burner",
                180
            ],
            [
                "DVD drive",
                150
            ]
        ]
    },
    {
        "question": "Select the name of the products with a price less than or equal to $200.",
        "query": "MATCH (products:`manufactory_1.Products`)\nWHERE products.Price <= 200\nRETURN products.Name",
        "db_id": "manufactory_1",
        "answers": [
            [
                "Memory"
            ],
            [
                "ZIP drive"
            ],
            [
                "Floppy disk"
            ],
            [
                "DVD drive"
            ],
            [
                "CD drive"
            ],
            [
                "Toner cartridge"
            ],
            [
                "DVD burner"
            ],
            [
                "DVD drive"
            ]
        ]
    },
    {
        "question": "What are the names of products with price at most 200?",
        "query": "MATCH (products:`manufactory_1.Products`)\nWHERE products.Price <= 200\nRETURN products.Name",
        "db_id": "manufactory_1",
        "answers": [
            [
                "Memory"
            ],
            [
                "ZIP drive"
            ],
            [
                "Floppy disk"
            ],
            [
                "DVD drive"
            ],
            [
                "CD drive"
            ],
            [
                "Toner cartridge"
            ],
            [
                "DVD burner"
            ],
            [
                "DVD drive"
            ]
        ]
    },
    {
        "question": "Compute the average price of all the products.",
        "query": "MATCH (products:`manufactory_1.Products`)\nRETURN avg(products.Price)",
        "db_id": "manufactory_1",
        "answers": [
            [
                153.72727272727272
            ]
        ]
    },
    {
        "question": "What is the average price across all products?",
        "query": "MATCH (products:`manufactory_1.Products`)\nRETURN avg(products.Price)",
        "db_id": "manufactory_1",
        "answers": [
            [
                153.72727272727272
            ]
        ]
    },
    {
        "question": "Compute the average price of all products with manufacturer code equal to 2.",
        "query": "MATCH (products:`manufactory_1.Products`)\nWHERE products.Manufacturer = 2\nRETURN avg(products.Price)",
        "db_id": "manufactory_1",
        "answers": [
            [
                150.0
            ]
        ]
    },
    {
        "question": "What is the average price of products with manufacturer codes equal to 2?",
        "query": "MATCH (products:`manufactory_1.Products`)\nWHERE products.Manufacturer = 2\nRETURN avg(products.Price)",
        "db_id": "manufactory_1",
        "answers": [
            [
                150.0
            ]
        ]
    },
    {
        "question": "Compute the number of products with a price larger than or equal to $180.",
        "query": "MATCH (products:`manufactory_1.Products`)\nWHERE products.Price >= 180\nRETURN count(*)",
        "db_id": "manufactory_1",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "How many products have prices of at least 180?",
        "query": "MATCH (products:`manufactory_1.Products`)\nWHERE products.Price >= 180\nRETURN count(*)",
        "db_id": "manufactory_1",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).",
        "query": "MATCH (products:`manufactory_1.Products`)\nWHERE products.Price >= 180\nRETURN products.Name,products.Price\nORDER BY products.Price DESC,products.Name ASC",
        "db_id": "manufactory_1",
        "answers": [
            [
                "Printer",
                270
            ],
            [
                "Hard drive",
                240
            ],
            [
                "Monitor",
                240
            ],
            [
                "DVD burner",
                180
            ],
            [
                "DVD drive",
                180
            ]
        ]
    },
    {
        "question": "What are the names and prices of products that cost at least 180, sorted by price decreasing and name ascending?",
        "query": "MATCH (products:`manufactory_1.Products`)\nWHERE products.Price >= 180\nRETURN products.Name,products.Price\nORDER BY products.Price DESC,products.Name ASC",
        "db_id": "manufactory_1",
        "answers": [
            [
                "Printer",
                270
            ],
            [
                "Hard drive",
                240
            ],
            [
                "Monitor",
                240
            ],
            [
                "DVD burner",
                180
            ],
            [
                "DVD drive",
                180
            ]
        ]
    },
    {
        "question": "Select the name and price of the cheapest product.",
        "query": "MATCH (products:`manufactory_1.Products`)\nRETURN products.Name,products.Price\nORDER BY products.Price ASC\nLIMIT 1",
        "db_id": "manufactory_1",
        "answers": [
            [
                "Floppy disk",
                5
            ]
        ]
    },
    {
        "question": "What is the name and price of the cheapest product?",
        "query": "MATCH (products:`manufactory_1.Products`)\nRETURN products.Name,products.Price\nORDER BY products.Price ASC\nLIMIT 1",
        "db_id": "manufactory_1",
        "answers": [
            [
                "Floppy disk",
                5
            ]
        ]
    },
    {
        "question": "What is the id of the problem log that is created most recently?",
        "query": "MATCH (problem_log:`tracking_software_problems.Problem_Log`)\nRETURN problem_log.problem_log_id\nORDER BY problem_log.log_entry_date DESC\nLIMIT 1",
        "db_id": "tracking_software_problems",
        "answers": [
            [
                14
            ]
        ]
    },
    {
        "question": "Which problem log was created most recently? Give me the log id.",
        "query": "MATCH (problem_log:`tracking_software_problems.Problem_Log`)\nRETURN problem_log.problem_log_id\nORDER BY problem_log.log_entry_date DESC\nLIMIT 1",
        "db_id": "tracking_software_problems",
        "answers": [
            [
                14
            ]
        ]
    },
    {
        "question": "What is the oldest log id and its corresponding problem id?",
        "query": "MATCH (problem_log:`tracking_software_problems.Problem_Log`)\nRETURN problem_log.problem_log_id,problem_log.problem_id\nORDER BY problem_log.log_entry_date\nLIMIT 1",
        "db_id": "tracking_software_problems",
        "answers": [
            [
                11,
                8
            ]
        ]
    },
    {
        "question": "Find the oldest log id and its corresponding problem id.",
        "query": "MATCH (problem_log:`tracking_software_problems.Problem_Log`)\nRETURN problem_log.problem_log_id,problem_log.problem_id\nORDER BY problem_log.log_entry_date\nLIMIT 1",
        "db_id": "tracking_software_problems",
        "answers": [
            [
                11,
                8
            ]
        ]
    },
    {
        "question": "Find all the ids and dates of the logs for the problem whose id is 10.",
        "query": "MATCH (problem_log:`tracking_software_problems.Problem_Log`)\nWHERE problem_log.problem_id = 10\nRETURN problem_log.problem_log_id,problem_log.log_entry_date",
        "db_id": "tracking_software_problems",
        "answers": [
            [
                12,
                "1997-08-31 08:19:12"
            ],
            [
                13,
                "2009-04-10 19:09:30"
            ]
        ]
    },
    {
        "question": "For the problem with id 10, return the ids and dates of its problem logs.",
        "query": "MATCH (problem_log:`tracking_software_problems.Problem_Log`)\nWHERE problem_log.problem_id = 10\nRETURN problem_log.problem_log_id,problem_log.log_entry_date",
        "db_id": "tracking_software_problems",
        "answers": [
            [
                12,
                "1997-08-31 08:19:12"
            ],
            [
                13,
                "2009-04-10 19:09:30"
            ]
        ]
    },
    {
        "question": "List all the log ids and their descriptions from the problem logs.",
        "query": "MATCH (problem_log:`tracking_software_problems.Problem_Log`)\nRETURN problem_log.problem_log_id,problem_log.log_entry_description",
        "db_id": "tracking_software_problems",
        "answers": [
            [
                1,
                "t"
            ],
            [
                2,
                "a"
            ],
            [
                3,
                "b"
            ],
            [
                4,
                "a"
            ],
            [
                5,
                "c"
            ],
            [
                6,
                "h"
            ],
            [
                7,
                "s"
            ],
            [
                8,
                "j"
            ],
            [
                9,
                "p"
            ],
            [
                10,
                "d"
            ],
            [
                11,
                "w"
            ],
            [
                12,
                "c"
            ],
            [
                13,
                "q"
            ],
            [
                14,
                "a"
            ],
            [
                15,
                "v"
            ]
        ]
    },
    {
        "question": "What are the log id and entry description of each problem?",
        "query": "MATCH (problem_log:`tracking_software_problems.Problem_Log`)\nRETURN problem_log.problem_log_id,problem_log.log_entry_description",
        "db_id": "tracking_software_problems",
        "answers": [
            [
                1,
                "t"
            ],
            [
                2,
                "a"
            ],
            [
                3,
                "b"
            ],
            [
                4,
                "a"
            ],
            [
                5,
                "c"
            ],
            [
                6,
                "h"
            ],
            [
                7,
                "s"
            ],
            [
                8,
                "j"
            ],
            [
                9,
                "p"
            ],
            [
                10,
                "d"
            ],
            [
                11,
                "w"
            ],
            [
                12,
                "c"
            ],
            [
                13,
                "q"
            ],
            [
                14,
                "a"
            ],
            [
                15,
                "v"
            ]
        ]
    },
    {
        "question": "List the first and last names of all distinct staff members who are assigned to the problem whose id is 1.",
        "query": "MATCH (T1:`tracking_software_problems.Staff`)-[]-(T2:`tracking_software_problems.Problem_Log`)\nWHERE T2.problem_id = 1\nRETURN DISTINCT T1.staff_first_name,T1.staff_last_name",
        "db_id": "tracking_software_problems",
        "answers": [
            [
                "Stevie",
                "Mante"
            ],
            [
                "Lysanne",
                "Turcotte"
            ],
            [
                "Kristian",
                "Lynch"
            ]
        ]
    },
    {
        "question": "Which staff members are assigned to the problem with id 1? Give me their first and last names.",
        "query": "MATCH (T1:`tracking_software_problems.Staff`)-[]-(T2:`tracking_software_problems.Problem_Log`)\nWHERE T2.problem_id = 1\nRETURN DISTINCT T1.staff_first_name,T1.staff_last_name",
        "db_id": "tracking_software_problems",
        "answers": [
            [
                "Stevie",
                "Mante"
            ],
            [
                "Lysanne",
                "Turcotte"
            ],
            [
                "Kristian",
                "Lynch"
            ]
        ]
    },
    {
        "question": "List the problem id and log id which are assigned to the staff named Rylan Homenick.",
        "query": "MATCH (T1:`tracking_software_problems.Staff`)-[]-(T2:`tracking_software_problems.Problem_Log`)\nWHERE T1.staff_first_name = 'Rylan' AND T1.staff_last_name = 'Homenick'\nRETURN DISTINCT T2.problem_id,T2.problem_log_id",
        "db_id": "tracking_software_problems",
        "answers": [
            [
                8,
                2
            ],
            [
                11,
                1
            ]
        ]
    },
    {
        "question": "Which problem id and log id are assigned to the staff named Rylan Homenick?",
        "query": "MATCH (T1:`tracking_software_problems.Staff`)-[]-(T2:`tracking_software_problems.Problem_Log`)\nWHERE T1.staff_first_name = 'Rylan' AND T1.staff_last_name = 'Homenick'\nRETURN DISTINCT T2.problem_id,T2.problem_log_id",
        "db_id": "tracking_software_problems",
        "answers": [
            [
                8,
                2
            ],
            [
                11,
                1
            ]
        ]
    },
    {
        "question": "How many problems are there for product voluptatem?",
        "query": "MATCH (T1:`tracking_software_problems.Product`)-[]-(T2:`tracking_software_problems.Problems`)\nWHERE T1.product_name = 'voluptatem'\nRETURN count(*)",
        "db_id": "tracking_software_problems",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many problems did the product called \"voluptatem\" have in record?",
        "query": "MATCH (T1:`tracking_software_problems.Product`)-[]-(T2:`tracking_software_problems.Problems`)\nWHERE T1.product_name = 'voluptatem'\nRETURN count(*)",
        "db_id": "tracking_software_problems",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "What are the ids of the problems which are reported after 1978-06-26?",
        "query": "MATCH (problems:`tracking_software_problems.Problems`)\nWHERE problems.date_problem_reported > \"1978-06-26\"\nRETURN problems.problem_id",
        "db_id": "tracking_software_problems",
        "answers": [
            [
                1
            ],
            [
                2
            ],
            [
                3
            ],
            [
                5
            ],
            [
                6
            ],
            [
                7
            ],
            [
                9
            ],
            [
                10
            ]
        ]
    },
    {
        "question": "Find the ids of the problems reported after 1978-06-26.",
        "query": "MATCH (problems:`tracking_software_problems.Problems`)\nWHERE problems.date_problem_reported > \"1978-06-26\"\nRETURN problems.problem_id",
        "db_id": "tracking_software_problems",
        "answers": [
            [
                1
            ],
            [
                2
            ],
            [
                3
            ],
            [
                5
            ],
            [
                6
            ],
            [
                7
            ],
            [
                9
            ],
            [
                10
            ]
        ]
    },
    {
        "question": "What are the ids of the problems which are reported before 1978-06-26?",
        "query": "MATCH (problems:`tracking_software_problems.Problems`)\nWHERE problems.date_problem_reported < \"1978-06-26\"\nRETURN problems.problem_id",
        "db_id": "tracking_software_problems",
        "answers": [
            [
                4
            ],
            [
                8
            ],
            [
                11
            ],
            [
                12
            ],
            [
                13
            ],
            [
                14
            ],
            [
                15
            ]
        ]
    },
    {
        "question": "Which problems are reported before 1978-06-26? Give me the ids of the problems.",
        "query": "MATCH (problems:`tracking_software_problems.Problems`)\nWHERE problems.date_problem_reported < \"1978-06-26\"\nRETURN problems.problem_id",
        "db_id": "tracking_software_problems",
        "answers": [
            [
                4
            ],
            [
                8
            ],
            [
                11
            ],
            [
                12
            ],
            [
                13
            ],
            [
                14
            ],
            [
                15
            ]
        ]
    },
    {
        "question": "List the names of all the distinct product names in alphabetical order?",
        "query": "MATCH (product:`tracking_software_problems.Product`)\nRETURN DISTINCT product.product_name\nORDER BY product.product_name",
        "db_id": "tracking_software_problems",
        "answers": [
            [
                "blog"
            ],
            [
                "chat"
            ],
            [
                "doulingo"
            ],
            [
                "game"
            ],
            [
                "hangout"
            ],
            [
                "keep"
            ],
            [
                "learn"
            ],
            [
                "life"
            ],
            [
                "messager"
            ],
            [
                "rose"
            ],
            [
                "snapchat"
            ],
            [
                "teach"
            ],
            [
                "twitter"
            ],
            [
                "wechat"
            ],
            [
                "yellow"
            ]
        ]
    },
    {
        "question": "Sort all the distinct product names in alphabetical order.",
        "query": "MATCH (product:`tracking_software_problems.Product`)\nRETURN DISTINCT product.product_name\nORDER BY product.product_name",
        "db_id": "tracking_software_problems",
        "answers": [
            [
                "blog"
            ],
            [
                "chat"
            ],
            [
                "doulingo"
            ],
            [
                "game"
            ],
            [
                "hangout"
            ],
            [
                "keep"
            ],
            [
                "learn"
            ],
            [
                "life"
            ],
            [
                "messager"
            ],
            [
                "rose"
            ],
            [
                "snapchat"
            ],
            [
                "teach"
            ],
            [
                "twitter"
            ],
            [
                "wechat"
            ],
            [
                "yellow"
            ]
        ]
    },
    {
        "question": "Show name, address road, and city for all branches sorted by open year.",
        "query": "MATCH (branch:`shop_membership.branch`)\nRETURN branch.Name,branch.Address_road,branch.City\nORDER BY branch.Open_year",
        "db_id": "shop_membership",
        "answers": [
            [
                "Alexandre",
                "Valleys Place",
                "London"
            ],
            [
                "Popert",
                "Oaks Crescent",
                "London"
            ],
            [
                "Zytogorski",
                "Abbey Rise",
                "Oxford"
            ],
            [
                "Brooke Greville",
                "Glebe Street",
                "Oxford"
            ],
            [
                "Cochrane",
                "Brampton Road",
                "London"
            ],
            [
                "Stanley",
                "Abbott Street",
                "London"
            ],
            [
                "Taverner",
                "Cecilia Avenue",
                "Oxford"
            ],
            [
                "Saint Amant",
                "Concord Road",
                "London"
            ]
        ]
    },
    {
        "question": "What are the names, address roads, and cities of the branches ordered by opening year?",
        "query": "MATCH (branch:`shop_membership.branch`)\nRETURN branch.Name,branch.Address_road,branch.City\nORDER BY branch.Open_year",
        "db_id": "shop_membership",
        "answers": [
            [
                "Alexandre",
                "Valleys Place",
                "London"
            ],
            [
                "Popert",
                "Oaks Crescent",
                "London"
            ],
            [
                "Zytogorski",
                "Abbey Rise",
                "Oxford"
            ],
            [
                "Brooke Greville",
                "Glebe Street",
                "Oxford"
            ],
            [
                "Cochrane",
                "Brampton Road",
                "London"
            ],
            [
                "Stanley",
                "Abbott Street",
                "London"
            ],
            [
                "Taverner",
                "Cecilia Avenue",
                "Oxford"
            ],
            [
                "Saint Amant",
                "Concord Road",
                "London"
            ]
        ]
    },
    {
        "question": "What are names for top three branches with most number of membership?",
        "query": "MATCH (branch:`shop_membership.branch`)\nRETURN branch.Name\nORDER BY branch.membership_amount DESC\nLIMIT 3",
        "db_id": "shop_membership",
        "answers": [
            [
                "Saint Amant"
            ],
            [
                "Zytogorski"
            ],
            [
                "Stanley"
            ]
        ]
    },
    {
        "question": "What are the names for the 3 branches that have the most memberships?",
        "query": "MATCH (branch:`shop_membership.branch`)\nRETURN branch.Name\nORDER BY branch.membership_amount DESC\nLIMIT 3",
        "db_id": "shop_membership",
        "answers": [
            [
                "Saint Amant"
            ],
            [
                "Zytogorski"
            ],
            [
                "Stanley"
            ]
        ]
    },
    {
        "question": "List all open years when at least two shops are opened.",
        "query": "MATCH (branch:`shop_membership.branch`)\nWITH count(*) AS count, branch.Open_year AS Open_year\nWHERE count  >= 2\nRETURN Open_year",
        "db_id": "shop_membership",
        "answers": [
            [
                "2009"
            ]
        ]
    },
    {
        "question": "What are the opening years in which at least two shops opened?",
        "query": "MATCH (branch:`shop_membership.branch`)\nWITH count(*) AS count, branch.Open_year AS Open_year\nWHERE count  >= 2\nRETURN Open_year",
        "db_id": "shop_membership",
        "answers": [
            [
                "2009"
            ]
        ]
    },
    {
        "question": "Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London.",
        "query": "MATCH (branch:`shop_membership.branch`)\nWHERE branch.Open_year = 2011 OR branch.City = 'London'\nRETURN min(branch.membership_amount),max(branch.membership_amount)",
        "db_id": "shop_membership",
        "answers": [
            [
                "11",
                "91"
            ]
        ]
    },
    {
        "question": "What are the minimum and maximum membership amounts for all branches that either opened in 2011 or are located in London?",
        "query": "MATCH (branch:`shop_membership.branch`)\nWHERE branch.Open_year = 2011 OR branch.City = 'London'\nRETURN min(branch.membership_amount),max(branch.membership_amount)",
        "db_id": "shop_membership",
        "answers": [
            [
                "11",
                "91"
            ]
        ]
    },
    {
        "question": "How many different levels do members have?",
        "query": "MATCH (member:`shop_membership.member`)\nRETURN count(DISTINCT member.Level)",
        "db_id": "shop_membership",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "What are the different membership levels?",
        "query": "MATCH (member:`shop_membership.member`)\nRETURN count(DISTINCT member.Level)",
        "db_id": "shop_membership",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Show card number, name, and hometown for all members in a descending order of level.",
        "query": "MATCH (member:`shop_membership.member`)\nRETURN member.Card_Number,member.Name,member.Hometown\nORDER BY member.Level DESC",
        "db_id": "shop_membership",
        "answers": [
            [
                "LE99",
                "Jeremy Jarmon",
                "Collierville, Tennessee"
            ],
            [
                "LT98",
                "Myron Pryor",
                "Louisville, Kentucky"
            ],
            [
                "RT91",
                "Corey Peters",
                "Louisville, Kentucky"
            ],
            [
                "RE95",
                "Ventrell Jenkins",
                "Columbia, South Carolina"
            ],
            [
                "OLB56",
                "Braxton Kelley",
                "LaGrange, Georgia"
            ],
            [
                "SLB51",
                "Johnny Williams",
                "Jacksonville, Florida"
            ],
            [
                "RCB32",
                "Trevard Lindley",
                "Hiram, Georgia"
            ],
            [
                "LCB7",
                "David Jones",
                "Red Jacket, West Virginia"
            ],
            [
                "MLB4",
                "Micah Johnson",
                "Fort Campbell, Kentucky"
            ],
            [
                "FS10",
                "Matt Lentz",
                "Simpsonville, South Carolina"
            ]
        ]
    },
    {
        "question": "What are the card numbers, names, and hometowns of every member ordered by descending level?",
        "query": "MATCH (member:`shop_membership.member`)\nRETURN member.Card_Number,member.Name,member.Hometown\nORDER BY member.Level DESC",
        "db_id": "shop_membership",
        "answers": [
            [
                "LE99",
                "Jeremy Jarmon",
                "Collierville, Tennessee"
            ],
            [
                "LT98",
                "Myron Pryor",
                "Louisville, Kentucky"
            ],
            [
                "RT91",
                "Corey Peters",
                "Louisville, Kentucky"
            ],
            [
                "RE95",
                "Ventrell Jenkins",
                "Columbia, South Carolina"
            ],
            [
                "OLB56",
                "Braxton Kelley",
                "LaGrange, Georgia"
            ],
            [
                "SLB51",
                "Johnny Williams",
                "Jacksonville, Florida"
            ],
            [
                "RCB32",
                "Trevard Lindley",
                "Hiram, Georgia"
            ],
            [
                "LCB7",
                "David Jones",
                "Red Jacket, West Virginia"
            ],
            [
                "MLB4",
                "Micah Johnson",
                "Fort Campbell, Kentucky"
            ],
            [
                "FS10",
                "Matt Lentz",
                "Simpsonville, South Carolina"
            ]
        ]
    },
    {
        "question": "Show the membership level with most number of members.",
        "query": "MATCH (member:`shop_membership.member`)\nWITH count(member.Level) AS count, member.Level AS Level\nRETURN Level\nORDER BY count DESC\nLIMIT 1",
        "db_id": "shop_membership",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "What is the membership level with the most people?",
        "query": "MATCH (member:`shop_membership.member`)\nWITH count(member.Level) AS count, member.Level AS Level\nRETURN Level\nORDER BY count DESC\nLIMIT 1",
        "db_id": "shop_membership",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "Find the number of students in total.",
        "query": "MATCH (student:`voter_2.Student`)\nRETURN count(*)",
        "db_id": "voter_2",
        "answers": [
            [
                34
            ]
        ]
    },
    {
        "question": "How many students are there in total?",
        "query": "MATCH (student:`voter_2.Student`)\nRETURN count(*)",
        "db_id": "voter_2",
        "answers": [
            [
                34
            ]
        ]
    },
    {
        "question": "Find the number of voting records in total.",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nRETURN count(*)",
        "db_id": "voter_2",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "How many voting records do we have?",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nRETURN count(*)",
        "db_id": "voter_2",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "Find the distinct number of president votes.",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nRETURN count(DISTINCT voting_record.President_Vote)",
        "db_id": "voter_2",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "How many distinct president votes are recorded?",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nRETURN count(DISTINCT voting_record.President_Vote)",
        "db_id": "voter_2",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Find the maximum age of all the students.",
        "query": "MATCH (student:`voter_2.Student`)\nRETURN max(student.Age)",
        "db_id": "voter_2",
        "answers": [
            [
                27
            ]
        ]
    },
    {
        "question": "What is the oldest age among the students?",
        "query": "MATCH (student:`voter_2.Student`)\nRETURN max(student.Age)",
        "db_id": "voter_2",
        "answers": [
            [
                27
            ]
        ]
    },
    {
        "question": "Find the last names of students with major 50.",
        "query": "MATCH (student:`voter_2.Student`)\nWHERE student.Major = 50\nRETURN student.LName",
        "db_id": "voter_2",
        "answers": [
            [
                "Epp"
            ],
            [
                "Schmidt"
            ]
        ]
    },
    {
        "question": "What are the last names of students studying major 50?",
        "query": "MATCH (student:`voter_2.Student`)\nWHERE student.Major = 50\nRETURN student.LName",
        "db_id": "voter_2",
        "answers": [
            [
                "Epp"
            ],
            [
                "Schmidt"
            ]
        ]
    },
    {
        "question": "Find the first names of students with age above 22.",
        "query": "MATCH (student:`voter_2.Student`)\nWHERE student.Age > 22\nRETURN student.Fname",
        "db_id": "voter_2",
        "answers": [
            [
                "Paul"
            ],
            [
                "Bruce"
            ],
            [
                "Sarah"
            ]
        ]
    },
    {
        "question": "What are the first names of all the students aged above 22?",
        "query": "MATCH (student:`voter_2.Student`)\nWHERE student.Age > 22\nRETURN student.Fname",
        "db_id": "voter_2",
        "answers": [
            [
                "Paul"
            ],
            [
                "Bruce"
            ],
            [
                "Sarah"
            ]
        ]
    },
    {
        "question": "What are the majors of male (sex is M) students?",
        "query": "MATCH (student:`voter_2.Student`)\nWHERE student.Sex = 'M'\nRETURN student.Major",
        "db_id": "voter_2",
        "answers": [
            [
                600
            ],
            [
                600
            ],
            [
                600
            ],
            [
                600
            ],
            [
                600
            ],
            [
                600
            ],
            [
                600
            ],
            [
                600
            ],
            [
                600
            ],
            [
                600
            ],
            [
                600
            ],
            [
                600
            ],
            [
                520
            ],
            [
                520
            ],
            [
                540
            ],
            [
                520
            ],
            [
                520
            ],
            [
                520
            ],
            [
                520
            ],
            [
                550
            ],
            [
                100
            ],
            [
                550
            ],
            [
                550
            ],
            [
                50
            ]
        ]
    },
    {
        "question": "List the major of each male student.",
        "query": "MATCH (student:`voter_2.Student`)\nWHERE student.Sex = 'M'\nRETURN student.Major",
        "db_id": "voter_2",
        "answers": [
            [
                600
            ],
            [
                600
            ],
            [
                600
            ],
            [
                600
            ],
            [
                600
            ],
            [
                600
            ],
            [
                600
            ],
            [
                600
            ],
            [
                600
            ],
            [
                600
            ],
            [
                600
            ],
            [
                600
            ],
            [
                520
            ],
            [
                520
            ],
            [
                540
            ],
            [
                520
            ],
            [
                520
            ],
            [
                520
            ],
            [
                520
            ],
            [
                550
            ],
            [
                100
            ],
            [
                550
            ],
            [
                550
            ],
            [
                50
            ]
        ]
    },
    {
        "question": "What is the average age of female (sex is F) students?",
        "query": "MATCH (student:`voter_2.Student`)\nWHERE student.Sex = 'F'\nRETURN avg(student.Age)",
        "db_id": "voter_2",
        "answers": [
            [
                19.7
            ]
        ]
    },
    {
        "question": "Find the average age of female students.",
        "query": "MATCH (student:`voter_2.Student`)\nWHERE student.Sex = 'F'\nRETURN avg(student.Age)",
        "db_id": "voter_2",
        "answers": [
            [
                19.7
            ]
        ]
    },
    {
        "question": "What are the maximum and minimum age of students with major 600?",
        "query": "MATCH (student:`voter_2.Student`)\nWHERE student.Major = 600\nRETURN max(student.Age),min(student.Age)",
        "db_id": "voter_2",
        "answers": [
            [
                27,
                16
            ]
        ]
    },
    {
        "question": "Tell me the ages of the oldest and youngest students studying major 600.",
        "query": "MATCH (student:`voter_2.Student`)\nWHERE student.Major = 600\nRETURN max(student.Age),min(student.Age)",
        "db_id": "voter_2",
        "answers": [
            [
                27,
                16
            ]
        ]
    },
    {
        "question": "Who are the advisors for students that live in a city with city code \"BAL\"?",
        "query": "MATCH (student:`voter_2.Student`)\nWHERE student.city_code = 'BAL'\nRETURN student.Advisor",
        "db_id": "voter_2",
        "answers": [
            [
                1121
            ],
            [
                1148
            ],
            [
                9172
            ],
            [
                7271
            ]
        ]
    },
    {
        "question": "Show the advisors of the students whose city of residence has city code \"BAL\".",
        "query": "MATCH (student:`voter_2.Student`)\nWHERE student.city_code = 'BAL'\nRETURN student.Advisor",
        "db_id": "voter_2",
        "answers": [
            [
                1121
            ],
            [
                1148
            ],
            [
                9172
            ],
            [
                7271
            ]
        ]
    },
    {
        "question": "What are the distinct secretary votes in the fall election cycle?",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nWHERE voting_record.Election_Cycle = 'Fall'\nRETURN DISTINCT voting_record.Secretary_Vote",
        "db_id": "voter_2",
        "answers": [
            [
                1010
            ],
            [
                1020
            ]
        ]
    },
    {
        "question": "Return all the distinct secretary votes made in the fall election cycle.",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nWHERE voting_record.Election_Cycle = 'Fall'\nRETURN DISTINCT voting_record.Secretary_Vote",
        "db_id": "voter_2",
        "answers": [
            [
                1010
            ],
            [
                1020
            ]
        ]
    },
    {
        "question": "What are the distinct president votes on 08/30/2015?",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nWHERE voting_record.Registration_Date = \"08/30/2015\"\nRETURN DISTINCT voting_record.President_Vote",
        "db_id": "voter_2",
        "answers": [
            [
                1004
            ]
        ]
    },
    {
        "question": "Show all the distinct president votes made on 08/30/2015.",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nWHERE voting_record.Registration_Date = \"08/30/2015\"\nRETURN DISTINCT voting_record.President_Vote",
        "db_id": "voter_2",
        "answers": [
            [
                1004
            ]
        ]
    },
    {
        "question": "Report the distinct registration date and the election cycle.",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nRETURN DISTINCT voting_record.Registration_Date,voting_record.Election_Cycle",
        "db_id": "voter_2",
        "answers": [
            [
                "08/30/2015",
                "Spring"
            ],
            [
                "08/30/2014",
                "Spring"
            ],
            [
                "08/30/2013",
                "Spring"
            ],
            [
                "08/30/2012",
                "Spring"
            ],
            [
                "08/30/2015",
                "Fall"
            ],
            [
                "08/30/2014",
                "Fall"
            ],
            [
                "08/30/2013",
                "Fall"
            ],
            [
                "08/30/2012",
                "Fall"
            ]
        ]
    },
    {
        "question": "What are the distinct registration dates and the election cycles?",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nRETURN DISTINCT voting_record.Registration_Date,voting_record.Election_Cycle",
        "db_id": "voter_2",
        "answers": [
            [
                "08/30/2015",
                "Spring"
            ],
            [
                "08/30/2014",
                "Spring"
            ],
            [
                "08/30/2013",
                "Spring"
            ],
            [
                "08/30/2012",
                "Spring"
            ],
            [
                "08/30/2015",
                "Fall"
            ],
            [
                "08/30/2014",
                "Fall"
            ],
            [
                "08/30/2013",
                "Fall"
            ],
            [
                "08/30/2012",
                "Fall"
            ]
        ]
    },
    {
        "question": "Report the distinct president vote and the vice president vote.",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nRETURN DISTINCT voting_record.President_Vote,voting_record.Vice_President_Vote",
        "db_id": "voter_2",
        "answers": [
            [
                1004,
                1007
            ],
            [
                1014,
                1007
            ],
            [
                1004,
                1017
            ],
            [
                1024,
                1017
            ]
        ]
    },
    {
        "question": "List all the distinct president votes and the vice president votes.",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nRETURN DISTINCT voting_record.President_Vote,voting_record.Vice_President_Vote",
        "db_id": "voter_2",
        "answers": [
            [
                1004,
                1007
            ],
            [
                1014,
                1007
            ],
            [
                1004,
                1017
            ],
            [
                1024,
                1017
            ]
        ]
    },
    {
        "question": "For each advisor, report the total number of students advised by him or her.",
        "query": "MATCH (student:`voter_2.Student`)\nWITH count(student.Advisor) AS count, student.Advisor AS Advisor\nRETURN Advisor,count",
        "db_id": "voter_2",
        "answers": [
            [
                1121,
                3
            ],
            [
                7712,
                1
            ],
            [
                7792,
                1
            ],
            [
                8423,
                1
            ],
            [
                1148,
                3
            ],
            [
                8918,
                1
            ],
            [
                9172,
                1
            ],
            [
                2192,
                4
            ],
            [
                7723,
                1
            ],
            [
                8741,
                1
            ],
            [
                8721,
                1
            ],
            [
                7271,
                2
            ],
            [
                8722,
                3
            ],
            [
                7134,
                2
            ],
            [
                8723,
                1
            ],
            [
                2311,
                3
            ],
            [
                8772,
                3
            ],
            [
                5718,
                2
            ]
        ]
    },
    {
        "question": "How many students does each advisor have?",
        "query": "MATCH (student:`voter_2.Student`)\nWITH count(student.Advisor) AS count, student.Advisor AS Advisor\nRETURN Advisor,count",
        "db_id": "voter_2",
        "answers": [
            [
                1121,
                3
            ],
            [
                7712,
                1
            ],
            [
                7792,
                1
            ],
            [
                8423,
                1
            ],
            [
                1148,
                3
            ],
            [
                8918,
                1
            ],
            [
                9172,
                1
            ],
            [
                2192,
                4
            ],
            [
                7723,
                1
            ],
            [
                8741,
                1
            ],
            [
                8721,
                1
            ],
            [
                7271,
                2
            ],
            [
                8722,
                3
            ],
            [
                7134,
                2
            ],
            [
                8723,
                1
            ],
            [
                2311,
                3
            ],
            [
                8772,
                3
            ],
            [
                5718,
                2
            ]
        ]
    },
    {
        "question": "Report all advisors that advise more than 2 students.",
        "query": "MATCH (student:`voter_2.Student`)\nWITH count(*) AS count, student.Advisor AS Advisor\nWHERE count  > 2\nRETURN Advisor",
        "db_id": "voter_2",
        "answers": [
            [
                1121
            ],
            [
                1148
            ],
            [
                2192
            ],
            [
                8722
            ],
            [
                2311
            ],
            [
                8772
            ]
        ]
    },
    {
        "question": "Which advisors have more than two students?",
        "query": "MATCH (student:`voter_2.Student`)\nWITH count(*) AS count, student.Advisor AS Advisor\nWHERE count  > 2\nRETURN Advisor",
        "db_id": "voter_2",
        "answers": [
            [
                1121
            ],
            [
                1148
            ],
            [
                2192
            ],
            [
                8722
            ],
            [
                2311
            ],
            [
                8772
            ]
        ]
    },
    {
        "question": "Report all majors that have less than 3 students.",
        "query": "MATCH (student:`voter_2.Student`)\nWITH count(*) AS count, student.Major AS Major\nWHERE count  < 3\nRETURN Major",
        "db_id": "voter_2",
        "answers": [
            [
                540
            ],
            [
                100
            ],
            [
                50
            ]
        ]
    },
    {
        "question": "What are the majors only less than three students are studying?",
        "query": "MATCH (student:`voter_2.Student`)\nWITH count(*) AS count, student.Major AS Major\nWHERE count  < 3\nRETURN Major",
        "db_id": "voter_2",
        "answers": [
            [
                540
            ],
            [
                100
            ],
            [
                50
            ]
        ]
    },
    {
        "question": "For each election cycle, report the number of voting records.",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nWITH voting_record.Election_Cycle AS Election_Cycle, count(voting_record.Election_Cycle) AS count\nRETURN Election_Cycle,count",
        "db_id": "voter_2",
        "answers": [
            [
                "Spring",
                5
            ],
            [
                "Fall",
                5
            ]
        ]
    },
    {
        "question": "Count the number of voting records for each election cycle.",
        "query": "MATCH (voting_record:`voter_2.Voting_record`)\nWITH voting_record.Election_Cycle AS Election_Cycle, count(voting_record.Election_Cycle) AS count\nRETURN Election_Cycle,count",
        "db_id": "voter_2",
        "answers": [
            [
                "Spring",
                5
            ],
            [
                "Fall",
                5
            ]
        ]
    },
    {
        "question": "Which major has the most students?",
        "query": "MATCH (student:`voter_2.Student`)\nWITH student.Major AS Major, count(student.Major) AS count\nRETURN Major\nORDER BY count DESC\nLIMIT 1",
        "db_id": "voter_2",
        "answers": [
            [
                600
            ]
        ]
    },
    {
        "question": "Find the major that is studied by the largest number of students.",
        "query": "MATCH (student:`voter_2.Student`)\nWITH student.Major AS Major, count(student.Major) AS count\nRETURN Major\nORDER BY count DESC\nLIMIT 1",
        "db_id": "voter_2",
        "answers": [
            [
                600
            ]
        ]
    },
    {
        "question": "What is the most common major among female (sex is F) students?",
        "query": "MATCH (student:`voter_2.Student`)\nWHERE student.Sex = 'F'\nWITH student.Major AS Major, count(student.Major) AS count\nRETURN Major\nORDER BY count DESC\nLIMIT 1",
        "db_id": "voter_2",
        "answers": [
            [
                600
            ]
        ]
    },
    {
        "question": "Find the major that is studied by the most female students.",
        "query": "MATCH (student:`voter_2.Student`)\nWHERE student.Sex = 'F'\nWITH student.Major AS Major, count(student.Major) AS count\nRETURN Major\nORDER BY count DESC\nLIMIT 1",
        "db_id": "voter_2",
        "answers": [
            [
                600
            ]
        ]
    },
    {
        "question": "Report the distinct advisors who have more than 2 students.",
        "query": "MATCH (student:`voter_2.Student`)\nWITH count(*) AS count, student.Advisor AS Advisor\nWHERE count  > 2\nRETURN Advisor",
        "db_id": "voter_2",
        "answers": [
            [
                1121
            ],
            [
                1148
            ],
            [
                2192
            ],
            [
                8722
            ],
            [
                2311
            ],
            [
                8772
            ]
        ]
    },
    {
        "question": "Which advisors are advising more than 2 students?",
        "query": "MATCH (student:`voter_2.Student`)\nWITH count(*) AS count, student.Advisor AS Advisor\nWHERE count  > 2\nRETURN Advisor",
        "db_id": "voter_2",
        "answers": [
            [
                1121
            ],
            [
                1148
            ],
            [
                2192
            ],
            [
                8722
            ],
            [
                2311
            ],
            [
                8772
            ]
        ]
    },
    {
        "question": "How many products are there?",
        "query": "MATCH (products:`products_gen_characteristics.Products`)\nRETURN count(*)",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Count the number of products.",
        "query": "MATCH (products:`products_gen_characteristics.Products`)\nRETURN count(*)",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "How many colors are there?",
        "query": "MATCH (ref_colors:`products_gen_characteristics.Ref_Colors`)\nRETURN count(*)",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "Count the number of colors.",
        "query": "MATCH (ref_colors:`products_gen_characteristics.Ref_Colors`)\nRETURN count(*)",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "How many characteristics are there?",
        "query": "MATCH (characteristics:`products_gen_characteristics.Characteristics`)\nRETURN count(*)",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Count the number of characteristics.",
        "query": "MATCH (characteristics:`products_gen_characteristics.Characteristics`)\nRETURN count(*)",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "What are the names and buying prices of all the products?",
        "query": "MATCH (products:`products_gen_characteristics.Products`)\nRETURN products.product_name,products.typical_buying_price",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                "cumin",
                ""
            ],
            [
                "peper",
                "352447.2874677"
            ],
            [
                "basil",
                "503.8431967"
            ],
            [
                "borage",
                ""
            ],
            [
                "chili",
                ""
            ],
            [
                "ginger",
                "5.578"
            ],
            [
                "sesame",
                "1284268.0659"
            ],
            [
                "caraway",
                "24493"
            ],
            [
                "catnip",
                "12008702.623"
            ],
            [
                "flax",
                "339404395.7"
            ],
            [
                "chervil",
                ""
            ],
            [
                "voluptatem",
                "162"
            ],
            [
                "cinnam",
                "1686539.4"
            ],
            [
                "lotus",
                "43221310.465574"
            ],
            [
                "laurel",
                ""
            ]
        ]
    },
    {
        "question": "Return the names and typical buying prices for all products.",
        "query": "MATCH (products:`products_gen_characteristics.Products`)\nRETURN products.product_name,products.typical_buying_price",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                "cumin",
                ""
            ],
            [
                "peper",
                "352447.2874677"
            ],
            [
                "basil",
                "503.8431967"
            ],
            [
                "borage",
                ""
            ],
            [
                "chili",
                ""
            ],
            [
                "ginger",
                "5.578"
            ],
            [
                "sesame",
                "1284268.0659"
            ],
            [
                "caraway",
                "24493"
            ],
            [
                "catnip",
                "12008702.623"
            ],
            [
                "flax",
                "339404395.7"
            ],
            [
                "chervil",
                ""
            ],
            [
                "voluptatem",
                "162"
            ],
            [
                "cinnam",
                "1686539.4"
            ],
            [
                "lotus",
                "43221310.465574"
            ],
            [
                "laurel",
                ""
            ]
        ]
    },
    {
        "question": "List the description of all the colors.",
        "query": "MATCH (ref_colors:`products_gen_characteristics.Ref_Colors`)\nRETURN ref_colors.color_description",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                "red"
            ],
            [
                "green"
            ],
            [
                "yellow"
            ],
            [
                "blue"
            ],
            [
                "black"
            ],
            [
                "white"
            ],
            [
                "purple"
            ],
            [
                "gray"
            ]
        ]
    },
    {
        "question": "What are the descriptions for each color?",
        "query": "MATCH (ref_colors:`products_gen_characteristics.Ref_Colors`)\nRETURN ref_colors.color_description",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                "red"
            ],
            [
                "green"
            ],
            [
                "yellow"
            ],
            [
                "blue"
            ],
            [
                "black"
            ],
            [
                "white"
            ],
            [
                "purple"
            ],
            [
                "gray"
            ]
        ]
    },
    {
        "question": "Find the names of all the product characteristics.",
        "query": "MATCH (characteristics:`products_gen_characteristics.Characteristics`)\nRETURN DISTINCT characteristics.characteristic_name",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                "slow"
            ],
            [
                "fast"
            ],
            [
                "warm"
            ],
            [
                "hot"
            ],
            [
                "cool"
            ],
            [
                "error"
            ]
        ]
    },
    {
        "question": "What are the different names of the product characteristics?",
        "query": "MATCH (characteristics:`products_gen_characteristics.Characteristics`)\nRETURN DISTINCT characteristics.characteristic_name",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                "slow"
            ],
            [
                "fast"
            ],
            [
                "warm"
            ],
            [
                "hot"
            ],
            [
                "cool"
            ],
            [
                "error"
            ]
        ]
    },
    {
        "question": "What are the names of products with category \"Spices\"?",
        "query": "MATCH (products:`products_gen_characteristics.Products`)\nWHERE products.product_category_code = 'Spices'\nRETURN products.product_name",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                "cumin"
            ],
            [
                "peper"
            ],
            [
                "chili"
            ],
            [
                "cinnam"
            ]
        ]
    },
    {
        "question": "Return the names of products in the category 'Spices'.",
        "query": "MATCH (products:`products_gen_characteristics.Products`)\nWHERE products.product_category_code = 'Spices'\nRETURN products.product_name",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                "cumin"
            ],
            [
                "peper"
            ],
            [
                "chili"
            ],
            [
                "cinnam"
            ]
        ]
    },
    {
        "question": "How many products are there under the category \"Seeds\"?",
        "query": "MATCH (products:`products_gen_characteristics.Products`)\nWHERE products.product_category_code = 'Seeds'\nRETURN count(*)",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Count the number of products in the category 'Seeds'.",
        "query": "MATCH (products:`products_gen_characteristics.Products`)\nWHERE products.product_category_code = 'Seeds'\nRETURN count(*)",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "What is the category and typical buying price  of the product with name \"cumin\"?",
        "query": "MATCH (products:`products_gen_characteristics.Products`)\nWHERE products.product_name = 'cumin'\nRETURN products.product_category_code,products.typical_buying_price",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                "Spices",
                ""
            ]
        ]
    },
    {
        "question": "Return the category code and typical price of 'cumin'.",
        "query": "MATCH (products:`products_gen_characteristics.Products`)\nWHERE products.product_name = 'cumin'\nRETURN products.product_category_code,products.typical_buying_price",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                "Spices",
                ""
            ]
        ]
    },
    {
        "question": "Which category does the product named \"flax\" belong to?",
        "query": "MATCH (products:`products_gen_characteristics.Products`)\nWHERE products.product_name = 'flax'\nRETURN products.product_category_code",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                "Seeds"
            ]
        ]
    },
    {
        "question": "What is the code of the category that the product with the name 'flax' belongs to?",
        "query": "MATCH (products:`products_gen_characteristics.Products`)\nWHERE products.product_name = 'flax'\nRETURN products.product_category_code",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                "Seeds"
            ]
        ]
    },
    {
        "question": "What is the unit of measuerment of the product category code \"Herbs\"?",
        "query": "MATCH (ref_product_categories:`products_gen_characteristics.Ref_Product_Categories`)\nWHERE ref_product_categories.product_category_code = 'Herbs'\nRETURN ref_product_categories.unit_of_measure",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                "Handful             "
            ]
        ]
    },
    {
        "question": "Return the unit of measure for 'Herb' products.",
        "query": "MATCH (ref_product_categories:`products_gen_characteristics.Ref_Product_Categories`)\nWHERE ref_product_categories.product_category_code = 'Herbs'\nRETURN ref_product_categories.unit_of_measure",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                "Handful             "
            ]
        ]
    },
    {
        "question": "Find the product category description of the product category with code \"Spices\".",
        "query": "MATCH (ref_product_categories:`products_gen_characteristics.Ref_Product_Categories`)\nWHERE ref_product_categories.product_category_code = 'Spices'\nRETURN ref_product_categories.product_category_description",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                "Spices"
            ]
        ]
    },
    {
        "question": "What is the description of the product category with the code 'Spices'?",
        "query": "MATCH (ref_product_categories:`products_gen_characteristics.Ref_Product_Categories`)\nWHERE ref_product_categories.product_category_code = 'Spices'\nRETURN ref_product_categories.product_category_description",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                "Spices"
            ]
        ]
    },
    {
        "question": "What is the product category description and unit of measurement of category \"Herbs\"?",
        "query": "MATCH (ref_product_categories:`products_gen_characteristics.Ref_Product_Categories`)\nWHERE ref_product_categories.product_category_code = 'Herbs'\nRETURN ref_product_categories.product_category_description,ref_product_categories.unit_of_measure",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                "Herbs",
                "Handful             "
            ]
        ]
    },
    {
        "question": "Return the description and unit of measurement for products in the 'Herbs' category.",
        "query": "MATCH (ref_product_categories:`products_gen_characteristics.Ref_Product_Categories`)\nWHERE ref_product_categories.product_category_code = 'Herbs'\nRETURN ref_product_categories.product_category_description,ref_product_categories.unit_of_measure",
        "db_id": "products_gen_characteristics",
        "answers": [
            [
                "Herbs",
                "Handful             "
            ]
        ]
    },
    {
        "question": "How many events are there?",
        "query": "MATCH (event:`swimming.event`)\nRETURN count(*)",
        "db_id": "swimming",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "List all the event names by year from the most recent to the oldest.",
        "query": "MATCH (event:`swimming.event`)\nRETURN event.Name\nORDER BY event.Year DESC",
        "db_id": "swimming",
        "answers": [
            [
                "European FINA"
            ],
            [
                "FINA"
            ],
            [
                "IPC"
            ],
            [
                "World Junior"
            ],
            [
                "World Master"
            ],
            [
                "Pacific"
            ]
        ]
    },
    {
        "question": "What is the name of the event that happened in the most recent year?",
        "query": "MATCH (event:`swimming.event`)\nRETURN event.Name\nORDER BY event.Year DESC\nLIMIT 1",
        "db_id": "swimming",
        "answers": [
            [
                "European FINA"
            ]
        ]
    },
    {
        "question": "How many stadiums are there?",
        "query": "MATCH (stadium:`swimming.stadium`)\nRETURN count(*)",
        "db_id": "swimming",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "Find the name of the stadium that has the maximum capacity.",
        "query": "MATCH (stadium:`swimming.stadium`)\nRETURN stadium.name\nORDER BY stadium.Capacity DESC\nLIMIT 1",
        "db_id": "swimming",
        "answers": [
            [
                "Nou Mestalla"
            ]
        ]
    },
    {
        "question": "Find the country that has the most stadiums.",
        "query": "MATCH (stadium:`swimming.stadium`)\nWITH stadium.Country AS Country, count(stadium.Country) AS count\nRETURN Country\nORDER BY count DESC\nLIMIT 1",
        "db_id": "swimming",
        "answers": [
            [
                "Russia"
            ]
        ]
    },
    {
        "question": "Which country has at most 3 stadiums listed?",
        "query": "MATCH (stadium:`swimming.stadium`)\nWITH count(*) AS count, stadium.Country AS Country\nWHERE count  <= 3\nRETURN Country",
        "db_id": "swimming",
        "answers": [
            [
                "Spain"
            ],
            [
                "Azerbaijan"
            ],
            [
                "Hungary"
            ],
            [
                "France"
            ],
            [
                "England"
            ]
        ]
    },
    {
        "question": "How many cities have a stadium that was opened before the year of 2006?",
        "query": "MATCH (stadium:`swimming.stadium`)\nWHERE stadium.Opening_year < 2006\nRETURN count(DISTINCT stadium.City)",
        "db_id": "swimming",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "How many stadiums does each country have?",
        "query": "MATCH (stadium:`swimming.stadium`)\nWITH stadium.Country AS Country, count(stadium.Country) AS count\nRETURN Country,count",
        "db_id": "swimming",
        "answers": [
            [
                "Spain",
                2
            ],
            [
                "Russia",
                4
            ],
            [
                "Azerbaijan",
                1
            ],
            [
                "Hungary",
                1
            ],
            [
                "France",
                1
            ],
            [
                "England",
                1
            ]
        ]
    },
    {
        "question": "How many stadiums are not in country \"Russia\"?",
        "query": "MATCH (stadium:`swimming.stadium`)\nWHERE stadium.Country <> 'Russia'\nRETURN count(*)",
        "db_id": "swimming",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "Find the names of all swimmers, sorted by their 100 meter scores in ascending order.",
        "query": "MATCH (swimmer:`swimming.swimmer`)\nRETURN swimmer.name\nORDER BY swimmer.meter_100",
        "db_id": "swimming",
        "answers": [
            [
                "S\u00e9bastien Rouault"
            ],
            [
                "Przemys\u0142aw Sta\u0144czyk"
            ],
            [
                "Oussama Mellouli"
            ],
            [
                "Sergiy Fesenko"
            ],
            [
                "Grant Hackett"
            ],
            [
                "Craig Stevens"
            ],
            [
                "Federico Colbertaldo"
            ],
            [
                "Ryan Cochrane"
            ]
        ]
    },
    {
        "question": "How many different countries are all the swimmers from?",
        "query": "MATCH (swimmer:`swimming.swimmer`)\nRETURN count(DISTINCT swimmer.Nationality)",
        "db_id": "swimming",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "List countries that have more than one swimmer.",
        "query": "MATCH (swimmer:`swimming.swimmer`)\nWITH count(*) AS count, swimmer.Nationality AS Nationality\nWHERE count  > 1\nRETURN Nationality,count",
        "db_id": "swimming",
        "answers": [
            [
                "Australia",
                2
            ]
        ]
    },
    {
        "question": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".",
        "query": "MATCH (swimmer:`swimming.swimmer`)\nWHERE swimmer.Nationality = 'Australia'\nRETURN swimmer.meter_200,swimmer.meter_300",
        "db_id": "swimming",
        "answers": [
            [
                "1:56.34",
                "2:55.90"
            ],
            [
                "1:57.21",
                "2:56.95"
            ]
        ]
    },
    {
        "question": "Find the names of stadiums which have never had any event.",
        "query": "MATCH (stadium:`swimming.stadium`)\nWHERE NOT (stadium:`swimming.stadium`)-[]-(:`swimming.event`)\nRETURN stadium.name",
        "db_id": "swimming",
        "answers": [
            [
                "Ferenc Pusk\u00e1s Stadion"
            ],
            [
                "Stade des Lumi\u00e8res"
            ],
            [
                "Northumberland Development Project"
            ],
            [
                "Arena Baltika"
            ]
        ]
    },
    {
        "question": "Find the names of the swimmers who have no record.",
        "query": "MATCH (swimmer:`swimming.swimmer`)\nWHERE NOT (swimmer:`swimming.swimmer`)-[:`swimming.record`]-()\nRETURN swimmer.name",
        "db_id": "swimming",
        "answers": [
            [
                "Przemys\u0142aw Sta\u0144czyk"
            ],
            [
                "S\u00e9bastien Rouault"
            ]
        ]
    },
    {
        "question": "What is the average capacity of the stadiums that were opened in year 2005?",
        "query": "MATCH (stadium:`swimming.stadium`)\nWHERE stadium.Opening_year = 2005\nRETURN avg(stadium.Capacity)",
        "db_id": "swimming",
        "answers": [
            [
                62504.0
            ]
        ]
    },
    {
        "question": "How many railways are there?",
        "query": "MATCH (railway:`railway.railway`)\nRETURN count(*)",
        "db_id": "railway",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "List the builders of railways in ascending alphabetical order.",
        "query": "MATCH (railway:`railway.railway`)\nRETURN railway.Builder\nORDER BY railway.Builder ASC",
        "db_id": "railway",
        "answers": [
            [
                "Avonside"
            ],
            [
                "GER Hartford"
            ],
            [
                "GER Stratford"
            ],
            [
                "GNR Doncaster"
            ],
            [
                "GWR Swindon"
            ],
            [
                "GWR Swindon"
            ],
            [
                "MR Derby"
            ],
            [
                "SECR Ashford"
            ],
            [
                "Stephenson"
            ],
            [
                "Swindon Works"
            ]
        ]
    },
    {
        "question": "List the wheels and locations of the railways.",
        "query": "MATCH (railway:`railway.railway`)\nRETURN railway.Wheels,railway.Location",
        "db_id": "railway",
        "answers": [
            [
                "4-4-0",
                "York"
            ],
            [
                "4-4-0",
                "Bo'ness"
            ],
            [
                "4-4-2",
                "Barrow Hill"
            ],
            [
                "4-4-0",
                "Toddington"
            ],
            [
                "0-6-0T",
                "Bressingham"
            ],
            [
                "0-6-0",
                "Barrow Hill"
            ],
            [
                "2-8-0",
                "Shildon"
            ],
            [
                "4-6-0",
                "Swindon"
            ],
            [
                "4-4-2T",
                "Bressingham"
            ],
            [
                "0-6-0ST",
                "Basingstoke"
            ]
        ]
    },
    {
        "question": "What is the maximum level of managers in countries that are not \"Australia\"?",
        "query": "MATCH (manager:`railway.manager`)\nWHERE manager.Country <> 'Australia\t'\nRETURN max(manager.Level)",
        "db_id": "railway",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "question": "What is the average age for all managers?",
        "query": "MATCH (manager:`railway.manager`)\nRETURN avg(manager.Age)",
        "db_id": "railway",
        "answers": [
            [
                49.142857142857146
            ]
        ]
    },
    {
        "question": "What are the names of managers in ascending order of level?",
        "query": "MATCH (manager:`railway.manager`)\nRETURN manager.Name\nORDER BY manager.Level ASC",
        "db_id": "railway",
        "answers": [
            [
                "Ben Curtis"
            ],
            [
                "Todd Hamilton"
            ],
            [
                "Tiger Woods"
            ],
            [
                "David Duval"
            ],
            [
                "Sandy Lyle"
            ],
            [
                "Nick Faldo"
            ],
            [
                "Greg Norman"
            ]
        ]
    },
    {
        "question": "What are the names and arrival times of trains?",
        "query": "MATCH (train:`railway.train`)\nRETURN train.Name,train.Arrival",
        "db_id": "railway",
        "answers": [
            [
                "Wardha-Ballarshah Pass",
                "08:54"
            ],
            [
                "Sewagram Exp",
                "09:08"
            ],
            [
                "Ballarshah-Mumbai Pass",
                "09:48"
            ],
            [
                "Nagpur-Kazipet Pass",
                "23:44"
            ],
            [
                "Kazipet-Nagpur Pass",
                "05:09"
            ],
            [
                "Lucknow-Chennai Exp",
                "13:04"
            ],
            [
                "Andaman Exp",
                "13:04"
            ],
            [
                "Andaman Exp",
                "23:39"
            ],
            [
                "Nandigram Exp",
                "13:28"
            ]
        ]
    },
    {
        "question": "What is the name of the oldest manager?",
        "query": "MATCH (manager:`railway.manager`)\nRETURN manager.Name\nORDER BY manager.Age DESC\nLIMIT 1",
        "db_id": "railway",
        "answers": [
            [
                "Todd Hamilton"
            ]
        ]
    },
    {
        "question": "Show the names of trains and locations of railways they are in.",
        "query": "MATCH (T1:`railway.railway`)-[]-(T2:`railway.train`)\nRETURN T2.Name,T1.Location",
        "db_id": "railway",
        "answers": [
            [
                "Wardha-Ballarshah Pass",
                "York"
            ],
            [
                "Sewagram Exp",
                "York"
            ],
            [
                "Ballarshah-Mumbai Pass",
                "Bo'ness"
            ],
            [
                "Nagpur-Kazipet Pass",
                "Barrow Hill"
            ],
            [
                "Kazipet-Nagpur Pass",
                "Bressingham"
            ],
            [
                "Lucknow-Chennai Exp",
                "Bressingham"
            ],
            [
                "Andaman Exp",
                "Shildon"
            ],
            [
                "Andaman Exp",
                "Bressingham"
            ],
            [
                "Nandigram Exp",
                "Basingstoke"
            ]
        ]
    },
    {
        "question": "Show the builder of railways associated with the trains named \"Andaman Exp\".",
        "query": "MATCH (T1:`railway.railway`)-[]-(T2:`railway.train`)\nWHERE T2.Name = 'Andaman Exp'\nRETURN T1.Builder",
        "db_id": "railway",
        "answers": [
            [
                "GWR Swindon"
            ],
            [
                "Stephenson"
            ]
        ]
    },
    {
        "question": "Show id and location of railways that are associated with more than one train.",
        "query": "MATCH (T1:`railway.railway`)-[]-(T2:`railway.train`)\nWITH count(*) AS count, T2.Railway_ID AS Railway_ID, T1.Location AS Location\nWHERE count  > 1\nRETURN Railway_ID,Location",
        "db_id": "railway",
        "answers": [
            [
                1,
                "York"
            ],
            [
                5,
                "Bressingham"
            ]
        ]
    },
    {
        "question": "Show different builders of railways, along with the corresponding number of railways using each builder.",
        "query": "MATCH (railway:`railway.railway`)\nWITH count(railway.Builder) AS count, railway.Builder AS Builder\nRETURN Builder,count",
        "db_id": "railway",
        "answers": [
            [
                "SECR Ashford",
                1
            ],
            [
                "MR Derby",
                1
            ],
            [
                "GNR Doncaster",
                1
            ],
            [
                "GWR Swindon",
                2
            ],
            [
                "GER Stratford",
                1
            ],
            [
                "GER Hartford",
                1
            ],
            [
                "Swindon Works",
                1
            ],
            [
                "Stephenson",
                1
            ],
            [
                "Avonside",
                1
            ]
        ]
    },
    {
        "question": "Show the most common builder of railways.",
        "query": "MATCH (railway:`railway.railway`)\nWITH count(railway.Builder) AS count, railway.Builder AS Builder\nRETURN Builder\nORDER BY count DESC\nLIMIT 1",
        "db_id": "railway",
        "answers": [
            [
                "GWR Swindon"
            ]
        ]
    },
    {
        "question": "Show different locations of railways along with the corresponding number of railways at each location.",
        "query": "MATCH (railway:`railway.railway`)\nWITH railway.Location AS Location, count(railway.Location) AS count\nRETURN Location,count",
        "db_id": "railway",
        "answers": [
            [
                "York",
                1
            ],
            [
                "Bo'ness",
                1
            ],
            [
                "Barrow Hill",
                2
            ],
            [
                "Toddington",
                1
            ],
            [
                "Bressingham",
                2
            ],
            [
                "Shildon",
                1
            ],
            [
                "Swindon",
                1
            ],
            [
                "Basingstoke",
                1
            ]
        ]
    },
    {
        "question": "Show the locations that have more than one railways.",
        "query": "MATCH (railway:`railway.railway`)\nWITH count(*) AS count, railway.Location AS Location\nWHERE count  > 1\nRETURN Location",
        "db_id": "railway",
        "answers": [
            [
                "Barrow Hill"
            ],
            [
                "Bressingham"
            ]
        ]
    },
    {
        "question": "List the object number of railways that do not have any trains.",
        "query": "MATCH (railway:`railway.railway`)\nWHERE NOT (railway:`railway.railway`)-[]-(:`railway.train`)\nRETURN railway.ObjectNumber",
        "db_id": "railway",
        "answers": [
            [
                "1978-7025"
            ],
            [
                "1978-7026"
            ],
            [
                "1978-7027"
            ]
        ]
    },
    {
        "question": "Show the distinct countries of managers.",
        "query": "MATCH (manager:`railway.manager`)\nRETURN DISTINCT manager.Country",
        "db_id": "railway",
        "answers": [
            [
                "United States"
            ],
            [
                "Scotland"
            ],
            [
                "England"
            ],
            [
                "Australia"
            ]
        ]
    },
    {
        "question": "Show the working years of managers in descending order of their level.",
        "query": "MATCH (manager:`railway.manager`)\nRETURN manager.Working_year_starts\nORDER BY manager.Level DESC",
        "db_id": "railway",
        "answers": [
            [
                "1993"
            ],
            [
                "1999"
            ],
            [
                "1985"
            ],
            [
                "2001"
            ],
            [
                "2003"
            ],
            [
                "2004"
            ],
            [
                "2006"
            ]
        ]
    },
    {
        "question": "Show the countries that have managers of age above 50 or below 46.",
        "query": "MATCH (manager:`railway.manager`)\nWHERE manager.Age > 50 OR manager.Age < 46\nRETURN manager.Country",
        "db_id": "railway",
        "answers": [
            [
                "United States"
            ],
            [
                "United States"
            ],
            [
                "England"
            ],
            [
                "Australia"
            ]
        ]
    },
    {
        "question": "How many addresses are there in country USA?",
        "query": "MATCH (addresses:`customers_and_products_contacts.Addresses`)\nWHERE addresses.country = 'USA'\nRETURN count(*)",
        "db_id": "customers_and_products_contacts",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Show all distinct cities in the address record.",
        "query": "MATCH (addresses:`customers_and_products_contacts.Addresses`)\nRETURN DISTINCT addresses.city",
        "db_id": "customers_and_products_contacts",
        "answers": [
            [
                "Hertafurt"
            ],
            [
                "Edgardoberg"
            ],
            [
                "Gilbertmouth"
            ],
            [
                "Lake Floyd"
            ],
            [
                "Gibsonfurt"
            ],
            [
                "North Jairo"
            ],
            [
                "East Rickey"
            ],
            [
                "West Kaiatown"
            ],
            [
                "Agustinstad"
            ],
            [
                "Gleasonland"
            ],
            [
                "Lake Katheryn"
            ],
            [
                "North Lisandroport"
            ],
            [
                "Estaland"
            ],
            [
                "West Muriel"
            ],
            [
                "Port Montytown"
            ]
        ]
    },
    {
        "question": "Show each state and the number of addresses in each state.",
        "query": "MATCH (addresses:`customers_and_products_contacts.Addresses`)\nWITH addresses.state_province_county AS state_province_county, count(addresses.state_province_county) AS count\nRETURN state_province_county,count",
        "db_id": "customers_and_products_contacts",
        "answers": [
            [
                "Nevada",
                1
            ],
            [
                "Colorado",
                1
            ],
            [
                "Virginia",
                1
            ],
            [
                "Oklahoma",
                1
            ],
            [
                "District of Columbia",
                1
            ],
            [
                "Maryland",
                1
            ],
            [
                "Louisiana",
                1
            ],
            [
                "Oregon",
                1
            ],
            [
                "Illinois",
                1
            ],
            [
                "Kentucky",
                2
            ],
            [
                "Maine",
                1
            ],
            [
                "Idaho",
                1
            ],
            [
                "Vermont",
                1
            ],
            [
                "SouthDakota",
                1
            ]
        ]
    },
    {
        "question": "Show the product type codes which have at least two products.",
        "query": "MATCH (products:`customers_and_products_contacts.Products`)\nWITH count(*) AS count, products.product_type_code AS product_type_code\nWHERE count  >= 2\nRETURN product_type_code",
        "db_id": "customers_and_products_contacts",
        "answers": [
            [
                "Hardware"
            ],
            [
                "Clothes"
            ]
        ]
    },
    {
        "question": "Show the name, phone, and payment method code for all customers in descending order of customer number.",
        "query": "MATCH (customers:`customers_and_products_contacts.Customers`)\nRETURN customers.customer_name,customers.customer_phone,customers.payment_method_code\nORDER BY customers.customer_number DESC",
        "db_id": "customers_and_products_contacts",
        "answers": [
            [
                "Buford",
                "(192)144-4687",
                "Credit Card"
            ],
            [
                "Cheyenne",
                "009-136-4509x19635",
                "Direct Debit"
            ],
            [
                "Cleo",
                "1-202-928-5395",
                "Credit Card"
            ],
            [
                "Raymond",
                "1-513-427-0125",
                "Direct Debit"
            ],
            [
                "Orion",
                "479-171-6355x66065",
                "Direct Debit"
            ],
            [
                "Madaline",
                "097-514-4641",
                "Credit Card"
            ],
            [
                "Brenna",
                "1-271-345-4681x1131",
                "Credit Card"
            ],
            [
                "Sterling",
                "896.685.8228x2786",
                "Credit Card"
            ],
            [
                "Lela",
                "838.718.8618x23239",
                "Credit Card"
            ],
            [
                "Ottilie",
                "393-750-2077x72779",
                "Direct Debit"
            ],
            [
                "Caterina",
                "387.053.1225",
                "Direct Debit"
            ],
            [
                "Kayley",
                "+87(9)5279161988",
                "Credit Card"
            ],
            [
                "Melissa",
                "529.148.1926",
                "Direct Debit"
            ],
            [
                "Cecelia",
                "672-559-0630x7875",
                "Direct Debit"
            ],
            [
                "Shany",
                "936.929.9929",
                "Direct Debit"
            ]
        ]
    },
    {
        "question": "Show the names of customers who use Credit Card payment method and have more than 2 orders.",
        "query": "MATCH (T1:`customers_and_products_contacts.Customers`)-[]-(T2:`customers_and_products_contacts.Customer_Orders`)\nWHERE T1.payment_method_code = 'Credit Card'\nWITH count(*) AS count, T1.customer_name AS customer_name\nWHERE count  > 2\nRETURN customer_name",
        "db_id": "customers_and_products_contacts",
        "answers": [
            [
                "Sterling"
            ],
            [
                "Cleo"
            ]
        ]
    },
    {
        "question": "Show the product type and name for the products with price higher than 1000 or lower than 500.",
        "query": "MATCH (products:`customers_and_products_contacts.Products`)\nWHERE products.product_price > 1000 OR products.product_price < 500\nRETURN products.product_type_code,products.product_name",
        "db_id": "customers_and_products_contacts",
        "answers": [
            [
                "Hardware",
                "Apple"
            ],
            [
                "Clothes",
                "jcrew"
            ],
            [
                "Hardware",
                "Apple"
            ],
            [
                "Hardware",
                "Apple"
            ],
            [
                "Clothes",
                "jcrew"
            ],
            [
                "Hardware",
                "Apple"
            ],
            [
                "Hardware",
                "Apple"
            ],
            [
                "Hardware",
                "Sony"
            ],
            [
                "Hardware",
                "Sony"
            ],
            [
                "Clothes",
                "jcrew"
            ],
            [
                "Clothes",
                "gucci"
            ],
            [
                "Hardware",
                "Sony"
            ],
            [
                "Clothes",
                "gucci"
            ]
        ]
    },
    {
        "question": "Find the name of dorms only for female (F gender).",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nWHERE dorm.gender = 'F'\nRETURN dorm.dorm_name",
        "db_id": "dorm_1",
        "answers": [
            [
                "Anonymous Donor Hall"
            ]
        ]
    },
    {
        "question": "What are the names of the all-female dorms?",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nWHERE dorm.gender = 'F'\nRETURN dorm.dorm_name",
        "db_id": "dorm_1",
        "answers": [
            [
                "Anonymous Donor Hall"
            ]
        ]
    },
    {
        "question": "Find the name of dorms that can accommodate more than 300 students.",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nWHERE dorm.student_capacity > 300\nRETURN dorm.dorm_name",
        "db_id": "dorm_1",
        "answers": [
            [
                "Fawlty Towers"
            ],
            [
                "Dorm-plex 2000"
            ]
        ]
    },
    {
        "question": "What are the names of all the dorms that can accomdate more than 300 students?",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nWHERE dorm.student_capacity > 300\nRETURN dorm.dorm_name",
        "db_id": "dorm_1",
        "answers": [
            [
                "Fawlty Towers"
            ],
            [
                "Dorm-plex 2000"
            ]
        ]
    },
    {
        "question": "How many female students (sex is F) whose age is below 25?",
        "query": "MATCH (student:`dorm_1.Student`)\nWHERE student.Sex = 'F' AND student.Age < 25\nRETURN count(*)",
        "db_id": "dorm_1",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "How many girl students who are younger than 25?",
        "query": "MATCH (student:`dorm_1.Student`)\nWHERE student.Sex = 'F' AND student.Age < 25\nRETURN count(*)",
        "db_id": "dorm_1",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "Find the first name of students who is older than 20.",
        "query": "MATCH (student:`dorm_1.Student`)\nWHERE student.Age > 20\nRETURN student.Fname",
        "db_id": "dorm_1",
        "answers": [
            [
                "Shiela"
            ],
            [
                "Paul"
            ],
            [
                "David"
            ],
            [
                "Bruce"
            ],
            [
                "Ian"
            ],
            [
                "Lisa"
            ],
            [
                "Sarah"
            ]
        ]
    },
    {
        "question": "What are the first names of all students who are older than 20?",
        "query": "MATCH (student:`dorm_1.Student`)\nWHERE student.Age > 20\nRETURN student.Fname",
        "db_id": "dorm_1",
        "answers": [
            [
                "Shiela"
            ],
            [
                "Paul"
            ],
            [
                "David"
            ],
            [
                "Bruce"
            ],
            [
                "Ian"
            ],
            [
                "Lisa"
            ],
            [
                "Sarah"
            ]
        ]
    },
    {
        "question": "How many dorms are there?",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nRETURN count(*)",
        "db_id": "dorm_1",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "How many dorms are in the database?",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nRETURN count(*)",
        "db_id": "dorm_1",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "Find the number of distinct amenities.",
        "query": "MATCH (dorm_amenity:`dorm_1.Dorm_amenity`)\nRETURN count(*)",
        "db_id": "dorm_1",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "question": "How many diffrent dorm amenities are there?",
        "query": "MATCH (dorm_amenity:`dorm_1.Dorm_amenity`)\nRETURN count(*)",
        "db_id": "dorm_1",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "question": "How many students are there?",
        "query": "MATCH (student:`dorm_1.Student`)\nRETURN count(*)",
        "db_id": "dorm_1",
        "answers": [
            [
                34
            ]
        ]
    },
    {
        "question": "How many students exist?",
        "query": "MATCH (student:`dorm_1.Student`)\nRETURN count(*)",
        "db_id": "dorm_1",
        "answers": [
            [
                34
            ]
        ]
    },
    {
        "question": "Find the number of distinct gender for dorms.",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nRETURN count(DISTINCT dorm.gender)",
        "db_id": "dorm_1",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "How many different genders are there in the dorms?",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nRETURN count(DISTINCT dorm.gender)",
        "db_id": "dorm_1",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Find the capacity and gender type of the dorm whose name has substring \u2018Donor\u2019.",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nWHERE dorm.dorm_name =~'.*[D|d]onor.*'\nRETURN dorm.student_capacity,dorm.gender",
        "db_id": "dorm_1",
        "answers": [
            [
                128,
                "F"
            ]
        ]
    },
    {
        "question": "What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it?",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nWHERE dorm.dorm_name =~'.*[D|d]onor.*'\nRETURN dorm.student_capacity,dorm.gender",
        "db_id": "dorm_1",
        "answers": [
            [
                128,
                "F"
            ]
        ]
    },
    {
        "question": "Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nWHERE dorm.student_capacity > 300 OR dorm.student_capacity < 100\nRETURN dorm.dorm_name,dorm.gender",
        "db_id": "dorm_1",
        "answers": [
            [
                "Smith Hall",
                "X"
            ],
            [
                "Fawlty Towers",
                "X"
            ],
            [
                "Dorm-plex 2000",
                "X"
            ],
            [
                "University Hovels",
                "X"
            ]
        ]
    },
    {
        "question": "What are the names and types of the dorms that have a capacity greater than 300 or less than 100?",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nWHERE dorm.student_capacity > 300 OR dorm.student_capacity < 100\nRETURN dorm.dorm_name,dorm.gender",
        "db_id": "dorm_1",
        "answers": [
            [
                "Smith Hall",
                "X"
            ],
            [
                "Fawlty Towers",
                "X"
            ],
            [
                "Dorm-plex 2000",
                "X"
            ],
            [
                "University Hovels",
                "X"
            ]
        ]
    },
    {
        "question": "Find the numbers of different majors and cities.",
        "query": "MATCH (student:`dorm_1.Student`)\nRETURN count(DISTINCT student.Major),count(DISTINCT student.city_code)",
        "db_id": "dorm_1",
        "answers": [
            [
                6,
                19
            ]
        ]
    },
    {
        "question": "How many different majors are there and how many different city codes are there for each student?",
        "query": "MATCH (student:`dorm_1.Student`)\nRETURN count(DISTINCT student.Major),count(DISTINCT student.city_code)",
        "db_id": "dorm_1",
        "answers": [
            [
                6,
                19
            ]
        ]
    },
    {
        "question": "Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.",
        "query": "MATCH (student:`dorm_1.Student`)\nWHERE student.Sex = 'F' AND student.city_code = 'BAL'\nRETURN student.LName  AS lname \nUNION\nMATCH (student:`dorm_1.Student`)\nWHERE student.Sex = 'M' AND student.Age < 20\nRETURN student.LName  AS lname",
        "db_id": "dorm_1",
        "answers": [
            [
                "Smith"
            ],
            [
                "Nelson"
            ],
            [
                "Prater"
            ],
            [
                "Schultz"
            ],
            [
                "Tai"
            ],
            [
                "Lee"
            ],
            [
                "Norris"
            ],
            [
                "Schwartz"
            ],
            [
                "Pang"
            ],
            [
                "Andreou"
            ],
            [
                "Woods"
            ],
            [
                "Goldman"
            ],
            [
                "Brody"
            ],
            [
                "Han"
            ],
            [
                "Simms"
            ],
            [
                "Epp"
            ]
        ]
    },
    {
        "question": "What is the last name of every student who is either female or living in a city with the code BAL or male and under 20?",
        "query": "MATCH (student:`dorm_1.Student`)\nWHERE student.Sex = 'F' AND student.city_code = 'BAL'\nRETURN student.LName  AS lname \nUNION\nMATCH (student:`dorm_1.Student`)\nWHERE student.Sex = 'M' AND student.Age < 20\nRETURN student.LName  AS lname",
        "db_id": "dorm_1",
        "answers": [
            [
                "Smith"
            ],
            [
                "Nelson"
            ],
            [
                "Prater"
            ],
            [
                "Schultz"
            ],
            [
                "Tai"
            ],
            [
                "Lee"
            ],
            [
                "Norris"
            ],
            [
                "Schwartz"
            ],
            [
                "Pang"
            ],
            [
                "Andreou"
            ],
            [
                "Woods"
            ],
            [
                "Goldman"
            ],
            [
                "Brody"
            ],
            [
                "Han"
            ],
            [
                "Simms"
            ],
            [
                "Epp"
            ]
        ]
    },
    {
        "question": "Find the name of the dorm with the largest capacity.",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nRETURN dorm.dorm_name\nORDER BY dorm.student_capacity DESC\nLIMIT 1",
        "db_id": "dorm_1",
        "answers": [
            [
                "Dorm-plex 2000"
            ]
        ]
    },
    {
        "question": "What are the names of the dorm with the largest capacity?",
        "query": "MATCH (dorm:`dorm_1.Dorm`)\nRETURN dorm.dorm_name\nORDER BY dorm.student_capacity DESC\nLIMIT 1",
        "db_id": "dorm_1",
        "answers": [
            [
                "Dorm-plex 2000"
            ]
        ]
    },
    {
        "question": "List in alphabetic order all different amenities.",
        "query": "MATCH (dorm_amenity:`dorm_1.Dorm_amenity`)\nRETURN dorm_amenity.amenity_name\nORDER BY dorm_amenity.amenity_name",
        "db_id": "dorm_1",
        "answers": [
            [
                "4 Walls"
            ],
            [
                "Air Conditioning"
            ],
            [
                "Allows Pets"
            ],
            [
                "Carpeted Rooms"
            ],
            [
                "Ethernet Ports"
            ],
            [
                "Heat"
            ],
            [
                "Kitchen in Every Room"
            ],
            [
                "Pub in Basement"
            ],
            [
                "Roof"
            ],
            [
                "Study Room"
            ],
            [
                "TV Lounge"
            ],
            [
                "Working Fireplaces"
            ]
        ]
    },
    {
        "question": "What are the different dorm amenity names in alphabetical order?",
        "query": "MATCH (dorm_amenity:`dorm_1.Dorm_amenity`)\nRETURN dorm_amenity.amenity_name\nORDER BY dorm_amenity.amenity_name",
        "db_id": "dorm_1",
        "answers": [
            [
                "4 Walls"
            ],
            [
                "Air Conditioning"
            ],
            [
                "Allows Pets"
            ],
            [
                "Carpeted Rooms"
            ],
            [
                "Ethernet Ports"
            ],
            [
                "Heat"
            ],
            [
                "Kitchen in Every Room"
            ],
            [
                "Pub in Basement"
            ],
            [
                "Roof"
            ],
            [
                "Study Room"
            ],
            [
                "TV Lounge"
            ],
            [
                "Working Fireplaces"
            ]
        ]
    },
    {
        "question": "List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages.",
        "query": "MATCH (student:`dorm_1.Student`)\nWHERE student.city_code <> 'HKG'\nRETURN student.Fname,student.LName\nORDER BY student.Age",
        "db_id": "dorm_1",
        "answers": [
            [
                "Derek",
                "Lee"
            ],
            [
                "Mark",
                "Schwartz"
            ],
            [
                "Michael",
                "Woods"
            ],
            [
                "Jun",
                "Han"
            ],
            [
                "Linda",
                "Smith"
            ],
            [
                "Andy",
                "Schultz"
            ],
            [
                "Lisa",
                "Apap"
            ],
            [
                "Charles",
                "Norris"
            ],
            [
                "Arthur",
                "Pang"
            ],
            [
                "Stacy",
                "Prater"
            ],
            [
                "Mark",
                "Goldman"
            ],
            [
                "Paul",
                "Brody"
            ],
            [
                "William",
                "Simms"
            ],
            [
                "Eric",
                "Epp"
            ],
            [
                "Eric",
                "Tai"
            ],
            [
                "George",
                "Andreou"
            ],
            [
                "Dinesh",
                "Kumar"
            ],
            [
                "Jandy",
                "Nelson"
            ],
            [
                "Steven",
                "Davis"
            ],
            [
                "Michael",
                "Leighton"
            ],
            [
                "David",
                "Shieber"
            ],
            [
                "Eric",
                "Rugh"
            ],
            [
                "Sarah",
                "Smith"
            ],
            [
                "Eric",
                "Brown"
            ],
            [
                "Shiela",
                "Jones"
            ],
            [
                "Lisa",
                "Cheng"
            ],
            [
                "David",
                "Adams"
            ],
            [
                "Ian",
                "Thornton"
            ],
            [
                "Paul",
                "Gompers"
            ],
            [
                "Sarah",
                "Schmidt"
            ],
            [
                "Bruce",
                "Wilson"
            ]
        ]
    },
    {
        "question": "What are the first and last names of all students who are not living in the city HKG and order the results by age?",
        "query": "MATCH (student:`dorm_1.Student`)\nWHERE student.city_code <> 'HKG'\nRETURN student.Fname,student.LName\nORDER BY student.Age",
        "db_id": "dorm_1",
        "answers": [
            [
                "Derek",
                "Lee"
            ],
            [
                "Mark",
                "Schwartz"
            ],
            [
                "Michael",
                "Woods"
            ],
            [
                "Jun",
                "Han"
            ],
            [
                "Linda",
                "Smith"
            ],
            [
                "Andy",
                "Schultz"
            ],
            [
                "Lisa",
                "Apap"
            ],
            [
                "Charles",
                "Norris"
            ],
            [
                "Arthur",
                "Pang"
            ],
            [
                "Stacy",
                "Prater"
            ],
            [
                "Mark",
                "Goldman"
            ],
            [
                "Paul",
                "Brody"
            ],
            [
                "William",
                "Simms"
            ],
            [
                "Eric",
                "Epp"
            ],
            [
                "Eric",
                "Tai"
            ],
            [
                "George",
                "Andreou"
            ],
            [
                "Dinesh",
                "Kumar"
            ],
            [
                "Jandy",
                "Nelson"
            ],
            [
                "Steven",
                "Davis"
            ],
            [
                "Michael",
                "Leighton"
            ],
            [
                "David",
                "Shieber"
            ],
            [
                "Eric",
                "Rugh"
            ],
            [
                "Sarah",
                "Smith"
            ],
            [
                "Eric",
                "Brown"
            ],
            [
                "Shiela",
                "Jones"
            ],
            [
                "Lisa",
                "Cheng"
            ],
            [
                "David",
                "Adams"
            ],
            [
                "Ian",
                "Thornton"
            ],
            [
                "Paul",
                "Gompers"
            ],
            [
                "Sarah",
                "Schmidt"
            ],
            [
                "Bruce",
                "Wilson"
            ]
        ]
    },
    {
        "question": "Find the number of students in each major.",
        "query": "MATCH (student:`dorm_1.Student`)\nWITH student.Major AS Major, count(student.Major) AS count\nRETURN count,Major",
        "db_id": "dorm_1",
        "answers": [
            [
                18,
                600
            ],
            [
                6,
                520
            ],
            [
                2,
                540
            ],
            [
                5,
                550
            ],
            [
                1,
                100
            ],
            [
                2,
                50
            ]
        ]
    },
    {
        "question": "How many students are there in each major?",
        "query": "MATCH (student:`dorm_1.Student`)\nWITH student.Major AS Major, count(student.Major) AS count\nRETURN count,Major",
        "db_id": "dorm_1",
        "answers": [
            [
                18,
                600
            ],
            [
                6,
                520
            ],
            [
                2,
                540
            ],
            [
                5,
                550
            ],
            [
                1,
                100
            ],
            [
                2,
                50
            ]
        ]
    },
    {
        "question": "Find the number of students for the cities where have more than one student.",
        "query": "MATCH (student:`dorm_1.Student`)\nWITH count(*) AS count, student.city_code AS city_code\nWHERE count  > 1\nRETURN count,city_code",
        "db_id": "dorm_1",
        "answers": [
            [
                4,
                "BAL"
            ],
            [
                3,
                "HKG"
            ],
            [
                3,
                "WAS"
            ],
            [
                2,
                "YYZ"
            ],
            [
                4,
                "PIT"
            ],
            [
                3,
                "PHL"
            ],
            [
                3,
                "NYC"
            ]
        ]
    },
    {
        "question": "How many students are from each city, and which cities have more than one cities?",
        "query": "MATCH (student:`dorm_1.Student`)\nWITH count(*) AS count, student.city_code AS city_code\nWHERE count  > 1\nRETURN count,city_code",
        "db_id": "dorm_1",
        "answers": [
            [
                4,
                "BAL"
            ],
            [
                3,
                "HKG"
            ],
            [
                3,
                "WAS"
            ],
            [
                2,
                "YYZ"
            ],
            [
                4,
                "PIT"
            ],
            [
                3,
                "PHL"
            ],
            [
                3,
                "NYC"
            ]
        ]
    },
    {
        "question": "How many customers are there?",
        "query": "MATCH (customers:`customer_complaints.Customers`)\nRETURN count(*)",
        "db_id": "customer_complaints",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "Count the number of customers.",
        "query": "MATCH (customers:`customer_complaints.Customers`)\nRETURN count(*)",
        "db_id": "customer_complaints",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "Find the emails and phone numbers of all the customers, ordered by email address and phone number.",
        "query": "MATCH (customers:`customer_complaints.Customers`)\nRETURN customers.email_address,customers.phone_number\nORDER BY customers.email_address,customers.phone_number",
        "db_id": "customer_complaints",
        "answers": [
            [
                "cayla.satterfield@example.net",
                "470-803-0244"
            ],
            [
                "hsteuber@example.org",
                "06963347450"
            ],
            [
                "lavonne.frami@example.com",
                "+38(3)9011433816"
            ],
            [
                "paige.hyatt@example.com",
                "1-369-302-7623x576"
            ],
            [
                "rzulauf@example.org",
                "578.019.7943x328"
            ],
            [
                "ubeier@example.org",
                "044-468-4549"
            ],
            [
                "vbogisich@example.org",
                "548.373.3603x59134"
            ],
            [
                "vida86@example.com",
                "997.698.4779x882"
            ]
        ]
    },
    {
        "question": "What are the emails and phone numbers of all customers, sorted by email address and phone number?",
        "query": "MATCH (customers:`customer_complaints.Customers`)\nRETURN customers.email_address,customers.phone_number\nORDER BY customers.email_address,customers.phone_number",
        "db_id": "customer_complaints",
        "answers": [
            [
                "cayla.satterfield@example.net",
                "470-803-0244"
            ],
            [
                "hsteuber@example.org",
                "06963347450"
            ],
            [
                "lavonne.frami@example.com",
                "+38(3)9011433816"
            ],
            [
                "paige.hyatt@example.com",
                "1-369-302-7623x576"
            ],
            [
                "rzulauf@example.org",
                "578.019.7943x328"
            ],
            [
                "ubeier@example.org",
                "044-468-4549"
            ],
            [
                "vbogisich@example.org",
                "548.373.3603x59134"
            ],
            [
                "vida86@example.com",
                "997.698.4779x882"
            ]
        ]
    },
    {
        "question": "Find the email and phone number of the customers who have never filed a complaint before.",
        "query": "MATCH (customers:`customer_complaints.Customers`)\nWHERE NOT (customers:`customer_complaints.Customers`)-[]-(:`customer_complaints.Complaints`)\nRETURN customers.email_address,customers.phone_number",
        "db_id": "customer_complaints",
        "answers": [
            [
                "paige.hyatt@example.com",
                "1-369-302-7623x576"
            ]
        ]
    },
    {
        "question": "What are the emails and phone numbers of custoemrs who have never filed a complaint?",
        "query": "MATCH (customers:`customer_complaints.Customers`)\nWHERE NOT (customers:`customer_complaints.Customers`)-[]-(:`customer_complaints.Complaints`)\nRETURN customers.email_address,customers.phone_number",
        "db_id": "customer_complaints",
        "answers": [
            [
                "paige.hyatt@example.com",
                "1-369-302-7623x576"
            ]
        ]
    },
    {
        "question": "What is the description of the product named \"Chocolate\"?",
        "query": "MATCH (products:`customer_complaints.Products`)\nWHERE products.product_name = 'Chocolate'\nRETURN products.product_description",
        "db_id": "customer_complaints",
        "answers": [
            [
                "Handmade chocolate"
            ]
        ]
    },
    {
        "question": "Return the description of the product called \"Chocolate\".",
        "query": "MATCH (products:`customer_complaints.Products`)\nWHERE products.product_name = 'Chocolate'\nRETURN products.product_description",
        "db_id": "customer_complaints",
        "answers": [
            [
                "Handmade chocolate"
            ]
        ]
    },
    {
        "question": "Find the name and category of the most expensive product.",
        "query": "MATCH (products:`customer_complaints.Products`)\nRETURN products.product_name,products.product_category_code\nORDER BY products.product_price DESC\nLIMIT 1",
        "db_id": "customer_complaints",
        "answers": [
            [
                "Keyboard",
                "Hardware"
            ]
        ]
    },
    {
        "question": "What is the name and category code of the product with the highest price?",
        "query": "MATCH (products:`customer_complaints.Products`)\nRETURN products.product_name,products.product_category_code\nORDER BY products.product_price DESC\nLIMIT 1",
        "db_id": "customer_complaints",
        "answers": [
            [
                "Keyboard",
                "Hardware"
            ]
        ]
    },
    {
        "question": "Which complaint status has more than 3 records on file?",
        "query": "MATCH (complaints:`customer_complaints.Complaints`)\nWITH count(*) AS count, complaints.complaint_status_code AS complaint_status_code\nWHERE count  > 3\nRETURN complaint_status_code",
        "db_id": "customer_complaints",
        "answers": [
            [
                "New"
            ],
            [
                "Open"
            ]
        ]
    },
    {
        "question": "Return complaint status codes have more than 3 corresponding complaints?",
        "query": "MATCH (complaints:`customer_complaints.Complaints`)\nWITH count(*) AS count, complaints.complaint_status_code AS complaint_status_code\nWHERE count  > 3\nRETURN complaint_status_code",
        "db_id": "customer_complaints",
        "answers": [
            [
                "New"
            ],
            [
                "Open"
            ]
        ]
    },
    {
        "question": "How many distinct complaint type codes are there in the database?",
        "query": "MATCH (complaints:`customer_complaints.Complaints`)\nRETURN count(DISTINCT complaints.complaint_type_code)",
        "db_id": "customer_complaints",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "Count the number of different complaint type codes.",
        "query": "MATCH (complaints:`customer_complaints.Complaints`)\nRETURN count(DISTINCT complaints.complaint_type_code)",
        "db_id": "customer_complaints",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "Find the number of complaints with Product Failure type for each complaint status.",
        "query": "MATCH (complaints:`customer_complaints.Complaints`)\nWHERE complaints.complaint_type_code = 'Product Failure'\nWITH complaints.complaint_status_code AS complaint_status_code, count(complaints.complaint_status_code) AS count\nRETURN complaint_status_code,count",
        "db_id": "customer_complaints",
        "answers": [
            [
                "Closed",
                1
            ],
            [
                "Open",
                1
            ]
        ]
    },
    {
        "question": "Of complaints with the type code \"Product Failure\", how many had each different status code?",
        "query": "MATCH (complaints:`customer_complaints.Complaints`)\nWHERE complaints.complaint_type_code = 'Product Failure'\nWITH complaints.complaint_status_code AS complaint_status_code, count(complaints.complaint_status_code) AS count\nRETURN complaint_status_code,count",
        "db_id": "customer_complaints",
        "answers": [
            [
                "Closed",
                1
            ],
            [
                "Open",
                1
            ]
        ]
    },
    {
        "question": "How many submissions are there?",
        "query": "MATCH (submission:`workshop_paper.submission`)\nRETURN count(*)",
        "db_id": "workshop_paper",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "Count the number of submissions.",
        "query": "MATCH (submission:`workshop_paper.submission`)\nRETURN count(*)",
        "db_id": "workshop_paper",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "List the authors of submissions in ascending order of scores.",
        "query": "MATCH (submission:`workshop_paper.submission`)\nRETURN submission.Author\nORDER BY submission.Scores ASC",
        "db_id": "workshop_paper",
        "answers": [
            [
                "Steve Niehaus"
            ],
            [
                "Sherman Smith"
            ],
            [
                "Sammy Green"
            ],
            [
                "Steve Raible"
            ],
            [
                "Jeff Lloyd"
            ],
            [
                "Randy Johnson"
            ],
            [
                "Andy Bolton"
            ],
            [
                "Rick Engles"
            ],
            [
                "Don Bitterlich"
            ],
            [
                "Steve Myer"
            ]
        ]
    },
    {
        "question": "Find the author for each submission and list them in ascending order of submission score.",
        "query": "MATCH (submission:`workshop_paper.submission`)\nRETURN submission.Author\nORDER BY submission.Scores ASC",
        "db_id": "workshop_paper",
        "answers": [
            [
                "Steve Niehaus"
            ],
            [
                "Sherman Smith"
            ],
            [
                "Sammy Green"
            ],
            [
                "Steve Raible"
            ],
            [
                "Jeff Lloyd"
            ],
            [
                "Randy Johnson"
            ],
            [
                "Andy Bolton"
            ],
            [
                "Rick Engles"
            ],
            [
                "Don Bitterlich"
            ],
            [
                "Steve Myer"
            ]
        ]
    },
    {
        "question": "What are the authors of submissions and their colleges?",
        "query": "MATCH (submission:`workshop_paper.submission`)\nRETURN submission.Author,submission.College",
        "db_id": "workshop_paper",
        "answers": [
            [
                "Steve Niehaus",
                "Notre Dame"
            ],
            [
                "Sammy Green",
                "Florida"
            ],
            [
                "Sherman Smith",
                "Miami (OH)"
            ],
            [
                "Steve Raible",
                "Georgia Tech"
            ],
            [
                "Jeff Lloyd",
                "West Texas State"
            ],
            [
                "Rick Engles",
                "Tulsa"
            ],
            [
                "Don Bitterlich",
                "Temple"
            ],
            [
                "Steve Myer",
                "New Mexico"
            ],
            [
                "Randy Johnson",
                "Georgia"
            ],
            [
                "Andy Bolton",
                "Fisk"
            ]
        ]
    },
    {
        "question": "For each submission, show the author and their affiliated college.",
        "query": "MATCH (submission:`workshop_paper.submission`)\nRETURN submission.Author,submission.College",
        "db_id": "workshop_paper",
        "answers": [
            [
                "Steve Niehaus",
                "Notre Dame"
            ],
            [
                "Sammy Green",
                "Florida"
            ],
            [
                "Sherman Smith",
                "Miami (OH)"
            ],
            [
                "Steve Raible",
                "Georgia Tech"
            ],
            [
                "Jeff Lloyd",
                "West Texas State"
            ],
            [
                "Rick Engles",
                "Tulsa"
            ],
            [
                "Don Bitterlich",
                "Temple"
            ],
            [
                "Steve Myer",
                "New Mexico"
            ],
            [
                "Randy Johnson",
                "Georgia"
            ],
            [
                "Andy Bolton",
                "Fisk"
            ]
        ]
    },
    {
        "question": "Show the names of authors from college \"Florida\" or \"Temple\"",
        "query": "MATCH (submission:`workshop_paper.submission`)\nWHERE submission.College = 'Florida' OR submission.College = 'Temple'\nRETURN submission.Author",
        "db_id": "workshop_paper",
        "answers": [
            [
                "Sammy Green"
            ],
            [
                "Don Bitterlich"
            ]
        ]
    },
    {
        "question": "Which authors with submissions are from college \"Florida\" or \"Temple\"?",
        "query": "MATCH (submission:`workshop_paper.submission`)\nWHERE submission.College = 'Florida' OR submission.College = 'Temple'\nRETURN submission.Author",
        "db_id": "workshop_paper",
        "answers": [
            [
                "Sammy Green"
            ],
            [
                "Don Bitterlich"
            ]
        ]
    },
    {
        "question": "What is the author of the submission with the highest score?",
        "query": "MATCH (submission:`workshop_paper.submission`)\nRETURN submission.Author\nORDER BY submission.Scores DESC\nLIMIT 1",
        "db_id": "workshop_paper",
        "answers": [
            [
                "Steve Myer"
            ]
        ]
    },
    {
        "question": "Find the author who achieved the highest score in a submission.",
        "query": "MATCH (submission:`workshop_paper.submission`)\nRETURN submission.Author\nORDER BY submission.Scores DESC\nLIMIT 1",
        "db_id": "workshop_paper",
        "answers": [
            [
                "Steve Myer"
            ]
        ]
    },
    {
        "question": "Show different colleges along with the number of authors of submission from each college.",
        "query": "MATCH (submission:`workshop_paper.submission`)\nWITH count(submission.College) AS count, submission.College AS College\nRETURN College,count",
        "db_id": "workshop_paper",
        "answers": [
            [
                "Notre Dame",
                1
            ],
            [
                "Florida",
                1
            ],
            [
                "Miami (OH)",
                1
            ],
            [
                "Georgia Tech",
                1
            ],
            [
                "West Texas State",
                1
            ],
            [
                "Tulsa",
                1
            ],
            [
                "Temple",
                1
            ],
            [
                "New Mexico",
                1
            ],
            [
                "Georgia",
                1
            ],
            [
                "Fisk",
                1
            ]
        ]
    },
    {
        "question": "For each college, return the college name and the count of authors with submissions from that college.",
        "query": "MATCH (submission:`workshop_paper.submission`)\nWITH count(submission.College) AS count, submission.College AS College\nRETURN College,count",
        "db_id": "workshop_paper",
        "answers": [
            [
                "Notre Dame",
                1
            ],
            [
                "Florida",
                1
            ],
            [
                "Miami (OH)",
                1
            ],
            [
                "Georgia Tech",
                1
            ],
            [
                "West Texas State",
                1
            ],
            [
                "Tulsa",
                1
            ],
            [
                "Temple",
                1
            ],
            [
                "New Mexico",
                1
            ],
            [
                "Georgia",
                1
            ],
            [
                "Fisk",
                1
            ]
        ]
    },
    {
        "question": "Show the authors of submissions and the acceptance results of their submissions.",
        "query": "MATCH ()-[T1:`workshop_paper.Acceptance`]-(T2:`workshop_paper.submission`)\nRETURN T2.Author,T1.Result",
        "db_id": "workshop_paper",
        "answers": [
            [
                "Steve Niehaus",
                "Accepted"
            ],
            [
                "Sammy Green",
                "Rejected"
            ],
            [
                "Sammy Green",
                "Accepted"
            ],
            [
                "Sherman Smith",
                "Rejected"
            ],
            [
                "Steve Raible",
                "Rejected"
            ],
            [
                "Jeff Lloyd",
                "Rejected"
            ]
        ]
    },
    {
        "question": "For each submission, find its author and acceptance result.",
        "query": "MATCH ()-[T1:`workshop_paper.Acceptance`]-(T2:`workshop_paper.submission`)\nRETURN T2.Author,T1.Result",
        "db_id": "workshop_paper",
        "answers": [
            [
                "Steve Niehaus",
                "Accepted"
            ],
            [
                "Sammy Green",
                "Rejected"
            ],
            [
                "Sammy Green",
                "Accepted"
            ],
            [
                "Sherman Smith",
                "Rejected"
            ],
            [
                "Steve Raible",
                "Rejected"
            ],
            [
                "Jeff Lloyd",
                "Rejected"
            ]
        ]
    },
    {
        "question": "Show the result of the submission with the highest score.",
        "query": "MATCH ()-[T1:`workshop_paper.Acceptance`]-(T2:`workshop_paper.submission`)\nRETURN T1.Result\nORDER BY T2.Scores DESC\nLIMIT 1",
        "db_id": "workshop_paper",
        "answers": [
            [
                "Rejected"
            ]
        ]
    },
    {
        "question": "Which submission received the highest score in acceptance result. Show me the result.",
        "query": "MATCH ()-[T1:`workshop_paper.Acceptance`]-(T2:`workshop_paper.submission`)\nRETURN T1.Result\nORDER BY T2.Scores DESC\nLIMIT 1",
        "db_id": "workshop_paper",
        "answers": [
            [
                "Rejected"
            ]
        ]
    },
    {
        "question": "List the authors who do not have submission to any workshop.",
        "query": "MATCH (submission:`workshop_paper.submission`)\nWHERE NOT (submission:`workshop_paper.submission`)-[:`workshop_paper.Acceptance`]-()\nRETURN submission.Author",
        "db_id": "workshop_paper",
        "answers": [
            [
                "Rick Engles"
            ],
            [
                "Don Bitterlich"
            ],
            [
                "Steve Myer"
            ],
            [
                "Randy Johnson"
            ],
            [
                "Andy Bolton"
            ]
        ]
    },
    {
        "question": "Which authors did not submit to any workshop?",
        "query": "MATCH (submission:`workshop_paper.submission`)\nWHERE NOT (submission:`workshop_paper.submission`)-[:`workshop_paper.Acceptance`]-()\nRETURN submission.Author",
        "db_id": "workshop_paper",
        "answers": [
            [
                "Rick Engles"
            ],
            [
                "Don Bitterlich"
            ],
            [
                "Steve Myer"
            ],
            [
                "Randy Johnson"
            ],
            [
                "Andy Bolton"
            ]
        ]
    },
    {
        "question": "Find the number of investors in total.",
        "query": "MATCH (investors:`tracking_share_transactions.Investors`)\nRETURN count(*)",
        "db_id": "tracking_share_transactions",
        "answers": [
            [
                20
            ]
        ]
    },
    {
        "question": "Show all investor details.",
        "query": "MATCH (investors:`tracking_share_transactions.Investors`)\nRETURN investors.Investor_details",
        "db_id": "tracking_share_transactions",
        "answers": [
            [
                "z"
            ],
            [
                "z"
            ],
            [
                "d"
            ],
            [
                "d"
            ],
            [
                "b"
            ],
            [
                "k"
            ],
            [
                "l"
            ],
            [
                "t"
            ],
            [
                "y"
            ],
            [
                "r"
            ],
            [
                "q"
            ],
            [
                "c"
            ],
            [
                "o"
            ],
            [
                "w"
            ],
            [
                "i"
            ],
            [
                "y"
            ],
            [
                "k"
            ],
            [
                "w"
            ],
            [
                "l"
            ],
            [
                "j"
            ]
        ]
    },
    {
        "question": "Show all distinct lot details.",
        "query": "MATCH (lots:`tracking_share_transactions.Lots`)\nRETURN DISTINCT lots.lot_details",
        "db_id": "tracking_share_transactions",
        "answers": [
            [
                "r"
            ],
            [
                "z"
            ],
            [
                "s"
            ],
            [
                "q"
            ],
            [
                "d"
            ],
            [
                "m"
            ],
            [
                "h"
            ],
            [
                "x"
            ]
        ]
    },
    {
        "question": "Show the maximum amount of transaction.",
        "query": "MATCH (transactions:`tracking_share_transactions.Transactions`)\nRETURN max(transactions.amount_of_transaction)",
        "db_id": "tracking_share_transactions",
        "answers": [
            [
                207484122.2796
            ]
        ]
    },
    {
        "question": "Show all date and share count of transactions.",
        "query": "MATCH (transactions:`tracking_share_transactions.Transactions`)\nRETURN transactions.date_of_transaction,transactions.share_count",
        "db_id": "tracking_share_transactions",
        "answers": [
            [
                "1988-09-16 19:02:51",
                "8718572"
            ],
            [
                "1982-06-06 17:19:00",
                "9"
            ],
            [
                "1979-04-27 06:03:59",
                "8580"
            ],
            [
                "2001-11-28 15:06:25",
                "8040"
            ],
            [
                "1977-08-17 13:13:30",
                "930"
            ],
            [
                "1985-10-08 13:13:39",
                "2751"
            ],
            [
                "1990-12-02 09:03:38",
                "1522"
            ],
            [
                "2004-01-18 20:37:50",
                "96178"
            ],
            [
                "1977-08-13 02:18:47",
                ""
            ],
            [
                "1981-01-28 08:07:03",
                "1654756"
            ],
            [
                "2000-04-03 20:55:43",
                "674529892"
            ],
            [
                "1983-11-01 17:57:27",
                "587"
            ],
            [
                "2002-04-07 20:28:37",
                ""
            ],
            [
                "2002-09-13 03:04:56",
                "630021"
            ],
            [
                "1997-12-30 05:05:40",
                "93191"
            ]
        ]
    },
    {
        "question": "Show all transaction ids with transaction code 'PUR'.",
        "query": "MATCH (transactions:`tracking_share_transactions.Transactions`)\nWHERE transactions.transaction_type_code = 'PUR'\nRETURN transactions.transaction_id",
        "db_id": "tracking_share_transactions",
        "answers": [
            [
                2
            ],
            [
                4
            ],
            [
                5
            ],
            [
                6
            ],
            [
                7
            ],
            [
                9
            ],
            [
                14
            ],
            [
                15
            ]
        ]
    },
    {
        "question": "Show all dates of transactions whose type code is \"SALE\".",
        "query": "MATCH (transactions:`tracking_share_transactions.Transactions`)\nWHERE transactions.transaction_type_code = 'SALE'\nRETURN transactions.date_of_transaction",
        "db_id": "tracking_share_transactions",
        "answers": [
            [
                "1988-09-16 19:02:51"
            ],
            [
                "1979-04-27 06:03:59"
            ],
            [
                "2004-01-18 20:37:50"
            ],
            [
                "1981-01-28 08:07:03"
            ],
            [
                "2000-04-03 20:55:43"
            ],
            [
                "1983-11-01 17:57:27"
            ],
            [
                "2002-04-07 20:28:37"
            ]
        ]
    },
    {
        "question": "Show the average amount of transactions with type code \"SALE\".",
        "query": "MATCH (transactions:`tracking_share_transactions.Transactions`)\nWHERE transactions.transaction_type_code = 'SALE'\nRETURN avg(transactions.amount_of_transaction)",
        "db_id": "tracking_share_transactions",
        "answers": [
            [
                11198167.237771427
            ]
        ]
    },
    {
        "question": "Show the description of transaction type with code \"PUR\".",
        "query": "MATCH (ref_transaction_types:`tracking_share_transactions.Ref_Transaction_Types`)\nWHERE ref_transaction_types.transaction_type_code = 'PUR'\nRETURN ref_transaction_types.transaction_type_description",
        "db_id": "tracking_share_transactions",
        "answers": [
            [
                "Purchase"
            ]
        ]
    },
    {
        "question": "Show the maximum share count of transactions where the amount is smaller than 10000",
        "query": "MATCH (transactions:`tracking_share_transactions.Transactions`)\nWHERE transactions.amount_of_transaction < 10000\nRETURN max(transactions.share_count)",
        "db_id": "tracking_share_transactions",
        "answers": [
            [
                "93191"
            ]
        ]
    },
    {
        "question": "Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.",
        "query": "MATCH (transactions:`tracking_share_transactions.Transactions`)\nWHERE transactions.share_count > 100 OR transactions.amount_of_transaction > 1000\nRETURN transactions.date_of_transaction",
        "db_id": "tracking_share_transactions",
        "answers": [
            [
                "1988-09-16 19:02:51"
            ],
            [
                "1979-04-27 06:03:59"
            ],
            [
                "1985-10-08 13:13:39"
            ],
            [
                "2004-01-18 20:37:50"
            ],
            [
                "1977-08-13 02:18:47"
            ]
        ]
    },
    {
        "question": "How many distinct transaction types are used in the transactions?",
        "query": "MATCH (transactions:`tracking_share_transactions.Transactions`)\nRETURN count(DISTINCT transactions.transaction_type_code)",
        "db_id": "tracking_share_transactions",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "Return the lot details and investor ids.",
        "query": "MATCH (lots:`tracking_share_transactions.Lots`)\nRETURN lots.lot_details,lots.investor_id",
        "db_id": "tracking_share_transactions",
        "answers": [
            [
                "r",
                13
            ],
            [
                "z",
                16
            ],
            [
                "s",
                10
            ],
            [
                "s",
                19
            ],
            [
                "q",
                6
            ],
            [
                "d",
                20
            ],
            [
                "m",
                7
            ],
            [
                "h",
                7
            ],
            [
                "z",
                20
            ],
            [
                "x",
                9
            ],
            [
                "d",
                1
            ],
            [
                "m",
                19
            ],
            [
                "z",
                7
            ],
            [
                "d",
                6
            ],
            [
                "h",
                1
            ]
        ]
    },
    {
        "question": "Return the lot details of lots that belong to investors with details \"l\"?",
        "query": "MATCH (T1:`tracking_share_transactions.Investors`)-[]-(T2:`tracking_share_transactions.Lots`)\nWHERE T1.Investor_details = 'l'\nRETURN T2.lot_details",
        "db_id": "tracking_share_transactions",
        "answers": [
            [
                "h"
            ],
            [
                "z"
            ],
            [
                "m"
            ],
            [
                "m"
            ],
            [
                "s"
            ]
        ]
    },
    {
        "question": "What are the purchase details of transactions with amount bigger than 10000?",
        "query": "MATCH (T1:`tracking_share_transactions.Purchases`)-[]-(T2:`tracking_share_transactions.Transactions`)\nWHERE T2.amount_of_transaction > 10000\nRETURN T1.purchase_details",
        "db_id": "tracking_share_transactions",
        "answers": [
            [
                "c"
            ],
            [
                "i"
            ],
            [
                "a"
            ],
            [
                "a"
            ],
            [
                "r"
            ]
        ]
    },
    {
        "question": "What are the sale details and dates of transactions with amount smaller than 3000?",
        "query": "MATCH (T1:`tracking_share_transactions.Sales`)-[]-(T2:`tracking_share_transactions.Transactions`)\nWHERE T2.amount_of_transaction < 3000\nRETURN T1.sales_details,T2.date_of_transaction",
        "db_id": "tracking_share_transactions",
        "answers": [
            [
                "o",
                "1982-06-06 17:19:00"
            ],
            [
                "f",
                "2001-11-28 15:06:25"
            ],
            [
                "y",
                "1977-08-17 13:13:30"
            ],
            [
                "p",
                "1990-12-02 09:03:38"
            ],
            [
                "s",
                "1981-01-28 08:07:03"
            ],
            [
                "s",
                "2000-04-03 20:55:43"
            ],
            [
                "t",
                "1983-11-01 17:57:27"
            ],
            [
                "p",
                "2002-04-07 20:28:37"
            ],
            [
                "n",
                "2002-09-13 03:04:56"
            ],
            [
                "e",
                "1997-12-30 05:05:40"
            ]
        ]
    },
    {
        "question": "Show the number of transactions with transaction type code \"SALE\" for different investors if it is larger than 0.",
        "query": "MATCH (transactions:`tracking_share_transactions.Transactions`)\nWHERE transactions.transaction_type_code = 'SALE'\nWITH transactions.investor_id AS investor_id, count(transactions.investor_id) AS count\nRETURN investor_id,count",
        "db_id": "tracking_share_transactions",
        "answers": [
            [
                6,
                1
            ],
            [
                2,
                2
            ],
            [
                17,
                1
            ],
            [
                3,
                2
            ],
            [
                18,
                1
            ]
        ]
    },
    {
        "question": "Show the number of transactions for different investors.",
        "query": "MATCH (transactions:`tracking_share_transactions.Transactions`)\nWITH transactions.investor_id AS investor_id, count(transactions.investor_id) AS count\nRETURN investor_id,count",
        "db_id": "tracking_share_transactions",
        "answers": [
            [
                6,
                1
            ],
            [
                18,
                2
            ],
            [
                2,
                2
            ],
            [
                14,
                1
            ],
            [
                8,
                1
            ],
            [
                19,
                2
            ],
            [
                7,
                1
            ],
            [
                17,
                1
            ],
            [
                20,
                1
            ],
            [
                3,
                3
            ]
        ]
    },
    {
        "question": "Show the transaction type code that occurs the fewest times.",
        "query": "MATCH (transactions:`tracking_share_transactions.Transactions`)\nWITH count(transactions.transaction_type_code) AS count, transactions.transaction_type_code AS transaction_type_code\nRETURN transaction_type_code\nORDER BY count ASC\nLIMIT 1",
        "db_id": "tracking_share_transactions",
        "answers": [
            [
                "SALE"
            ]
        ]
    },
    {
        "question": "Show the transaction type code that occurs the most frequently.",
        "query": "MATCH (transactions:`tracking_share_transactions.Transactions`)\nWITH count(transactions.transaction_type_code) AS count, transactions.transaction_type_code AS transaction_type_code\nRETURN transaction_type_code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "tracking_share_transactions",
        "answers": [
            [
                "PUR"
            ]
        ]
    },
    {
        "question": "What are the dates of transactions with at least 100 share count or amount bigger than 100?",
        "query": "MATCH (transactions:`tracking_share_transactions.Transactions`)\nWHERE transactions.share_count >= 100 OR transactions.amount_of_transaction >= 100\nRETURN transactions.date_of_transaction",
        "db_id": "tracking_share_transactions",
        "answers": [
            [
                "1988-09-16 19:02:51"
            ],
            [
                "1979-04-27 06:03:59"
            ],
            [
                "1985-10-08 13:13:39"
            ],
            [
                "1990-12-02 09:03:38"
            ],
            [
                "2004-01-18 20:37:50"
            ],
            [
                "1977-08-13 02:18:47"
            ],
            [
                "2002-04-07 20:28:37"
            ]
        ]
    },
    {
        "question": "How many available hotels are there in total?",
        "query": "MATCH (hotels:`cre_Theme_park.Hotels`)\nRETURN count(*)",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                20
            ]
        ]
    },
    {
        "question": "Find the total number of available hotels.",
        "query": "MATCH (hotels:`cre_Theme_park.Hotels`)\nRETURN count(*)",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                20
            ]
        ]
    },
    {
        "question": "Show all distinct location names.",
        "query": "MATCH (locations:`cre_Theme_park.Locations`)\nRETURN DISTINCT locations.Location_Name",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "Astro Orbiter"
            ],
            [
                "African Animals"
            ],
            [
                "American Adventure"
            ],
            [
                "The Barnstormer"
            ],
            [
                "African Adventure"
            ],
            [
                "UK Gallery"
            ],
            [
                "The Boneyard"
            ],
            [
                "Shark World"
            ],
            [
                "Space Spin"
            ],
            [
                "Butterflies"
            ],
            [
                "Soak Station"
            ],
            [
                "Castle"
            ],
            [
                "Coral Reefs"
            ],
            [
                "Film Festival"
            ],
            [
                "Fossil Fun Games"
            ]
        ]
    },
    {
        "question": "What are the distinct location names?",
        "query": "MATCH (locations:`cre_Theme_park.Locations`)\nRETURN DISTINCT locations.Location_Name",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "Astro Orbiter"
            ],
            [
                "African Animals"
            ],
            [
                "American Adventure"
            ],
            [
                "The Barnstormer"
            ],
            [
                "African Adventure"
            ],
            [
                "UK Gallery"
            ],
            [
                "The Boneyard"
            ],
            [
                "Shark World"
            ],
            [
                "Space Spin"
            ],
            [
                "Butterflies"
            ],
            [
                "Soak Station"
            ],
            [
                "Castle"
            ],
            [
                "Coral Reefs"
            ],
            [
                "Film Festival"
            ],
            [
                "Fossil Fun Games"
            ]
        ]
    },
    {
        "question": "Show the names and details of all the staff members.",
        "query": "MATCH (staff:`cre_Theme_park.Staff`)\nRETURN staff.Name,staff.Other_Details",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "Whitney",
                null
            ],
            [
                "Kaela",
                null
            ],
            [
                "Eunice",
                null
            ],
            [
                "Kiarra",
                null
            ],
            [
                "Phoebe",
                null
            ],
            [
                "Vickie",
                null
            ],
            [
                "Jannie",
                null
            ],
            [
                "Lenore",
                null
            ],
            [
                "Asia",
                null
            ],
            [
                "Janet",
                null
            ],
            [
                "Elouise",
                null
            ],
            [
                "Gina",
                null
            ],
            [
                "Beth",
                null
            ],
            [
                "Ruthie",
                null
            ],
            [
                "Aurore",
                null
            ],
            [
                "Cortney",
                null
            ],
            [
                "Astrid",
                null
            ],
            [
                "Shemar",
                null
            ],
            [
                "Trinity",
                null
            ],
            [
                "Carmella",
                null
            ]
        ]
    },
    {
        "question": "What is the name and detail of each staff member?",
        "query": "MATCH (staff:`cre_Theme_park.Staff`)\nRETURN staff.Name,staff.Other_Details",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "Whitney",
                null
            ],
            [
                "Kaela",
                null
            ],
            [
                "Eunice",
                null
            ],
            [
                "Kiarra",
                null
            ],
            [
                "Phoebe",
                null
            ],
            [
                "Vickie",
                null
            ],
            [
                "Jannie",
                null
            ],
            [
                "Lenore",
                null
            ],
            [
                "Asia",
                null
            ],
            [
                "Janet",
                null
            ],
            [
                "Elouise",
                null
            ],
            [
                "Gina",
                null
            ],
            [
                "Beth",
                null
            ],
            [
                "Ruthie",
                null
            ],
            [
                "Aurore",
                null
            ],
            [
                "Cortney",
                null
            ],
            [
                "Astrid",
                null
            ],
            [
                "Shemar",
                null
            ],
            [
                "Trinity",
                null
            ],
            [
                "Carmella",
                null
            ]
        ]
    },
    {
        "question": "Show details of all visitors.",
        "query": "MATCH (visitors:`cre_Theme_park.Visitors`)\nRETURN visitors.Tourist_Details",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "Toney"
            ],
            [
                "Graciela"
            ],
            [
                "Vincent"
            ],
            [
                "Vivian"
            ],
            [
                "Nettie"
            ],
            [
                "Laurence"
            ],
            [
                "Newell"
            ],
            [
                "Marisol"
            ],
            [
                "Jarrell"
            ],
            [
                "Edna"
            ],
            [
                "Maud"
            ],
            [
                "Alison"
            ],
            [
                "Rosalind"
            ],
            [
                "Tevin"
            ],
            [
                "Aleen"
            ],
            [
                "Marcelle"
            ],
            [
                "Lizzie"
            ],
            [
                "Wayne"
            ],
            [
                "Teresa"
            ],
            [
                "Elnora"
            ]
        ]
    },
    {
        "question": "What is the detail of each visitor?",
        "query": "MATCH (visitors:`cre_Theme_park.Visitors`)\nRETURN visitors.Tourist_Details",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "Toney"
            ],
            [
                "Graciela"
            ],
            [
                "Vincent"
            ],
            [
                "Vivian"
            ],
            [
                "Nettie"
            ],
            [
                "Laurence"
            ],
            [
                "Newell"
            ],
            [
                "Marisol"
            ],
            [
                "Jarrell"
            ],
            [
                "Edna"
            ],
            [
                "Maud"
            ],
            [
                "Alison"
            ],
            [
                "Rosalind"
            ],
            [
                "Tevin"
            ],
            [
                "Aleen"
            ],
            [
                "Marcelle"
            ],
            [
                "Lizzie"
            ],
            [
                "Wayne"
            ],
            [
                "Teresa"
            ],
            [
                "Elnora"
            ]
        ]
    },
    {
        "question": "What is the address of the location \"UK Gallery\"?",
        "query": "MATCH (locations:`cre_Theme_park.Locations`)\nWHERE locations.Location_Name = 'UK Gallery'\nRETURN locations.Address",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "4411 Sabrina Radial Suite 582"
            ]
        ]
    },
    {
        "question": "Find the address of the location named \"UK Gallery\".",
        "query": "MATCH (locations:`cre_Theme_park.Locations`)\nWHERE locations.Location_Name = 'UK Gallery'\nRETURN locations.Address",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "4411 Sabrina Radial Suite 582"
            ]
        ]
    },
    {
        "question": "What is the detail of the location UK Gallery?",
        "query": "MATCH (locations:`cre_Theme_park.Locations`)\nWHERE locations.Location_Name = 'UK Gallery'\nRETURN locations.Other_Details",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                null
            ]
        ]
    },
    {
        "question": "Return the detail of the location named \"UK Gallery\".",
        "query": "MATCH (locations:`cre_Theme_park.Locations`)\nWHERE locations.Location_Name = 'UK Gallery'\nRETURN locations.Other_Details",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                null
            ]
        ]
    },
    {
        "question": "How many distinct names are associated with all the photos?",
        "query": "MATCH (photos:`cre_Theme_park.Photos`)\nRETURN count(DISTINCT photos.Name)",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Count the number of distinct names associated with the photos.",
        "query": "MATCH (photos:`cre_Theme_park.Photos`)\nRETURN count(DISTINCT photos.Name)",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "What are the distinct visit dates?",
        "query": "MATCH (visits:`cre_Theme_park.Visits`)\nRETURN DISTINCT visits.Visit_Date",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "2004-08-21 03:06:14"
            ],
            [
                "2013-08-06 05:35:51"
            ],
            [
                "2013-10-27 09:56:08"
            ],
            [
                "1990-08-15 14:24:10"
            ],
            [
                "1980-11-26 02:08:00"
            ],
            [
                "2017-03-19 08:48:19"
            ],
            [
                "2008-11-09 01:28:01"
            ],
            [
                "1989-08-24 20:26:37"
            ],
            [
                "1993-02-01 15:27:20"
            ],
            [
                "2007-09-17 10:12:45"
            ],
            [
                "1998-05-12 00:50:20"
            ],
            [
                "2010-10-04 01:34:12"
            ],
            [
                "2018-01-09 20:39:52"
            ],
            [
                "1971-12-16 06:41:26"
            ],
            [
                "1998-12-10 02:46:43"
            ],
            [
                "1996-01-08 13:23:41"
            ],
            [
                "2007-09-03 04:30:01"
            ],
            [
                "1974-12-31 23:18:24"
            ],
            [
                "2001-11-13 10:08:28"
            ],
            [
                "1990-11-12 00:54:50"
            ]
        ]
    },
    {
        "question": "Find all the distinct visit dates.",
        "query": "MATCH (visits:`cre_Theme_park.Visits`)\nRETURN DISTINCT visits.Visit_Date",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "2004-08-21 03:06:14"
            ],
            [
                "2013-08-06 05:35:51"
            ],
            [
                "2013-10-27 09:56:08"
            ],
            [
                "1990-08-15 14:24:10"
            ],
            [
                "1980-11-26 02:08:00"
            ],
            [
                "2017-03-19 08:48:19"
            ],
            [
                "2008-11-09 01:28:01"
            ],
            [
                "1989-08-24 20:26:37"
            ],
            [
                "1993-02-01 15:27:20"
            ],
            [
                "2007-09-17 10:12:45"
            ],
            [
                "1998-05-12 00:50:20"
            ],
            [
                "2010-10-04 01:34:12"
            ],
            [
                "2018-01-09 20:39:52"
            ],
            [
                "1971-12-16 06:41:26"
            ],
            [
                "1998-12-10 02:46:43"
            ],
            [
                "1996-01-08 13:23:41"
            ],
            [
                "2007-09-03 04:30:01"
            ],
            [
                "1974-12-31 23:18:24"
            ],
            [
                "2001-11-13 10:08:28"
            ],
            [
                "1990-11-12 00:54:50"
            ]
        ]
    },
    {
        "question": "What are the names of the tourist attractions that can be accessed by bus?",
        "query": "MATCH (tourist_attractions:`cre_Theme_park.Tourist_Attractions`)\nWHERE tourist_attractions.How_to_Get_There = 'bus'\nRETURN tourist_attractions.Name",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "art museum"
            ],
            [
                "film festival"
            ],
            [
                "haunted mansion"
            ],
            [
                "impressions de France"
            ],
            [
                "jungle cruise"
            ],
            [
                "cafe"
            ]
        ]
    },
    {
        "question": "Which tourist attractions can we get to by bus? Tell me the names of the attractions.",
        "query": "MATCH (tourist_attractions:`cre_Theme_park.Tourist_Attractions`)\nWHERE tourist_attractions.How_to_Get_There = 'bus'\nRETURN tourist_attractions.Name",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "art museum"
            ],
            [
                "film festival"
            ],
            [
                "haunted mansion"
            ],
            [
                "impressions de France"
            ],
            [
                "jungle cruise"
            ],
            [
                "cafe"
            ]
        ]
    },
    {
        "question": "What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?",
        "query": "MATCH (tourist_attractions:`cre_Theme_park.Tourist_Attractions`)\nWHERE tourist_attractions.How_to_Get_There = 'bus' OR tourist_attractions.How_to_Get_There = 'walk'\nRETURN tourist_attractions.Name,tourist_attractions.Opening_Hours",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "art museum",
                null
            ],
            [
                "UK gallery",
                null
            ],
            [
                "film festival",
                null
            ],
            [
                "fun games",
                null
            ],
            [
                "history gallery",
                null
            ],
            [
                "exploration trial",
                null
            ],
            [
                "haunted mansion",
                null
            ],
            [
                "presidents hall",
                null
            ],
            [
                "impressions de France",
                null
            ],
            [
                "jungle cruise",
                null
            ],
            [
                "cafe",
                null
            ]
        ]
    },
    {
        "question": "Find the names and opening hours of the tourist attractions that we get to by bus or walk.",
        "query": "MATCH (tourist_attractions:`cre_Theme_park.Tourist_Attractions`)\nWHERE tourist_attractions.How_to_Get_There = 'bus' OR tourist_attractions.How_to_Get_There = 'walk'\nRETURN tourist_attractions.Name,tourist_attractions.Opening_Hours",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "art museum",
                null
            ],
            [
                "UK gallery",
                null
            ],
            [
                "film festival",
                null
            ],
            [
                "fun games",
                null
            ],
            [
                "history gallery",
                null
            ],
            [
                "exploration trial",
                null
            ],
            [
                "haunted mansion",
                null
            ],
            [
                "presidents hall",
                null
            ],
            [
                "impressions de France",
                null
            ],
            [
                "jungle cruise",
                null
            ],
            [
                "cafe",
                null
            ]
        ]
    },
    {
        "question": "What are the star rating descriptions of the hotels with price above 10000?",
        "query": "MATCH (T1:`cre_Theme_park.Hotels`)-[]-(T2:`cre_Theme_park.Ref_Hotel_Star_Ratings`)\nWHERE T1.price_range > 10000\nRETURN T2.star_rating_description",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ]
        ]
    },
    {
        "question": "Give me the star rating descriptions of the hotels that cost more than 10000.",
        "query": "MATCH (T1:`cre_Theme_park.Hotels`)-[]-(T2:`cre_Theme_park.Ref_Hotel_Star_Ratings`)\nWHERE T1.price_range > 10000\nRETURN T2.star_rating_description",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ],
            [
                "star"
            ]
        ]
    },
    {
        "question": "What are the details and opening hours of the museums?",
        "query": "MATCH (T1:`cre_Theme_park.Museums`)-[]-(T2:`cre_Theme_park.Tourist_Attractions`)\nRETURN T1.Museum_Details,T2.Opening_Hours",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "Yale Center for British Art",
                null
            ],
            [
                "The Metropolitan Museum of Art",
                null
            ],
            [
                "MoMA",
                null
            ]
        ]
    },
    {
        "question": "Give me the detail and opening hour for each museum.",
        "query": "MATCH (T1:`cre_Theme_park.Museums`)-[]-(T2:`cre_Theme_park.Tourist_Attractions`)\nRETURN T1.Museum_Details,T2.Opening_Hours",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "Yale Center for British Art",
                null
            ],
            [
                "The Metropolitan Museum of Art",
                null
            ],
            [
                "MoMA",
                null
            ]
        ]
    },
    {
        "question": "What is the name of the tourist attraction that is associated with the photo \"game1\"?",
        "query": "MATCH (T1:`cre_Theme_park.Photos`)-[]-(T2:`cre_Theme_park.Tourist_Attractions`)\nWHERE T1.Name = 'game1'\nRETURN T2.Name",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "impressions de France"
            ]
        ]
    },
    {
        "question": "Which tourist attraction is associated with the photo \"game1\"? Return its name.",
        "query": "MATCH (T1:`cre_Theme_park.Photos`)-[]-(T2:`cre_Theme_park.Tourist_Attractions`)\nWHERE T1.Name = 'game1'\nRETURN T2.Name",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "impressions de France"
            ]
        ]
    },
    {
        "question": "What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?",
        "query": "MATCH (T1:`cre_Theme_park.Photos`)-[]-(T2:`cre_Theme_park.Tourist_Attractions`)\nWHERE T2.Name = 'film festival'\nRETURN T1.Name,T1.Description",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "park1",
                null
            ]
        ]
    },
    {
        "question": "Find the names and descriptions of the photos taken at the tourist attraction called \"film festival\".",
        "query": "MATCH (T1:`cre_Theme_park.Photos`)-[]-(T2:`cre_Theme_park.Tourist_Attractions`)\nWHERE T2.Name = 'film festival'\nRETURN T1.Name,T1.Description",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "park1",
                null
            ]
        ]
    },
    {
        "question": "What are the details of the shops that can be accessed by walk?",
        "query": "MATCH (T1:`cre_Theme_park.Shops`)-[]-(T2:`cre_Theme_park.Tourist_Attractions`)\nWHERE T2.How_to_Get_There = 'walk'\nRETURN T1.Shop_Details",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "soup"
            ]
        ]
    },
    {
        "question": "Find the details of the shops that can be reached by walk.",
        "query": "MATCH (T1:`cre_Theme_park.Shops`)-[]-(T2:`cre_Theme_park.Tourist_Attractions`)\nWHERE T2.How_to_Get_There = 'walk'\nRETURN T1.Shop_Details",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "soup"
            ]
        ]
    },
    {
        "question": "What is the name of the staff that is in charge of the attraction named \"US museum\"?",
        "query": "MATCH (T1:`cre_Theme_park.Staff`)-[]-(T2:`cre_Theme_park.Tourist_Attractions`)\nWHERE T2.Name = 'US museum'\nRETURN T1.Name",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "Kaela"
            ],
            [
                "Whitney"
            ],
            [
                "Trinity"
            ]
        ]
    },
    {
        "question": "Tell me the name of the staff in charge of the attraction called \"US museum\".",
        "query": "MATCH (T1:`cre_Theme_park.Staff`)-[]-(T2:`cre_Theme_park.Tourist_Attractions`)\nWHERE T2.Name = 'US museum'\nRETURN T1.Name",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "Kaela"
            ],
            [
                "Whitney"
            ],
            [
                "Trinity"
            ]
        ]
    },
    {
        "question": "What are the details of the markets that can be accessed by walk or bus?",
        "query": "MATCH (T1:`cre_Theme_park.Street_Markets`)-[]-(T2:`cre_Theme_park.Tourist_Attractions`)\nWHERE T2.How_to_Get_There = 'walk' OR T2.How_to_Get_There = 'bus'\nRETURN T1.Market_Details",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "Broadway"
            ],
            [
                "Fish Farm Market"
            ]
        ]
    },
    {
        "question": "Find the details of all the markets that are accessible by walk or bus.",
        "query": "MATCH (T1:`cre_Theme_park.Street_Markets`)-[]-(T2:`cre_Theme_park.Tourist_Attractions`)\nWHERE T2.How_to_Get_There = 'walk' OR T2.How_to_Get_There = 'bus'\nRETURN T1.Market_Details",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "Broadway"
            ],
            [
                "Fish Farm Market"
            ]
        ]
    },
    {
        "question": "Show the id and star rating of each hotel, ordered by its price from low to high.",
        "query": "MATCH (hotels:`cre_Theme_park.Hotels`)\nRETURN hotels.hotel_id,hotels.star_rating_code\nORDER BY hotels.price_range ASC",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                144,
                "4"
            ],
            [
                222,
                "5"
            ],
            [
                239,
                "3"
            ],
            [
                331,
                "1"
            ],
            [
                350,
                "1"
            ],
            [
                376,
                "2"
            ],
            [
                431,
                "2"
            ],
            [
                426,
                "5"
            ],
            [
                473,
                "1"
            ],
            [
                555,
                "5"
            ],
            [
                420,
                "5"
            ],
            [
                172,
                "5"
            ],
            [
                264,
                "1"
            ],
            [
                442,
                "2"
            ],
            [
                514,
                "5"
            ],
            [
                123,
                "5"
            ],
            [
                421,
                "3"
            ],
            [
                379,
                "4"
            ],
            [
                373,
                "5"
            ],
            [
                314,
                "5"
            ]
        ]
    },
    {
        "question": "Find the id and star rating of each hotel and sort them in increasing order of price.",
        "query": "MATCH (hotels:`cre_Theme_park.Hotels`)\nRETURN hotels.hotel_id,hotels.star_rating_code\nORDER BY hotels.price_range ASC",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                144,
                "4"
            ],
            [
                222,
                "5"
            ],
            [
                239,
                "3"
            ],
            [
                331,
                "1"
            ],
            [
                350,
                "1"
            ],
            [
                376,
                "2"
            ],
            [
                431,
                "2"
            ],
            [
                426,
                "5"
            ],
            [
                473,
                "1"
            ],
            [
                555,
                "5"
            ],
            [
                420,
                "5"
            ],
            [
                172,
                "5"
            ],
            [
                264,
                "1"
            ],
            [
                442,
                "2"
            ],
            [
                514,
                "5"
            ],
            [
                123,
                "5"
            ],
            [
                421,
                "3"
            ],
            [
                379,
                "4"
            ],
            [
                373,
                "5"
            ],
            [
                314,
                "5"
            ]
        ]
    },
    {
        "question": "Show the transportation method most people choose to get to tourist attractions.",
        "query": "MATCH (tourist_attractions:`cre_Theme_park.Tourist_Attractions`)\nWITH tourist_attractions.How_to_Get_There AS How_to_Get_There, count(tourist_attractions.How_to_Get_There) AS count\nRETURN How_to_Get_There\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "bus"
            ]
        ]
    },
    {
        "question": "Which transportation method is used the most often to get to tourist attractions?",
        "query": "MATCH (tourist_attractions:`cre_Theme_park.Tourist_Attractions`)\nWITH tourist_attractions.How_to_Get_There AS How_to_Get_There, count(tourist_attractions.How_to_Get_There) AS count\nRETURN How_to_Get_There\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "bus"
            ]
        ]
    },
    {
        "question": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.",
        "query": "MATCH (tourist_attractions:`cre_Theme_park.Tourist_Attractions`)\nWITH tourist_attractions.How_to_Get_There AS How_to_Get_There, count(tourist_attractions.How_to_Get_There) AS count\nRETURN How_to_Get_There,count",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "bus",
                6
            ],
            [
                "walk",
                5
            ],
            [
                "shuttle",
                4
            ]
        ]
    },
    {
        "question": "List all the possible ways to get to attractions, together with the number of attractions accessible by these methods.",
        "query": "MATCH (tourist_attractions:`cre_Theme_park.Tourist_Attractions`)\nWITH tourist_attractions.How_to_Get_There AS How_to_Get_There, count(tourist_attractions.How_to_Get_There) AS count\nRETURN How_to_Get_There,count",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "bus",
                6
            ],
            [
                "walk",
                5
            ],
            [
                "shuttle",
                4
            ]
        ]
    },
    {
        "question": "What are the names of the tourist attractions that have parking or shopping as their feature details?",
        "query": "MATCH (T1:`cre_Theme_park.Tourist_Attractions`)-[T2:`cre_Theme_park.Tourist_Attraction_Features`]-(T3:`cre_Theme_park.Features`)\nWHERE T3.Feature_Details = 'park'\nRETURN T1.Name  AS name \nUNION\nMATCH (T1:`cre_Theme_park.Tourist_Attractions`)-[T2:`cre_Theme_park.Tourist_Attraction_Features`]-(T3:`cre_Theme_park.Features`)\nWHERE T3.Feature_Details = 'shopping'\nRETURN T1.Name  AS name",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "jungle cruise"
            ],
            [
                "impressions de France"
            ],
            [
                "exploration trial"
            ],
            [
                "fun games"
            ],
            [
                "flying elephant"
            ],
            [
                "cafe"
            ],
            [
                "presidents hall"
            ],
            [
                "parking"
            ],
            [
                "US museum"
            ]
        ]
    },
    {
        "question": "Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?",
        "query": "MATCH (T1:`cre_Theme_park.Tourist_Attractions`)-[T2:`cre_Theme_park.Tourist_Attraction_Features`]-(T3:`cre_Theme_park.Features`)\nWHERE T3.Feature_Details = 'park'\nRETURN T1.Name  AS name \nUNION\nMATCH (T1:`cre_Theme_park.Tourist_Attractions`)-[T2:`cre_Theme_park.Tourist_Attraction_Features`]-(T3:`cre_Theme_park.Features`)\nWHERE T3.Feature_Details = 'shopping'\nRETURN T1.Name  AS name",
        "db_id": "cre_Theme_park",
        "answers": [
            [
                "jungle cruise"
            ],
            [
                "impressions de France"
            ],
            [
                "exploration trial"
            ],
            [
                "fun games"
            ],
            [
                "flying elephant"
            ],
            [
                "cafe"
            ],
            [
                "presidents hall"
            ],
            [
                "parking"
            ],
            [
                "US museum"
            ]
        ]
    },
    {
        "question": "How many video games exist?",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nRETURN count(*)",
        "db_id": "game_1",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "How many video games do you have?",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nRETURN count(*)",
        "db_id": "game_1",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "How many video game types exist?",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nRETURN count(DISTINCT video_games.GType)",
        "db_id": "game_1",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "What is the count of different game types?",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nRETURN count(DISTINCT video_games.GType)",
        "db_id": "game_1",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "Show all video game types.",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nRETURN DISTINCT video_games.GType",
        "db_id": "game_1",
        "answers": [
            [
                "Collectible card game"
            ],
            [
                "Walking Simulator"
            ],
            [
                "Role-playing game"
            ],
            [
                "Grand strategy"
            ],
            [
                "Frist-person shooter"
            ],
            [
                "Massively multiplayer online game"
            ]
        ]
    },
    {
        "question": "What are the different types of video games?",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nRETURN DISTINCT video_games.GType",
        "db_id": "game_1",
        "answers": [
            [
                "Collectible card game"
            ],
            [
                "Walking Simulator"
            ],
            [
                "Role-playing game"
            ],
            [
                "Grand strategy"
            ],
            [
                "Frist-person shooter"
            ],
            [
                "Massively multiplayer online game"
            ]
        ]
    },
    {
        "question": "Show all video games and their types in the order of their names.",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nRETURN video_games.GName,video_games.GType\nORDER BY video_games.GName",
        "db_id": "game_1",
        "answers": [
            [
                "Call of Destiny",
                "Frist-person shooter"
            ],
            [
                "Europe is the Universe",
                "Grand strategy"
            ],
            [
                "Grand Term Assignment",
                "Role-playing game"
            ],
            [
                "RNG Stone",
                "Collectible card game"
            ],
            [
                "The Vanishing of Eric Calder",
                "Walking Simulator"
            ],
            [
                "Works of Widenius",
                "Massively multiplayer online game"
            ]
        ]
    },
    {
        "question": "What are the names of all the video games and their types in alphabetical order?",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nRETURN video_games.GName,video_games.GType\nORDER BY video_games.GName",
        "db_id": "game_1",
        "answers": [
            [
                "Call of Destiny",
                "Frist-person shooter"
            ],
            [
                "Europe is the Universe",
                "Grand strategy"
            ],
            [
                "Grand Term Assignment",
                "Role-playing game"
            ],
            [
                "RNG Stone",
                "Collectible card game"
            ],
            [
                "The Vanishing of Eric Calder",
                "Walking Simulator"
            ],
            [
                "Works of Widenius",
                "Massively multiplayer online game"
            ]
        ]
    },
    {
        "question": "Show all video games with type Collectible card game.",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nWHERE video_games.GType = 'Collectible card game'\nRETURN video_games.GName",
        "db_id": "game_1",
        "answers": [
            [
                "RNG Stone"
            ]
        ]
    },
    {
        "question": "What are the names of all video games that are collectible cards?",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nWHERE video_games.GType = 'Collectible card game'\nRETURN video_games.GName",
        "db_id": "game_1",
        "answers": [
            [
                "RNG Stone"
            ]
        ]
    },
    {
        "question": "What is the type of video game Call of Destiny.",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nWHERE video_games.GName = 'Call of Destiny'\nRETURN video_games.GType",
        "db_id": "game_1",
        "answers": [
            [
                "Frist-person shooter"
            ]
        ]
    },
    {
        "question": "What type of game is Call of Destiny?",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nWHERE video_games.GName = 'Call of Destiny'\nRETURN video_games.GType",
        "db_id": "game_1",
        "answers": [
            [
                "Frist-person shooter"
            ]
        ]
    },
    {
        "question": "How many video games have type Massively multiplayer online game?",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nWHERE video_games.GType = 'Massively multiplayer online game'\nRETURN count(*)",
        "db_id": "game_1",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "Count the number of video games with Massively multiplayer online game type .",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nWHERE video_games.GType = 'Massively multiplayer online game'\nRETURN count(*)",
        "db_id": "game_1",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "Show all video game types and the number of video games in each type.",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nWITH count(video_games.GType) AS count, video_games.GType AS GType\nRETURN GType,count",
        "db_id": "game_1",
        "answers": [
            [
                "Collectible card game",
                1
            ],
            [
                "Walking Simulator",
                1
            ],
            [
                "Role-playing game",
                1
            ],
            [
                "Grand strategy",
                1
            ],
            [
                "Frist-person shooter",
                1
            ],
            [
                "Massively multiplayer online game",
                1
            ]
        ]
    },
    {
        "question": "What are the types of video games and how many are in each type?",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nWITH count(video_games.GType) AS count, video_games.GType AS GType\nRETURN GType,count",
        "db_id": "game_1",
        "answers": [
            [
                "Collectible card game",
                1
            ],
            [
                "Walking Simulator",
                1
            ],
            [
                "Role-playing game",
                1
            ],
            [
                "Grand strategy",
                1
            ],
            [
                "Frist-person shooter",
                1
            ],
            [
                "Massively multiplayer online game",
                1
            ]
        ]
    },
    {
        "question": "Which game type has least number of games?",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nWITH count(video_games.GType) AS count, video_games.GType AS GType\nRETURN GType\nORDER BY count\nLIMIT 1",
        "db_id": "game_1",
        "answers": [
            [
                "Collectible card game"
            ]
        ]
    },
    {
        "question": "What is the type with the fewest games?",
        "query": "MATCH (video_games:`game_1.Video_Games`)\nWITH count(video_games.GType) AS count, video_games.GType AS GType\nRETURN GType\nORDER BY count\nLIMIT 1",
        "db_id": "game_1",
        "answers": [
            [
                "Collectible card game"
            ]
        ]
    },
    {
        "question": "Show ids for all students who live in CHI.",
        "query": "MATCH (student:`game_1.Student`)\nWHERE student.city_code = 'CHI'\nRETURN student.StuID",
        "db_id": "game_1",
        "answers": [
            [
                1004
            ]
        ]
    },
    {
        "question": "What are the ids of all students who live in CHI?",
        "query": "MATCH (student:`game_1.Student`)\nWHERE student.city_code = 'CHI'\nRETURN student.StuID",
        "db_id": "game_1",
        "answers": [
            [
                1004
            ]
        ]
    },
    {
        "question": "Show ids for all students who have advisor 1121.",
        "query": "MATCH (student:`game_1.Student`)\nWHERE student.Advisor = 1121\nRETURN student.StuID",
        "db_id": "game_1",
        "answers": [
            [
                1001
            ],
            [
                1005
            ],
            [
                1018
            ]
        ]
    },
    {
        "question": "What are the ids of all students who have advisor number 1121?",
        "query": "MATCH (student:`game_1.Student`)\nWHERE student.Advisor = 1121\nRETURN student.StuID",
        "db_id": "game_1",
        "answers": [
            [
                1001
            ],
            [
                1005
            ],
            [
                1018
            ]
        ]
    },
    {
        "question": "Show first name for all students with major 600.",
        "query": "MATCH (student:`game_1.Student`)\nWHERE student.Major = 600\nRETURN student.Fname",
        "db_id": "game_1",
        "answers": [
            [
                "Linda"
            ],
            [
                "Tracy"
            ],
            [
                "Shiela"
            ],
            [
                "Dinesh"
            ],
            [
                "Paul"
            ],
            [
                "Andy"
            ],
            [
                "Lisa"
            ],
            [
                "Jandy"
            ],
            [
                "Eric"
            ],
            [
                "Derek"
            ],
            [
                "David"
            ],
            [
                "Steven"
            ],
            [
                "Charles"
            ],
            [
                "Susan"
            ],
            [
                "Mark"
            ],
            [
                "Bruce"
            ],
            [
                "Michael"
            ],
            [
                "Arthur"
            ]
        ]
    },
    {
        "question": "What are the first names for all students who are from the major numbered 600?",
        "query": "MATCH (student:`game_1.Student`)\nWHERE student.Major = 600\nRETURN student.Fname",
        "db_id": "game_1",
        "answers": [
            [
                "Linda"
            ],
            [
                "Tracy"
            ],
            [
                "Shiela"
            ],
            [
                "Dinesh"
            ],
            [
                "Paul"
            ],
            [
                "Andy"
            ],
            [
                "Lisa"
            ],
            [
                "Jandy"
            ],
            [
                "Eric"
            ],
            [
                "Derek"
            ],
            [
                "David"
            ],
            [
                "Steven"
            ],
            [
                "Charles"
            ],
            [
                "Susan"
            ],
            [
                "Mark"
            ],
            [
                "Bruce"
            ],
            [
                "Michael"
            ],
            [
                "Arthur"
            ]
        ]
    },
    {
        "question": "Show all advisors who have at least two students.",
        "query": "MATCH (student:`game_1.Student`)\nWITH count(*) AS count, student.Advisor AS Advisor\nWHERE count  >= 2\nRETURN Advisor",
        "db_id": "game_1",
        "answers": [
            [
                1121
            ],
            [
                1148
            ],
            [
                2192
            ],
            [
                7271
            ],
            [
                8722
            ],
            [
                7134
            ],
            [
                2311
            ],
            [
                8772
            ],
            [
                5718
            ]
        ]
    },
    {
        "question": "What are the advisors",
        "query": "MATCH (student:`game_1.Student`)\nWITH count(*) AS count, student.Advisor AS Advisor\nWHERE count  >= 2\nRETURN Advisor",
        "db_id": "game_1",
        "answers": [
            [
                1121
            ],
            [
                1148
            ],
            [
                2192
            ],
            [
                7271
            ],
            [
                8722
            ],
            [
                7134
            ],
            [
                2311
            ],
            [
                8772
            ],
            [
                5718
            ]
        ]
    },
    {
        "question": "How many sports do we have?",
        "query": "MATCH (sportsinfo:`game_1.SportsInfo`)\nRETURN count(DISTINCT sportsinfo.SportName)",
        "db_id": "game_1",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "How many different types of sports do we offer?",
        "query": "MATCH (sportsinfo:`game_1.SportsInfo`)\nRETURN count(DISTINCT sportsinfo.SportName)",
        "db_id": "game_1",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "How many students play sports?",
        "query": "MATCH (sportsinfo:`game_1.SportsInfo`)\nRETURN count(DISTINCT sportsinfo.StuID)",
        "db_id": "game_1",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "question": "How many different students are involved in sports?",
        "query": "MATCH (sportsinfo:`game_1.SportsInfo`)\nRETURN count(DISTINCT sportsinfo.StuID)",
        "db_id": "game_1",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "question": "List ids for all student who are on scholarship.",
        "query": "MATCH (sportsinfo:`game_1.SportsInfo`)\nWHERE sportsinfo.OnScholarship = 'Y'\nRETURN sportsinfo.StuID",
        "db_id": "game_1",
        "answers": [
            [
                1002
            ],
            [
                1003
            ],
            [
                1015
            ],
            [
                1019
            ],
            [
                1023
            ],
            [
                1023
            ],
            [
                1026
            ],
            [
                1033
            ]
        ]
    },
    {
        "question": "What are the ids for all sporty students who are on scholarship?",
        "query": "MATCH (sportsinfo:`game_1.SportsInfo`)\nWHERE sportsinfo.OnScholarship = 'Y'\nRETURN sportsinfo.StuID",
        "db_id": "game_1",
        "answers": [
            [
                1002
            ],
            [
                1003
            ],
            [
                1015
            ],
            [
                1019
            ],
            [
                1023
            ],
            [
                1023
            ],
            [
                1026
            ],
            [
                1033
            ]
        ]
    },
    {
        "question": "Show last names for all student who are on scholarship.",
        "query": "MATCH (T1:`game_1.SportsInfo`)-[]-(T2:`game_1.Student`)\nWHERE T1.OnScholarship = 'Y'\nRETURN T2.LName",
        "db_id": "game_1",
        "answers": [
            [
                "Kim"
            ],
            [
                "Jones"
            ],
            [
                "Lee"
            ],
            [
                "Pang"
            ],
            [
                "Shieber"
            ],
            [
                "Shieber"
            ],
            [
                "Pang"
            ],
            [
                "Simms"
            ]
        ]
    },
    {
        "question": "What are the last names for all scholarship students?",
        "query": "MATCH (T1:`game_1.SportsInfo`)-[]-(T2:`game_1.Student`)\nWHERE T1.OnScholarship = 'Y'\nRETURN T2.LName",
        "db_id": "game_1",
        "answers": [
            [
                "Kim"
            ],
            [
                "Jones"
            ],
            [
                "Lee"
            ],
            [
                "Pang"
            ],
            [
                "Shieber"
            ],
            [
                "Shieber"
            ],
            [
                "Pang"
            ],
            [
                "Simms"
            ]
        ]
    },
    {
        "question": "Show all sport name and the number of students.",
        "query": "MATCH (sportsinfo:`game_1.SportsInfo`)\nWITH count(sportsinfo.SportName) AS count, sportsinfo.SportName AS SportName\nRETURN SportName,count",
        "db_id": "game_1",
        "answers": [
            [
                "Athletics",
                1
            ],
            [
                "Football",
                2
            ],
            [
                "Lacrosse",
                3
            ],
            [
                "Swimming",
                1
            ],
            [
                "Tennis",
                2
            ],
            [
                "Baseball",
                1
            ],
            [
                "Basketball",
                1
            ],
            [
                "Cricket",
                1
            ],
            [
                "Soccer",
                1
            ],
            [
                "Curling",
                1
            ]
        ]
    },
    {
        "question": "How many students play each sport?",
        "query": "MATCH (sportsinfo:`game_1.SportsInfo`)\nWITH count(sportsinfo.SportName) AS count, sportsinfo.SportName AS SportName\nRETURN SportName,count",
        "db_id": "game_1",
        "answers": [
            [
                "Athletics",
                1
            ],
            [
                "Football",
                2
            ],
            [
                "Lacrosse",
                3
            ],
            [
                "Swimming",
                1
            ],
            [
                "Tennis",
                2
            ],
            [
                "Baseball",
                1
            ],
            [
                "Basketball",
                1
            ],
            [
                "Cricket",
                1
            ],
            [
                "Soccer",
                1
            ],
            [
                "Curling",
                1
            ]
        ]
    },
    {
        "question": "Which sport has most number of students on scholarship?",
        "query": "MATCH (sportsinfo:`game_1.SportsInfo`)\nWHERE sportsinfo.OnScholarship = 'Y'\nWITH count(sportsinfo.SportName) AS count, sportsinfo.SportName AS SportName\nRETURN SportName\nORDER BY count DESC\nLIMIT 1",
        "db_id": "game_1",
        "answers": [
            [
                "Football"
            ]
        ]
    },
    {
        "question": "What is the sport with the most scholarship students?",
        "query": "MATCH (sportsinfo:`game_1.SportsInfo`)\nWHERE sportsinfo.OnScholarship = 'Y'\nWITH count(sportsinfo.SportName) AS count, sportsinfo.SportName AS SportName\nRETURN SportName\nORDER BY count DESC\nLIMIT 1",
        "db_id": "game_1",
        "answers": [
            [
                "Football"
            ]
        ]
    },
    {
        "question": "Find the last and first name of students who are playing Football or Lacrosse.",
        "query": "MATCH (T1:`game_1.SportsInfo`)-[]-(T2:`game_1.Student`)\nWHERE T1.SportName = 'Football' OR T1.SportName = 'Lacrosse'\nRETURN T2.LName,T2.Fname",
        "db_id": "game_1",
        "answers": [
            [
                "Kim",
                "Tracy"
            ],
            [
                "Jones",
                "Shiela"
            ],
            [
                "Gompers",
                "Paul"
            ],
            [
                "Lee",
                "Susan"
            ],
            [
                "Leighton",
                "Michael"
            ]
        ]
    },
    {
        "question": "What is the first and last name of all students who play Football or Lacrosse?",
        "query": "MATCH (T1:`game_1.SportsInfo`)-[]-(T2:`game_1.Student`)\nWHERE T1.SportName = 'Football' OR T1.SportName = 'Lacrosse'\nRETURN T2.LName,T2.Fname",
        "db_id": "game_1",
        "answers": [
            [
                "Kim",
                "Tracy"
            ],
            [
                "Jones",
                "Shiela"
            ],
            [
                "Gompers",
                "Paul"
            ],
            [
                "Lee",
                "Susan"
            ],
            [
                "Leighton",
                "Michael"
            ]
        ]
    },
    {
        "question": "Find the name of all customers.",
        "query": "MATCH (customers:`customers_and_addresses.Customers`)\nRETURN customers.customer_name",
        "db_id": "customers_and_addresses",
        "answers": [
            [
                "Dr. Julia Wuckert MD"
            ],
            [
                "Tillman Ernser"
            ],
            [
                "Rodrick Heaney"
            ],
            [
                "Prof. Alexzander Hamill"
            ],
            [
                "Prof. Reyes Berge II"
            ],
            [
                "Maudie Kertzmann"
            ],
            [
                "Mozell Morissette"
            ],
            [
                "Eunice Morar"
            ],
            [
                "Devin Mills"
            ],
            [
                "Kitty Padberg III"
            ],
            [
                "Salvatore Tillman"
            ],
            [
                "Clifford Pagac"
            ],
            [
                "Miss Aliyah Witting"
            ],
            [
                "Alexane Kilback"
            ],
            [
                "Prof. Ibrahim Bashirian"
            ]
        ]
    },
    {
        "question": "What are the names of all the customers?",
        "query": "MATCH (customers:`customers_and_addresses.Customers`)\nRETURN customers.customer_name",
        "db_id": "customers_and_addresses",
        "answers": [
            [
                "Dr. Julia Wuckert MD"
            ],
            [
                "Tillman Ernser"
            ],
            [
                "Rodrick Heaney"
            ],
            [
                "Prof. Alexzander Hamill"
            ],
            [
                "Prof. Reyes Berge II"
            ],
            [
                "Maudie Kertzmann"
            ],
            [
                "Mozell Morissette"
            ],
            [
                "Eunice Morar"
            ],
            [
                "Devin Mills"
            ],
            [
                "Kitty Padberg III"
            ],
            [
                "Salvatore Tillman"
            ],
            [
                "Clifford Pagac"
            ],
            [
                "Miss Aliyah Witting"
            ],
            [
                "Alexane Kilback"
            ],
            [
                "Prof. Ibrahim Bashirian"
            ]
        ]
    },
    {
        "question": "How many customers are there?",
        "query": "MATCH (customers:`customers_and_addresses.Customers`)\nRETURN count(*)",
        "db_id": "customers_and_addresses",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Return the total number of distinct customers.",
        "query": "MATCH (customers:`customers_and_addresses.Customers`)\nRETURN count(*)",
        "db_id": "customers_and_addresses",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "What are the names of customers who use payment method \"Cash\"?",
        "query": "MATCH (customers:`customers_and_addresses.Customers`)\nWHERE customers.payment_method = 'Cash'\nRETURN customers.customer_name",
        "db_id": "customers_and_addresses",
        "answers": [
            [
                "Dr. Julia Wuckert MD"
            ],
            [
                "Maudie Kertzmann"
            ],
            [
                "Kitty Padberg III"
            ],
            [
                "Prof. Ibrahim Bashirian"
            ]
        ]
    },
    {
        "question": "Which customers use \"Cash\" for payment method? Return the customer names.",
        "query": "MATCH (customers:`customers_and_addresses.Customers`)\nWHERE customers.payment_method = 'Cash'\nRETURN customers.customer_name",
        "db_id": "customers_and_addresses",
        "answers": [
            [
                "Dr. Julia Wuckert MD"
            ],
            [
                "Maudie Kertzmann"
            ],
            [
                "Kitty Padberg III"
            ],
            [
                "Prof. Ibrahim Bashirian"
            ]
        ]
    },
    {
        "question": "Find the \"date became customers\" of the customers whose ID is between 10 and 20.",
        "query": "MATCH (customers:`customers_and_addresses.Customers`)\nWHERE 10<=customers.customer_id<=20\nRETURN customers.date_became_customer",
        "db_id": "customers_and_addresses",
        "answers": [
            [
                "2018-03-22 18:09:09"
            ],
            [
                "2018-03-04 00:17:48"
            ],
            [
                "2018-02-24 10:24:23"
            ],
            [
                "2018-03-05 07:19:45"
            ],
            [
                "2018-03-08 01:17:31"
            ],
            [
                "2018-03-15 02:54:27"
            ]
        ]
    },
    {
        "question": "What are the dates when customers with ids between 10 and 20 became customers?",
        "query": "MATCH (customers:`customers_and_addresses.Customers`)\nWHERE 10<=customers.customer_id<=20\nRETURN customers.date_became_customer",
        "db_id": "customers_and_addresses",
        "answers": [
            [
                "2018-03-22 18:09:09"
            ],
            [
                "2018-03-04 00:17:48"
            ],
            [
                "2018-02-24 10:24:23"
            ],
            [
                "2018-03-05 07:19:45"
            ],
            [
                "2018-03-08 01:17:31"
            ],
            [
                "2018-03-15 02:54:27"
            ]
        ]
    },
    {
        "question": "Which payment method is used by most customers?",
        "query": "MATCH (customers:`customers_and_addresses.Customers`)\nWITH count(customers.payment_method) AS count, customers.payment_method AS payment_method\nRETURN payment_method\nORDER BY count DESC\nLIMIT 1",
        "db_id": "customers_and_addresses",
        "answers": [
            [
                "Cheque"
            ]
        ]
    },
    {
        "question": "Find the payment method that is used most frequently.",
        "query": "MATCH (customers:`customers_and_addresses.Customers`)\nWITH count(customers.payment_method) AS count, customers.payment_method AS payment_method\nRETURN payment_method\nORDER BY count DESC\nLIMIT 1",
        "db_id": "customers_and_addresses",
        "answers": [
            [
                "Cheque"
            ]
        ]
    },
    {
        "question": "What are all the payment methods?",
        "query": "MATCH (customers:`customers_and_addresses.Customers`)\nRETURN DISTINCT customers.payment_method",
        "db_id": "customers_and_addresses",
        "answers": [
            [
                "Cash"
            ],
            [
                "Cheque"
            ],
            [
                "Credit Card"
            ]
        ]
    },
    {
        "question": "Return all the distinct payment methods used by customers.",
        "query": "MATCH (customers:`customers_and_addresses.Customers`)\nRETURN DISTINCT customers.payment_method",
        "db_id": "customers_and_addresses",
        "answers": [
            [
                "Cash"
            ],
            [
                "Cheque"
            ],
            [
                "Credit Card"
            ]
        ]
    },
    {
        "question": "What are the details of all products?",
        "query": "MATCH (products:`customers_and_addresses.Products`)\nRETURN DISTINCT products.product_details",
        "db_id": "customers_and_addresses",
        "answers": [
            [
                "Americano"
            ],
            [
                "Dove Chocolate"
            ],
            [
                "Latte"
            ]
        ]
    },
    {
        "question": "Return the the details of all products.",
        "query": "MATCH (products:`customers_and_addresses.Products`)\nRETURN DISTINCT products.product_details",
        "db_id": "customers_and_addresses",
        "answers": [
            [
                "Americano"
            ],
            [
                "Dove Chocolate"
            ],
            [
                "Latte"
            ]
        ]
    },
    {
        "question": "Retrieve the list of all cities.",
        "query": "MATCH (addresses:`customers_and_addresses.Addresses`)\nRETURN DISTINCT addresses.city",
        "db_id": "customers_and_addresses",
        "answers": [
            [
                "Lucasville"
            ],
            [
                "New Sabryna"
            ],
            [
                "Reingertown"
            ],
            [
                "Gleasonmouth"
            ],
            [
                "Stantonville"
            ],
            [
                "South Meghanview"
            ],
            [
                "Lake Walterton"
            ],
            [
                "South Bellaland"
            ],
            [
                "Felicityfort"
            ],
            [
                "East Julianaside"
            ],
            [
                "Lake Geovannyton"
            ],
            [
                "New Terrillport"
            ],
            [
                "Port Lilyan"
            ],
            [
                "Lake Ryann"
            ],
            [
                "East Pascale"
            ]
        ]
    },
    {
        "question": "List all the distinct cities",
        "query": "MATCH (addresses:`customers_and_addresses.Addresses`)\nRETURN DISTINCT addresses.city",
        "db_id": "customers_and_addresses",
        "answers": [
            [
                "Lucasville"
            ],
            [
                "New Sabryna"
            ],
            [
                "Reingertown"
            ],
            [
                "Gleasonmouth"
            ],
            [
                "Stantonville"
            ],
            [
                "South Meghanview"
            ],
            [
                "Lake Walterton"
            ],
            [
                "South Bellaland"
            ],
            [
                "Felicityfort"
            ],
            [
                "East Julianaside"
            ],
            [
                "Lake Geovannyton"
            ],
            [
                "New Terrillport"
            ],
            [
                "Port Lilyan"
            ],
            [
                "Lake Ryann"
            ],
            [
                "East Pascale"
            ]
        ]
    },
    {
        "question": "How many customers have at least one order with status \"Cancelled\"?",
        "query": "MATCH (customer_orders:`customers_and_addresses.Customer_Orders`)\nWHERE customer_orders.order_status = 'Cancelled'\nRETURN count(DISTINCT customer_orders.customer_id)",
        "db_id": "customers_and_addresses",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "Return the number of customers who have at least one order with \"Cancelled\" status.",
        "query": "MATCH (customer_orders:`customers_and_addresses.Customer_Orders`)\nWHERE customer_orders.order_status = 'Cancelled'\nRETURN count(DISTINCT customer_orders.customer_id)",
        "db_id": "customers_and_addresses",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "How many orders have detail \"Second time\"?",
        "query": "MATCH (customer_orders:`customers_and_addresses.Customer_Orders`)\nWHERE customer_orders.order_details = 'Second time'\nRETURN count(*)",
        "db_id": "customers_and_addresses",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Tell me the number of orders with \"Second time\" as order detail.",
        "query": "MATCH (customer_orders:`customers_and_addresses.Customer_Orders`)\nWHERE customer_orders.order_details = 'Second time'\nRETURN count(*)",
        "db_id": "customers_and_addresses",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
        "query": "MATCH (addresses:`customers_and_addresses.Addresses`)\nWHERE addresses.city = 'East Julianaside' AND addresses.state_province_county = 'Texas'\nRETURN addresses.address_content  AS address_content \nUNION\nMATCH (addresses:`customers_and_addresses.Addresses`)\nWHERE addresses.city = 'Gleasonmouth' AND addresses.state_province_county = 'Arizona'\nRETURN addresses.address_content  AS address_content",
        "db_id": "customers_and_addresses",
        "answers": [
            [
                "120 Noble Radial"
            ],
            [
                "92865 Margaretta Streets Suite 467"
            ]
        ]
    },
    {
        "question": "What are all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
        "query": "MATCH (addresses:`customers_and_addresses.Addresses`)\nWHERE addresses.city = 'East Julianaside' AND addresses.state_province_county = 'Texas'\nRETURN addresses.address_content  AS address_content \nUNION\nMATCH (addresses:`customers_and_addresses.Addresses`)\nWHERE addresses.city = 'Gleasonmouth' AND addresses.state_province_county = 'Arizona'\nRETURN addresses.address_content  AS address_content",
        "db_id": "customers_and_addresses",
        "answers": [
            [
                "120 Noble Radial"
            ],
            [
                "92865 Margaretta Streets Suite 467"
            ]
        ]
    },
    {
        "question": "Find the name of customers who did not pay with Cash.",
        "query": "MATCH (customers:`customers_and_addresses.Customers`)\nWHERE customers.payment_method <> 'Cash'\nRETURN customers.customer_name",
        "db_id": "customers_and_addresses",
        "answers": [
            [
                "Tillman Ernser"
            ],
            [
                "Rodrick Heaney"
            ],
            [
                "Prof. Alexzander Hamill"
            ],
            [
                "Prof. Reyes Berge II"
            ],
            [
                "Mozell Morissette"
            ],
            [
                "Eunice Morar"
            ],
            [
                "Devin Mills"
            ],
            [
                "Salvatore Tillman"
            ],
            [
                "Clifford Pagac"
            ],
            [
                "Miss Aliyah Witting"
            ],
            [
                "Alexane Kilback"
            ]
        ]
    },
    {
        "question": "What is the name of customers who do not use Cash as payment method.",
        "query": "MATCH (customers:`customers_and_addresses.Customers`)\nWHERE customers.payment_method <> 'Cash'\nRETURN customers.customer_name",
        "db_id": "customers_and_addresses",
        "answers": [
            [
                "Tillman Ernser"
            ],
            [
                "Rodrick Heaney"
            ],
            [
                "Prof. Alexzander Hamill"
            ],
            [
                "Prof. Reyes Berge II"
            ],
            [
                "Mozell Morissette"
            ],
            [
                "Eunice Morar"
            ],
            [
                "Devin Mills"
            ],
            [
                "Salvatore Tillman"
            ],
            [
                "Clifford Pagac"
            ],
            [
                "Miss Aliyah Witting"
            ],
            [
                "Alexane Kilback"
            ]
        ]
    },
    {
        "question": "How many artists are there?",
        "query": "MATCH (artist:`music_4.artist`)\nRETURN count(*)",
        "db_id": "music_4",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "Count the number of artists.",
        "query": "MATCH (artist:`music_4.artist`)\nRETURN count(*)",
        "db_id": "music_4",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "List the age of all music artists.",
        "query": "MATCH (artist:`music_4.artist`)\nRETURN artist.Age",
        "db_id": "music_4",
        "answers": [
            [
                34
            ],
            [
                35
            ],
            [
                22
            ],
            [
                18
            ],
            [
                35
            ],
            [
                27
            ],
            [
                49
            ]
        ]
    },
    {
        "question": "What are the ages of all music artists?",
        "query": "MATCH (artist:`music_4.artist`)\nRETURN artist.Age",
        "db_id": "music_4",
        "answers": [
            [
                34
            ],
            [
                35
            ],
            [
                22
            ],
            [
                18
            ],
            [
                35
            ],
            [
                27
            ],
            [
                49
            ]
        ]
    },
    {
        "question": "What is the average age of all artists?",
        "query": "MATCH (artist:`music_4.artist`)\nRETURN avg(artist.Age)",
        "db_id": "music_4",
        "answers": [
            [
                31.428571428571427
            ]
        ]
    },
    {
        "question": "Return the average age across all artists.",
        "query": "MATCH (artist:`music_4.artist`)\nRETURN avg(artist.Age)",
        "db_id": "music_4",
        "answers": [
            [
                31.428571428571427
            ]
        ]
    },
    {
        "question": "What are the famous titles of the artist \"Triumfall\"?",
        "query": "MATCH (artist:`music_4.artist`)\nWHERE artist.Artist = 'Triumfall'\nRETURN artist.Famous_Title",
        "db_id": "music_4",
        "answers": [
            [
                "Antithesis of All Flesh"
            ]
        ]
    },
    {
        "question": "Return the famous titles of the artist called \"Triumfall\".",
        "query": "MATCH (artist:`music_4.artist`)\nWHERE artist.Artist = 'Triumfall'\nRETURN artist.Famous_Title",
        "db_id": "music_4",
        "answers": [
            [
                "Antithesis of All Flesh"
            ]
        ]
    },
    {
        "question": "What are the distinct Famous release dates?",
        "query": "MATCH (artist:`music_4.artist`)\nRETURN DISTINCT artist.Famous_Release_date",
        "db_id": "music_4",
        "answers": [
            [
                "November 2007"
            ],
            [
                "January 21, 2008"
            ],
            [
                "2009"
            ],
            [
                "June 23, 2008"
            ],
            [
                "June 15, 2009"
            ]
        ]
    },
    {
        "question": "Give the distinct famous release dates for all artists.",
        "query": "MATCH (artist:`music_4.artist`)\nRETURN DISTINCT artist.Famous_Release_date",
        "db_id": "music_4",
        "answers": [
            [
                "November 2007"
            ],
            [
                "January 21, 2008"
            ],
            [
                "2009"
            ],
            [
                "June 23, 2008"
            ],
            [
                "June 15, 2009"
            ]
        ]
    },
    {
        "question": "Return the dates of ceremony and the results of all music festivals",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nRETURN music_festival.Date_of_ceremony,music_festival.Result",
        "db_id": "music_4",
        "answers": [
            [
                "18 February 2011",
                "Nominated"
            ],
            [
                "18 February 2011",
                "Nominated"
            ],
            [
                "18 February 2011",
                "Awarded"
            ],
            [
                "18 February 2011",
                "Awarded"
            ],
            [
                "18 February 2011",
                "Nominated"
            ],
            [
                "18 February 2011",
                "Nominated"
            ],
            [
                "18 February 2011",
                "Nominated"
            ],
            [
                "18 February 2011",
                "Nominated"
            ],
            [
                "18 February 2011",
                "Awarded"
            ]
        ]
    },
    {
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nRETURN music_festival.Date_of_ceremony,music_festival.Result",
        "db_id": "music_4",
        "answers": [
            [
                "18 February 2011",
                "Nominated"
            ],
            [
                "18 February 2011",
                "Nominated"
            ],
            [
                "18 February 2011",
                "Awarded"
            ],
            [
                "18 February 2011",
                "Awarded"
            ],
            [
                "18 February 2011",
                "Nominated"
            ],
            [
                "18 February 2011",
                "Nominated"
            ],
            [
                "18 February 2011",
                "Nominated"
            ],
            [
                "18 February 2011",
                "Nominated"
            ],
            [
                "18 February 2011",
                "Awarded"
            ]
        ]
    },
    {
        "question": "What are the category of music festivals with result \"Awarded\"?",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nWHERE music_festival.Result = 'Awarded'\nRETURN music_festival.Category",
        "db_id": "music_4",
        "answers": [
            [
                "Best Song"
            ],
            [
                "Best Song"
            ],
            [
                "Best Sound Song"
            ]
        ]
    },
    {
        "question": "Return the categories of music festivals that have the result \"Awarded\".",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nWHERE music_festival.Result = 'Awarded'\nRETURN music_festival.Category",
        "db_id": "music_4",
        "answers": [
            [
                "Best Song"
            ],
            [
                "Best Song"
            ],
            [
                "Best Sound Song"
            ]
        ]
    },
    {
        "question": "What are the maximum and minimum week on top of all volumes?",
        "query": "MATCH (volume:`music_4.volume`)\nRETURN max(volume.Weeks_on_Top),min(volume.Weeks_on_Top)",
        "db_id": "music_4",
        "answers": [
            [
                3.0,
                1.0
            ]
        ]
    },
    {
        "question": "Give the maximum and minimum weeks on top across all volumes.",
        "query": "MATCH (volume:`music_4.volume`)\nRETURN max(volume.Weeks_on_Top),min(volume.Weeks_on_Top)",
        "db_id": "music_4",
        "answers": [
            [
                3.0,
                1.0
            ]
        ]
    },
    {
        "question": "What are the songs in volumes with more than 1 week on top?",
        "query": "MATCH (volume:`music_4.volume`)\nWHERE volume.Weeks_on_Top > 1\nRETURN volume.Song",
        "db_id": "music_4",
        "answers": [
            [
                " The Way"
            ],
            [
                " Touch Me (I Want Your Body) "
            ],
            [
                " (I Just) Died in Your Arms "
            ],
            [
                " Always "
            ]
        ]
    },
    {
        "question": "Give the songs included in volumes that have more than 1 week on top.",
        "query": "MATCH (volume:`music_4.volume`)\nWHERE volume.Weeks_on_Top > 1\nRETURN volume.Song",
        "db_id": "music_4",
        "answers": [
            [
                " The Way"
            ],
            [
                " Touch Me (I Want Your Body) "
            ],
            [
                " (I Just) Died in Your Arms "
            ],
            [
                " Always "
            ]
        ]
    },
    {
        "question": "Please list all songs in volumes in ascending alphabetical order.",
        "query": "MATCH (volume:`music_4.volume`)\nRETURN volume.Song\nORDER BY volume.Song",
        "db_id": "music_4",
        "answers": [
            [
                " (I Just) Died in Your Arms "
            ],
            [
                " Always "
            ],
            [
                " Everybody Have Fun Tonight "
            ],
            [
                " La Isla Bonita "
            ],
            [
                " The Way"
            ],
            [
                " Touch Me (I Want Your Body) "
            ],
            [
                " Walk Like an Egyptian "
            ],
            [
                " With or Without You "
            ],
            [
                "Head to Toe "
            ],
            [
                "Looking for a New Love"
            ]
        ]
    },
    {
        "question": "What are the the songs in volumes, listed in ascending order?",
        "query": "MATCH (volume:`music_4.volume`)\nRETURN volume.Song\nORDER BY volume.Song",
        "db_id": "music_4",
        "answers": [
            [
                " (I Just) Died in Your Arms "
            ],
            [
                " Always "
            ],
            [
                " Everybody Have Fun Tonight "
            ],
            [
                " La Isla Bonita "
            ],
            [
                " The Way"
            ],
            [
                " Touch Me (I Want Your Body) "
            ],
            [
                " Walk Like an Egyptian "
            ],
            [
                " With or Without You "
            ],
            [
                "Head to Toe "
            ],
            [
                "Looking for a New Love"
            ]
        ]
    },
    {
        "question": "How many distinct artists do the volumes associate to?",
        "query": "MATCH (volume:`music_4.volume`)\nRETURN count(DISTINCT volume.Artist_ID)",
        "db_id": "music_4",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Count the number of distinct artists who have volumes.",
        "query": "MATCH (volume:`music_4.volume`)\nRETURN count(DISTINCT volume.Artist_ID)",
        "db_id": "music_4",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Please show the date of ceremony of the volumes that last more than 2 weeks on top.",
        "query": "MATCH (T1:`music_4.music_festival`)-[]-(T2:`music_4.volume`)\nWHERE T2.Weeks_on_Top > 2\nRETURN T1.Date_of_ceremony",
        "db_id": "music_4",
        "answers": [
            [
                "18 February 2011"
            ],
            [
                "18 February 2011"
            ]
        ]
    },
    {
        "question": "What are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top?",
        "query": "MATCH (T1:`music_4.music_festival`)-[]-(T2:`music_4.volume`)\nWHERE T2.Weeks_on_Top > 2\nRETURN T1.Date_of_ceremony",
        "db_id": "music_4",
        "answers": [
            [
                "18 February 2011"
            ],
            [
                "18 February 2011"
            ]
        ]
    },
    {
        "question": "Please show the songs that have result \"nominated\" at music festivals.",
        "query": "MATCH (T1:`music_4.music_festival`)-[]-(T2:`music_4.volume`)\nWHERE T1.Result = 'Nominated'\nRETURN T2.Song",
        "db_id": "music_4",
        "answers": [
            [
                " The Way"
            ],
            [
                " Everybody Have Fun Tonight "
            ],
            [
                " With or Without You "
            ],
            [
                " (I Just) Died in Your Arms "
            ],
            [
                " La Isla Bonita "
            ],
            [
                "Looking for a New Love"
            ]
        ]
    },
    {
        "question": "What are the songs in volumes that have resulted in a nomination at music festivals?",
        "query": "MATCH (T1:`music_4.music_festival`)-[]-(T2:`music_4.volume`)\nWHERE T1.Result = 'Nominated'\nRETURN T2.Song",
        "db_id": "music_4",
        "answers": [
            [
                " The Way"
            ],
            [
                " Everybody Have Fun Tonight "
            ],
            [
                " With or Without You "
            ],
            [
                " (I Just) Died in Your Arms "
            ],
            [
                " La Isla Bonita "
            ],
            [
                "Looking for a New Love"
            ]
        ]
    },
    {
        "question": "What are the issue dates of volumes associated with the artist \"Gorgoroth\"?",
        "query": "MATCH (T1:`music_4.artist`)-[]-(T2:`music_4.volume`)\nWHERE T1.Artist = 'Gorgoroth'\nRETURN T2.Issue_Date",
        "db_id": "music_4",
        "answers": [
            [
                "27 December 1986 - 10 January"
            ],
            [
                "24 January"
            ],
            [
                "9 May"
            ],
            [
                "16 May - 30 May"
            ]
        ]
    },
    {
        "question": "Return the issue dates of volumes that are by the artist named Gorgoroth.",
        "query": "MATCH (T1:`music_4.artist`)-[]-(T2:`music_4.volume`)\nWHERE T1.Artist = 'Gorgoroth'\nRETURN T2.Issue_Date",
        "db_id": "music_4",
        "answers": [
            [
                "27 December 1986 - 10 January"
            ],
            [
                "24 January"
            ],
            [
                "9 May"
            ],
            [
                "16 May - 30 May"
            ]
        ]
    },
    {
        "question": "What are the songs in volumes associated with the artist aged 32 or older?",
        "query": "MATCH (T1:`music_4.artist`)-[]-(T2:`music_4.volume`)\nWHERE T1.Age >= 32\nRETURN T2.Song",
        "db_id": "music_4",
        "answers": [
            [
                " The Way"
            ],
            [
                " Walk Like an Egyptian "
            ],
            [
                " With or Without You "
            ],
            [
                " (I Just) Died in Your Arms "
            ],
            [
                " Everybody Have Fun Tonight "
            ],
            [
                " Touch Me (I Want Your Body) "
            ],
            [
                "Head to Toe "
            ],
            [
                "Looking for a New Love"
            ]
        ]
    },
    {
        "question": "Return names of songs in volumes that are by artists that are at least 32 years old.",
        "query": "MATCH (T1:`music_4.artist`)-[]-(T2:`music_4.volume`)\nWHERE T1.Age >= 32\nRETURN T2.Song",
        "db_id": "music_4",
        "answers": [
            [
                " The Way"
            ],
            [
                " Walk Like an Egyptian "
            ],
            [
                " With or Without You "
            ],
            [
                " (I Just) Died in Your Arms "
            ],
            [
                " Everybody Have Fun Tonight "
            ],
            [
                " Touch Me (I Want Your Body) "
            ],
            [
                "Head to Toe "
            ],
            [
                "Looking for a New Love"
            ]
        ]
    },
    {
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "MATCH (T1:`music_4.artist`)-[]-(T2:`music_4.volume`)\nWHERE T1.Age <= 25\nRETURN avg(T2.Weeks_on_Top)",
        "db_id": "music_4",
        "answers": [
            [
                1.0
            ]
        ]
    },
    {
        "question": "Return the average number of weeks on top for volumes by artists that are at most 25 years old.",
        "query": "MATCH (T1:`music_4.artist`)-[]-(T2:`music_4.volume`)\nWHERE T1.Age <= 25\nRETURN avg(T2.Weeks_on_Top)",
        "db_id": "music_4",
        "answers": [
            [
                1.0
            ]
        ]
    },
    {
        "question": "What are the famous title of the artists associated with volumes with more than 2 weeks on top?",
        "query": "MATCH (T1:`music_4.artist`)-[]-(T2:`music_4.volume`)\nWHERE T2.Weeks_on_Top > 2\nRETURN T1.Famous_Title",
        "db_id": "music_4",
        "answers": [
            [
                "Bergen 1996"
            ],
            [
                "Bergen 1996"
            ]
        ]
    },
    {
        "question": "Return the famous titles for artists that have volumes that lasted more than 2 weeks on top.",
        "query": "MATCH (T1:`music_4.artist`)-[]-(T2:`music_4.volume`)\nWHERE T2.Weeks_on_Top > 2\nRETURN T1.Famous_Title",
        "db_id": "music_4",
        "answers": [
            [
                "Bergen 1996"
            ],
            [
                "Bergen 1996"
            ]
        ]
    },
    {
        "question": "Please list the age and famous title of artists in descending order of age.",
        "query": "MATCH (artist:`music_4.artist`)\nRETURN artist.Famous_Title,artist.Age\nORDER BY artist.Age DESC",
        "db_id": "music_4",
        "answers": [
            [
                "Antithesis of All Flesh",
                49
            ],
            [
                "Transmutation",
                35
            ],
            [
                "Unholy Metal Way (re-release)",
                35
            ],
            [
                "Bergen 1996",
                34
            ],
            [
                "Those Who Unleashed (re-release)",
                27
            ],
            [
                "Antievangelistical Process (re-release)",
                22
            ],
            [
                "Imperivm",
                18
            ]
        ]
    },
    {
        "question": "What are the famous titles and ages of each artist, listed in descending order by age?",
        "query": "MATCH (artist:`music_4.artist`)\nRETURN artist.Famous_Title,artist.Age\nORDER BY artist.Age DESC",
        "db_id": "music_4",
        "answers": [
            [
                "Antithesis of All Flesh",
                49
            ],
            [
                "Transmutation",
                35
            ],
            [
                "Unholy Metal Way (re-release)",
                35
            ],
            [
                "Bergen 1996",
                34
            ],
            [
                "Those Who Unleashed (re-release)",
                27
            ],
            [
                "Antievangelistical Process (re-release)",
                22
            ],
            [
                "Imperivm",
                18
            ]
        ]
    },
    {
        "question": "What is the famous release date of the artist with the oldest age?",
        "query": "MATCH (artist:`music_4.artist`)\nRETURN artist.Famous_Release_date\nORDER BY artist.Age DESC\nLIMIT 1",
        "db_id": "music_4",
        "answers": [
            [
                "June 15, 2009"
            ]
        ]
    },
    {
        "question": "Return the famous release date for the oldest artist.",
        "query": "MATCH (artist:`music_4.artist`)\nRETURN artist.Famous_Release_date\nORDER BY artist.Age DESC\nLIMIT 1",
        "db_id": "music_4",
        "answers": [
            [
                "June 15, 2009"
            ]
        ]
    },
    {
        "question": "Please show the categories of the music festivals and the count.",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nWITH music_festival.Category AS Category, count(music_festival.Category) AS count\nRETURN Category,count",
        "db_id": "music_4",
        "answers": [
            [
                "Best Song",
                5
            ],
            [
                "Best Lyrics",
                3
            ],
            [
                "Best Sound Song",
                1
            ]
        ]
    },
    {
        "question": "Return the number of music festivals of each category.",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nWITH music_festival.Category AS Category, count(music_festival.Category) AS count\nRETURN Category,count",
        "db_id": "music_4",
        "answers": [
            [
                "Best Song",
                5
            ],
            [
                "Best Lyrics",
                3
            ],
            [
                "Best Sound Song",
                1
            ]
        ]
    },
    {
        "question": "What is the most common result of the music festival?",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nWITH count(music_festival.Result) AS count, music_festival.Result AS Result\nRETURN Result\nORDER BY count DESC\nLIMIT 1",
        "db_id": "music_4",
        "answers": [
            [
                "Nominated"
            ]
        ]
    },
    {
        "question": "Return the result that is most frequent at music festivals.",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nWITH count(music_festival.Result) AS count, music_festival.Result AS Result\nRETURN Result\nORDER BY count DESC\nLIMIT 1",
        "db_id": "music_4",
        "answers": [
            [
                "Nominated"
            ]
        ]
    },
    {
        "question": "Please show the categories of the music festivals with count more than 1.",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nWITH count(*) AS count, music_festival.Category AS Category\nWHERE count  > 1\nRETURN Category",
        "db_id": "music_4",
        "answers": [
            [
                "Best Song"
            ],
            [
                "Best Lyrics"
            ]
        ]
    },
    {
        "question": "What are the categories of music festivals for which there have been more than 1 music festival?",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nWITH count(*) AS count, music_festival.Category AS Category\nWHERE count  > 1\nRETURN Category",
        "db_id": "music_4",
        "answers": [
            [
                "Best Song"
            ],
            [
                "Best Lyrics"
            ]
        ]
    },
    {
        "question": "What is the song in the volume with the maximum weeks on top?",
        "query": "MATCH (volume:`music_4.volume`)\nRETURN volume.Song\nORDER BY volume.Weeks_on_Top DESC\nLIMIT 1",
        "db_id": "music_4",
        "answers": [
            [
                " The Way"
            ]
        ]
    },
    {
        "question": "Return the song in the volume that has spent the most weeks on top?",
        "query": "MATCH (volume:`music_4.volume`)\nRETURN volume.Song\nORDER BY volume.Weeks_on_Top DESC\nLIMIT 1",
        "db_id": "music_4",
        "answers": [
            [
                " The Way"
            ]
        ]
    },
    {
        "question": "Find the famous titles of artists that do not have any volume.",
        "query": "MATCH (artist:`music_4.artist`)\nWHERE NOT (artist:`music_4.artist`)-[]-(:`music_4.volume`)\nRETURN artist.Famous_Title",
        "db_id": "music_4",
        "answers": [
            [
                "Antievangelistical Process (re-release)"
            ],
            [
                "Antithesis of All Flesh"
            ]
        ]
    },
    {
        "question": "What are the famous titles of artists who do not have any volumes?",
        "query": "MATCH (artist:`music_4.artist`)\nWHERE NOT (artist:`music_4.artist`)-[]-(:`music_4.volume`)\nRETURN artist.Famous_Title",
        "db_id": "music_4",
        "answers": [
            [
                "Antievangelistical Process (re-release)"
            ],
            [
                "Antithesis of All Flesh"
            ]
        ]
    },
    {
        "question": "What are the date of ceremony of music festivals with category \"Best Song\" and result \"Awarded\"?",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nWHERE music_festival.Category = 'Best Song' AND music_festival.Result = 'Awarded'\nRETURN music_festival.Date_of_ceremony",
        "db_id": "music_4",
        "answers": [
            [
                "18 February 2011"
            ],
            [
                "18 February 2011"
            ]
        ]
    },
    {
        "question": "Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\".",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nWHERE music_festival.Category = 'Best Song' AND music_festival.Result = 'Awarded'\nRETURN music_festival.Date_of_ceremony",
        "db_id": "music_4",
        "answers": [
            [
                "18 February 2011"
            ],
            [
                "18 February 2011"
            ]
        ]
    },
    {
        "question": "What is the issue date of the volume with the minimum weeks on top?",
        "query": "MATCH (volume:`music_4.volume`)\nRETURN volume.Issue_Date\nORDER BY volume.Weeks_on_Top ASC\nLIMIT 1",
        "db_id": "music_4",
        "answers": [
            [
                "17 January"
            ]
        ]
    },
    {
        "question": "Return the issue date of the volume that has spent the fewest weeks on top.",
        "query": "MATCH (volume:`music_4.volume`)\nRETURN volume.Issue_Date\nORDER BY volume.Weeks_on_Top ASC\nLIMIT 1",
        "db_id": "music_4",
        "answers": [
            [
                "17 January"
            ]
        ]
    },
    {
        "question": "How many distinct artists have volumes?",
        "query": "MATCH (volume:`music_4.volume`)\nRETURN count(DISTINCT volume.Artist_ID)",
        "db_id": "music_4",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Count the number of artists who have had volumes.",
        "query": "MATCH (volume:`music_4.volume`)\nRETURN count(DISTINCT volume.Artist_ID)",
        "db_id": "music_4",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Please show the results of music festivals and the number of music festivals that have had each, ordered by this count.",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nWITH count(music_festival.Result) AS count, music_festival.Result AS Result\nRETURN Result,count\nORDER BY count DESC",
        "db_id": "music_4",
        "answers": [
            [
                "Nominated",
                6
            ],
            [
                "Awarded",
                3
            ]
        ]
    },
    {
        "question": "How many music festivals have had each kind of result, ordered descending by count?",
        "query": "MATCH (music_festival:`music_4.music_festival`)\nWITH count(music_festival.Result) AS count, music_festival.Result AS Result\nRETURN Result,count\nORDER BY count DESC",
        "db_id": "music_4",
        "answers": [
            [
                "Nominated",
                6
            ],
            [
                "Awarded",
                3
            ]
        ]
    },
    {
        "question": "What are the issue dates of volumes associated with the artist aged 23 or younger?",
        "query": "MATCH (T1:`music_4.artist`)-[]-(T2:`music_4.volume`)\nWHERE T1.Age <= 23\nRETURN T2.Issue_Date",
        "db_id": "music_4",
        "answers": [
            [
                "6 June"
            ]
        ]
    },
    {
        "question": "Return the issue dates of volumes by artists who are at most 23 years old?",
        "query": "MATCH (T1:`music_4.artist`)-[]-(T2:`music_4.volume`)\nWHERE T1.Age <= 23\nRETURN T2.Issue_Date",
        "db_id": "music_4",
        "answers": [
            [
                "6 June"
            ]
        ]
    },
    {
        "question": "How many roller coasters are there?",
        "query": "MATCH (roller_coaster:`roller_coaster.roller_coaster`)\nRETURN count(*)",
        "db_id": "roller_coaster",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "List the names of roller coasters by ascending order of length.",
        "query": "MATCH (roller_coaster:`roller_coaster.roller_coaster`)\nRETURN roller_coaster.Name\nORDER BY roller_coaster.Length ASC",
        "db_id": "roller_coaster",
        "answers": [
            [
                "Twister"
            ],
            [
                "Ravine Flyer II"
            ],
            [
                "Boardwalk Bullet"
            ],
            [
                "Dauling Dragon"
            ],
            [
                "Hades 360"
            ],
            [
                "The Voyage"
            ]
        ]
    },
    {
        "question": "What are the lengths and heights of roller coasters?",
        "query": "MATCH (roller_coaster:`roller_coaster.roller_coaster`)\nRETURN roller_coaster.Length,roller_coaster.Height",
        "db_id": "roller_coaster",
        "answers": [
            [
                3236.0,
                96.0
            ],
            [
                3914.0,
                105.0
            ],
            [
                4726.0,
                136.0
            ],
            [
                2900.0,
                120.0
            ],
            [
                1574.0,
                50.0
            ],
            [
                6442.0,
                163.0
            ]
        ]
    },
    {
        "question": "List the names of countries whose language is not \"German\".",
        "query": "MATCH (country:`roller_coaster.country`)\nWHERE country.Languages <> 'German'\nRETURN country.Name",
        "db_id": "roller_coaster",
        "answers": [
            [
                "Finland"
            ],
            [
                "Sweden"
            ]
        ]
    },
    {
        "question": "Show the statuses of roller coasters longer than 3300 or higher than 100.",
        "query": "MATCH (roller_coaster:`roller_coaster.roller_coaster`)\nWHERE roller_coaster.Length > 3300 OR roller_coaster.Height > 100\nRETURN roller_coaster.Status",
        "db_id": "roller_coaster",
        "answers": [
            [
                "Operating"
            ],
            [
                "Operating"
            ],
            [
                "Operating"
            ],
            [
                "Operating"
            ]
        ]
    },
    {
        "question": "What are the speeds of the longest roller coaster?",
        "query": "MATCH (roller_coaster:`roller_coaster.roller_coaster`)\nRETURN roller_coaster.Speed\nORDER BY roller_coaster.Length DESC\nLIMIT 1",
        "db_id": "roller_coaster",
        "answers": [
            [
                "67"
            ]
        ]
    },
    {
        "question": "Show the different statuses and the numbers of roller coasters for each status.",
        "query": "MATCH (roller_coaster:`roller_coaster.roller_coaster`)\nWITH count(roller_coaster.Status) AS count, roller_coaster.Status AS Status\nRETURN Status,count",
        "db_id": "roller_coaster",
        "answers": [
            [
                "Operating",
                6
            ]
        ]
    },
    {
        "question": "Please show the most common status of roller coasters.",
        "query": "MATCH (roller_coaster:`roller_coaster.roller_coaster`)\nWITH count(roller_coaster.Status) AS count, roller_coaster.Status AS Status\nRETURN Status\nORDER BY count DESC\nLIMIT 1",
        "db_id": "roller_coaster",
        "answers": [
            [
                "Operating"
            ]
        ]
    },
    {
        "question": "List the status shared by more than two roller coaster.",
        "query": "MATCH (roller_coaster:`roller_coaster.roller_coaster`)\nWITH count(*) AS count, roller_coaster.Status AS Status\nWHERE count  > 2\nRETURN Status",
        "db_id": "roller_coaster",
        "answers": [
            [
                "Operating"
            ]
        ]
    },
    {
        "question": "Show the park of the roller coaster with the highest speed.",
        "query": "MATCH (roller_coaster:`roller_coaster.roller_coaster`)\nRETURN roller_coaster.Park\nORDER BY roller_coaster.Speed DESC\nLIMIT 1",
        "db_id": "roller_coaster",
        "answers": [
            [
                "Mt. Olympus"
            ]
        ]
    },
    {
        "question": "Show the names of roller coasters and names of country they are in.",
        "query": "MATCH (T1:`roller_coaster.country`)-[]-(T2:`roller_coaster.roller_coaster`)\nRETURN T2.Name,T1.Name",
        "db_id": "roller_coaster",
        "answers": [
            [
                "Hades 360",
                "Austria"
            ],
            [
                "Boardwalk Bullet",
                "Austria"
            ],
            [
                "Dauling Dragon",
                "Austria"
            ],
            [
                "Ravine Flyer II",
                "Finland"
            ],
            [
                "Twister",
                "Finland"
            ],
            [
                "The Voyage",
                "Sweden"
            ]
        ]
    },
    {
        "question": "Show the names of countries that have more than one roller coaster.",
        "query": "MATCH (T1:`roller_coaster.country`)-[]-(T2:`roller_coaster.roller_coaster`)\nWITH T1.Name AS Name, count(*) AS count\nWHERE count  > 1\nRETURN Name",
        "db_id": "roller_coaster",
        "answers": [
            [
                "Austria"
            ],
            [
                "Finland"
            ]
        ]
    },
    {
        "question": "Show the name and population of the country that has the highest roller coaster.",
        "query": "MATCH (T1:`roller_coaster.country`)-[]-(T2:`roller_coaster.roller_coaster`)\nRETURN T1.Name,T1.Population\nORDER BY T2.Height DESC\nLIMIT 1",
        "db_id": "roller_coaster",
        "answers": [
            [
                "Sweden",
                9047752
            ]
        ]
    },
    {
        "question": "How many different captain ranks are there?",
        "query": "MATCH (captain:`ship_1.captain`)\nRETURN count(DISTINCT captain.Rank)",
        "db_id": "ship_1",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Count the number of different ranks of captain.",
        "query": "MATCH (captain:`ship_1.captain`)\nRETURN count(DISTINCT captain.Rank)",
        "db_id": "ship_1",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "How many captains are in each rank?",
        "query": "MATCH (captain:`ship_1.captain`)\nWITH count(captain.Rank) AS count, captain.Rank AS Rank\nRETURN count,Rank",
        "db_id": "ship_1",
        "answers": [
            [
                4,
                "Midshipman"
            ],
            [
                2,
                "Lieutenant"
            ],
            [
                1,
                "Commander, junior captain"
            ]
        ]
    },
    {
        "question": "Count the number of captains that have each rank.",
        "query": "MATCH (captain:`ship_1.captain`)\nWITH count(captain.Rank) AS count, captain.Rank AS Rank\nRETURN count,Rank",
        "db_id": "ship_1",
        "answers": [
            [
                4,
                "Midshipman"
            ],
            [
                2,
                "Lieutenant"
            ],
            [
                1,
                "Commander, junior captain"
            ]
        ]
    },
    {
        "question": "Sort all captain names by their ages from old to young.",
        "query": "MATCH (captain:`ship_1.captain`)\nRETURN captain.Name\nORDER BY captain.age DESC",
        "db_id": "ship_1",
        "answers": [
            [
                "Captain Gilbert Pears"
            ],
            [
                "Captain Beves Conway"
            ],
            [
                "Lieutenant Montagu Verling"
            ],
            [
                "Lieutenant Hugh Bolitho"
            ],
            [
                "Captain Sir Henry Langford"
            ],
            [
                "Captain Henry Dumaresq"
            ],
            [
                "Commander Richard Bolitho"
            ]
        ]
    },
    {
        "question": "What are the names of captains, sorted by age descending?",
        "query": "MATCH (captain:`ship_1.captain`)\nRETURN captain.Name\nORDER BY captain.age DESC",
        "db_id": "ship_1",
        "answers": [
            [
                "Captain Gilbert Pears"
            ],
            [
                "Captain Beves Conway"
            ],
            [
                "Lieutenant Montagu Verling"
            ],
            [
                "Lieutenant Hugh Bolitho"
            ],
            [
                "Captain Sir Henry Langford"
            ],
            [
                "Captain Henry Dumaresq"
            ],
            [
                "Commander Richard Bolitho"
            ]
        ]
    },
    {
        "question": "Find the name, class and rank of all captains.",
        "query": "MATCH (captain:`ship_1.captain`)\nRETURN captain.Name,captain.Class,captain.Rank",
        "db_id": "ship_1",
        "answers": [
            [
                "Captain Sir Henry Langford",
                "Third-rate ship of the line",
                "Midshipman"
            ],
            [
                "Captain Beves Conway",
                "Third-rate ship of the line",
                "Midshipman"
            ],
            [
                "Lieutenant Hugh Bolitho",
                "Cutter",
                "Midshipman"
            ],
            [
                "Lieutenant Montagu Verling",
                "Armed schooner",
                "Midshipman"
            ],
            [
                "Captain Henry Dumaresq",
                "Frigate",
                "Lieutenant"
            ],
            [
                "Captain Gilbert Pears",
                "Third-rate ship of the line",
                "Lieutenant"
            ],
            [
                "Commander Richard Bolitho",
                "Sloop-of-war",
                "Commander, junior captain"
            ]
        ]
    },
    {
        "question": "What are the names, classes, and ranks of all captains?",
        "query": "MATCH (captain:`ship_1.captain`)\nRETURN captain.Name,captain.Class,captain.Rank",
        "db_id": "ship_1",
        "answers": [
            [
                "Captain Sir Henry Langford",
                "Third-rate ship of the line",
                "Midshipman"
            ],
            [
                "Captain Beves Conway",
                "Third-rate ship of the line",
                "Midshipman"
            ],
            [
                "Lieutenant Hugh Bolitho",
                "Cutter",
                "Midshipman"
            ],
            [
                "Lieutenant Montagu Verling",
                "Armed schooner",
                "Midshipman"
            ],
            [
                "Captain Henry Dumaresq",
                "Frigate",
                "Lieutenant"
            ],
            [
                "Captain Gilbert Pears",
                "Third-rate ship of the line",
                "Lieutenant"
            ],
            [
                "Commander Richard Bolitho",
                "Sloop-of-war",
                "Commander, junior captain"
            ]
        ]
    },
    {
        "question": "Which rank is the most common among captains?",
        "query": "MATCH (captain:`ship_1.captain`)\nWITH count(captain.Rank) AS count, captain.Rank AS Rank\nRETURN Rank\nORDER BY count DESC\nLIMIT 1",
        "db_id": "ship_1",
        "answers": [
            [
                "Midshipman"
            ]
        ]
    },
    {
        "question": "Return the rank for which there are the fewest captains.",
        "query": "MATCH (captain:`ship_1.captain`)\nWITH count(captain.Rank) AS count, captain.Rank AS Rank\nRETURN Rank\nORDER BY count DESC\nLIMIT 1",
        "db_id": "ship_1",
        "answers": [
            [
                "Midshipman"
            ]
        ]
    },
    {
        "question": "Which classes have more than two captains?",
        "query": "MATCH (captain:`ship_1.captain`)\nWITH count(*) AS count, captain.Class AS Class\nWHERE count  > 2\nRETURN Class",
        "db_id": "ship_1",
        "answers": [
            [
                "Third-rate ship of the line"
            ]
        ]
    },
    {
        "question": "Give the classes that have more than two captains.",
        "query": "MATCH (captain:`ship_1.captain`)\nWITH count(*) AS count, captain.Class AS Class\nWHERE count  > 2\nRETURN Class",
        "db_id": "ship_1",
        "answers": [
            [
                "Third-rate ship of the line"
            ]
        ]
    },
    {
        "question": "Find the name of captains whose rank are either Midshipman or Lieutenant.",
        "query": "MATCH (captain:`ship_1.captain`)\nWHERE captain.Rank = 'Midshipman' OR captain.Rank = 'Lieutenant'\nRETURN captain.Name",
        "db_id": "ship_1",
        "answers": [
            [
                "Captain Sir Henry Langford"
            ],
            [
                "Captain Beves Conway"
            ],
            [
                "Lieutenant Hugh Bolitho"
            ],
            [
                "Lieutenant Montagu Verling"
            ],
            [
                "Captain Henry Dumaresq"
            ],
            [
                "Captain Gilbert Pears"
            ]
        ]
    },
    {
        "question": "What are the names of captains that have either the rank Midshipman or Lieutenant?",
        "query": "MATCH (captain:`ship_1.captain`)\nWHERE captain.Rank = 'Midshipman' OR captain.Rank = 'Lieutenant'\nRETURN captain.Name",
        "db_id": "ship_1",
        "answers": [
            [
                "Captain Sir Henry Langford"
            ],
            [
                "Captain Beves Conway"
            ],
            [
                "Lieutenant Hugh Bolitho"
            ],
            [
                "Lieutenant Montagu Verling"
            ],
            [
                "Captain Henry Dumaresq"
            ],
            [
                "Captain Gilbert Pears"
            ]
        ]
    },
    {
        "question": "What is the name of the youngest captain?",
        "query": "MATCH (captain:`ship_1.captain`)\nRETURN captain.Name\nORDER BY captain.age\nLIMIT 1",
        "db_id": "ship_1",
        "answers": [
            [
                "Captain Henry Dumaresq"
            ]
        ]
    },
    {
        "question": "Return the name of the youngest captain.",
        "query": "MATCH (captain:`ship_1.captain`)\nRETURN captain.Name\nORDER BY captain.age\nLIMIT 1",
        "db_id": "ship_1",
        "answers": [
            [
                "Captain Henry Dumaresq"
            ]
        ]
    },
    {
        "question": "how many ships are there?",
        "query": "MATCH (ship:`ship_1.Ship`)\nRETURN count(*)",
        "db_id": "ship_1",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "Count the number of ships.",
        "query": "MATCH (ship:`ship_1.Ship`)\nRETURN count(*)",
        "db_id": "ship_1",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "Find the name, type, and flag of the ship that is built in the most recent year.",
        "query": "MATCH (ship:`ship_1.Ship`)\nRETURN ship.Name,ship.Type,ship.Flag\nORDER BY ship.Built_Year DESC\nLIMIT 1",
        "db_id": "ship_1",
        "answers": [
            [
                "HMS Gorgon",
                "Panamax",
                "Panama"
            ]
        ]
    },
    {
        "question": "What is the name, type, and flag of the ship that was built in the most recent year?",
        "query": "MATCH (ship:`ship_1.Ship`)\nRETURN ship.Name,ship.Type,ship.Flag\nORDER BY ship.Built_Year DESC\nLIMIT 1",
        "db_id": "ship_1",
        "answers": [
            [
                "HMS Gorgon",
                "Panamax",
                "Panama"
            ]
        ]
    },
    {
        "question": "Group by ships by flag, and return number of ships that have each flag.",
        "query": "MATCH (ship:`ship_1.Ship`)\nWITH ship.Flag AS Flag, count(ship.Flag) AS count\nRETURN count,Flag",
        "db_id": "ship_1",
        "answers": [
            [
                8,
                "Panama"
            ],
            [
                1,
                "Malta"
            ]
        ]
    },
    {
        "question": "What are the different ship flags, and how many ships have each?",
        "query": "MATCH (ship:`ship_1.Ship`)\nWITH ship.Flag AS Flag, count(ship.Flag) AS count\nRETURN count,Flag",
        "db_id": "ship_1",
        "answers": [
            [
                8,
                "Panama"
            ],
            [
                1,
                "Malta"
            ]
        ]
    },
    {
        "question": "Which flag is most widely used among all ships?",
        "query": "MATCH (ship:`ship_1.Ship`)\nWITH ship.Flag AS Flag, count(ship.Flag) AS count\nRETURN Flag\nORDER BY count DESC\nLIMIT 1",
        "db_id": "ship_1",
        "answers": [
            [
                "Panama"
            ]
        ]
    },
    {
        "question": "Return the flag that is most common among all ships.",
        "query": "MATCH (ship:`ship_1.Ship`)\nWITH ship.Flag AS Flag, count(ship.Flag) AS count\nRETURN Flag\nORDER BY count DESC\nLIMIT 1",
        "db_id": "ship_1",
        "answers": [
            [
                "Panama"
            ]
        ]
    },
    {
        "question": "List all ship names in the order of built year and class.",
        "query": "MATCH (ship:`ship_1.Ship`)\nRETURN ship.Name\nORDER BY ship.Built_Year,ship.Class",
        "db_id": "ship_1",
        "answers": [
            [
                "HMS Manxman"
            ],
            [
                "HM Cutter Avenger"
            ],
            [
                "HMS Trojan"
            ],
            [
                "HM Sloop Sparrow"
            ],
            [
                "HMS Phalarope"
            ],
            [
                "HMS Undine"
            ],
            [
                "HMS Gorgon"
            ],
            [
                "HM Schooner Hotspur"
            ],
            [
                "HMS Destiny"
            ]
        ]
    },
    {
        "question": "What are the names of ships, ordered by year they were built and their class?",
        "query": "MATCH (ship:`ship_1.Ship`)\nRETURN ship.Name\nORDER BY ship.Built_Year,ship.Class",
        "db_id": "ship_1",
        "answers": [
            [
                "HMS Manxman"
            ],
            [
                "HM Cutter Avenger"
            ],
            [
                "HMS Trojan"
            ],
            [
                "HM Sloop Sparrow"
            ],
            [
                "HMS Phalarope"
            ],
            [
                "HMS Undine"
            ],
            [
                "HMS Gorgon"
            ],
            [
                "HM Schooner Hotspur"
            ],
            [
                "HMS Destiny"
            ]
        ]
    },
    {
        "question": "In which year were most of ships built?",
        "query": "MATCH (ship:`ship_1.Ship`)\nWITH count(ship.Built_Year) AS count, ship.Built_Year AS Built_Year\nRETURN Built_Year\nORDER BY count DESC\nLIMIT 1",
        "db_id": "ship_1",
        "answers": [
            [
                1997.0
            ]
        ]
    },
    {
        "question": "What is the year in which most ships were built?",
        "query": "MATCH (ship:`ship_1.Ship`)\nWITH count(ship.Built_Year) AS count, ship.Built_Year AS Built_Year\nRETURN Built_Year\nORDER BY count DESC\nLIMIT 1",
        "db_id": "ship_1",
        "answers": [
            [
                1997.0
            ]
        ]
    },
    {
        "question": "what are the names and classes of the ships that do not have any captain yet?",
        "query": "MATCH (ship:`ship_1.Ship`)\nWHERE NOT (ship:`ship_1.Ship`)-[]-(:`ship_1.captain`)\nRETURN ship.Name,ship.Class",
        "db_id": "ship_1",
        "answers": [
            [
                "HMS Trojan",
                "KR"
            ],
            [
                "HM Sloop Sparrow",
                "KR"
            ],
            [
                "HMS Phalarope",
                "KR"
            ],
            [
                "HMS Undine",
                "GL"
            ]
        ]
    },
    {
        "question": "Return the names and classes of ships that do not have a captain?",
        "query": "MATCH (ship:`ship_1.Ship`)\nWHERE NOT (ship:`ship_1.Ship`)-[]-(:`ship_1.captain`)\nRETURN ship.Name,ship.Class",
        "db_id": "ship_1",
        "answers": [
            [
                "HMS Trojan",
                "KR"
            ],
            [
                "HM Sloop Sparrow",
                "KR"
            ],
            [
                "HMS Phalarope",
                "KR"
            ],
            [
                "HMS Undine",
                "GL"
            ]
        ]
    },
    {
        "question": "What is id of the city that hosted events in the most recent year?",
        "query": "MATCH (hosting_city:`city_record.hosting_city`)\nRETURN hosting_city.Host_City\nORDER BY hosting_city.Year DESC\nLIMIT 1",
        "db_id": "city_record",
        "answers": [
            [
                "11"
            ]
        ]
    },
    {
        "question": "Find the city that hosted some events in the most recent year. What is the id of this city?",
        "query": "MATCH (hosting_city:`city_record.hosting_city`)\nRETURN hosting_city.Host_City\nORDER BY hosting_city.Year DESC\nLIMIT 1",
        "db_id": "city_record",
        "answers": [
            [
                "11"
            ]
        ]
    },
    {
        "question": "Find the match ids of the cities that hosted competition \"1994 FIFA World Cup qualification\"?",
        "query": "MATCH (match:`city_record.match`)\nWHERE match.Competition = '1994 FIFA World Cup qualification'\nRETURN match.Match_ID",
        "db_id": "city_record",
        "answers": [
            [
                2
            ],
            [
                3
            ],
            [
                4
            ],
            [
                5
            ]
        ]
    },
    {
        "question": "What is the match id of the competition called \"1994 FIFA World Cup qualification\"?",
        "query": "MATCH (match:`city_record.match`)\nWHERE match.Competition = '1994 FIFA World Cup qualification'\nRETURN match.Match_ID",
        "db_id": "city_record",
        "answers": [
            [
                2
            ],
            [
                3
            ],
            [
                4
            ],
            [
                5
            ]
        ]
    },
    {
        "question": "Give me the temperature of Shanghai in January.",
        "query": "MATCH (T1:`city_record.city`)-[]-(T2:`city_record.temperature`)\nWHERE T1.City = 'Shanghai'\nRETURN T2.Jan",
        "db_id": "city_record",
        "answers": [
            [
                17.8
            ]
        ]
    },
    {
        "question": "What is the temperature of \"Shanghai\" city in January?",
        "query": "MATCH (T1:`city_record.city`)-[]-(T2:`city_record.temperature`)\nWHERE T1.City = 'Shanghai'\nRETURN T2.Jan",
        "db_id": "city_record",
        "answers": [
            [
                17.8
            ]
        ]
    },
    {
        "question": "Which three cities have the largest regional population?",
        "query": "MATCH (city:`city_record.city`)\nRETURN city.City\nORDER BY city.Regional_Population DESC\nLIMIT 3",
        "db_id": "city_record",
        "answers": [
            [
                "Shanghai"
            ],
            [
                "Suzhou ( Jiangsu )"
            ],
            [
                "Hangzhou ( Zhejiang )"
            ]
        ]
    },
    {
        "question": "What are the three largest cities in terms of regional population?",
        "query": "MATCH (city:`city_record.city`)\nRETURN city.City\nORDER BY city.Regional_Population DESC\nLIMIT 3",
        "db_id": "city_record",
        "answers": [
            [
                "Shanghai"
            ],
            [
                "Suzhou ( Jiangsu )"
            ],
            [
                "Hangzhou ( Zhejiang )"
            ]
        ]
    },
    {
        "question": "Which city has the lowest GDP? Please list the city name and its GDP.",
        "query": "MATCH (city:`city_record.city`)\nRETURN city.City,city.GDP\nORDER BY city.GDP\nLIMIT 1",
        "db_id": "city_record",
        "answers": [
            [
                "Jinhua ( Zhejiang )",
                244.77
            ]
        ]
    },
    {
        "question": "What is the city with the smallest GDP? Return the city and its GDP.",
        "query": "MATCH (city:`city_record.city`)\nRETURN city.City,city.GDP\nORDER BY city.GDP\nLIMIT 1",
        "db_id": "city_record",
        "answers": [
            [
                "Jinhua ( Zhejiang )",
                244.77
            ]
        ]
    },
    {
        "question": "Which city has the highest temperature in February?",
        "query": "MATCH (T1:`city_record.city`)-[]-(T2:`city_record.temperature`)\nRETURN T1.City\nORDER BY T2.Feb DESC\nLIMIT 1",
        "db_id": "city_record",
        "answers": [
            [
                "Suzhou ( Jiangsu )"
            ]
        ]
    },
    {
        "question": "In February, which city marks the highest temperature?",
        "query": "MATCH (T1:`city_record.city`)-[]-(T2:`city_record.temperature`)\nRETURN T1.City\nORDER BY T2.Feb DESC\nLIMIT 1",
        "db_id": "city_record",
        "answers": [
            [
                "Suzhou ( Jiangsu )"
            ]
        ]
    },
    {
        "question": "Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?",
        "query": "MATCH (T1:`city_record.city`)-[]-(T2:`city_record.temperature`)\nWHERE T2.Mar < T2.Jul OR T2.Mar > T2.Oct\nRETURN T1.City",
        "db_id": "city_record",
        "answers": [
            [
                "Shanghai"
            ],
            [
                "Nanjing ( Jiangsu )"
            ],
            [
                "Hangzhou ( Zhejiang )"
            ],
            [
                "Suzhou ( Jiangsu )"
            ],
            [
                "Wuxi ( Jiangsu )"
            ],
            [
                "Jinhua ( Zhejiang )"
            ],
            [
                "Nantong ( Jiangsu )"
            ],
            [
                "Jiaxing ( Zhejiang )"
            ]
        ]
    },
    {
        "question": "Which cities' temperature in March is lower than that in July or higher than that in Oct?",
        "query": "MATCH (T1:`city_record.city`)-[]-(T2:`city_record.temperature`)\nWHERE T2.Mar < T2.Jul OR T2.Mar > T2.Oct\nRETURN T1.City",
        "db_id": "city_record",
        "answers": [
            [
                "Shanghai"
            ],
            [
                "Nanjing ( Jiangsu )"
            ],
            [
                "Hangzhou ( Zhejiang )"
            ],
            [
                "Suzhou ( Jiangsu )"
            ],
            [
                "Wuxi ( Jiangsu )"
            ],
            [
                "Jinhua ( Zhejiang )"
            ],
            [
                "Nantong ( Jiangsu )"
            ],
            [
                "Jiaxing ( Zhejiang )"
            ]
        ]
    },
    {
        "question": "Please give me a list of cities whose regional population is over 10000000.",
        "query": "MATCH (city:`city_record.city`)\nWHERE city.Regional_Population > 10000000\nRETURN city.City",
        "db_id": "city_record",
        "answers": [
            [
                "Shanghai"
            ],
            [
                "Suzhou ( Jiangsu )"
            ]
        ]
    },
    {
        "question": "Which cities have regional population above 10000000?",
        "query": "MATCH (city:`city_record.city`)\nWHERE city.Regional_Population > 10000000\nRETURN city.City",
        "db_id": "city_record",
        "answers": [
            [
                "Shanghai"
            ],
            [
                "Suzhou ( Jiangsu )"
            ]
        ]
    },
    {
        "question": "Please give me a list of cities whose regional population is over 8000000 or under 5000000.",
        "query": "MATCH (city:`city_record.city`)\nWHERE city.Regional_Population > 10000000\nRETURN city.City  AS city \nUNION\nMATCH (city:`city_record.city`)\nWHERE city.Regional_Population < 5000000\nRETURN city.City  AS city",
        "db_id": "city_record",
        "answers": [
            [
                "Shanghai"
            ],
            [
                "Suzhou ( Jiangsu )"
            ],
            [
                "Shaoxing ( Zhejiang )"
            ],
            [
                "Changzhou ( Jiangsu )"
            ],
            [
                "Jinhua ( Zhejiang )"
            ],
            [
                "Jiaxing ( Zhejiang )"
            ],
            [
                "Yangzhou ( Jiangsu )"
            ]
        ]
    },
    {
        "question": "Which cities have regional population above 8000000 or below 5000000?",
        "query": "MATCH (city:`city_record.city`)\nWHERE city.Regional_Population > 10000000\nRETURN city.City  AS city \nUNION\nMATCH (city:`city_record.city`)\nWHERE city.Regional_Population < 5000000\nRETURN city.City  AS city",
        "db_id": "city_record",
        "answers": [
            [
                "Shanghai"
            ],
            [
                "Suzhou ( Jiangsu )"
            ],
            [
                "Shaoxing ( Zhejiang )"
            ],
            [
                "Changzhou ( Jiangsu )"
            ],
            [
                "Jinhua ( Zhejiang )"
            ],
            [
                "Jiaxing ( Zhejiang )"
            ],
            [
                "Yangzhou ( Jiangsu )"
            ]
        ]
    },
    {
        "question": "Find the number of matches in different competitions.",
        "query": "MATCH (match:`city_record.match`)\nWITH count(match.Competition) AS count, match.Competition AS Competition\nRETURN count,Competition",
        "db_id": "city_record",
        "answers": [
            [
                1,
                "Friendly match"
            ],
            [
                4,
                "1994 FIFA World Cup qualification"
            ],
            [
                1,
                "2002 FIFA World Cup qualification"
            ]
        ]
    },
    {
        "question": "For each competition, count the number of matches.",
        "query": "MATCH (match:`city_record.match`)\nWITH count(match.Competition) AS count, match.Competition AS Competition\nRETURN count,Competition",
        "db_id": "city_record",
        "answers": [
            [
                1,
                "Friendly match"
            ],
            [
                4,
                "1994 FIFA World Cup qualification"
            ],
            [
                1,
                "2002 FIFA World Cup qualification"
            ]
        ]
    },
    {
        "question": "what is the GDP of the city with the largest population.",
        "query": "MATCH (city:`city_record.city`)\nRETURN city.GDP\nORDER BY city.Regional_Population DESC\nLIMIT 1",
        "db_id": "city_record",
        "answers": [
            [
                1919.57
            ]
        ]
    },
    {
        "question": "Find the GDP of the city with the largest regional population.",
        "query": "MATCH (city:`city_record.city`)\nRETURN city.GDP\nORDER BY city.Regional_Population DESC\nLIMIT 1",
        "db_id": "city_record",
        "answers": [
            [
                1919.57
            ]
        ]
    },
    {
        "question": "List every individual's first name, middle name and last name in alphabetical order by last name.",
        "query": "MATCH (individuals:`e_government.Individuals`)\nRETURN individuals.individual_first_name,individuals.individual_middle_name,individuals.individual_last_name\nORDER BY individuals.individual_last_name",
        "db_id": "e_government",
        "answers": [
            [
                "Ressie",
                "Alysson",
                "Bradtke"
            ],
            [
                "Shany",
                "Colleen",
                "D'Amore"
            ],
            [
                "Katarina",
                "Lacey",
                "Dooley"
            ],
            [
                "Daron",
                "Howard",
                "Hand"
            ],
            [
                "Jeffery",
                "Alberto",
                "Jacobs"
            ],
            [
                "Geovanny",
                "Antonia",
                "Kerluke"
            ],
            [
                "Nella",
                "Tommie",
                "Kertzmann"
            ],
            [
                "Casper",
                "Mitchell",
                "Kutch"
            ],
            [
                "Oscar",
                "Hosea",
                "Maggio"
            ],
            [
                "Jaylen",
                "Jewell",
                "O'Conner"
            ],
            [
                "Lafayette",
                "Raoul",
                "Rau"
            ],
            [
                "Daniella",
                "Jamel",
                "Rogahn"
            ],
            [
                "Allene",
                "Erwin",
                "Rutherford"
            ],
            [
                "Matteo",
                "Rene",
                "Schuster"
            ],
            [
                "Guy",
                "Erick",
                "Wunsch"
            ]
        ]
    },
    {
        "question": "What are the first, middle, and last names of all individuals, ordered by last name?",
        "query": "MATCH (individuals:`e_government.Individuals`)\nRETURN individuals.individual_first_name,individuals.individual_middle_name,individuals.individual_last_name\nORDER BY individuals.individual_last_name",
        "db_id": "e_government",
        "answers": [
            [
                "Ressie",
                "Alysson",
                "Bradtke"
            ],
            [
                "Shany",
                "Colleen",
                "D'Amore"
            ],
            [
                "Katarina",
                "Lacey",
                "Dooley"
            ],
            [
                "Daron",
                "Howard",
                "Hand"
            ],
            [
                "Jeffery",
                "Alberto",
                "Jacobs"
            ],
            [
                "Geovanny",
                "Antonia",
                "Kerluke"
            ],
            [
                "Nella",
                "Tommie",
                "Kertzmann"
            ],
            [
                "Casper",
                "Mitchell",
                "Kutch"
            ],
            [
                "Oscar",
                "Hosea",
                "Maggio"
            ],
            [
                "Jaylen",
                "Jewell",
                "O'Conner"
            ],
            [
                "Lafayette",
                "Raoul",
                "Rau"
            ],
            [
                "Daniella",
                "Jamel",
                "Rogahn"
            ],
            [
                "Allene",
                "Erwin",
                "Rutherford"
            ],
            [
                "Matteo",
                "Rene",
                "Schuster"
            ],
            [
                "Guy",
                "Erick",
                "Wunsch"
            ]
        ]
    },
    {
        "question": "List all the types of forms.",
        "query": "MATCH (forms:`e_government.Forms`)\nRETURN DISTINCT forms.form_type_code",
        "db_id": "e_government",
        "answers": [
            [
                "Basic"
            ],
            [
                "Complex"
            ]
        ]
    },
    {
        "question": "What are the different types of forms?",
        "query": "MATCH (forms:`e_government.Forms`)\nRETURN DISTINCT forms.form_type_code",
        "db_id": "e_government",
        "answers": [
            [
                "Basic"
            ],
            [
                "Complex"
            ]
        ]
    },
    {
        "question": "List all the name of organizations in order of the date formed.",
        "query": "MATCH (organizations:`e_government.Organizations`)\nRETURN organizations.organization_name\nORDER BY organizations.date_formed ASC",
        "db_id": "e_government",
        "answers": [
            [
                "Green Party"
            ],
            [
                "Labour Party"
            ],
            [
                "Plaid Cymru"
            ],
            [
                "Conservative"
            ],
            [
                "Liberal Democrats"
            ]
        ]
    },
    {
        "question": "What are the names of organizations, ordered by the date they were formed, ascending?",
        "query": "MATCH (organizations:`e_government.Organizations`)\nRETURN organizations.organization_name\nORDER BY organizations.date_formed ASC",
        "db_id": "e_government",
        "answers": [
            [
                "Green Party"
            ],
            [
                "Labour Party"
            ],
            [
                "Plaid Cymru"
            ],
            [
                "Conservative"
            ],
            [
                "Liberal Democrats"
            ]
        ]
    },
    {
        "question": "Find the name of the youngest organization.",
        "query": "MATCH (organizations:`e_government.Organizations`)\nRETURN organizations.organization_name\nORDER BY organizations.date_formed DESC\nLIMIT 1",
        "db_id": "e_government",
        "answers": [
            [
                "Liberal Democrats"
            ]
        ]
    },
    {
        "question": "What is the name of the organization that was formed most recently?",
        "query": "MATCH (organizations:`e_government.Organizations`)\nRETURN organizations.organization_name\nORDER BY organizations.date_formed DESC\nLIMIT 1",
        "db_id": "e_government",
        "answers": [
            [
                "Liberal Democrats"
            ]
        ]
    },
    {
        "question": "How many services are there?",
        "query": "MATCH (services:`e_government.Services`)\nRETURN count(*)",
        "db_id": "e_government",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Count the number of services.",
        "query": "MATCH (services:`e_government.Services`)\nRETURN count(*)",
        "db_id": "e_government",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "How many cities are there in state \"Colorado\"?",
        "query": "MATCH (addresses:`e_government.Addresses`)\nWHERE addresses.state_province_county = 'Colorado'\nRETURN count(*)",
        "db_id": "e_government",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "Count the number of cities in the state of Colorado.",
        "query": "MATCH (addresses:`e_government.Addresses`)\nWHERE addresses.state_province_county = 'Colorado'\nRETURN count(*)",
        "db_id": "e_government",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "Find the payment method code used by more than 3 parties.",
        "query": "MATCH (parties:`e_government.Parties`)\nWITH count(*) AS count, parties.payment_method_code AS payment_method_code\nWHERE count  > 3\nRETURN payment_method_code",
        "db_id": "e_government",
        "answers": [
            [
                "Cheque"
            ],
            [
                "Credit Card"
            ],
            [
                "Cash"
            ]
        ]
    },
    {
        "question": "What are the payment method codes that have been used by more than 3 parties?",
        "query": "MATCH (parties:`e_government.Parties`)\nWITH count(*) AS count, parties.payment_method_code AS payment_method_code\nWHERE count  > 3\nRETURN payment_method_code",
        "db_id": "e_government",
        "answers": [
            [
                "Cheque"
            ],
            [
                "Credit Card"
            ],
            [
                "Cash"
            ]
        ]
    },
    {
        "question": "How many distinct payment methods are used by parties?",
        "query": "MATCH (parties:`e_government.Parties`)\nRETURN count(DISTINCT parties.payment_method_code)",
        "db_id": "e_government",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "Count the number of different payment method codes used by parties.",
        "query": "MATCH (parties:`e_government.Parties`)\nRETURN count(DISTINCT parties.payment_method_code)",
        "db_id": "e_government",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "How many drivers are there?",
        "query": "MATCH (driver:`school_bus.driver`)\nRETURN count(*)",
        "db_id": "school_bus",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "question": "Show the name, home city, and age for all drivers.",
        "query": "MATCH (driver:`school_bus.driver`)\nRETURN driver.Name,driver.Home_city,driver.Age",
        "db_id": "school_bus",
        "answers": [
            [
                "Matthew Ritter",
                "Hartford",
                40
            ],
            [
                "Dan Carter",
                "Bethel",
                30
            ],
            [
                "Minnie Gonzalez",
                "Hartford",
                46
            ],
            [
                "Angel Acre",
                "Hartford",
                42
            ],
            [
                "Brandon McGee",
                "Hartford",
                45
            ],
            [
                "Edwin Vargas",
                "Hartford",
                52
            ],
            [
                "Douglas McCrory",
                "Hartford",
                36
            ],
            [
                "Timothy Ackert",
                "Coventry",
                35
            ],
            [
                "Jason Rojas",
                "East Hartford",
                38
            ],
            [
                "Henry Genga",
                "East Hartford",
                37
            ],
            [
                "Tim Larson",
                "East Hartford",
                36
            ],
            [
                "Geoff Luxenberg",
                "Manchester",
                52
            ]
        ]
    },
    {
        "question": "Show the party and the number of drivers in each party.",
        "query": "MATCH (driver:`school_bus.driver`)\nWITH driver.Party AS Party, count(driver.Party) AS count\nRETURN Party,count",
        "db_id": "school_bus",
        "answers": [
            [
                "Dem",
                10
            ],
            [
                "Rep",
                2
            ]
        ]
    },
    {
        "question": "Show the name of drivers in descending order of age.",
        "query": "MATCH (driver:`school_bus.driver`)\nRETURN driver.Name\nORDER BY driver.Age DESC",
        "db_id": "school_bus",
        "answers": [
            [
                "Edwin Vargas"
            ],
            [
                "Geoff Luxenberg"
            ],
            [
                "Minnie Gonzalez"
            ],
            [
                "Brandon McGee"
            ],
            [
                "Angel Acre"
            ],
            [
                "Matthew Ritter"
            ],
            [
                "Jason Rojas"
            ],
            [
                "Henry Genga"
            ],
            [
                "Douglas McCrory"
            ],
            [
                "Tim Larson"
            ],
            [
                "Timothy Ackert"
            ],
            [
                "Dan Carter"
            ]
        ]
    },
    {
        "question": "Show all different home cities.",
        "query": "MATCH (driver:`school_bus.driver`)\nRETURN DISTINCT driver.Home_city",
        "db_id": "school_bus",
        "answers": [
            [
                "Hartford"
            ],
            [
                "Bethel"
            ],
            [
                "Coventry"
            ],
            [
                "East Hartford"
            ],
            [
                "Manchester"
            ]
        ]
    },
    {
        "question": "Show the home city with the most number of drivers.",
        "query": "MATCH (driver:`school_bus.driver`)\nWITH driver.Home_city AS Home_city, count(driver.Home_city) AS count\nRETURN Home_city\nORDER BY count DESC\nLIMIT 1",
        "db_id": "school_bus",
        "answers": [
            [
                "Hartford"
            ]
        ]
    },
    {
        "question": "Show the party with drivers from Hartford and drivers older than 40.",
        "query": "MATCH (driver:`school_bus.driver`)\nWHERE driver.Home_city = 'Hartford' AND driver.Age > 40\nRETURN driver.Party",
        "db_id": "school_bus",
        "answers": [
            [
                "Dem"
            ],
            [
                "Dem"
            ],
            [
                "Dem"
            ],
            [
                "Dem"
            ]
        ]
    },
    {
        "question": "Show home city where at least two drivers older than 40 are from.",
        "query": "MATCH (driver:`school_bus.driver`)\nWHERE driver.Age > 40\nWITH count(*) AS count, driver.Home_city AS Home_city\nWHERE count  >= 2\nRETURN Home_city",
        "db_id": "school_bus",
        "answers": [
            [
                "Hartford"
            ]
        ]
    },
    {
        "question": "Show the names of the drivers without a school bus.",
        "query": "MATCH (driver:`school_bus.driver`)\nWHERE NOT (driver:`school_bus.driver`)-[:`school_bus.school_bus`]-()\nRETURN driver.Name",
        "db_id": "school_bus",
        "answers": [
            [
                "Matthew Ritter"
            ],
            [
                "Dan Carter"
            ],
            [
                "Brandon McGee"
            ],
            [
                "Edwin Vargas"
            ],
            [
                "Timothy Ackert"
            ],
            [
                "Tim Larson"
            ],
            [
                "Geoff Luxenberg"
            ]
        ]
    },
    {
        "question": "Show the types of schools that have two schools.",
        "query": "MATCH (school:`school_bus.school`)\nWITH count(*) AS count, school.Type AS Type\nWHERE count  = 2\nRETURN Type",
        "db_id": "school_bus",
        "answers": [
            [
                "Public"
            ]
        ]
    },
    {
        "question": "What is the maximum, minimum and average years spent working on a school bus?",
        "query": "MATCH ()-[school_bus:`school_bus.school_bus`]-()\nRETURN max(school_bus.Years_Working),min(school_bus.Years_Working),avg(school_bus.Years_Working)",
        "db_id": "school_bus",
        "answers": [
            [
                10,
                2,
                5.8
            ]
        ]
    },
    {
        "question": "Show the school name and type for schools without a school bus.",
        "query": "MATCH (school:`school_bus.school`)\nWHERE NOT (school:`school_bus.school`)-[:`school_bus.school_bus`]-()\nRETURN school.School,school.Type",
        "db_id": "school_bus",
        "answers": [
            [
                "St. Francis Assisi",
                "Private Catholic"
            ],
            [
                "Columbia University",
                "Private"
            ]
        ]
    },
    {
        "question": "Show the type of school and the number of buses for each type.",
        "query": "MATCH ()-[T1:`school_bus.school_bus`]-(T2:`school_bus.school`)\nWITH count(T2.Type) AS count, T2.Type AS Type\nRETURN Type,count",
        "db_id": "school_bus",
        "answers": [
            [
                "Public",
                2
            ],
            [
                "Private",
                3
            ]
        ]
    },
    {
        "question": "How many drivers are from Hartford city or younger than 40?",
        "query": "MATCH (driver:`school_bus.driver`)\nWHERE driver.Home_city = 'Hartford' OR driver.Age < 40\nRETURN count(*)",
        "db_id": "school_bus",
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "question": "List names for drivers from Hartford city and younger than 40.",
        "query": "MATCH (driver:`school_bus.driver`)\nWHERE driver.Home_city = 'Hartford' AND driver.Age < 40\nRETURN driver.Name",
        "db_id": "school_bus",
        "answers": [
            [
                "Douglas McCrory"
            ]
        ]
    },
    {
        "question": "How many flights have a velocity larger than 200?",
        "query": "MATCH (flight:`flight_company.flight`)\nWHERE flight.Velocity > 200\nRETURN count(*)",
        "db_id": "flight_company",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "question": "List the id, country, city and name of the airports ordered alphabetically by the name.",
        "query": "MATCH (airport:`flight_company.airport`)\nRETURN airport.id,airport.Country,airport.City,airport.name\nORDER BY airport.name",
        "db_id": "flight_company",
        "answers": [
            [
                1,
                "Iceland",
                "Akureyri",
                "Akureyri Airport"
            ],
            [
                4,
                "United States",
                "Baltimore",
                "Baltimore-Washington Airport"
            ],
            [
                6,
                "Norway",
                "Bergen",
                "Bergen Airport"
            ],
            [
                7,
                "Denmark",
                "Billund",
                "Billund Airport"
            ],
            [
                5,
                "Spain",
                "Barcelona",
                "El Prat Airport"
            ],
            [
                8,
                "United States",
                "Boston",
                "Logan International Airport"
            ],
            [
                9,
                "Belgium",
                "Brussels",
                "National Airport"
            ],
            [
                2,
                "Netherlands",
                "Amsterdam",
                "Schiphol Airport"
            ],
            [
                3,
                "United States",
                "Anchorage",
                "Ted Stevens Airport"
            ]
        ]
    },
    {
        "question": "What is maximum group equity shareholding of the companies?",
        "query": "MATCH (operate_company:`flight_company.operate_company`)\nRETURN max(operate_company.Group_Equity_Shareholding)",
        "db_id": "flight_company",
        "answers": [
            [
                100.0
            ]
        ]
    },
    {
        "question": "What is the velocity of the pilot named 'Thompson'?",
        "query": "MATCH (flight:`flight_company.flight`)\nWHERE flight.Pilot = 'Thompson'\nRETURN avg(flight.Velocity)",
        "db_id": "flight_company",
        "answers": [
            [
                229.5
            ]
        ]
    },
    {
        "question": "What are the names of the airports which are not in the country 'Iceland'?",
        "query": "MATCH (airport:`flight_company.airport`)\nWHERE airport.Country <> 'Iceland'\nRETURN airport.name",
        "db_id": "flight_company",
        "answers": [
            [
                "Schiphol Airport"
            ],
            [
                "Ted Stevens Airport"
            ],
            [
                "Baltimore-Washington Airport"
            ],
            [
                "El Prat Airport"
            ],
            [
                "Bergen Airport"
            ],
            [
                "Billund Airport"
            ],
            [
                "Logan International Airport"
            ],
            [
                "National Airport"
            ]
        ]
    },
    {
        "question": "What is the most common company type, and how many are there?",
        "query": "MATCH (operate_company:`flight_company.operate_company`)\nWITH count(operate_company.Type) AS count, operate_company.Type AS Type\nRETURN Type,count\nORDER BY count DESC\nLIMIT 1",
        "db_id": "flight_company",
        "answers": [
            [
                "Subsidiary",
                8
            ]
        ]
    },
    {
        "question": "Which of the airport names contains the word 'international'?",
        "query": "MATCH (airport:`flight_company.airport`)\nWHERE airport.name =~'.*[I|i]nternational.*'\nRETURN airport.name",
        "db_id": "flight_company",
        "answers": [
            [
                "Logan International Airport"
            ]
        ]
    },
    {
        "question": "how many airports are there in each country?",
        "query": "MATCH (airport:`flight_company.airport`)\nWITH count(airport.Country) AS count, airport.Country AS Country\nRETURN count,Country",
        "db_id": "flight_company",
        "answers": [
            [
                1,
                "Iceland"
            ],
            [
                1,
                "Netherlands"
            ],
            [
                3,
                "United States"
            ],
            [
                1,
                "Spain"
            ],
            [
                1,
                "Norway"
            ],
            [
                1,
                "Denmark"
            ],
            [
                1,
                "Belgium"
            ]
        ]
    },
    {
        "question": "which countries have more than 2 airports?",
        "query": "MATCH (airport:`flight_company.airport`)\nWITH count(*) AS count, airport.Country AS Country\nWHERE count  > 2\nRETURN Country",
        "db_id": "flight_company",
        "answers": [
            [
                "United States"
            ]
        ]
    },
    {
        "question": "which pilot is in charge of the most number of flights?",
        "query": "MATCH (flight:`flight_company.flight`)\nWITH flight.Pilot AS Pilot, count(flight.Pilot) AS count\nRETURN Pilot\nORDER BY count DESC\nLIMIT 1",
        "db_id": "flight_company",
        "answers": [
            [
                "Thompson"
            ]
        ]
    },
    {
        "question": "How many accounts do we have?",
        "query": "MATCH (accounts:`cre_Docs_and_Epenses.Accounts`)\nRETURN count(*)",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Count the number of accounts.",
        "query": "MATCH (accounts:`cre_Docs_and_Epenses.Accounts`)\nRETURN count(*)",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Show all account ids and account details.",
        "query": "MATCH (accounts:`cre_Docs_and_Epenses.Accounts`)\nRETURN accounts.Account_ID,accounts.Account_Details",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                7,
                "495.063"
            ],
            [
                61,
                "930.14"
            ],
            [
                98,
                "6035.84"
            ],
            [
                136,
                "199.52"
            ],
            [
                164,
                "12223.93"
            ],
            [
                209,
                "11130.23"
            ],
            [
                211,
                "1230.454"
            ],
            [
                240,
                "6352.31"
            ],
            [
                262,
                "147.96"
            ],
            [
                280,
                "187.14"
            ],
            [
                321,
                "745.817"
            ],
            [
                346,
                "127.9"
            ],
            [
                414,
                "25.41"
            ],
            [
                427,
                "1168.32"
            ],
            [
                451,
                "658.26"
            ]
        ]
    },
    {
        "question": "What are the ids and details of all accounts?",
        "query": "MATCH (accounts:`cre_Docs_and_Epenses.Accounts`)\nRETURN accounts.Account_ID,accounts.Account_Details",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                7,
                "495.063"
            ],
            [
                61,
                "930.14"
            ],
            [
                98,
                "6035.84"
            ],
            [
                136,
                "199.52"
            ],
            [
                164,
                "12223.93"
            ],
            [
                209,
                "11130.23"
            ],
            [
                211,
                "1230.454"
            ],
            [
                240,
                "6352.31"
            ],
            [
                262,
                "147.96"
            ],
            [
                280,
                "187.14"
            ],
            [
                321,
                "745.817"
            ],
            [
                346,
                "127.9"
            ],
            [
                414,
                "25.41"
            ],
            [
                427,
                "1168.32"
            ],
            [
                451,
                "658.26"
            ]
        ]
    },
    {
        "question": "How many statements do we have?",
        "query": "MATCH (statements:`cre_Docs_and_Epenses.Statements`)\nRETURN count(*)",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "Count the number of statements.",
        "query": "MATCH (statements:`cre_Docs_and_Epenses.Statements`)\nRETURN count(*)",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "List all statement ids and statement details.",
        "query": "MATCH (statements:`cre_Docs_and_Epenses.Statements`)\nRETURN statements.Statement_ID,statements.Statement_Details",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                57,
                "Open Project"
            ],
            [
                192,
                "Private Project"
            ]
        ]
    },
    {
        "question": "What are the ids and details of all statements?",
        "query": "MATCH (statements:`cre_Docs_and_Epenses.Statements`)\nRETURN statements.Statement_ID,statements.Statement_Details",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                57,
                "Open Project"
            ],
            [
                192,
                "Private Project"
            ]
        ]
    },
    {
        "question": "Show statement id, statement detail, account detail for accounts.",
        "query": "MATCH (T1:`cre_Docs_and_Epenses.Accounts`)-[]-(T2:`cre_Docs_and_Epenses.Statements`)\nRETURN T1.Statement_ID,T2.Statement_Details,T1.Account_Details",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                57,
                "Open Project",
                "6035.84"
            ],
            [
                57,
                "Open Project",
                "495.063"
            ],
            [
                57,
                "Open Project",
                "187.14"
            ],
            [
                57,
                "Open Project",
                "147.96"
            ],
            [
                57,
                "Open Project",
                "1168.32"
            ],
            [
                57,
                "Open Project",
                "25.41"
            ],
            [
                57,
                "Open Project",
                "930.14"
            ],
            [
                57,
                "Open Project",
                "11130.23"
            ],
            [
                57,
                "Open Project",
                "199.52"
            ],
            [
                192,
                "Private Project",
                "658.26"
            ],
            [
                192,
                "Private Project",
                "745.817"
            ],
            [
                192,
                "Private Project",
                "6352.31"
            ],
            [
                192,
                "Private Project",
                "127.9"
            ],
            [
                192,
                "Private Project",
                "1230.454"
            ],
            [
                192,
                "Private Project",
                "12223.93"
            ]
        ]
    },
    {
        "question": "What are the statement ids, statement details, and account details, for all accounts?",
        "query": "MATCH (T1:`cre_Docs_and_Epenses.Accounts`)-[]-(T2:`cre_Docs_and_Epenses.Statements`)\nRETURN T1.Statement_ID,T2.Statement_Details,T1.Account_Details",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                57,
                "Open Project",
                "6035.84"
            ],
            [
                57,
                "Open Project",
                "495.063"
            ],
            [
                57,
                "Open Project",
                "187.14"
            ],
            [
                57,
                "Open Project",
                "147.96"
            ],
            [
                57,
                "Open Project",
                "1168.32"
            ],
            [
                57,
                "Open Project",
                "25.41"
            ],
            [
                57,
                "Open Project",
                "930.14"
            ],
            [
                57,
                "Open Project",
                "11130.23"
            ],
            [
                57,
                "Open Project",
                "199.52"
            ],
            [
                192,
                "Private Project",
                "658.26"
            ],
            [
                192,
                "Private Project",
                "745.817"
            ],
            [
                192,
                "Private Project",
                "6352.31"
            ],
            [
                192,
                "Private Project",
                "127.9"
            ],
            [
                192,
                "Private Project",
                "1230.454"
            ],
            [
                192,
                "Private Project",
                "12223.93"
            ]
        ]
    },
    {
        "question": "Show all statement id and the number of accounts for each statement.",
        "query": "MATCH (accounts:`cre_Docs_and_Epenses.Accounts`)\nWITH accounts.Statement_ID AS Statement_ID, count(accounts.Statement_ID) AS count\nRETURN Statement_ID,count",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                57,
                9
            ],
            [
                192,
                6
            ]
        ]
    },
    {
        "question": "What are the different statement ids on accounts, and the number of accounts for each?",
        "query": "MATCH (accounts:`cre_Docs_and_Epenses.Accounts`)\nWITH accounts.Statement_ID AS Statement_ID, count(accounts.Statement_ID) AS count\nRETURN Statement_ID,count",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                57,
                9
            ],
            [
                192,
                6
            ]
        ]
    },
    {
        "question": "Show the statement id and the statement detail for the statement with most number of accounts.",
        "query": "MATCH (T1:`cre_Docs_and_Epenses.Accounts`)-[]-(T2:`cre_Docs_and_Epenses.Statements`)\nWITH count(T1.Statement_ID) AS count, T1.Statement_ID AS Statement_ID, T2.Statement_Details AS Statement_Details\nRETURN Statement_ID,Statement_Details\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                57,
                "Open Project"
            ]
        ]
    },
    {
        "question": "What are the statement id and statement detail for the statement that has the most corresponding accounts?",
        "query": "MATCH (T1:`cre_Docs_and_Epenses.Accounts`)-[]-(T2:`cre_Docs_and_Epenses.Statements`)\nWITH count(T1.Statement_ID) AS count, T1.Statement_ID AS Statement_ID, T2.Statement_Details AS Statement_Details\nRETURN Statement_ID,Statement_Details\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                57,
                "Open Project"
            ]
        ]
    },
    {
        "question": "Show the number of documents.",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nRETURN count(*)",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Count the number of documents.",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nRETURN count(*)",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nWHERE documents.Document_Name = 'Noel CV' OR documents.Document_Name = 'King Book'\nRETURN documents.Document_Type_Code,documents.Document_Name,documents.Document_Description",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                "BK",
                "Noel CV",
                null
            ],
            [
                "PP",
                "King Book",
                null
            ]
        ]
    },
    {
        "question": "What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nWHERE documents.Document_Name = 'Noel CV' OR documents.Document_Name = 'King Book'\nRETURN documents.Document_Type_Code,documents.Document_Name,documents.Document_Description",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                "BK",
                "Noel CV",
                null
            ],
            [
                "PP",
                "King Book",
                null
            ]
        ]
    },
    {
        "question": "Show the ids and names of all documents.",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nRETURN documents.Document_ID,documents.Document_Name",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                29,
                "Review on UK files"
            ],
            [
                42,
                "Review on Canadian files"
            ],
            [
                57,
                "Review on French files"
            ],
            [
                121,
                "Review on USA files"
            ],
            [
                181,
                "Chapter on private files"
            ],
            [
                192,
                "Book on USA files"
            ],
            [
                226,
                "Review on UK files"
            ],
            [
                227,
                "Deontae files"
            ],
            [
                240,
                "Winona Book"
            ],
            [
                300,
                "Trenton Presentation"
            ],
            [
                309,
                "Noel CV"
            ],
            [
                318,
                "King Book"
            ],
            [
                367,
                "Jevon Paper"
            ],
            [
                371,
                "Katheryn statement"
            ],
            [
                383,
                "Review on UK files"
            ]
        ]
    },
    {
        "question": "What are the ids and names for each of the documents?",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nRETURN documents.Document_ID,documents.Document_Name",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                29,
                "Review on UK files"
            ],
            [
                42,
                "Review on Canadian files"
            ],
            [
                57,
                "Review on French files"
            ],
            [
                121,
                "Review on USA files"
            ],
            [
                181,
                "Chapter on private files"
            ],
            [
                192,
                "Book on USA files"
            ],
            [
                226,
                "Review on UK files"
            ],
            [
                227,
                "Deontae files"
            ],
            [
                240,
                "Winona Book"
            ],
            [
                300,
                "Trenton Presentation"
            ],
            [
                309,
                "Noel CV"
            ],
            [
                318,
                "King Book"
            ],
            [
                367,
                "Jevon Paper"
            ],
            [
                371,
                "Katheryn statement"
            ],
            [
                383,
                "Review on UK files"
            ]
        ]
    },
    {
        "question": "Find names and ids of all documents with document type code BK.",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nWHERE documents.Document_Type_Code = 'BK'\nRETURN documents.Document_Name,documents.Document_ID",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                "Review on Canadian files",
                42
            ],
            [
                "Review on USA files",
                121
            ],
            [
                "Review on UK files",
                226
            ],
            [
                "Deontae files",
                227
            ],
            [
                "Winona Book",
                240
            ],
            [
                "Noel CV",
                309
            ]
        ]
    },
    {
        "question": "What are the names and ids of documents that have the type code BK?",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nWHERE documents.Document_Type_Code = 'BK'\nRETURN documents.Document_Name,documents.Document_ID",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                "Review on Canadian files",
                42
            ],
            [
                "Review on USA files",
                121
            ],
            [
                "Review on UK files",
                226
            ],
            [
                "Deontae files",
                227
            ],
            [
                "Winona Book",
                240
            ],
            [
                "Noel CV",
                309
            ]
        ]
    },
    {
        "question": "How many documents are with document type code BK for each product id?",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nWHERE documents.Document_Type_Code = 'BK'\nWITH documents.Project_ID AS Project_ID, count(documents.Project_ID) AS count\nRETURN count,Project_ID",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                3,
                105
            ],
            [
                2,
                30
            ],
            [
                1,
                35
            ]
        ]
    },
    {
        "question": "Count the number of documents with the type code BK that correspond to each product id.",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nWHERE documents.Document_Type_Code = 'BK'\nWITH documents.Project_ID AS Project_ID, count(documents.Project_ID) AS count\nRETURN count,Project_ID",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                3,
                105
            ],
            [
                2,
                30
            ],
            [
                1,
                35
            ]
        ]
    },
    {
        "question": "Show project ids and the number of documents in each project.",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nWITH documents.Project_ID AS Project_ID, count(documents.Project_ID) AS count\nRETURN Project_ID,count",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                30,
                3
            ],
            [
                105,
                5
            ],
            [
                195,
                1
            ],
            [
                134,
                3
            ],
            [
                35,
                3
            ]
        ]
    },
    {
        "question": "How many documents correspond with each project id?",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nWITH documents.Project_ID AS Project_ID, count(documents.Project_ID) AS count\nRETURN Project_ID,count",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                30,
                3
            ],
            [
                105,
                5
            ],
            [
                195,
                1
            ],
            [
                134,
                3
            ],
            [
                35,
                3
            ]
        ]
    },
    {
        "question": "What is the id of the project with least number of documents?",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nWITH documents.Project_ID AS Project_ID, count(documents.Project_ID) AS count\nRETURN Project_ID\nORDER BY count ASC\nLIMIT 1",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                195
            ]
        ]
    },
    {
        "question": "Return the id of the project that has the fewest corresponding documents.",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nWITH documents.Project_ID AS Project_ID, count(documents.Project_ID) AS count\nRETURN Project_ID\nORDER BY count ASC\nLIMIT 1",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                195
            ]
        ]
    },
    {
        "question": "Show the ids for projects with at least 2 documents.",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nWITH count(*) AS count, documents.Project_ID AS Project_ID\nWHERE count  >= 2\nRETURN Project_ID",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                30
            ],
            [
                105
            ],
            [
                134
            ],
            [
                35
            ]
        ]
    },
    {
        "question": "What are project ids of projects that have 2 or more corresponding documents?",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nWITH count(*) AS count, documents.Project_ID AS Project_ID\nWHERE count  >= 2\nRETURN Project_ID",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                30
            ],
            [
                105
            ],
            [
                134
            ],
            [
                35
            ]
        ]
    },
    {
        "question": "List document type codes and the number of documents in each code.",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nWITH documents.Document_Type_Code AS Document_Type_Code, count(documents.Document_Type_Code) AS count\nRETURN Document_Type_Code,count",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                "CV",
                3
            ],
            [
                "BK",
                6
            ],
            [
                "PP",
                5
            ],
            [
                "FM",
                1
            ]
        ]
    },
    {
        "question": "How many documents are there of each type?",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nWITH documents.Document_Type_Code AS Document_Type_Code, count(documents.Document_Type_Code) AS count\nRETURN Document_Type_Code,count",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                "CV",
                3
            ],
            [
                "BK",
                6
            ],
            [
                "PP",
                5
            ],
            [
                "FM",
                1
            ]
        ]
    },
    {
        "question": "What is the document type code with most number of documents?",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nWITH documents.Document_Type_Code AS Document_Type_Code, count(documents.Document_Type_Code) AS count\nRETURN Document_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                "BK"
            ]
        ]
    },
    {
        "question": "Return the code of the document type that is most common.",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nWITH documents.Document_Type_Code AS Document_Type_Code, count(documents.Document_Type_Code) AS count\nRETURN Document_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                "BK"
            ]
        ]
    },
    {
        "question": "Show the document type code with fewer than 3 documents.",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nWITH documents.Document_Type_Code AS Document_Type_Code, count(*) AS count\nWHERE count  < 3\nRETURN Document_Type_Code",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                "FM"
            ]
        ]
    },
    {
        "question": "What are the codes corresponding to document types for which there are less than 3 documents?",
        "query": "MATCH (documents:`cre_Docs_and_Epenses.Documents`)\nWITH documents.Document_Type_Code AS Document_Type_Code, count(*) AS count\nWHERE count  < 3\nRETURN Document_Type_Code",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                "FM"
            ]
        ]
    },
    {
        "question": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.",
        "query": "MATCH (T1:`cre_Docs_and_Epenses.Statements`)-[]-(T2:`cre_Docs_and_Epenses.Documents`)\nWHERE T1.Statement_Details = 'Private Project'\nRETURN T1.Statement_Details,T2.Document_Name",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                "Private Project",
                "Book on USA files"
            ]
        ]
    },
    {
        "question": "What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents?",
        "query": "MATCH (T1:`cre_Docs_and_Epenses.Statements`)-[]-(T2:`cre_Docs_and_Epenses.Documents`)\nWHERE T1.Statement_Details = 'Private Project'\nRETURN T1.Statement_Details,T2.Document_Name",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                "Private Project",
                "Book on USA files"
            ]
        ]
    },
    {
        "question": "Show all document type codes, document type names, document type descriptions.",
        "query": "MATCH (ref_document_types:`cre_Docs_and_Epenses.Ref_Document_Types`)\nRETURN ref_document_types.Document_Type_Code,ref_document_types.Document_Type_Name,ref_document_types.Document_Type_Description",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                "BK",
                "Book",
                "excellent"
            ],
            [
                "CV",
                "CV",
                "excellent"
            ],
            [
                "PT",
                "Presentation",
                "very good"
            ],
            [
                "PP",
                "Paper",
                "good"
            ],
            [
                "FM",
                "Film",
                "fun"
            ]
        ]
    },
    {
        "question": "What are the codes, names, and descriptions of the different document types?",
        "query": "MATCH (ref_document_types:`cre_Docs_and_Epenses.Ref_Document_Types`)\nRETURN ref_document_types.Document_Type_Code,ref_document_types.Document_Type_Name,ref_document_types.Document_Type_Description",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                "BK",
                "Book",
                "excellent"
            ],
            [
                "CV",
                "CV",
                "excellent"
            ],
            [
                "PT",
                "Presentation",
                "very good"
            ],
            [
                "PP",
                "Paper",
                "good"
            ],
            [
                "FM",
                "Film",
                "fun"
            ]
        ]
    },
    {
        "question": "What is the document type description for document type named Film?",
        "query": "MATCH (ref_document_types:`cre_Docs_and_Epenses.Ref_Document_Types`)\nWHERE ref_document_types.Document_Type_Name = 'Film'\nRETURN ref_document_types.Document_Type_Description",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                "fun"
            ]
        ]
    },
    {
        "question": "Return the description of the document type name 'Film'.",
        "query": "MATCH (ref_document_types:`cre_Docs_and_Epenses.Ref_Document_Types`)\nWHERE ref_document_types.Document_Type_Name = 'Film'\nRETURN ref_document_types.Document_Type_Description",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                "fun"
            ]
        ]
    },
    {
        "question": "Show the number of projects.",
        "query": "MATCH (projects:`cre_Docs_and_Epenses.Projects`)\nRETURN count(*)",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "How many projects are there?",
        "query": "MATCH (projects:`cre_Docs_and_Epenses.Projects`)\nRETURN count(*)",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "List ids and details for all projects.",
        "query": "MATCH (projects:`cre_Docs_and_Epenses.Projects`)\nRETURN projects.Project_ID,projects.Project_Details",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                30,
                "Society Research project"
            ],
            [
                35,
                "Internet of Things project"
            ],
            [
                105,
                "Graph Database project"
            ],
            [
                134,
                "Human Resource project"
            ],
            [
                195,
                "Population Research project"
            ]
        ]
    },
    {
        "question": "What are the ids and details for each project?",
        "query": "MATCH (projects:`cre_Docs_and_Epenses.Projects`)\nRETURN projects.Project_ID,projects.Project_Details",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                30,
                "Society Research project"
            ],
            [
                35,
                "Internet of Things project"
            ],
            [
                105,
                "Graph Database project"
            ],
            [
                134,
                "Human Resource project"
            ],
            [
                195,
                "Population Research project"
            ]
        ]
    },
    {
        "question": "How many budget types do we have?",
        "query": "MATCH (ref_budget_codes:`cre_Docs_and_Epenses.Ref_Budget_Codes`)\nRETURN count(*)",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Count the number of budget codes.",
        "query": "MATCH (ref_budget_codes:`cre_Docs_and_Epenses.Ref_Budget_Codes`)\nRETURN count(*)",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "List all budget type codes and descriptions.",
        "query": "MATCH (ref_budget_codes:`cre_Docs_and_Epenses.Ref_Budget_Codes`)\nRETURN ref_budget_codes.Budget_Type_Code,ref_budget_codes.Budget_Type_Description",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                "GV",
                "Government"
            ],
            [
                "ORG",
                "Organisation"
            ],
            [
                "SF",
                "Self founded"
            ]
        ]
    },
    {
        "question": "What are the type codes and descriptions of each budget type?",
        "query": "MATCH (ref_budget_codes:`cre_Docs_and_Epenses.Ref_Budget_Codes`)\nRETURN ref_budget_codes.Budget_Type_Code,ref_budget_codes.Budget_Type_Description",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                "GV",
                "Government"
            ],
            [
                "ORG",
                "Organisation"
            ],
            [
                "SF",
                "Self founded"
            ]
        ]
    },
    {
        "question": "What is the description for the budget type with code ORG?",
        "query": "MATCH (ref_budget_codes:`cre_Docs_and_Epenses.Ref_Budget_Codes`)\nWHERE ref_budget_codes.Budget_Type_Code = 'ORG'\nRETURN ref_budget_codes.Budget_Type_Description",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                "Organisation"
            ]
        ]
    },
    {
        "question": "Return the description of the budget type that has the code ORG.",
        "query": "MATCH (ref_budget_codes:`cre_Docs_and_Epenses.Ref_Budget_Codes`)\nWHERE ref_budget_codes.Budget_Type_Code = 'ORG'\nRETURN ref_budget_codes.Budget_Type_Description",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                "Organisation"
            ]
        ]
    },
    {
        "question": "How many documents have expenses?",
        "query": "MATCH (documents_with_expenses:`cre_Docs_and_Epenses.Documents_with_Expenses`)\nRETURN count(*)",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "Count the number of documents with expenses.",
        "query": "MATCH (documents_with_expenses:`cre_Docs_and_Epenses.Documents_with_Expenses`)\nRETURN count(*)",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "What are the document ids for the budget type code 'SF'?",
        "query": "MATCH (documents_with_expenses:`cre_Docs_and_Epenses.Documents_with_Expenses`)\nWHERE documents_with_expenses.Budget_Type_Code = 'SF'\nRETURN documents_with_expenses.Document_ID",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                309
            ],
            [
                367
            ]
        ]
    },
    {
        "question": "Give the ids of documents with expenses that have the budget code 'SF'.",
        "query": "MATCH (documents_with_expenses:`cre_Docs_and_Epenses.Documents_with_Expenses`)\nWHERE documents_with_expenses.Budget_Type_Code = 'SF'\nRETURN documents_with_expenses.Document_ID",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                309
            ],
            [
                367
            ]
        ]
    },
    {
        "question": "Show budget type codes and the number of documents in each budget type.",
        "query": "MATCH (documents_with_expenses:`cre_Docs_and_Epenses.Documents_with_Expenses`)\nWITH count(documents_with_expenses.Budget_Type_Code) AS count, documents_with_expenses.Budget_Type_Code AS Budget_Type_Code\nRETURN Budget_Type_Code,count",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                "GV",
                6
            ],
            [
                "SF",
                2
            ],
            [
                "ORG",
                2
            ]
        ]
    },
    {
        "question": "What are the different budget type codes, and how many documents are there for each?",
        "query": "MATCH (documents_with_expenses:`cre_Docs_and_Epenses.Documents_with_Expenses`)\nWITH count(documents_with_expenses.Budget_Type_Code) AS count, documents_with_expenses.Budget_Type_Code AS Budget_Type_Code\nRETURN Budget_Type_Code,count",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                "GV",
                6
            ],
            [
                "SF",
                2
            ],
            [
                "ORG",
                2
            ]
        ]
    },
    {
        "question": "What is the budget type code with most number of documents.",
        "query": "MATCH (documents_with_expenses:`cre_Docs_and_Epenses.Documents_with_Expenses`)\nWITH count(documents_with_expenses.Budget_Type_Code) AS count, documents_with_expenses.Budget_Type_Code AS Budget_Type_Code\nRETURN Budget_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                "GV"
            ]
        ]
    },
    {
        "question": "Give the budget type code that is most common among documents with expenses.",
        "query": "MATCH (documents_with_expenses:`cre_Docs_and_Epenses.Documents_with_Expenses`)\nWITH count(documents_with_expenses.Budget_Type_Code) AS count, documents_with_expenses.Budget_Type_Code AS Budget_Type_Code\nRETURN Budget_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Docs_and_Epenses",
        "answers": [
            [
                "GV"
            ]
        ]
    },
    {
        "question": "Find the total number of scientists.",
        "query": "MATCH (scientists:`scientist_1.Scientists`)\nRETURN count(*)",
        "db_id": "scientist_1",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "question": "How many scientists are there?",
        "query": "MATCH (scientists:`scientist_1.Scientists`)\nRETURN count(*)",
        "db_id": "scientist_1",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "question": "Find the number of distinct projects.",
        "query": "MATCH (projects:`scientist_1.Projects`)\nRETURN count(DISTINCT projects.Name)",
        "db_id": "scientist_1",
        "answers": [
            [
                14
            ]
        ]
    },
    {
        "question": "How many different projects are there?",
        "query": "MATCH (projects:`scientist_1.Projects`)\nRETURN count(DISTINCT projects.Name)",
        "db_id": "scientist_1",
        "answers": [
            [
                14
            ]
        ]
    },
    {
        "question": "Find the name of project that continues for the longest time.",
        "query": "MATCH (projects:`scientist_1.Projects`)\nRETURN projects.Name\nORDER BY projects.Hours DESC\nLIMIT 1",
        "db_id": "scientist_1",
        "answers": [
            [
                "A Magnetic Primer Designer"
            ]
        ]
    },
    {
        "question": "What is the name of the project with the most hours?",
        "query": "MATCH (projects:`scientist_1.Projects`)\nRETURN projects.Name\nORDER BY projects.Hours DESC\nLIMIT 1",
        "db_id": "scientist_1",
        "answers": [
            [
                "A Magnetic Primer Designer"
            ]
        ]
    },
    {
        "question": "Find the name of projects that require between 100 and 300 hours of work.",
        "query": "MATCH (projects:`scientist_1.Projects`)\nWHERE 100<=projects.Hours<=300\nRETURN projects.Name",
        "db_id": "scientist_1",
        "answers": [
            [
                "Winds: Studying Bernoullis Principle"
            ],
            [
                "Aerodynamics and Bridge Design"
            ],
            [
                "Aerodynamics and Gas Mileage"
            ],
            [
                "A Matter of Time"
            ],
            [
                "A Puzzling Parallax"
            ]
        ]
    },
    {
        "question": "What are the names of projects that require between 100 and 300 hours?",
        "query": "MATCH (projects:`scientist_1.Projects`)\nWHERE 100<=projects.Hours<=300\nRETURN projects.Name",
        "db_id": "scientist_1",
        "answers": [
            [
                "Winds: Studying Bernoullis Principle"
            ],
            [
                "Aerodynamics and Bridge Design"
            ],
            [
                "Aerodynamics and Gas Mileage"
            ],
            [
                "A Matter of Time"
            ],
            [
                "A Puzzling Parallax"
            ]
        ]
    },
    {
        "question": "List the names of all scientists sorted in alphabetical order.",
        "query": "MATCH (scientists:`scientist_1.Scientists`)\nRETURN scientists.Name\nORDER BY scientists.Name",
        "db_id": "scientist_1",
        "answers": [
            [
                "Anand Manikutty"
            ],
            [
                "Carol Smith"
            ],
            [
                "David Smith"
            ],
            [
                "Elizabeth Doe"
            ],
            [
                "Eric Goldsmith"
            ],
            [
                "George ODonnell"
            ],
            [
                "Joe Stevens"
            ],
            [
                "John Doe"
            ],
            [
                "Kumar Swamy"
            ],
            [
                "Mary-Anne Foster"
            ],
            [
                "Michael Rogers"
            ],
            [
                "Zacary Efron"
            ]
        ]
    },
    {
        "question": "What are the names of all the scientists in alphabetical order?",
        "query": "MATCH (scientists:`scientist_1.Scientists`)\nRETURN scientists.Name\nORDER BY scientists.Name",
        "db_id": "scientist_1",
        "answers": [
            [
                "Anand Manikutty"
            ],
            [
                "Carol Smith"
            ],
            [
                "David Smith"
            ],
            [
                "Elizabeth Doe"
            ],
            [
                "Eric Goldsmith"
            ],
            [
                "George ODonnell"
            ],
            [
                "Joe Stevens"
            ],
            [
                "John Doe"
            ],
            [
                "Kumar Swamy"
            ],
            [
                "Mary-Anne Foster"
            ],
            [
                "Michael Rogers"
            ],
            [
                "Zacary Efron"
            ]
        ]
    },
    {
        "question": "Find the number of scientists involved for each project name.",
        "query": "MATCH (T1:`scientist_1.Projects`)-[T2:`scientist_1.AssignedTo`]-()\nWITH T1.Name AS Name, count(T1.Name) AS count\nRETURN count,Name",
        "db_id": "scientist_1",
        "answers": [
            [
                1,
                "Winds: Studying Bernoullis Principle"
            ],
            [
                2,
                "Aerodynamics and Gas Mileage"
            ],
            [
                1,
                "Aerodynamics and Ice Hockey"
            ],
            [
                1,
                "A Matter of Time"
            ],
            [
                1,
                "A Puzzling Parallax"
            ],
            [
                3,
                "Build Your Own Telescope"
            ],
            [
                1,
                "Juicy: Extracting Apple Juice with Pectinase"
            ],
            [
                2,
                "A Silver-Cleaning Battery"
            ]
        ]
    },
    {
        "question": "What are the naems of all the projects, and how many scientists were assigned to each of them?",
        "query": "MATCH (T1:`scientist_1.Projects`)-[T2:`scientist_1.AssignedTo`]-()\nWITH T1.Name AS Name, count(T1.Name) AS count\nRETURN count,Name",
        "db_id": "scientist_1",
        "answers": [
            [
                1,
                "Winds: Studying Bernoullis Principle"
            ],
            [
                2,
                "Aerodynamics and Gas Mileage"
            ],
            [
                1,
                "Aerodynamics and Ice Hockey"
            ],
            [
                1,
                "A Matter of Time"
            ],
            [
                1,
                "A Puzzling Parallax"
            ],
            [
                3,
                "Build Your Own Telescope"
            ],
            [
                1,
                "Juicy: Extracting Apple Juice with Pectinase"
            ],
            [
                2,
                "A Silver-Cleaning Battery"
            ]
        ]
    },
    {
        "question": "Find the number of scientists involved for the projects that require more than 300 hours.",
        "query": "MATCH (T1:`scientist_1.Projects`)-[T2:`scientist_1.AssignedTo`]-()\nWHERE T1.Hours > 300\nWITH T1.Name AS Name, count(T1.Name) AS count\nRETURN count,Name",
        "db_id": "scientist_1",
        "answers": [
            [
                1,
                "Aerodynamics and Ice Hockey"
            ],
            [
                3,
                "Build Your Own Telescope"
            ],
            [
                1,
                "Juicy: Extracting Apple Juice with Pectinase"
            ],
            [
                2,
                "A Silver-Cleaning Battery"
            ]
        ]
    },
    {
        "question": "What are the names of projects that require more than 300 hours, and how many scientists are assigned to each?",
        "query": "MATCH (T1:`scientist_1.Projects`)-[T2:`scientist_1.AssignedTo`]-()\nWHERE T1.Hours > 300\nWITH T1.Name AS Name, count(T1.Name) AS count\nRETURN count,Name",
        "db_id": "scientist_1",
        "answers": [
            [
                1,
                "Aerodynamics and Ice Hockey"
            ],
            [
                3,
                "Build Your Own Telescope"
            ],
            [
                1,
                "Juicy: Extracting Apple Juice with Pectinase"
            ],
            [
                2,
                "A Silver-Cleaning Battery"
            ]
        ]
    },
    {
        "question": "Find the number of projects which each scientist is working on and scientist's name.",
        "query": "MATCH (T1:`scientist_1.Scientists`)-[T2:`scientist_1.AssignedTo`]-()\nWITH T1.Name AS Name, count(T1.Name) AS count\nRETURN count,Name",
        "db_id": "scientist_1",
        "answers": [
            [
                1,
                "Michael Rogers"
            ],
            [
                1,
                "Anand Manikutty"
            ],
            [
                1,
                "Carol Smith"
            ],
            [
                1,
                "Joe Stevens"
            ],
            [
                1,
                "Mary-Anne Foster"
            ],
            [
                1,
                "George ODonnell"
            ],
            [
                1,
                "John Doe"
            ],
            [
                1,
                "David Smith"
            ],
            [
                1,
                "Zacary Efron"
            ],
            [
                1,
                "Eric Goldsmith"
            ],
            [
                1,
                "Elizabeth Doe"
            ],
            [
                1,
                "Kumar Swamy"
            ]
        ]
    },
    {
        "question": "What are the names of the scientists, and how many projects are each of them working on?",
        "query": "MATCH (T1:`scientist_1.Scientists`)-[T2:`scientist_1.AssignedTo`]-()\nWITH T1.Name AS Name, count(T1.Name) AS count\nRETURN count,Name",
        "db_id": "scientist_1",
        "answers": [
            [
                1,
                "Michael Rogers"
            ],
            [
                1,
                "Anand Manikutty"
            ],
            [
                1,
                "Carol Smith"
            ],
            [
                1,
                "Joe Stevens"
            ],
            [
                1,
                "Mary-Anne Foster"
            ],
            [
                1,
                "George ODonnell"
            ],
            [
                1,
                "John Doe"
            ],
            [
                1,
                "David Smith"
            ],
            [
                1,
                "Zacary Efron"
            ],
            [
                1,
                "Eric Goldsmith"
            ],
            [
                1,
                "Elizabeth Doe"
            ],
            [
                1,
                "Kumar Swamy"
            ]
        ]
    },
    {
        "question": "Find the name of scientists who are assigned to some project.",
        "query": "MATCH ()-[T1:`scientist_1.AssignedTo`]-(T2:`scientist_1.Scientists`)\nRETURN T2.Name",
        "db_id": "scientist_1",
        "answers": [
            [
                "Michael Rogers"
            ],
            [
                "Anand Manikutty"
            ],
            [
                "Carol Smith"
            ],
            [
                "Joe Stevens"
            ],
            [
                "Mary-Anne Foster"
            ],
            [
                "George ODonnell"
            ],
            [
                "John Doe"
            ],
            [
                "David Smith"
            ],
            [
                "Zacary Efron"
            ],
            [
                "Eric Goldsmith"
            ],
            [
                "Elizabeth Doe"
            ],
            [
                "Kumar Swamy"
            ]
        ]
    },
    {
        "question": "What are the names of scientists who are assigned to any project?",
        "query": "MATCH ()-[T1:`scientist_1.AssignedTo`]-(T2:`scientist_1.Scientists`)\nRETURN T2.Name",
        "db_id": "scientist_1",
        "answers": [
            [
                "Michael Rogers"
            ],
            [
                "Anand Manikutty"
            ],
            [
                "Carol Smith"
            ],
            [
                "Joe Stevens"
            ],
            [
                "Mary-Anne Foster"
            ],
            [
                "George ODonnell"
            ],
            [
                "John Doe"
            ],
            [
                "David Smith"
            ],
            [
                "Zacary Efron"
            ],
            [
                "Eric Goldsmith"
            ],
            [
                "Elizabeth Doe"
            ],
            [
                "Kumar Swamy"
            ]
        ]
    },
    {
        "question": "Select the project names which are not assigned yet.",
        "query": "MATCH (projects:`scientist_1.Projects`)\nWHERE NOT (projects:`scientist_1.Projects`)-[:`scientist_1.AssignedTo`]-()\nRETURN projects.Name",
        "db_id": "scientist_1",
        "answers": [
            [
                "Aerodynamics and Bridge Design"
            ],
            [
                "Aerodynamics of a Football"
            ],
            [
                "Aerodynamics of Air Hockey"
            ],
            [
                "A Magnetic Primer Designer"
            ],
            [
                "Bacterial Transformation Efficiency"
            ],
            [
                "A Soluble Separation Solution"
            ]
        ]
    },
    {
        "question": "What are the names of projects that have not been assigned?",
        "query": "MATCH (projects:`scientist_1.Projects`)\nWHERE NOT (projects:`scientist_1.Projects`)-[:`scientist_1.AssignedTo`]-()\nRETURN projects.Name",
        "db_id": "scientist_1",
        "answers": [
            [
                "Aerodynamics and Bridge Design"
            ],
            [
                "Aerodynamics of a Football"
            ],
            [
                "Aerodynamics of Air Hockey"
            ],
            [
                "A Magnetic Primer Designer"
            ],
            [
                "Bacterial Transformation Efficiency"
            ],
            [
                "A Soluble Separation Solution"
            ]
        ]
    },
    {
        "question": "Find the number of scientists who are not assigned to any project.",
        "query": "MATCH (scientists:`scientist_1.Scientists`)\nWHERE NOT (scientists:`scientist_1.Scientists`)-[:`scientist_1.AssignedTo`]-()\nRETURN count(*)",
        "db_id": "scientist_1",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many scientists do not have any projects assigned to them?",
        "query": "MATCH (scientists:`scientist_1.Scientists`)\nWHERE NOT (scientists:`scientist_1.Scientists`)-[:`scientist_1.AssignedTo`]-()\nRETURN count(*)",
        "db_id": "scientist_1",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name.",
        "query": "MATCH (T1:`scientist_1.Scientists`)-[T2:`scientist_1.AssignedTo`]-(T3:`scientist_1.Projects`)\nRETURN T1.Name,T3.Name,T3.Hours\nORDER BY T3.Name,T1.Name",
        "db_id": "scientist_1",
        "answers": [
            [
                "Elizabeth Doe",
                "A Matter of Time",
                112
            ],
            [
                "Kumar Swamy",
                "A Puzzling Parallax",
                299
            ],
            [
                "John Doe",
                "A Silver-Cleaning Battery",
                545
            ],
            [
                "Zacary Efron",
                "A Silver-Cleaning Battery",
                545
            ],
            [
                "Anand Manikutty",
                "Aerodynamics and Gas Mileage",
                256
            ],
            [
                "Eric Goldsmith",
                "Aerodynamics and Gas Mileage",
                256
            ],
            [
                "George ODonnell",
                "Aerodynamics and Ice Hockey",
                789
            ],
            [
                "Carol Smith",
                "Build Your Own Telescope",
                6546
            ],
            [
                "David Smith",
                "Build Your Own Telescope",
                6546
            ],
            [
                "Joe Stevens",
                "Build Your Own Telescope",
                6546
            ],
            [
                "Mary-Anne Foster",
                "Juicy: Extracting Apple Juice with Pectinase",
                321
            ],
            [
                "Michael Rogers",
                "Winds: Studying Bernoullis Principle",
                156
            ]
        ]
    },
    {
        "question": "What are the names of each scientist, the names of the projects that they work on, and the hours for each of those projects, listed in alphabetical order by project name, then scientist name.",
        "query": "MATCH (T1:`scientist_1.Scientists`)-[T2:`scientist_1.AssignedTo`]-(T3:`scientist_1.Projects`)\nRETURN T1.Name,T3.Name,T3.Hours\nORDER BY T3.Name,T1.Name",
        "db_id": "scientist_1",
        "answers": [
            [
                "Elizabeth Doe",
                "A Matter of Time",
                112
            ],
            [
                "Kumar Swamy",
                "A Puzzling Parallax",
                299
            ],
            [
                "John Doe",
                "A Silver-Cleaning Battery",
                545
            ],
            [
                "Zacary Efron",
                "A Silver-Cleaning Battery",
                545
            ],
            [
                "Anand Manikutty",
                "Aerodynamics and Gas Mileage",
                256
            ],
            [
                "Eric Goldsmith",
                "Aerodynamics and Gas Mileage",
                256
            ],
            [
                "George ODonnell",
                "Aerodynamics and Ice Hockey",
                789
            ],
            [
                "Carol Smith",
                "Build Your Own Telescope",
                6546
            ],
            [
                "David Smith",
                "Build Your Own Telescope",
                6546
            ],
            [
                "Joe Stevens",
                "Build Your Own Telescope",
                6546
            ],
            [
                "Mary-Anne Foster",
                "Juicy: Extracting Apple Juice with Pectinase",
                321
            ],
            [
                "Michael Rogers",
                "Winds: Studying Bernoullis Principle",
                156
            ]
        ]
    },
    {
        "question": "List the area and county of all appelations.",
        "query": "MATCH (appellations:`wine_1.appellations`)\nRETURN appellations.Area,appellations.County",
        "db_id": "wine_1",
        "answers": [
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "Sierra Foothills",
                "Amador"
            ],
            [
                "N/A",
                "N/A"
            ],
            [
                "North Coast",
                "Mendocino"
            ],
            [
                "Central Coast",
                "San Luis Obispo"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "Sierra Foothills",
                "Calaveras"
            ],
            [
                "California",
                "N/A"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "Central Coast",
                "N/A"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "Central Coast",
                "Monterey"
            ],
            [
                "Santa Cruz Mountains",
                "Contra Costa"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "Central Coast",
                "San Luis Obispo"
            ],
            [
                "Sierra Foothills",
                "Amador"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "Lake"
            ],
            [
                "Central Coast",
                "Santa Barbara"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "Lake"
            ],
            [
                "Santa Cruz Mountains",
                "Alameda"
            ],
            [
                "Central Valley",
                "San Joaquin"
            ],
            [
                "North Coast",
                "Mendocino"
            ],
            [
                "Central Coast",
                "Monterey"
            ],
            [
                "Central Coast",
                "San Benito"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "North Coast",
                "N/A"
            ],
            [
                "North Coast",
                "N/A"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "Central Coast",
                "San Luis Obispo"
            ],
            [
                "North Coast",
                "Lake"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "Central Coast",
                "San Luis Obispo"
            ],
            [
                "Central Coast",
                "Santa Barbara"
            ],
            [
                "Santa Cruz Mountains",
                "N/A"
            ],
            [
                "Central Coast",
                "Monterey"
            ],
            [
                "Central Coast",
                "Santa Barbara"
            ],
            [
                "Central Coast",
                "Santa Barbara"
            ],
            [
                "Sierra Foothills",
                "Amador"
            ],
            [
                "Sierra Foothills",
                "N/A"
            ],
            [
                "North Coast",
                "Solano"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "N/A"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "Central Coast",
                "Santa Barbara"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "Central Valley",
                "Yolo"
            ],
            [
                "North Coast",
                "Napa"
            ]
        ]
    },
    {
        "question": "What are the areas and counties for all appelations?",
        "query": "MATCH (appellations:`wine_1.appellations`)\nRETURN appellations.Area,appellations.County",
        "db_id": "wine_1",
        "answers": [
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "Sierra Foothills",
                "Amador"
            ],
            [
                "N/A",
                "N/A"
            ],
            [
                "North Coast",
                "Mendocino"
            ],
            [
                "Central Coast",
                "San Luis Obispo"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "Sierra Foothills",
                "Calaveras"
            ],
            [
                "California",
                "N/A"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "Central Coast",
                "N/A"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "Central Coast",
                "Monterey"
            ],
            [
                "Santa Cruz Mountains",
                "Contra Costa"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "Central Coast",
                "San Luis Obispo"
            ],
            [
                "Sierra Foothills",
                "Amador"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "Lake"
            ],
            [
                "Central Coast",
                "Santa Barbara"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "Lake"
            ],
            [
                "Santa Cruz Mountains",
                "Alameda"
            ],
            [
                "Central Valley",
                "San Joaquin"
            ],
            [
                "North Coast",
                "Mendocino"
            ],
            [
                "Central Coast",
                "Monterey"
            ],
            [
                "Central Coast",
                "San Benito"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "North Coast",
                "N/A"
            ],
            [
                "North Coast",
                "N/A"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "Central Coast",
                "San Luis Obispo"
            ],
            [
                "North Coast",
                "Lake"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "Central Coast",
                "San Luis Obispo"
            ],
            [
                "Central Coast",
                "Santa Barbara"
            ],
            [
                "Santa Cruz Mountains",
                "N/A"
            ],
            [
                "Central Coast",
                "Monterey"
            ],
            [
                "Central Coast",
                "Santa Barbara"
            ],
            [
                "Central Coast",
                "Santa Barbara"
            ],
            [
                "Sierra Foothills",
                "Amador"
            ],
            [
                "Sierra Foothills",
                "N/A"
            ],
            [
                "North Coast",
                "Solano"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "Sonoma"
            ],
            [
                "North Coast",
                "N/A"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "Central Coast",
                "Santa Barbara"
            ],
            [
                "North Coast",
                "Napa"
            ],
            [
                "Central Valley",
                "Yolo"
            ],
            [
                "North Coast",
                "Napa"
            ]
        ]
    },
    {
        "question": "How many appelations are in Napa Country?",
        "query": "MATCH (appellations:`wine_1.appellations`)\nWHERE appellations.County = 'Napa'\nRETURN count(*)",
        "db_id": "wine_1",
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "question": "Count the number of appelations in Napa County.",
        "query": "MATCH (appellations:`wine_1.appellations`)\nWHERE appellations.County = 'Napa'\nRETURN count(*)",
        "db_id": "wine_1",
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "question": "How many train stations are there?",
        "query": "MATCH (station:`train_station.station`)\nRETURN count(*)",
        "db_id": "train_station",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "question": "Show the name, location, and number of platforms for all stations.",
        "query": "MATCH (station:`train_station.station`)\nRETURN station.Name,station.Location,station.Number_of_Platforms",
        "db_id": "train_station",
        "answers": [
            [
                "London Waterloo",
                "London",
                19
            ],
            [
                "London Victoria",
                "London",
                19
            ],
            [
                "London Bridge",
                "London",
                12
            ],
            [
                "London Liverpool Street",
                "London",
                18
            ],
            [
                "London Euston",
                "London",
                18
            ],
            [
                "London Charing Cross",
                "London",
                6
            ],
            [
                "Birmingham New Street",
                "Birmingham",
                13
            ],
            [
                "London King's Cross",
                "London",
                12
            ],
            [
                "Glasgow Central",
                "Glasgow",
                17
            ],
            [
                "East Croydon",
                "London",
                6
            ],
            [
                "London St Pancras",
                "London",
                15
            ],
            [
                "Stratford",
                "London",
                15
            ]
        ]
    },
    {
        "question": "What are all locations of train stations?",
        "query": "MATCH (station:`train_station.station`)\nRETURN DISTINCT station.Location",
        "db_id": "train_station",
        "answers": [
            [
                "London"
            ],
            [
                "Birmingham"
            ],
            [
                "Glasgow"
            ]
        ]
    },
    {
        "question": "Show the names and total passengers for all train stations not in London.",
        "query": "MATCH (station:`train_station.station`)\nWHERE station.Location <> 'London'\nRETURN station.Name,station.Total_Passengers",
        "db_id": "train_station",
        "answers": [
            [
                "Birmingham New Street",
                36.331
            ],
            [
                "Glasgow Central",
                29.658
            ]
        ]
    },
    {
        "question": "Show the names and main services for train stations that have the top three total number of passengers.",
        "query": "MATCH (station:`train_station.station`)\nRETURN station.Name,station.Main_Services\nORDER BY station.Total_Passengers DESC\nLIMIT 3",
        "db_id": "train_station",
        "answers": [
            [
                "London Waterloo",
                "South Western Main Line West of England Main Line"
            ],
            [
                "London Victoria",
                "Brighton Main Line Chatham Main Line"
            ],
            [
                "London Bridge",
                "South Eastern Main Line Thameslink"
            ]
        ]
    },
    {
        "question": "Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers.",
        "query": "MATCH (station:`train_station.station`)\nWHERE station.Number_of_Platforms >= 15 AND station.Total_Passengers > 25\nRETURN DISTINCT station.Location",
        "db_id": "train_station",
        "answers": [
            [
                "London"
            ],
            [
                "Glasgow"
            ]
        ]
    },
    {
        "question": "Show the location with most number of train stations.",
        "query": "MATCH (station:`train_station.station`)\nWITH count(station.Location) AS count, station.Location AS Location\nRETURN Location\nORDER BY count DESC\nLIMIT 1",
        "db_id": "train_station",
        "answers": [
            [
                "London"
            ]
        ]
    },
    {
        "question": "Show the number of trains",
        "query": "MATCH (train:`train_station.train`)\nRETURN count(*)",
        "db_id": "train_station",
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "question": "show the train name and station name for each train.",
        "query": "MATCH ()-[T1:`train_station.train_station`]-(T2:`train_station.station`)-[]-(T3:`train_station.train`)\nRETURN T2.Name,T3.Name",
        "db_id": "train_station",
        "answers": [
            [
                "London Waterloo",
                "Ananthapuri Express"
            ],
            [
                "London Waterloo",
                "Ananthapuri Express"
            ],
            [
                "London Waterloo",
                "Guruvayur Express"
            ],
            [
                "London Waterloo",
                "Guruvayur Express"
            ],
            [
                "London Waterloo",
                "Guruvayur Express"
            ],
            [
                "London Waterloo",
                "Guruvayur Express"
            ],
            [
                "Glasgow Central",
                "Quilon Fast Passenger"
            ],
            [
                "Glasgow Central",
                "Island Express"
            ],
            [
                "East Croydon",
                "Jayanthi Janatha Express"
            ],
            [
                "East Croydon",
                "Parasuram Express"
            ]
        ]
    },
    {
        "question": "Show all train names and times in stations in London in descending order by train time.",
        "query": "MATCH ()-[T1:`train_station.train_station`]-(T2:`train_station.station`)-[]-(T3:`train_station.train`)\nWHERE T2.Location = 'London'\nRETURN T3.Name,T3.Time\nORDER BY T3.Time DESC",
        "db_id": "train_station",
        "answers": [
            [
                "Guruvayur Express",
                "4:49"
            ],
            [
                "Guruvayur Express",
                "4:49"
            ],
            [
                "Guruvayur Express",
                "22:10"
            ],
            [
                "Guruvayur Express",
                "22:10"
            ],
            [
                "Ananthapuri Express",
                "17:15"
            ],
            [
                "Ananthapuri Express",
                "17:15"
            ],
            [
                "Jayanthi Janatha Express",
                "10:38"
            ],
            [
                "Parasuram Express",
                "04:20"
            ]
        ]
    },
    {
        "question": "Show the station name with greatest number of trains.",
        "query": "MATCH ()-[T1:`train_station.train_station`]-(T2:`train_station.station`)\nWITH count(T1.Station_ID) AS count, T2.Name AS Name\nRETURN Name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "train_station",
        "answers": [
            [
                "London Waterloo"
            ]
        ]
    },
    {
        "question": "Show the station name with at least two trains.",
        "query": "MATCH ()-[T1:`train_station.train_station`]-(T2:`train_station.station`)\nWITH count(*) AS count, T2.Name AS Name\nWHERE count  >= 2\nRETURN Name",
        "db_id": "train_station",
        "answers": [
            [
                "London Waterloo"
            ],
            [
                "Glasgow Central"
            ],
            [
                "East Croydon"
            ]
        ]
    },
    {
        "question": "Show all locations with only 1 station.",
        "query": "MATCH (station:`train_station.station`)\nWITH count(*) AS count, station.Location AS Location\nWHERE count  = 1\nRETURN Location",
        "db_id": "train_station",
        "answers": [
            [
                "Birmingham"
            ],
            [
                "Glasgow"
            ]
        ]
    },
    {
        "question": "Show station names without any trains.",
        "query": "MATCH (station:`train_station.station`)\nWHERE NOT (station:`train_station.station`)-[:`train_station.train_station`]-()\nRETURN station.Name",
        "db_id": "train_station",
        "answers": [
            [
                "London Liverpool Street"
            ],
            [
                "London Charing Cross"
            ],
            [
                "Birmingham New Street"
            ],
            [
                "London St Pancras"
            ],
            [
                "Stratford"
            ]
        ]
    },
    {
        "question": "List the names and locations of all stations ordered by their yearly entry exit and interchange amounts.",
        "query": "MATCH (station:`train_station.station`)\nRETURN station.Name,station.Location\nORDER BY station.Annual_entry_exit,station.Annual_interchanges",
        "db_id": "train_station",
        "answers": [
            [
                "East Croydon",
                "London"
            ],
            [
                "Stratford",
                "London"
            ],
            [
                "London St Pancras",
                "London"
            ],
            [
                "Glasgow Central",
                "Glasgow"
            ],
            [
                "London King's Cross",
                "London"
            ],
            [
                "Birmingham New Street",
                "Birmingham"
            ],
            [
                "London Euston",
                "London"
            ],
            [
                "London Charing Cross",
                "London"
            ],
            [
                "London Bridge",
                "London"
            ],
            [
                "London Liverpool Street",
                "London"
            ],
            [
                "London Victoria",
                "London"
            ],
            [
                "London Waterloo",
                "London"
            ]
        ]
    },
    {
        "question": "List all vehicle id",
        "query": "MATCH (vehicles:`driving_school.Vehicles`)\nRETURN vehicles.vehicle_id",
        "db_id": "driving_school",
        "answers": [
            [
                1
            ],
            [
                2
            ],
            [
                3
            ]
        ]
    },
    {
        "question": "What are the ids of all vehicles?",
        "query": "MATCH (vehicles:`driving_school.Vehicles`)\nRETURN vehicles.vehicle_id",
        "db_id": "driving_school",
        "answers": [
            [
                1
            ],
            [
                2
            ],
            [
                3
            ]
        ]
    },
    {
        "question": "How many vehicle in total?",
        "query": "MATCH (vehicles:`driving_school.Vehicles`)\nRETURN count(*)",
        "db_id": "driving_school",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "How many vehicles exist?",
        "query": "MATCH (vehicles:`driving_school.Vehicles`)\nRETURN count(*)",
        "db_id": "driving_school",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Show the detail of vehicle with id 1.",
        "query": "MATCH (vehicles:`driving_school.Vehicles`)\nWHERE vehicles.vehicle_id = 1\nRETURN vehicles.vehicle_details",
        "db_id": "driving_school",
        "answers": [
            [
                "Van"
            ]
        ]
    },
    {
        "question": "What are the details of the car with id 1?",
        "query": "MATCH (vehicles:`driving_school.Vehicles`)\nWHERE vehicles.vehicle_id = 1\nRETURN vehicles.vehicle_details",
        "db_id": "driving_school",
        "answers": [
            [
                "Van"
            ]
        ]
    },
    {
        "question": "List the first name middle name and last name of all staff.",
        "query": "MATCH (staff:`driving_school.Staff`)\nRETURN staff.first_name,staff.middle_name,staff.last_name",
        "db_id": "driving_school",
        "answers": [
            [
                "Janessa",
                "Amara",
                "Sawayn"
            ],
            [
                "Camylle",
                "Icie",
                "Weissnat"
            ],
            [
                "Kaitlin",
                "Stephania",
                "Mertz"
            ],
            [
                "Rebekah",
                "Sherwood",
                "Hermann"
            ],
            [
                "Jedidiah",
                "Dejon",
                "Herzog"
            ],
            [
                "Eulalia",
                "Tre",
                "Maggio"
            ],
            [
                "Queenie",
                "Madelyn",
                "Macejkovic"
            ],
            [
                "Titus",
                "Duane",
                "Durgan"
            ],
            [
                "Margie",
                "Caesar",
                "Doyle"
            ],
            [
                "Jaleel",
                "Maiya",
                "Rogahn"
            ],
            [
                "Winnifred",
                "Liam",
                "Jast"
            ],
            [
                "Lincoln",
                "Benny",
                "Carroll"
            ],
            [
                "Ernestina",
                "Clarabelle",
                "Mraz"
            ],
            [
                "Ludie",
                "Ulices",
                "Kuphal"
            ],
            [
                "Simeon",
                "Mayra",
                "Turner"
            ]
        ]
    },
    {
        "question": "What are the first, middle, and last names of all staff?",
        "query": "MATCH (staff:`driving_school.Staff`)\nRETURN staff.first_name,staff.middle_name,staff.last_name",
        "db_id": "driving_school",
        "answers": [
            [
                "Janessa",
                "Amara",
                "Sawayn"
            ],
            [
                "Camylle",
                "Icie",
                "Weissnat"
            ],
            [
                "Kaitlin",
                "Stephania",
                "Mertz"
            ],
            [
                "Rebekah",
                "Sherwood",
                "Hermann"
            ],
            [
                "Jedidiah",
                "Dejon",
                "Herzog"
            ],
            [
                "Eulalia",
                "Tre",
                "Maggio"
            ],
            [
                "Queenie",
                "Madelyn",
                "Macejkovic"
            ],
            [
                "Titus",
                "Duane",
                "Durgan"
            ],
            [
                "Margie",
                "Caesar",
                "Doyle"
            ],
            [
                "Jaleel",
                "Maiya",
                "Rogahn"
            ],
            [
                "Winnifred",
                "Liam",
                "Jast"
            ],
            [
                "Lincoln",
                "Benny",
                "Carroll"
            ],
            [
                "Ernestina",
                "Clarabelle",
                "Mraz"
            ],
            [
                "Ludie",
                "Ulices",
                "Kuphal"
            ],
            [
                "Simeon",
                "Mayra",
                "Turner"
            ]
        ]
    },
    {
        "question": "What is the birthday of the staff member with first name as Janessa and last name as Sawayn?",
        "query": "MATCH (staff:`driving_school.Staff`)\nWHERE staff.first_name = 'Janessa' AND staff.last_name = 'Sawayn'\nRETURN staff.date_of_birth",
        "db_id": "driving_school",
        "answers": [
            [
                "2010-12-08 16:55:14"
            ]
        ]
    },
    {
        "question": "What is the date of birth for the staff member named Janessa Sawayn?",
        "query": "MATCH (staff:`driving_school.Staff`)\nWHERE staff.first_name = 'Janessa' AND staff.last_name = 'Sawayn'\nRETURN staff.date_of_birth",
        "db_id": "driving_school",
        "answers": [
            [
                "2010-12-08 16:55:14"
            ]
        ]
    },
    {
        "question": "When did the staff member with first name as Janessa and last name as Sawayn join the company?",
        "query": "MATCH (staff:`driving_school.Staff`)\nWHERE staff.first_name = 'Janessa' AND staff.last_name = 'Sawayn'\nRETURN staff.date_joined_staff",
        "db_id": "driving_school",
        "answers": [
            [
                "2017-04-27 03:21:26"
            ]
        ]
    },
    {
        "question": "When did the staff member named Janessa Sawayn join the company?",
        "query": "MATCH (staff:`driving_school.Staff`)\nWHERE staff.first_name = 'Janessa' AND staff.last_name = 'Sawayn'\nRETURN staff.date_joined_staff",
        "db_id": "driving_school",
        "answers": [
            [
                "2017-04-27 03:21:26"
            ]
        ]
    },
    {
        "question": "When did the staff member with first name as Janessa and last name as Sawayn leave the company?",
        "query": "MATCH (staff:`driving_school.Staff`)\nWHERE staff.first_name = 'Janessa' AND staff.last_name = 'Sawayn'\nRETURN staff.date_left_staff",
        "db_id": "driving_school",
        "answers": [
            [
                "2018-03-23 22:53:12"
            ]
        ]
    },
    {
        "question": "When did the staff member Janessa Sawayn leave the company?",
        "query": "MATCH (staff:`driving_school.Staff`)\nWHERE staff.first_name = 'Janessa' AND staff.last_name = 'Sawayn'\nRETURN staff.date_left_staff",
        "db_id": "driving_school",
        "answers": [
            [
                "2018-03-23 22:53:12"
            ]
        ]
    },
    {
        "question": "How many staff have the first name Ludie?",
        "query": "MATCH (staff:`driving_school.Staff`)\nWHERE staff.first_name = 'Ludie'\nRETURN count(*)",
        "db_id": "driving_school",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "How many employees have a first name of Ludie?",
        "query": "MATCH (staff:`driving_school.Staff`)\nWHERE staff.first_name = 'Ludie'\nRETURN count(*)",
        "db_id": "driving_school",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "What is the nickname of staff with first name as Janessa and last name as Sawayn?",
        "query": "MATCH (staff:`driving_school.Staff`)\nWHERE staff.first_name = 'Janessa' AND staff.last_name = 'Sawayn'\nRETURN staff.nickname",
        "db_id": "driving_school",
        "answers": [
            [
                "thompson.constantin"
            ]
        ]
    },
    {
        "question": "What is the nickname of the employee named Janessa Sawayn?",
        "query": "MATCH (staff:`driving_school.Staff`)\nWHERE staff.first_name = 'Janessa' AND staff.last_name = 'Sawayn'\nRETURN staff.nickname",
        "db_id": "driving_school",
        "answers": [
            [
                "thompson.constantin"
            ]
        ]
    },
    {
        "question": "How many staff in total?",
        "query": "MATCH (staff:`driving_school.Staff`)\nRETURN count(*)",
        "db_id": "driving_school",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "How many employees are there?",
        "query": "MATCH (staff:`driving_school.Staff`)\nRETURN count(*)",
        "db_id": "driving_school",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Which city does staff with first name as Janessa and last name as Sawayn live?",
        "query": "MATCH (T1:`driving_school.Addresses`)-[]-(T2:`driving_school.Staff`)\nWHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'\nRETURN T1.city",
        "db_id": "driving_school",
        "answers": [
            [
                "Damianfort"
            ]
        ]
    },
    {
        "question": "In what city does Janessa Sawayn live?",
        "query": "MATCH (T1:`driving_school.Addresses`)-[]-(T2:`driving_school.Staff`)\nWHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'\nRETURN T1.city",
        "db_id": "driving_school",
        "answers": [
            [
                "Damianfort"
            ]
        ]
    },
    {
        "question": "Which country and state does staff with first name as Janessa and last name as Sawayn lived?",
        "query": "MATCH (T1:`driving_school.Addresses`)-[]-(T2:`driving_school.Staff`)\nWHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'\nRETURN T1.country,T1.state_province_county",
        "db_id": "driving_school",
        "answers": [
            [
                "USA",
                "Connecticut"
            ]
        ]
    },
    {
        "question": "In which country and state does Janessa Sawayn live?",
        "query": "MATCH (T1:`driving_school.Addresses`)-[]-(T2:`driving_school.Staff`)\nWHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'\nRETURN T1.country,T1.state_province_county",
        "db_id": "driving_school",
        "answers": [
            [
                "USA",
                "Connecticut"
            ]
        ]
    },
    {
        "question": "What is the zip code of staff with first name as Janessa and last name as Sawayn lived?",
        "query": "MATCH (T1:`driving_school.Addresses`)-[]-(T2:`driving_school.Staff`)\nWHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'\nRETURN T1.zip_postcode",
        "db_id": "driving_school",
        "answers": [
            [
                "61121"
            ]
        ]
    },
    {
        "question": "What is the zip code of the hosue of the employee named Janessa Sawayn?",
        "query": "MATCH (T1:`driving_school.Addresses`)-[]-(T2:`driving_school.Staff`)\nWHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'\nRETURN T1.zip_postcode",
        "db_id": "driving_school",
        "answers": [
            [
                "61121"
            ]
        ]
    },
    {
        "question": "How many staff live in state Georgia?",
        "query": "MATCH (addresses:`driving_school.Addresses`)\nWHERE addresses.state_province_county = 'Georgia'\nRETURN count(*)",
        "db_id": "driving_school",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "How many employees live in Georgia?",
        "query": "MATCH (addresses:`driving_school.Addresses`)\nWHERE addresses.state_province_county = 'Georgia'\nRETURN count(*)",
        "db_id": "driving_school",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "Find out the first name and last name of staff lived in city Damianfort.",
        "query": "MATCH (T1:`driving_school.Addresses`)-[]-(T2:`driving_school.Staff`)\nWHERE T1.city = 'Damianfort'\nRETURN T2.first_name,T2.last_name",
        "db_id": "driving_school",
        "answers": [
            [
                "Janessa",
                "Sawayn"
            ],
            [
                "Jedidiah",
                "Herzog"
            ]
        ]
    },
    {
        "question": "What is the first and last name of all employees who live in the city Damianfort?",
        "query": "MATCH (T1:`driving_school.Addresses`)-[]-(T2:`driving_school.Staff`)\nWHERE T1.city = 'Damianfort'\nRETURN T2.first_name,T2.last_name",
        "db_id": "driving_school",
        "answers": [
            [
                "Janessa",
                "Sawayn"
            ],
            [
                "Jedidiah",
                "Herzog"
            ]
        ]
    },
    {
        "question": "Which city lives most of staffs? List the city name and number of staffs.",
        "query": "MATCH (T1:`driving_school.Addresses`)-[]-(T2:`driving_school.Staff`)\nWITH T1.city AS city, count(T1.city) AS count\nRETURN city,count\nORDER BY count DESC\nLIMIT 1",
        "db_id": "driving_school",
        "answers": [
            [
                "Port Melyssa",
                4
            ]
        ]
    },
    {
        "question": "In which city do the most employees live and how many of them live there?",
        "query": "MATCH (T1:`driving_school.Addresses`)-[]-(T2:`driving_school.Staff`)\nWITH T1.city AS city, count(T1.city) AS count\nRETURN city,count\nORDER BY count DESC\nLIMIT 1",
        "db_id": "driving_school",
        "answers": [
            [
                "Port Melyssa",
                4
            ]
        ]
    },
    {
        "question": "List the first name and last name of all customers.",
        "query": "MATCH (customers:`driving_school.Customers`)\nRETURN customers.first_name,customers.last_name",
        "db_id": "driving_school",
        "answers": [
            [
                "Carole",
                "Bernhard"
            ],
            [
                "Genevieve",
                "Terry"
            ],
            [
                "Clara",
                "Ortiz"
            ],
            [
                "Jordy",
                "Tromp"
            ],
            [
                "Millie",
                "Bruen"
            ],
            [
                "Amya",
                "Spinka"
            ],
            [
                "Marina",
                "Koelpin"
            ],
            [
                "Dianna",
                "Trantow"
            ],
            [
                "Leif",
                "Mertz"
            ],
            [
                "Rylan",
                "Goodwin"
            ],
            [
                "Ray",
                "Kohler"
            ],
            [
                "Omer",
                "Leuschke"
            ],
            [
                "Sigrid",
                "Schmeler"
            ],
            [
                "Estelle",
                "Grant"
            ],
            [
                "Dameon",
                "Sanford"
            ]
        ]
    },
    {
        "question": "What are the first and last names for all customers?",
        "query": "MATCH (customers:`driving_school.Customers`)\nRETURN customers.first_name,customers.last_name",
        "db_id": "driving_school",
        "answers": [
            [
                "Carole",
                "Bernhard"
            ],
            [
                "Genevieve",
                "Terry"
            ],
            [
                "Clara",
                "Ortiz"
            ],
            [
                "Jordy",
                "Tromp"
            ],
            [
                "Millie",
                "Bruen"
            ],
            [
                "Amya",
                "Spinka"
            ],
            [
                "Marina",
                "Koelpin"
            ],
            [
                "Dianna",
                "Trantow"
            ],
            [
                "Leif",
                "Mertz"
            ],
            [
                "Rylan",
                "Goodwin"
            ],
            [
                "Ray",
                "Kohler"
            ],
            [
                "Omer",
                "Leuschke"
            ],
            [
                "Sigrid",
                "Schmeler"
            ],
            [
                "Estelle",
                "Grant"
            ],
            [
                "Dameon",
                "Sanford"
            ]
        ]
    },
    {
        "question": "List email address and birthday of customer whose first name as Carole.",
        "query": "MATCH (customers:`driving_school.Customers`)\nWHERE customers.first_name = 'Carole'\nRETURN customers.email_address,customers.date_of_birth",
        "db_id": "driving_school",
        "answers": [
            [
                "everette.goyette@example.org",
                "1998-12-15 13:24:40"
            ]
        ]
    },
    {
        "question": "What are the email addresses and date of births for all customers who have a first name of Carole?",
        "query": "MATCH (customers:`driving_school.Customers`)\nWHERE customers.first_name = 'Carole'\nRETURN customers.email_address,customers.date_of_birth",
        "db_id": "driving_school",
        "answers": [
            [
                "everette.goyette@example.org",
                "1998-12-15 13:24:40"
            ]
        ]
    },
    {
        "question": "List phone number and email address of customer with more than 2000 outstanding balance.",
        "query": "MATCH (customers:`driving_school.Customers`)\nWHERE customers.amount_outstanding > 2000\nRETURN customers.phone_number,customers.email_address",
        "db_id": "driving_school",
        "answers": [
            [
                "+14(5)2351480248",
                "huel.jana@example.org"
            ],
            [
                "374-483-2758x85087",
                "hilario.sporer@example.org"
            ],
            [
                "218.550.1362",
                "afranecki@example.com"
            ],
            [
                "1-618-535-9750",
                "asha.kilback@example.org"
            ],
            [
                "1-673-962-8158x7646",
                "kozey.citlalli@example.org"
            ],
            [
                "(662)490-3108",
                "mayert.judy@example.com"
            ],
            [
                "206-054-0689x05861",
                "kroberts@example.org"
            ],
            [
                "753.921.0871",
                "mariela28@example.org"
            ],
            [
                "(297)122-0086",
                "karina.carroll@example.net"
            ],
            [
                "417.136.2900x672",
                "myrl.lind@example.net"
            ],
            [
                "192-395-2411",
                "wehner.harold@example.com"
            ],
            [
                "1-875-045-0806",
                "ehowell@example.com"
            ],
            [
                "(729)396-4354x3576",
                "kitty.hand@example.net"
            ]
        ]
    },
    {
        "question": "What are the phone numbers and email addresses of all customers who have an outstanding balance of more than 2000?",
        "query": "MATCH (customers:`driving_school.Customers`)\nWHERE customers.amount_outstanding > 2000\nRETURN customers.phone_number,customers.email_address",
        "db_id": "driving_school",
        "answers": [
            [
                "+14(5)2351480248",
                "huel.jana@example.org"
            ],
            [
                "374-483-2758x85087",
                "hilario.sporer@example.org"
            ],
            [
                "218.550.1362",
                "afranecki@example.com"
            ],
            [
                "1-618-535-9750",
                "asha.kilback@example.org"
            ],
            [
                "1-673-962-8158x7646",
                "kozey.citlalli@example.org"
            ],
            [
                "(662)490-3108",
                "mayert.judy@example.com"
            ],
            [
                "206-054-0689x05861",
                "kroberts@example.org"
            ],
            [
                "753.921.0871",
                "mariela28@example.org"
            ],
            [
                "(297)122-0086",
                "karina.carroll@example.net"
            ],
            [
                "417.136.2900x672",
                "myrl.lind@example.net"
            ],
            [
                "192-395-2411",
                "wehner.harold@example.com"
            ],
            [
                "1-875-045-0806",
                "ehowell@example.com"
            ],
            [
                "(729)396-4354x3576",
                "kitty.hand@example.net"
            ]
        ]
    },
    {
        "question": "What is the status code, mobile phone number and email address of customer with last name as Kohler or first name as Marina?",
        "query": "MATCH (customers:`driving_school.Customers`)\nWHERE customers.first_name = 'Marina' OR customers.last_name = 'Kohler'\nRETURN customers.customer_status_code,customers.cell_mobile_phone_number,customers.email_address",
        "db_id": "driving_school",
        "answers": [
            [
                "Bad Customer",
                "848-099-2095x785",
                "mayert.judy@example.com"
            ],
            [
                "Good Customer",
                "577-584-4864",
                "karina.carroll@example.net"
            ]
        ]
    },
    {
        "question": "What is the status code, phone number, and email address of the customer whose last name is Kohler or whose first name is Marina?",
        "query": "MATCH (customers:`driving_school.Customers`)\nWHERE customers.first_name = 'Marina' OR customers.last_name = 'Kohler'\nRETURN customers.customer_status_code,customers.cell_mobile_phone_number,customers.email_address",
        "db_id": "driving_school",
        "answers": [
            [
                "Bad Customer",
                "848-099-2095x785",
                "mayert.judy@example.com"
            ],
            [
                "Good Customer",
                "577-584-4864",
                "karina.carroll@example.net"
            ]
        ]
    },
    {
        "question": "When are the birthdays of customer who are classified as 'Good Customer' status?",
        "query": "MATCH (customers:`driving_school.Customers`)\nWHERE customers.customer_status_code = 'Good Customer'\nRETURN customers.date_of_birth",
        "db_id": "driving_school",
        "answers": [
            [
                "1994-06-21 01:34:56"
            ],
            [
                "1993-02-07 05:40:26"
            ],
            [
                "1993-03-08 08:48:42"
            ],
            [
                "1994-05-07 01:32:16"
            ],
            [
                "1988-09-19 14:45:56"
            ],
            [
                "1996-05-23 01:21:54"
            ]
        ]
    },
    {
        "question": "What is the date of birth of every customer whose status code is 'Good Customer'?",
        "query": "MATCH (customers:`driving_school.Customers`)\nWHERE customers.customer_status_code = 'Good Customer'\nRETURN customers.date_of_birth",
        "db_id": "driving_school",
        "answers": [
            [
                "1994-06-21 01:34:56"
            ],
            [
                "1993-02-07 05:40:26"
            ],
            [
                "1993-03-08 08:48:42"
            ],
            [
                "1994-05-07 01:32:16"
            ],
            [
                "1988-09-19 14:45:56"
            ],
            [
                "1996-05-23 01:21:54"
            ]
        ]
    },
    {
        "question": "When did customer with first name as Carole and last name as Bernhard became a customer?",
        "query": "MATCH (customers:`driving_school.Customers`)\nWHERE customers.first_name = 'Carole' AND customers.last_name = 'Bernhard'\nRETURN customers.date_became_customer",
        "db_id": "driving_school",
        "answers": [
            [
                "2016-05-11 17:03:48"
            ]
        ]
    },
    {
        "question": "When did Carole Bernhard first become a customer?",
        "query": "MATCH (customers:`driving_school.Customers`)\nWHERE customers.first_name = 'Carole' AND customers.last_name = 'Bernhard'\nRETURN customers.date_became_customer",
        "db_id": "driving_school",
        "answers": [
            [
                "2016-05-11 17:03:48"
            ]
        ]
    },
    {
        "question": "How many customers in total?",
        "query": "MATCH (customers:`driving_school.Customers`)\nRETURN count(*)",
        "db_id": "driving_school",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "How many customers are there?",
        "query": "MATCH (customers:`driving_school.Customers`)\nRETURN count(*)",
        "db_id": "driving_school",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "List all customer status codes and the number of customers having each status code.",
        "query": "MATCH (customers:`driving_school.Customers`)\nWITH customers.customer_status_code AS customer_status_code, count(customers.customer_status_code) AS count\nRETURN customer_status_code,count",
        "db_id": "driving_school",
        "answers": [
            [
                "Bad Customer",
                9
            ],
            [
                "Good Customer",
                6
            ]
        ]
    },
    {
        "question": "For each customer status code, how many customers are classified that way?",
        "query": "MATCH (customers:`driving_school.Customers`)\nWITH customers.customer_status_code AS customer_status_code, count(customers.customer_status_code) AS count\nRETURN customer_status_code,count",
        "db_id": "driving_school",
        "answers": [
            [
                "Bad Customer",
                9
            ],
            [
                "Good Customer",
                6
            ]
        ]
    },
    {
        "question": "Which customer status code has least number of customers?",
        "query": "MATCH (customers:`driving_school.Customers`)\nWITH customers.customer_status_code AS customer_status_code, count(customers.customer_status_code) AS count\nRETURN customer_status_code\nORDER BY count ASC\nLIMIT 1",
        "db_id": "driving_school",
        "answers": [
            [
                "Good Customer"
            ]
        ]
    },
    {
        "question": "What is the status code with the least number of customers?",
        "query": "MATCH (customers:`driving_school.Customers`)\nWITH customers.customer_status_code AS customer_status_code, count(customers.customer_status_code) AS count\nRETURN customer_status_code\nORDER BY count ASC\nLIMIT 1",
        "db_id": "driving_school",
        "answers": [
            [
                "Good Customer"
            ]
        ]
    },
    {
        "question": "How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?",
        "query": "MATCH (T1:`driving_school.Lessons`)-[]-(T2:`driving_school.Customers`)\nWHERE T2.first_name = 'Rylan' AND T2.last_name = 'Goodwin' AND T1.lesson_status_code = 'Completed'\nRETURN count(*)",
        "db_id": "driving_school",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "How many lessons did the customer Ryan Goodwin complete?",
        "query": "MATCH (T1:`driving_school.Lessons`)-[]-(T2:`driving_school.Customers`)\nWHERE T2.first_name = 'Rylan' AND T2.last_name = 'Goodwin' AND T1.lesson_status_code = 'Completed'\nRETURN count(*)",
        "db_id": "driving_school",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "List the first name and last name of customers have the amount of outstanding between 1000 and 3000.",
        "query": "MATCH (customers:`driving_school.Customers`)\nWHERE 1000<=customers.amount_outstanding<=3000\nRETURN customers.first_name,customers.last_name",
        "db_id": "driving_school",
        "answers": [
            [
                "Rylan",
                "Goodwin"
            ],
            [
                "Omer",
                "Leuschke"
            ],
            [
                "Sigrid",
                "Schmeler"
            ]
        ]
    },
    {
        "question": "What are the first and last names of all customers with between 1000 and 3000 dollars outstanding?",
        "query": "MATCH (customers:`driving_school.Customers`)\nWHERE 1000<=customers.amount_outstanding<=3000\nRETURN customers.first_name,customers.last_name",
        "db_id": "driving_school",
        "answers": [
            [
                "Rylan",
                "Goodwin"
            ],
            [
                "Omer",
                "Leuschke"
            ],
            [
                "Sigrid",
                "Schmeler"
            ]
        ]
    },
    {
        "question": "List first name and last name of customers lived in city Lockmanfurt.",
        "query": "MATCH (T1:`driving_school.Customers`)-[]-(T2:`driving_school.Addresses`)\nWHERE T2.city = 'Lockmanfurt'\nRETURN T1.first_name,T1.last_name",
        "db_id": "driving_school",
        "answers": [
            [
                "Sigrid",
                "Schmeler"
            ]
        ]
    },
    {
        "question": "What are the first and last names of all customers who lived in Lockmanfurt?",
        "query": "MATCH (T1:`driving_school.Customers`)-[]-(T2:`driving_school.Addresses`)\nWHERE T2.city = 'Lockmanfurt'\nRETURN T1.first_name,T1.last_name",
        "db_id": "driving_school",
        "answers": [
            [
                "Sigrid",
                "Schmeler"
            ]
        ]
    },
    {
        "question": "Which country does customer with first name as Carole and last name as Bernhard lived in?",
        "query": "MATCH (T1:`driving_school.Customers`)-[]-(T2:`driving_school.Addresses`)\nWHERE T1.first_name = 'Carole' AND T1.last_name = 'Bernhard'\nRETURN T2.country",
        "db_id": "driving_school",
        "answers": [
            [
                "USA"
            ]
        ]
    },
    {
        "question": "What is the country in which the customer Carole Bernhard lived?",
        "query": "MATCH (T1:`driving_school.Customers`)-[]-(T2:`driving_school.Addresses`)\nWHERE T1.first_name = 'Carole' AND T1.last_name = 'Bernhard'\nRETURN T2.country",
        "db_id": "driving_school",
        "answers": [
            [
                "USA"
            ]
        ]
    },
    {
        "question": "What is zip code of customer with first name as Carole and last name as Bernhard?",
        "query": "MATCH (T1:`driving_school.Customers`)-[]-(T2:`driving_school.Addresses`)\nWHERE T1.first_name = 'Carole' AND T1.last_name = 'Bernhard'\nRETURN T2.zip_postcode",
        "db_id": "driving_school",
        "answers": [
            [
                "75074"
            ]
        ]
    },
    {
        "question": "What is the zip code of the customer Carole Bernhard?",
        "query": "MATCH (T1:`driving_school.Customers`)-[]-(T2:`driving_school.Addresses`)\nWHERE T1.first_name = 'Carole' AND T1.last_name = 'Bernhard'\nRETURN T2.zip_postcode",
        "db_id": "driving_school",
        "answers": [
            [
                "75074"
            ]
        ]
    },
    {
        "question": "Which city does has most number of customers?",
        "query": "MATCH (T1:`driving_school.Customers`)-[]-(T2:`driving_school.Addresses`)\nWITH count(T2.city) AS count, T2.city AS city\nRETURN city\nORDER BY count DESC\nLIMIT 1",
        "db_id": "driving_school",
        "answers": [
            [
                "South Richieport"
            ]
        ]
    },
    {
        "question": "What is the city with the most customers?",
        "query": "MATCH (T1:`driving_school.Customers`)-[]-(T2:`driving_school.Addresses`)\nWITH count(T2.city) AS count, T2.city AS city\nRETURN city\nORDER BY count DESC\nLIMIT 1",
        "db_id": "driving_school",
        "answers": [
            [
                "South Richieport"
            ]
        ]
    },
    {
        "question": "List the number of customers that did not have any payment history.",
        "query": "MATCH (customers:`driving_school.Customers`)\nWHERE NOT (customers:`driving_school.Customers`)-[]-(:`driving_school.Customer_Payments`)\nRETURN count(*)",
        "db_id": "driving_school",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "How many customers have no payment histories?",
        "query": "MATCH (customers:`driving_school.Customers`)\nWHERE NOT (customers:`driving_school.Customers`)-[]-(:`driving_school.Customer_Payments`)\nRETURN count(*)",
        "db_id": "driving_school",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "List first name and last name of customers that have more than 2 payments.",
        "query": "MATCH (T1:`driving_school.Customer_Payments`)-[]-(T2:`driving_school.Customers`)\nWITH T2.first_name AS first_name, T2.last_name AS last_name, count(*) AS count\nWHERE count  > 2\nRETURN first_name,last_name",
        "db_id": "driving_school",
        "answers": [
            [
                "Estelle",
                "Grant"
            ]
        ]
    },
    {
        "question": "What are the first and last names of all customers with more than 2 payments?",
        "query": "MATCH (T1:`driving_school.Customer_Payments`)-[]-(T2:`driving_school.Customers`)\nWITH T2.first_name AS first_name, T2.last_name AS last_name, count(*) AS count\nWHERE count  > 2\nRETURN first_name,last_name",
        "db_id": "driving_school",
        "answers": [
            [
                "Estelle",
                "Grant"
            ]
        ]
    },
    {
        "question": "List all payment methods and number of payments using each payment methods.",
        "query": "MATCH (customer_payments:`driving_school.Customer_Payments`)\nWITH count(customer_payments.payment_method_code) AS count, customer_payments.payment_method_code AS payment_method_code\nRETURN payment_method_code,count",
        "db_id": "driving_school",
        "answers": [
            [
                "Direct Debit",
                10
            ],
            [
                "Credit Card",
                5
            ]
        ]
    },
    {
        "question": "For each payment method, how many payments were made?",
        "query": "MATCH (customer_payments:`driving_school.Customer_Payments`)\nWITH count(customer_payments.payment_method_code) AS count, customer_payments.payment_method_code AS payment_method_code\nRETURN payment_method_code,count",
        "db_id": "driving_school",
        "answers": [
            [
                "Direct Debit",
                10
            ],
            [
                "Credit Card",
                5
            ]
        ]
    },
    {
        "question": "How many lessons were in cancelled state?",
        "query": "MATCH (lessons:`driving_school.Lessons`)\nWHERE lessons.lesson_status_code = 'Cancelled'\nRETURN count(*)",
        "db_id": "driving_school",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "How many lessons have been cancelled?",
        "query": "MATCH (lessons:`driving_school.Lessons`)\nWHERE lessons.lesson_status_code = 'Cancelled'\nRETURN count(*)",
        "db_id": "driving_school",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "What is average lesson price taught by staff with first name as Janessa and last name as Sawayn?",
        "query": "MATCH (T1:`driving_school.Lessons`)-[]-(T2:`driving_school.Staff`)\nWHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'\nRETURN avg(T1.price)",
        "db_id": "driving_school",
        "answers": [
            [
                306.0
            ]
        ]
    },
    {
        "question": "What is the average price for a lesson taught by Janessa Sawayn?",
        "query": "MATCH (T1:`driving_school.Lessons`)-[]-(T2:`driving_school.Staff`)\nWHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'\nRETURN avg(T1.price)",
        "db_id": "driving_school",
        "answers": [
            [
                306.0
            ]
        ]
    },
    {
        "question": "How many lesson does customer with first name Ray took?",
        "query": "MATCH (T1:`driving_school.Lessons`)-[]-(T2:`driving_school.Customers`)\nWHERE T2.first_name = 'Ray'\nRETURN count(*)",
        "db_id": "driving_school",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "How many lessons did the customer with the first name Ray take?",
        "query": "MATCH (T1:`driving_school.Lessons`)-[]-(T2:`driving_school.Customers`)\nWHERE T2.first_name = 'Ray'\nRETURN count(*)",
        "db_id": "driving_school",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "What is the id and detail of the vehicle used in lessons for most of the times?",
        "query": "MATCH (T1:`driving_school.Vehicles`)-[]-(T2:`driving_school.Lessons`)\nWITH T1.vehicle_details AS vehicle_details, count(T1.vehicle_id) AS count, T1.vehicle_id AS vehicle_id\nRETURN vehicle_id,vehicle_details\nORDER BY count DESC\nLIMIT 1",
        "db_id": "driving_school",
        "answers": [
            [
                2,
                "Truck"
            ]
        ]
    },
    {
        "question": "How many faculty do we have?",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nRETURN count(*)",
        "db_id": "activity_1",
        "answers": [
            [
                58
            ]
        ]
    },
    {
        "question": "What is the total number of faculty members?",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nRETURN count(*)",
        "db_id": "activity_1",
        "answers": [
            [
                58
            ]
        ]
    },
    {
        "question": "What ranks do we have for faculty?",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nRETURN DISTINCT faculty.Rank",
        "db_id": "activity_1",
        "answers": [
            [
                "Instructor"
            ],
            [
                "Professor"
            ],
            [
                "AssocProf"
            ],
            [
                "AsstProf"
            ]
        ]
    },
    {
        "question": "Find the list of distinct ranks for faculty.",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nRETURN DISTINCT faculty.Rank",
        "db_id": "activity_1",
        "answers": [
            [
                "Instructor"
            ],
            [
                "Professor"
            ],
            [
                "AssocProf"
            ],
            [
                "AsstProf"
            ]
        ]
    },
    {
        "question": "Show all the distinct buildings that have faculty rooms.",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nRETURN DISTINCT faculty.Building",
        "db_id": "activity_1",
        "answers": [
            [
                "NEB"
            ],
            [
                "Barton"
            ],
            [
                "Krieger"
            ]
        ]
    },
    {
        "question": "What buildings have faculty offices?",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nRETURN DISTINCT faculty.Building",
        "db_id": "activity_1",
        "answers": [
            [
                "NEB"
            ],
            [
                "Barton"
            ],
            [
                "Krieger"
            ]
        ]
    },
    {
        "question": "Show the rank, first name, and last name for all the faculty.",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nRETURN faculty.Rank,faculty.Fname,faculty.Lname",
        "db_id": "activity_1",
        "answers": [
            [
                "Instructor",
                "Mark",
                "Giuliano"
            ],
            [
                "Professor",
                "Michael",
                "Goodrich"
            ],
            [
                "Professor",
                "Gerald",
                "Masson"
            ],
            [
                "AssocProf",
                "Thordur",
                "Runolfsson"
            ],
            [
                "Professor",
                "Daniel",
                "Naiman"
            ],
            [
                "Instructor",
                "Stacey",
                "Jones"
            ],
            [
                "Professor",
                "Frederic",
                "Davidson"
            ],
            [
                "Professor",
                "William",
                "Brody"
            ],
            [
                "Professor",
                "Gerard",
                "Meyer"
            ],
            [
                "AsstProf",
                "David",
                "Yarowsky"
            ],
            [
                "Professor",
                "Edward",
                "Scheinerman"
            ],
            [
                "AsstProf",
                "Carey",
                "Priebe"
            ],
            [
                "Professor",
                "James",
                "Fill"
            ],
            [
                "Professor",
                "Alan",
                "Goldman"
            ],
            [
                "AssocProf",
                "Scott",
                "Smith"
            ],
            [
                "Instructor",
                "Joanne",
                "Houlahan"
            ],
            [
                "Professor",
                "Luigi",
                "Burzio"
            ],
            [
                "AsstProf",
                "Robert",
                "Frank"
            ],
            [
                "Instructor",
                "Louis",
                "Beach"
            ],
            [
                "AsstProf",
                "Cheng",
                "Cheng"
            ],
            [
                "Professor",
                "Alexander",
                "Kaplan"
            ],
            [
                "Instructor",
                "William",
                "Byrne"
            ],
            [
                "Professor",
                "Shih-Ping",
                "Han"
            ],
            [
                "Professor",
                "Paul",
                "Smolensky"
            ],
            [
                "AsstProf",
                "Pablo",
                "Iglesias"
            ],
            [
                "Professor",
                "John",
                "Goutsias"
            ],
            [
                "Professor",
                "Wilson",
                "Rugh"
            ],
            [
                "Professor",
                "Frederick",
                "Jelinek"
            ],
            [
                "Professor",
                "Charles",
                "Westgate"
            ],
            [
                "Professor",
                "Baruch",
                "Awerbuch"
            ],
            [
                "Professor",
                "Russell",
                "Taylor"
            ],
            [
                "AsstProf",
                "Eric",
                "Brill"
            ],
            [
                "AsstProf",
                "Lancelot",
                "James"
            ],
            [
                "Instructor",
                "Ellie",
                "Angelopoulou"
            ],
            [
                "Professor",
                "Howard",
                "Weinert"
            ],
            [
                "Professor",
                "John",
                "Wierman"
            ],
            [
                "AsstProf",
                "Subodh",
                "Kumar"
            ],
            [
                "AssocProf",
                "Lawrence",
                "Wolff"
            ],
            [
                "AsstProf",
                "Gert",
                "Cauwenberghs"
            ],
            [
                "Professor",
                "Andreas",
                "Andreou"
            ],
            [
                "AssocProf",
                "Steven",
                "Salzberg"
            ],
            [
                "AsstProf",
                "Lenore",
                "Cowen"
            ],
            [
                "Professor",
                "Michael",
                "McCloskey"
            ],
            [
                "AsstProf",
                "Yair",
                "Amir"
            ],
            [
                "AsstProf",
                "Michael",
                "Brent"
            ],
            [
                "AsstProf",
                "Brenda",
                "Rapp"
            ],
            [
                "Professor",
                "Rao",
                "Kosaraju"
            ],
            [
                "AssocProf",
                "Oliver",
                "Collins"
            ],
            [
                "AssocProf",
                "Brian",
                "Hughes"
            ],
            [
                "Professor",
                "Richard",
                "Joseph"
            ],
            [
                "Professor",
                "Jacob",
                "Khurgin"
            ],
            [
                "AssocProf",
                "Jerry",
                "Prince"
            ],
            [
                "AssocProf",
                "Geraldine",
                "Legendre"
            ],
            [
                "AsstProf",
                "Colin",
                "Wu"
            ],
            [
                "Professor",
                "Jong-Shi",
                "Pang"
            ],
            [
                "Instructor",
                "Robert",
                "Glaser"
            ],
            [
                "Instructor",
                "Arthur",
                "Delcher"
            ],
            [
                "AsstProf",
                "Leslie",
                "Hall"
            ]
        ]
    },
    {
        "question": "What are the rank, first name, and last name of the faculty members?",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nRETURN faculty.Rank,faculty.Fname,faculty.Lname",
        "db_id": "activity_1",
        "answers": [
            [
                "Instructor",
                "Mark",
                "Giuliano"
            ],
            [
                "Professor",
                "Michael",
                "Goodrich"
            ],
            [
                "Professor",
                "Gerald",
                "Masson"
            ],
            [
                "AssocProf",
                "Thordur",
                "Runolfsson"
            ],
            [
                "Professor",
                "Daniel",
                "Naiman"
            ],
            [
                "Instructor",
                "Stacey",
                "Jones"
            ],
            [
                "Professor",
                "Frederic",
                "Davidson"
            ],
            [
                "Professor",
                "William",
                "Brody"
            ],
            [
                "Professor",
                "Gerard",
                "Meyer"
            ],
            [
                "AsstProf",
                "David",
                "Yarowsky"
            ],
            [
                "Professor",
                "Edward",
                "Scheinerman"
            ],
            [
                "AsstProf",
                "Carey",
                "Priebe"
            ],
            [
                "Professor",
                "James",
                "Fill"
            ],
            [
                "Professor",
                "Alan",
                "Goldman"
            ],
            [
                "AssocProf",
                "Scott",
                "Smith"
            ],
            [
                "Instructor",
                "Joanne",
                "Houlahan"
            ],
            [
                "Professor",
                "Luigi",
                "Burzio"
            ],
            [
                "AsstProf",
                "Robert",
                "Frank"
            ],
            [
                "Instructor",
                "Louis",
                "Beach"
            ],
            [
                "AsstProf",
                "Cheng",
                "Cheng"
            ],
            [
                "Professor",
                "Alexander",
                "Kaplan"
            ],
            [
                "Instructor",
                "William",
                "Byrne"
            ],
            [
                "Professor",
                "Shih-Ping",
                "Han"
            ],
            [
                "Professor",
                "Paul",
                "Smolensky"
            ],
            [
                "AsstProf",
                "Pablo",
                "Iglesias"
            ],
            [
                "Professor",
                "John",
                "Goutsias"
            ],
            [
                "Professor",
                "Wilson",
                "Rugh"
            ],
            [
                "Professor",
                "Frederick",
                "Jelinek"
            ],
            [
                "Professor",
                "Charles",
                "Westgate"
            ],
            [
                "Professor",
                "Baruch",
                "Awerbuch"
            ],
            [
                "Professor",
                "Russell",
                "Taylor"
            ],
            [
                "AsstProf",
                "Eric",
                "Brill"
            ],
            [
                "AsstProf",
                "Lancelot",
                "James"
            ],
            [
                "Instructor",
                "Ellie",
                "Angelopoulou"
            ],
            [
                "Professor",
                "Howard",
                "Weinert"
            ],
            [
                "Professor",
                "John",
                "Wierman"
            ],
            [
                "AsstProf",
                "Subodh",
                "Kumar"
            ],
            [
                "AssocProf",
                "Lawrence",
                "Wolff"
            ],
            [
                "AsstProf",
                "Gert",
                "Cauwenberghs"
            ],
            [
                "Professor",
                "Andreas",
                "Andreou"
            ],
            [
                "AssocProf",
                "Steven",
                "Salzberg"
            ],
            [
                "AsstProf",
                "Lenore",
                "Cowen"
            ],
            [
                "Professor",
                "Michael",
                "McCloskey"
            ],
            [
                "AsstProf",
                "Yair",
                "Amir"
            ],
            [
                "AsstProf",
                "Michael",
                "Brent"
            ],
            [
                "AsstProf",
                "Brenda",
                "Rapp"
            ],
            [
                "Professor",
                "Rao",
                "Kosaraju"
            ],
            [
                "AssocProf",
                "Oliver",
                "Collins"
            ],
            [
                "AssocProf",
                "Brian",
                "Hughes"
            ],
            [
                "Professor",
                "Richard",
                "Joseph"
            ],
            [
                "Professor",
                "Jacob",
                "Khurgin"
            ],
            [
                "AssocProf",
                "Jerry",
                "Prince"
            ],
            [
                "AssocProf",
                "Geraldine",
                "Legendre"
            ],
            [
                "AsstProf",
                "Colin",
                "Wu"
            ],
            [
                "Professor",
                "Jong-Shi",
                "Pang"
            ],
            [
                "Instructor",
                "Robert",
                "Glaser"
            ],
            [
                "Instructor",
                "Arthur",
                "Delcher"
            ],
            [
                "AsstProf",
                "Leslie",
                "Hall"
            ]
        ]
    },
    {
        "question": "Show the first name, last name, and phone number for all female faculty members.",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nWHERE faculty.Sex = 'F'\nRETURN faculty.Fname,faculty.Lname,faculty.Phone",
        "db_id": "activity_1",
        "answers": [
            [
                "Stacey",
                "Jones",
                3550
            ],
            [
                "Joanne",
                "Houlahan",
                1260
            ],
            [
                "Ellie",
                "Angelopoulou",
                2152
            ],
            [
                "Lenore",
                "Cowen",
                2870
            ],
            [
                "Brenda",
                "Rapp",
                2032
            ],
            [
                "Geraldine",
                "Legendre",
                8972
            ],
            [
                "Leslie",
                "Hall",
                7332
            ]
        ]
    },
    {
        "question": "What are the first name, last name, and phone number of all the female faculty members?",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nWHERE faculty.Sex = 'F'\nRETURN faculty.Fname,faculty.Lname,faculty.Phone",
        "db_id": "activity_1",
        "answers": [
            [
                "Stacey",
                "Jones",
                3550
            ],
            [
                "Joanne",
                "Houlahan",
                1260
            ],
            [
                "Ellie",
                "Angelopoulou",
                2152
            ],
            [
                "Lenore",
                "Cowen",
                2870
            ],
            [
                "Brenda",
                "Rapp",
                2032
            ],
            [
                "Geraldine",
                "Legendre",
                8972
            ],
            [
                "Leslie",
                "Hall",
                7332
            ]
        ]
    },
    {
        "question": "Show ids for all the male faculty.",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nWHERE faculty.Sex = 'M'\nRETURN faculty.FacID",
        "db_id": "activity_1",
        "answers": [
            [
                1082
            ],
            [
                1121
            ],
            [
                1148
            ],
            [
                1172
            ],
            [
                1177
            ],
            [
                1823
            ],
            [
                2028
            ],
            [
                2119
            ],
            [
                2192
            ],
            [
                2291
            ],
            [
                2311
            ],
            [
                2738
            ],
            [
                2881
            ],
            [
                3457
            ],
            [
                4432
            ],
            [
                5718
            ],
            [
                6112
            ],
            [
                6182
            ],
            [
                6191
            ],
            [
                6330
            ],
            [
                6541
            ],
            [
                6910
            ],
            [
                6925
            ],
            [
                7134
            ],
            [
                7231
            ],
            [
                7271
            ],
            [
                7506
            ],
            [
                7712
            ],
            [
                7723
            ],
            [
                7792
            ],
            [
                8102
            ],
            [
                8118
            ],
            [
                8122
            ],
            [
                8423
            ],
            [
                8721
            ],
            [
                8722
            ],
            [
                8723
            ],
            [
                8741
            ],
            [
                8791
            ],
            [
                8918
            ],
            [
                8989
            ],
            [
                9172
            ],
            [
                9191
            ],
            [
                9199
            ],
            [
                9210
            ],
            [
                9379
            ],
            [
                9514
            ],
            [
                9811
            ],
            [
                9823
            ],
            [
                9824
            ],
            [
                9826
            ]
        ]
    },
    {
        "question": "What are the faculty ids of all the male faculty members?",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nWHERE faculty.Sex = 'M'\nRETURN faculty.FacID",
        "db_id": "activity_1",
        "answers": [
            [
                1082
            ],
            [
                1121
            ],
            [
                1148
            ],
            [
                1172
            ],
            [
                1177
            ],
            [
                1823
            ],
            [
                2028
            ],
            [
                2119
            ],
            [
                2192
            ],
            [
                2291
            ],
            [
                2311
            ],
            [
                2738
            ],
            [
                2881
            ],
            [
                3457
            ],
            [
                4432
            ],
            [
                5718
            ],
            [
                6112
            ],
            [
                6182
            ],
            [
                6191
            ],
            [
                6330
            ],
            [
                6541
            ],
            [
                6910
            ],
            [
                6925
            ],
            [
                7134
            ],
            [
                7231
            ],
            [
                7271
            ],
            [
                7506
            ],
            [
                7712
            ],
            [
                7723
            ],
            [
                7792
            ],
            [
                8102
            ],
            [
                8118
            ],
            [
                8122
            ],
            [
                8423
            ],
            [
                8721
            ],
            [
                8722
            ],
            [
                8723
            ],
            [
                8741
            ],
            [
                8791
            ],
            [
                8918
            ],
            [
                8989
            ],
            [
                9172
            ],
            [
                9191
            ],
            [
                9199
            ],
            [
                9210
            ],
            [
                9379
            ],
            [
                9514
            ],
            [
                9811
            ],
            [
                9823
            ],
            [
                9824
            ],
            [
                9826
            ]
        ]
    },
    {
        "question": "How many female Professors do we have?",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nWHERE faculty.Sex = 'F' AND faculty.Rank = 'Professor'\nRETURN count(*)",
        "db_id": "activity_1",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Count the number of female Professors we have.",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nWHERE faculty.Sex = 'F' AND faculty.Rank = 'Professor'\nRETURN count(*)",
        "db_id": "activity_1",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Show the phone, room, and building for the faculty named Jerry Prince.",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nWHERE faculty.Fname = 'Jerry' AND faculty.Lname = 'Prince'\nRETURN faculty.Phone,faculty.Room,faculty.Building",
        "db_id": "activity_1",
        "answers": [
            [
                5106,
                "119",
                "Barton"
            ]
        ]
    },
    {
        "question": "What are the phone, room, and building of the faculty member called Jerry Prince?",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nWHERE faculty.Fname = 'Jerry' AND faculty.Lname = 'Prince'\nRETURN faculty.Phone,faculty.Room,faculty.Building",
        "db_id": "activity_1",
        "answers": [
            [
                5106,
                "119",
                "Barton"
            ]
        ]
    },
    {
        "question": "How many Professors are in building NEB?",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nWHERE faculty.Rank = 'Professor' AND faculty.Building = 'NEB'\nRETURN count(*)",
        "db_id": "activity_1",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Count the number of Professors who have office in building NEB.",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nWHERE faculty.Rank = 'Professor' AND faculty.Building = 'NEB'\nRETURN count(*)",
        "db_id": "activity_1",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Show the first name and last name for all the instructors.",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nWHERE faculty.Rank = 'Instructor'\nRETURN faculty.Fname,faculty.Lname",
        "db_id": "activity_1",
        "answers": [
            [
                "Mark",
                "Giuliano"
            ],
            [
                "Stacey",
                "Jones"
            ],
            [
                "Joanne",
                "Houlahan"
            ],
            [
                "Louis",
                "Beach"
            ],
            [
                "William",
                "Byrne"
            ],
            [
                "Ellie",
                "Angelopoulou"
            ],
            [
                "Robert",
                "Glaser"
            ],
            [
                "Arthur",
                "Delcher"
            ]
        ]
    },
    {
        "question": "What are the first name and last name of all the instructors?",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nWHERE faculty.Rank = 'Instructor'\nRETURN faculty.Fname,faculty.Lname",
        "db_id": "activity_1",
        "answers": [
            [
                "Mark",
                "Giuliano"
            ],
            [
                "Stacey",
                "Jones"
            ],
            [
                "Joanne",
                "Houlahan"
            ],
            [
                "Louis",
                "Beach"
            ],
            [
                "William",
                "Byrne"
            ],
            [
                "Ellie",
                "Angelopoulou"
            ],
            [
                "Robert",
                "Glaser"
            ],
            [
                "Arthur",
                "Delcher"
            ]
        ]
    },
    {
        "question": "Show all the buildings along with the number of faculty members the buildings have.",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nWITH count(faculty.Building) AS count, faculty.Building AS Building\nRETURN Building,count",
        "db_id": "activity_1",
        "answers": [
            [
                "NEB",
                18
            ],
            [
                "Barton",
                20
            ],
            [
                "Krieger",
                20
            ]
        ]
    },
    {
        "question": "How many faculty members does each building have? List the result with the name of the building.",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nWITH count(faculty.Building) AS count, faculty.Building AS Building\nRETURN Building,count",
        "db_id": "activity_1",
        "answers": [
            [
                "NEB",
                18
            ],
            [
                "Barton",
                20
            ],
            [
                "Krieger",
                20
            ]
        ]
    },
    {
        "question": "Show all the buildings that have at least 10 professors.",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nWHERE faculty.Rank = 'Professor'\nWITH count(*) AS count, faculty.Building AS Building\nWHERE count  >= 10\nRETURN Building",
        "db_id": "activity_1",
        "answers": [
            [
                "Krieger"
            ],
            [
                "Barton"
            ]
        ]
    },
    {
        "question": "In which buildings are there at least ten professors?",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nWHERE faculty.Rank = 'Professor'\nWITH count(*) AS count, faculty.Building AS Building\nWHERE count  >= 10\nRETURN Building",
        "db_id": "activity_1",
        "answers": [
            [
                "Krieger"
            ],
            [
                "Barton"
            ]
        ]
    },
    {
        "question": "For each faculty rank, show the number of faculty members who have it.",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nWITH count(faculty.Rank) AS count, faculty.Rank AS Rank\nRETURN Rank,count",
        "db_id": "activity_1",
        "answers": [
            [
                "Instructor",
                8
            ],
            [
                "Professor",
                27
            ],
            [
                "AssocProf",
                8
            ],
            [
                "AsstProf",
                15
            ]
        ]
    },
    {
        "question": "How many faculty members do we have for each faculty rank?",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nWITH count(faculty.Rank) AS count, faculty.Rank AS Rank\nRETURN Rank,count",
        "db_id": "activity_1",
        "answers": [
            [
                "Instructor",
                8
            ],
            [
                "Professor",
                27
            ],
            [
                "AssocProf",
                8
            ],
            [
                "AsstProf",
                15
            ]
        ]
    },
    {
        "question": "Show the number of male and female assistant professors.",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nWHERE faculty.Rank = 'AsstProf'\nWITH faculty.Sex AS Sex, count(faculty.Sex) AS count\nRETURN Sex,count",
        "db_id": "activity_1",
        "answers": [
            [
                "M",
                12
            ],
            [
                "F",
                3
            ]
        ]
    },
    {
        "question": "How many male and female assistant professors do we have?",
        "query": "MATCH (faculty:`activity_1.Faculty`)\nWHERE faculty.Rank = 'AsstProf'\nWITH faculty.Sex AS Sex, count(faculty.Sex) AS count\nRETURN Sex,count",
        "db_id": "activity_1",
        "answers": [
            [
                "M",
                12
            ],
            [
                "F",
                3
            ]
        ]
    },
    {
        "question": "What activities do we have?",
        "query": "MATCH (activity:`activity_1.Activity`)\nRETURN activity.activity_name",
        "db_id": "activity_1",
        "answers": [
            [
                "Mountain Climbing"
            ],
            [
                "Canoeing"
            ],
            [
                "Kayaking"
            ],
            [
                "Spelunking"
            ],
            [
                "Extreme Canasta"
            ],
            [
                "Soccer"
            ],
            [
                "Baseball"
            ],
            [
                "Accordion Ensemble"
            ],
            [
                "Football"
            ],
            [
                "Volleyball"
            ],
            [
                "Canasta"
            ],
            [
                "Chess"
            ],
            [
                "Crossword Puzzles"
            ],
            [
                "Proselytizing"
            ],
            [
                "Square Dancing"
            ],
            [
                "Bungee Jumping"
            ]
        ]
    },
    {
        "question": "List all the activities we have.",
        "query": "MATCH (activity:`activity_1.Activity`)\nRETURN activity.activity_name",
        "db_id": "activity_1",
        "answers": [
            [
                "Mountain Climbing"
            ],
            [
                "Canoeing"
            ],
            [
                "Kayaking"
            ],
            [
                "Spelunking"
            ],
            [
                "Extreme Canasta"
            ],
            [
                "Soccer"
            ],
            [
                "Baseball"
            ],
            [
                "Accordion Ensemble"
            ],
            [
                "Football"
            ],
            [
                "Volleyball"
            ],
            [
                "Canasta"
            ],
            [
                "Chess"
            ],
            [
                "Crossword Puzzles"
            ],
            [
                "Proselytizing"
            ],
            [
                "Square Dancing"
            ],
            [
                "Bungee Jumping"
            ]
        ]
    },
    {
        "question": "How many activities do we have?",
        "query": "MATCH (activity:`activity_1.Activity`)\nRETURN count(*)",
        "db_id": "activity_1",
        "answers": [
            [
                16
            ]
        ]
    },
    {
        "question": "Find the number of activities available.",
        "query": "MATCH (activity:`activity_1.Activity`)\nRETURN count(*)",
        "db_id": "activity_1",
        "answers": [
            [
                16
            ]
        ]
    },
    {
        "question": "What is the id of the most recent order?",
        "query": "MATCH (orders:`tracking_orders.Orders`)\nRETURN orders.order_id\nORDER BY orders.date_order_placed DESC\nLIMIT 1",
        "db_id": "tracking_orders",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Find the id of the order made most recently.",
        "query": "MATCH (orders:`tracking_orders.Orders`)\nRETURN orders.order_id\nORDER BY orders.date_order_placed DESC\nLIMIT 1",
        "db_id": "tracking_orders",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "what are the order id and customer id of the oldest order?",
        "query": "MATCH (orders:`tracking_orders.Orders`)\nRETURN orders.order_id,orders.customer_id\nORDER BY orders.date_order_placed\nLIMIT 1",
        "db_id": "tracking_orders",
        "answers": [
            [
                15,
                8
            ]
        ]
    },
    {
        "question": "Find the order id and customer id associated with the oldest order.",
        "query": "MATCH (orders:`tracking_orders.Orders`)\nRETURN orders.order_id,orders.customer_id\nORDER BY orders.date_order_placed\nLIMIT 1",
        "db_id": "tracking_orders",
        "answers": [
            [
                15,
                8
            ]
        ]
    },
    {
        "question": "Find the id of the order whose shipment tracking number is \"3452\".",
        "query": "MATCH (shipments:`tracking_orders.Shipments`)\nWHERE shipments.shipment_tracking_number = '3452'\nRETURN shipments.order_id",
        "db_id": "tracking_orders",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Which order's shipment tracking number is \"3452\"? Give me the id of the order.",
        "query": "MATCH (shipments:`tracking_orders.Shipments`)\nWHERE shipments.shipment_tracking_number = '3452'\nRETURN shipments.order_id",
        "db_id": "tracking_orders",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Find the ids of all the order items whose product id is 11.",
        "query": "MATCH (order_items:`tracking_orders.Order_Items`)\nWHERE order_items.product_id = 11\nRETURN order_items.order_item_id",
        "db_id": "tracking_orders",
        "answers": [
            [
                5
            ],
            [
                9
            ]
        ]
    },
    {
        "question": "Find all the order items whose product id is 11. What are the order item ids?",
        "query": "MATCH (order_items:`tracking_orders.Order_Items`)\nWHERE order_items.product_id = 11\nRETURN order_items.order_item_id",
        "db_id": "tracking_orders",
        "answers": [
            [
                5
            ],
            [
                9
            ]
        ]
    },
    {
        "question": "List the name of all the distinct customers who have orders with status \"Packing\".",
        "query": "MATCH (T1:`tracking_orders.Customers`)-[]-(T2:`tracking_orders.Orders`)\nWHERE T2.order_status = 'Packing'\nRETURN DISTINCT T1.customer_name",
        "db_id": "tracking_orders",
        "answers": [
            [
                "Jeramie"
            ],
            [
                "Hadley"
            ],
            [
                "Violet"
            ]
        ]
    },
    {
        "question": "Which customers have orders with status \"Packing\"? Give me the customer names.",
        "query": "MATCH (T1:`tracking_orders.Customers`)-[]-(T2:`tracking_orders.Orders`)\nWHERE T2.order_status = 'Packing'\nRETURN DISTINCT T1.customer_name",
        "db_id": "tracking_orders",
        "answers": [
            [
                "Jeramie"
            ],
            [
                "Hadley"
            ],
            [
                "Violet"
            ]
        ]
    },
    {
        "question": "Find the details of all the distinct customers who have orders with status \"On Road\".",
        "query": "MATCH (T1:`tracking_orders.Customers`)-[]-(T2:`tracking_orders.Orders`)\nWHERE T2.order_status = 'On Road'\nRETURN DISTINCT T1.customer_details",
        "db_id": "tracking_orders",
        "answers": [
            [
                "commodi"
            ],
            [
                "deleniti"
            ],
            [
                "est"
            ],
            [
                "doloribus"
            ],
            [
                "officia"
            ],
            [
                "rerum"
            ]
        ]
    },
    {
        "question": "What are the distinct customers who have orders with status \"On Road\"? Give me the customer details?",
        "query": "MATCH (T1:`tracking_orders.Customers`)-[]-(T2:`tracking_orders.Orders`)\nWHERE T2.order_status = 'On Road'\nRETURN DISTINCT T1.customer_details",
        "db_id": "tracking_orders",
        "answers": [
            [
                "commodi"
            ],
            [
                "deleniti"
            ],
            [
                "est"
            ],
            [
                "doloribus"
            ],
            [
                "officia"
            ],
            [
                "rerum"
            ]
        ]
    },
    {
        "question": "Give me a list of id and status of orders which belong to the customer named \"Jeramie\".",
        "query": "MATCH (T1:`tracking_orders.Customers`)-[]-(T2:`tracking_orders.Orders`)\nWHERE T1.customer_name = 'Jeramie'\nRETURN T2.order_id,T2.order_status",
        "db_id": "tracking_orders",
        "answers": [
            [
                13,
                "On Road"
            ],
            [
                4,
                "Packing"
            ],
            [
                7,
                "Packing"
            ]
        ]
    },
    {
        "question": "Which orders are made by the customer named \"Jeramie\"? Give me the order ids and status.",
        "query": "MATCH (T1:`tracking_orders.Customers`)-[]-(T2:`tracking_orders.Orders`)\nWHERE T1.customer_name = 'Jeramie'\nRETURN T2.order_id,T2.order_status",
        "db_id": "tracking_orders",
        "answers": [
            [
                13,
                "On Road"
            ],
            [
                4,
                "Packing"
            ],
            [
                7,
                "Packing"
            ]
        ]
    },
    {
        "question": "Find the dates of orders which belong to the customer named \"Jeramie\".",
        "query": "MATCH (T1:`tracking_orders.Customers`)-[]-(T2:`tracking_orders.Orders`)\nWHERE T1.customer_name = 'Jeramie'\nRETURN T2.date_order_placed",
        "db_id": "tracking_orders",
        "answers": [
            [
                "2002-12-06 14:13:30"
            ],
            [
                "1974-08-10 08:15:16"
            ],
            [
                "1976-09-01 09:27:00"
            ]
        ]
    },
    {
        "question": "What are the dates of the orders made by the customer named \"Jeramie\"?",
        "query": "MATCH (T1:`tracking_orders.Customers`)-[]-(T2:`tracking_orders.Orders`)\nWHERE T1.customer_name = 'Jeramie'\nRETURN T2.date_order_placed",
        "db_id": "tracking_orders",
        "answers": [
            [
                "2002-12-06 14:13:30"
            ],
            [
                "1974-08-10 08:15:16"
            ],
            [
                "1976-09-01 09:27:00"
            ]
        ]
    },
    {
        "question": "Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01.",
        "query": "MATCH (T1:`tracking_orders.Customers`)-[]-(T2:`tracking_orders.Orders`)\nWHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"\nRETURN T1.customer_name",
        "db_id": "tracking_orders",
        "answers": [
            [
                "George"
            ]
        ]
    },
    {
        "question": "Which customers made orders between 2009-01-01 and 2010-01-01? Find their names.",
        "query": "MATCH (T1:`tracking_orders.Customers`)-[]-(T2:`tracking_orders.Orders`)\nWHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"\nRETURN T1.customer_name",
        "db_id": "tracking_orders",
        "answers": [
            [
                "George"
            ]
        ]
    },
    {
        "question": "Find the ids of orders which are shipped after 2000-01-01.",
        "query": "MATCH (shipments:`tracking_orders.Shipments`)\nWHERE shipments.shipment_date > \"2000-01-01\"\nRETURN shipments.order_id",
        "db_id": "tracking_orders",
        "answers": [
            [
                10
            ],
            [
                12
            ]
        ]
    },
    {
        "question": "Which orders have shipment after 2000-01-01? Give me the order ids.",
        "query": "MATCH (shipments:`tracking_orders.Shipments`)\nWHERE shipments.shipment_date > \"2000-01-01\"\nRETURN shipments.order_id",
        "db_id": "tracking_orders",
        "answers": [
            [
                10
            ],
            [
                12
            ]
        ]
    },
    {
        "question": "List the names of all distinct products in alphabetical order.",
        "query": "MATCH (products:`tracking_orders.Products`)\nRETURN DISTINCT products.product_name\nORDER BY products.product_name",
        "db_id": "tracking_orders",
        "answers": [
            [
                "book"
            ],
            [
                "clothes"
            ],
            [
                "food"
            ],
            [
                "music"
            ],
            [
                "phone"
            ]
        ]
    },
    {
        "question": "Sort all the distinct products in alphabetical order.",
        "query": "MATCH (products:`tracking_orders.Products`)\nRETURN DISTINCT products.product_name\nORDER BY products.product_name",
        "db_id": "tracking_orders",
        "answers": [
            [
                "book"
            ],
            [
                "clothes"
            ],
            [
                "food"
            ],
            [
                "music"
            ],
            [
                "phone"
            ]
        ]
    },
    {
        "question": "Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.",
        "query": "MATCH (invoices:`tracking_orders.Invoices`)\nWHERE invoices.invoice_date < \"1989-09-03\" OR invoices.invoice_date > \"2007-12-25\"\nRETURN invoices.invoice_number",
        "db_id": "tracking_orders",
        "answers": [
            [
                4
            ],
            [
                5
            ],
            [
                6
            ],
            [
                8
            ],
            [
                9
            ],
            [
                11
            ],
            [
                12
            ],
            [
                13
            ],
            [
                15
            ]
        ]
    },
    {
        "question": "What are the invoice numbers created before 1989-09-03 or after 2007-12-25?",
        "query": "MATCH (invoices:`tracking_orders.Invoices`)\nWHERE invoices.invoice_date < \"1989-09-03\" OR invoices.invoice_date > \"2007-12-25\"\nRETURN invoices.invoice_number",
        "db_id": "tracking_orders",
        "answers": [
            [
                4
            ],
            [
                5
            ],
            [
                6
            ],
            [
                8
            ],
            [
                9
            ],
            [
                11
            ],
            [
                12
            ],
            [
                13
            ],
            [
                15
            ]
        ]
    },
    {
        "question": "Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.",
        "query": "MATCH (invoices:`tracking_orders.Invoices`)\nWHERE invoices.invoice_date < \"1989-09-03\" OR invoices.invoice_date > \"2007-12-25\"\nRETURN DISTINCT invoices.invoice_details",
        "db_id": "tracking_orders",
        "answers": [
            [
                "tempore"
            ],
            [
                "labore"
            ],
            [
                "optio"
            ],
            [
                "doloremque"
            ],
            [
                "quo"
            ],
            [
                "earum"
            ],
            [
                "ea"
            ],
            [
                "voluptatem"
            ]
        ]
    },
    {
        "question": "What are the distinct details of invoices created before 1989-09-03 or after 2007-12-25?",
        "query": "MATCH (invoices:`tracking_orders.Invoices`)\nWHERE invoices.invoice_date < \"1989-09-03\" OR invoices.invoice_date > \"2007-12-25\"\nRETURN DISTINCT invoices.invoice_details",
        "db_id": "tracking_orders",
        "answers": [
            [
                "tempore"
            ],
            [
                "labore"
            ],
            [
                "optio"
            ],
            [
                "doloremque"
            ],
            [
                "quo"
            ],
            [
                "earum"
            ],
            [
                "ea"
            ],
            [
                "voluptatem"
            ]
        ]
    },
    {
        "question": "For each customer who has at least two orders, find the customer name and number of orders made.",
        "query": "MATCH (T1:`tracking_orders.Orders`)-[]-(T2:`tracking_orders.Customers`)\nWITH count(*) AS count, T2.customer_name AS customer_name\nWHERE count  >= 2\nRETURN customer_name,count",
        "db_id": "tracking_orders",
        "answers": [
            [
                "George",
                3
            ],
            [
                "Jeramie",
                3
            ],
            [
                "Beulah",
                2
            ]
        ]
    },
    {
        "question": "Which customers have made at least two orders? Give me each customer name and number of orders made.",
        "query": "MATCH (T1:`tracking_orders.Orders`)-[]-(T2:`tracking_orders.Customers`)\nWITH count(*) AS count, T2.customer_name AS customer_name\nWHERE count  >= 2\nRETURN customer_name,count",
        "db_id": "tracking_orders",
        "answers": [
            [
                "George",
                3
            ],
            [
                "Jeramie",
                3
            ],
            [
                "Beulah",
                2
            ]
        ]
    },
    {
        "question": "Find the name of the customers who have at most two orders.",
        "query": "MATCH (T1:`tracking_orders.Orders`)-[]-(T2:`tracking_orders.Customers`)\nWITH count(*) AS count, T2.customer_name AS customer_name\nWHERE count  <= 2\nRETURN customer_name",
        "db_id": "tracking_orders",
        "answers": [
            [
                "Hershel"
            ],
            [
                "Leilani"
            ],
            [
                "Hadley"
            ],
            [
                "Violet"
            ],
            [
                "Beulah"
            ],
            [
                "Alberto"
            ],
            [
                "Devan"
            ],
            [
                "Parker"
            ]
        ]
    },
    {
        "question": "What are the names of the customers who have made two or less orders?",
        "query": "MATCH (T1:`tracking_orders.Orders`)-[]-(T2:`tracking_orders.Customers`)\nWITH count(*) AS count, T2.customer_name AS customer_name\nWHERE count  <= 2\nRETURN customer_name",
        "db_id": "tracking_orders",
        "answers": [
            [
                "Hershel"
            ],
            [
                "Leilani"
            ],
            [
                "Hadley"
            ],
            [
                "Violet"
            ],
            [
                "Beulah"
            ],
            [
                "Alberto"
            ],
            [
                "Devan"
            ],
            [
                "Parker"
            ]
        ]
    },
    {
        "question": "How many architects are female?",
        "query": "MATCH (architect:`architecture.architect`)\nWHERE architect.gender = 'female'\nRETURN count(*)",
        "db_id": "architecture",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "List the name, nationality and id of all male architects ordered by their names lexicographically.",
        "query": "MATCH (architect:`architecture.architect`)\nWHERE architect.gender = 'male'\nRETURN architect.name,architect.nationality,architect.id\nORDER BY architect.name",
        "db_id": "architecture",
        "answers": [
            [
                "Frank Gehry",
                "Canadian",
                "2"
            ],
            [
                "Frank Lloyd Wright",
                "American",
                "1"
            ],
            [
                "Le Corbusier",
                "Swiss, French",
                "5"
            ],
            [
                "Mies Van Der Rohe",
                "German, American",
                "4"
            ]
        ]
    },
    {
        "question": "What is the average length in feet of the bridges?",
        "query": "MATCH (bridge:`architecture.bridge`)\nRETURN avg(bridge.length_feet)",
        "db_id": "architecture",
        "answers": [
            [
                244.64
            ]
        ]
    },
    {
        "question": "What are the names and year of construction for the mills of 'Grondzeiler' type?",
        "query": "MATCH (mill:`architecture.mill`)\nWHERE mill.type = 'Grondzeiler'\nRETURN mill.name,mill.built_year",
        "db_id": "architecture",
        "answers": [
            [
                "Le Vieux Molen",
                1840
            ],
            [
                "Moulin Bertrand",
                1890
            ],
            [
                "Moulin de Fexhe",
                1843
            ],
            [
                "Moulin du Ch\u00e2teau",
                1856
            ],
            [
                "Moulin de Pousset",
                1819
            ]
        ]
    },
    {
        "question": "What are the names of the mills which are not located in 'Donceel'?",
        "query": "MATCH (mill:`architecture.mill`)\nWHERE mill.location <> 'Donceel'\nRETURN mill.name",
        "db_id": "architecture",
        "answers": [
            [
                "Le Vieux Molen"
            ],
            [
                "Moulin de Fexhe"
            ],
            [
                "Moulin de Momalle"
            ],
            [
                "Moulin du Ch\u00e2teau"
            ],
            [
                "Moulin de Pousset"
            ]
        ]
    },
    {
        "question": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?",
        "query": "MATCH (bridge:`architecture.bridge`)\nWHERE bridge.name = 'Kolob Arch' OR bridge.name = 'Rainbow Bridge'\nRETURN bridge.location",
        "db_id": "architecture",
        "answers": [
            [
                "Zion National Park , Utah , USA"
            ],
            [
                "Glen Canyon National Recreation Area , Utah , USA"
            ]
        ]
    },
    {
        "question": "Which of the mill names contains the french word 'Moulin'?",
        "query": "MATCH (mill:`architecture.mill`)\nWHERE mill.name =~'.*[M|m]oulin.*'\nRETURN mill.name",
        "db_id": "architecture",
        "answers": [
            [
                "Moulin Bertrand"
            ],
            [
                "Moulin de Fexhe"
            ],
            [
                "Moulin de Momalle"
            ],
            [
                "Moulin du Ch\u00e2teau"
            ],
            [
                "Moulin de Pousset"
            ]
        ]
    },
    {
        "question": "What is the most common mill type, and how many are there?",
        "query": "MATCH (mill:`architecture.mill`)\nWITH mill.type AS type, count(mill.type) AS count\nRETURN type,count\nORDER BY count DESC\nLIMIT 1",
        "db_id": "architecture",
        "answers": [
            [
                "Grondzeiler",
                5
            ]
        ]
    },
    {
        "question": "How many book clubs are there?",
        "query": "MATCH (book_club:`culture_company.book_club`)\nRETURN count(*)",
        "db_id": "culture_company",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "question": "Count the number of book clubs.",
        "query": "MATCH (book_club:`culture_company.book_club`)\nRETURN count(*)",
        "db_id": "culture_company",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "question": "show the titles, and authors or editors for all books made after the year 1989.",
        "query": "MATCH (book_club:`culture_company.book_club`)\nWHERE book_club.Year > 1989\nRETURN book_club.Book_Title,book_club.Author_or_Editor",
        "db_id": "culture_company",
        "answers": [
            [
                "Somewhere in the Night",
                "Jeffrey N. McMahan"
            ],
            [
                "Walking Water / After All This",
                "Thom Nickels"
            ]
        ]
    },
    {
        "question": "What are the titles and authors or editors that correspond to books made after 1989?",
        "query": "MATCH (book_club:`culture_company.book_club`)\nWHERE book_club.Year > 1989\nRETURN book_club.Book_Title,book_club.Author_or_Editor",
        "db_id": "culture_company",
        "answers": [
            [
                "Somewhere in the Night",
                "Jeffrey N. McMahan"
            ],
            [
                "Walking Water / After All This",
                "Thom Nickels"
            ]
        ]
    },
    {
        "question": "Show all distinct publishers for books.",
        "query": "MATCH (book_club:`culture_company.book_club`)\nRETURN DISTINCT book_club.Publisher",
        "db_id": "culture_company",
        "answers": [
            [
                "Alyson"
            ],
            [
                "St. Martin's Press"
            ],
            [
                "William Morrow"
            ],
            [
                "Mysterious Press"
            ],
            [
                "International Polygonics"
            ],
            [
                "Banned Books"
            ],
            [
                "Naiad Press"
            ],
            [
                "Crossing Press"
            ]
        ]
    },
    {
        "question": "What are all the different book publishers?",
        "query": "MATCH (book_club:`culture_company.book_club`)\nRETURN DISTINCT book_club.Publisher",
        "db_id": "culture_company",
        "answers": [
            [
                "Alyson"
            ],
            [
                "St. Martin's Press"
            ],
            [
                "William Morrow"
            ],
            [
                "Mysterious Press"
            ],
            [
                "International Polygonics"
            ],
            [
                "Banned Books"
            ],
            [
                "Naiad Press"
            ],
            [
                "Crossing Press"
            ]
        ]
    },
    {
        "question": "Show the years, book titles, and publishers for all books, in descending order by year.",
        "query": "MATCH (book_club:`culture_company.book_club`)\nRETURN book_club.Year,book_club.Book_Title,book_club.Publisher\nORDER BY book_club.Year DESC",
        "db_id": "culture_company",
        "answers": [
            [
                1990,
                "Somewhere in the Night",
                "Alyson"
            ],
            [
                1990,
                "Walking Water / After All This",
                "Banned Books"
            ],
            [
                1989,
                "Goldenboy",
                "Alyson"
            ],
            [
                1989,
                "Death Takes the Stage",
                "St. Martin's Press"
            ],
            [
                1989,
                "Unicorn Mountain",
                "William Morrow"
            ],
            [
                1989,
                "Obedience",
                "Mysterious Press"
            ],
            [
                1989,
                "Who\u04f3 Next",
                "International Polygonics"
            ],
            [
                1989,
                "Skiptrace",
                "Banned Books"
            ],
            [
                1989,
                "Lessons In Murder",
                "Naiad Press"
            ],
            [
                1989,
                "Mundane\u04f3 World",
                "Crossing Press"
            ],
            [
                1989,
                "Heavy Gilt",
                "Naiad Press"
            ],
            [
                1989,
                "The Crystal Curtain",
                "Alyson"
            ]
        ]
    },
    {
        "question": "What are the years, titles, and publishers for all books, ordered by year descending?",
        "query": "MATCH (book_club:`culture_company.book_club`)\nRETURN book_club.Year,book_club.Book_Title,book_club.Publisher\nORDER BY book_club.Year DESC",
        "db_id": "culture_company",
        "answers": [
            [
                1990,
                "Somewhere in the Night",
                "Alyson"
            ],
            [
                1990,
                "Walking Water / After All This",
                "Banned Books"
            ],
            [
                1989,
                "Goldenboy",
                "Alyson"
            ],
            [
                1989,
                "Death Takes the Stage",
                "St. Martin's Press"
            ],
            [
                1989,
                "Unicorn Mountain",
                "William Morrow"
            ],
            [
                1989,
                "Obedience",
                "Mysterious Press"
            ],
            [
                1989,
                "Who\u04f3 Next",
                "International Polygonics"
            ],
            [
                1989,
                "Skiptrace",
                "Banned Books"
            ],
            [
                1989,
                "Lessons In Murder",
                "Naiad Press"
            ],
            [
                1989,
                "Mundane\u04f3 World",
                "Crossing Press"
            ],
            [
                1989,
                "Heavy Gilt",
                "Naiad Press"
            ],
            [
                1989,
                "The Crystal Curtain",
                "Alyson"
            ]
        ]
    },
    {
        "question": "Show all publishers and the number of books for each publisher.",
        "query": "MATCH (book_club:`culture_company.book_club`)\nWITH book_club.Publisher AS Publisher, count(book_club.Publisher) AS count\nRETURN Publisher,count",
        "db_id": "culture_company",
        "answers": [
            [
                "Alyson",
                3
            ],
            [
                "St. Martin's Press",
                1
            ],
            [
                "William Morrow",
                1
            ],
            [
                "Mysterious Press",
                1
            ],
            [
                "International Polygonics",
                1
            ],
            [
                "Banned Books",
                2
            ],
            [
                "Naiad Press",
                2
            ],
            [
                "Crossing Press",
                1
            ]
        ]
    },
    {
        "question": "How many books are there for each publisher?",
        "query": "MATCH (book_club:`culture_company.book_club`)\nWITH book_club.Publisher AS Publisher, count(book_club.Publisher) AS count\nRETURN Publisher,count",
        "db_id": "culture_company",
        "answers": [
            [
                "Alyson",
                3
            ],
            [
                "St. Martin's Press",
                1
            ],
            [
                "William Morrow",
                1
            ],
            [
                "Mysterious Press",
                1
            ],
            [
                "International Polygonics",
                1
            ],
            [
                "Banned Books",
                2
            ],
            [
                "Naiad Press",
                2
            ],
            [
                "Crossing Press",
                1
            ]
        ]
    },
    {
        "question": "What is the publisher with most number of books?",
        "query": "MATCH (book_club:`culture_company.book_club`)\nWITH book_club.Publisher AS Publisher, count(book_club.Publisher) AS count\nRETURN Publisher\nORDER BY count DESC\nLIMIT 1",
        "db_id": "culture_company",
        "answers": [
            [
                "Alyson"
            ]
        ]
    },
    {
        "question": "Return the publisher that has published the most books.",
        "query": "MATCH (book_club:`culture_company.book_club`)\nWITH book_club.Publisher AS Publisher, count(book_club.Publisher) AS count\nRETURN Publisher\nORDER BY count DESC\nLIMIT 1",
        "db_id": "culture_company",
        "answers": [
            [
                "Alyson"
            ]
        ]
    },
    {
        "question": "Show all book categories and the number of books in each category.",
        "query": "MATCH (book_club:`culture_company.book_club`)\nWITH count(book_club.Category) AS count, book_club.Category AS Category\nRETURN Category,count",
        "db_id": "culture_company",
        "answers": [
            [
                "Gay M/SF",
                5
            ],
            [
                "Lesb. M/SF",
                5
            ],
            [
                "Gay SF/F",
                2
            ]
        ]
    },
    {
        "question": "How many books fall into each category?",
        "query": "MATCH (book_club:`culture_company.book_club`)\nWITH count(book_club.Category) AS count, book_club.Category AS Category\nRETURN Category,count",
        "db_id": "culture_company",
        "answers": [
            [
                "Gay M/SF",
                5
            ],
            [
                "Lesb. M/SF",
                5
            ],
            [
                "Gay SF/F",
                2
            ]
        ]
    },
    {
        "question": "List categories that have at least two books after year 1989.",
        "query": "MATCH (book_club:`culture_company.book_club`)\nWHERE book_club.Year > 1989\nWITH count(*) AS count, book_club.Category AS Category\nWHERE count  >= 2\nRETURN Category",
        "db_id": "culture_company",
        "answers": [
            [
                "Gay SF/F"
            ]
        ]
    },
    {
        "question": "What categories have two or more corresponding books that were made after 1989?",
        "query": "MATCH (book_club:`culture_company.book_club`)\nWHERE book_club.Year > 1989\nWITH count(*) AS count, book_club.Category AS Category\nWHERE count  >= 2\nRETURN Category",
        "db_id": "culture_company",
        "answers": [
            [
                "Gay SF/F"
            ]
        ]
    },
    {
        "question": "Show all movie titles, years, and directors, ordered by budget.",
        "query": "MATCH (movie:`culture_company.movie`)\nRETURN movie.Title,movie.Year,movie.Director\nORDER BY movie.Budget_million",
        "db_id": "culture_company",
        "answers": [
            [
                "Jill Rips",
                2000,
                "Anthony Hickox"
            ],
            [
                "Storm Catcher",
                1999,
                "Anthony Hickox"
            ],
            [
                "The Boondock Saints",
                1999,
                "Troy Duffy"
            ],
            [
                "The Big Kahuna",
                1999,
                "John Swanbeck"
            ],
            [
                "The Whole Nine Yards",
                2000,
                "Jonathan Lynn"
            ],
            [
                "Battlefield Earth",
                2000,
                "Roger Christian"
            ],
            [
                "Agent Red",
                2000,
                "Damian Lee"
            ],
            [
                "The Art of War",
                2000,
                "Christian Duguay"
            ],
            [
                "3000 Miles to Graceland",
                2001,
                "Demian Lichtenstein"
            ],
            [
                "Get Carter",
                2000,
                "Stephen Kay"
            ]
        ]
    },
    {
        "question": "What are the titles, years, and directors of all movies, ordered by budget in millions?",
        "query": "MATCH (movie:`culture_company.movie`)\nRETURN movie.Title,movie.Year,movie.Director\nORDER BY movie.Budget_million",
        "db_id": "culture_company",
        "answers": [
            [
                "Jill Rips",
                2000,
                "Anthony Hickox"
            ],
            [
                "Storm Catcher",
                1999,
                "Anthony Hickox"
            ],
            [
                "The Boondock Saints",
                1999,
                "Troy Duffy"
            ],
            [
                "The Big Kahuna",
                1999,
                "John Swanbeck"
            ],
            [
                "The Whole Nine Yards",
                2000,
                "Jonathan Lynn"
            ],
            [
                "Battlefield Earth",
                2000,
                "Roger Christian"
            ],
            [
                "Agent Red",
                2000,
                "Damian Lee"
            ],
            [
                "The Art of War",
                2000,
                "Christian Duguay"
            ],
            [
                "3000 Miles to Graceland",
                2001,
                "Demian Lichtenstein"
            ],
            [
                "Get Carter",
                2000,
                "Stephen Kay"
            ]
        ]
    },
    {
        "question": "How many movie directors are there?",
        "query": "MATCH (movie:`culture_company.movie`)\nRETURN count(DISTINCT movie.Director)",
        "db_id": "culture_company",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "Count the number of different directors.",
        "query": "MATCH (movie:`culture_company.movie`)\nRETURN count(DISTINCT movie.Director)",
        "db_id": "culture_company",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "What is the title and director for the movie with highest worldwide gross in the year 2000 or before?",
        "query": "MATCH (movie:`culture_company.movie`)\nWHERE movie.Year <= 2000\nRETURN movie.Title,movie.Director\nORDER BY movie.Gross_worldwide DESC\nLIMIT 1",
        "db_id": "culture_company",
        "answers": [
            [
                "The Whole Nine Yards",
                "Jonathan Lynn"
            ]
        ]
    },
    {
        "question": "Return the title and director of the movie released in the year 2000 or earlier that had the highest worldwide gross.",
        "query": "MATCH (movie:`culture_company.movie`)\nWHERE movie.Year <= 2000\nRETURN movie.Title,movie.Director\nORDER BY movie.Gross_worldwide DESC\nLIMIT 1",
        "db_id": "culture_company",
        "answers": [
            [
                "The Whole Nine Yards",
                "Jonathan Lynn"
            ]
        ]
    },
    {
        "question": "Show all director names who have a movie in the year 1999 or 2000.",
        "query": "MATCH (movie:`culture_company.movie`)\nWHERE movie.Year = 1999 OR movie.Year = 2000\nRETURN movie.Director",
        "db_id": "culture_company",
        "answers": [
            [
                "Troy Duffy"
            ],
            [
                "John Swanbeck"
            ],
            [
                "Anthony Hickox"
            ],
            [
                "Anthony Hickox"
            ],
            [
                "Jonathan Lynn"
            ],
            [
                "Roger Christian"
            ],
            [
                "Stephen Kay"
            ],
            [
                "Christian Duguay"
            ],
            [
                "Damian Lee"
            ]
        ]
    },
    {
        "question": "Which directors had a movie in either 1999 or 2000?",
        "query": "MATCH (movie:`culture_company.movie`)\nWHERE movie.Year = 1999 OR movie.Year = 2000\nRETURN movie.Director",
        "db_id": "culture_company",
        "answers": [
            [
                "Troy Duffy"
            ],
            [
                "John Swanbeck"
            ],
            [
                "Anthony Hickox"
            ],
            [
                "Anthony Hickox"
            ],
            [
                "Jonathan Lynn"
            ],
            [
                "Roger Christian"
            ],
            [
                "Stephen Kay"
            ],
            [
                "Christian Duguay"
            ],
            [
                "Damian Lee"
            ]
        ]
    },
    {
        "question": "What is the average, maximum, and minimum budget for all movies before 2000.",
        "query": "MATCH (movie:`culture_company.movie`)\nWHERE movie.Year < 2000\nRETURN avg(movie.Budget_million),max(movie.Budget_million),min(movie.Budget_million)",
        "db_id": "culture_company",
        "answers": [
            [
                6.0,
                7.0,
                5.0
            ]
        ]
    },
    {
        "question": "Return the average, maximum, and minimum budgets in millions for movies made before the year 2000.",
        "query": "MATCH (movie:`culture_company.movie`)\nWHERE movie.Year < 2000\nRETURN avg(movie.Budget_million),max(movie.Budget_million),min(movie.Budget_million)",
        "db_id": "culture_company",
        "answers": [
            [
                6.0,
                7.0,
                5.0
            ]
        ]
    },
    {
        "question": "how many rivers are in idaho",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'idaho'\nRETURN count(river.river_name)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "give me the number of rivers in idaho",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'idaho'\nRETURN count(river.river_name)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many rivers does idaho have",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'idaho'\nRETURN count(river.river_name)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many rivers are there in idaho",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'idaho'\nRETURN count(river.river_name)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many rivers run through idaho",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'idaho'\nRETURN count(river.river_name)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many rivers are found in idaho",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'idaho'\nRETURN count(river.river_name)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many rivers in idaho",
        "query": "MATCH (river:`geo.river`)\nWHERE river.traverse = 'idaho'\nRETURN count(river.river_name)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many capitals does rhode island have",
        "query": "MATCH (state:`geo.state`)\nWHERE state.state_name = 'rhode island'\nRETURN count(state.capital)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many major cities are there",
        "query": "MATCH (city:`geo.city`)\nWHERE city.population > 150000\nRETURN count(city.city_name)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many colorado rivers are there",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'colorado'\nRETURN count(river.river_name)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many rivers are called colorado",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'colorado'\nRETURN count(river.river_name)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many states border kentucky",
        "query": "MATCH ()-[border_info:`geo.border_info`]-()\nWHERE border_info.state_name = 'kentucky'\nRETURN count(border_info.border)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many states does kentucky border",
        "query": "MATCH ()-[border_info:`geo.border_info`]-()\nWHERE border_info.state_name = 'kentucky'\nRETURN count(border_info.border)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "kentucky borders how many states",
        "query": "MATCH ()-[border_info:`geo.border_info`]-()\nWHERE border_info.state_name = 'kentucky'\nRETURN count(border_info.border)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "number of states bordering kentucky",
        "query": "MATCH ()-[border_info:`geo.border_info`]-()\nWHERE border_info.state_name = 'kentucky'\nRETURN count(border_info.border)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "what is the number of neighboring states for kentucky",
        "query": "MATCH ()-[border_info:`geo.border_info`]-()\nWHERE border_info.state_name = 'kentucky'\nRETURN count(border_info.border)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many states do not have rivers",
        "query": "MATCH (state:`geo.state`)\nWHERE NOT (state:`geo.state`)-[]-(:`geo.river`)\nRETURN count(DISTINCT state.state_name)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many states have a city named springfield",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'springfield'\nRETURN count(city.state_name)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many states have a city called springfield",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'springfield'\nRETURN count(city.state_name)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many states have cities named springfield",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'springfield'\nRETURN count(city.state_name)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many states have cities or towns named springfield",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'springfield'\nRETURN count(city.state_name)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many major cities are in texas",
        "query": "MATCH (city:`geo.city`)\nWHERE city.population > 150000 AND city.state_name = 'texas'\nRETURN count(city.city_name)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many big cities are in texas",
        "query": "MATCH (city:`geo.city`)\nWHERE city.population > 150000 AND city.state_name = 'texas'\nRETURN count(city.city_name)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many major cities are there in texas",
        "query": "MATCH (city:`geo.city`)\nWHERE city.population > 150000 AND city.state_name = 'texas'\nRETURN count(city.city_name)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many states does the missouri run through",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'missouri'\nRETURN count(river.traverse)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many states does the missouri river flow through",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'missouri'\nRETURN count(river.traverse)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many states does the missouri river run through",
        "query": "MATCH (river:`geo.river`)\nWHERE river.river_name = 'missouri'\nRETURN count(river.traverse)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many states border at least one other state",
        "query": "MATCH ()-[border_info:`geo.border_info`]-()\nRETURN count(DISTINCT border_info.state_name)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "what is the height of the highest mountain in texas",
        "query": "MATCH (highlow:`geo.highlow`)\nWHERE highlow.state_name = 'texas'\nRETURN max(DISTINCT highlow.highest_elevation)",
        "db_id": "geo",
        "answers": [
            [
                null
            ]
        ]
    },
    {
        "question": "how many major rivers cross ohio",
        "query": "MATCH (river:`geo.river`)\nWHERE river.length > 750 AND river.traverse = 'ohio'\nRETURN count(river.river_name)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many states are next to major rivers",
        "query": "MATCH (river:`geo.river`)\nWHERE river.length > 750\nRETURN count(DISTINCT river.traverse)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many states have major rivers",
        "query": "MATCH (river:`geo.river`)\nWHERE river.length > 750\nRETURN count(river.traverse)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many cities are in texas",
        "query": "MATCH (city:`geo.city`)\nWHERE city.state_name = 'texas'\nRETURN count(city.city_name)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many cities does texas have",
        "query": "MATCH (city:`geo.city`)\nWHERE city.state_name = 'texas'\nRETURN count(city.city_name)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "how many cities named austin are there in the usa",
        "query": "MATCH (city:`geo.city`)\nWHERE city.city_name = 'austin'\nRETURN count(city.city_name)",
        "db_id": "geo",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many tips have been written in 2015",
        "query": "MATCH (tip:`yelp.tip`)\nWHERE tip.year = 2015\nRETURN count(DISTINCT tip.text)",
        "db_id": "yelp",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many Starbucks are there in Dallas Texas ?",
        "query": "MATCH (business:`yelp.business`)\nWHERE business.city = 'Dallas' AND business.name = 'Starbucks' AND business.state = 'Texas'\nRETURN count(DISTINCT business.business_id)",
        "db_id": "yelp",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many Target are there in \" Los Angeles \" ?",
        "query": "MATCH (business:`yelp.business`)\nWHERE business.city = 'Los Angeles' AND business.name = 'Target'\nRETURN count(DISTINCT business.business_id)",
        "db_id": "yelp",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "What is the average rating of reviews written in year 2014 ?",
        "query": "MATCH (review:`yelp.review`)\nWHERE review.year = 2014\nRETURN avg(review.rating)",
        "db_id": "yelp",
        "answers": [
            [
                null
            ]
        ]
    },
    {
        "question": "Find the number of users called Michelle",
        "query": "MATCH (user:`yelp.user`)\nWHERE user.name = 'Michelle'\nRETURN count(DISTINCT user.name)",
        "db_id": "yelp",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Return me the number of cities that has \" Panda Express \" .",
        "query": "MATCH (business:`yelp.business`)\nWHERE business.name = 'Panda Express'\nRETURN count(DISTINCT business.city)",
        "db_id": "yelp",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Find the total number of reviews written in March",
        "query": "MATCH (review:`yelp.review`)\nWHERE review.month = 'March'\nRETURN count(DISTINCT review.text)",
        "db_id": "yelp",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "return me the number of papers after 2000 .",
        "query": "MATCH (publication:`academic.publication`)\nWHERE publication.year > 2000\nRETURN count(DISTINCT publication.title)",
        "db_id": "academic",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "return me the number of the organizations in \" North America \" .",
        "query": "MATCH (organization:`academic.organization`)\nWHERE organization.continent = 'North America'\nRETURN count(DISTINCT organization.name)",
        "db_id": "academic",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many movies were produced in the year 2013 ?",
        "query": "MATCH (movie:`imdb.movie`)\nWHERE movie.release_year = 2013\nRETURN count(DISTINCT movie.title)",
        "db_id": "imdb",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "What is the number of movies produced in 2013 ?",
        "query": "MATCH (movie:`imdb.movie`)\nWHERE movie.release_year = 2013\nRETURN count(DISTINCT movie.title)",
        "db_id": "imdb",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many actors were born in \" Los Angeles \" after 2000 ?",
        "query": "MATCH (actor:`imdb.actor`)\nWHERE actor.birth_city = 'Los Angeles' AND actor.birth_year > 2000\nRETURN count(DISTINCT actor.name)",
        "db_id": "imdb",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many female actors were born in \" New York City \" after 1980 ?",
        "query": "MATCH (actor:`imdb.actor`)\nWHERE actor.birth_city = 'New York City' AND actor.birth_year > 1980 AND actor.gender = 'female'\nRETURN count(DISTINCT actor.name)",
        "db_id": "imdb",
        "answers": [
            [
                0
            ]
        ]
    }
]