[
    {
        "question": "How many singers do we have?",
        "query": "MATCH (singer:`concert_singer.singer`)\nRETURN count(*)",
        "db_id": "concert_singer",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "What is the total number of singers?",
        "query": "MATCH (singer:`concert_singer.singer`)\nRETURN count(*)",
        "db_id": "concert_singer",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "query": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.Name,singer.Country,singer.Age\nORDER BY singer.Age DESC",
        "db_id": "concert_singer",
        "answers": [
            [
                "Joe Sharp",
                "Netherlands",
                52
            ],
            [
                "John Nizinik",
                "France",
                43
            ],
            [
                "Rose White",
                "France",
                41
            ],
            [
                "Timbaland",
                "United States",
                32
            ],
            [
                "Justin Brown",
                "France",
                29
            ],
            [
                "Tribal King",
                "France",
                25
            ]
        ]
    },
    {
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "query": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.Name,singer.Country,singer.Age\nORDER BY singer.Age DESC",
        "db_id": "concert_singer",
        "answers": [
            [
                "Joe Sharp",
                "Netherlands",
                52
            ],
            [
                "John Nizinik",
                "France",
                43
            ],
            [
                "Rose White",
                "France",
                41
            ],
            [
                "Timbaland",
                "United States",
                32
            ],
            [
                "Justin Brown",
                "France",
                29
            ],
            [
                "Tribal King",
                "France",
                25
            ]
        ]
    },
    {
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "query": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Country = 'France'\nRETURN avg(singer.Age),min(singer.Age),max(singer.Age)",
        "db_id": "concert_singer",
        "answers": [
            [
                34.5,
                25,
                43
            ]
        ]
    },
    {
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "query": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Country = 'France'\nRETURN avg(singer.Age),min(singer.Age),max(singer.Age)",
        "db_id": "concert_singer",
        "answers": [
            [
                34.5,
                25,
                43
            ]
        ]
    },
    {
        "question": "Show the name and the release year of the song by the youngest singer.",
        "query": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.Song_Name,singer.Song_release_year\nORDER BY singer.Age\nLIMIT 1",
        "db_id": "concert_singer",
        "answers": [
            [
                "Love",
                "2016"
            ]
        ]
    },
    {
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "query": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.Song_Name,singer.Song_release_year\nORDER BY singer.Age\nLIMIT 1",
        "db_id": "concert_singer",
        "answers": [
            [
                "Love",
                "2016"
            ]
        ]
    },
    {
        "question": "What are all distinct countries where singers above age 20 are from?",
        "query": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Age > 20\nRETURN DISTINCT singer.Country",
        "db_id": "concert_singer",
        "answers": [
            [
                "Netherlands"
            ],
            [
                "United States"
            ],
            [
                "France"
            ]
        ]
    },
    {
        "question": "What are  the different countries with singers above age 20?",
        "query": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Age > 20\nRETURN DISTINCT singer.Country",
        "db_id": "concert_singer",
        "answers": [
            [
                "Netherlands"
            ],
            [
                "United States"
            ],
            [
                "France"
            ]
        ]
    },
    {
        "question": "Show all countries and the number of singers in each country.",
        "query": "MATCH (singer:`concert_singer.singer`)\nWITH singer.Country AS Country, count(singer.Country) AS count\nRETURN Country,count",
        "db_id": "concert_singer",
        "answers": [
            [
                "Netherlands",
                1
            ],
            [
                "United States",
                1
            ],
            [
                "France",
                4
            ]
        ]
    },
    {
        "question": "How many singers are from each country?",
        "query": "MATCH (singer:`concert_singer.singer`)\nWITH singer.Country AS Country, count(singer.Country) AS count\nRETURN Country,count",
        "db_id": "concert_singer",
        "answers": [
            [
                "Netherlands",
                1
            ],
            [
                "United States",
                1
            ],
            [
                "France",
                4
            ]
        ]
    },
    {
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "query": "MATCH (stadium:`concert_singer.stadium`)\nWHERE 5000<=stadium.Capacity<=10000\nRETURN stadium.Location,stadium.Name",
        "db_id": "concert_singer",
        "answers": []
    },
    {
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "query": "MATCH (stadium:`concert_singer.stadium`)\nWHERE 5000<=stadium.Capacity<=10000\nRETURN stadium.Location,stadium.Name",
        "db_id": "concert_singer",
        "answers": []
    },
    {
        "question": "What is the average and maximum capacities for all stadiums ?",
        "query": "MATCH (stadium:`concert_singer.stadium`)\nRETURN avg(stadium.Capacity),max(stadium.Capacity)",
        "db_id": "concert_singer",
        "answers": [
            [
                10621.666666666666,
                52500
            ]
        ]
    },
    {
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "query": "MATCH (stadium:`concert_singer.stadium`)\nRETURN stadium.Name,stadium.Capacity\nORDER BY stadium.Average DESC\nLIMIT 1",
        "db_id": "concert_singer",
        "answers": [
            [
                "Stark's Park",
                10104
            ]
        ]
    },
    {
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "query": "MATCH (stadium:`concert_singer.stadium`)\nRETURN stadium.Name,stadium.Capacity\nORDER BY stadium.Average DESC\nLIMIT 1",
        "db_id": "concert_singer",
        "answers": [
            [
                "Stark's Park",
                10104
            ]
        ]
    },
    {
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "query": "MATCH (T1:`concert_singer.concert`)-[]-(T2:`concert_singer.stadium`)\nWITH count(T1.Stadium_ID) AS count, T2.Name AS Name\nRETURN Name,count",
        "db_id": "concert_singer",
        "answers": []
    },
    {
        "question": "For each stadium, how many concerts play there?",
        "query": "MATCH (T1:`concert_singer.concert`)-[]-(T2:`concert_singer.stadium`)\nWITH count(T1.Stadium_ID) AS count, T2.Name AS Name\nRETURN Name,count",
        "db_id": "concert_singer",
        "answers": []
    },
    {
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "query": "MATCH (T1:`concert_singer.concert`)-[]-(T2:`concert_singer.stadium`)\nWHERE T1.Year >= 2014\nWITH T2.Capacity AS Capacity, count(T2.Stadium_ID) AS count, T2.Name AS Name\nRETURN Name,Capacity\nORDER BY count DESC\nLIMIT 1",
        "db_id": "concert_singer",
        "answers": []
    },
    {
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "query": "MATCH ()-[T1:`concert_singer.singer_in_concert`]-(T2:`concert_singer.concert`)\nWITH count(T2.concert_ID) AS count, T2.concert_Name AS concert_Name, T2.Theme AS Theme\nRETURN concert_Name,Theme,count",
        "db_id": "concert_singer",
        "answers": []
    },
    {
        "question": "List singer names and number of concerts for each singer.",
        "query": "MATCH ()-[T1:`concert_singer.singer_in_concert`]-(T2:`concert_singer.singer`)\nWITH count(T2.Singer_ID) AS count, T2.Name AS Name\nRETURN Name,count",
        "db_id": "concert_singer",
        "answers": []
    },
    {
        "question": "What are the names of the singers and number of concerts for each person?",
        "query": "MATCH ()-[T1:`concert_singer.singer_in_concert`]-(T2:`concert_singer.singer`)\nWITH count(T2.Singer_ID) AS count, T2.Name AS Name\nRETURN Name,count",
        "db_id": "concert_singer",
        "answers": []
    },
    {
        "question": "List all singer names in concerts in year 2014.",
        "query": "MATCH ()-[T1:`concert_singer.singer_in_concert`]-(T2:`concert_singer.singer`)-[]-(T3:`concert_singer.concert`)\nWHERE T3.Year = 2014\nRETURN T2.Name",
        "db_id": "concert_singer",
        "answers": []
    },
    {
        "question": "What are the names of the singers who performed in a concert in 2014?",
        "query": "MATCH ()-[T1:`concert_singer.singer_in_concert`]-(T2:`concert_singer.singer`)-[]-(T3:`concert_singer.concert`)\nWHERE T3.Year = 2014\nRETURN T2.Name",
        "db_id": "concert_singer",
        "answers": []
    },
    {
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "query": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Song_Name =~'.*[H|h]ey.*'\nRETURN singer.Name,singer.Country",
        "db_id": "concert_singer",
        "answers": [
            [
                "Justin Brown",
                "France"
            ]
        ]
    },
    {
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "query": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Song_Name =~'.*[H|h]ey.*'\nRETURN singer.Name,singer.Country",
        "db_id": "concert_singer",
        "answers": [
            [
                "Justin Brown",
                "France"
            ]
        ]
    },
    {
        "question": "Find the number of pets whose weight is heavier than 10.",
        "query": "MATCH (pets:`pets_1.Pets`)\nWHERE pets.weight > 10\nRETURN count(*)",
        "db_id": "pets_1",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "How many pets have a greater weight than 10?",
        "query": "MATCH (pets:`pets_1.Pets`)\nWHERE pets.weight > 10\nRETURN count(*)",
        "db_id": "pets_1",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "Find the weight of the youngest dog.",
        "query": "MATCH (pets:`pets_1.Pets`)\nRETURN pets.weight\nORDER BY pets.pet_age\nLIMIT 1",
        "db_id": "pets_1",
        "answers": [
            [
                9.3
            ]
        ]
    },
    {
        "question": "How much does the youngest dog weigh?",
        "query": "MATCH (pets:`pets_1.Pets`)\nRETURN pets.weight\nORDER BY pets.pet_age\nLIMIT 1",
        "db_id": "pets_1",
        "answers": [
            [
                9.3
            ]
        ]
    },
    {
        "question": "Find number of pets owned by students who are older than 20.",
        "query": "MATCH (T1:`pets_1.Student`)-[]-(T2:`pets_1.Has_Pet`)\nWHERE T1.Age > 20\nRETURN count(*)",
        "db_id": "pets_1",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many pets are owned by students that have an age greater than 20?",
        "query": "MATCH (T1:`pets_1.Student`)-[]-(T2:`pets_1.Has_Pet`)\nWHERE T1.Age > 20\nRETURN count(*)",
        "db_id": "pets_1",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Find the number of distinct type of pets.",
        "query": "MATCH (pets:`pets_1.Pets`)\nRETURN count(DISTINCT pets.PetType)",
        "db_id": "pets_1",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "How many different types of pet are there?",
        "query": "MATCH (pets:`pets_1.Pets`)\nRETURN count(DISTINCT pets.PetType)",
        "db_id": "pets_1",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "Find the first name of students who have cat or dog pet.",
        "query": "MATCH (T2:`pets_1.Has_Pet`)-[]-(T3:`pets_1.Pets`)-[]-(T1:`pets_1.Student`)-[]-(T2:`pets_1.Has_Pet`)\nWHERE T3.PetType = 'cat' OR T3.PetType = 'dog'\nRETURN DISTINCT T1.Fname",
        "db_id": "pets_1",
        "answers": []
    },
    {
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "query": "MATCH (T2:`pets_1.Has_Pet`)-[]-(T3:`pets_1.Pets`)-[]-(T1:`pets_1.Student`)-[]-(T2:`pets_1.Has_Pet`)\nWHERE T3.PetType = 'cat' OR T3.PetType = 'dog'\nRETURN DISTINCT T1.Fname",
        "db_id": "pets_1",
        "answers": []
    },
    {
        "question": "Find the major and age of students who do not have a cat pet.",
        "query": "MATCH (student:`pets_1.Student`)\nWHERE NOT (student:`pets_1.Student`)-[]-(:`pets_1.Has_Pet`)-[]-(:`pets_1.Pets { PetType : 'cat' }`)-[]-(:`pets_1.Student`)-[]-(:`pets_1.Has_Pet`)\nRETURN student.Major,student.Age",
        "db_id": "pets_1",
        "answers": [
            [
                600,
                18
            ],
            [
                600,
                19
            ],
            [
                600,
                21
            ],
            [
                600,
                20
            ],
            [
                600,
                26
            ],
            [
                600,
                18
            ],
            [
                600,
                18
            ],
            [
                600,
                20
            ],
            [
                600,
                19
            ],
            [
                600,
                17
            ],
            [
                600,
                22
            ],
            [
                600,
                20
            ],
            [
                600,
                18
            ],
            [
                600,
                16
            ],
            [
                600,
                17
            ],
            [
                600,
                27
            ],
            [
                600,
                20
            ],
            [
                600,
                18
            ],
            [
                520,
                22
            ],
            [
                520,
                19
            ],
            [
                540,
                17
            ],
            [
                520,
                20
            ],
            [
                540,
                18
            ],
            [
                520,
                18
            ],
            [
                520,
                19
            ],
            [
                520,
                18
            ],
            [
                550,
                20
            ],
            [
                100,
                17
            ],
            [
                550,
                21
            ],
            [
                550,
                20
            ],
            [
                550,
                20
            ],
            [
                550,
                18
            ],
            [
                50,
                18
            ],
            [
                50,
                26
            ]
        ]
    },
    {
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "query": "MATCH (student:`pets_1.Student`)\nWHERE NOT (student:`pets_1.Student`)-[]-(:`pets_1.Has_Pet`)-[]-(:`pets_1.Pets { PetType : 'cat' }`)-[]-(:`pets_1.Student`)-[]-(:`pets_1.Has_Pet`)\nRETURN student.Major,student.Age",
        "db_id": "pets_1",
        "answers": [
            [
                600,
                18
            ],
            [
                600,
                19
            ],
            [
                600,
                21
            ],
            [
                600,
                20
            ],
            [
                600,
                26
            ],
            [
                600,
                18
            ],
            [
                600,
                18
            ],
            [
                600,
                20
            ],
            [
                600,
                19
            ],
            [
                600,
                17
            ],
            [
                600,
                22
            ],
            [
                600,
                20
            ],
            [
                600,
                18
            ],
            [
                600,
                16
            ],
            [
                600,
                17
            ],
            [
                600,
                27
            ],
            [
                600,
                20
            ],
            [
                600,
                18
            ],
            [
                520,
                22
            ],
            [
                520,
                19
            ],
            [
                540,
                17
            ],
            [
                520,
                20
            ],
            [
                540,
                18
            ],
            [
                520,
                18
            ],
            [
                520,
                19
            ],
            [
                520,
                18
            ],
            [
                550,
                20
            ],
            [
                100,
                17
            ],
            [
                550,
                21
            ],
            [
                550,
                20
            ],
            [
                550,
                20
            ],
            [
                550,
                18
            ],
            [
                50,
                18
            ],
            [
                50,
                26
            ]
        ]
    },
    {
        "question": "Find the type and weight of the youngest pet.",
        "query": "MATCH (pets:`pets_1.Pets`)\nRETURN pets.PetType,pets.weight\nORDER BY pets.pet_age\nLIMIT 1",
        "db_id": "pets_1",
        "answers": [
            [
                "dog",
                9.3
            ]
        ]
    },
    {
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "query": "MATCH (pets:`pets_1.Pets`)\nRETURN pets.PetType,pets.weight\nORDER BY pets.pet_age\nLIMIT 1",
        "db_id": "pets_1",
        "answers": [
            [
                "dog",
                9.3
            ]
        ]
    },
    {
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "query": "MATCH (pets:`pets_1.Pets`)\nWHERE pets.pet_age > 1\nRETURN pets.PetID,pets.weight",
        "db_id": "pets_1",
        "answers": [
            [
                2001,
                12.0
            ],
            [
                2002,
                13.4
            ]
        ]
    },
    {
        "question": "What is the id and weight of every pet who is older than 1?",
        "query": "MATCH (pets:`pets_1.Pets`)\nWHERE pets.pet_age > 1\nRETURN pets.PetID,pets.weight",
        "db_id": "pets_1",
        "answers": [
            [
                2001,
                12.0
            ],
            [
                2002,
                13.4
            ]
        ]
    },
    {
        "question": "Find the first name and age of students who have a pet.",
        "query": "MATCH (T1:`pets_1.Student`)-[]-(T2:`pets_1.Has_Pet`)\nRETURN DISTINCT T1.Fname,T1.Age",
        "db_id": "pets_1",
        "answers": []
    },
    {
        "question": "What are the different first names and ages of the students who do have pets?",
        "query": "MATCH (T1:`pets_1.Student`)-[]-(T2:`pets_1.Has_Pet`)\nRETURN DISTINCT T1.Fname,T1.Age",
        "db_id": "pets_1",
        "answers": []
    },
    {
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "query": "MATCH (T1:`pets_1.Student`)-[]-(T2:`pets_1.Has_Pet`)\nWHERE T1.LName = 'Smith'\nRETURN T2.PetID",
        "db_id": "pets_1",
        "answers": []
    },
    {
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "query": "MATCH (T1:`pets_1.Student`)-[]-(T2:`pets_1.Has_Pet`)\nWHERE T1.LName = 'Smith'\nRETURN T2.PetID",
        "db_id": "pets_1",
        "answers": []
    },
    {
        "question": "Find the number of pets for each student who has any pet and student id.",
        "query": "MATCH (T1:`pets_1.Student`)-[]-(T2:`pets_1.Has_Pet`)\nWITH count(T1.StuID) AS count, T1.StuID AS StuID\nRETURN count,StuID",
        "db_id": "pets_1",
        "answers": []
    },
    {
        "question": "Find the first name and gender of student who have more than one pet.",
        "query": "MATCH (T1:`pets_1.Student`)-[]-(T2:`pets_1.Has_Pet`)\nWITH count(*) AS count, T1.Fname AS Fname, T1.Sex AS Sex\nWHERE count  > 1\nRETURN Fname,Sex",
        "db_id": "pets_1",
        "answers": []
    },
    {
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "query": "MATCH (T1:`pets_1.Student`)-[]-(T2:`pets_1.Has_Pet`)\nWITH count(*) AS count, T1.Fname AS Fname, T1.Sex AS Sex\nWHERE count  > 1\nRETURN Fname,Sex",
        "db_id": "pets_1",
        "answers": []
    },
    {
        "question": "Find the last name of the student who has a cat that is age 3.",
        "query": "MATCH (T2:`pets_1.Has_Pet`)-[]-(T3:`pets_1.Pets`)-[]-(T1:`pets_1.Student`)-[]-(T2:`pets_1.Has_Pet`)\nWHERE T3.pet_age = 3 AND T3.PetType = 'cat'\nRETURN T1.LName",
        "db_id": "pets_1",
        "answers": []
    },
    {
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "query": "MATCH (T2:`pets_1.Has_Pet`)-[]-(T3:`pets_1.Pets`)-[]-(T1:`pets_1.Student`)-[]-(T2:`pets_1.Has_Pet`)\nWHERE T3.pet_age = 3 AND T3.PetType = 'cat'\nRETURN T1.LName",
        "db_id": "pets_1",
        "answers": []
    },
    {
        "question": "How many continents are there?",
        "query": "MATCH (continents:`car_1.continents`)\nRETURN count(*)",
        "db_id": "car_1",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "What is the number of continents?",
        "query": "MATCH (continents:`car_1.continents`)\nRETURN count(*)",
        "db_id": "car_1",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "query": "MATCH (T1:`car_1.continents`)-[]-(T2:`car_1.countries`)\nWITH count(T1.ContId) AS count, T1.Continent AS Continent, T1.ContId AS ContId\nRETURN ContId,Continent,count",
        "db_id": "car_1",
        "answers": [
            [
                1,
                "america",
                3
            ],
            [
                2,
                "europe",
                6
            ],
            [
                3,
                "asia",
                2
            ],
            [
                4,
                "africa",
                2
            ],
            [
                5,
                "australia",
                2
            ]
        ]
    },
    {
        "question": "For each continent, list its id, name, and how many countries it has?",
        "query": "MATCH (T1:`car_1.continents`)-[]-(T2:`car_1.countries`)\nWITH count(T1.ContId) AS count, T1.Continent AS Continent, T1.ContId AS ContId\nRETURN ContId,Continent,count",
        "db_id": "car_1",
        "answers": [
            [
                1,
                "america",
                3
            ],
            [
                2,
                "europe",
                6
            ],
            [
                3,
                "asia",
                2
            ],
            [
                4,
                "africa",
                2
            ],
            [
                5,
                "australia",
                2
            ]
        ]
    },
    {
        "question": "How many countries are listed?",
        "query": "MATCH (countries:`car_1.countries`)\nRETURN count(*)",
        "db_id": "car_1",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "How many countries exist?",
        "query": "MATCH (countries:`car_1.countries`)\nRETURN count(*)",
        "db_id": "car_1",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)\nWITH count(T1.Id) AS count, T1.Id AS Id, T1.FullName AS FullName\nRETURN FullName,Id,count",
        "db_id": "car_1",
        "answers": [
            [
                "American Motor Company",
                1,
                1
            ],
            [
                "Volkswagen",
                2,
                2
            ],
            [
                "BMW",
                3,
                1
            ],
            [
                "General Motors",
                4,
                5
            ],
            [
                "Ford Motor Company",
                5,
                3
            ],
            [
                "Chrysler",
                6,
                4
            ],
            [
                "Citroen",
                7,
                1
            ],
            [
                "Nissan Motors",
                8,
                2
            ],
            [
                "Fiat",
                9,
                1
            ],
            [
                "Honda",
                11,
                1
            ],
            [
                "Mazda",
                12,
                1
            ],
            [
                "Daimler Benz",
                13,
                2
            ],
            [
                "Opel",
                14,
                1
            ],
            [
                "Peugeaut",
                15,
                1
            ],
            [
                "Renault",
                16,
                1
            ],
            [
                "Saab",
                17,
                1
            ],
            [
                "Subaru",
                18,
                1
            ],
            [
                "Toyota",
                19,
                2
            ],
            [
                "Triumph",
                20,
                1
            ],
            [
                "Volvo",
                21,
                1
            ],
            [
                "Kia Motors",
                22,
                1
            ],
            [
                "Hyundai",
                23,
                1
            ]
        ]
    },
    {
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)\nWITH count(T1.Id) AS count, T1.Id AS Id, T1.FullName AS FullName\nRETURN FullName,Id,count",
        "db_id": "car_1",
        "answers": [
            [
                "American Motor Company",
                1,
                1
            ],
            [
                "Volkswagen",
                2,
                2
            ],
            [
                "BMW",
                3,
                1
            ],
            [
                "General Motors",
                4,
                5
            ],
            [
                "Ford Motor Company",
                5,
                3
            ],
            [
                "Chrysler",
                6,
                4
            ],
            [
                "Citroen",
                7,
                1
            ],
            [
                "Nissan Motors",
                8,
                2
            ],
            [
                "Fiat",
                9,
                1
            ],
            [
                "Honda",
                11,
                1
            ],
            [
                "Mazda",
                12,
                1
            ],
            [
                "Daimler Benz",
                13,
                2
            ],
            [
                "Opel",
                14,
                1
            ],
            [
                "Peugeaut",
                15,
                1
            ],
            [
                "Renault",
                16,
                1
            ],
            [
                "Saab",
                17,
                1
            ],
            [
                "Subaru",
                18,
                1
            ],
            [
                "Toyota",
                19,
                2
            ],
            [
                "Triumph",
                20,
                1
            ],
            [
                "Volvo",
                21,
                1
            ],
            [
                "Kia Motors",
                22,
                1
            ],
            [
                "Hyundai",
                23,
                1
            ]
        ]
    },
    {
        "question": "Which model of the car has the minimum horsepower?",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nRETURN T1.Model\nORDER BY T2.Horsepower ASC\nLIMIT 1",
        "db_id": "car_1",
        "answers": [
            [
                "amc"
            ]
        ]
    },
    {
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nRETURN T1.Model\nORDER BY T2.Horsepower ASC\nLIMIT 1",
        "db_id": "car_1",
        "answers": [
            [
                "amc"
            ]
        ]
    },
    {
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "query": "MATCH (T4:`car_1.cars_data`)-[]-(T3:`car_1.car_names`)-[]-(T3:`car_1.car_names`)-[]-(T2:`car_1.model_list`)-[]-(T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)\nWHERE T4.Year = '1970'\nRETURN DISTINCT T1.Maker",
        "db_id": "car_1",
        "answers": []
    },
    {
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "query": "MATCH (T4:`car_1.cars_data`)-[]-(T3:`car_1.car_names`)-[]-(T3:`car_1.car_names`)-[]-(T2:`car_1.model_list`)-[]-(T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)\nWHERE T4.Year = '1970'\nRETURN DISTINCT T1.Maker",
        "db_id": "car_1",
        "answers": []
    },
    {
        "question": "Which distinct car models are the produced after 1980?",
        "query": "MATCH (T3:`car_1.cars_data`)-[]-(T2:`car_1.car_names`)-[]-(T1:`car_1.model_list`)-[]-(T2:`car_1.car_names`)\nWHERE T3.Year > 1980\nRETURN DISTINCT T1.Model",
        "db_id": "car_1",
        "answers": []
    },
    {
        "question": "What are the different models for the cards produced after 1980?",
        "query": "MATCH (T3:`car_1.cars_data`)-[]-(T2:`car_1.car_names`)-[]-(T1:`car_1.model_list`)-[]-(T2:`car_1.car_names`)\nWHERE T3.Year > 1980\nRETURN DISTINCT T1.Model",
        "db_id": "car_1",
        "answers": []
    },
    {
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "query": "MATCH (T3:`car_1.car_makers`)-[]-(T2:`car_1.countries`)-[]-(T1:`car_1.continents`)-[]-(T2:`car_1.countries`)\nWITH T1.Continent AS Continent, count(T1.Continent) AS count\nRETURN Continent,count",
        "db_id": "car_1",
        "answers": []
    },
    {
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "query": "MATCH (T3:`car_1.car_makers`)-[]-(T2:`car_1.countries`)-[]-(T1:`car_1.continents`)-[]-(T2:`car_1.countries`)\nWITH T1.Continent AS Continent, count(T1.Continent) AS count\nRETURN Continent,count",
        "db_id": "car_1",
        "answers": []
    },
    {
        "question": "Which of the countries has the most car makers? List the country name.",
        "query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.countries`)\nWITH T2.CountryName AS CountryName, count(T1.Country) AS count\nRETURN CountryName\nORDER BY count DESC\nLIMIT 1",
        "db_id": "car_1",
        "answers": []
    },
    {
        "question": "What is the name of the country with the most car makers?",
        "query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.countries`)\nWITH T2.CountryName AS CountryName, count(T1.Country) AS count\nRETURN CountryName\nORDER BY count DESC\nLIMIT 1",
        "db_id": "car_1",
        "answers": []
    },
    {
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "query": "MATCH (T1:`car_1.model_list`)-[]-(T2:`car_1.car_makers`)\nWITH count(T2.Id) AS count, T2.Id AS Id, T2.FullName AS FullName\nRETURN count,FullName,Id",
        "db_id": "car_1",
        "answers": [
            [
                1,
                "American Motor Company",
                1
            ],
            [
                2,
                "Volkswagen",
                2
            ],
            [
                1,
                "BMW",
                3
            ],
            [
                5,
                "General Motors",
                4
            ],
            [
                3,
                "Ford Motor Company",
                5
            ],
            [
                4,
                "Chrysler",
                6
            ],
            [
                1,
                "Citroen",
                7
            ],
            [
                2,
                "Nissan Motors",
                8
            ],
            [
                1,
                "Fiat",
                9
            ],
            [
                1,
                "Honda",
                11
            ],
            [
                1,
                "Mazda",
                12
            ],
            [
                2,
                "Daimler Benz",
                13
            ],
            [
                1,
                "Opel",
                14
            ],
            [
                1,
                "Peugeaut",
                15
            ],
            [
                1,
                "Renault",
                16
            ],
            [
                1,
                "Saab",
                17
            ],
            [
                1,
                "Subaru",
                18
            ],
            [
                2,
                "Toyota",
                19
            ],
            [
                1,
                "Triumph",
                20
            ],
            [
                1,
                "Volvo",
                21
            ],
            [
                1,
                "Kia Motors",
                22
            ],
            [
                1,
                "Hyundai",
                23
            ]
        ]
    },
    {
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "query": "MATCH (T1:`car_1.cars_data`)-[]-(T2:`car_1.car_names`)\nWHERE T2.Make = 'amc hornet sportabout (sw)'\nRETURN T1.Accelerate",
        "db_id": "car_1",
        "answers": [
            [
                13.5
            ]
        ]
    },
    {
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "query": "MATCH (T1:`car_1.cars_data`)-[]-(T2:`car_1.car_names`)\nWHERE T2.Make = 'amc hornet sportabout (sw)'\nRETURN T1.Accelerate",
        "db_id": "car_1",
        "answers": [
            [
                13.5
            ]
        ]
    },
    {
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974\nRETURN min(cars_data.Weight)",
        "db_id": "car_1",
        "answers": [
            [
                4141
            ]
        ]
    },
    {
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974\nRETURN min(cars_data.Weight)",
        "db_id": "car_1",
        "answers": [
            [
                4141
            ]
        ]
    },
    {
        "question": "What are all the makers and models?",
        "query": "MATCH (model_list:`car_1.model_list`)\nRETURN model_list.Maker,model_list.Model",
        "db_id": "car_1",
        "answers": [
            [
                1,
                "amc"
            ],
            [
                2,
                "audi"
            ],
            [
                3,
                "bmw"
            ],
            [
                4,
                "buick"
            ],
            [
                4,
                "cadillac"
            ],
            [
                5,
                "capri"
            ],
            [
                4,
                "chevrolet"
            ],
            [
                6,
                "chrysler"
            ],
            [
                7,
                "citroen"
            ],
            [
                8,
                "datsun"
            ],
            [
                6,
                "dodge"
            ],
            [
                9,
                "fiat"
            ],
            [
                5,
                "ford"
            ],
            [
                10,
                "hi"
            ],
            [
                11,
                "honda"
            ],
            [
                12,
                "mazda"
            ],
            [
                13,
                "mercedes"
            ],
            [
                13,
                "mercedes-benz"
            ],
            [
                5,
                "mercury"
            ],
            [
                8,
                "nissan"
            ],
            [
                4,
                "oldsmobile"
            ],
            [
                14,
                "opel"
            ],
            [
                15,
                "peugeot"
            ],
            [
                6,
                "plymouth"
            ],
            [
                4,
                "pontiac"
            ],
            [
                16,
                "renault"
            ],
            [
                17,
                "saab"
            ],
            [
                18,
                "subaru"
            ],
            [
                19,
                "toyota"
            ],
            [
                20,
                "triumph"
            ],
            [
                2,
                "volkswagen"
            ],
            [
                21,
                "volvo"
            ],
            [
                22,
                "kia"
            ],
            [
                23,
                "hyundai"
            ],
            [
                6,
                "jeep"
            ],
            [
                19,
                "scion"
            ]
        ]
    },
    {
        "question": "What are the makers and models?",
        "query": "MATCH (model_list:`car_1.model_list`)\nRETURN model_list.Maker,model_list.Model",
        "db_id": "car_1",
        "answers": [
            [
                1,
                "amc"
            ],
            [
                2,
                "audi"
            ],
            [
                3,
                "bmw"
            ],
            [
                4,
                "buick"
            ],
            [
                4,
                "cadillac"
            ],
            [
                5,
                "capri"
            ],
            [
                4,
                "chevrolet"
            ],
            [
                6,
                "chrysler"
            ],
            [
                7,
                "citroen"
            ],
            [
                8,
                "datsun"
            ],
            [
                6,
                "dodge"
            ],
            [
                9,
                "fiat"
            ],
            [
                5,
                "ford"
            ],
            [
                10,
                "hi"
            ],
            [
                11,
                "honda"
            ],
            [
                12,
                "mazda"
            ],
            [
                13,
                "mercedes"
            ],
            [
                13,
                "mercedes-benz"
            ],
            [
                5,
                "mercury"
            ],
            [
                8,
                "nissan"
            ],
            [
                4,
                "oldsmobile"
            ],
            [
                14,
                "opel"
            ],
            [
                15,
                "peugeot"
            ],
            [
                6,
                "plymouth"
            ],
            [
                4,
                "pontiac"
            ],
            [
                16,
                "renault"
            ],
            [
                17,
                "saab"
            ],
            [
                18,
                "subaru"
            ],
            [
                19,
                "toyota"
            ],
            [
                20,
                "triumph"
            ],
            [
                2,
                "volkswagen"
            ],
            [
                21,
                "volvo"
            ],
            [
                22,
                "kia"
            ],
            [
                23,
                "hyundai"
            ],
            [
                6,
                "jeep"
            ],
            [
                19,
                "scion"
            ]
        ]
    },
    {
        "question": "What are the countries having at least one car maker? List name and id.",
        "query": "MATCH (T1:`car_1.countries`)-[]-(T2:`car_1.car_makers`)\nWITH count(*) AS count, T1.CountryId AS CountryId, T1.CountryName AS CountryName\nWHERE count  >= 1\nRETURN CountryName,CountryId",
        "db_id": "car_1",
        "answers": []
    },
    {
        "question": "What are the names and ids of all countries with at least one car maker?",
        "query": "MATCH (T1:`car_1.countries`)-[]-(T2:`car_1.car_makers`)\nWITH count(*) AS count, T1.CountryId AS CountryId, T1.CountryName AS CountryName\nWHERE count  >= 1\nRETURN CountryName,CountryId",
        "db_id": "car_1",
        "answers": []
    },
    {
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "query": "MATCH (T3:`car_1.car_makers`)-[]-(T1:`car_1.countries`)-[]-(T1:`car_1.countries`)-[]-(T2:`car_1.continents`)\nWHERE T2.Continent = 'europe'\nWITH count(*) AS count, T1.CountryName AS CountryName\nWHERE count  >= 3\nRETURN CountryName",
        "db_id": "car_1",
        "answers": []
    },
    {
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "query": "MATCH (T3:`car_1.car_makers`)-[]-(T1:`car_1.countries`)-[]-(T1:`car_1.countries`)-[]-(T2:`car_1.continents`)\nWHERE T2.Continent = 'europe'\nWITH count(*) AS count, T1.CountryName AS CountryName\nWHERE count  >= 3\nRETURN CountryName",
        "db_id": "car_1",
        "answers": []
    },
    {
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nWHERE T2.Cylinders = 3\nRETURN T2.Horsepower,T1.Make\nORDER BY T2.Horsepower DESC\nLIMIT 1",
        "db_id": "car_1",
        "answers": [
            [
                "97",
                "mazda rx2 coupe"
            ]
        ]
    },
    {
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nWHERE T2.Cylinders = 3\nRETURN T2.Horsepower,T1.Make\nORDER BY T2.Horsepower DESC\nLIMIT 1",
        "db_id": "car_1",
        "answers": [
            [
                "97",
                "mazda rx2 coupe"
            ]
        ]
    },
    {
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nRETURN T1.Model\nORDER BY T2.MPG DESC\nLIMIT 1",
        "db_id": "car_1",
        "answers": [
            [
                "citroen"
            ]
        ]
    },
    {
        "question": "What is the average edispl of the cars of model volvo?",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nWHERE T1.Model = 'volvo'\nRETURN avg(T2.Edispl)",
        "db_id": "car_1",
        "answers": [
            [
                133.5
            ]
        ]
    },
    {
        "question": "What is the average edispl for all volvos?",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nWHERE T1.Model = 'volvo'\nRETURN avg(T2.Edispl)",
        "db_id": "car_1",
        "answers": [
            [
                133.5
            ]
        ]
    },
    {
        "question": "Which model has the most version(make) of cars?",
        "query": "MATCH (car_names:`car_1.car_names`)\nWITH car_names.Model AS Model, count(car_names.Model) AS count\nRETURN Model\nORDER BY count DESC\nLIMIT 1",
        "db_id": "car_1",
        "answers": [
            [
                "ford"
            ]
        ]
    },
    {
        "question": "What model has the most different versions?",
        "query": "MATCH (car_names:`car_1.car_names`)\nWITH car_names.Model AS Model, count(car_names.Model) AS count\nRETURN Model\nORDER BY count DESC\nLIMIT 1",
        "db_id": "car_1",
        "answers": [
            [
                "ford"
            ]
        ]
    },
    {
        "question": "How many cars have more than 4 cylinders?",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders > 4\nRETURN count(*)",
        "db_id": "car_1",
        "answers": [
            [
                195
            ]
        ]
    },
    {
        "question": "What is the number of cars with more than 4 cylinders?",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders > 4\nRETURN count(*)",
        "db_id": "car_1",
        "answers": [
            [
                195
            ]
        ]
    },
    {
        "question": "how many cars were produced in 1980?",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Year = 1980\nRETURN count(*)",
        "db_id": "car_1",
        "answers": [
            [
                29
            ]
        ]
    },
    {
        "question": "In 1980, how many cars were made?",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Year = 1980\nRETURN count(*)",
        "db_id": "car_1",
        "answers": [
            [
                29
            ]
        ]
    },
    {
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)\nWHERE T1.FullName = 'American Motor Company'\nRETURN count(*)",
        "db_id": "car_1",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)\nWHERE T1.FullName = 'American Motor Company'\nRETURN count(*)",
        "db_id": "car_1",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)\nWITH count(*) AS count, T1.Id AS Id, T1.FullName AS FullName\nWHERE count  > 3\nRETURN FullName,Id",
        "db_id": "car_1",
        "answers": [
            [
                "General Motors",
                4
            ],
            [
                "Chrysler",
                6
            ]
        ]
    },
    {
        "question": "What are the names and ids of all makers with more than 3 models?",
        "query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)\nWITH count(*) AS count, T1.Id AS Id, T1.FullName AS FullName\nWHERE count  > 3\nRETURN FullName,Id",
        "db_id": "car_1",
        "answers": [
            [
                "General Motors",
                4
            ],
            [
                "Chrysler",
                6
            ]
        ]
    },
    {
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "query": "MATCH (T4:`car_1.cars_data`)-[]-(T1:`car_1.car_names`)-[]-(T3:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)-[]-(T1:`car_1.car_names`)-[]-(T2:`car_1.model_list`)\nWHERE T3.FullName = 'General Motors' OR T4.Weight > 3500\nRETURN DISTINCT T2.Model",
        "db_id": "car_1",
        "answers": []
    },
    {
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "query": "MATCH (T4:`car_1.cars_data`)-[]-(T1:`car_1.car_names`)-[]-(T3:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)-[]-(T1:`car_1.car_names`)-[]-(T2:`car_1.model_list`)\nWHERE T3.FullName = 'General Motors' OR T4.Weight > 3500\nRETURN DISTINCT T2.Model",
        "db_id": "car_1",
        "answers": []
    },
    {
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE 3000<=cars_data.Weight<=4000\nRETURN DISTINCT cars_data.Year",
        "db_id": "car_1",
        "answers": [
            [
                1970
            ],
            [
                1971
            ],
            [
                1972
            ],
            [
                1973
            ],
            [
                1974
            ],
            [
                1975
            ],
            [
                1976
            ],
            [
                1977
            ],
            [
                1978
            ],
            [
                1979
            ],
            [
                1980
            ],
            [
                1981
            ],
            [
                1982
            ]
        ]
    },
    {
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE 3000<=cars_data.Weight<=4000\nRETURN DISTINCT cars_data.Year",
        "db_id": "car_1",
        "answers": [
            [
                1970
            ],
            [
                1971
            ],
            [
                1972
            ],
            [
                1973
            ],
            [
                1974
            ],
            [
                1975
            ],
            [
                1976
            ],
            [
                1977
            ],
            [
                1978
            ],
            [
                1979
            ],
            [
                1980
            ],
            [
                1981
            ],
            [
                1982
            ]
        ]
    },
    {
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "query": "MATCH (T1:`car_1.cars_data`)-[]-(T2:`car_1.car_names`)\nWHERE T2.Model = 'volvo'\nRETURN T1.Cylinders\nORDER BY T1.Accelerate ASC\nLIMIT 1",
        "db_id": "car_1",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "query": "MATCH (T1:`car_1.cars_data`)-[]-(T2:`car_1.car_names`)\nWHERE T2.Model = 'volvo'\nRETURN T1.Cylinders\nORDER BY T1.Accelerate ASC\nLIMIT 1",
        "db_id": "car_1",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "How many cars has over 6 cylinders?",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders > 6\nRETURN count(*)",
        "db_id": "car_1",
        "answers": [
            [
                108
            ]
        ]
    },
    {
        "question": "What is the number of carsw ith over 6 cylinders?",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders > 6\nRETURN count(*)",
        "db_id": "car_1",
        "answers": [
            [
                108
            ]
        ]
    },
    {
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nWHERE T2.Cylinders = 4\nRETURN T1.Model\nORDER BY T2.Horsepower DESC\nLIMIT 1",
        "db_id": "car_1",
        "answers": [
            [
                "ford"
            ]
        ]
    },
    {
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nWHERE T2.Cylinders = 4\nRETURN T1.Model\nORDER BY T2.Horsepower DESC\nLIMIT 1",
        "db_id": "car_1",
        "answers": [
            [
                "ford"
            ]
        ]
    },
    {
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders = 8 OR cars_data.Year < 1980\nRETURN max(cars_data.MPG)",
        "db_id": "car_1",
        "answers": [
            [
                "null"
            ]
        ]
    },
    {
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders = 8 OR cars_data.Year < 1980\nRETURN max(cars_data.MPG)",
        "db_id": "car_1",
        "answers": [
            [
                "null"
            ]
        ]
    },
    {
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "query": "MATCH (T4:`car_1.car_makers`)-[]-(T1:`car_1.model_list`)-[]-(T3:`car_1.cars_data`)-[]-(T2:`car_1.car_names`)-[]-(T1:`car_1.model_list`)-[]-(T2:`car_1.car_names`)\nWHERE T3.Weight < 3500 AND T4.FullName <> 'Ford Motor Company'\nRETURN DISTINCT T1.Model",
        "db_id": "car_1",
        "answers": []
    },
    {
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "query": "MATCH (T4:`car_1.car_makers`)-[]-(T1:`car_1.model_list`)-[]-(T3:`car_1.cars_data`)-[]-(T2:`car_1.car_names`)-[]-(T1:`car_1.model_list`)-[]-(T2:`car_1.car_names`)\nWHERE T3.Weight < 3500 AND T4.FullName <> 'Ford Motor Company'\nRETURN DISTINCT T1.Model",
        "db_id": "car_1",
        "answers": []
    },
    {
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Airline = 'JetBlue Airways'\nRETURN airlines.Country",
        "db_id": "flight_2",
        "answers": [
            [
                "USA"
            ]
        ]
    },
    {
        "question": "What country is Jetblue Airways affiliated with?",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Airline = 'JetBlue Airways'\nRETURN airlines.Country",
        "db_id": "flight_2",
        "answers": [
            [
                "USA"
            ]
        ]
    },
    {
        "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Airline = 'JetBlue Airways'\nRETURN airlines.Abbreviation",
        "db_id": "flight_2",
        "answers": [
            [
                "JetBlue"
            ]
        ]
    },
    {
        "question": "Which abbreviation corresponds to Jetblue Airways?",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Airline = 'JetBlue Airways'\nRETURN airlines.Abbreviation",
        "db_id": "flight_2",
        "answers": [
            [
                "JetBlue"
            ]
        ]
    },
    {
        "question": "List all airline names and their abbreviations in \"USA\".",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Country = 'USA'\nRETURN airlines.Airline,airlines.Abbreviation",
        "db_id": "flight_2",
        "answers": [
            [
                "United Airlines",
                "UAL"
            ],
            [
                "US Airways",
                "USAir"
            ],
            [
                "Delta Airlines",
                "Delta"
            ],
            [
                "Southwest Airlines",
                "Southwest"
            ],
            [
                "American Airlines",
                "American"
            ],
            [
                "Northwest Airlines",
                "Northwest"
            ],
            [
                "Continental Airlines",
                "Continental"
            ],
            [
                "JetBlue Airways",
                "JetBlue"
            ],
            [
                "Frontier Airlines",
                "Frontier"
            ],
            [
                "AirTran Airways",
                "AirTran"
            ],
            [
                "Allegiant Air",
                "Allegiant"
            ],
            [
                "Virgin America",
                "Virgin"
            ]
        ]
    },
    {
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Country = 'USA'\nRETURN airlines.Airline,airlines.Abbreviation",
        "db_id": "flight_2",
        "answers": [
            [
                "United Airlines",
                "UAL"
            ],
            [
                "US Airways",
                "USAir"
            ],
            [
                "Delta Airlines",
                "Delta"
            ],
            [
                "Southwest Airlines",
                "Southwest"
            ],
            [
                "American Airlines",
                "American"
            ],
            [
                "Northwest Airlines",
                "Northwest"
            ],
            [
                "Continental Airlines",
                "Continental"
            ],
            [
                "JetBlue Airways",
                "JetBlue"
            ],
            [
                "Frontier Airlines",
                "Frontier"
            ],
            [
                "AirTran Airways",
                "AirTran"
            ],
            [
                "Allegiant Air",
                "Allegiant"
            ],
            [
                "Virgin America",
                "Virgin"
            ]
        ]
    },
    {
        "question": "List the airport code and name in the city of Anthony.",
        "query": "MATCH (airports:`flight_2.airports`)\nWHERE airports.City = 'Anthony'\nRETURN airports.AirportCode,airports.AirportName",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "Give the airport code and airport name corresonding to the city Anthony.",
        "query": "MATCH (airports:`flight_2.airports`)\nWHERE airports.City = 'Anthony'\nRETURN airports.AirportCode,airports.AirportName",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "How many airlines do we have?",
        "query": "MATCH (airlines:`flight_2.airlines`)\nRETURN count(*)",
        "db_id": "flight_2",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "question": "What is the total number of airlines?",
        "query": "MATCH (airlines:`flight_2.airlines`)\nRETURN count(*)",
        "db_id": "flight_2",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "question": "How many airports do we have?",
        "query": "MATCH (airports:`flight_2.airports`)\nRETURN count(*)",
        "db_id": "flight_2",
        "answers": [
            [
                100
            ]
        ]
    },
    {
        "question": "Return the number of  airports.",
        "query": "MATCH (airports:`flight_2.airports`)\nRETURN count(*)",
        "db_id": "flight_2",
        "answers": [
            [
                100
            ]
        ]
    },
    {
        "question": "Which airline has abbreviation 'UAL'?",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Abbreviation = 'UAL'\nRETURN airlines.Airline",
        "db_id": "flight_2",
        "answers": [
            [
                "United Airlines"
            ]
        ]
    },
    {
        "question": "Give the airline with abbreviation 'UAL'.",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Abbreviation = 'UAL'\nRETURN airlines.Airline",
        "db_id": "flight_2",
        "answers": [
            [
                "United Airlines"
            ]
        ]
    },
    {
        "question": "How many airlines are from USA?",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Country = 'USA'\nRETURN count(*)",
        "db_id": "flight_2",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "question": "Return the number of airlines in the USA.",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Country = 'USA'\nRETURN count(*)",
        "db_id": "flight_2",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "question": "Which city and country is the Alton airport at?",
        "query": "MATCH (airports:`flight_2.airports`)\nWHERE airports.AirportName = 'Alton'\nRETURN airports.City,airports.Country",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "Give the city and country for the Alton airport.",
        "query": "MATCH (airports:`flight_2.airports`)\nWHERE airports.AirportName = 'Alton'\nRETURN airports.City,airports.Country",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "What is the airport name for airport 'AKO'?",
        "query": "MATCH (airports:`flight_2.airports`)\nWHERE airports.AirportCode = 'AKO'\nRETURN airports.AirportName",
        "db_id": "flight_2",
        "answers": [
            [
                "Colorado Plains Regional Airport "
            ]
        ]
    },
    {
        "question": "Return the name of the airport with code 'AKO'.",
        "query": "MATCH (airports:`flight_2.airports`)\nWHERE airports.AirportCode = 'AKO'\nRETURN airports.AirportName",
        "db_id": "flight_2",
        "answers": [
            [
                "Colorado Plains Regional Airport "
            ]
        ]
    },
    {
        "question": "What are airport names at City 'Aberdeen'?",
        "query": "MATCH (airports:`flight_2.airports`)\nWHERE airports.City = 'Aberdeen'\nRETURN airports.AirportName",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "What are the names of airports in Aberdeen?",
        "query": "MATCH (airports:`flight_2.airports`)\nWHERE airports.City = 'Aberdeen'\nRETURN airports.AirportName",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "How many flights depart from 'APG'?",
        "query": "MATCH ()-[flights:`flight_2.flights`]-()\nWHERE flights.SourceAirport = 'APG'\nRETURN count(*)",
        "db_id": "flight_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Count the number of flights departing from 'APG'.",
        "query": "MATCH ()-[flights:`flight_2.flights`]-()\nWHERE flights.SourceAirport = 'APG'\nRETURN count(*)",
        "db_id": "flight_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many flights have destination ATO?",
        "query": "MATCH ()-[flights:`flight_2.flights`]-()\nWHERE flights.DestAirport = 'ATO'\nRETURN count(*)",
        "db_id": "flight_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Count the number of flights into ATO.",
        "query": "MATCH ()-[flights:`flight_2.flights`]-()\nWHERE flights.DestAirport = 'ATO'\nRETURN count(*)",
        "db_id": "flight_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many flights depart from City Aberdeen?",
        "query": "MATCH ()-[T1:`flight_2.flights`]-(T2:`flight_2.airports`)\nWHERE T2.City = 'Aberdeen'\nRETURN count(*)",
        "db_id": "flight_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Return the number of flights departing from Aberdeen.",
        "query": "MATCH ()-[T1:`flight_2.flights`]-(T2:`flight_2.airports`)\nWHERE T2.City = 'Aberdeen'\nRETURN count(*)",
        "db_id": "flight_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many flights arriving in Aberdeen city?",
        "query": "MATCH ()-[T1:`flight_2.flights`]-(T2:`flight_2.airports`)\nWHERE T2.City = 'Aberdeen'\nRETURN count(*)",
        "db_id": "flight_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Return the number of flights arriving in Aberdeen.",
        "query": "MATCH ()-[T1:`flight_2.flights`]-(T2:`flight_2.airports`)\nWHERE T2.City = 'Aberdeen'\nRETURN count(*)",
        "db_id": "flight_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "query": "MATCH ()-[T1:`flight_2.flights`]-(T2:`flight_2.airports`)-[]-(T3:`flight_2.airports`)\nWHERE T2.City = 'Ashley' AND T2.City = 'Aberdeen'\nRETURN count(*)",
        "db_id": "flight_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many flights fly from Aberdeen to Ashley?",
        "query": "MATCH ()-[T1:`flight_2.flights`]-(T2:`flight_2.airports`)-[]-(T3:`flight_2.airports`)\nWHERE T2.City = 'Ashley' AND T2.City = 'Aberdeen'\nRETURN count(*)",
        "db_id": "flight_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "query": "MATCH (T1:`flight_2.airlines`)-[T2:`flight_2.flights`]-()\nWHERE T1.Airline = 'United Airlines' AND T2.DestAirport = 'ASY'\nRETURN count(*)",
        "db_id": "flight_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "query": "MATCH (T1:`flight_2.airlines`)-[T2:`flight_2.flights`]-()\nWHERE T1.Airline = 'United Airlines' AND T2.DestAirport = 'ASY'\nRETURN count(*)",
        "db_id": "flight_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "query": "MATCH (T1:`flight_2.airlines`)-[T2:`flight_2.flights`]-()\nWHERE T1.Airline = 'United Airlines' AND T2.SourceAirport = 'AHD'\nRETURN count(*)",
        "db_id": "flight_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "query": "MATCH (T1:`flight_2.airlines`)-[T2:`flight_2.flights`]-()\nWHERE T1.Airline = 'United Airlines' AND T2.SourceAirport = 'AHD'\nRETURN count(*)",
        "db_id": "flight_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "query": "MATCH ()-[T1:`flight_2.flights`]-(T2:`flight_2.airports`)-[]-(T3:`flight_2.airlines`)\nWHERE T2.City = 'Aberdeen' AND T3.Airline = 'United Airlines'\nRETURN count(*)",
        "db_id": "flight_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "query": "MATCH ()-[T1:`flight_2.flights`]-(T2:`flight_2.airports`)-[]-(T3:`flight_2.airlines`)\nWHERE T2.City = 'Aberdeen' AND T3.Airline = 'United Airlines'\nRETURN count(*)",
        "db_id": "flight_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Which city has most number of arriving flights?",
        "query": "MATCH (T1:`flight_2.airports`)-[T2:`flight_2.flights`]-()\nWITH count(T1.City) AS count, T1.City AS City\nRETURN City\nORDER BY count DESC\nLIMIT 1",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "Which city has the most frequent destination airport?",
        "query": "MATCH (T1:`flight_2.airports`)-[T2:`flight_2.flights`]-()\nWITH count(T1.City) AS count, T1.City AS City\nRETURN City\nORDER BY count DESC\nLIMIT 1",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "Which city has most number of departing flights?",
        "query": "MATCH (T1:`flight_2.airports`)-[T2:`flight_2.flights`]-()\nWITH count(T1.City) AS count, T1.City AS City\nRETURN City\nORDER BY count DESC\nLIMIT 1",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "Which city is the most frequent source airport?",
        "query": "MATCH (T1:`flight_2.airports`)-[T2:`flight_2.flights`]-()\nWITH count(T1.City) AS count, T1.City AS City\nRETURN City\nORDER BY count DESC\nLIMIT 1",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "Which airline has most number of flights?",
        "query": "MATCH (T1:`flight_2.airlines`)-[T2:`flight_2.flights`]-()\nWITH count(T1.Airline) AS count, T1.Airline AS Airline\nRETURN Airline\nORDER BY count DESC\nLIMIT 1",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "What airline serves the most flights?",
        "query": "MATCH (T1:`flight_2.airlines`)-[T2:`flight_2.flights`]-()\nWITH count(T1.Airline) AS count, T1.Airline AS Airline\nRETURN Airline\nORDER BY count DESC\nLIMIT 1",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "query": "MATCH (T1:`flight_2.airlines`)-[T2:`flight_2.flights`]-()\nWITH T1.Country AS Country, count(T1.Airline) AS count, T1.Abbreviation AS Abbreviation\nRETURN Abbreviation,Country\nORDER BY count\nLIMIT 1",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "query": "MATCH (T1:`flight_2.airlines`)-[T2:`flight_2.flights`]-()\nWITH T1.Country AS Country, count(T1.Airline) AS count, T1.Abbreviation AS Abbreviation\nRETURN Abbreviation,Country\nORDER BY count\nLIMIT 1",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "query": "MATCH (T1:`flight_2.airlines`)-[T2:`flight_2.flights`]-()\nWHERE T2.SourceAirport = 'AHD'\nRETURN T1.Airline",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "Which airlines have a flight with source airport AHD?",
        "query": "MATCH (T1:`flight_2.airlines`)-[T2:`flight_2.flights`]-()\nWHERE T2.SourceAirport = 'AHD'\nRETURN T1.Airline",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "query": "MATCH (T1:`flight_2.airlines`)-[T2:`flight_2.flights`]-()\nWHERE T2.DestAirport = 'AHD'\nRETURN T1.Airline",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "Which airlines have a flight with destination airport AHD?",
        "query": "MATCH (T1:`flight_2.airlines`)-[T2:`flight_2.flights`]-()\nWHERE T2.DestAirport = 'AHD'\nRETURN T1.Airline",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "Find all airlines that have at least 10 flights.",
        "query": "MATCH (T1:`flight_2.airlines`)-[T2:`flight_2.flights`]-()\nWITH count(*) AS count, T1.Airline AS Airline\nWHERE count  > 10\nRETURN Airline",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "Which airlines have at least 10 flights?",
        "query": "MATCH (T1:`flight_2.airlines`)-[T2:`flight_2.flights`]-()\nWITH count(*) AS count, T1.Airline AS Airline\nWHERE count  > 10\nRETURN Airline",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "Find all airlines that have fewer than 200 flights.",
        "query": "MATCH (T1:`flight_2.airlines`)-[T2:`flight_2.flights`]-()\nWITH count(*) AS count, T1.Airline AS Airline\nWHERE count  < 200\nRETURN Airline",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "Which airlines have less than 200 flights?",
        "query": "MATCH (T1:`flight_2.airlines`)-[T2:`flight_2.flights`]-()\nWITH count(*) AS count, T1.Airline AS Airline\nWHERE count  < 200\nRETURN Airline",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "query": "MATCH ()-[T1:`flight_2.flights`]-(T2:`flight_2.airlines`)\nWHERE T2.Airline = 'United Airlines'\nRETURN T1.FlightNo",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "Which flight numbers correspond to United Airlines flights?",
        "query": "MATCH ()-[T1:`flight_2.flights`]-(T2:`flight_2.airlines`)\nWHERE T2.Airline = 'United Airlines'\nRETURN T1.FlightNo",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "query": "MATCH ()-[flights:`flight_2.flights`]-()\nWHERE flights.SourceAirport = 'APG'\nRETURN flights.FlightNo",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "Give the flight numbers of flights leaving from APG.",
        "query": "MATCH ()-[flights:`flight_2.flights`]-()\nWHERE flights.SourceAirport = 'APG'\nRETURN flights.FlightNo",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "query": "MATCH ()-[flights:`flight_2.flights`]-()\nWHERE flights.DestAirport = 'APG'\nRETURN flights.FlightNo",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "Give the flight numbers of flights landing at APG.",
        "query": "MATCH ()-[flights:`flight_2.flights`]-()\nWHERE flights.DestAirport = 'APG'\nRETURN flights.FlightNo",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "query": "MATCH ()-[T1:`flight_2.flights`]-(T2:`flight_2.airports`)\nWHERE T2.City = 'Aberdeen'\nRETURN T1.FlightNo",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "Give the flight numbers of flights leaving from Aberdeen.",
        "query": "MATCH ()-[T1:`flight_2.flights`]-(T2:`flight_2.airports`)\nWHERE T2.City = 'Aberdeen'\nRETURN T1.FlightNo",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "query": "MATCH ()-[T1:`flight_2.flights`]-(T2:`flight_2.airports`)\nWHERE T2.City = 'Aberdeen'\nRETURN T1.FlightNo",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "Give the flight numbers of flights arriving in Aberdeen.",
        "query": "MATCH ()-[T1:`flight_2.flights`]-(T2:`flight_2.airports`)\nWHERE T2.City = 'Aberdeen'\nRETURN T1.FlightNo",
        "db_id": "flight_2",
        "answers": []
    },
    {
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "query": "MATCH ()-[T1:`flight_2.flights`]-(T2:`flight_2.airports`)\nWHERE T2.City = 'Aberdeen' OR T2.City = 'Abilene'\nRETURN count(*)",
        "db_id": "flight_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many flights land in Aberdeen or Abilene?",
        "query": "MATCH ()-[T1:`flight_2.flights`]-(T2:`flight_2.airports`)\nWHERE T2.City = 'Aberdeen' OR T2.City = 'Abilene'\nRETURN count(*)",
        "db_id": "flight_2",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "Find the name of airports which do not have any flight in and out.",
        "query": "MATCH (airports:`flight_2.airports`)\nWHERE NOT (airports:`flight_2.airports`)-[:`flight_2.flights`]-()\nRETURN airports.AirportName",
        "db_id": "flight_2",
        "answers": [
            [
                "Phillips AAF "
            ],
            [
                "Municipal "
            ],
            [
                "Dyess AFB "
            ],
            [
                "Municipal "
            ],
            [
                "Virginia Highlands "
            ],
            [
                "Ada "
            ],
            [
                "Adak Island Ns "
            ],
            [
                "Lenawee County "
            ],
            [
                "Municipal "
            ],
            [
                "Municipal "
            ],
            [
                "Ainsworth "
            ],
            [
                "Akhiok SPB "
            ],
            [
                "Spb "
            ],
            [
                "Akiak "
            ],
            [
                "Colorado Plains Regional Airport "
            ],
            [
                "Akron/canton Regional "
            ],
            [
                "Fulton International "
            ],
            [
                "Akutan "
            ],
            [
                "Alakanuk "
            ],
            [
                "NAS "
            ],
            [
                "Holloman AFB "
            ],
            [
                "Municipal "
            ],
            [
                "Municipal "
            ],
            [
                "Albany NAS "
            ],
            [
                "Dougherty County "
            ],
            [
                "Albany International "
            ],
            [
                "Albany "
            ],
            [
                "Albert Lea "
            ],
            [
                "Albuquerque International "
            ],
            [
                "Aleknagik "
            ],
            [
                "Aleneva "
            ],
            [
                "Thomas C Russell Fld "
            ],
            [
                "Alexandria International "
            ],
            [
                "Esler Field "
            ],
            [
                "Alexandria "
            ],
            [
                "Alexandria Bay "
            ],
            [
                "Algona "
            ],
            [
                "International "
            ],
            [
                "George Downer "
            ],
            [
                "Alitak SPB "
            ],
            [
                "Allakaket "
            ],
            [
                "Alliance "
            ],
            [
                "Gratiot Community "
            ],
            [
                "Alpena County Regional "
            ],
            [
                "Alpine "
            ],
            [
                "Alton "
            ],
            [
                "Altus AFB "
            ],
            [
                "Municipal "
            ],
            [
                "Alyeska "
            ],
            [
                "Rick Husband Amarillo International "
            ],
            [
                "Tradewind "
            ],
            [
                "Ambler "
            ],
            [
                "Amchitka "
            ],
            [
                "Municipal "
            ],
            [
                "Ames "
            ],
            [
                "Zahns "
            ],
            [
                "Amook "
            ],
            [
                "Anacortes "
            ],
            [
                "USN Heliport "
            ],
            [
                "Orange County Steel Salvage Heliport "
            ],
            [
                "Anaktuvuk "
            ],
            [
                "Elmendorf Afb "
            ],
            [
                "Ted Stevens Anchorage International Airport "
            ],
            [
                "Merrill Field "
            ],
            [
                "Municipal "
            ],
            [
                "Anderson "
            ],
            [
                "Andrews "
            ],
            [
                "Angel Fire "
            ],
            [
                "Tri-State Steuben Cty "
            ],
            [
                "Angoon "
            ],
            [
                "Rollang Field "
            ],
            [
                "Aniak "
            ],
            [
                "Anita Bay "
            ],
            [
                "Municipal "
            ],
            [
                "Lee "
            ],
            [
                "Annette Island "
            ],
            [
                "Anniston Metropolitan "
            ],
            [
                "Ft Mcclellan Bus Trml "
            ],
            [
                "Reilly AHP "
            ],
            [
                "Anthony "
            ],
            [
                "Antlers "
            ],
            [
                "Anvik "
            ],
            [
                "Municipal "
            ],
            [
                "Apple Valley "
            ],
            [
                "Outagamie County "
            ],
            [
                "Municipal "
            ],
            [
                "Arcata "
            ],
            [
                "Arctic Village "
            ],
            [
                "Downtown "
            ],
            [
                "Ardmore Municipal Arpt "
            ],
            [
                "US Army Heliport "
            ],
            [
                "Artesia "
            ],
            [
                "Asbury Park "
            ],
            [
                "Ashland "
            ],
            [
                "Ashley "
            ],
            [
                "Aspen "
            ],
            [
                "Astoria "
            ],
            [
                "Athens "
            ],
            [
                "Ohio University "
            ],
            [
                "McMinn County "
            ]
        ]
    },
    {
        "question": "Which airports do not have departing or arriving flights?",
        "query": "MATCH (airports:`flight_2.airports`)\nWHERE NOT (airports:`flight_2.airports`)-[:`flight_2.flights`]-()\nRETURN airports.AirportName",
        "db_id": "flight_2",
        "answers": [
            [
                "Phillips AAF "
            ],
            [
                "Municipal "
            ],
            [
                "Dyess AFB "
            ],
            [
                "Municipal "
            ],
            [
                "Virginia Highlands "
            ],
            [
                "Ada "
            ],
            [
                "Adak Island Ns "
            ],
            [
                "Lenawee County "
            ],
            [
                "Municipal "
            ],
            [
                "Municipal "
            ],
            [
                "Ainsworth "
            ],
            [
                "Akhiok SPB "
            ],
            [
                "Spb "
            ],
            [
                "Akiak "
            ],
            [
                "Colorado Plains Regional Airport "
            ],
            [
                "Akron/canton Regional "
            ],
            [
                "Fulton International "
            ],
            [
                "Akutan "
            ],
            [
                "Alakanuk "
            ],
            [
                "NAS "
            ],
            [
                "Holloman AFB "
            ],
            [
                "Municipal "
            ],
            [
                "Municipal "
            ],
            [
                "Albany NAS "
            ],
            [
                "Dougherty County "
            ],
            [
                "Albany International "
            ],
            [
                "Albany "
            ],
            [
                "Albert Lea "
            ],
            [
                "Albuquerque International "
            ],
            [
                "Aleknagik "
            ],
            [
                "Aleneva "
            ],
            [
                "Thomas C Russell Fld "
            ],
            [
                "Alexandria International "
            ],
            [
                "Esler Field "
            ],
            [
                "Alexandria "
            ],
            [
                "Alexandria Bay "
            ],
            [
                "Algona "
            ],
            [
                "International "
            ],
            [
                "George Downer "
            ],
            [
                "Alitak SPB "
            ],
            [
                "Allakaket "
            ],
            [
                "Alliance "
            ],
            [
                "Gratiot Community "
            ],
            [
                "Alpena County Regional "
            ],
            [
                "Alpine "
            ],
            [
                "Alton "
            ],
            [
                "Altus AFB "
            ],
            [
                "Municipal "
            ],
            [
                "Alyeska "
            ],
            [
                "Rick Husband Amarillo International "
            ],
            [
                "Tradewind "
            ],
            [
                "Ambler "
            ],
            [
                "Amchitka "
            ],
            [
                "Municipal "
            ],
            [
                "Ames "
            ],
            [
                "Zahns "
            ],
            [
                "Amook "
            ],
            [
                "Anacortes "
            ],
            [
                "USN Heliport "
            ],
            [
                "Orange County Steel Salvage Heliport "
            ],
            [
                "Anaktuvuk "
            ],
            [
                "Elmendorf Afb "
            ],
            [
                "Ted Stevens Anchorage International Airport "
            ],
            [
                "Merrill Field "
            ],
            [
                "Municipal "
            ],
            [
                "Anderson "
            ],
            [
                "Andrews "
            ],
            [
                "Angel Fire "
            ],
            [
                "Tri-State Steuben Cty "
            ],
            [
                "Angoon "
            ],
            [
                "Rollang Field "
            ],
            [
                "Aniak "
            ],
            [
                "Anita Bay "
            ],
            [
                "Municipal "
            ],
            [
                "Lee "
            ],
            [
                "Annette Island "
            ],
            [
                "Anniston Metropolitan "
            ],
            [
                "Ft Mcclellan Bus Trml "
            ],
            [
                "Reilly AHP "
            ],
            [
                "Anthony "
            ],
            [
                "Antlers "
            ],
            [
                "Anvik "
            ],
            [
                "Municipal "
            ],
            [
                "Apple Valley "
            ],
            [
                "Outagamie County "
            ],
            [
                "Municipal "
            ],
            [
                "Arcata "
            ],
            [
                "Arctic Village "
            ],
            [
                "Downtown "
            ],
            [
                "Ardmore Municipal Arpt "
            ],
            [
                "US Army Heliport "
            ],
            [
                "Artesia "
            ],
            [
                "Asbury Park "
            ],
            [
                "Ashland "
            ],
            [
                "Ashley "
            ],
            [
                "Aspen "
            ],
            [
                "Astoria "
            ],
            [
                "Athens "
            ],
            [
                "Ohio University "
            ],
            [
                "McMinn County "
            ]
        ]
    },
    {
        "question": "How many employees are there?",
        "query": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN count(*)",
        "db_id": "employee_hire_evaluation",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "Count the number of employees",
        "query": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN count(*)",
        "db_id": "employee_hire_evaluation",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "Sort employee names by their age in ascending order.",
        "query": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN employee.Name\nORDER BY employee.Age",
        "db_id": "employee_hire_evaluation",
        "answers": [
            [
                "George Chuter"
            ],
            [
                "Andrew Sheridan"
            ],
            [
                "Lee Mears"
            ],
            [
                "Tim Payne"
            ],
            [
                "Matt Stevens"
            ],
            [
                "Jason Hobson"
            ],
            [
                "Steve Borthwick"
            ],
            [
                "Louis Deacon"
            ],
            [
                "Phil Vickery"
            ],
            [
                "Mark Regan"
            ]
        ]
    },
    {
        "question": "List the names of employees and sort in ascending order of age.",
        "query": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN employee.Name\nORDER BY employee.Age",
        "db_id": "employee_hire_evaluation",
        "answers": [
            [
                "George Chuter"
            ],
            [
                "Andrew Sheridan"
            ],
            [
                "Lee Mears"
            ],
            [
                "Tim Payne"
            ],
            [
                "Matt Stevens"
            ],
            [
                "Jason Hobson"
            ],
            [
                "Steve Borthwick"
            ],
            [
                "Louis Deacon"
            ],
            [
                "Phil Vickery"
            ],
            [
                "Mark Regan"
            ]
        ]
    },
    {
        "question": "What is the number of employees from each city?",
        "query": "MATCH (employee:`employee_hire_evaluation.employee`)\nWITH count(employee.City) AS count, employee.City AS City\nRETURN count,City",
        "db_id": "employee_hire_evaluation",
        "answers": [
            [
                3,
                "Bristol"
            ],
            [
                3,
                "Bath"
            ],
            [
                2,
                "Wasps"
            ],
            [
                1,
                "Sale"
            ],
            [
                1,
                "Leicester"
            ]
        ]
    },
    {
        "question": "Count the number of employees for each city.",
        "query": "MATCH (employee:`employee_hire_evaluation.employee`)\nWITH count(employee.City) AS count, employee.City AS City\nRETURN count,City",
        "db_id": "employee_hire_evaluation",
        "answers": [
            [
                3,
                "Bristol"
            ],
            [
                3,
                "Bath"
            ],
            [
                2,
                "Wasps"
            ],
            [
                1,
                "Sale"
            ],
            [
                1,
                "Leicester"
            ]
        ]
    },
    {
        "question": "Which cities do more than one employee under age 30 come from?",
        "query": "MATCH (employee:`employee_hire_evaluation.employee`)\nWHERE employee.Age < 30\nWITH count(*) AS count, employee.City AS City\nWHERE count  > 1\nRETURN City",
        "db_id": "employee_hire_evaluation",
        "answers": [
            [
                "Bath"
            ]
        ]
    },
    {
        "question": "Find the cities that have more than one employee under age 30.",
        "query": "MATCH (employee:`employee_hire_evaluation.employee`)\nWHERE employee.Age < 30\nWITH count(*) AS count, employee.City AS City\nWHERE count  > 1\nRETURN City",
        "db_id": "employee_hire_evaluation",
        "answers": [
            [
                "Bath"
            ]
        ]
    },
    {
        "question": "Find the number of shops in each location.",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nWITH shop.Location AS Location, count(shop.Location) AS count\nRETURN count,Location",
        "db_id": "employee_hire_evaluation",
        "answers": [
            [
                1,
                "Valkeakoski"
            ],
            [
                1,
                "Helsinki"
            ],
            [
                1,
                "Espoo"
            ],
            [
                1,
                "Turku"
            ],
            [
                1,
                "Jakobstad"
            ],
            [
                1,
                "Kotka"
            ],
            [
                1,
                "Kuopio"
            ],
            [
                1,
                "Lahti"
            ],
            [
                1,
                "Mariehamn"
            ]
        ]
    },
    {
        "question": "How many shops are there in each location?",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nWITH shop.Location AS Location, count(shop.Location) AS count\nRETURN count,Location",
        "db_id": "employee_hire_evaluation",
        "answers": [
            [
                1,
                "Valkeakoski"
            ],
            [
                1,
                "Helsinki"
            ],
            [
                1,
                "Espoo"
            ],
            [
                1,
                "Turku"
            ],
            [
                1,
                "Jakobstad"
            ],
            [
                1,
                "Kotka"
            ],
            [
                1,
                "Kuopio"
            ],
            [
                1,
                "Lahti"
            ],
            [
                1,
                "Mariehamn"
            ]
        ]
    },
    {
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.Manager_name,shop.District\nORDER BY shop.Number_products DESC\nLIMIT 1",
        "db_id": "employee_hire_evaluation",
        "answers": [
            [
                "Ilkka M\u00e4kel\u00e4",
                "Lahden Stadion"
            ]
        ]
    },
    {
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.Manager_name,shop.District\nORDER BY shop.Number_products DESC\nLIMIT 1",
        "db_id": "employee_hire_evaluation",
        "answers": [
            [
                "Ilkka M\u00e4kel\u00e4",
                "Lahden Stadion"
            ]
        ]
    },
    {
        "question": "find the minimum and maximum number of products of all stores.",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN min(shop.Number_products),max(shop.Number_products)",
        "db_id": "employee_hire_evaluation",
        "answers": [
            [
                1600,
                15000
            ]
        ]
    },
    {
        "question": "What are the minimum and maximum number of products across all the shops?",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN min(shop.Number_products),max(shop.Number_products)",
        "db_id": "employee_hire_evaluation",
        "answers": [
            [
                1600,
                15000
            ]
        ]
    },
    {
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.Name,shop.Location,shop.District\nORDER BY shop.Number_products DESC",
        "db_id": "employee_hire_evaluation",
        "answers": [
            [
                "FC Lahti",
                "Lahti",
                "Lahden Stadion"
            ],
            [
                "HJK",
                "Helsinki",
                "Finnair Stadium"
            ],
            [
                "FC Inter",
                "Turku",
                "Veritas Stadion"
            ],
            [
                "FC Honka",
                "Espoo",
                "Tapiolan Urheilupuisto"
            ],
            [
                "FF Jaro",
                "Jakobstad",
                "Jakobstads Centralplan"
            ],
            [
                "FC KooTeePee",
                "Kotka",
                "Arto Tolsa Areena"
            ],
            [
                "FC Haka",
                "Valkeakoski",
                "Tehtaan kentt\u00e4"
            ],
            [
                "KuPS",
                "Kuopio",
                "Magnum Areena"
            ],
            [
                "IFK Mariehamn",
                "Mariehamn",
                "Wikl\u00f6f Holding Arena"
            ]
        ]
    },
    {
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.Name,shop.Location,shop.District\nORDER BY shop.Number_products DESC",
        "db_id": "employee_hire_evaluation",
        "answers": [
            [
                "FC Lahti",
                "Lahti",
                "Lahden Stadion"
            ],
            [
                "HJK",
                "Helsinki",
                "Finnair Stadium"
            ],
            [
                "FC Inter",
                "Turku",
                "Veritas Stadion"
            ],
            [
                "FC Honka",
                "Espoo",
                "Tapiolan Urheilupuisto"
            ],
            [
                "FF Jaro",
                "Jakobstad",
                "Jakobstads Centralplan"
            ],
            [
                "FC KooTeePee",
                "Kotka",
                "Arto Tolsa Areena"
            ],
            [
                "FC Haka",
                "Valkeakoski",
                "Tehtaan kentt\u00e4"
            ],
            [
                "KuPS",
                "Kuopio",
                "Magnum Areena"
            ],
            [
                "IFK Mariehamn",
                "Mariehamn",
                "Wikl\u00f6f Holding Arena"
            ]
        ]
    },
    {
        "question": "How many different store locations are there?",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN count(DISTINCT shop.Location)",
        "db_id": "employee_hire_evaluation",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "Count the number of distinct store locations.",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN count(DISTINCT shop.Location)",
        "db_id": "employee_hire_evaluation",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "How many documents do we have?",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN count(*)",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Count the number of documents.",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN count(*)",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN documents.Document_ID,documents.Document_Name,documents.Document_Description",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                0,
                "Introduction of OS",
                "n"
            ],
            [
                1,
                "Understanding DB",
                "y"
            ],
            [
                3,
                "Summer Show",
                "u"
            ],
            [
                76,
                "Robbin CV",
                "y"
            ],
            [
                80,
                "Welcome to NY",
                "h"
            ],
            [
                82,
                "Data base",
                "w"
            ],
            [
                2394,
                "Customer reviews",
                "y"
            ],
            [
                3830,
                "Do not panic",
                "k"
            ],
            [
                33930,
                "How Google people work",
                "z"
            ],
            [
                50123,
                "Learning French",
                "r"
            ],
            [
                651512,
                "How to write a CV",
                "f"
            ],
            [
                801801,
                "How to read a book",
                "w"
            ],
            [
                3540024,
                "Palm reading",
                "y"
            ],
            [
                16514113,
                "A history of Arts",
                "h"
            ],
            [
                385906526,
                "About Korea",
                "b"
            ]
        ]
    },
    {
        "question": "What are the ids, names, and descriptions for all documents?",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN documents.Document_ID,documents.Document_Name,documents.Document_Description",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                0,
                "Introduction of OS",
                "n"
            ],
            [
                1,
                "Understanding DB",
                "y"
            ],
            [
                3,
                "Summer Show",
                "u"
            ],
            [
                76,
                "Robbin CV",
                "y"
            ],
            [
                80,
                "Welcome to NY",
                "h"
            ],
            [
                82,
                "Data base",
                "w"
            ],
            [
                2394,
                "Customer reviews",
                "y"
            ],
            [
                3830,
                "Do not panic",
                "k"
            ],
            [
                33930,
                "How Google people work",
                "z"
            ],
            [
                50123,
                "Learning French",
                "r"
            ],
            [
                651512,
                "How to write a CV",
                "f"
            ],
            [
                801801,
                "How to read a book",
                "w"
            ],
            [
                3540024,
                "Palm reading",
                "y"
            ],
            [
                16514113,
                "A history of Arts",
                "h"
            ],
            [
                385906526,
                "About Korea",
                "b"
            ]
        ]
    },
    {
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWHERE documents.Document_Description =~'.*[\"|\"]%w%\".*'\nRETURN documents.Document_Name,documents.Template_ID",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": []
    },
    {
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWHERE documents.Document_Description =~'.*[\"|\"]%w%\".*'\nRETURN documents.Document_Name,documents.Template_ID",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": []
    },
    {
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWHERE documents.Document_Name = 'Robbin CV'\nRETURN documents.Document_ID,documents.Template_ID,documents.Document_Description",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                76,
                20,
                "y"
            ]
        ]
    },
    {
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWHERE documents.Document_Name = 'Robbin CV'\nRETURN documents.Document_ID,documents.Template_ID,documents.Document_Description",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                76,
                20,
                "y"
            ]
        ]
    },
    {
        "question": "How many different templates do all document use?",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN count(DISTINCT documents.Template_ID)",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "question": "Count the number of different templates used for documents.",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN count(DISTINCT documents.Template_ID)",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "question": "How many documents are using the template with type code 'PPT'?",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Documents`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`)\nWHERE T2.Template_Type_Code = 'PPT'\nRETURN count(*)",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Count the number of documents that use the PPT template type.",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Documents`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`)\nWHERE T2.Template_Type_Code = 'PPT'\nRETURN count(*)",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Show all template ids and number of documents using each template.",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWITH count(documents.Template_ID) AS count, documents.Template_ID AS Template_ID\nRETURN Template_ID,count",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                7,
                1
            ],
            [
                25,
                2
            ],
            [
                6,
                1
            ],
            [
                20,
                1
            ],
            [
                14,
                2
            ],
            [
                11,
                2
            ],
            [
                10,
                1
            ],
            [
                1,
                1
            ],
            [
                22,
                1
            ],
            [
                21,
                1
            ],
            [
                4,
                1
            ],
            [
                8,
                1
            ]
        ]
    },
    {
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWITH count(documents.Template_ID) AS count, documents.Template_ID AS Template_ID\nRETURN Template_ID,count",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                7,
                1
            ],
            [
                25,
                2
            ],
            [
                6,
                1
            ],
            [
                20,
                1
            ],
            [
                14,
                2
            ],
            [
                11,
                2
            ],
            [
                10,
                1
            ],
            [
                1,
                1
            ],
            [
                22,
                1
            ],
            [
                21,
                1
            ],
            [
                4,
                1
            ],
            [
                8,
                1
            ]
        ]
    },
    {
        "question": "What is the id and type code for the template used by the most documents?",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Documents`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`)\nWITH count(T1.Template_ID) AS count, T1.Template_ID AS Template_ID, T2.Template_Type_Code AS Template_Type_Code\nRETURN Template_ID,Template_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                25,
                "PP"
            ]
        ]
    },
    {
        "question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Documents`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`)\nWITH count(T1.Template_ID) AS count, T1.Template_ID AS Template_ID, T2.Template_Type_Code AS Template_Type_Code\nRETURN Template_ID,Template_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                25,
                "PP"
            ]
        ]
    },
    {
        "question": "Show ids for all templates that are used by more than one document.",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWITH count(*) AS count, documents.Template_ID AS Template_ID\nWHERE count  > 1\nRETURN Template_ID",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                25
            ],
            [
                14
            ],
            [
                11
            ]
        ]
    },
    {
        "question": "What are the template ids of any templates used in more than a single document?",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWITH count(*) AS count, documents.Template_ID AS Template_ID\nWHERE count  > 1\nRETURN Template_ID",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                25
            ],
            [
                14
            ],
            [
                11
            ]
        ]
    },
    {
        "question": "How many templates do we have?",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN count(*)",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                20
            ]
        ]
    },
    {
        "question": "Count the number of templates.",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN count(*)",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                20
            ]
        ]
    },
    {
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN templates.Template_ID,templates.Version_Number,templates.Template_Type_Code",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                0,
                5,
                "PP"
            ],
            [
                1,
                9,
                "PP"
            ],
            [
                4,
                4,
                "BK"
            ],
            [
                6,
                2,
                "PPT"
            ],
            [
                7,
                8,
                "PPT"
            ],
            [
                8,
                3,
                "BK"
            ],
            [
                9,
                2,
                "BK"
            ],
            [
                10,
                1,
                "PPT"
            ],
            [
                11,
                6,
                "BK"
            ],
            [
                14,
                7,
                "AD"
            ],
            [
                15,
                9,
                "CV"
            ],
            [
                16,
                5,
                "CV"
            ],
            [
                18,
                5,
                "PP"
            ],
            [
                19,
                7,
                "AD"
            ],
            [
                20,
                6,
                "BK"
            ],
            [
                21,
                9,
                "AD"
            ],
            [
                22,
                0,
                "PP"
            ],
            [
                23,
                2,
                "BK"
            ],
            [
                24,
                8,
                "PP"
            ],
            [
                25,
                5,
                "PP"
            ]
        ]
    },
    {
        "question": "What are the ids, version numbers, and type codes for each template?",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN templates.Template_ID,templates.Version_Number,templates.Template_Type_Code",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                0,
                5,
                "PP"
            ],
            [
                1,
                9,
                "PP"
            ],
            [
                4,
                4,
                "BK"
            ],
            [
                6,
                2,
                "PPT"
            ],
            [
                7,
                8,
                "PPT"
            ],
            [
                8,
                3,
                "BK"
            ],
            [
                9,
                2,
                "BK"
            ],
            [
                10,
                1,
                "PPT"
            ],
            [
                11,
                6,
                "BK"
            ],
            [
                14,
                7,
                "AD"
            ],
            [
                15,
                9,
                "CV"
            ],
            [
                16,
                5,
                "CV"
            ],
            [
                18,
                5,
                "PP"
            ],
            [
                19,
                7,
                "AD"
            ],
            [
                20,
                6,
                "BK"
            ],
            [
                21,
                9,
                "AD"
            ],
            [
                22,
                0,
                "PP"
            ],
            [
                23,
                2,
                "BK"
            ],
            [
                24,
                8,
                "PP"
            ],
            [
                25,
                5,
                "PP"
            ]
        ]
    },
    {
        "question": "Show all distinct template type codes for all templates.",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN DISTINCT templates.Template_Type_Code",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                "PP"
            ],
            [
                "BK"
            ],
            [
                "PPT"
            ],
            [
                "AD"
            ],
            [
                "CV"
            ]
        ]
    },
    {
        "question": "What are the different template type codes?",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN DISTINCT templates.Template_Type_Code",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                "PP"
            ],
            [
                "BK"
            ],
            [
                "PPT"
            ],
            [
                "AD"
            ],
            [
                "CV"
            ]
        ]
    },
    {
        "question": "What are the ids of templates with template type code PP or PPT?",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWHERE templates.Template_Type_Code = 'PP' OR templates.Template_Type_Code = 'PPT'\nRETURN templates.Template_ID",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                0
            ],
            [
                1
            ],
            [
                6
            ],
            [
                7
            ],
            [
                10
            ],
            [
                18
            ],
            [
                22
            ],
            [
                24
            ],
            [
                25
            ]
        ]
    },
    {
        "question": "Return the ids of templates that have the code PP or PPT.",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWHERE templates.Template_Type_Code = 'PP' OR templates.Template_Type_Code = 'PPT'\nRETURN templates.Template_ID",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                0
            ],
            [
                1
            ],
            [
                6
            ],
            [
                7
            ],
            [
                10
            ],
            [
                18
            ],
            [
                22
            ],
            [
                24
            ],
            [
                25
            ]
        ]
    },
    {
        "question": "How many templates have template type code CV?",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWHERE templates.Template_Type_Code = 'CV'\nRETURN count(*)",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "Count the number of templates of the type CV.",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWHERE templates.Template_Type_Code = 'CV'\nRETURN count(*)",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWHERE templates.Version_Number > 5\nRETURN templates.Version_Number,templates.Template_Type_Code",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                9,
                "PP"
            ],
            [
                8,
                "PPT"
            ],
            [
                6,
                "BK"
            ],
            [
                7,
                "AD"
            ],
            [
                9,
                "CV"
            ],
            [
                7,
                "AD"
            ],
            [
                6,
                "BK"
            ],
            [
                9,
                "AD"
            ],
            [
                8,
                "PP"
            ]
        ]
    },
    {
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWHERE templates.Version_Number > 5\nRETURN templates.Version_Number,templates.Template_Type_Code",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                9,
                "PP"
            ],
            [
                8,
                "PPT"
            ],
            [
                6,
                "BK"
            ],
            [
                7,
                "AD"
            ],
            [
                9,
                "CV"
            ],
            [
                7,
                "AD"
            ],
            [
                6,
                "BK"
            ],
            [
                9,
                "AD"
            ],
            [
                8,
                "PP"
            ]
        ]
    },
    {
        "question": "Show all template type codes and number of templates for each.",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWITH count(templates.Template_Type_Code) AS count, templates.Template_Type_Code AS Template_Type_Code\nRETURN Template_Type_Code,count",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                "PP",
                6
            ],
            [
                "BK",
                6
            ],
            [
                "PPT",
                3
            ],
            [
                "AD",
                3
            ],
            [
                "CV",
                2
            ]
        ]
    },
    {
        "question": "What are the different template type codes, and how many templates correspond to each?",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWITH count(templates.Template_Type_Code) AS count, templates.Template_Type_Code AS Template_Type_Code\nRETURN Template_Type_Code,count",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                "PP",
                6
            ],
            [
                "BK",
                6
            ],
            [
                "PPT",
                3
            ],
            [
                "AD",
                3
            ],
            [
                "CV",
                2
            ]
        ]
    },
    {
        "question": "Which template type code has most number of templates?",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWITH count(templates.Template_Type_Code) AS count, templates.Template_Type_Code AS Template_Type_Code\nRETURN Template_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                "PP"
            ]
        ]
    },
    {
        "question": "Return the type code of the template type that the most templates belong to.",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWITH count(templates.Template_Type_Code) AS count, templates.Template_Type_Code AS Template_Type_Code\nRETURN Template_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                "PP"
            ]
        ]
    },
    {
        "question": "Show all template type codes with less than three templates.",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWITH count(*) AS count, templates.Template_Type_Code AS Template_Type_Code\nWHERE count  < 3\nRETURN Template_Type_Code",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                "CV"
            ]
        ]
    },
    {
        "question": "What are the codes of template types that have fewer than 3 templates?",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWITH count(*) AS count, templates.Template_Type_Code AS Template_Type_Code\nWHERE count  < 3\nRETURN Template_Type_Code",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                "CV"
            ]
        ]
    },
    {
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Data base'\nRETURN T1.Template_Type_Code",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                "BK"
            ]
        ]
    },
    {
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Data base'\nRETURN T1.Template_Type_Code",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                "BK"
            ]
        ]
    },
    {
        "question": "Show all document names using templates with template type code BK.",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T1.Template_Type_Code = 'BK'\nRETURN T2.Document_Name",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                "How to read a book"
            ],
            [
                "Palm reading"
            ],
            [
                "Data base"
            ],
            [
                "About Korea"
            ],
            [
                "Robbin CV"
            ]
        ]
    },
    {
        "question": "What are the names of documents that use templates with the code BK?",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T1.Template_Type_Code = 'BK'\nRETURN T2.Document_Name",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                "How to read a book"
            ],
            [
                "Palm reading"
            ],
            [
                "Data base"
            ],
            [
                "About Korea"
            ],
            [
                "Robbin CV"
            ]
        ]
    },
    {
        "question": "Show all template type codes and the number of documents using each type.",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWITH T1.Template_Type_Code AS Template_Type_Code, count(T1.Template_Type_Code) AS count\nRETURN Template_Type_Code,count",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                "PPT",
                3
            ],
            [
                "PP",
                4
            ],
            [
                "BK",
                5
            ],
            [
                "AD",
                3
            ]
        ]
    },
    {
        "question": "What are the different template type codes, and how many documents use each type?",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWITH T1.Template_Type_Code AS Template_Type_Code, count(T1.Template_Type_Code) AS count\nRETURN Template_Type_Code,count",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                "PPT",
                3
            ],
            [
                "PP",
                4
            ],
            [
                "BK",
                5
            ],
            [
                "AD",
                3
            ]
        ]
    },
    {
        "question": "Which template type code is used by most number of documents?",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWITH T1.Template_Type_Code AS Template_Type_Code, count(T1.Template_Type_Code) AS count\nRETURN Template_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                "BK"
            ]
        ]
    },
    {
        "question": "Return the code of the template type that is most commonly used in documents.",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWITH T1.Template_Type_Code AS Template_Type_Code, count(T1.Template_Type_Code) AS count\nRETURN Template_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                "BK"
            ]
        ]
    },
    {
        "question": "Show all template type codes and descriptions.",
        "query": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`)\nRETURN ref_template_types.Template_Type_Code,ref_template_types.Template_Type_Description",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                "PPT",
                "Presentation"
            ],
            [
                "CV",
                "CV"
            ],
            [
                "AD",
                "Advertisement"
            ],
            [
                "PP",
                "Paper"
            ],
            [
                "BK",
                "Book"
            ]
        ]
    },
    {
        "question": "What are the type codes and descriptions for all template types?",
        "query": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`)\nRETURN ref_template_types.Template_Type_Code,ref_template_types.Template_Type_Description",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                "PPT",
                "Presentation"
            ],
            [
                "CV",
                "CV"
            ],
            [
                "AD",
                "Advertisement"
            ],
            [
                "PP",
                "Paper"
            ],
            [
                "BK",
                "Book"
            ]
        ]
    },
    {
        "question": "What is the template type descriptions for template type code \"AD\".",
        "query": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`)\nWHERE ref_template_types.Template_Type_Code = 'AD'\nRETURN ref_template_types.Template_Type_Description",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                "Advertisement"
            ]
        ]
    },
    {
        "question": "Return the template type description of the template type with the code AD.",
        "query": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`)\nWHERE ref_template_types.Template_Type_Code = 'AD'\nRETURN ref_template_types.Template_Type_Description",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                "Advertisement"
            ]
        ]
    },
    {
        "question": "What is the template type code for template type description \"Book\".",
        "query": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`)\nWHERE ref_template_types.Template_Type_Description = 'Book'\nRETURN ref_template_types.Template_Type_Code",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                "BK"
            ]
        ]
    },
    {
        "question": "Return the type code of the template type with the description \"Book\".",
        "query": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`)\nWHERE ref_template_types.Template_Type_Description = 'Book'\nRETURN ref_template_types.Template_Type_Code",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                "BK"
            ]
        ]
    },
    {
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "query": "MATCH (T3:`cre_Doc_Template_Mgt.Documents`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`)-[]-(T1:`cre_Doc_Template_Mgt.Ref_Template_Types`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`)\nRETURN DISTINCT T1.Template_Type_Description",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": []
    },
    {
        "question": "Return the different descriptions for templates that have been used in a document.",
        "query": "MATCH (T3:`cre_Doc_Template_Mgt.Documents`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`)-[]-(T1:`cre_Doc_Template_Mgt.Ref_Template_Types`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`)\nRETURN DISTINCT T1.Template_Type_Description",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": []
    },
    {
        "question": "What are the template ids with template type description \"Presentation\".",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Ref_Template_Types`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`)\nWHERE T1.Template_Type_Description = 'Presentation'\nRETURN T2.Template_ID",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                7
            ],
            [
                6
            ],
            [
                10
            ]
        ]
    },
    {
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Ref_Template_Types`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`)\nWHERE T1.Template_Type_Description = 'Presentation'\nRETURN T2.Template_ID",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                7
            ],
            [
                6
            ],
            [
                10
            ]
        ]
    },
    {
        "question": "How many paragraphs in total?",
        "query": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nRETURN count(*)",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "Count the number of paragraphs.",
        "query": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nRETURN count(*)",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Summer Show'\nRETURN count(*)",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Summer Show'\nRETURN count(*)",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                1
            ]
        ]
    },
    {
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Welcome to NY'\nRETURN T1.Paragraph_ID,T1.Paragraph_Text",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                608931827,
                "Micronesia"
            ],
            [
                16615,
                "Japan"
            ]
        ]
    },
    {
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Welcome to NY'\nRETURN T1.Paragraph_ID,T1.Paragraph_Text",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                608931827,
                "Micronesia"
            ],
            [
                16615,
                "Japan"
            ]
        ]
    },
    {
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Customer reviews'\nRETURN T1.Paragraph_Text",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                "Ukraine"
            ],
            [
                "Korea"
            ],
            [
                "Korea"
            ]
        ]
    },
    {
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Customer reviews'\nRETURN T1.Paragraph_Text",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                "Ukraine"
            ],
            [
                "Korea"
            ],
            [
                "Korea"
            ]
        ]
    },
    {
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWITH T2.Document_Name AS Document_Name, T1.Document_ID AS Document_ID, count(T1.Document_ID) AS count\nRETURN Document_ID,Document_Name,count",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                2394,
                "Customer reviews",
                3
            ],
            [
                3,
                "Summer Show",
                1
            ],
            [
                50123,
                "Learning French",
                1
            ],
            [
                651512,
                "How to write a CV",
                2
            ],
            [
                33930,
                "How Google people work",
                1
            ],
            [
                385906526,
                "About Korea",
                1
            ],
            [
                80,
                "Welcome to NY",
                2
            ],
            [
                3830,
                "Do not panic",
                1
            ],
            [
                16514113,
                "A history of Arts",
                2
            ],
            [
                3540024,
                "Palm reading",
                1
            ]
        ]
    },
    {
        "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWITH T2.Document_Name AS Document_Name, T1.Document_ID AS Document_ID, count(T1.Document_ID) AS count\nRETURN Document_ID,Document_Name,count",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                2394,
                "Customer reviews",
                3
            ],
            [
                3,
                "Summer Show",
                1
            ],
            [
                50123,
                "Learning French",
                1
            ],
            [
                651512,
                "How to write a CV",
                2
            ],
            [
                33930,
                "How Google people work",
                1
            ],
            [
                385906526,
                "About Korea",
                1
            ],
            [
                80,
                "Welcome to NY",
                2
            ],
            [
                3830,
                "Do not panic",
                1
            ],
            [
                16514113,
                "A history of Arts",
                2
            ],
            [
                3540024,
                "Palm reading",
                1
            ]
        ]
    },
    {
        "question": "List all document ids with at least two paragraphs.",
        "query": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nWITH count(*) AS count, paragraphs.Document_ID AS Document_ID\nWHERE count  >= 2\nRETURN Document_ID",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                2394
            ],
            [
                651512
            ],
            [
                80
            ],
            [
                16514113
            ]
        ]
    },
    {
        "question": "What are the ids of documents that have 2 or more paragraphs?",
        "query": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nWITH count(*) AS count, paragraphs.Document_ID AS Document_ID\nWHERE count  >= 2\nRETURN Document_ID",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                2394
            ],
            [
                651512
            ],
            [
                80
            ],
            [
                16514113
            ]
        ]
    },
    {
        "question": "What is the document id and name with greatest number of paragraphs?",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWITH T2.Document_Name AS Document_Name, T1.Document_ID AS Document_ID, count(T1.Document_ID) AS count\nRETURN Document_ID,Document_Name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                2394,
                "Customer reviews"
            ]
        ]
    },
    {
        "question": "Return the id and name of the document with the most paragraphs.",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWITH T2.Document_Name AS Document_Name, T1.Document_ID AS Document_ID, count(T1.Document_ID) AS count\nRETURN Document_ID,Document_Name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                2394,
                "Customer reviews"
            ]
        ]
    },
    {
        "question": "What is the document id with least number of paragraphs?",
        "query": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nWITH paragraphs.Document_ID AS Document_ID, count(paragraphs.Document_ID) AS count\nRETURN Document_ID\nORDER BY count ASC\nLIMIT 1",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Return the id of the document with the fewest paragraphs.",
        "query": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nWITH paragraphs.Document_ID AS Document_ID, count(paragraphs.Document_ID) AS count\nRETURN Document_ID\nORDER BY count ASC\nLIMIT 1",
        "db_id": "cre_Doc_Template_Mgt",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "How many teachers are there?",
        "query": "MATCH (teacher:`course_teach.teacher`)\nRETURN count(*)",
        "db_id": "course_teach",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "What is the total count of teachers?",
        "query": "MATCH (teacher:`course_teach.teacher`)\nRETURN count(*)",
        "db_id": "course_teach",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "List the names of teachers in ascending order of age.",
        "query": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Name\nORDER BY teacher.Age ASC",
        "db_id": "course_teach",
        "answers": [
            [
                "Vicente Carretero"
            ],
            [
                "Gustaaf Deloor"
            ],
            [
                "Joseph Huts"
            ],
            [
                "John Deloor"
            ],
            [
                "Lucy Wong"
            ],
            [
                "Anne Walker"
            ],
            [
                "Kearsley Brown"
            ]
        ]
    },
    {
        "question": "What are the names of the teachers ordered by ascending age?",
        "query": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Name\nORDER BY teacher.Age ASC",
        "db_id": "course_teach",
        "answers": [
            [
                "Vicente Carretero"
            ],
            [
                "Gustaaf Deloor"
            ],
            [
                "Joseph Huts"
            ],
            [
                "John Deloor"
            ],
            [
                "Lucy Wong"
            ],
            [
                "Anne Walker"
            ],
            [
                "Kearsley Brown"
            ]
        ]
    },
    {
        "question": "What are the age and hometown of teachers?",
        "query": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Age,teacher.Hometown",
        "db_id": "course_teach",
        "answers": [
            [
                "32",
                "Blackrod Urban District"
            ],
            [
                "29",
                "Bolton County Borough"
            ],
            [
                "26",
                "Farnworth Municipal Borough"
            ],
            [
                "33",
                "Horwich Urban District"
            ],
            [
                "45",
                "Kearsley Urban District"
            ],
            [
                "41",
                "Little Lever Urban District"
            ],
            [
                "39",
                "Turton Urban District"
            ]
        ]
    },
    {
        "question": "What is the age and hometown of every teacher?",
        "query": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Age,teacher.Hometown",
        "db_id": "course_teach",
        "answers": [
            [
                "32",
                "Blackrod Urban District"
            ],
            [
                "29",
                "Bolton County Borough"
            ],
            [
                "26",
                "Farnworth Municipal Borough"
            ],
            [
                "33",
                "Horwich Urban District"
            ],
            [
                "45",
                "Kearsley Urban District"
            ],
            [
                "41",
                "Little Lever Urban District"
            ],
            [
                "39",
                "Turton Urban District"
            ]
        ]
    },
    {
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "query": "MATCH (teacher:`course_teach.teacher`)\nWHERE teacher.Hometown <> 'little lever urban district'\nRETURN teacher.Name",
        "db_id": "course_teach",
        "answers": [
            [
                "Joseph Huts"
            ],
            [
                "Gustaaf Deloor"
            ],
            [
                "Vicente Carretero"
            ],
            [
                "John Deloor"
            ],
            [
                "Kearsley Brown"
            ],
            [
                "Anne Walker"
            ],
            [
                "Lucy Wong"
            ]
        ]
    },
    {
        "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "query": "MATCH (teacher:`course_teach.teacher`)\nWHERE teacher.Hometown <> 'little lever urban district'\nRETURN teacher.Name",
        "db_id": "course_teach",
        "answers": [
            [
                "Joseph Huts"
            ],
            [
                "Gustaaf Deloor"
            ],
            [
                "Vicente Carretero"
            ],
            [
                "John Deloor"
            ],
            [
                "Kearsley Brown"
            ],
            [
                "Anne Walker"
            ],
            [
                "Lucy Wong"
            ]
        ]
    },
    {
        "question": "Show the name of teachers aged either 32 or 33?",
        "query": "MATCH (teacher:`course_teach.teacher`)\nWHERE teacher.Age = 32 OR teacher.Age = 33\nRETURN teacher.Name",
        "db_id": "course_teach",
        "answers": []
    },
    {
        "question": "What are the names of the teachers who are aged either 32 or 33?",
        "query": "MATCH (teacher:`course_teach.teacher`)\nWHERE teacher.Age = 32 OR teacher.Age = 33\nRETURN teacher.Name",
        "db_id": "course_teach",
        "answers": []
    },
    {
        "question": "What is the hometown of the youngest teacher?",
        "query": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Hometown\nORDER BY teacher.Age ASC\nLIMIT 1",
        "db_id": "course_teach",
        "answers": [
            [
                "Farnworth Municipal Borough"
            ]
        ]
    },
    {
        "question": "Where is the youngest teacher from?",
        "query": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Hometown\nORDER BY teacher.Age ASC\nLIMIT 1",
        "db_id": "course_teach",
        "answers": [
            [
                "Farnworth Municipal Borough"
            ]
        ]
    },
    {
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "query": "MATCH (teacher:`course_teach.teacher`)\nWITH teacher.Hometown AS Hometown, count(teacher.Hometown) AS count\nRETURN Hometown,count",
        "db_id": "course_teach",
        "answers": [
            [
                "Blackrod Urban District",
                1
            ],
            [
                "Bolton County Borough",
                1
            ],
            [
                "Farnworth Municipal Borough",
                1
            ],
            [
                "Horwich Urban District",
                1
            ],
            [
                "Kearsley Urban District",
                1
            ],
            [
                "Little Lever Urban District",
                1
            ],
            [
                "Turton Urban District",
                1
            ]
        ]
    },
    {
        "question": "For each hometown, how many teachers are there?",
        "query": "MATCH (teacher:`course_teach.teacher`)\nWITH teacher.Hometown AS Hometown, count(teacher.Hometown) AS count\nRETURN Hometown,count",
        "db_id": "course_teach",
        "answers": [
            [
                "Blackrod Urban District",
                1
            ],
            [
                "Bolton County Borough",
                1
            ],
            [
                "Farnworth Municipal Borough",
                1
            ],
            [
                "Horwich Urban District",
                1
            ],
            [
                "Kearsley Urban District",
                1
            ],
            [
                "Little Lever Urban District",
                1
            ],
            [
                "Turton Urban District",
                1
            ]
        ]
    },
    {
        "question": "Show the hometowns shared by at least two teachers.",
        "query": "MATCH (teacher:`course_teach.teacher`)\nWITH count(*) AS count, teacher.Hometown AS Hometown\nWHERE count  >= 2\nRETURN Hometown",
        "db_id": "course_teach",
        "answers": []
    },
    {
        "question": "What are the towns from which at least two teachers come from?",
        "query": "MATCH (teacher:`course_teach.teacher`)\nWITH count(*) AS count, teacher.Hometown AS Hometown\nWHERE count  >= 2\nRETURN Hometown",
        "db_id": "course_teach",
        "answers": []
    },
    {
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.course`)-[]-(T3:`course_teach.teacher`)\nRETURN T3.Name,T2.Course",
        "db_id": "course_teach",
        "answers": [
            [
                "Kearsley Brown",
                "Math"
            ],
            [
                "Vicente Carretero",
                "Math"
            ]
        ]
    },
    {
        "question": "What is the name of each teacher and what course they teach?",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.course`)-[]-(T3:`course_teach.teacher`)\nRETURN T3.Name,T2.Course",
        "db_id": "course_teach",
        "answers": [
            [
                "Kearsley Brown",
                "Math"
            ],
            [
                "Vicente Carretero",
                "Math"
            ]
        ]
    },
    {
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.course`)-[]-(T3:`course_teach.teacher`)\nRETURN T3.Name,T2.Course\nORDER BY T3.Name",
        "db_id": "course_teach",
        "answers": [
            [
                "Kearsley Brown",
                "Math"
            ],
            [
                "Vicente Carretero",
                "Math"
            ]
        ]
    },
    {
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.course`)-[]-(T3:`course_teach.teacher`)\nRETURN T3.Name,T2.Course\nORDER BY T3.Name",
        "db_id": "course_teach",
        "answers": [
            [
                "Kearsley Brown",
                "Math"
            ],
            [
                "Vicente Carretero",
                "Math"
            ]
        ]
    },
    {
        "question": "Show the name of the teacher for the math course.",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.course`)-[]-(T3:`course_teach.teacher`)\nWHERE T2.Course = 'Math'\nRETURN T3.Name",
        "db_id": "course_teach",
        "answers": [
            [
                "Kearsley Brown"
            ],
            [
                "Vicente Carretero"
            ]
        ]
    },
    {
        "question": "What are the names of the people who teach math courses?",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.course`)-[]-(T3:`course_teach.teacher`)\nWHERE T2.Course = 'Math'\nRETURN T3.Name",
        "db_id": "course_teach",
        "answers": [
            [
                "Kearsley Brown"
            ],
            [
                "Vicente Carretero"
            ]
        ]
    },
    {
        "question": "Show names of teachers and the number of courses they teach.",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.teacher`)\nWITH count(T2.Name) AS count, T2.Name AS Name\nRETURN Name,count",
        "db_id": "course_teach",
        "answers": [
            [
                "Gustaaf Deloor",
                1
            ],
            [
                "Vicente Carretero",
                1
            ],
            [
                "Kearsley Brown",
                1
            ],
            [
                "Anne Walker",
                2
            ],
            [
                "Lucy Wong",
                1
            ]
        ]
    },
    {
        "question": "What are the names of the teachers and how many courses do they teach?",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.teacher`)\nWITH count(T2.Name) AS count, T2.Name AS Name\nRETURN Name,count",
        "db_id": "course_teach",
        "answers": [
            [
                "Gustaaf Deloor",
                1
            ],
            [
                "Vicente Carretero",
                1
            ],
            [
                "Kearsley Brown",
                1
            ],
            [
                "Anne Walker",
                2
            ],
            [
                "Lucy Wong",
                1
            ]
        ]
    },
    {
        "question": "Show names of teachers that teach at least two courses.",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.teacher`)\nWITH count(*) AS count, T2.Name AS Name\nWHERE count  >= 2\nRETURN Name",
        "db_id": "course_teach",
        "answers": [
            [
                "Anne Walker"
            ]
        ]
    },
    {
        "question": "What are the names of the teachers who teach at least two courses?",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.teacher`)\nWITH count(*) AS count, T2.Name AS Name\nWHERE count  >= 2\nRETURN Name",
        "db_id": "course_teach",
        "answers": [
            [
                "Anne Walker"
            ]
        ]
    },
    {
        "question": "List the names of teachers who have not been arranged to teach courses.",
        "query": "MATCH (teacher:`course_teach.teacher`)\nWHERE NOT (teacher:`course_teach.teacher`)-[:`course_teach.course_arrange`]-()\nRETURN teacher.Name",
        "db_id": "course_teach",
        "answers": [
            [
                "Joseph Huts"
            ],
            [
                "John Deloor"
            ]
        ]
    },
    {
        "question": "What are the names of the teachers whose courses have not been arranged?",
        "query": "MATCH (teacher:`course_teach.teacher`)\nWHERE NOT (teacher:`course_teach.teacher`)-[:`course_teach.course_arrange`]-()\nRETURN teacher.Name",
        "db_id": "course_teach",
        "answers": [
            [
                "Joseph Huts"
            ],
            [
                "John Deloor"
            ]
        ]
    },
    {
        "question": "How many visitors below age 30 are there?",
        "query": "MATCH (visitor:`museum_visit.visitor`)\nWHERE visitor.Age < 30\nRETURN count(*)",
        "db_id": "museum_visit",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "query": "MATCH (visitor:`museum_visit.visitor`)\nWHERE visitor.Level_of_membership > 4\nRETURN visitor.Name\nORDER BY visitor.Level_of_membership DESC",
        "db_id": "museum_visit",
        "answers": [
            [
                "Gonzalo Higua\u00edn "
            ],
            [
                "Fernando Gago"
            ],
            [
                "Guti Midfielder"
            ]
        ]
    },
    {
        "question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "query": "MATCH (visitor:`museum_visit.visitor`)\nWHERE visitor.Level_of_membership <= 4\nRETURN avg(visitor.Age)",
        "db_id": "museum_visit",
        "answers": [
            [
                36.0
            ]
        ]
    },
    {
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "query": "MATCH (visitor:`museum_visit.visitor`)\nWHERE visitor.Level_of_membership > 4\nRETURN visitor.Name,visitor.Level_of_membership\nORDER BY visitor.Age DESC",
        "db_id": "museum_visit",
        "answers": [
            [
                "Fernando Gago",
                6
            ],
            [
                "Gonzalo Higua\u00edn ",
                8
            ],
            [
                "Guti Midfielder",
                5
            ]
        ]
    },
    {
        "question": "Find the id and name of the museum that has the most staff members?",
        "query": "MATCH (museum:`museum_visit.museum`)\nRETURN museum.Museum_ID,museum.Name\nORDER BY museum.Num_of_Staff DESC\nLIMIT 1",
        "db_id": "museum_visit",
        "answers": [
            [
                1,
                "Plaza Museum"
            ]
        ]
    },
    {
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "query": "MATCH (museum:`museum_visit.museum`)\nWHERE museum.Name = 'Plaza Museum'\nRETURN museum.Num_of_Staff,museum.Open_Year",
        "db_id": "museum_visit",
        "answers": [
            [
                62,
                "2000"
            ]
        ]
    },
    {
        "question": "List the first name and birth date of all players from the country with code USA.",
        "query": "MATCH (players:`wta_1.players`)\nWHERE players.country_code = 'USA'\nRETURN players.first_name,players.birth_date",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "What are the first names and birth dates of players from the USA?",
        "query": "MATCH (players:`wta_1.players`)\nWHERE players.country_code = 'USA'\nRETURN players.first_name,players.birth_date",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "Find the name of tourney that has more than 10 matches.",
        "query": "MATCH (matches:`wta_1.matches`)\nWITH count(*) AS count, matches.tourney_name AS tourney_name\nWHERE count  > 10\nRETURN tourney_name",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "What are the names of tournaments that have more than 10 matches?",
        "query": "MATCH (matches:`wta_1.matches`)\nWITH count(*) AS count, matches.tourney_name AS tourney_name\nWHERE count  > 10\nRETURN tourney_name",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "Find the first name and country code of the oldest player.",
        "query": "MATCH (players:`wta_1.players`)\nRETURN players.first_name,players.country_code\nORDER BY players.birth_date\nLIMIT 1",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "What is the first name and country code of the oldest player?",
        "query": "MATCH (players:`wta_1.players`)\nRETURN players.first_name,players.country_code\nORDER BY players.birth_date\nLIMIT 1",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "List the first and last name of all players in the order of birth date.",
        "query": "MATCH (players:`wta_1.players`)\nRETURN players.first_name,players.last_name\nORDER BY players.birth_date",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "What are the full names of all players, sorted by birth date?",
        "query": "MATCH (players:`wta_1.players`)\nRETURN players.first_name,players.last_name\nORDER BY players.birth_date",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "query": "MATCH (players:`wta_1.players`)\nWHERE players.hand = 'L'\nRETURN players.first_name,players.last_name\nORDER BY players.birth_date",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "What are the full names of all left handed players, in order of birth date?",
        "query": "MATCH (players:`wta_1.players`)\nWHERE players.hand = 'L'\nRETURN players.first_name,players.last_name\nORDER BY players.birth_date",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "query": "MATCH (T1:`wta_1.players`)-[]-(T2:`wta_1.rankings`)\nRETURN T1.country_code,T1.first_name\nORDER BY T2.tours DESC\nLIMIT 1",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "What is the first name and country code of the player with the most tours?",
        "query": "MATCH (T1:`wta_1.players`)-[]-(T2:`wta_1.rankings`)\nRETURN T1.country_code,T1.first_name\nORDER BY T2.tours DESC\nLIMIT 1",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "Find the year that has the most number of matches.",
        "query": "MATCH (matches:`wta_1.matches`)\nWITH matches.year AS year, count(matches.year) AS count\nRETURN year\nORDER BY count DESC\nLIMIT 1",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "Which year had the most matches?",
        "query": "MATCH (matches:`wta_1.matches`)\nWITH matches.year AS year, count(matches.year) AS count\nRETURN year\nORDER BY count DESC\nLIMIT 1",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "Find the name and rank points of the winner who won the most times.",
        "query": "MATCH (matches:`wta_1.matches`)\nWITH count(matches.winner_name) AS count, matches.winner_rank_points AS winner_rank_points, matches.winner_name AS winner_name\nRETURN winner_name,winner_rank_points\nORDER BY count DESC\nLIMIT 1",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "query": "MATCH (matches:`wta_1.matches`)\nWITH count(matches.winner_name) AS count, matches.winner_rank_points AS winner_rank_points, matches.winner_name AS winner_name\nRETURN winner_name,winner_rank_points\nORDER BY count DESC\nLIMIT 1",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "query": "MATCH (matches:`wta_1.matches`)\nWHERE matches.tourney_name = 'Australian Open'\nRETURN matches.winner_name\nORDER BY matches.winner_rank_points DESC\nLIMIT 1",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "query": "MATCH (matches:`wta_1.matches`)\nWHERE matches.tourney_name = 'Australian Open'\nRETURN matches.winner_name\nORDER BY matches.winner_rank_points DESC\nLIMIT 1",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "query": "MATCH (matches:`wta_1.matches`)\nRETURN matches.winner_name,matches.loser_name\nORDER BY matches.minutes DESC\nLIMIT 1",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "What are the names of the winner and loser who played in the longest match?",
        "query": "MATCH (matches:`wta_1.matches`)\nRETURN matches.winner_name,matches.loser_name\nORDER BY matches.minutes DESC\nLIMIT 1",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "Find the average ranking for each player and their first name.",
        "query": "MATCH (T1:`wta_1.players`)-[]-(T2:`wta_1.rankings`)\nWITH count(T1.first_name) AS count, T1.first_name AS first_name\nRETURN count,first_name",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "What are the first names of all players, and their average rankings?",
        "query": "MATCH (T1:`wta_1.players`)-[]-(T2:`wta_1.rankings`)\nWITH count(T1.first_name) AS count, T1.first_name AS first_name\nRETURN count,first_name",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "find the number of players for each country.",
        "query": "MATCH (players:`wta_1.players`)\nWITH count(players.country_code) AS count, players.country_code AS country_code\nRETURN count,country_code",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "How many players are from each country?",
        "query": "MATCH (players:`wta_1.players`)\nWITH count(players.country_code) AS count, players.country_code AS country_code\nRETURN count,country_code",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "find the code of the country where has the greatest number of players.",
        "query": "MATCH (players:`wta_1.players`)\nWITH count(players.country_code) AS count, players.country_code AS country_code\nRETURN country_code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "What is the code of the country with the most players?",
        "query": "MATCH (players:`wta_1.players`)\nWITH count(players.country_code) AS count, players.country_code AS country_code\nRETURN country_code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "Find the codes of countries that have more than 50 players.",
        "query": "MATCH (players:`wta_1.players`)\nWITH count(*) AS count, players.country_code AS country_code\nWHERE count  > 50\nRETURN country_code",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "What are the codes of countries with more than 50 players?",
        "query": "MATCH (players:`wta_1.players`)\nWITH count(*) AS count, players.country_code AS country_code\nWHERE count  > 50\nRETURN country_code",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "Find the number of matches happened in each year.",
        "query": "MATCH (matches:`wta_1.matches`)\nWITH matches.year AS year, count(matches.year) AS count\nRETURN count,year",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "How many matches were played in each year?",
        "query": "MATCH (matches:`wta_1.matches`)\nWITH matches.year AS year, count(matches.year) AS count\nRETURN count,year",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "query": "MATCH (T1:`wta_1.players`)-[]-(T2:`wta_1.matches`)\nRETURN T1.first_name,T1.country_code,T1.birth_date\nORDER BY T2.winner_rank_points DESC\nLIMIT 1",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "query": "MATCH (T1:`wta_1.players`)-[]-(T2:`wta_1.matches`)\nRETURN T1.first_name,T1.country_code,T1.birth_date\nORDER BY T2.winner_rank_points DESC\nLIMIT 1",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "Find the number of players for each hand type.",
        "query": "MATCH (players:`wta_1.players`)\nWITH players.hand AS hand, count(players.hand) AS count\nRETURN count,hand",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "How many players are there for each hand type?",
        "query": "MATCH (players:`wta_1.players`)\nWITH players.hand AS hand, count(players.hand) AS count\nRETURN count,hand",
        "db_id": "wta_1",
        "answers": []
    },
    {
        "question": "How many ships ended up being 'Captured'?",
        "query": "MATCH (ship:`battle_death.ship`)\nWHERE ship.disposition_of_ship = 'Captured'\nRETURN count(*)",
        "db_id": "battle_death",
        "answers": [
            [
                4
            ]
        ]
    },
    {
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "query": "MATCH (ship:`battle_death.ship`)\nRETURN ship.name,ship.tonnage\nORDER BY ship.name DESC",
        "db_id": "battle_death",
        "answers": [
            [
                "Three Brothers",
                "t"
            ],
            [
                "Mary",
                "t"
            ],
            [
                "Lettice",
                "t"
            ],
            [
                "HMS Avon",
                "391"
            ],
            [
                "HMS Atalanta",
                "225"
            ],
            [
                "Bon Accord",
                "t"
            ],
            [
                "Bacchus",
                "t"
            ]
        ]
    },
    {
        "question": "What is maximum and minimum death toll caused each time?",
        "query": "MATCH (death:`battle_death.death`)\nRETURN max(death.killed),min(death.killed)",
        "db_id": "battle_death",
        "answers": [
            [
                29,
                0
            ]
        ]
    },
    {
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "query": "MATCH (battle:`battle_death.battle`)\nWHERE battle.bulgarian_commander <> 'Boril'\nRETURN battle.name,battle.result",
        "db_id": "battle_death",
        "answers": [
            [
                "Battle of Adrianople",
                "Bulgarian victory"
            ],
            [
                "Battle of Serres",
                "Bulgarian victory"
            ],
            [
                "Battle of Rusion",
                "Bulgarian victory"
            ],
            [
                "Battle of Rodosto",
                "Bulgarian victory"
            ],
            [
                "Battle of Messinopolis",
                "Bulgarian victory"
            ],
            [
                "Siege of Constantinople",
                "Two Year Truce"
            ]
        ]
    },
    {
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "query": "MATCH (T1:`battle_death.battle`)-[]-(T2:`battle_death.ship`)\nWHERE T2.ship_type = 'Brig'\nRETURN DISTINCT T1.id,T1.name",
        "db_id": "battle_death",
        "answers": [
            [
                8,
                "Siege of Constantinople"
            ],
            [
                7,
                "Battle of Philippopolis"
            ],
            [
                6,
                "Battle of Boruy"
            ],
            [
                5,
                "Battle of Messinopolis"
            ],
            [
                4,
                "Battle of Rodosto"
            ]
        ]
    },
    {
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "query": "MATCH (battle:`battle_death.battle`)\nWHERE battle.bulgarian_commander = 'Kaloyan' AND battle.latin_commander = 'Baldwin I'\nRETURN battle.name",
        "db_id": "battle_death",
        "answers": [
            [
                "Battle of Adrianople"
            ]
        ]
    },
    {
        "question": "How many different results are there for the battles?",
        "query": "MATCH (battle:`battle_death.battle`)\nRETURN count(DISTINCT battle.result)",
        "db_id": "battle_death",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "What are the notes of the death events which has substring 'East'?",
        "query": "MATCH (death:`battle_death.death`)\nWHERE death.note =~'.*[E|e]ast.*'\nRETURN death.note",
        "db_id": "battle_death",
        "answers": [
            [
                "East Champaran, Bihar"
            ]
        ]
    },
    {
        "question": "what are all the addresses including line 1 and line 2?",
        "query": "MATCH (addresses:`student_transcripts_tracking.Addresses`)\nRETURN addresses.line_1,addresses.line_2",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "2294 Grant Square Apt. 235",
                "Apt. 370"
            ],
            [
                "3999 Aufderhar Ways Suite 593",
                "Apt. 388"
            ],
            [
                "67942 Carlotta Ferry Apt. 686",
                "Apt. 583"
            ],
            [
                "0144 Lamar Plaza Apt. 346",
                "Suite 703"
            ],
            [
                "858 Peggie Bypass Suite 212",
                "Apt. 335"
            ],
            [
                "16998 Mraz Lodge",
                "Apt. 689"
            ],
            [
                "193 Marlin Brook",
                "Apt. 406"
            ],
            [
                "202 Hessel Views Apt. 468",
                "Apt. 305"
            ],
            [
                "0643 Muller Vista",
                "Suite 383"
            ],
            [
                "7081 Eda Center",
                "Suite 830"
            ],
            [
                "9283 Schulist Falls Apt. 037",
                "Suite 239"
            ],
            [
                "979 Haag Shores Suite 656",
                "Apt. 468"
            ],
            [
                "492 Wilkinson Route",
                "Suite 865"
            ],
            [
                "186 Evan Motorway Apt. 409",
                "Suite 079"
            ],
            [
                "74046 Metz Walk Apt. 113",
                "Suite 674"
            ]
        ]
    },
    {
        "question": "What is the first and second line for all addresses?",
        "query": "MATCH (addresses:`student_transcripts_tracking.Addresses`)\nRETURN addresses.line_1,addresses.line_2",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "2294 Grant Square Apt. 235",
                "Apt. 370"
            ],
            [
                "3999 Aufderhar Ways Suite 593",
                "Apt. 388"
            ],
            [
                "67942 Carlotta Ferry Apt. 686",
                "Apt. 583"
            ],
            [
                "0144 Lamar Plaza Apt. 346",
                "Suite 703"
            ],
            [
                "858 Peggie Bypass Suite 212",
                "Apt. 335"
            ],
            [
                "16998 Mraz Lodge",
                "Apt. 689"
            ],
            [
                "193 Marlin Brook",
                "Apt. 406"
            ],
            [
                "202 Hessel Views Apt. 468",
                "Apt. 305"
            ],
            [
                "0643 Muller Vista",
                "Suite 383"
            ],
            [
                "7081 Eda Center",
                "Suite 830"
            ],
            [
                "9283 Schulist Falls Apt. 037",
                "Suite 239"
            ],
            [
                "979 Haag Shores Suite 656",
                "Apt. 468"
            ],
            [
                "492 Wilkinson Route",
                "Suite 865"
            ],
            [
                "186 Evan Motorway Apt. 409",
                "Suite 079"
            ],
            [
                "74046 Metz Walk Apt. 113",
                "Suite 674"
            ]
        ]
    },
    {
        "question": "How many courses in total are listed?",
        "query": "MATCH (courses:`student_transcripts_tracking.Courses`)\nRETURN count(*)",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "How many courses are there?",
        "query": "MATCH (courses:`student_transcripts_tracking.Courses`)\nRETURN count(*)",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "How is the math course described?",
        "query": "MATCH (courses:`student_transcripts_tracking.Courses`)\nWHERE courses.course_name = 'math'\nRETURN courses.course_description",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "q"
            ]
        ]
    },
    {
        "question": "What are the descriptions for all the math courses?",
        "query": "MATCH (courses:`student_transcripts_tracking.Courses`)\nWHERE courses.course_name = 'math'\nRETURN courses.course_description",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "q"
            ]
        ]
    },
    {
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "query": "MATCH (addresses:`student_transcripts_tracking.Addresses`)\nWHERE addresses.city = 'Port Chelsea'\nRETURN addresses.zip_postcode",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "148"
            ]
        ]
    },
    {
        "question": "What is the zip code for Port Chelsea?",
        "query": "MATCH (addresses:`student_transcripts_tracking.Addresses`)\nWHERE addresses.city = 'Port Chelsea'\nRETURN addresses.zip_postcode",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "148"
            ]
        ]
    },
    {
        "question": "Which department offers the most number of degrees? List department name and id.",
        "query": "MATCH (T1:`student_transcripts_tracking.Degree_Programs`)-[]-(T2:`student_transcripts_tracking.Departments`)\nWITH T2.department_name AS department_name, count(T1.department_id) AS count, T1.department_id AS department_id\nRETURN department_name,department_id\nORDER BY count DESC\nLIMIT 1",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "statistics",
                8
            ]
        ]
    },
    {
        "question": "How many departments offer any degree?",
        "query": "MATCH (degree_programs:`student_transcripts_tracking.Degree_Programs`)\nRETURN count(DISTINCT degree_programs.department_id)",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "How many different departments offer degrees?",
        "query": "MATCH (degree_programs:`student_transcripts_tracking.Degree_Programs`)\nRETURN count(DISTINCT degree_programs.department_id)",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                10
            ]
        ]
    },
    {
        "question": "How many different degree names are offered?",
        "query": "MATCH (degree_programs:`student_transcripts_tracking.Degree_Programs`)\nRETURN count(DISTINCT degree_programs.degree_summary_name)",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "How many different degrees are offered?",
        "query": "MATCH (degree_programs:`student_transcripts_tracking.Degree_Programs`)\nRETURN count(DISTINCT degree_programs.degree_summary_name)",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "How many degrees does the engineering department offer?",
        "query": "MATCH (T1:`student_transcripts_tracking.Departments`)-[]-(T2:`student_transcripts_tracking.Degree_Programs`)\nWHERE T1.department_name = 'engineer'\nRETURN count(*)",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "How many degrees does the engineering department have?",
        "query": "MATCH (T1:`student_transcripts_tracking.Departments`)-[]-(T2:`student_transcripts_tracking.Degree_Programs`)\nWHERE T1.department_name = 'engineer'\nRETURN count(*)",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                0
            ]
        ]
    },
    {
        "question": "What are the names and descriptions of all the sections?",
        "query": "MATCH (sections:`student_transcripts_tracking.Sections`)\nRETURN sections.section_name,sections.section_description",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "a",
                "non"
            ],
            [
                "b",
                "voluptatem"
            ],
            [
                "c",
                "qui"
            ],
            [
                "d",
                "voluptas"
            ],
            [
                "e",
                "ex"
            ],
            [
                "f",
                "doloremque"
            ],
            [
                "g",
                "provident"
            ],
            [
                "h",
                "et"
            ],
            [
                "j",
                "quis"
            ],
            [
                "k",
                "nesciunt"
            ],
            [
                "l",
                "ad"
            ],
            [
                "o",
                "et"
            ],
            [
                "p",
                "facilis"
            ],
            [
                "u",
                "reprehenderit"
            ],
            [
                "y",
                "qui"
            ]
        ]
    },
    {
        "question": "What are the names and descriptions for all the sections?",
        "query": "MATCH (sections:`student_transcripts_tracking.Sections`)\nRETURN sections.section_name,sections.section_description",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "a",
                "non"
            ],
            [
                "b",
                "voluptatem"
            ],
            [
                "c",
                "qui"
            ],
            [
                "d",
                "voluptas"
            ],
            [
                "e",
                "ex"
            ],
            [
                "f",
                "doloremque"
            ],
            [
                "g",
                "provident"
            ],
            [
                "h",
                "et"
            ],
            [
                "j",
                "quis"
            ],
            [
                "k",
                "nesciunt"
            ],
            [
                "l",
                "ad"
            ],
            [
                "o",
                "et"
            ],
            [
                "p",
                "facilis"
            ],
            [
                "u",
                "reprehenderit"
            ],
            [
                "y",
                "qui"
            ]
        ]
    },
    {
        "question": "What are the names and id of courses having at most 2 sections?",
        "query": "MATCH (T1:`student_transcripts_tracking.Courses`)-[]-(T2:`student_transcripts_tracking.Sections`)\nWITH count(*) AS count, T1.course_name AS course_name, T1.course_id AS course_id\nWHERE count  <= 2\nRETURN course_name,course_id",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "ds",
                1
            ],
            [
                "math",
                2
            ],
            [
                "en",
                4
            ],
            [
                "fr",
                5
            ],
            [
                "la",
                6
            ],
            [
                "cal",
                7
            ],
            [
                "nlp",
                8
            ],
            [
                "dl",
                9
            ],
            [
                "ml",
                10
            ],
            [
                "db",
                12
            ],
            [
                "pl",
                14
            ]
        ]
    },
    {
        "question": "What are the names and ids of every course with less than 2 sections?",
        "query": "MATCH (T1:`student_transcripts_tracking.Courses`)-[]-(T2:`student_transcripts_tracking.Sections`)\nWITH count(*) AS count, T1.course_name AS course_name, T1.course_id AS course_id\nWHERE count  <= 2\nRETURN course_name,course_id",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "ds",
                1
            ],
            [
                "math",
                2
            ],
            [
                "en",
                4
            ],
            [
                "fr",
                5
            ],
            [
                "la",
                6
            ],
            [
                "cal",
                7
            ],
            [
                "nlp",
                8
            ],
            [
                "dl",
                9
            ],
            [
                "ml",
                10
            ],
            [
                "db",
                12
            ],
            [
                "pl",
                14
            ]
        ]
    },
    {
        "question": "List the section_name in reversed lexicographical order.",
        "query": "MATCH (sections:`student_transcripts_tracking.Sections`)\nRETURN sections.section_name\nORDER BY sections.section_name DESC",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "y"
            ],
            [
                "u"
            ],
            [
                "p"
            ],
            [
                "o"
            ],
            [
                "l"
            ],
            [
                "k"
            ],
            [
                "j"
            ],
            [
                "h"
            ],
            [
                "g"
            ],
            [
                "f"
            ],
            [
                "e"
            ],
            [
                "d"
            ],
            [
                "c"
            ],
            [
                "b"
            ],
            [
                "a"
            ]
        ]
    },
    {
        "question": "What are the names of the sections in reverse alphabetical order?",
        "query": "MATCH (sections:`student_transcripts_tracking.Sections`)\nRETURN sections.section_name\nORDER BY sections.section_name DESC",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "y"
            ],
            [
                "u"
            ],
            [
                "p"
            ],
            [
                "o"
            ],
            [
                "l"
            ],
            [
                "k"
            ],
            [
                "j"
            ],
            [
                "h"
            ],
            [
                "g"
            ],
            [
                "f"
            ],
            [
                "e"
            ],
            [
                "d"
            ],
            [
                "c"
            ],
            [
                "b"
            ],
            [
                "a"
            ]
        ]
    },
    {
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "query": "MATCH (T1:`student_transcripts_tracking.Semesters`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH count(T1.semester_id) AS count, T1.semester_id AS semester_id, T1.semester_name AS semester_name\nRETURN semester_name,semester_id\nORDER BY count DESC\nLIMIT 1",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "summer 2010",
                2
            ]
        ]
    },
    {
        "question": "For each semester, what is the name and id of the one with the most students registered?",
        "query": "MATCH (T1:`student_transcripts_tracking.Semesters`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH count(T1.semester_id) AS count, T1.semester_id AS semester_id, T1.semester_name AS semester_name\nRETURN semester_name,semester_id\nORDER BY count DESC\nLIMIT 1",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "summer 2010",
                2
            ]
        ]
    },
    {
        "question": "What is the description of the department whose name has the substring the computer?",
        "query": "MATCH (departments:`student_transcripts_tracking.Departments`)\nWHERE departments.department_name =~'.*[C|c]omputer.*'\nRETURN departments.department_description",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "error"
            ]
        ]
    },
    {
        "question": "What is the department description for the one whose name has the word computer?",
        "query": "MATCH (departments:`student_transcripts_tracking.Departments`)\nWHERE departments.department_name =~'.*[C|c]omputer.*'\nRETURN departments.department_description",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "error"
            ]
        ]
    },
    {
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "query": "MATCH (T1:`student_transcripts_tracking.Students`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH T1.last_name AS last_name, T1.student_id AS student_id, count(*) AS count, T1.middle_name AS middle_name, T1.first_name AS first_name\nWHERE count  = 2\nRETURN first_name,middle_name,last_name,student_id",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "Jarvis",
                "Aaliyah",
                "Carroll",
                4
            ],
            [
                "Reva",
                "Golda",
                "Osinski",
                9
            ],
            [
                "Jordy",
                "Osborne",
                "Rempel",
                14
            ]
        ]
    },
    {
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "query": "MATCH (T1:`student_transcripts_tracking.Students`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH T1.last_name AS last_name, T1.student_id AS student_id, count(*) AS count, T1.middle_name AS middle_name, T1.first_name AS first_name\nWHERE count  = 2\nRETURN first_name,middle_name,last_name,student_id",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "Jarvis",
                "Aaliyah",
                "Carroll",
                4
            ],
            [
                "Reva",
                "Golda",
                "Osinski",
                9
            ],
            [
                "Jordy",
                "Osborne",
                "Rempel",
                14
            ]
        ]
    },
    {
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "query": "MATCH (T3:`student_transcripts_tracking.Degree_Programs`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)-[]-(T1:`student_transcripts_tracking.Students`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWHERE T3.degree_summary_name = 'Bachelor'\nRETURN DISTINCT T1.first_name,T1.middle_name,T1.last_name",
        "db_id": "student_transcripts_tracking",
        "answers": []
    },
    {
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "query": "MATCH (T3:`student_transcripts_tracking.Degree_Programs`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)-[]-(T1:`student_transcripts_tracking.Students`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWHERE T3.degree_summary_name = 'Bachelor'\nRETURN DISTINCT T1.first_name,T1.middle_name,T1.last_name",
        "db_id": "student_transcripts_tracking",
        "answers": []
    },
    {
        "question": "Find the kind of program which most number of students are enrolled in?",
        "query": "MATCH (T1:`student_transcripts_tracking.Degree_Programs`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH count(T1.degree_summary_name) AS count, T1.degree_summary_name AS degree_summary_name\nRETURN degree_summary_name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "Bachelor"
            ]
        ]
    },
    {
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "query": "MATCH (T1:`student_transcripts_tracking.Degree_Programs`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH count(T1.degree_summary_name) AS count, T1.degree_summary_name AS degree_summary_name\nRETURN degree_summary_name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "Bachelor"
            ]
        ]
    },
    {
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "query": "MATCH (T1:`student_transcripts_tracking.Degree_Programs`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH T1.degree_summary_name AS degree_summary_name, T1.degree_program_id AS degree_program_id, count(T1.degree_program_id) AS count\nRETURN degree_program_id,degree_summary_name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                9,
                "Bachelor"
            ]
        ]
    },
    {
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "query": "MATCH (T1:`student_transcripts_tracking.Degree_Programs`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH T1.degree_summary_name AS degree_summary_name, T1.degree_program_id AS degree_program_id, count(T1.degree_program_id) AS count\nRETURN degree_program_id,degree_summary_name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                9,
                "Bachelor"
            ]
        ]
    },
    {
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "query": "MATCH (semesters:`student_transcripts_tracking.Semesters`)\nWHERE NOT (semesters:`student_transcripts_tracking.Semesters`)-[]-(:`student_transcripts_tracking.Student_Enrolment`)\nRETURN semesters.semester_name",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "fall 2010"
            ],
            [
                "spring 2013"
            ],
            [
                "spring 2014"
            ],
            [
                "spring 2016"
            ],
            [
                "spring 2017"
            ],
            [
                "winter 2018"
            ]
        ]
    },
    {
        "question": "What is the name of the semester with no students enrolled?",
        "query": "MATCH (semesters:`student_transcripts_tracking.Semesters`)\nWHERE NOT (semesters:`student_transcripts_tracking.Semesters`)-[]-(:`student_transcripts_tracking.Student_Enrolment`)\nRETURN semesters.semester_name",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "fall 2010"
            ],
            [
                "spring 2013"
            ],
            [
                "spring 2014"
            ],
            [
                "spring 2016"
            ],
            [
                "spring 2017"
            ],
            [
                "winter 2018"
            ]
        ]
    },
    {
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "query": "MATCH (T1:`student_transcripts_tracking.Courses`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment_Courses`)\nRETURN DISTINCT T1.course_name",
        "db_id": "student_transcripts_tracking",
        "answers": []
    },
    {
        "question": "What are the names of all courses that have some students enrolled?",
        "query": "MATCH (T1:`student_transcripts_tracking.Courses`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment_Courses`)\nRETURN DISTINCT T1.course_name",
        "db_id": "student_transcripts_tracking",
        "answers": []
    },
    {
        "question": "What's the name of the course with most number of enrollments?",
        "query": "MATCH (T1:`student_transcripts_tracking.Courses`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment_Courses`)\nWITH count(T1.course_name) AS count, T1.course_name AS course_name\nRETURN course_name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "student_transcripts_tracking",
        "answers": []
    },
    {
        "question": "What is the name of the course with the most students enrolled?",
        "query": "MATCH (T1:`student_transcripts_tracking.Courses`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment_Courses`)\nWITH count(T1.course_name) AS count, T1.course_name AS course_name\nRETURN course_name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "student_transcripts_tracking",
        "answers": []
    },
    {
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "query": "MATCH (T1:`student_transcripts_tracking.Transcript_Contents`)-[]-(T2:`student_transcripts_tracking.Transcripts`)\nWITH count(*) AS count, T2.transcript_date AS transcript_date, T1.transcript_id AS transcript_id\nWHERE count  >= 2\nRETURN transcript_date,transcript_id",
        "db_id": "student_transcripts_tracking",
        "answers": []
    },
    {
        "question": "What is the date and id of the transcript with at least 2 courses listed?",
        "query": "MATCH (T1:`student_transcripts_tracking.Transcript_Contents`)-[]-(T2:`student_transcripts_tracking.Transcripts`)\nWITH count(*) AS count, T2.transcript_date AS transcript_date, T1.transcript_id AS transcript_id\nWHERE count  >= 2\nRETURN transcript_date,transcript_id",
        "db_id": "student_transcripts_tracking",
        "answers": []
    },
    {
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nWHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward'\nRETURN students.cell_mobile_number",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "(096)889-8954x524"
            ]
        ]
    },
    {
        "question": "What is the mobile phone number of the student named Timmothy Ward ?",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nWHERE students.first_name = 'timmothy' AND students.last_name = 'ward'\nRETURN students.cell_mobile_number",
        "db_id": "student_transcripts_tracking",
        "answers": []
    },
    {
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_first_registered ASC\nLIMIT 1",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "Timmothy",
                "Anna",
                "Ward"
            ]
        ]
    },
    {
        "question": "What is the first, middle, and last name of the first student to register?",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_first_registered ASC\nLIMIT 1",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "Timmothy",
                "Anna",
                "Ward"
            ]
        ]
    },
    {
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_left ASC\nLIMIT 1",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "Timmothy",
                "Anna",
                "Ward"
            ]
        ]
    },
    {
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_left ASC\nLIMIT 1",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "Timmothy",
                "Anna",
                "Ward"
            ]
        ]
    },
    {
        "question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nWHERE students.current_address_id <> students.permanent_address_id\nRETURN students.first_name",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "Timmothy"
            ],
            [
                "Hobart"
            ],
            [
                "Warren"
            ],
            [
                "Jarvis"
            ],
            [
                "Stanford"
            ],
            [
                "Frida"
            ],
            [
                "Delaney"
            ],
            [
                "Reva"
            ],
            [
                "Helga"
            ],
            [
                "Gregg"
            ],
            [
                "Orrin"
            ],
            [
                "Deon"
            ],
            [
                "Jordy"
            ],
            [
                "Jett"
            ]
        ]
    },
    {
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nWHERE students.current_address_id <> students.permanent_address_id\nRETURN students.first_name",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "Timmothy"
            ],
            [
                "Hobart"
            ],
            [
                "Warren"
            ],
            [
                "Jarvis"
            ],
            [
                "Stanford"
            ],
            [
                "Frida"
            ],
            [
                "Delaney"
            ],
            [
                "Reva"
            ],
            [
                "Helga"
            ],
            [
                "Gregg"
            ],
            [
                "Orrin"
            ],
            [
                "Deon"
            ],
            [
                "Jordy"
            ],
            [
                "Jett"
            ]
        ]
    },
    {
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "query": "MATCH (T1:`student_transcripts_tracking.Addresses`)-[]-(T2:`student_transcripts_tracking.Students`)\nWITH T1.line_1 AS line_1, T1.address_id AS address_id, count(T1.address_id) AS count, T1.line_2 AS line_2\nRETURN address_id,line_1,line_2\nORDER BY count DESC\nLIMIT 1",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                9,
                "0643 Muller Vista",
                "Suite 383"
            ]
        ]
    },
    {
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "query": "MATCH (T1:`student_transcripts_tracking.Addresses`)-[]-(T2:`student_transcripts_tracking.Students`)\nWITH T1.line_1 AS line_1, T1.address_id AS address_id, count(T1.address_id) AS count, T1.line_2 AS line_2\nRETURN address_id,line_1,line_2\nORDER BY count DESC\nLIMIT 1",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                9,
                "0643 Muller Vista",
                "Suite 383"
            ]
        ]
    },
    {
        "question": "When is the first transcript released? List the date and details.",
        "query": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`)\nRETURN transcripts.transcript_date,transcripts.other_details\nORDER BY transcripts.transcript_date ASC\nLIMIT 1",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "1975-05-06 12:04:47",
                null
            ]
        ]
    },
    {
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "query": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`)\nRETURN transcripts.transcript_date,transcripts.other_details\nORDER BY transcripts.transcript_date ASC\nLIMIT 1",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "1975-05-06 12:04:47",
                null
            ]
        ]
    },
    {
        "question": "How many transcripts are released?",
        "query": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`)\nRETURN count(*)",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "How many transcripts are listed?",
        "query": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`)\nRETURN count(*)",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                15
            ]
        ]
    },
    {
        "question": "What is the last transcript release date?",
        "query": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`)\nRETURN transcripts.transcript_date\nORDER BY transcripts.transcript_date DESC\nLIMIT 1",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "2013-06-30 13:01:40"
            ]
        ]
    },
    {
        "question": "When was the last transcript released?",
        "query": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`)\nRETURN transcripts.transcript_date\nORDER BY transcripts.transcript_date DESC\nLIMIT 1",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "2013-06-30 13:01:40"
            ]
        ]
    },
    {
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "query": "MATCH (transcript_contents:`student_transcripts_tracking.Transcript_Contents`)\nWITH transcript_contents.student_course_id AS student_course_id, count(transcript_contents.student_course_id) AS count\nRETURN count,student_course_id\nORDER BY count DESC\nLIMIT 1",
        "db_id": "student_transcripts_tracking",
        "answers": []
    },
    {
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "query": "MATCH (transcript_contents:`student_transcripts_tracking.Transcript_Contents`)\nWITH transcript_contents.student_course_id AS student_course_id, count(transcript_contents.student_course_id) AS count\nRETURN count,student_course_id\nORDER BY count DESC\nLIMIT 1",
        "db_id": "student_transcripts_tracking",
        "answers": []
    },
    {
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "query": "MATCH (T1:`student_transcripts_tracking.Transcript_Contents`)-[]-(T2:`student_transcripts_tracking.Transcripts`)\nWITH T2.transcript_date AS transcript_date, T1.transcript_id AS transcript_id, count(T1.transcript_id) AS count\nRETURN transcript_date,transcript_id\nORDER BY count ASC\nLIMIT 1",
        "db_id": "student_transcripts_tracking",
        "answers": []
    },
    {
        "question": "What is the date and id of the transcript with the least number of results?",
        "query": "MATCH (T1:`student_transcripts_tracking.Transcript_Contents`)-[]-(T2:`student_transcripts_tracking.Transcripts`)\nWITH T2.transcript_date AS transcript_date, T1.transcript_id AS transcript_id, count(T1.transcript_id) AS count\nRETURN transcript_date,transcript_id\nORDER BY count ASC\nLIMIT 1",
        "db_id": "student_transcripts_tracking",
        "answers": []
    },
    {
        "question": "How many different addresses do the students currently live?",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN count(DISTINCT students.current_address_id)",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "What are the different addresses that have students living there?",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN count(DISTINCT students.current_address_id)",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "List all the student details in reversed lexicographical order.",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.other_student_details\nORDER BY students.other_student_details DESC",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "voluptatem"
            ],
            [
                "rerum"
            ],
            [
                "quia"
            ],
            [
                "qui"
            ],
            [
                "omnis"
            ],
            [
                "omnis"
            ],
            [
                "non"
            ],
            [
                "nesciunt"
            ],
            [
                "laborum"
            ],
            [
                "facilis"
            ],
            [
                "et"
            ],
            [
                "dolorum"
            ],
            [
                "autem"
            ],
            [
                "atque"
            ],
            [
                "assumenda"
            ]
        ]
    },
    {
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.other_student_details\nORDER BY students.other_student_details DESC",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "voluptatem"
            ],
            [
                "rerum"
            ],
            [
                "quia"
            ],
            [
                "qui"
            ],
            [
                "omnis"
            ],
            [
                "omnis"
            ],
            [
                "non"
            ],
            [
                "nesciunt"
            ],
            [
                "laborum"
            ],
            [
                "facilis"
            ],
            [
                "et"
            ],
            [
                "dolorum"
            ],
            [
                "autem"
            ],
            [
                "atque"
            ],
            [
                "assumenda"
            ]
        ]
    },
    {
        "question": "Describe the section h.",
        "query": "MATCH (sections:`student_transcripts_tracking.Sections`)\nWHERE sections.section_name = 'h'\nRETURN sections.section_description",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "et"
            ]
        ]
    },
    {
        "question": "What is the description for the section named h?",
        "query": "MATCH (sections:`student_transcripts_tracking.Sections`)\nWHERE sections.section_name = 'h'\nRETURN sections.section_description",
        "db_id": "student_transcripts_tracking",
        "answers": [
            [
                "et"
            ]
        ]
    },
    {
        "question": "List the title of all cartoons in alphabetical order.",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Title\nORDER BY cartoon.Title",
        "db_id": "tvshow",
        "answers": [
            [
                "Dawn of the Dead Man!"
            ],
            [
                "Day of the Dark Knight!"
            ],
            [
                "Deep Cover for Batman!"
            ],
            [
                "Enter the Outsiders!"
            ],
            [
                "Evil Under the Sea!"
            ],
            [
                "Fall of the Blue Beetle!"
            ],
            [
                "Invasion of the Secret Santas!"
            ],
            [
                "Journey to the Center of the Bat!"
            ],
            [
                "Return of the Fearsome Fangs!"
            ],
            [
                "Terror on Dinosaur Island!"
            ],
            [
                "The Eyes of Despero!"
            ],
            [
                "The Rise of the Blue Beetle!"
            ]
        ]
    },
    {
        "question": "What are the titles of the cartoons sorted alphabetically?",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Title\nORDER BY cartoon.Title",
        "db_id": "tvshow",
        "answers": [
            [
                "Dawn of the Dead Man!"
            ],
            [
                "Day of the Dark Knight!"
            ],
            [
                "Deep Cover for Batman!"
            ],
            [
                "Enter the Outsiders!"
            ],
            [
                "Evil Under the Sea!"
            ],
            [
                "Fall of the Blue Beetle!"
            ],
            [
                "Invasion of the Secret Santas!"
            ],
            [
                "Journey to the Center of the Bat!"
            ],
            [
                "Return of the Fearsome Fangs!"
            ],
            [
                "Terror on Dinosaur Island!"
            ],
            [
                "The Eyes of Despero!"
            ],
            [
                "The Rise of the Blue Beetle!"
            ]
        ]
    },
    {
        "question": "List all cartoon directed by \"Ben Jones\".",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Directed_by = 'Ben Jones'\nRETURN cartoon.Title",
        "db_id": "tvshow",
        "answers": [
            [
                "The Rise of the Blue Beetle!"
            ],
            [
                "Day of the Dark Knight!"
            ],
            [
                "Dawn of the Dead Man!"
            ],
            [
                "The Eyes of Despero!"
            ]
        ]
    },
    {
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Directed_by = 'Ben Jones'\nRETURN cartoon.Title",
        "db_id": "tvshow",
        "answers": [
            [
                "The Rise of the Blue Beetle!"
            ],
            [
                "Day of the Dark Knight!"
            ],
            [
                "Dawn of the Dead Man!"
            ],
            [
                "The Eyes of Despero!"
            ]
        ]
    },
    {
        "question": "How many cartoons were written by \"Joseph Kuhr\"?",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Written_by = 'Joseph Kuhr'\nRETURN count(*)",
        "db_id": "tvshow",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Written_by = 'Joseph Kuhr'\nRETURN count(*)",
        "db_id": "tvshow",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "list all cartoon titles and their directors ordered by their air date",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Title,cartoon.Directed_by\nORDER BY cartoon.Original_air_date",
        "db_id": "tvshow",
        "answers": [
            [
                "Invasion of the Secret Santas!",
                "Brandon Vietti"
            ],
            [
                "Evil Under the Sea!",
                "Michael Chang"
            ],
            [
                "Return of the Fearsome Fangs!",
                "Brandon Vietti"
            ],
            [
                "Deep Cover for Batman!",
                "Michael Chang"
            ],
            [
                "The Eyes of Despero!",
                "Ben Jones"
            ],
            [
                "Dawn of the Dead Man!",
                "Ben Jones"
            ],
            [
                "Day of the Dark Knight!",
                "Ben Jones"
            ],
            [
                "Fall of the Blue Beetle!",
                "Brandon Vietti"
            ],
            [
                "Journey to the Center of the Bat!",
                "Michael Chang"
            ],
            [
                "Enter the Outsiders!",
                "Michael Chang"
            ],
            [
                "The Rise of the Blue Beetle!",
                "Ben Jones"
            ],
            [
                "Terror on Dinosaur Island!",
                "Brandon Vietti"
            ]
        ]
    },
    {
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Title,cartoon.Directed_by\nORDER BY cartoon.Original_air_date",
        "db_id": "tvshow",
        "answers": [
            [
                "Invasion of the Secret Santas!",
                "Brandon Vietti"
            ],
            [
                "Evil Under the Sea!",
                "Michael Chang"
            ],
            [
                "Return of the Fearsome Fangs!",
                "Brandon Vietti"
            ],
            [
                "Deep Cover for Batman!",
                "Michael Chang"
            ],
            [
                "The Eyes of Despero!",
                "Ben Jones"
            ],
            [
                "Dawn of the Dead Man!",
                "Ben Jones"
            ],
            [
                "Day of the Dark Knight!",
                "Ben Jones"
            ],
            [
                "Fall of the Blue Beetle!",
                "Brandon Vietti"
            ],
            [
                "Journey to the Center of the Bat!",
                "Michael Chang"
            ],
            [
                "Enter the Outsiders!",
                "Michael Chang"
            ],
            [
                "The Rise of the Blue Beetle!",
                "Ben Jones"
            ],
            [
                "Terror on Dinosaur Island!",
                "Brandon Vietti"
            ]
        ]
    },
    {
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Directed_by = 'Ben Jones' OR cartoon.Directed_by = 'Brandon Vietti'\nRETURN cartoon.Title",
        "db_id": "tvshow",
        "answers": [
            [
                "The Rise of the Blue Beetle!"
            ],
            [
                "Terror on Dinosaur Island!"
            ],
            [
                "Day of the Dark Knight!"
            ],
            [
                "Invasion of the Secret Santas!"
            ],
            [
                "Dawn of the Dead Man!"
            ],
            [
                "Fall of the Blue Beetle!"
            ],
            [
                "The Eyes of Despero!"
            ],
            [
                "Return of the Fearsome Fangs!"
            ]
        ]
    },
    {
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Directed_by = 'Ben Jones' OR cartoon.Directed_by = 'Brandon Vietti'\nRETURN cartoon.Title",
        "db_id": "tvshow",
        "answers": [
            [
                "The Rise of the Blue Beetle!"
            ],
            [
                "Terror on Dinosaur Island!"
            ],
            [
                "Day of the Dark Knight!"
            ],
            [
                "Invasion of the Secret Santas!"
            ],
            [
                "Dawn of the Dead Man!"
            ],
            [
                "Fall of the Blue Beetle!"
            ],
            [
                "The Eyes of Despero!"
            ],
            [
                "Return of the Fearsome Fangs!"
            ]
        ]
    },
    {
        "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWITH count(tv_channel.Country) AS count, tv_channel.Country AS Country\nRETURN Country,count\nORDER BY count DESC\nLIMIT 1",
        "db_id": "tvshow",
        "answers": [
            [
                "Italy",
                12
            ]
        ]
    },
    {
        "question": "What is the country with the most number of TV Channels and how many does it have?",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWITH count(tv_channel.Country) AS count, tv_channel.Country AS Country\nRETURN Country,count\nORDER BY count DESC\nLIMIT 1",
        "db_id": "tvshow",
        "answers": [
            [
                "Italy",
                12
            ]
        ]
    },
    {
        "question": "List the number of different series names and contents in the TV Channel table.",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nRETURN count(DISTINCT tv_channel.series_name),count(DISTINCT tv_channel.Content)",
        "db_id": "tvshow",
        "answers": [
            [
                15,
                1
            ]
        ]
    },
    {
        "question": "How many different series and contents are listed in the TV Channel table?",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nRETURN count(DISTINCT tv_channel.series_name),count(DISTINCT tv_channel.Content)",
        "db_id": "tvshow",
        "answers": [
            [
                15,
                1
            ]
        ]
    },
    {
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.series_name = 'Sky Radio'\nRETURN tv_channel.Content",
        "db_id": "tvshow",
        "answers": [
            [
                "music"
            ]
        ]
    },
    {
        "question": "What is the content of the series Sky Radio?",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.series_name = 'Sky Radio'\nRETURN tv_channel.Content",
        "db_id": "tvshow",
        "answers": [
            [
                "music"
            ]
        ]
    },
    {
        "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.series_name = 'Sky Radio'\nRETURN tv_channel.Package_Option",
        "db_id": "tvshow",
        "answers": [
            [
                "Sky Famiglia"
            ]
        ]
    },
    {
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.series_name = 'Sky Radio'\nRETURN tv_channel.Package_Option",
        "db_id": "tvshow",
        "answers": [
            [
                "Sky Famiglia"
            ]
        ]
    },
    {
        "question": "How many TV Channel using language English?",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Language = 'English'\nRETURN count(*)",
        "db_id": "tvshow",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "How many TV Channels use the English language?",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Language = 'English'\nRETURN count(*)",
        "db_id": "tvshow",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWITH tv_channel.Language AS Language, count(tv_channel.Language) AS count\nRETURN Language,count\nORDER BY count ASC\nLIMIT 1",
        "db_id": "tvshow",
        "answers": [
            [
                "English",
                3
            ]
        ]
    },
    {
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWITH tv_channel.Language AS Language, count(tv_channel.Language) AS count\nRETURN Language,count\nORDER BY count ASC\nLIMIT 1",
        "db_id": "tvshow",
        "answers": [
            [
                "English",
                3
            ]
        ]
    },
    {
        "question": "List each language and the number of TV Channels using it.",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWITH tv_channel.Language AS Language, count(tv_channel.Language) AS count\nRETURN Language,count",
        "db_id": "tvshow",
        "answers": [
            [
                "Italian",
                12
            ],
            [
                "English",
                3
            ]
        ]
    },
    {
        "question": "For each language, list the number of TV Channels that use it.",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWITH tv_channel.Language AS Language, count(tv_channel.Language) AS count\nRETURN Language,count",
        "db_id": "tvshow",
        "answers": [
            [
                "Italian",
                12
            ],
            [
                "English",
                3
            ]
        ]
    },
    {
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`)\nWHERE T2.Title = 'The Rise of the Blue Beetle!'\nRETURN T1.series_name",
        "db_id": "tvshow",
        "answers": [
            [
                "Sky Radio"
            ]
        ]
    },
    {
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`)\nWHERE T2.Title = 'The Rise of the Blue Beetle!'\nRETURN T1.series_name",
        "db_id": "tvshow",
        "answers": [
            [
                "Sky Radio"
            ]
        ]
    },
    {
        "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`)\nWHERE T1.series_name = 'Sky Radio'\nRETURN T2.Title",
        "db_id": "tvshow",
        "answers": [
            [
                "The Rise of the Blue Beetle!"
            ],
            [
                "Return of the Fearsome Fangs!"
            ]
        ]
    },
    {
        "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`)\nWHERE T1.series_name = 'Sky Radio'\nRETURN T2.Title",
        "db_id": "tvshow",
        "answers": [
            [
                "The Rise of the Blue Beetle!"
            ],
            [
                "Return of the Fearsome Fangs!"
            ]
        ]
    },
    {
        "question": "List the Episode of all TV series sorted by rating.",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN tv_series.Episode\nORDER BY tv_series.Rating",
        "db_id": "tvshow",
        "answers": [
            [
                "The Hanged Man"
            ],
            [
                "Double Down"
            ],
            [
                "Home By Another Way"
            ],
            [
                "Keepers"
            ],
            [
                "Emily"
            ],
            [
                "Blowback"
            ],
            [
                "The Legend of Dylan McCleen"
            ],
            [
                "Winterland"
            ],
            [
                "The Year of the Rabbit"
            ],
            [
                "Game Three"
            ],
            [
                "Friendly Skies"
            ],
            [
                "A Love of a Lifetime"
            ]
        ]
    },
    {
        "question": "What are all of the episodes ordered by ratings?",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN tv_series.Episode\nORDER BY tv_series.Rating",
        "db_id": "tvshow",
        "answers": [
            [
                "The Hanged Man"
            ],
            [
                "Double Down"
            ],
            [
                "Home By Another Way"
            ],
            [
                "Keepers"
            ],
            [
                "Emily"
            ],
            [
                "Blowback"
            ],
            [
                "The Legend of Dylan McCleen"
            ],
            [
                "Winterland"
            ],
            [
                "The Year of the Rabbit"
            ],
            [
                "Game Three"
            ],
            [
                "Friendly Skies"
            ],
            [
                "A Love of a Lifetime"
            ]
        ]
    },
    {
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN tv_series.Episode,tv_series.Rating\nORDER BY tv_series.Rating DESC\nLIMIT 3",
        "db_id": "tvshow",
        "answers": [
            [
                "A Love of a Lifetime",
                "5.8"
            ],
            [
                "Friendly Skies",
                "5.3"
            ],
            [
                "Game Three",
                "4.4"
            ]
        ]
    },
    {
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN tv_series.Episode,tv_series.Rating\nORDER BY tv_series.Rating DESC\nLIMIT 3",
        "db_id": "tvshow",
        "answers": [
            [
                "A Love of a Lifetime",
                "5.8"
            ],
            [
                "Friendly Skies",
                "5.3"
            ],
            [
                "Game Three",
                "4.4"
            ]
        ]
    },
    {
        "question": "What is minimum and maximum share of TV series?",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN max(tv_series.Share),min(tv_series.Share)",
        "db_id": "tvshow",
        "answers": [
            [
                9.0,
                5.0
            ]
        ]
    },
    {
        "question": "What is the maximum and minimum share for the TV series?",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN max(tv_series.Share),min(tv_series.Share)",
        "db_id": "tvshow",
        "answers": [
            [
                9.0,
                5.0
            ]
        ]
    },
    {
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nWHERE tv_series.Episode = 'A Love of a Lifetime'\nRETURN tv_series.Air_Date",
        "db_id": "tvshow",
        "answers": [
            [
                "September 24, 2007"
            ]
        ]
    },
    {
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nWHERE tv_series.Episode = 'A Love of a Lifetime'\nRETURN tv_series.Air_Date",
        "db_id": "tvshow",
        "answers": [
            [
                "September 24, 2007"
            ]
        ]
    },
    {
        "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nWHERE tv_series.Episode = 'A Love of a Lifetime'\nRETURN tv_series.Weekly_Rank",
        "db_id": "tvshow",
        "answers": [
            [
                43.0
            ]
        ]
    },
    {
        "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nWHERE tv_series.Episode = 'A Love of a Lifetime'\nRETURN tv_series.Weekly_Rank",
        "db_id": "tvshow",
        "answers": [
            [
                43.0
            ]
        ]
    },
    {
        "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.TV_series`)\nWHERE T2.Episode = 'A Love of a Lifetime'\nRETURN T1.series_name",
        "db_id": "tvshow",
        "answers": [
            [
                "Sky Radio"
            ]
        ]
    },
    {
        "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.TV_series`)\nWHERE T2.Episode = 'A Love of a Lifetime'\nRETURN T1.series_name",
        "db_id": "tvshow",
        "answers": [
            [
                "Sky Radio"
            ]
        ]
    },
    {
        "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.TV_series`)\nWHERE T1.series_name = 'Sky Radio'\nRETURN T2.Episode",
        "db_id": "tvshow",
        "answers": [
            [
                "Keepers"
            ],
            [
                "A Love of a Lifetime"
            ]
        ]
    },
    {
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.TV_series`)\nWHERE T1.series_name = 'Sky Radio'\nRETURN T2.Episode",
        "db_id": "tvshow",
        "answers": [
            [
                "Keepers"
            ],
            [
                "A Love of a Lifetime"
            ]
        ]
    },
    {
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nWITH count(cartoon.Directed_by) AS count, cartoon.Directed_by AS Directed_by\nRETURN count,Directed_by",
        "db_id": "tvshow",
        "answers": [
            [
                4,
                "Ben Jones"
            ],
            [
                4,
                "Brandon Vietti"
            ],
            [
                4,
                "Michael Chang"
            ]
        ]
    },
    {
        "question": "How many cartoons did each director create?",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nWITH count(cartoon.Directed_by) AS count, cartoon.Directed_by AS Directed_by\nRETURN count,Directed_by",
        "db_id": "tvshow",
        "answers": [
            [
                4,
                "Ben Jones"
            ],
            [
                4,
                "Brandon Vietti"
            ],
            [
                4,
                "Michael Chang"
            ]
        ]
    },
    {
        "question": "Find the production code and channel of the most recently aired cartoon .",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Production_code,cartoon.Channel\nORDER BY cartoon.Original_air_date DESC\nLIMIT 1",
        "db_id": "tvshow",
        "answers": [
            [
                102.0,
                "701"
            ]
        ]
    },
    {
        "question": "What is the produdction code and channel of the most recent cartoon ?",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Production_code,cartoon.Channel\nORDER BY cartoon.Original_air_date DESC\nLIMIT 1",
        "db_id": "tvshow",
        "answers": [
            [
                102.0,
                "701"
            ]
        ]
    },
    {
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Hight_definition_TV = 'yes'\nRETURN tv_channel.Package_Option,tv_channel.series_name",
        "db_id": "tvshow",
        "answers": [
            [
                "Sky Famiglia + Sky HD",
                "MTV Live HD"
            ]
        ]
    },
    {
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Hight_definition_TV = 'yes'\nRETURN tv_channel.Package_Option,tv_channel.series_name",
        "db_id": "tvshow",
        "answers": [
            [
                "Sky Famiglia + Sky HD",
                "MTV Live HD"
            ]
        ]
    },
    {
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`)\nWHERE T2.Written_by = 'Todd Casey'\nRETURN T1.Country",
        "db_id": "tvshow",
        "answers": [
            [
                "United Kingdom"
            ],
            [
                "Italy"
            ]
        ]
    },
    {
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`)\nWHERE T2.Written_by = 'Todd Casey'\nRETURN T1.Country",
        "db_id": "tvshow",
        "answers": [
            [
                "United Kingdom"
            ],
            [
                "Italy"
            ]
        ]
    },
    {
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Language <> 'English'\nRETURN tv_channel.Pixel_aspect_ratio_PAR,tv_channel.Country",
        "db_id": "tvshow",
        "answers": [
            [
                "4:3",
                "Italy"
            ],
            [
                "4:3",
                "Italy"
            ],
            [
                "4:3 / 16:9",
                "Italy"
            ],
            [
                "16:9",
                "Italy"
            ],
            [
                "4:3",
                "Italy"
            ],
            [
                "16:9",
                "Italy"
            ],
            [
                "4:3",
                "Italy"
            ],
            [
                "16:9",
                "Italy"
            ],
            [
                "4:3 / 16:9",
                "Italy"
            ],
            [
                "4:3 / 16:9",
                "Italy"
            ],
            [
                "4:3",
                "Italy"
            ],
            [
                "4:3",
                "Italy"
            ]
        ]
    },
    {
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Language <> 'English'\nRETURN tv_channel.Pixel_aspect_ratio_PAR,tv_channel.Country",
        "db_id": "tvshow",
        "answers": [
            [
                "4:3",
                "Italy"
            ],
            [
                "4:3",
                "Italy"
            ],
            [
                "4:3 / 16:9",
                "Italy"
            ],
            [
                "16:9",
                "Italy"
            ],
            [
                "4:3",
                "Italy"
            ],
            [
                "16:9",
                "Italy"
            ],
            [
                "4:3",
                "Italy"
            ],
            [
                "16:9",
                "Italy"
            ],
            [
                "4:3 / 16:9",
                "Italy"
            ],
            [
                "4:3 / 16:9",
                "Italy"
            ],
            [
                "4:3",
                "Italy"
            ],
            [
                "4:3",
                "Italy"
            ]
        ]
    },
    {
        "question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWITH count(*) AS count, tv_channel.id AS id\nWHERE count  > 2\nRETURN id",
        "db_id": "tvshow",
        "answers": []
    },
    {
        "question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWITH count(*) AS count, tv_channel.id AS id\nWHERE count  > 2\nRETURN id",
        "db_id": "tvshow",
        "answers": []
    },
    {
        "question": "How many poker players are there?",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN count(*)",
        "db_id": "poker_player",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "Count the number of poker players.",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN count(*)",
        "db_id": "poker_player",
        "answers": [
            [
                5
            ]
        ]
    },
    {
        "question": "List the earnings of poker players in descending order.",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Earnings\nORDER BY poker_player.Earnings DESC",
        "db_id": "poker_player",
        "answers": [
            [
                596462.0
            ],
            [
                476090.0
            ],
            [
                189233.0
            ],
            [
                142800.0
            ],
            [
                104871.0
            ]
        ]
    },
    {
        "question": "What are the earnings of poker players, ordered descending by value?",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Earnings\nORDER BY poker_player.Earnings DESC",
        "db_id": "poker_player",
        "answers": [
            [
                596462.0
            ],
            [
                476090.0
            ],
            [
                189233.0
            ],
            [
                142800.0
            ],
            [
                104871.0
            ]
        ]
    },
    {
        "question": "List the final tables made and the best finishes of poker players.",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Final_Table_Made,poker_player.Best_Finish",
        "db_id": "poker_player",
        "answers": [
            [
                42.0,
                1.0
            ],
            [
                10.0,
                2.0
            ],
            [
                21.0,
                1.0
            ],
            [
                19.0,
                2.0
            ],
            [
                26.0,
                3.0
            ]
        ]
    },
    {
        "question": "What are the final tables made and best finishes for all poker players?",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Final_Table_Made,poker_player.Best_Finish",
        "db_id": "poker_player",
        "answers": [
            [
                42.0,
                1.0
            ],
            [
                10.0,
                2.0
            ],
            [
                21.0,
                1.0
            ],
            [
                19.0,
                2.0
            ],
            [
                26.0,
                3.0
            ]
        ]
    },
    {
        "question": "What is the average earnings of poker players?",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN avg(poker_player.Earnings)",
        "db_id": "poker_player",
        "answers": [
            [
                301891.2
            ]
        ]
    },
    {
        "question": "Return the average earnings across all poker players.",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN avg(poker_player.Earnings)",
        "db_id": "poker_player",
        "answers": [
            [
                301891.2
            ]
        ]
    },
    {
        "question": "What is the money rank of the poker player with the highest earnings?",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Money_Rank\nORDER BY poker_player.Earnings DESC\nLIMIT 1",
        "db_id": "poker_player",
        "answers": [
            [
                58.0
            ]
        ]
    },
    {
        "question": "Return the money rank of the player with the greatest earnings.",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Money_Rank\nORDER BY poker_player.Earnings DESC\nLIMIT 1",
        "db_id": "poker_player",
        "answers": [
            [
                58.0
            ]
        ]
    },
    {
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nWHERE poker_player.Earnings < 200000\nRETURN max(poker_player.Final_Table_Made)",
        "db_id": "poker_player",
        "answers": [
            [
                26.0
            ]
        ]
    },
    {
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nWHERE poker_player.Earnings < 200000\nRETURN max(poker_player.Final_Table_Made)",
        "db_id": "poker_player",
        "answers": [
            [
                26.0
            ]
        ]
    },
    {
        "question": "What are the names of poker players?",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Name",
        "db_id": "poker_player",
        "answers": [
            [
                "Aleksey Ostapenko"
            ],
            [
                "Teodor Salparov"
            ],
            [
                "Yevgeni Sivozhelez"
            ],
            [
                "Maksim Botin"
            ],
            [
                "Semen Poltavskiy"
            ]
        ]
    },
    {
        "question": "Return the names of all the poker players.",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Name",
        "db_id": "poker_player",
        "answers": [
            [
                "Aleksey Ostapenko"
            ],
            [
                "Teodor Salparov"
            ],
            [
                "Yevgeni Sivozhelez"
            ],
            [
                "Maksim Botin"
            ],
            [
                "Semen Poltavskiy"
            ]
        ]
    },
    {
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nWHERE T2.Earnings > 300000\nRETURN T1.Name",
        "db_id": "poker_player",
        "answers": [
            [
                "Aleksey Ostapenko"
            ],
            [
                "Maksim Botin"
            ]
        ]
    },
    {
        "question": "Give the names of poker players who have earnings above 300000.",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nWHERE T2.Earnings > 300000\nRETURN T1.Name",
        "db_id": "poker_player",
        "answers": [
            [
                "Aleksey Ostapenko"
            ],
            [
                "Maksim Botin"
            ]
        ]
    },
    {
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Name\nORDER BY T2.Final_Table_Made",
        "db_id": "poker_player",
        "answers": [
            [
                "Teodor Salparov"
            ],
            [
                "Maksim Botin"
            ],
            [
                "Yevgeni Sivozhelez"
            ],
            [
                "Semen Poltavskiy"
            ],
            [
                "Aleksey Ostapenko"
            ]
        ]
    },
    {
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Name\nORDER BY T2.Final_Table_Made",
        "db_id": "poker_player",
        "answers": [
            [
                "Teodor Salparov"
            ],
            [
                "Maksim Botin"
            ],
            [
                "Yevgeni Sivozhelez"
            ],
            [
                "Semen Poltavskiy"
            ],
            [
                "Aleksey Ostapenko"
            ]
        ]
    },
    {
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Birth_Date\nORDER BY T2.Earnings ASC\nLIMIT 1",
        "db_id": "poker_player",
        "answers": [
            [
                "August 8, 1986"
            ]
        ]
    },
    {
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Birth_Date\nORDER BY T2.Earnings ASC\nLIMIT 1",
        "db_id": "poker_player",
        "answers": [
            [
                "August 8, 1986"
            ]
        ]
    },
    {
        "question": "What is the money rank of the tallest poker player?",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T2.Money_Rank\nORDER BY T1.Height DESC\nLIMIT 1",
        "db_id": "poker_player",
        "answers": [
            [
                68.0
            ]
        ]
    },
    {
        "question": "Return the money rank of the poker player with the greatest height.",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T2.Money_Rank\nORDER BY T1.Height DESC\nLIMIT 1",
        "db_id": "poker_player",
        "answers": [
            [
                68.0
            ]
        ]
    },
    {
        "question": "What is the average earnings of poker players with height higher than 200?",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nWHERE T1.Height > 200\nRETURN avg(T2.Earnings)",
        "db_id": "poker_player",
        "answers": [
            [
                309445.0
            ]
        ]
    },
    {
        "question": "Give average earnings of poker players who are taller than 200.",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nWHERE T1.Height > 200\nRETURN avg(T2.Earnings)",
        "db_id": "poker_player",
        "answers": [
            [
                309445.0
            ]
        ]
    },
    {
        "question": "What are the names of poker players in descending order of earnings?",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Name\nORDER BY T2.Earnings DESC",
        "db_id": "poker_player",
        "answers": [
            [
                "Maksim Botin"
            ],
            [
                "Aleksey Ostapenko"
            ],
            [
                "Teodor Salparov"
            ],
            [
                "Semen Poltavskiy"
            ],
            [
                "Yevgeni Sivozhelez"
            ]
        ]
    },
    {
        "question": "Return the names of poker players sorted by their earnings descending.",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Name\nORDER BY T2.Earnings DESC",
        "db_id": "poker_player",
        "answers": [
            [
                "Maksim Botin"
            ],
            [
                "Aleksey Ostapenko"
            ],
            [
                "Teodor Salparov"
            ],
            [
                "Semen Poltavskiy"
            ],
            [
                "Yevgeni Sivozhelez"
            ]
        ]
    },
    {
        "question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "query": "MATCH (people:`poker_player.people`)\nWITH people.Nationality AS Nationality, count(people.Nationality) AS count\nRETURN Nationality,count",
        "db_id": "poker_player",
        "answers": [
            [
                "Russia",
                6
            ],
            [
                "Bulgaria",
                1
            ]
        ]
    },
    {
        "question": "How many people are there of each nationality?",
        "query": "MATCH (people:`poker_player.people`)\nWITH people.Nationality AS Nationality, count(people.Nationality) AS count\nRETURN Nationality,count",
        "db_id": "poker_player",
        "answers": [
            [
                "Russia",
                6
            ],
            [
                "Bulgaria",
                1
            ]
        ]
    },
    {
        "question": "What is the most common nationality of people?",
        "query": "MATCH (people:`poker_player.people`)\nWITH people.Nationality AS Nationality, count(people.Nationality) AS count\nRETURN Nationality\nORDER BY count DESC\nLIMIT 1",
        "db_id": "poker_player",
        "answers": [
            [
                "Russia"
            ]
        ]
    },
    {
        "question": "Give the nationality that is most common across all people.",
        "query": "MATCH (people:`poker_player.people`)\nWITH people.Nationality AS Nationality, count(people.Nationality) AS count\nRETURN Nationality\nORDER BY count DESC\nLIMIT 1",
        "db_id": "poker_player",
        "answers": [
            [
                "Russia"
            ]
        ]
    },
    {
        "question": "What are the nationalities that are shared by at least two people?",
        "query": "MATCH (people:`poker_player.people`)\nWITH count(*) AS count, people.Nationality AS Nationality\nWHERE count  >= 2\nRETURN Nationality",
        "db_id": "poker_player",
        "answers": [
            [
                "Russia"
            ]
        ]
    },
    {
        "question": "Return the nationalities for which there are two or more people.",
        "query": "MATCH (people:`poker_player.people`)\nWITH count(*) AS count, people.Nationality AS Nationality\nWHERE count  >= 2\nRETURN Nationality",
        "db_id": "poker_player",
        "answers": [
            [
                "Russia"
            ]
        ]
    },
    {
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "query": "MATCH (people:`poker_player.people`)\nRETURN people.Name,people.Birth_Date\nORDER BY people.Name ASC",
        "db_id": "poker_player",
        "answers": [
            [
                "Aleksey Ostapenko",
                "May 26, 1986"
            ],
            [
                "Maksim Botin",
                "July 14, 1983"
            ],
            [
                "Roman Bragin",
                "April 17, 1987"
            ],
            [
                "Semen Poltavskiy",
                "February 8, 1981"
            ],
            [
                "Sergey Grankin",
                "January 22, 1987"
            ],
            [
                "Teodor Salparov",
                "August 16, 1982"
            ],
            [
                "Yevgeni Sivozhelez",
                "August 8, 1986"
            ]
        ]
    },
    {
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "query": "MATCH (people:`poker_player.people`)\nRETURN people.Name,people.Birth_Date\nORDER BY people.Name ASC",
        "db_id": "poker_player",
        "answers": [
            [
                "Aleksey Ostapenko",
                "May 26, 1986"
            ],
            [
                "Maksim Botin",
                "July 14, 1983"
            ],
            [
                "Roman Bragin",
                "April 17, 1987"
            ],
            [
                "Semen Poltavskiy",
                "February 8, 1981"
            ],
            [
                "Sergey Grankin",
                "January 22, 1987"
            ],
            [
                "Teodor Salparov",
                "August 16, 1982"
            ],
            [
                "Yevgeni Sivozhelez",
                "August 8, 1986"
            ]
        ]
    },
    {
        "question": "Show names of people whose nationality is not \"Russia\".",
        "query": "MATCH (people:`poker_player.people`)\nWHERE people.Nationality <> 'Russia'\nRETURN people.Name",
        "db_id": "poker_player",
        "answers": [
            [
                "Teodor Salparov"
            ]
        ]
    },
    {
        "question": "What are the names of people who are not from Russia?",
        "query": "MATCH (people:`poker_player.people`)\nWHERE people.Nationality <> 'Russia'\nRETURN people.Name",
        "db_id": "poker_player",
        "answers": [
            [
                "Teodor Salparov"
            ]
        ]
    },
    {
        "question": "List the names of people that are not poker players.",
        "query": "MATCH (people:`poker_player.people`)\nWHERE NOT (people:`poker_player.people`)-[]-(:`poker_player.poker_player`)\nRETURN people.Name",
        "db_id": "poker_player",
        "answers": [
            [
                "Roman Bragin"
            ],
            [
                "Sergey Grankin"
            ]
        ]
    },
    {
        "question": "What are the names of people who do not play poker?",
        "query": "MATCH (people:`poker_player.people`)\nWHERE NOT (people:`poker_player.people`)-[]-(:`poker_player.poker_player`)\nRETURN people.Name",
        "db_id": "poker_player",
        "answers": [
            [
                "Roman Bragin"
            ],
            [
                "Sergey Grankin"
            ]
        ]
    },
    {
        "question": "How many distinct nationalities are there?",
        "query": "MATCH (people:`poker_player.people`)\nRETURN count(DISTINCT people.Nationality)",
        "db_id": "poker_player",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "Count the number of different nationalities.",
        "query": "MATCH (people:`poker_player.people`)\nRETURN count(DISTINCT people.Nationality)",
        "db_id": "poker_player",
        "answers": [
            [
                2
            ]
        ]
    },
    {
        "question": "How many states are there?",
        "query": "MATCH (area_code_state:`voter_1.AREA_CODE_STATE`)\nRETURN count(*)",
        "db_id": "voter_1",
        "answers": [
            [
                305
            ]
        ]
    },
    {
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "query": "MATCH (contestants:`voter_1.CONTESTANTS`)\nRETURN contestants.contestant_number,contestants.contestant_name\nORDER BY contestants.contestant_name DESC",
        "db_id": "voter_1",
        "answers": [
            [
                2,
                "Tabatha Gehling"
            ],
            [
                8,
                "Nita Coster"
            ],
            [
                11,
                "Loraine NygrenTania Mattioli"
            ],
            [
                9,
                "Kurt Walser"
            ],
            [
                3,
                "Kelly Clauss"
            ],
            [
                6,
                "Jessie Eichman"
            ],
            [
                4,
                "Jessie Alloway"
            ],
            [
                10,
                "Ericka Dieter"
            ],
            [
                1,
                "Edwina Burnam"
            ],
            [
                7,
                "Allie Rogalski"
            ],
            [
                5,
                "Alana Bregman"
            ]
        ]
    },
    {
        "question": "List the vote ids, phone numbers and states of all votes.",
        "query": "MATCH (votes:`voter_1.VOTES`)\nRETURN votes.vote_id,votes.phone_number,votes.state",
        "db_id": "voter_1",
        "answers": [
            [
                1,
                7182887233,
                "NY"
            ],
            [
                2,
                7148407040,
                "NY"
            ],
            [
                3,
                6209222712,
                "CA"
            ],
            [
                5,
                5112677315,
                "NJ\n"
            ]
        ]
    },
    {
        "question": "What are the maximum and minimum values of area codes?",
        "query": "MATCH (area_code_state:`voter_1.AREA_CODE_STATE`)\nRETURN max(area_code_state.area_code),min(area_code_state.area_code)",
        "db_id": "voter_1",
        "answers": [
            [
                989,
                201
            ]
        ]
    },
    {
        "question": "What is last date created of votes from the state 'CA'?",
        "query": "MATCH (votes:`voter_1.VOTES`)\nWHERE votes.state = 'CA'\nRETURN max(votes.created)",
        "db_id": "voter_1",
        "answers": [
            [
                "2018-03-09 19:03:39"
            ]
        ]
    },
    {
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "query": "MATCH (contestants:`voter_1.CONTESTANTS`)\nWHERE contestants.contestant_name <> 'Jessie Alloway'\nRETURN contestants.contestant_name",
        "db_id": "voter_1",
        "answers": [
            [
                "Edwina Burnam"
            ],
            [
                "Tabatha Gehling"
            ],
            [
                "Kelly Clauss"
            ],
            [
                "Alana Bregman"
            ],
            [
                "Jessie Eichman"
            ],
            [
                "Allie Rogalski"
            ],
            [
                "Nita Coster"
            ],
            [
                "Kurt Walser"
            ],
            [
                "Ericka Dieter"
            ],
            [
                "Loraine NygrenTania Mattioli"
            ]
        ]
    },
    {
        "question": "What are the distinct states and create time of all votes?",
        "query": "MATCH (votes:`voter_1.VOTES`)\nRETURN DISTINCT votes.state,votes.created",
        "db_id": "voter_1",
        "answers": [
            [
                "NY",
                "2018-03-09 19:03:21"
            ],
            [
                "NY",
                "2018-03-09 19:03:36"
            ],
            [
                "CA",
                "2018-03-09 19:03:39"
            ],
            [
                "NJ\n",
                "2018-03-09 19:03:40"
            ]
        ]
    },
    {
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "query": "MATCH (T1:`voter_1.CONTESTANTS`)-[]-(T2:`voter_1.VOTES`)\nWITH count(*) AS count, T1.contestant_number AS contestant_number, T1.contestant_name AS contestant_name\nWHERE count  >= 2\nRETURN contestant_number,contestant_name",
        "db_id": "voter_1",
        "answers": []
    },
    {
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "query": "MATCH (T1:`voter_1.CONTESTANTS`)-[]-(T2:`voter_1.VOTES`)\nWITH T1.contestant_number AS contestant_number, T1.contestant_name AS contestant_name, count(T1.contestant_number) AS count\nRETURN contestant_number,contestant_name\nORDER BY count ASC\nLIMIT 1",
        "db_id": "voter_1",
        "answers": []
    },
    {
        "question": "What are the number of votes from state 'NY' or 'CA'?",
        "query": "MATCH (votes:`voter_1.VOTES`)\nWHERE votes.state = 'NY' OR votes.state = 'CA'\nRETURN count(*)",
        "db_id": "voter_1",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "What is the area code in which the most voters voted?",
        "query": "MATCH (T1:`voter_1.AREA_CODE_STATE`)-[]-(T2:`voter_1.VOTES`)\nWITH count(T1.area_code) AS count, T1.area_code AS area_code\nRETURN area_code\nORDER BY count DESC\nLIMIT 1",
        "db_id": "voter_1",
        "answers": []
    },
    {
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "query": "MATCH (T1:`voter_1.CONTESTANTS`)-[]-(T2:`voter_1.VOTES`)\nWHERE T1.contestant_name = 'Tabatha Gehling'\nRETURN T2.created,T2.state,T2.phone_number",
        "db_id": "voter_1",
        "answers": []
    },
    {
        "question": "Return the names of the contestants whose names contain the substring 'Al' .",
        "query": "MATCH (contestants:`voter_1.CONTESTANTS`)\nWHERE contestants.contestant_name =~'.*[\"|\"]%al%\".*'\nRETURN contestants.contestant_name",
        "db_id": "voter_1",
        "answers": []
    },
    {
        "question": "What are the names of all the countries that became independent after 1950?",
        "query": "MATCH (country:`world_1.country`)\nWHERE country.IndepYear > 1950\nRETURN country.Name",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Give the names of the nations that were founded after 1950.",
        "query": "MATCH (country:`world_1.country`)\nWHERE country.IndepYear > 1950\nRETURN country.Name",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Which continent is Anguilla in?",
        "query": "MATCH (country:`world_1.country`)\nWHERE country.Name = 'Anguilla'\nRETURN country.Continent",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What is the continent name which Anguilla belongs to?",
        "query": "MATCH (country:`world_1.country`)\nWHERE country.Name = 'Anguilla'\nRETURN country.Continent",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Which region is the city Kabul located in?",
        "query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.city`)\nWHERE T2.Name = 'Kabul'\nRETURN T1.Region",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What region is Kabul in?",
        "query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.city`)\nWHERE T2.Name = 'Kabul'\nRETURN T1.Region",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Which language is the most popular in Aruba?",
        "query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWHERE T1.Name = 'Aruba'\nRETURN T2.Language\nORDER BY T2.Percentage DESC\nLIMIT 1",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What language is predominantly spoken in Aruba?",
        "query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWHERE T1.Name = 'Aruba'\nRETURN T2.Language\nORDER BY T2.Percentage DESC\nLIMIT 1",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What are the population and life expectancies in Brazil?",
        "query": "MATCH (country:`world_1.country`)\nWHERE country.Name = 'Brazil'\nRETURN country.Population,country.LifeExpectancy",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Give me Brazil\u2019s population and life expectancies.",
        "query": "MATCH (country:`world_1.country`)\nWHERE country.Name = 'Brazil'\nRETURN country.Population,country.LifeExpectancy",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What are the region and population of Angola?",
        "query": "MATCH (country:`world_1.country`)\nWHERE country.Name = 'Angola'\nRETURN country.Population,country.Region",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What region does Angola belong to and what is its population?",
        "query": "MATCH (country:`world_1.country`)\nWHERE country.Name = 'Angola'\nRETURN country.Population,country.Region",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "query": "MATCH (country:`world_1.country`)\nWHERE country.Continent = 'Asia'\nRETURN country.Name\nORDER BY country.LifeExpectancy\nLIMIT 1",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "query": "MATCH (country:`world_1.country`)\nWHERE country.Continent = 'Asia'\nRETURN country.Name\nORDER BY country.LifeExpectancy\nLIMIT 1",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What is name of the country that speaks the largest number of languages?",
        "query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWITH T1.Name AS Name, count(T1.Name) AS count\nRETURN Name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWITH T1.Name AS Name, count(T1.Name) AS count\nRETURN Name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Which continent has the most diverse languages?",
        "query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWITH T1.Continent AS Continent, count(T1.Continent) AS count\nRETURN Continent\nORDER BY count DESC\nLIMIT 1",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Which continent speaks the most languages?",
        "query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWITH T1.Continent AS Continent, count(T1.Continent) AS count\nRETURN Continent\nORDER BY count DESC\nLIMIT 1",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What are the regions that use English or Dutch?",
        "query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWHERE T2.Language = 'English' OR T2.Language = 'Dutch'\nRETURN DISTINCT T1.Region",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Which regions speak Dutch or English?",
        "query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWHERE T2.Language = 'English' OR T2.Language = 'Dutch'\nRETURN DISTINCT T1.Region",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Which language is the most popular on the Asian continent?",
        "query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWHERE T1.Continent = 'Asia'\nWITH T2.Language AS Language, count(T2.Language) AS count\nRETURN Language\nORDER BY count DESC\nLIMIT 1",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What is the language that is used by the largest number of Asian nations?",
        "query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWHERE T1.Continent = 'Asia'\nWITH T2.Language AS Language, count(T2.Language) AS count\nRETURN Language\nORDER BY count DESC\nLIMIT 1",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Which languages are spoken by only one country in republic governments?",
        "query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWHERE T1.GovernmentForm = 'Republic'\nWITH T2.Language AS Language, count(*) AS count\nWHERE count  = 1\nRETURN Language",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What languages are only used by a single country with a republic government?",
        "query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWHERE T1.GovernmentForm = 'Republic'\nWITH T2.Language AS Language, count(*) AS count\nWHERE count  = 1\nRETURN Language",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Find the city with the largest population that uses English.",
        "query": "MATCH (T1:`world_1.city`)-[]-(T2:`world_1.countrylanguage`)\nWHERE T2.Language = 'English'\nRETURN T1.Name,T1.Population\nORDER BY T1.Population DESC\nLIMIT 1",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What is the most populace city that speaks English?",
        "query": "MATCH (T1:`world_1.city`)-[]-(T2:`world_1.countrylanguage`)\nWHERE T2.Language = 'English'\nRETURN T1.Name,T1.Population\nORDER BY T1.Population DESC\nLIMIT 1",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "query": "MATCH (country:`world_1.country`)\nWHERE country.Continent = 'Asia'\nRETURN country.Name,country.Population,country.LifeExpectancy\nORDER BY country.SurfaceArea DESC\nLIMIT 1",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "query": "MATCH (country:`world_1.country`)\nWHERE country.Continent = 'Asia'\nRETURN country.Name,country.Population,country.LifeExpectancy\nORDER BY country.SurfaceArea DESC\nLIMIT 1",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'\nRETURN T2.Language",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'\nRETURN T2.Language",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What are the country codes of countries where people use languages other than English?",
        "query": "MATCH (countrylanguage:`world_1.countrylanguage`)\nWHERE countrylanguage.Language <> 'English'\nRETURN DISTINCT countrylanguage.CountryCode",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Give the country codes for countries in which people speak langauges that are not English.",
        "query": "MATCH (countrylanguage:`world_1.countrylanguage`)\nWHERE countrylanguage.Language <> 'English'\nRETURN DISTINCT countrylanguage.CountryCode",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "query": "MATCH (T3:`world_1.city`)-[]-(T1:`world_1.country`)-[]-(T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = 'Asia'\nRETURN DISTINCT T3.Name",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "query": "MATCH (country:`world_1.country`)\nRETURN country.Name,country.SurfaceArea,country.IndepYear\nORDER BY country.Population\nLIMIT 1",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "query": "MATCH (country:`world_1.country`)\nRETURN country.Name,country.SurfaceArea,country.IndepYear\nORDER BY country.Population\nLIMIT 1",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What are the population, name and leader of the country with the largest area?",
        "query": "MATCH (country:`world_1.country`)\nRETURN country.Name,country.Population,country.HeadOfState\nORDER BY country.SurfaceArea DESC\nLIMIT 1",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "query": "MATCH (country:`world_1.country`)\nRETURN country.Name,country.Population,country.HeadOfState\nORDER BY country.SurfaceArea DESC\nLIMIT 1",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWITH T1.Name AS Name, count(*) AS count\nWHERE count  > 2\nRETURN count,Name",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "query": "MATCH (T1:`world_1.country`)-[]-(T2:`world_1.countrylanguage`)\nWITH T1.Name AS Name, count(*) AS count\nWHERE count  > 2\nRETURN count,Name",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "query": "MATCH (country:`world_1.country`)\nRETURN country.Name,country.SurfaceArea\nORDER BY country.SurfaceArea DESC\nLIMIT 5",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Return the names and surface areas of the 5 largest countries.",
        "query": "MATCH (country:`world_1.country`)\nRETURN country.Name,country.SurfaceArea\nORDER BY country.SurfaceArea DESC\nLIMIT 5",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What are names of countries with the top 3 largest population?",
        "query": "MATCH (country:`world_1.country`)\nRETURN country.Name\nORDER BY country.Population DESC\nLIMIT 3",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Return the names of the 3 most populated countries.",
        "query": "MATCH (country:`world_1.country`)\nRETURN country.Name\nORDER BY country.Population DESC\nLIMIT 3",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What are the names of the nations with the 3 lowest populations?",
        "query": "MATCH (country:`world_1.country`)\nRETURN country.Name\nORDER BY country.Population ASC\nLIMIT 3",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Return the names of the 3 countries with the fewest people.",
        "query": "MATCH (country:`world_1.country`)\nRETURN country.Name\nORDER BY country.Population ASC\nLIMIT 3",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "query": "MATCH (country:`world_1.country`)\nWHERE country.Continent = 'Europe' AND country.Population = '80000'\nRETURN country.Name",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "query": "MATCH (country:`world_1.country`)\nWHERE country.Continent = 'Europe' AND country.Population = '80000'\nRETURN country.Name",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What are the cities whose population is between 160000 and 900000?",
        "query": "MATCH (city:`world_1.city`)\nWHERE 160000<=city.Population<=900000\nRETURN city.Name",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Return the names of cities that have a population between 160000 and 900000 .",
        "query": "MATCH (city:`world_1.city`)\nWHERE 160000<=city.Population<=900000\nRETURN city.Name",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Which language is spoken by the largest number of countries?",
        "query": "MATCH (countrylanguage:`world_1.countrylanguage`)\nWITH countrylanguage.Language AS Language, count(countrylanguage.Language) AS count\nRETURN Language\nORDER BY count DESC\nLIMIT 1",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Give the language that is spoken in the most countries.",
        "query": "MATCH (countrylanguage:`world_1.countrylanguage`)\nWITH countrylanguage.Language AS Language, count(countrylanguage.Language) AS count\nRETURN Language\nORDER BY count DESC\nLIMIT 1",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "query": "MATCH (countrylanguage:`world_1.countrylanguage`)\nWITH count(countrylanguage.CountryCode) AS count, countrylanguage.Language AS Language, countrylanguage.CountryCode AS CountryCode\nRETURN Language,CountryCode,count",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "query": "MATCH (countrylanguage:`world_1.countrylanguage`)\nWITH count(countrylanguage.CountryCode) AS count, countrylanguage.Language AS Language, countrylanguage.CountryCode AS CountryCode\nRETURN Language,CountryCode,count",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "query": "MATCH (countrylanguage:`world_1.countrylanguage`)\nWHERE countrylanguage.Language = 'Spanish'\nWITH count(countrylanguage.CountryCode) AS count, countrylanguage.CountryCode AS CountryCode\nRETURN CountryCode,count",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "query": "MATCH (countrylanguage:`world_1.countrylanguage`)\nWHERE countrylanguage.Language = 'Spanish'\nWITH count(countrylanguage.CountryCode) AS count, countrylanguage.CountryCode AS CountryCode\nRETURN CountryCode,count",
        "db_id": "world_1",
        "answers": []
    },
    {
        "question": "How many conductors are there?",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN count(*)",
        "db_id": "orchestra",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "question": "Count the number of conductors.",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN count(*)",
        "db_id": "orchestra",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "question": "List the names of conductors in ascending order of age.",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Age ASC",
        "db_id": "orchestra",
        "answers": [
            [
                "Antal Dor\u00e1ti"
            ],
            [
                "Igor Stravinsky"
            ],
            [
                "Colin Davis"
            ],
            [
                "Michael Tilson Thomas"
            ],
            [
                "Paul Jorgensen"
            ],
            [
                "Antal Brown"
            ],
            [
                "Charles Dutoit"
            ],
            [
                "Seiji Ozawa"
            ],
            [
                "Valeri Gergiev"
            ],
            [
                "Pierre Boulez"
            ],
            [
                "Gerard Schwarz"
            ],
            [
                "Robert Craft"
            ]
        ]
    },
    {
        "question": "What are the names of conductors, ordered by age?",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Age ASC",
        "db_id": "orchestra",
        "answers": [
            [
                "Antal Dor\u00e1ti"
            ],
            [
                "Igor Stravinsky"
            ],
            [
                "Colin Davis"
            ],
            [
                "Michael Tilson Thomas"
            ],
            [
                "Paul Jorgensen"
            ],
            [
                "Antal Brown"
            ],
            [
                "Charles Dutoit"
            ],
            [
                "Seiji Ozawa"
            ],
            [
                "Valeri Gergiev"
            ],
            [
                "Pierre Boulez"
            ],
            [
                "Gerard Schwarz"
            ],
            [
                "Robert Craft"
            ]
        ]
    },
    {
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "query": "MATCH (conductor:`orchestra.conductor`)\nWHERE conductor.Nationality <> 'USA'\nRETURN conductor.Name",
        "db_id": "orchestra",
        "answers": [
            [
                "Igor Stravinsky"
            ],
            [
                "Paul Jorgensen"
            ],
            [
                "Charles Dutoit"
            ],
            [
                "Pierre Boulez"
            ],
            [
                "Robert Craft"
            ],
            [
                "Michael Tilson Thomas"
            ]
        ]
    },
    {
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "query": "MATCH (conductor:`orchestra.conductor`)\nWHERE conductor.Nationality <> 'USA'\nRETURN conductor.Name",
        "db_id": "orchestra",
        "answers": [
            [
                "Igor Stravinsky"
            ],
            [
                "Paul Jorgensen"
            ],
            [
                "Charles Dutoit"
            ],
            [
                "Pierre Boulez"
            ],
            [
                "Robert Craft"
            ],
            [
                "Michael Tilson Thomas"
            ]
        ]
    },
    {
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nRETURN orchestra.Record_Company\nORDER BY orchestra.Year_of_Founded DESC",
        "db_id": "orchestra",
        "answers": [
            [
                "Columbia Masterworks"
            ],
            [
                "Philips"
            ],
            [
                "Philips Classics Records"
            ],
            [
                "RCA"
            ],
            [
                "EMI"
            ],
            [
                "Koch Records / Naxos Records"
            ],
            [
                "Decca Records"
            ],
            [
                "Mercury Records"
            ],
            [
                "Deutsche Grammophon"
            ],
            [
                "Kultur"
            ],
            [
                "Decca Records"
            ],
            [
                "Delos Records"
            ]
        ]
    },
    {
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nRETURN orchestra.Record_Company\nORDER BY orchestra.Year_of_Founded DESC",
        "db_id": "orchestra",
        "answers": [
            [
                "Columbia Masterworks"
            ],
            [
                "Philips"
            ],
            [
                "Philips Classics Records"
            ],
            [
                "RCA"
            ],
            [
                "EMI"
            ],
            [
                "Koch Records / Naxos Records"
            ],
            [
                "Decca Records"
            ],
            [
                "Mercury Records"
            ],
            [
                "Deutsche Grammophon"
            ],
            [
                "Kultur"
            ],
            [
                "Decca Records"
            ],
            [
                "Delos Records"
            ]
        ]
    },
    {
        "question": "What is the average attendance of shows?",
        "query": "MATCH (show:`orchestra.show`)\nRETURN avg(show.Attendance)",
        "db_id": "orchestra",
        "answers": [
            [
                1326.4
            ]
        ]
    },
    {
        "question": "Return the average attendance across all shows.",
        "query": "MATCH (show:`orchestra.show`)\nRETURN avg(show.Attendance)",
        "db_id": "orchestra",
        "answers": [
            [
                1326.4
            ]
        ]
    },
    {
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "query": "MATCH (performance:`orchestra.performance`)\nWHERE performance.Type <> 'Live final'\nRETURN max(performance.Share),min(performance.Share)",
        "db_id": "orchestra",
        "answers": [
            [
                "44.7%",
                "22.7%"
            ]
        ]
    },
    {
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "query": "MATCH (performance:`orchestra.performance`)\nWHERE performance.Type <> 'Live final'\nRETURN max(performance.Share),min(performance.Share)",
        "db_id": "orchestra",
        "answers": [
            [
                "44.7%",
                "22.7%"
            ]
        ]
    },
    {
        "question": "How many different nationalities do conductors have?",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN count(DISTINCT conductor.Nationality)",
        "db_id": "orchestra",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Count the number of different nationalities of conductors.",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN count(DISTINCT conductor.Nationality)",
        "db_id": "orchestra",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "List names of conductors in descending order of years of work.",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Year_of_Work DESC",
        "db_id": "orchestra",
        "answers": [
            [
                "Robert Craft"
            ],
            [
                "Antal Brown"
            ],
            [
                "Gerard Schwarz"
            ],
            [
                "Valeri Gergiev"
            ],
            [
                "Charles Dutoit"
            ],
            [
                "Michael Tilson Thomas"
            ],
            [
                "Igor Stravinsky"
            ],
            [
                "Paul Jorgensen"
            ],
            [
                "Pierre Boulez"
            ],
            [
                "Antal Dor\u00e1ti"
            ],
            [
                "Seiji Ozawa"
            ],
            [
                "Colin Davis"
            ]
        ]
    },
    {
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Year_of_Work DESC",
        "db_id": "orchestra",
        "answers": [
            [
                "Robert Craft"
            ],
            [
                "Antal Brown"
            ],
            [
                "Gerard Schwarz"
            ],
            [
                "Valeri Gergiev"
            ],
            [
                "Charles Dutoit"
            ],
            [
                "Michael Tilson Thomas"
            ],
            [
                "Igor Stravinsky"
            ],
            [
                "Paul Jorgensen"
            ],
            [
                "Pierre Boulez"
            ],
            [
                "Antal Dor\u00e1ti"
            ],
            [
                "Seiji Ozawa"
            ],
            [
                "Colin Davis"
            ]
        ]
    },
    {
        "question": "List the name of the conductor with the most years of work.",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Year_of_Work DESC\nLIMIT 1",
        "db_id": "orchestra",
        "answers": [
            [
                "Robert Craft"
            ]
        ]
    },
    {
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Year_of_Work DESC\nLIMIT 1",
        "db_id": "orchestra",
        "answers": [
            [
                "Robert Craft"
            ]
        ]
    },
    {
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "query": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nRETURN T1.Name,T2.Orchestra",
        "db_id": "orchestra",
        "answers": [
            [
                "Antal Dor\u00e1ti",
                "London Symphony Orchestra"
            ],
            [
                "Igor Stravinsky",
                "Columbia Symphony Orchestra"
            ],
            [
                "Colin Davis",
                "Royal Concertgebouw Orchestra"
            ],
            [
                "Paul Jorgensen",
                "Royal Danish Orchestra"
            ],
            [
                "Antal Brown",
                "Detroit Symphony Orchestra"
            ],
            [
                "Charles Dutoit",
                "Montreal Symphony Orchestra"
            ],
            [
                "Gerard Schwarz",
                "Seattle Symphony Orchestra"
            ],
            [
                "Pierre Boulez",
                "Chicago Symphony Orchestra"
            ],
            [
                "Valeri Gergiev",
                "Kirov Orchestra"
            ],
            [
                "Robert Craft",
                "Philharmonia Orchestra"
            ],
            [
                "Seiji Ozawa",
                "Orchestre de Paris"
            ],
            [
                "Michael Tilson Thomas",
                "San Francisco Symphony Orchestra"
            ]
        ]
    },
    {
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "query": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nRETURN T1.Name,T2.Orchestra",
        "db_id": "orchestra",
        "answers": [
            [
                "Antal Dor\u00e1ti",
                "London Symphony Orchestra"
            ],
            [
                "Igor Stravinsky",
                "Columbia Symphony Orchestra"
            ],
            [
                "Colin Davis",
                "Royal Concertgebouw Orchestra"
            ],
            [
                "Paul Jorgensen",
                "Royal Danish Orchestra"
            ],
            [
                "Antal Brown",
                "Detroit Symphony Orchestra"
            ],
            [
                "Charles Dutoit",
                "Montreal Symphony Orchestra"
            ],
            [
                "Gerard Schwarz",
                "Seattle Symphony Orchestra"
            ],
            [
                "Pierre Boulez",
                "Chicago Symphony Orchestra"
            ],
            [
                "Valeri Gergiev",
                "Kirov Orchestra"
            ],
            [
                "Robert Craft",
                "Philharmonia Orchestra"
            ],
            [
                "Seiji Ozawa",
                "Orchestre de Paris"
            ],
            [
                "Michael Tilson Thomas",
                "San Francisco Symphony Orchestra"
            ]
        ]
    },
    {
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "query": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nWITH T1.Name AS Name, count(*) AS count\nWHERE count  > 1\nRETURN Name",
        "db_id": "orchestra",
        "answers": []
    },
    {
        "question": "What are the names of conductors who have conducted at more than one orchestra?",
        "query": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nWITH T1.Name AS Name, count(*) AS count\nWHERE count  > 1\nRETURN Name",
        "db_id": "orchestra",
        "answers": []
    },
    {
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "query": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nWHERE T2.Year_of_Founded > 2008\nRETURN T1.Name",
        "db_id": "orchestra",
        "answers": [
            [
                "Igor Stravinsky"
            ]
        ]
    },
    {
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "query": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nWHERE T2.Year_of_Founded > 2008\nRETURN T1.Name",
        "db_id": "orchestra",
        "answers": [
            [
                "Igor Stravinsky"
            ]
        ]
    },
    {
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWITH orchestra.Record_Company AS Record_Company, count(orchestra.Record_Company) AS count\nRETURN Record_Company,count",
        "db_id": "orchestra",
        "answers": [
            [
                "Mercury Records",
                1
            ],
            [
                "Columbia Masterworks",
                1
            ],
            [
                "Philips",
                1
            ],
            [
                "Kultur",
                1
            ],
            [
                "Decca Records",
                2
            ],
            [
                "Delos Records",
                1
            ],
            [
                "Deutsche Grammophon",
                1
            ],
            [
                "Philips Classics Records",
                1
            ],
            [
                "Koch Records / Naxos Records",
                1
            ],
            [
                "EMI",
                1
            ],
            [
                "RCA",
                1
            ]
        ]
    },
    {
        "question": "How many orchestras does each record company manage?",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWITH orchestra.Record_Company AS Record_Company, count(orchestra.Record_Company) AS count\nRETURN Record_Company,count",
        "db_id": "orchestra",
        "answers": [
            [
                "Mercury Records",
                1
            ],
            [
                "Columbia Masterworks",
                1
            ],
            [
                "Philips",
                1
            ],
            [
                "Kultur",
                1
            ],
            [
                "Decca Records",
                2
            ],
            [
                "Delos Records",
                1
            ],
            [
                "Deutsche Grammophon",
                1
            ],
            [
                "Philips Classics Records",
                1
            ],
            [
                "Koch Records / Naxos Records",
                1
            ],
            [
                "EMI",
                1
            ],
            [
                "RCA",
                1
            ]
        ]
    },
    {
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWITH count(orchestra.Major_Record_Format) AS count, orchestra.Major_Record_Format AS Major_Record_Format\nRETURN Major_Record_Format\nORDER BY count ASC",
        "db_id": "orchestra",
        "answers": [
            [
                "CD / LP"
            ],
            [
                "DVD"
            ],
            [
                "CD"
            ]
        ]
    },
    {
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWITH count(orchestra.Major_Record_Format) AS count, orchestra.Major_Record_Format AS Major_Record_Format\nRETURN Major_Record_Format\nORDER BY count ASC",
        "db_id": "orchestra",
        "answers": [
            [
                "CD / LP"
            ],
            [
                "DVD"
            ],
            [
                "CD"
            ]
        ]
    },
    {
        "question": "List the record company shared by the most number of orchestras.",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWITH orchestra.Record_Company AS Record_Company, count(orchestra.Record_Company) AS count\nRETURN Record_Company\nORDER BY count DESC\nLIMIT 1",
        "db_id": "orchestra",
        "answers": [
            [
                "Decca Records"
            ]
        ]
    },
    {
        "question": "What is the record company used by the greatest number of orchestras?",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWITH orchestra.Record_Company AS Record_Company, count(orchestra.Record_Company) AS count\nRETURN Record_Company\nORDER BY count DESC\nLIMIT 1",
        "db_id": "orchestra",
        "answers": [
            [
                "Decca Records"
            ]
        ]
    },
    {
        "question": "List the names of orchestras that have no performance.",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWHERE NOT (orchestra:`orchestra.orchestra`)-[]-(:`orchestra.performance`)\nRETURN orchestra.Orchestra",
        "db_id": "orchestra",
        "answers": [
            [
                "San Francisco Symphony Orchestra"
            ]
        ]
    },
    {
        "question": "What are the orchestras that do not have any performances?",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWHERE NOT (orchestra:`orchestra.orchestra`)-[]-(:`orchestra.performance`)\nRETURN orchestra.Orchestra",
        "db_id": "orchestra",
        "answers": [
            [
                "San Francisco Symphony Orchestra"
            ]
        ]
    },
    {
        "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWHERE orchestra.Major_Record_Format = 'CD' OR orchestra.Major_Record_Format = 'DVD'\nRETURN count(*)",
        "db_id": "orchestra",
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWHERE orchestra.Major_Record_Format = 'CD' OR orchestra.Major_Record_Format = 'DVD'\nRETURN count(*)",
        "db_id": "orchestra",
        "answers": [
            [
                11
            ]
        ]
    },
    {
        "question": "How many high schoolers are there?",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN count(*)",
        "db_id": "network_1",
        "answers": [
            [
                16
            ]
        ]
    },
    {
        "question": "Count the number of high schoolers.",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN count(*)",
        "db_id": "network_1",
        "answers": [
            [
                16
            ]
        ]
    },
    {
        "question": "Show the names and grades of each high schooler.",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN highschooler.name,highschooler.grade",
        "db_id": "network_1",
        "answers": [
            [
                "Jordan",
                9
            ],
            [
                "Gabriel",
                9
            ],
            [
                "Tiffany",
                9
            ],
            [
                "Cassandra",
                9
            ],
            [
                "Haley",
                10
            ],
            [
                "Andrew",
                10
            ],
            [
                "Kris",
                10
            ],
            [
                "Brittany",
                10
            ],
            [
                "Alexis",
                11
            ],
            [
                "Austin",
                11
            ],
            [
                "Gabriel",
                11
            ],
            [
                "Jessica",
                11
            ],
            [
                "Jordan",
                12
            ],
            [
                "John",
                12
            ],
            [
                "Kyle",
                12
            ],
            [
                "Logan",
                12
            ]
        ]
    },
    {
        "question": "What are the names and grades for each high schooler?",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN highschooler.name,highschooler.grade",
        "db_id": "network_1",
        "answers": [
            [
                "Jordan",
                9
            ],
            [
                "Gabriel",
                9
            ],
            [
                "Tiffany",
                9
            ],
            [
                "Cassandra",
                9
            ],
            [
                "Haley",
                10
            ],
            [
                "Andrew",
                10
            ],
            [
                "Kris",
                10
            ],
            [
                "Brittany",
                10
            ],
            [
                "Alexis",
                11
            ],
            [
                "Austin",
                11
            ],
            [
                "Gabriel",
                11
            ],
            [
                "Jessica",
                11
            ],
            [
                "Jordan",
                12
            ],
            [
                "John",
                12
            ],
            [
                "Kyle",
                12
            ],
            [
                "Logan",
                12
            ]
        ]
    },
    {
        "question": "Show all the grades of the high schoolers.",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN highschooler.grade",
        "db_id": "network_1",
        "answers": [
            [
                9
            ],
            [
                9
            ],
            [
                9
            ],
            [
                9
            ],
            [
                10
            ],
            [
                10
            ],
            [
                10
            ],
            [
                10
            ],
            [
                11
            ],
            [
                11
            ],
            [
                11
            ],
            [
                11
            ],
            [
                12
            ],
            [
                12
            ],
            [
                12
            ],
            [
                12
            ]
        ]
    },
    {
        "question": "What is the grade of each high schooler?",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN highschooler.grade",
        "db_id": "network_1",
        "answers": [
            [
                9
            ],
            [
                9
            ],
            [
                9
            ],
            [
                9
            ],
            [
                10
            ],
            [
                10
            ],
            [
                10
            ],
            [
                10
            ],
            [
                11
            ],
            [
                11
            ],
            [
                11
            ],
            [
                11
            ],
            [
                12
            ],
            [
                12
            ],
            [
                12
            ],
            [
                12
            ]
        ]
    },
    {
        "question": "What grade is Kyle in?",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.name = 'Kyle'\nRETURN highschooler.grade",
        "db_id": "network_1",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "question": "Return the grade for the high schooler named Kyle.",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.name = 'Kyle'\nRETURN highschooler.grade",
        "db_id": "network_1",
        "answers": [
            [
                12
            ]
        ]
    },
    {
        "question": "Show the names of all high schoolers in grade 10.",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.grade = 10\nRETURN highschooler.name",
        "db_id": "network_1",
        "answers": [
            [
                "Haley"
            ],
            [
                "Andrew"
            ],
            [
                "Kris"
            ],
            [
                "Brittany"
            ]
        ]
    },
    {
        "question": "What are the names of all high schoolers in grade 10?",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.grade = 10\nRETURN highschooler.name",
        "db_id": "network_1",
        "answers": [
            [
                "Haley"
            ],
            [
                "Andrew"
            ],
            [
                "Kris"
            ],
            [
                "Brittany"
            ]
        ]
    },
    {
        "question": "Show the ID of the high schooler named Kyle.",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.name = 'Kyle'\nRETURN highschooler.ID",
        "db_id": "network_1",
        "answers": [
            [
                1934
            ]
        ]
    },
    {
        "question": "What is Kyle's id?",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.name = 'Kyle'\nRETURN highschooler.ID",
        "db_id": "network_1",
        "answers": [
            [
                1934
            ]
        ]
    },
    {
        "question": "How many high schoolers are there in grade 9 or 10?",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.grade = 9 OR highschooler.grade = 10\nRETURN count(*)",
        "db_id": "network_1",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.grade = 9 OR highschooler.grade = 10\nRETURN count(*)",
        "db_id": "network_1",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "Show the number of high schoolers for each grade.",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWITH highschooler.grade AS grade, count(highschooler.grade) AS count\nRETURN grade,count",
        "db_id": "network_1",
        "answers": [
            [
                9,
                4
            ],
            [
                10,
                4
            ],
            [
                11,
                4
            ],
            [
                12,
                4
            ]
        ]
    },
    {
        "question": "How many high schoolers are in each grade?",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWITH highschooler.grade AS grade, count(highschooler.grade) AS count\nRETURN grade,count",
        "db_id": "network_1",
        "answers": [
            [
                9,
                4
            ],
            [
                10,
                4
            ],
            [
                11,
                4
            ],
            [
                12,
                4
            ]
        ]
    },
    {
        "question": "Show me all grades that have at least 4 students.",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWITH highschooler.grade AS grade, count(*) AS count\nWHERE count  >= 4\nRETURN grade",
        "db_id": "network_1",
        "answers": [
            [
                9
            ],
            [
                10
            ],
            [
                11
            ],
            [
                12
            ]
        ]
    },
    {
        "question": "Which grades have 4 or more high schoolers?",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWITH highschooler.grade AS grade, count(*) AS count\nWHERE count  >= 4\nRETURN grade",
        "db_id": "network_1",
        "answers": [
            [
                9
            ],
            [
                10
            ],
            [
                11
            ],
            [
                12
            ]
        ]
    },
    {
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "query": "MATCH ()-[friend:`network_1.Friend`]-()\nWITH friend.student_id AS student_id, count(friend.student_id) AS count\nRETURN student_id,count",
        "db_id": "network_1",
        "answers": []
    },
    {
        "question": "How many friends does each student have?",
        "query": "MATCH ()-[friend:`network_1.Friend`]-()\nWITH friend.student_id AS student_id, count(friend.student_id) AS count\nRETURN student_id,count",
        "db_id": "network_1",
        "answers": []
    },
    {
        "question": "Show the names of high school students and their corresponding number of friends.",
        "query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(T1.student_id) AS count\nRETURN name,count",
        "db_id": "network_1",
        "answers": []
    },
    {
        "question": "What are the names of the high schoolers and how many friends does each have?",
        "query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(T1.student_id) AS count\nRETURN name,count",
        "db_id": "network_1",
        "answers": []
    },
    {
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(T1.student_id) AS count\nRETURN name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "network_1",
        "answers": []
    },
    {
        "question": "Return the name of the high school student with the most friends.",
        "query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(T1.student_id) AS count\nRETURN name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "network_1",
        "answers": []
    },
    {
        "question": "Show the names of high schoolers who have at least 3 friends.",
        "query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWITH count(*) AS count, T2.name AS name\nWHERE count  >= 3\nRETURN name",
        "db_id": "network_1",
        "answers": []
    },
    {
        "question": "What are the names of high schoolers who have 3 or more friends?",
        "query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWITH count(*) AS count, T2.name AS name\nWHERE count  >= 3\nRETURN name",
        "db_id": "network_1",
        "answers": []
    },
    {
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)-[]-(T3:`network_1.Highschooler`)\nWHERE T2.name = 'Kyle'\nRETURN T3.name",
        "db_id": "network_1",
        "answers": []
    },
    {
        "question": "Return the names of friends of the high school student Kyle.",
        "query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)-[]-(T3:`network_1.Highschooler`)\nWHERE T2.name = 'Kyle'\nRETURN T3.name",
        "db_id": "network_1",
        "answers": []
    },
    {
        "question": "Count the number of likes for each student id.",
        "query": "MATCH ()-[likes:`network_1.Likes`]-()\nWITH likes.student_id AS student_id, count(likes.student_id) AS count\nRETURN student_id,count",
        "db_id": "network_1",
        "answers": []
    },
    {
        "question": "How many likes correspond to each student id?",
        "query": "MATCH ()-[likes:`network_1.Likes`]-()\nWITH likes.student_id AS student_id, count(likes.student_id) AS count\nRETURN student_id,count",
        "db_id": "network_1",
        "answers": []
    },
    {
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(T1.student_id) AS count\nRETURN name,count",
        "db_id": "network_1",
        "answers": []
    },
    {
        "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(T1.student_id) AS count\nRETURN name,count",
        "db_id": "network_1",
        "answers": []
    },
    {
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(T1.student_id) AS count\nRETURN name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "network_1",
        "answers": []
    },
    {
        "question": "Give the name of the student with the most likes.",
        "query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWITH T2.name AS name, count(T1.student_id) AS count\nRETURN name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "network_1",
        "answers": []
    },
    {
        "question": "Show the names of students who have at least 2 likes.",
        "query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWITH count(*) AS count, T2.name AS name\nWHERE count  >= 2\nRETURN name",
        "db_id": "network_1",
        "answers": []
    },
    {
        "question": "What are the names of students who have 2 or more likes?",
        "query": "MATCH ()-[T1:`network_1.Likes`]-(T2:`network_1.Highschooler`)\nWITH count(*) AS count, T2.name AS name\nWHERE count  >= 2\nRETURN name",
        "db_id": "network_1",
        "answers": []
    },
    {
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWHERE T2.grade > 5\nWITH count(*) AS count, T2.name AS name\nWHERE count  >= 2\nRETURN name",
        "db_id": "network_1",
        "answers": []
    },
    {
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "query": "MATCH ()-[T1:`network_1.Friend`]-(T2:`network_1.Highschooler`)\nWHERE T2.grade > 5\nWITH count(*) AS count, T2.name AS name\nWHERE count  >= 2\nRETURN name",
        "db_id": "network_1",
        "answers": []
    },
    {
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "query": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Owners`)\nWITH T2.first_name AS first_name, T2.last_name AS last_name, count(T1.owner_id) AS count, T1.owner_id AS owner_id\nRETURN owner_id,first_name,last_name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "dog_kennels",
        "answers": [
            [
                14,
                "Rachelle",
                "Funk"
            ]
        ]
    },
    {
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "query": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Owners`)\nWITH T2.first_name AS first_name, T2.last_name AS last_name, count(T1.owner_id) AS count, T1.owner_id AS owner_id\nRETURN owner_id,first_name,last_name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "dog_kennels",
        "answers": [
            [
                14,
                "Rachelle",
                "Funk"
            ]
        ]
    },
    {
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "query": "MATCH (T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`)\nWITH count(*) AS count, T1.first_name AS first_name, T1.professional_id AS professional_id, T1.role_code AS role_code\nWHERE count  >= 2\nRETURN professional_id,role_code,first_name",
        "db_id": "dog_kennels",
        "answers": [
            [
                4,
                "Veterenarian",
                "Vernice"
            ],
            [
                6,
                "Veterenarian",
                "Ruben"
            ],
            [
                8,
                "Employee",
                "Karley"
            ],
            [
                9,
                "Veterenarian",
                "Monte"
            ],
            [
                10,
                "Employee",
                "Domenica"
            ],
            [
                14,
                "Employee",
                "Sigurd"
            ]
        ]
    },
    {
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "query": "MATCH (T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`)\nWITH count(*) AS count, T1.first_name AS first_name, T1.professional_id AS professional_id, T1.role_code AS role_code\nWHERE count  >= 2\nRETURN professional_id,role_code,first_name",
        "db_id": "dog_kennels",
        "answers": [
            [
                4,
                "Veterenarian",
                "Vernice"
            ],
            [
                6,
                "Veterenarian",
                "Ruben"
            ],
            [
                8,
                "Employee",
                "Karley"
            ],
            [
                9,
                "Veterenarian",
                "Monte"
            ],
            [
                10,
                "Employee",
                "Domenica"
            ],
            [
                14,
                "Employee",
                "Sigurd"
            ]
        ]
    },
    {
        "question": "What is the name of the breed with the most dogs?",
        "query": "MATCH (T1:`dog_kennels.Breeds`)-[]-(T2:`dog_kennels.Dogs`)\nWITH T1.breed_name AS breed_name, count(T1.breed_name) AS count\nRETURN breed_name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "dog_kennels",
        "answers": [
            [
                "Bulldog"
            ]
        ]
    },
    {
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "query": "MATCH (T1:`dog_kennels.Breeds`)-[]-(T2:`dog_kennels.Dogs`)\nWITH T1.breed_name AS breed_name, count(T1.breed_name) AS count\nRETURN breed_name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "dog_kennels",
        "answers": [
            [
                "Bulldog"
            ]
        ]
    },
    {
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "query": "MATCH (T3:`dog_kennels.Treatments`)-[]-(T2:`dog_kennels.Dogs`)-[]-(T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`)\nWITH count(T1.owner_id) AS count, T1.last_name AS last_name, T1.owner_id AS owner_id\nRETURN owner_id,last_name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "dog_kennels",
        "answers": []
    },
    {
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "query": "MATCH (T3:`dog_kennels.Treatments`)-[]-(T2:`dog_kennels.Dogs`)-[]-(T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`)\nWITH count(T1.owner_id) AS count, T1.last_name AS last_name, T1.owner_id AS owner_id\nRETURN owner_id,last_name\nORDER BY count DESC\nLIMIT 1",
        "db_id": "dog_kennels",
        "answers": []
    },
    {
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "query": "MATCH (T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`)\nWITH count(*) AS count, T1.cell_number AS cell_number, T1.professional_id AS professional_id\nWHERE count  >= 2\nRETURN professional_id,cell_number",
        "db_id": "dog_kennels",
        "answers": [
            [
                4,
                "00230569697"
            ],
            [
                6,
                "139-321-7313"
            ],
            [
                8,
                "328.842.3792"
            ],
            [
                9,
                "962-983-8109x3509"
            ],
            [
                10,
                "461-801-2600"
            ],
            [
                14,
                "1-185-137-1945x409"
            ]
        ]
    },
    {
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "query": "MATCH (T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`)\nWITH count(*) AS count, T1.cell_number AS cell_number, T1.professional_id AS professional_id\nWHERE count  >= 2\nRETURN professional_id,cell_number",
        "db_id": "dog_kennels",
        "answers": [
            [
                4,
                "00230569697"
            ],
            [
                6,
                "139-321-7313"
            ],
            [
                8,
                "328.842.3792"
            ],
            [
                9,
                "962-983-8109x3509"
            ],
            [
                10,
                "461-801-2600"
            ],
            [
                14,
                "1-185-137-1945x409"
            ]
        ]
    },
    {
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "query": "MATCH (T1:`dog_kennels.Treatments`)-[]-(T2:`dog_kennels.Professionals`)\nRETURN T1.date_of_treatment,T2.first_name",
        "db_id": "dog_kennels",
        "answers": [
            [
                "2018-03-11 04:23:15",
                "Vernice"
            ],
            [
                "2018-03-08 05:26:23",
                "Vernice"
            ],
            [
                "2018-03-13 12:22:58",
                "Danny"
            ],
            [
                "2018-03-15 19:10:02",
                "Ruben"
            ],
            [
                "2018-03-24 22:25:58",
                "Ruben"
            ],
            [
                "2018-02-28 17:09:43",
                "Velva"
            ],
            [
                "2018-03-01 04:14:46",
                "Karley"
            ],
            [
                "2018-02-26 09:08:53",
                "Karley"
            ],
            [
                "2018-03-04 20:33:43",
                "Monte"
            ],
            [
                "2018-03-16 10:27:36",
                "Monte"
            ],
            [
                "2018-03-19 04:39:54",
                "Monte"
            ],
            [
                "2018-03-14 19:10:40",
                "Domenica"
            ],
            [
                "2018-03-15 20:25:34",
                "Domenica"
            ],
            [
                "2018-03-23 13:52:10",
                "Sigurd"
            ],
            [
                "2018-03-10 11:45:58",
                "Sigurd"
            ]
        ]
    },
    {
        "question": "What are the date and the operating professional's first name of each treatment?",
        "query": "MATCH (T1:`dog_kennels.Treatments`)-[]-(T2:`dog_kennels.Professionals`)\nRETURN T1.date_of_treatment,T2.first_name",
        "db_id": "dog_kennels",
        "answers": [
            [
                "2018-03-11 04:23:15",
                "Vernice"
            ],
            [
                "2018-03-08 05:26:23",
                "Vernice"
            ],
            [
                "2018-03-13 12:22:58",
                "Danny"
            ],
            [
                "2018-03-15 19:10:02",
                "Ruben"
            ],
            [
                "2018-03-24 22:25:58",
                "Ruben"
            ],
            [
                "2018-02-28 17:09:43",
                "Velva"
            ],
            [
                "2018-03-01 04:14:46",
                "Karley"
            ],
            [
                "2018-02-26 09:08:53",
                "Karley"
            ],
            [
                "2018-03-04 20:33:43",
                "Monte"
            ],
            [
                "2018-03-16 10:27:36",
                "Monte"
            ],
            [
                "2018-03-19 04:39:54",
                "Monte"
            ],
            [
                "2018-03-14 19:10:40",
                "Domenica"
            ],
            [
                "2018-03-15 20:25:34",
                "Domenica"
            ],
            [
                "2018-03-23 13:52:10",
                "Sigurd"
            ],
            [
                "2018-03-10 11:45:58",
                "Sigurd"
            ]
        ]
    },
    {
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "query": "MATCH (T1:`dog_kennels.Treatments`)-[]-(T2:`dog_kennels.Treatment_Types`)\nRETURN T1.cost_of_treatment,T2.treatment_type_description",
        "db_id": "dog_kennels",
        "answers": [
            [
                429,
                "Physical examination"
            ],
            [
                852,
                "Physical examination"
            ],
            [
                428,
                "Physical examination"
            ],
            [
                313,
                "Physical examination"
            ],
            [
                407,
                "Physical examination"
            ],
            [
                266,
                "Vaccination"
            ],
            [
                668,
                "Vaccination"
            ],
            [
                945,
                "Vaccination"
            ],
            [
                147,
                "Vaccination"
            ],
            [
                514,
                "Vaccination"
            ],
            [
                656,
                "Take for a Walk"
            ],
            [
                349,
                "Take for a Walk"
            ],
            [
                139,
                "Take for a Walk"
            ],
            [
                567,
                "Take for a Walk"
            ],
            [
                681,
                "Take for a Walk"
            ]
        ]
    },
    {
        "question": "What are the cost and treatment type description of each treatment?",
        "query": "MATCH (T1:`dog_kennels.Treatments`)-[]-(T2:`dog_kennels.Treatment_Types`)\nRETURN T1.cost_of_treatment,T2.treatment_type_description",
        "db_id": "dog_kennels",
        "answers": [
            [
                429,
                "Physical examination"
            ],
            [
                852,
                "Physical examination"
            ],
            [
                428,
                "Physical examination"
            ],
            [
                313,
                "Physical examination"
            ],
            [
                407,
                "Physical examination"
            ],
            [
                266,
                "Vaccination"
            ],
            [
                668,
                "Vaccination"
            ],
            [
                945,
                "Vaccination"
            ],
            [
                147,
                "Vaccination"
            ],
            [
                514,
                "Vaccination"
            ],
            [
                656,
                "Take for a Walk"
            ],
            [
                349,
                "Take for a Walk"
            ],
            [
                139,
                "Take for a Walk"
            ],
            [
                567,
                "Take for a Walk"
            ],
            [
                681,
                "Take for a Walk"
            ]
        ]
    },
    {
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "query": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`)\nRETURN T1.first_name,T1.last_name,T2.size_code",
        "db_id": "dog_kennels",
        "answers": [
            [
                "Nora",
                "Haley",
                "MED"
            ],
            [
                "Melisa",
                "DuBuque",
                "MED"
            ],
            [
                "Jaclyn",
                "Stoltenberg",
                "LGE"
            ],
            [
                "Jaclyn",
                "Stoltenberg",
                "MED"
            ],
            [
                "Johann",
                "Fisher",
                "MED"
            ],
            [
                "Kade",
                "Rippin",
                "MED"
            ],
            [
                "Emelie",
                "Mertz",
                "MED"
            ],
            [
                "Rolando",
                "Prohaska",
                "SML"
            ],
            [
                "Lorenz",
                "Nicolas",
                "MED"
            ],
            [
                "Gay",
                "Feil",
                "LGE"
            ],
            [
                "Orlando",
                "Price",
                "MED"
            ],
            [
                "Cindy",
                "Schmitt",
                "LGE"
            ],
            [
                "Rachelle",
                "Funk",
                "MED"
            ],
            [
                "Rachelle",
                "Funk",
                "LGE"
            ],
            [
                "Rachelle",
                "Funk",
                "SML"
            ]
        ]
    },
    {
        "question": "What are each owner's first name, last name, and the size of their dog?",
        "query": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`)\nRETURN T1.first_name,T1.last_name,T2.size_code",
        "db_id": "dog_kennels",
        "answers": [
            [
                "Nora",
                "Haley",
                "MED"
            ],
            [
                "Melisa",
                "DuBuque",
                "MED"
            ],
            [
                "Jaclyn",
                "Stoltenberg",
                "LGE"
            ],
            [
                "Jaclyn",
                "Stoltenberg",
                "MED"
            ],
            [
                "Johann",
                "Fisher",
                "MED"
            ],
            [
                "Kade",
                "Rippin",
                "MED"
            ],
            [
                "Emelie",
                "Mertz",
                "MED"
            ],
            [
                "Rolando",
                "Prohaska",
                "SML"
            ],
            [
                "Lorenz",
                "Nicolas",
                "MED"
            ],
            [
                "Gay",
                "Feil",
                "LGE"
            ],
            [
                "Orlando",
                "Price",
                "MED"
            ],
            [
                "Cindy",
                "Schmitt",
                "LGE"
            ],
            [
                "Rachelle",
                "Funk",
                "MED"
            ],
            [
                "Rachelle",
                "Funk",
                "LGE"
            ],
            [
                "Rachelle",
                "Funk",
                "SML"
            ]
        ]
    },
    {
        "question": "List pairs of the owner's first name and the dogs's name.",
        "query": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`)\nRETURN T1.first_name,T2.name",
        "db_id": "dog_kennels",
        "answers": [
            [
                "Nora",
                "Mavis"
            ],
            [
                "Melisa",
                "Bessie"
            ],
            [
                "Jaclyn",
                "Kacey"
            ],
            [
                "Jaclyn",
                "Narciso"
            ],
            [
                "Johann",
                "Merritt"
            ],
            [
                "Kade",
                "Troy"
            ],
            [
                "Emelie",
                "Jeffrey"
            ],
            [
                "Rolando",
                "Jesus"
            ],
            [
                "Lorenz",
                "Evangeline"
            ],
            [
                "Gay",
                "Hipolito"
            ],
            [
                "Orlando",
                "Holden"
            ],
            [
                "Cindy",
                "Betty"
            ],
            [
                "Rachelle",
                "Lyric"
            ],
            [
                "Rachelle",
                "Houston"
            ],
            [
                "Rachelle",
                "George"
            ]
        ]
    },
    {
        "question": "What are each owner's first name and their dogs's name?",
        "query": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`)\nRETURN T1.first_name,T2.name",
        "db_id": "dog_kennels",
        "answers": [
            [
                "Nora",
                "Mavis"
            ],
            [
                "Melisa",
                "Bessie"
            ],
            [
                "Jaclyn",
                "Kacey"
            ],
            [
                "Jaclyn",
                "Narciso"
            ],
            [
                "Johann",
                "Merritt"
            ],
            [
                "Kade",
                "Troy"
            ],
            [
                "Emelie",
                "Jeffrey"
            ],
            [
                "Rolando",
                "Jesus"
            ],
            [
                "Lorenz",
                "Evangeline"
            ],
            [
                "Gay",
                "Hipolito"
            ],
            [
                "Orlando",
                "Holden"
            ],
            [
                "Cindy",
                "Betty"
            ],
            [
                "Rachelle",
                "Lyric"
            ],
            [
                "Rachelle",
                "Houston"
            ],
            [
                "Rachelle",
                "George"
            ]
        ]
    },
    {
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "query": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`)\nWHERE T1.state = 'Virginia'\nRETURN T1.first_name,T2.name",
        "db_id": "dog_kennels",
        "answers": [
            [
                "Melisa",
                "Bessie"
            ]
        ]
    },
    {
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "query": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`)\nWHERE T1.state = 'Virginia'\nRETURN T1.first_name,T2.name",
        "db_id": "dog_kennels",
        "answers": [
            [
                "Melisa",
                "Bessie"
            ]
        ]
    },
    {
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "query": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Treatments`)\nRETURN DISTINCT T1.date_arrived,T1.date_departed",
        "db_id": "dog_kennels",
        "answers": [
            [
                "2017-06-18 19:45:38",
                "2018-03-24 23:48:59"
            ],
            [
                "2017-04-20 00:58:55",
                "2018-03-24 19:12:22"
            ],
            [
                "2017-12-22 05:02:02",
                "2018-03-25 02:11:32"
            ],
            [
                "2017-10-24 04:45:13",
                "2018-03-25 14:15:41"
            ],
            [
                "2017-12-29 06:08:26",
                "2018-03-25 04:42:14"
            ],
            [
                "2017-12-29 23:24:13",
                "2018-03-24 19:36:59"
            ],
            [
                "2018-01-02 03:15:29",
                "2018-03-25 05:07:47"
            ],
            [
                "2017-05-06 08:03:52",
                "2018-03-25 06:29:10"
            ],
            [
                "2017-09-08 20:10:13",
                "2018-03-25 06:58:44"
            ]
        ]
    },
    {
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "query": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Treatments`)\nRETURN DISTINCT T1.date_arrived,T1.date_departed",
        "db_id": "dog_kennels",
        "answers": [
            [
                "2017-06-18 19:45:38",
                "2018-03-24 23:48:59"
            ],
            [
                "2017-04-20 00:58:55",
                "2018-03-24 19:12:22"
            ],
            [
                "2017-12-22 05:02:02",
                "2018-03-25 02:11:32"
            ],
            [
                "2017-10-24 04:45:13",
                "2018-03-25 14:15:41"
            ],
            [
                "2017-12-29 06:08:26",
                "2018-03-25 04:42:14"
            ],
            [
                "2017-12-29 23:24:13",
                "2018-03-24 19:36:59"
            ],
            [
                "2018-01-02 03:15:29",
                "2018-03-25 05:07:47"
            ],
            [
                "2017-05-06 08:03:52",
                "2018-03-25 06:29:10"
            ],
            [
                "2017-09-08 20:10:13",
                "2018-03-25 06:58:44"
            ]
        ]
    },
    {
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "query": "MATCH (professionals:`dog_kennels.Professionals`)\nWHERE professionals.state = 'Hawaii' OR professionals.state = 'Wisconsin'\nRETURN professionals.email_address",
        "db_id": "dog_kennels",
        "answers": [
            [
                "uboehm@example.org"
            ],
            [
                "mekhi.little@example.org"
            ]
        ]
    },
    {
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "query": "MATCH (professionals:`dog_kennels.Professionals`)\nWHERE professionals.state = 'Hawaii' OR professionals.state = 'Wisconsin'\nRETURN professionals.email_address",
        "db_id": "dog_kennels",
        "answers": [
            [
                "uboehm@example.org"
            ],
            [
                "mekhi.little@example.org"
            ]
        ]
    },
    {
        "question": "What are the arriving date and the departing date of all the dogs?",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN dogs.date_arrived,dogs.date_departed",
        "db_id": "dog_kennels",
        "answers": [
            [
                "2017-09-08 20:10:13",
                "2018-03-25 06:58:44"
            ],
            [
                "2017-12-22 05:02:02",
                "2018-03-25 02:11:32"
            ],
            [
                "2017-06-25 10:14:05",
                "2018-03-25 10:25:46"
            ],
            [
                "2017-04-20 00:58:55",
                "2018-03-24 19:12:22"
            ],
            [
                "2017-10-25 00:55:34",
                "2018-03-25 04:50:22"
            ],
            [
                "2017-04-15 09:25:31",
                "2018-03-25 13:07:04"
            ],
            [
                "2017-05-06 08:03:52",
                "2018-03-25 06:29:10"
            ],
            [
                "2017-10-16 20:06:21",
                "2018-03-25 02:47:40"
            ],
            [
                "2018-01-17 11:44:16",
                "2018-03-25 06:46:07"
            ],
            [
                "2017-12-29 06:08:26",
                "2018-03-25 04:42:14"
            ],
            [
                "2017-07-25 15:19:07",
                "2018-03-25 15:05:16"
            ],
            [
                "2017-10-24 04:45:13",
                "2018-03-25 14:15:41"
            ],
            [
                "2018-01-02 03:15:29",
                "2018-03-25 05:07:47"
            ],
            [
                "2017-06-18 19:45:38",
                "2018-03-24 23:48:59"
            ],
            [
                "2017-12-29 23:24:13",
                "2018-03-24 19:36:59"
            ]
        ]
    },
    {
        "question": "List the arrival date and the departure date for all the dogs.",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN dogs.date_arrived,dogs.date_departed",
        "db_id": "dog_kennels",
        "answers": [
            [
                "2017-09-08 20:10:13",
                "2018-03-25 06:58:44"
            ],
            [
                "2017-12-22 05:02:02",
                "2018-03-25 02:11:32"
            ],
            [
                "2017-06-25 10:14:05",
                "2018-03-25 10:25:46"
            ],
            [
                "2017-04-20 00:58:55",
                "2018-03-24 19:12:22"
            ],
            [
                "2017-10-25 00:55:34",
                "2018-03-25 04:50:22"
            ],
            [
                "2017-04-15 09:25:31",
                "2018-03-25 13:07:04"
            ],
            [
                "2017-05-06 08:03:52",
                "2018-03-25 06:29:10"
            ],
            [
                "2017-10-16 20:06:21",
                "2018-03-25 02:47:40"
            ],
            [
                "2018-01-17 11:44:16",
                "2018-03-25 06:46:07"
            ],
            [
                "2017-12-29 06:08:26",
                "2018-03-25 04:42:14"
            ],
            [
                "2017-07-25 15:19:07",
                "2018-03-25 15:05:16"
            ],
            [
                "2017-10-24 04:45:13",
                "2018-03-25 14:15:41"
            ],
            [
                "2018-01-02 03:15:29",
                "2018-03-25 05:07:47"
            ],
            [
                "2017-06-18 19:45:38",
                "2018-03-24 23:48:59"
            ],
            [
                "2017-12-29 23:24:13",
                "2018-03-24 19:36:59"
            ]
        ]
    },
    {
        "question": "How many dogs went through any treatments?",
        "query": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN count(DISTINCT treatments.dog_id)",
        "db_id": "dog_kennels",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "Count the number of dogs that went through a treatment.",
        "query": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN count(DISTINCT treatments.dog_id)",
        "db_id": "dog_kennels",
        "answers": [
            [
                9
            ]
        ]
    },
    {
        "question": "How many professionals have performed any treatment to dogs?",
        "query": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN count(DISTINCT treatments.professional_id)",
        "db_id": "dog_kennels",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "Find the number of professionals who have ever treated dogs.",
        "query": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN count(DISTINCT treatments.professional_id)",
        "db_id": "dog_kennels",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "query": "MATCH (professionals:`dog_kennels.Professionals`)\nWHERE professionals.city =~'.*[W|w]est.*'\nRETURN professionals.role_code,professionals.street,professionals.city,professionals.state",
        "db_id": "dog_kennels",
        "answers": [
            [
                "Employee",
                "6915 Oberbrunner Point Suite 491\nGleasonville, LA ",
                "West Heidi",
                "Indiana"
            ]
        ]
    },
    {
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "query": "MATCH (professionals:`dog_kennels.Professionals`)\nWHERE professionals.city =~'.*[W|w]est.*'\nRETURN professionals.role_code,professionals.street,professionals.city,professionals.state",
        "db_id": "dog_kennels",
        "answers": [
            [
                "Employee",
                "6915 Oberbrunner Point Suite 491\nGleasonville, LA ",
                "West Heidi",
                "Indiana"
            ]
        ]
    },
    {
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "query": "MATCH (owners:`dog_kennels.Owners`)\nWHERE owners.state =~'.*[N|n]orth.*'\nRETURN owners.first_name,owners.last_name,owners.email_address",
        "db_id": "dog_kennels",
        "answers": [
            [
                "Johann",
                "Fisher",
                "zboncak.madonna@example.net"
            ],
            [
                "Cindy",
                "Schmitt",
                "wpfeffer@example.net"
            ]
        ]
    },
    {
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "query": "MATCH (owners:`dog_kennels.Owners`)\nWHERE owners.state =~'.*[N|n]orth.*'\nRETURN owners.first_name,owners.last_name,owners.email_address",
        "db_id": "dog_kennels",
        "answers": [
            [
                "Johann",
                "Fisher",
                "zboncak.madonna@example.net"
            ],
            [
                "Cindy",
                "Schmitt",
                "wpfeffer@example.net"
            ]
        ]
    },
    {
        "question": "How much does the most recent treatment cost?",
        "query": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN treatments.cost_of_treatment\nORDER BY treatments.date_of_treatment DESC\nLIMIT 1",
        "db_id": "dog_kennels",
        "answers": [
            [
                407
            ]
        ]
    },
    {
        "question": "Show me the cost of the most recently performed treatment.",
        "query": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN treatments.cost_of_treatment\nORDER BY treatments.date_of_treatment DESC\nLIMIT 1",
        "db_id": "dog_kennels",
        "answers": [
            [
                407
            ]
        ]
    },
    {
        "question": "How many dogs have not gone through any treatment?",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nWHERE NOT (dogs:`dog_kennels.Dogs`)-[]-(:`dog_kennels.Treatments`)\nRETURN count(*)",
        "db_id": "dog_kennels",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "Tell me the number of dogs that have not received any treatment .",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nWHERE NOT (dogs:`dog_kennels.Dogs`)-[]-(:`dog_kennels.Treatments`)\nRETURN count(*)",
        "db_id": "dog_kennels",
        "answers": [
            [
                6
            ]
        ]
    },
    {
        "question": "How many owners temporarily do not have any dogs?",
        "query": "MATCH (owners:`dog_kennels.Owners`)\nWHERE NOT (owners:`dog_kennels.Owners`)-[]-(:`dog_kennels.Dogs`)\nRETURN count(*)",
        "db_id": "dog_kennels",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "Find the number of owners who do not own any dogs at this moment.",
        "query": "MATCH (owners:`dog_kennels.Owners`)\nWHERE NOT (owners:`dog_kennels.Owners`)-[]-(:`dog_kennels.Dogs`)\nRETURN count(*)",
        "db_id": "dog_kennels",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "How many professionals did not operate any treatment on dogs?",
        "query": "MATCH (professionals:`dog_kennels.Professionals`)\nWHERE NOT (professionals:`dog_kennels.Professionals`)-[]-(:`dog_kennels.Treatments`)\nRETURN count(*)",
        "db_id": "dog_kennels",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "Find the number of professionals who have not treated any dogs.",
        "query": "MATCH (professionals:`dog_kennels.Professionals`)\nWHERE NOT (professionals:`dog_kennels.Professionals`)-[]-(:`dog_kennels.Treatments`)\nRETURN count(*)",
        "db_id": "dog_kennels",
        "answers": [
            [
                7
            ]
        ]
    },
    {
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nWHERE dogs.abandoned_yn = 1\nRETURN dogs.name,dogs.age,dogs.weight",
        "db_id": "dog_kennels",
        "answers": []
    },
    {
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nWHERE dogs.abandoned_yn = 1\nRETURN dogs.name,dogs.age,dogs.weight",
        "db_id": "dog_kennels",
        "answers": []
    },
    {
        "question": "What is the age of the oldest dog?",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN max(dogs.age)",
        "db_id": "dog_kennels",
        "answers": [
            [
                "9"
            ]
        ]
    },
    {
        "question": "Tell me the age of the oldest dog.",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN max(dogs.age)",
        "db_id": "dog_kennels",
        "answers": [
            [
                "9"
            ]
        ]
    },
    {
        "question": "How much does each charge type costs? List both charge type and amount.",
        "query": "MATCH (charges:`dog_kennels.Charges`)\nRETURN charges.charge_type,charges.charge_amount",
        "db_id": "dog_kennels",
        "answers": [
            [
                "Daily Accommodation",
                98
            ],
            [
                "Drugs",
                322
            ],
            [
                "Health Check",
                640
            ]
        ]
    },
    {
        "question": "List each charge type and its amount.",
        "query": "MATCH (charges:`dog_kennels.Charges`)\nRETURN charges.charge_type,charges.charge_amount",
        "db_id": "dog_kennels",
        "answers": [
            [
                "Daily Accommodation",
                98
            ],
            [
                "Drugs",
                322
            ],
            [
                "Health Check",
                640
            ]
        ]
    },
    {
        "question": "How much does the most expensive charge type costs?",
        "query": "MATCH (charges:`dog_kennels.Charges`)\nRETURN max(charges.charge_amount)",
        "db_id": "dog_kennels",
        "answers": [
            [
                640
            ]
        ]
    },
    {
        "question": "What is the charge amount of the most expensive charge type?",
        "query": "MATCH (charges:`dog_kennels.Charges`)\nRETURN max(charges.charge_amount)",
        "db_id": "dog_kennels",
        "answers": [
            [
                640
            ]
        ]
    },
    {
        "question": "List the email, cell phone and home phone of all the professionals.",
        "query": "MATCH (professionals:`dog_kennels.Professionals`)\nRETURN professionals.email_address,professionals.cell_number,professionals.home_phone",
        "db_id": "dog_kennels",
        "answers": [
            [
                "deanna.schuster@example.com",
                "(275)939-2435x80863",
                "+71(6)2898266914"
            ],
            [
                "lucile.shanahan@example.org",
                "889-940-2676",
                "+02(1)0259033559"
            ],
            [
                "uboehm@example.org",
                "(369)908-7311x065",
                "325-155-0801x7005"
            ],
            [
                "lourdes.lowe@example.net",
                "00230569697",
                "312.216.3352"
            ],
            [
                "mekhi.little@example.org",
                "011.193.9081x3186",
                "1-609-566-2752x25197"
            ],
            [
                "jacynthe.mclaughlin@example.net",
                "139-321-7313",
                "+43(5)1132733868"
            ],
            [
                "lambert62@example.org",
                "499-434-0215x1628",
                "022.529.0550x1319"
            ],
            [
                "goyette.roosevelt@example.net",
                "328.842.3792",
                "891.475.2256"
            ],
            [
                "schneider.kathryne@example.org",
                "962-983-8109x3509",
                "320-508-6023"
            ],
            [
                "jerrod.bahringer@example.org",
                "461-801-2600",
                "(230)338-3342x585"
            ],
            [
                "west.eula@example.net",
                "609-405-2990",
                "(920)304-4499x59146"
            ],
            [
                "marquardt.furman@example.org",
                "1-181-670-9466",
                "246-951-0080x76716"
            ],
            [
                "delphine29@example.com",
                "880-659-7577x736",
                "346.594.3739"
            ],
            [
                "cole.margarita@example.org",
                "1-185-137-1945x409",
                "971.048.3763x9404"
            ],
            [
                "jeichmann@example.com",
                "1-258-285-4707x8020",
                "1-138-287-3775"
            ]
        ]
    },
    {
        "question": "What are the email, cell phone and home phone of each professional?",
        "query": "MATCH (professionals:`dog_kennels.Professionals`)\nRETURN professionals.email_address,professionals.cell_number,professionals.home_phone",
        "db_id": "dog_kennels",
        "answers": [
            [
                "deanna.schuster@example.com",
                "(275)939-2435x80863",
                "+71(6)2898266914"
            ],
            [
                "lucile.shanahan@example.org",
                "889-940-2676",
                "+02(1)0259033559"
            ],
            [
                "uboehm@example.org",
                "(369)908-7311x065",
                "325-155-0801x7005"
            ],
            [
                "lourdes.lowe@example.net",
                "00230569697",
                "312.216.3352"
            ],
            [
                "mekhi.little@example.org",
                "011.193.9081x3186",
                "1-609-566-2752x25197"
            ],
            [
                "jacynthe.mclaughlin@example.net",
                "139-321-7313",
                "+43(5)1132733868"
            ],
            [
                "lambert62@example.org",
                "499-434-0215x1628",
                "022.529.0550x1319"
            ],
            [
                "goyette.roosevelt@example.net",
                "328.842.3792",
                "891.475.2256"
            ],
            [
                "schneider.kathryne@example.org",
                "962-983-8109x3509",
                "320-508-6023"
            ],
            [
                "jerrod.bahringer@example.org",
                "461-801-2600",
                "(230)338-3342x585"
            ],
            [
                "west.eula@example.net",
                "609-405-2990",
                "(920)304-4499x59146"
            ],
            [
                "marquardt.furman@example.org",
                "1-181-670-9466",
                "246-951-0080x76716"
            ],
            [
                "delphine29@example.com",
                "880-659-7577x736",
                "346.594.3739"
            ],
            [
                "cole.margarita@example.org",
                "1-185-137-1945x409",
                "971.048.3763x9404"
            ],
            [
                "jeichmann@example.com",
                "1-258-285-4707x8020",
                "1-138-287-3775"
            ]
        ]
    },
    {
        "question": "What are all the possible breed type and size type combinations?",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN DISTINCT dogs.breed_code,dogs.size_code",
        "db_id": "dog_kennels",
        "answers": [
            [
                "ESK",
                "LGE"
            ],
            [
                "BUL",
                "LGE"
            ],
            [
                "BUL",
                "MED"
            ],
            [
                "HUS",
                "MED"
            ],
            [
                "ESK",
                "SML"
            ],
            [
                "HUS",
                "SML"
            ],
            [
                "ESK",
                "MED"
            ]
        ]
    },
    {
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN DISTINCT dogs.breed_code,dogs.size_code",
        "db_id": "dog_kennels",
        "answers": [
            [
                "ESK",
                "LGE"
            ],
            [
                "BUL",
                "LGE"
            ],
            [
                "BUL",
                "MED"
            ],
            [
                "HUS",
                "MED"
            ],
            [
                "ESK",
                "SML"
            ],
            [
                "HUS",
                "SML"
            ],
            [
                "ESK",
                "MED"
            ]
        ]
    },
    {
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "query": "MATCH (T3:`dog_kennels.Treatment_Types`)-[]-(T2:`dog_kennels.Treatments`)-[]-(T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`)\nRETURN DISTINCT T1.first_name,T3.treatment_type_description",
        "db_id": "dog_kennels",
        "answers": []
    },
    {
        "question": "What are each professional's first name and description of the treatment they have performed?",
        "query": "MATCH (T3:`dog_kennels.Treatment_Types`)-[]-(T2:`dog_kennels.Treatments`)-[]-(T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`)\nRETURN DISTINCT T1.first_name,T3.treatment_type_description",
        "db_id": "dog_kennels",
        "answers": []
    },
    {
        "question": "How many singers are there?",
        "query": "MATCH (singer:`singer.singer`)\nRETURN count(*)",
        "db_id": "singer",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "What is the count of singers?",
        "query": "MATCH (singer:`singer.singer`)\nRETURN count(*)",
        "db_id": "singer",
        "answers": [
            [
                8
            ]
        ]
    },
    {
        "question": "List the name of singers in ascending order of net worth.",
        "query": "MATCH (singer:`singer.singer`)\nRETURN singer.Name\nORDER BY singer.Net_Worth_Millions ASC",
        "db_id": "singer",
        "answers": [
            [
                "Abigail Johnson"
            ],
            [
                "Susanne Klatten"
            ],
            [
                "Gina Rinehart"
            ],
            [
                "Iris Fontbona"
            ],
            [
                "Jacqueline Mars"
            ],
            [
                "Alice Walton"
            ],
            [
                "Christy Walton"
            ],
            [
                "Liliane Bettencourt"
            ]
        ]
    },
    {
        "question": "What are the names of singers ordered by ascending net worth?",
        "query": "MATCH (singer:`singer.singer`)\nRETURN singer.Name\nORDER BY singer.Net_Worth_Millions ASC",
        "db_id": "singer",
        "answers": [
            [
                "Abigail Johnson"
            ],
            [
                "Susanne Klatten"
            ],
            [
                "Gina Rinehart"
            ],
            [
                "Iris Fontbona"
            ],
            [
                "Jacqueline Mars"
            ],
            [
                "Alice Walton"
            ],
            [
                "Christy Walton"
            ],
            [
                "Liliane Bettencourt"
            ]
        ]
    },
    {
        "question": "What are the birth year and citizenship of singers?",
        "query": "MATCH (singer:`singer.singer`)\nRETURN singer.Birth_Year,singer.Citizenship",
        "db_id": "singer",
        "answers": [
            [
                1944.0,
                "France"
            ],
            [
                1948.0,
                "United States"
            ],
            [
                1949.0,
                "United States"
            ],
            [
                1942.0,
                "Chile"
            ],
            [
                1940.0,
                "United States"
            ],
            [
                1953.0,
                "Australia"
            ],
            [
                1962.0,
                "Germany"
            ],
            [
                1961.0,
                "United States"
            ]
        ]
    },
    {
        "question": "What are the birth years and citizenships of the singers?",
        "query": "MATCH (singer:`singer.singer`)\nRETURN singer.Birth_Year,singer.Citizenship",
        "db_id": "singer",
        "answers": [
            [
                1944.0,
                "France"
            ],
            [
                1948.0,
                "United States"
            ],
            [
                1949.0,
                "United States"
            ],
            [
                1942.0,
                "Chile"
            ],
            [
                1940.0,
                "United States"
            ],
            [
                1953.0,
                "Australia"
            ],
            [
                1962.0,
                "Germany"
            ],
            [
                1961.0,
                "United States"
            ]
        ]
    },
    {
        "question": "List the name of singers whose citizenship is not \"France\".",
        "query": "MATCH (singer:`singer.singer`)\nWHERE singer.Citizenship <> 'France'\nRETURN singer.Name",
        "db_id": "singer",
        "answers": [
            [
                "Christy Walton"
            ],
            [
                "Alice Walton"
            ],
            [
                "Iris Fontbona"
            ],
            [
                "Jacqueline Mars"
            ],
            [
                "Gina Rinehart"
            ],
            [
                "Susanne Klatten"
            ],
            [
                "Abigail Johnson"
            ]
        ]
    },
    {
        "question": "What are the names of the singers who are not French citizens?",
        "query": "MATCH (singer:`singer.singer`)\nWHERE singer.Citizenship <> 'France'\nRETURN singer.Name",
        "db_id": "singer",
        "answers": [
            [
                "Christy Walton"
            ],
            [
                "Alice Walton"
            ],
            [
                "Iris Fontbona"
            ],
            [
                "Jacqueline Mars"
            ],
            [
                "Gina Rinehart"
            ],
            [
                "Susanne Klatten"
            ],
            [
                "Abigail Johnson"
            ]
        ]
    },
    {
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "query": "MATCH (singer:`singer.singer`)\nWHERE singer.Birth_Year = 1948 OR singer.Birth_Year = 1949\nRETURN singer.Name",
        "db_id": "singer",
        "answers": [
            [
                "Christy Walton"
            ],
            [
                "Alice Walton"
            ]
        ]
    },
    {
        "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "query": "MATCH (singer:`singer.singer`)\nWHERE singer.Birth_Year = 1948 OR singer.Birth_Year = 1949\nRETURN singer.Name",
        "db_id": "singer",
        "answers": [
            [
                "Christy Walton"
            ],
            [
                "Alice Walton"
            ]
        ]
    },
    {
        "question": "What is the name of the singer with the largest net worth?",
        "query": "MATCH (singer:`singer.singer`)\nRETURN singer.Name\nORDER BY singer.Net_Worth_Millions DESC\nLIMIT 1",
        "db_id": "singer",
        "answers": [
            [
                "Liliane Bettencourt"
            ]
        ]
    },
    {
        "question": "What is the name of the singer who is worth the most?",
        "query": "MATCH (singer:`singer.singer`)\nRETURN singer.Name\nORDER BY singer.Net_Worth_Millions DESC\nLIMIT 1",
        "db_id": "singer",
        "answers": [
            [
                "Liliane Bettencourt"
            ]
        ]
    },
    {
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "query": "MATCH (singer:`singer.singer`)\nWITH singer.Citizenship AS Citizenship, count(singer.Citizenship) AS count\nRETURN Citizenship,count",
        "db_id": "singer",
        "answers": [
            [
                "France",
                1
            ],
            [
                "United States",
                4
            ],
            [
                "Chile",
                1
            ],
            [
                "Australia",
                1
            ],
            [
                "Germany",
                1
            ]
        ]
    },
    {
        "question": "For each citizenship, how many singers are from that country?",
        "query": "MATCH (singer:`singer.singer`)\nWITH singer.Citizenship AS Citizenship, count(singer.Citizenship) AS count\nRETURN Citizenship,count",
        "db_id": "singer",
        "answers": [
            [
                "France",
                1
            ],
            [
                "United States",
                4
            ],
            [
                "Chile",
                1
            ],
            [
                "Australia",
                1
            ],
            [
                "Germany",
                1
            ]
        ]
    },
    {
        "question": "Please show the most common citizenship of singers.",
        "query": "MATCH (singer:`singer.singer`)\nWITH singer.Citizenship AS Citizenship, count(singer.Citizenship) AS count\nRETURN Citizenship\nORDER BY count DESC\nLIMIT 1",
        "db_id": "singer",
        "answers": [
            [
                "United States"
            ]
        ]
    },
    {
        "question": "What is the most common singer citizenship ?",
        "query": "MATCH (singer:`singer.singer`)\nWITH singer.Citizenship AS Citizenship, count(singer.Citizenship) AS count\nRETURN Citizenship\nORDER BY count DESC\nLIMIT 1",
        "db_id": "singer",
        "answers": [
            [
                "United States"
            ]
        ]
    },
    {
        "question": "Show titles of songs and names of singers.",
        "query": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`)\nRETURN T2.Title,T1.Name",
        "db_id": "singer",
        "answers": [
            [
                "F**k It (I Don't Want You Back)",
                "Liliane Bettencourt"
            ],
            [
                "Do They Know It's Christmas",
                "Liliane Bettencourt"
            ],
            [
                "Cha Cha Slide",
                "Christy Walton"
            ],
            [
                "Yeah",
                "Christy Walton"
            ],
            [
                "Call on Me",
                "Iris Fontbona"
            ],
            [
                "Left Outside Alone",
                "Jacqueline Mars"
            ],
            [
                "All This Time",
                "Gina Rinehart"
            ],
            [
                "Mysterious Girl",
                "Susanne Klatten"
            ]
        ]
    },
    {
        "question": "What are the song titles and singer names?",
        "query": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`)\nRETURN T2.Title,T1.Name",
        "db_id": "singer",
        "answers": [
            [
                "F**k It (I Don't Want You Back)",
                "Liliane Bettencourt"
            ],
            [
                "Do They Know It's Christmas",
                "Liliane Bettencourt"
            ],
            [
                "Cha Cha Slide",
                "Christy Walton"
            ],
            [
                "Yeah",
                "Christy Walton"
            ],
            [
                "Call on Me",
                "Iris Fontbona"
            ],
            [
                "Left Outside Alone",
                "Jacqueline Mars"
            ],
            [
                "All This Time",
                "Gina Rinehart"
            ],
            [
                "Mysterious Girl",
                "Susanne Klatten"
            ]
        ]
    },
    {
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "query": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`)\nWHERE T2.Sales > 300000\nRETURN DISTINCT T1.Name",
        "db_id": "singer",
        "answers": [
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ],
            [
                "Iris Fontbona"
            ]
        ]
    },
    {
        "question": "what are the different names of the singers that have sales more than 300000?",
        "query": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`)\nWHERE T2.Sales > 300000\nRETURN DISTINCT T1.Name",
        "db_id": "singer",
        "answers": [
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ],
            [
                "Iris Fontbona"
            ]
        ]
    },
    {
        "question": "Show the names of singers that have more than one song.",
        "query": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`)\nWITH T1.Name AS Name, count(*) AS count\nWHERE count  > 1\nRETURN Name",
        "db_id": "singer",
        "answers": [
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ]
        ]
    },
    {
        "question": "What are the names of the singers that have more than one songs?",
        "query": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`)\nWITH T1.Name AS Name, count(*) AS count\nWHERE count  > 1\nRETURN Name",
        "db_id": "singer",
        "answers": [
            [
                "Liliane Bettencourt"
            ],
            [
                "Christy Walton"
            ]
        ]
    },
    {
        "question": "List the name of singers that do not have any song.",
        "query": "MATCH (singer:`singer.singer`)\nWHERE NOT (singer:`singer.singer`)-[]-(:`singer.song`)\nRETURN singer.Name",
        "db_id": "singer",
        "answers": [
            [
                "Alice Walton"
            ],
            [
                "Abigail Johnson"
            ]
        ]
    },
    {
        "question": "What is the sname of every sing that does not have any song?",
        "query": "MATCH (singer:`singer.singer`)\nWHERE NOT (singer:`singer.singer`)-[]-(:`singer.song`)\nRETURN singer.Name",
        "db_id": "singer",
        "answers": [
            [
                "Alice Walton"
            ],
            [
                "Abigail Johnson"
            ]
        ]
    },
    {
        "question": "How many available features are there in total?",
        "query": "MATCH (other_available_features:`real_estate_properties.Other_Available_Features`)\nRETURN count(*)",
        "db_id": "real_estate_properties",
        "answers": [
            [
                3
            ]
        ]
    },
    {
        "question": "What is the feature type name of feature AirCon?",
        "query": "MATCH (T1:`real_estate_properties.Other_Available_Features`)-[]-(T2:`real_estate_properties.Ref_Feature_Types`)\nWHERE T1.feature_name = 'AirCon'\nRETURN T2.feature_type_name",
        "db_id": "real_estate_properties",
        "answers": [
            [
                "Amenity, eg Pool."
            ]
        ]
    },
    {
        "question": "Show the property type descriptions of properties belonging to that code.",
        "query": "MATCH (T1:`real_estate_properties.Properties`)-[]-(T2:`real_estate_properties.Ref_Property_Types`)\nWITH count(T1.property_type_code) AS count, T2.property_type_description AS property_type_description\nRETURN property_type_description",
        "db_id": "real_estate_properties",
        "answers": [
            [
                "House, Bungalow, etc."
            ],
            [
                "Apartment, Flat, Condo, etc."
            ],
            [
                "Field, Meadow."
            ],
            [
                "Other, to be determined."
            ],
            [
                "Shop, Retail Outlet."
            ]
        ]
    },
    {
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "query": "MATCH (properties:`real_estate_properties.Properties`)\nWHERE properties.property_type_code = 'House'\nRETURN properties.property_name  AS property_name \nUNION\nMATCH (properties:`real_estate_properties.Properties`)\nWHERE properties.property_type_code = 'Apartment' AND properties.room_count > 1\nRETURN properties.property_name  AS property_name",
        "db_id": "real_estate_properties",
        "answers": [
            [
                "park"
            ],
            [
                "the cole"
            ],
            [
                "parc east"
            ],
            [
                "vogue"
            ],
            [
                "longacre"
            ],
            [
                "renoir"
            ],
            [
                "ten tower"
            ],
            [
                "parc coliseum"
            ]
        ]
    }
]