[
    {
        "prediction": "MATCH (singer:`concert_singer.singer`) RETURN count(*)",
        "query": "MATCH (singer:`concert_singer.singer`)\nRETURN count(*)",
        "question": "How many singers do we have?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "text_in": "How many singers do we have?",
        "seq_out": "MATCH (singer:`concert_singer.singer`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`concert_singer.singer`) RETURN count(*)",
        "query": "MATCH (singer:`concert_singer.singer`)\nRETURN count(*)",
        "question": "What is the total number of singers?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "text_in": "What is the total number of singers?",
        "seq_out": "MATCH (singer:`concert_singer.singer`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`concert_singer.singer`) RETURN singer.Name,singer.Country,singer.Age ORDER BY singer.Age DESC",
        "query": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.Name,singer.Country,singer.Age\nORDER BY singer.Age DESC",
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "text_in": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "seq_out": "MATCH (singer:`concert_singer.singer`) RETURN singer.Name,singer.Country,singer.Age ORDER BY singer.Age DESC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`concert_singer.singer`) RETURN singer.Name,singer.Country,singer.Age ORDER BY singer.Age DESC",
        "query": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.Name,singer.Country,singer.Age\nORDER BY singer.Age DESC",
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "text_in": "What are the names, countries, and ages for every singer in descending order of age?",
        "seq_out": "MATCH (singer:`concert_singer.singer`) RETURN singer.Name,singer.Country,singer.Age ORDER BY singer.Age DESC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`concert_singer.singer`) WHERE singer.Country = 'France' RETURN avg(singer.Age),min(singer.Age),max(singer.Age)",
        "query": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Country = 'France'\nRETURN avg(singer.Age),min(singer.Age),max(singer.Age)",
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country ( France ) , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country ( France ) , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "text_in": "What is the average, minimum, and maximum age of all singers from France?",
        "seq_out": "MATCH (singer:`concert_singer.singer`) WHERE singer.Country = 'France' RETURN avg(singer.Age),min(singer.Age),max(singer.Age)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`concert_singer.singer`) WHERE singer.Is_male = 'F' RETURN avg(singer.Age),min(singer.Age),max(singer.Age)",
        "query": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Country = 'France'\nRETURN avg(singer.Age),min(singer.Age),max(singer.Age)",
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "text_in": "What is the average, minimum, and maximum age for all French singers?",
        "seq_out": "MATCH (singer:`concert_singer.singer`) WHERE singer.Country = 'France' RETURN avg(singer.Age),min(singer.Age),max(singer.Age)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`concert_singer.singer`) RETURN singer.Song_Name,singer.Song_release_year ORDER BY singer.Year ASC LIMIT 1",
        "query": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.Song_Name,singer.Song_release_year\nORDER BY singer.Age\nLIMIT 1",
        "question": "Show the name and the release year of the song by the youngest singer.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "text_in": "Show the name and the release year of the song by the youngest singer.",
        "seq_out": "MATCH (singer:`concert_singer.singer`) RETURN singer.Song_Name,singer.Song_release_year ORDER BY singer.Age LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`concert_singer.singer`) RETURN singer.Song_Name,singer.Song_release_year ORDER BY singer.Year ASC LIMIT 1",
        "query": "MATCH (singer:`concert_singer.singer`)\nRETURN singer.Song_Name,singer.Song_release_year\nORDER BY singer.Age\nLIMIT 1",
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "text_in": "What are the names and release years for all the songs of the youngest singer?",
        "seq_out": "MATCH (singer:`concert_singer.singer`) RETURN singer.Song_Name,singer.Song_release_year ORDER BY singer.Age LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`concert_singer.singer`) WHERE singer.Age > 20 RETURN DISTINCT singer.Country",
        "query": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Age > 20\nRETURN DISTINCT singer.Country",
        "question": "What are all distinct countries where singers above age 20 are from?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "text_in": "What are all distinct countries where singers above age 20 are from?",
        "seq_out": "MATCH (singer:`concert_singer.singer`) WHERE singer.Age > 20 RETURN DISTINCT singer.Country",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`concert_singer.singer`) WHERE singer.Age > 20 RETURN DISTINCT singer.Country",
        "query": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Age > 20\nRETURN DISTINCT singer.Country",
        "question": "What are  the different countries with singers above age 20?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "text_in": "What are  the different countries with singers above age 20?",
        "seq_out": "MATCH (singer:`concert_singer.singer`) WHERE singer.Age > 20 RETURN DISTINCT singer.Country",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`concert_singer.singer`) WITH count(singer.Country) AS count, singer.Country AS Country RETURN Country,count",
        "query": "MATCH (singer:`concert_singer.singer`)\nWITH singer.Country AS Country, count(singer.Country) AS count\nRETURN Country,count",
        "question": "Show all countries and the number of singers in each country.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "text_in": "Show all countries and the number of singers in each country.",
        "seq_out": "MATCH (singer:`concert_singer.singer`) WITH singer.Country AS Country, count(singer.Country) AS count RETURN Country,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`concert_singer.singer`) WITH count(singer.Country) AS count, singer.Country AS Country RETURN Country,count",
        "query": "MATCH (singer:`concert_singer.singer`)\nWITH singer.Country AS Country, count(singer.Country) AS count\nRETURN Country,count",
        "question": "How many singers are from each country?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "text_in": "How many singers are from each country?",
        "seq_out": "MATCH (singer:`concert_singer.singer`) WITH singer.Country AS Country, count(singer.Country) AS count RETURN Country,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (stadium:`concert_singer.stadium`) RETURN avg(stadium.Capacity),max(stadium.Capacity)",
        "query": "MATCH (stadium:`concert_singer.stadium`)\nRETURN avg(stadium.Capacity),max(stadium.Capacity)",
        "question": "What is the average and maximum capacities for all stadiums ?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "text_in": "What is the average and maximum capacities for all stadiums ?",
        "seq_out": "MATCH (stadium:`concert_singer.stadium`) RETURN avg(stadium.Capacity),max(stadium.Capacity)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (stadium:`concert_singer.stadium`) RETURN stadium.Name,stadium.Capacity ORDER BY stadium.Average DESC LIMIT 1",
        "query": "MATCH (stadium:`concert_singer.stadium`)\nRETURN stadium.Name,stadium.Capacity\nORDER BY stadium.Average DESC\nLIMIT 1",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "text_in": "What is the name and capacity for the stadium with highest average attendance?",
        "seq_out": "MATCH (stadium:`concert_singer.stadium`) RETURN stadium.Name,stadium.Capacity ORDER BY stadium.Average DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (stadium:`concert_singer.stadium`) RETURN stadium.Name,stadium.Capacity ORDER BY stadium.Average DESC LIMIT 1",
        "query": "MATCH (stadium:`concert_singer.stadium`)\nRETURN stadium.Name,stadium.Capacity\nORDER BY stadium.Average DESC\nLIMIT 1",
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "text_in": "What is the name and capacity for the stadium with the highest average attendance?",
        "seq_out": "MATCH (stadium:`concert_singer.stadium`) RETURN stadium.Name,stadium.Capacity ORDER BY stadium.Average DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`concert_singer.singer`) WHERE singer.Song_Name =~'.*[H|h]ey.*' RETURN singer.Name,singer.Country",
        "query": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Song_Name =~'.*[H|h]ey.*'\nRETURN singer.Name,singer.Country",
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "text_in": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "seq_out": "MATCH (singer:`concert_singer.singer`) WHERE singer.Song_Name =~'.*[H|h]ey.*' RETURN singer.Name,singer.Country",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`concert_singer.singer`) WHERE singer.Song_Name =~'.*[H|h]ey.*' RETURN singer.Name,singer.Country",
        "query": "MATCH (singer:`concert_singer.singer`)\nWHERE singer.Song_Name =~'.*[H|h]ey.*'\nRETURN singer.Name,singer.Country",
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "concert_singer",
        "db_tag_names": [
            ":`concert_singer.stadium`",
            ":`concert_singer.singer`",
            ":`concert_singer.concert`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Lowest",
                "Stadium_ID",
                "Capacity",
                "Highest",
                "Location",
                "Average",
                "Country",
                "Age",
                "Name",
                "Song_Name",
                "Is_male",
                "Singer_ID",
                "Song_release_year",
                "Theme",
                "Stadium_ID",
                "concert_Name",
                "concert_ID",
                "Year"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "struct_in": "| concert_singer | :`concert_singer.stadium` : Name , Lowest , Stadium_ID , Capacity , Highest , Location , Average | :`concert_singer.singer` : Country , Age , Name , Song_Name , Is_male , Singer_ID , Song_release_year | :`concert_singer.concert` : Theme , Stadium_ID , concert_Name , concert_ID , Year",
        "text_in": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "seq_out": "MATCH (singer:`concert_singer.singer`) WHERE singer.Song_Name =~'.*[H|h]ey.*' RETURN singer.Name,singer.Country",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (pets:`pets_1.Pets`) WHERE pets.weight > 10 RETURN count(*)",
        "query": "MATCH (pets:`pets_1.Pets`)\nWHERE pets.weight > 10\nRETURN count(*)",
        "question": "Find the number of pets whose weight is heavier than 10.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "pets_1",
        "db_tag_names": [
            ":`pets_1.Student`",
            ":`pets_1.Pets`",
            ":`pets_1.Has_Pet`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Age",
                "Fname",
                "city_code",
                "LName",
                "Advisor",
                "Major",
                "Sex",
                "StuID",
                "PetType",
                "pet_age",
                "weight",
                "PetID"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | pets_1 | :`pets_1.Student` : Age , Fname , city_code , LName , Advisor , Major , Sex , StuID | :`pets_1.Pets` : PetType , pet_age , weight , PetID | :`pets_1.Has_Pet` : ",
        "struct_in": "| pets_1 | :`pets_1.Student` : Age , Fname , city_code , LName , Advisor , Major , Sex , StuID | :`pets_1.Pets` : PetType , pet_age , weight , PetID | :`pets_1.Has_Pet` :",
        "text_in": "Find the number of pets whose weight is heavier than 10.",
        "seq_out": "MATCH (pets:`pets_1.Pets`) WHERE pets.weight > 10 RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (pets:`pets_1.Pets`) WHERE pets.weight > 10 RETURN count(*)",
        "query": "MATCH (pets:`pets_1.Pets`)\nWHERE pets.weight > 10\nRETURN count(*)",
        "question": "How many pets have a greater weight than 10?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "pets_1",
        "db_tag_names": [
            ":`pets_1.Student`",
            ":`pets_1.Pets`",
            ":`pets_1.Has_Pet`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Age",
                "Fname",
                "city_code",
                "LName",
                "Advisor",
                "Major",
                "Sex",
                "StuID",
                "PetType",
                "pet_age",
                "weight",
                "PetID"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | pets_1 | :`pets_1.Student` : Age , Fname , city_code , LName , Advisor , Major , Sex , StuID | :`pets_1.Pets` : PetType , pet_age , weight , PetID | :`pets_1.Has_Pet` : ",
        "struct_in": "| pets_1 | :`pets_1.Student` : Age , Fname , city_code , LName , Advisor , Major , Sex , StuID | :`pets_1.Pets` : PetType , pet_age , weight , PetID | :`pets_1.Has_Pet` :",
        "text_in": "How many pets have a greater weight than 10?",
        "seq_out": "MATCH (pets:`pets_1.Pets`) WHERE pets.weight > 10 RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (pets:`pets_1.Pets`) WHERE pets.PetType = 'dog' RETURN pets.weight ORDER BY pets.weight LIMIT 1",
        "query": "MATCH (pets:`pets_1.Pets`)\nRETURN pets.weight\nORDER BY pets.pet_age\nLIMIT 1",
        "question": "Find the weight of the youngest dog.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "pets_1",
        "db_tag_names": [
            ":`pets_1.Student`",
            ":`pets_1.Pets`",
            ":`pets_1.Has_Pet`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Age",
                "Fname",
                "city_code",
                "LName",
                "Advisor",
                "Major",
                "Sex",
                "StuID",
                "PetType",
                "pet_age",
                "weight",
                "PetID"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | pets_1 | :`pets_1.Student` : Age , Fname , city_code , LName , Advisor , Major , Sex , StuID | :`pets_1.Pets` : PetType ( dog ) , pet_age , weight , PetID | :`pets_1.Has_Pet` : ",
        "struct_in": "| pets_1 | :`pets_1.Student` : Age , Fname , city_code , LName , Advisor , Major , Sex , StuID | :`pets_1.Pets` : PetType ( dog ) , pet_age , weight , PetID | :`pets_1.Has_Pet` :",
        "text_in": "Find the weight of the youngest dog.",
        "seq_out": "MATCH (pets:`pets_1.Pets`) RETURN pets.weight ORDER BY pets.pet_age LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (pets:`pets_1.Pets`) WHERE pets.PetType = 'dog' RETURN pets.weight ORDER BY pets.weight LIMIT 1",
        "query": "MATCH (pets:`pets_1.Pets`)\nRETURN pets.weight\nORDER BY pets.pet_age\nLIMIT 1",
        "question": "How much does the youngest dog weigh?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "pets_1",
        "db_tag_names": [
            ":`pets_1.Student`",
            ":`pets_1.Pets`",
            ":`pets_1.Has_Pet`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Age",
                "Fname",
                "city_code",
                "LName",
                "Advisor",
                "Major",
                "Sex",
                "StuID",
                "PetType",
                "pet_age",
                "weight",
                "PetID"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | pets_1 | :`pets_1.Student` : Age , Fname , city_code , LName , Advisor , Major , Sex , StuID | :`pets_1.Pets` : PetType ( dog ) , pet_age , weight , PetID | :`pets_1.Has_Pet` : ",
        "struct_in": "| pets_1 | :`pets_1.Student` : Age , Fname , city_code , LName , Advisor , Major , Sex , StuID | :`pets_1.Pets` : PetType ( dog ) , pet_age , weight , PetID | :`pets_1.Has_Pet` :",
        "text_in": "How much does the youngest dog weigh?",
        "seq_out": "MATCH (pets:`pets_1.Pets`) RETURN pets.weight ORDER BY pets.pet_age LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (pets:`pets_1.Pets`) RETURN count(DISTINCT pets.PetType)",
        "query": "MATCH (pets:`pets_1.Pets`)\nRETURN count(DISTINCT pets.PetType)",
        "question": "Find the number of distinct type of pets.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "pets_1",
        "db_tag_names": [
            ":`pets_1.Student`",
            ":`pets_1.Pets`",
            ":`pets_1.Has_Pet`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Age",
                "Fname",
                "city_code",
                "LName",
                "Advisor",
                "Major",
                "Sex",
                "StuID",
                "PetType",
                "pet_age",
                "weight",
                "PetID"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | pets_1 | :`pets_1.Student` : Age , Fname , city_code , LName , Advisor , Major , Sex , StuID | :`pets_1.Pets` : PetType , pet_age , weight , PetID | :`pets_1.Has_Pet` : ",
        "struct_in": "| pets_1 | :`pets_1.Student` : Age , Fname , city_code , LName , Advisor , Major , Sex , StuID | :`pets_1.Pets` : PetType , pet_age , weight , PetID | :`pets_1.Has_Pet` :",
        "text_in": "Find the number of distinct type of pets.",
        "seq_out": "MATCH (pets:`pets_1.Pets`) RETURN count(DISTINCT pets.PetType)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (pets:`pets_1.Pets`) RETURN count(DISTINCT pets.PetType)",
        "query": "MATCH (pets:`pets_1.Pets`)\nRETURN count(DISTINCT pets.PetType)",
        "question": "How many different types of pet are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "pets_1",
        "db_tag_names": [
            ":`pets_1.Student`",
            ":`pets_1.Pets`",
            ":`pets_1.Has_Pet`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Age",
                "Fname",
                "city_code",
                "LName",
                "Advisor",
                "Major",
                "Sex",
                "StuID",
                "PetType",
                "pet_age",
                "weight",
                "PetID"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | pets_1 | :`pets_1.Student` : Age , Fname , city_code , LName , Advisor , Major , Sex , StuID | :`pets_1.Pets` : PetType , pet_age , weight , PetID | :`pets_1.Has_Pet` : ",
        "struct_in": "| pets_1 | :`pets_1.Student` : Age , Fname , city_code , LName , Advisor , Major , Sex , StuID | :`pets_1.Pets` : PetType , pet_age , weight , PetID | :`pets_1.Has_Pet` :",
        "text_in": "How many different types of pet are there?",
        "seq_out": "MATCH (pets:`pets_1.Pets`) RETURN count(DISTINCT pets.PetType)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (student:`pets_1.Student`) WHERE student.Sex = 'no' AND student.Pet_type  < > 'cat' RETURN student.Major,student.Age",
        "query": "MATCH (student:`pets_1.Student`)\nWHERE NOT (student:`pets_1.Student`)-[]-(:`pets_1.Has_Pet`)-[]-(:`pets_1.Pets { PetType : 'cat' }`)-[]-(:`pets_1.Student`)-[]-(:`pets_1.Has_Pet`)\nRETURN student.Major,student.Age",
        "question": "Find the major and age of students who do not have a cat pet.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "pets_1",
        "db_tag_names": [
            ":`pets_1.Student`",
            ":`pets_1.Pets`",
            ":`pets_1.Has_Pet`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Age",
                "Fname",
                "city_code",
                "LName",
                "Advisor",
                "Major",
                "Sex",
                "StuID",
                "PetType",
                "pet_age",
                "weight",
                "PetID"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | pets_1 | :`pets_1.Student` : Age , Fname , city_code , LName , Advisor , Major , Sex , StuID | :`pets_1.Pets` : PetType ( cat ) , pet_age , weight , PetID | :`pets_1.Has_Pet` : ",
        "struct_in": "| pets_1 | :`pets_1.Student` : Age , Fname , city_code , LName , Advisor , Major , Sex , StuID | :`pets_1.Pets` : PetType ( cat ) , pet_age , weight , PetID | :`pets_1.Has_Pet` :",
        "text_in": "Find the major and age of students who do not have a cat pet.",
        "seq_out": "MATCH (student:`pets_1.Student`) WHERE NOT (student:`pets_1.Student`)-[]-(:`pets_1.Has_Pet`)-[]-(:`pets_1.Pets { PetType : 'cat' }`)-[]-(:`pets_1.Student`)-[]-(:`pets_1.Has_Pet`) RETURN student.Major,student.Age",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (student:`pets_1.Student`) WHERE student.Sex = 'no' AND student.PetType  < > 'cat' RETURN student.Major,student.Age",
        "query": "MATCH (student:`pets_1.Student`)\nWHERE NOT (student:`pets_1.Student`)-[]-(:`pets_1.Has_Pet`)-[]-(:`pets_1.Pets { PetType : 'cat' }`)-[]-(:`pets_1.Student`)-[]-(:`pets_1.Has_Pet`)\nRETURN student.Major,student.Age",
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "pets_1",
        "db_tag_names": [
            ":`pets_1.Student`",
            ":`pets_1.Pets`",
            ":`pets_1.Has_Pet`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Age",
                "Fname",
                "city_code",
                "LName",
                "Advisor",
                "Major",
                "Sex",
                "StuID",
                "PetType",
                "pet_age",
                "weight",
                "PetID"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | pets_1 | :`pets_1.Student` : Age , Fname , city_code , LName , Advisor , Major , Sex , StuID | :`pets_1.Pets` : PetType ( cat ) , pet_age , weight , PetID | :`pets_1.Has_Pet` : ",
        "struct_in": "| pets_1 | :`pets_1.Student` : Age , Fname , city_code , LName , Advisor , Major , Sex , StuID | :`pets_1.Pets` : PetType ( cat ) , pet_age , weight , PetID | :`pets_1.Has_Pet` :",
        "text_in": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "seq_out": "MATCH (student:`pets_1.Student`) WHERE NOT (student:`pets_1.Student`)-[]-(:`pets_1.Has_Pet`)-[]-(:`pets_1.Pets { PetType : 'cat' }`)-[]-(:`pets_1.Student`)-[]-(:`pets_1.Has_Pet`) RETURN student.Major,student.Age",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (pets:`pets_1.Pets`) RETURN pets.PetType,pets.weight ORDER BY pets.age LIMIT 1",
        "query": "MATCH (pets:`pets_1.Pets`)\nRETURN pets.PetType,pets.weight\nORDER BY pets.pet_age\nLIMIT 1",
        "question": "Find the type and weight of the youngest pet.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "pets_1",
        "db_tag_names": [
            ":`pets_1.Student`",
            ":`pets_1.Pets`",
            ":`pets_1.Has_Pet`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Age",
                "Fname",
                "city_code",
                "LName",
                "Advisor",
                "Major",
                "Sex",
                "StuID",
                "PetType",
                "pet_age",
                "weight",
                "PetID"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | pets_1 | :`pets_1.Student` : Age , Fname , city_code , LName , Advisor , Major , Sex , StuID | :`pets_1.Pets` : PetType , pet_age , weight , PetID | :`pets_1.Has_Pet` : ",
        "struct_in": "| pets_1 | :`pets_1.Student` : Age , Fname , city_code , LName , Advisor , Major , Sex , StuID | :`pets_1.Pets` : PetType , pet_age , weight , PetID | :`pets_1.Has_Pet` :",
        "text_in": "Find the type and weight of the youngest pet.",
        "seq_out": "MATCH (pets:`pets_1.Pets`) RETURN pets.PetType,pets.weight ORDER BY pets.pet_age LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (pets:`pets_1.Pets`) RETURN pets.PetType,pets.weight ORDER BY pets.weight LIMIT 1",
        "query": "MATCH (pets:`pets_1.Pets`)\nRETURN pets.PetType,pets.weight\nORDER BY pets.pet_age\nLIMIT 1",
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "pets_1",
        "db_tag_names": [
            ":`pets_1.Student`",
            ":`pets_1.Pets`",
            ":`pets_1.Has_Pet`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Age",
                "Fname",
                "city_code",
                "LName",
                "Advisor",
                "Major",
                "Sex",
                "StuID",
                "PetType",
                "pet_age",
                "weight",
                "PetID"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | pets_1 | :`pets_1.Student` : Age , Fname , city_code , LName , Advisor , Major , Sex , StuID | :`pets_1.Pets` : PetType , pet_age , weight , PetID | :`pets_1.Has_Pet` : ",
        "struct_in": "| pets_1 | :`pets_1.Student` : Age , Fname , city_code , LName , Advisor , Major , Sex , StuID | :`pets_1.Pets` : PetType , pet_age , weight , PetID | :`pets_1.Has_Pet` :",
        "text_in": "What type of pet is the youngest animal, and how much does it weigh?",
        "seq_out": "MATCH (pets:`pets_1.Pets`) RETURN pets.PetType,pets.weight ORDER BY pets.pet_age LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (pets:`pets_1.Pets`) WHERE pets.pet_age > 1 RETURN pets.PetID,pets.weight",
        "query": "MATCH (pets:`pets_1.Pets`)\nWHERE pets.pet_age > 1\nRETURN pets.PetID,pets.weight",
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "pets_1",
        "db_tag_names": [
            ":`pets_1.Student`",
            ":`pets_1.Pets`",
            ":`pets_1.Has_Pet`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Age",
                "Fname",
                "city_code",
                "LName",
                "Advisor",
                "Major",
                "Sex",
                "StuID",
                "PetType",
                "pet_age",
                "weight",
                "PetID"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | pets_1 | :`pets_1.Student` : Age , Fname , city_code , LName , Advisor , Major , Sex , StuID | :`pets_1.Pets` : PetType , pet_age , weight , PetID | :`pets_1.Has_Pet` : ",
        "struct_in": "| pets_1 | :`pets_1.Student` : Age , Fname , city_code , LName , Advisor , Major , Sex , StuID | :`pets_1.Pets` : PetType , pet_age , weight , PetID | :`pets_1.Has_Pet` :",
        "text_in": "Find the id and weight of all pets whose age is older than 1.",
        "seq_out": "MATCH (pets:`pets_1.Pets`) WHERE pets.pet_age > 1 RETURN pets.PetID,pets.weight",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (pets:`pets_1.Pets`) WHERE pets.pet_age > 1 RETURN pets.PetID,pets.weight",
        "query": "MATCH (pets:`pets_1.Pets`)\nWHERE pets.pet_age > 1\nRETURN pets.PetID,pets.weight",
        "question": "What is the id and weight of every pet who is older than 1?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "pets_1",
        "db_tag_names": [
            ":`pets_1.Student`",
            ":`pets_1.Pets`",
            ":`pets_1.Has_Pet`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Age",
                "Fname",
                "city_code",
                "LName",
                "Advisor",
                "Major",
                "Sex",
                "StuID",
                "PetType",
                "pet_age",
                "weight",
                "PetID"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | pets_1 | :`pets_1.Student` : Age , Fname , city_code , LName , Advisor , Major , Sex , StuID | :`pets_1.Pets` : PetType , pet_age , weight , PetID | :`pets_1.Has_Pet` : ",
        "struct_in": "| pets_1 | :`pets_1.Student` : Age , Fname , city_code , LName , Advisor , Major , Sex , StuID | :`pets_1.Pets` : PetType , pet_age , weight , PetID | :`pets_1.Has_Pet` :",
        "text_in": "What is the id and weight of every pet who is older than 1?",
        "seq_out": "MATCH (pets:`pets_1.Pets`) WHERE pets.pet_age > 1 RETURN pets.PetID,pets.weight",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (continents:`car_1.continents`) RETURN count(*)",
        "query": "MATCH (continents:`car_1.continents`)\nRETURN count(*)",
        "question": "How many continents are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "How many continents are there?",
        "seq_out": "MATCH (continents:`car_1.continents`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (continents:`car_1.continents`) RETURN count(*)",
        "query": "MATCH (continents:`car_1.continents`)\nRETURN count(*)",
        "question": "What is the number of continents?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "What is the number of continents?",
        "seq_out": "MATCH (continents:`car_1.continents`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`car_1.continents`)-[]-(T2:`car_1.countries`) WITH count(T1.Id) AS count, T1.CountryName AS CountryName, T1.Continent AS Continent, T1.Continent AS ContinentId RETURN Continent,CountryName,count",
        "query": "MATCH (T1:`car_1.continents`)-[]-(T2:`car_1.countries`)\nWITH count(T1.ContId) AS count, T1.Continent AS Continent, T1.ContId AS ContId\nRETURN ContId,Continent,count",
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "seq_out": "MATCH (T1:`car_1.continents`)-[]-(T2:`car_1.countries`) WITH count(T1.ContId) AS count, T1.Continent AS Continent, T1.ContId AS ContId RETURN ContId,Continent,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`car_1.continents`)-[]-(T2:`car_1.countries`) WITH T1.Continent AS Continent, count(T1.Continent) AS count, T1.CountryId AS CountryId RETURN ContId,CountryName,count",
        "query": "MATCH (T1:`car_1.continents`)-[]-(T2:`car_1.countries`)\nWITH count(T1.ContId) AS count, T1.Continent AS Continent, T1.ContId AS ContId\nRETURN ContId,Continent,count",
        "question": "For each continent, list its id, name, and how many countries it has?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "For each continent, list its id, name, and how many countries it has?",
        "seq_out": "MATCH (T1:`car_1.continents`)-[]-(T2:`car_1.countries`) WITH count(T1.ContId) AS count, T1.Continent AS Continent, T1.ContId AS ContId RETURN ContId,Continent,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (countries:`car_1.countries`) RETURN count(*)",
        "query": "MATCH (countries:`car_1.countries`)\nRETURN count(*)",
        "question": "How many countries are listed?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "How many countries are listed?",
        "seq_out": "MATCH (countries:`car_1.countries`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (countries:`car_1.countries`) RETURN count(*)",
        "query": "MATCH (countries:`car_1.countries`)\nRETURN count(*)",
        "question": "How many countries exist?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "How many countries exist?",
        "seq_out": "MATCH (countries:`car_1.countries`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (car_makers:`car_1.car_makers`) WITH count(car_makers.Maker) AS count, car_makers.Id AS Id RETURN Maker,Id,count",
        "query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)\nWITH count(T1.Id) AS count, T1.Id AS Id, T1.FullName AS FullName\nRETURN FullName,Id,count",
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "How many models does each car maker produce? List maker full name, id and the number.",
        "seq_out": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`) WITH count(T1.Id) AS count, T1.Id AS Id, T1.FullName AS FullName RETURN FullName,Id,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (car_makers:`car_1.car_makers`) WITH count(car_makers.Id) AS count, car_makers.Id AS Id RETURN Maker,count,Id",
        "query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)\nWITH count(T1.Id) AS count, T1.Id AS Id, T1.FullName AS FullName\nRETURN FullName,Id,count",
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "What is the full name of each car maker, along with its id and how many models it produces?",
        "seq_out": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`) WITH count(T1.Id) AS count, T1.Id AS Id, T1.FullName AS FullName RETURN FullName,Id,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (car_names:`car_1.car_names`) RETURN car_names.Model ORDER BY car_names.Horsepower LIMIT 1",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nRETURN T1.Model\nORDER BY T2.Horsepower ASC\nLIMIT 1",
        "question": "Which model of the car has the minimum horsepower?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "Which model of the car has the minimum horsepower?",
        "seq_out": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`) RETURN T1.Model ORDER BY T2.Horsepower ASC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (car_names:`car_1.car_names`) RETURN car_names.Model ORDER BY car_names.Horsepower LIMIT 1",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nRETURN T1.Model\nORDER BY T2.Horsepower ASC\nLIMIT 1",
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "What is the model of the car with the smallest amount of horsepower?",
        "seq_out": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`) RETURN T1.Model ORDER BY T2.Horsepower ASC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (car_makers:`car_1.car_makers`) WITH count(car_makers.Maker) AS count, car_makers.Id AS Id RETURN Id,FullName",
        "query": "MATCH (T1:`car_1.model_list`)-[]-(T2:`car_1.car_makers`)\nWITH count(T2.Id) AS count, T2.Id AS Id, T2.FullName AS FullName\nRETURN count,FullName,Id",
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "seq_out": "MATCH (T1:`car_1.model_list`)-[]-(T2:`car_1.car_makers`) WITH count(T2.Id) AS count, T2.Id AS Id, T2.FullName AS FullName RETURN count,FullName,Id",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (car_names:`car_1.car_names`) WHERE car_names.Make = 'amc hornet' AND car_names.sportabout ='sw' RETURN car_names.Accelerate",
        "query": "MATCH (T1:`car_1.cars_data`)-[]-(T2:`car_1.car_names`)\nWHERE T2.Make = 'amc hornet sportabout (sw)'\nRETURN T1.Accelerate",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker ( amc ) , FullName | :`car_1.model_list` : Model ( amc ) , ModelId , Maker | :`car_1.car_names` : Model ( amc ) , Make ( amc hornet , amc hornet sportabout (sw) ) , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker ( amc ) , FullName | :`car_1.model_list` : Model ( amc ) , ModelId , Maker | :`car_1.car_names` : Model ( amc ) , Make ( amc hornet , amc hornet sportabout (sw) ) , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "seq_out": "MATCH (T1:`car_1.cars_data`)-[]-(T2:`car_1.car_names`) WHERE T2.Make = 'amc hornet sportabout (sw)' RETURN T1.Accelerate",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (car_names:`car_1.car_names`) WHERE car_names.Make = 'amc hornet' AND car_names.sportabout ='sw' RETURN car_names.Accelerate",
        "query": "MATCH (T1:`car_1.cars_data`)-[]-(T2:`car_1.car_names`)\nWHERE T2.Make = 'amc hornet sportabout (sw)'\nRETURN T1.Accelerate",
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker ( amc ) , FullName | :`car_1.model_list` : Model ( amc ) , ModelId , Maker | :`car_1.car_names` : Model ( amc ) , Make ( amc hornet , amc hornet sportabout (sw) ) , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker ( amc ) , FullName | :`car_1.model_list` : Model ( amc ) , ModelId , Maker | :`car_1.car_names` : Model ( amc ) , Make ( amc hornet , amc hornet sportabout (sw) ) , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "seq_out": "MATCH (T1:`car_1.cars_data`)-[]-(T2:`car_1.car_names`) WHERE T2.Make = 'amc hornet sportabout (sw)' RETURN T1.Accelerate",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cars_data:`car_1.cars_data`) WHERE car_names.Cylinders = 8 RETURN min(cars_data.Weight)",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974\nRETURN min(cars_data.Weight)",
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "seq_out": "MATCH (cars_data:`car_1.cars_data`) WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974 RETURN min(cars_data.Weight)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (car_names:`car_1.car_names`) WHERE car_names.Cylinders = 8 RETURN min(car_names.Weight)",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974\nRETURN min(cars_data.Weight)",
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "seq_out": "MATCH (cars_data:`car_1.cars_data`) WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974 RETURN min(cars_data.Weight)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (car_makers:`car_1.car_makers`) RETURN car_makers.Maker,car_makers.Model",
        "query": "MATCH (model_list:`car_1.model_list`)\nRETURN model_list.Maker,model_list.Model",
        "question": "What are all the makers and models?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "What are all the makers and models?",
        "seq_out": "MATCH (model_list:`car_1.model_list`) RETURN model_list.Maker,model_list.Model",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (car_makers:`car_1.car_makers`) RETURN car_makers.Maker,car_makers.Model",
        "query": "MATCH (model_list:`car_1.model_list`)\nRETURN model_list.Maker,model_list.Model",
        "question": "What are the makers and models?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "What are the makers and models?",
        "seq_out": "MATCH (model_list:`car_1.model_list`) RETURN model_list.Maker,model_list.Model",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (car_names:`car_1.car_names`) WHERE car_names.Cylinders = 3 RETURN max(car_names.Horsepower),max(car_names.Make)",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nWHERE T2.Cylinders = 3\nRETURN T2.Horsepower,T1.Make\nORDER BY T2.Horsepower DESC\nLIMIT 1",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "seq_out": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`) WHERE T2.Cylinders = 3 RETURN T2.Horsepower,T1.Make ORDER BY T2.Horsepower DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cars_data:`car_1.cars_data`) WHERE cars_data.Cylinders = 3 RETURN cars_data.Horsepower,cars_data.Make ORDER BY cars_data.Howsepower DESC LIMIT 3",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nWHERE T2.Cylinders = 3\nRETURN T2.Horsepower,T1.Make\nORDER BY T2.Horsepower DESC\nLIMIT 1",
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "seq_out": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`) WHERE T2.Cylinders = 3 RETURN T2.Horsepower,T1.Make ORDER BY T2.Horsepower DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (model_list:`car_1.model_list`) RETURN model_list.Model ORDER BY model_list.MPG DESC LIMIT 1",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nRETURN T1.Model\nORDER BY T2.MPG DESC\nLIMIT 1",
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "seq_out": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`) RETURN T1.Model ORDER BY T2.MPG DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cars_data:`car_1.cars_data`) WHERE cars_data.Model = 'volvo' RETURN avg(cars_data.Edispl)",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nWHERE T1.Model = 'volvo'\nRETURN avg(T2.Edispl)",
        "question": "What is the average edispl of the cars of model volvo?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker ( volvo ) , FullName ( Volvo ) | :`car_1.model_list` : Model ( volvo ) , ModelId , Maker | :`car_1.car_names` : Model ( volvo ) , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker ( volvo ) , FullName ( Volvo ) | :`car_1.model_list` : Model ( volvo ) , ModelId , Maker | :`car_1.car_names` : Model ( volvo ) , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "What is the average edispl of the cars of model volvo?",
        "seq_out": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`) WHERE T1.Model = 'volvo' RETURN avg(T2.Edispl)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (car_names:`car_1.car_names`) WHERE car_names.Model = 'volvo' RETURN avg(car_names.Edispl)",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nWHERE T1.Model = 'volvo'\nRETURN avg(T2.Edispl)",
        "question": "What is the average edispl for all volvos?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker ( volvo ) , FullName ( Volvo ) | :`car_1.model_list` : Model ( volvo ) , ModelId , Maker | :`car_1.car_names` : Model ( volvo ) , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker ( volvo ) , FullName ( Volvo ) | :`car_1.model_list` : Model ( volvo ) , ModelId , Maker | :`car_1.car_names` : Model ( volvo ) , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "What is the average edispl for all volvos?",
        "seq_out": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`) WHERE T1.Model = 'volvo' RETURN avg(T2.Edispl)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (car_names:`car_1.car_names`) WITH count(car_names.Model) AS count, car_names.Model AS Model RETURN Model ORDER BY count DESC LIMIT 1",
        "query": "MATCH (car_names:`car_1.car_names`)\nWITH car_names.Model AS Model, count(car_names.Model) AS count\nRETURN Model\nORDER BY count DESC\nLIMIT 1",
        "question": "Which model has the most version(make) of cars?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "Which model has the most version(make) of cars?",
        "seq_out": "MATCH (car_names:`car_1.car_names`) WITH car_names.Model AS Model, count(car_names.Model) AS count RETURN Model ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (model_list:`car_1.model_list`) WITH count(model_list.ModelId) AS count, model_list.Model AS Model RETURN Model ORDER BY count DESC LIMIT 1",
        "query": "MATCH (car_names:`car_1.car_names`)\nWITH car_names.Model AS Model, count(car_names.Model) AS count\nRETURN Model\nORDER BY count DESC\nLIMIT 1",
        "question": "What model has the most different versions?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "What model has the most different versions?",
        "seq_out": "MATCH (car_names:`car_1.car_names`) WITH car_names.Model AS Model, count(car_names.Model) AS count RETURN Model ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cars_data:`car_1.cars_data`) WHERE cars_data.Cylinders > 4 RETURN count(*)",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders > 4\nRETURN count(*)",
        "question": "How many cars have more than 4 cylinders?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "How many cars have more than 4 cylinders?",
        "seq_out": "MATCH (cars_data:`car_1.cars_data`) WHERE cars_data.Cylinders > 4 RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cars_data:`car_1.cars_data`) WHERE cars_data.Cylinders > 4 RETURN count(*)",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders > 4\nRETURN count(*)",
        "question": "What is the number of cars with more than 4 cylinders?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "What is the number of cars with more than 4 cylinders?",
        "seq_out": "MATCH (cars_data:`car_1.cars_data`) WHERE cars_data.Cylinders > 4 RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cars_data:`car_1.cars_data`) WHERE cars_data.Year = 1980 RETURN count(*)",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Year = 1980\nRETURN count(*)",
        "question": "how many cars were produced in 1980?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "how many cars were produced in 1980?",
        "seq_out": "MATCH (cars_data:`car_1.cars_data`) WHERE cars_data.Year = 1980 RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cars_data:`car_1.cars_data`) WHERE cars_data.Year = 1980 RETURN count(*)",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Year = 1980\nRETURN count(*)",
        "question": "In 1980, how many cars were made?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "In 1980, how many cars were made?",
        "seq_out": "MATCH (cars_data:`car_1.cars_data`) WHERE cars_data.Year = 1980 RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (car_makers:`car_1.car_makers`) WHERE car_makers.FullName = 'American Motor Company' RETURN count(*)",
        "query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)\nWHERE T1.FullName = 'American Motor Company'\nRETURN count(*)",
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent ( america ) | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName ( American Motor Company ) | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent ( america ) | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName ( American Motor Company ) | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "How many car models were produced by the maker with full name American Motor Company?",
        "seq_out": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`) WHERE T1.FullName = 'American Motor Company' RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (car_makers:`car_1.car_makers`) WHERE car_makers.Maker = 'American Motor Company' RETURN count(*)",
        "query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)\nWHERE T1.FullName = 'American Motor Company'\nRETURN count(*)",
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent ( america ) | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName ( American Motor Company ) | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent ( america ) | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName ( American Motor Company ) | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "What is the number of car models created by the car maker American Motor Company?",
        "seq_out": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`) WHERE T1.FullName = 'American Motor Company' RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (car_makers:`car_1.car_makers`) WITH count(*) AS count, car_makers.FullName AS FullName, car_makers.Id AS Id WHERE count > 3 RETURN FullName,Id",
        "query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)\nWITH count(*) AS count, T1.Id AS Id, T1.FullName AS FullName\nWHERE count  > 3\nRETURN FullName,Id",
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "Which makers designed more than 3 car models? List full name and the id.",
        "seq_out": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`) WITH count(*) AS count, T1.Id AS Id, T1.FullName AS FullName WHERE count > 3 RETURN FullName,Id",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (car_makers:`car_1.car_makers`) WITH count(*) AS count, car_makers.Id AS Id, car_makers.Name AS Maker WHERE count > 3 RETURN Maker,Id",
        "query": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`)\nWITH count(*) AS count, T1.Id AS Id, T1.FullName AS FullName\nWHERE count  > 3\nRETURN FullName,Id",
        "question": "What are the names and ids of all makers with more than 3 models?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "What are the names and ids of all makers with more than 3 models?",
        "seq_out": "MATCH (T1:`car_1.car_makers`)-[]-(T2:`car_1.model_list`) WITH count(*) AS count, T1.Id AS Id, T1.FullName AS FullName WHERE count > 3 RETURN FullName,Id",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cars_data:`car_1.cars_data`) WHERE cars_data.Weight  < 3000 AND cars_data.Weight > 4000 RETURN cars_data.Year",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE 3000<=cars_data.Weight<=4000\nRETURN DISTINCT cars_data.Year",
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "seq_out": "MATCH (cars_data:`car_1.cars_data`) WHERE 3000<=cars_data.Weight<=4000 RETURN DISTINCT cars_data.Year",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cars_data:`car_1.cars_data`) WHERE cars_data.Weight  < 4000 AND cars_data.Weight > 3000 RETURN DISTINCT cars_data.Year",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE 3000<=cars_data.Weight<=4000\nRETURN DISTINCT cars_data.Year",
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "seq_out": "MATCH (cars_data:`car_1.cars_data`) WHERE 3000<=cars_data.Weight<=4000 RETURN DISTINCT cars_data.Year",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (car_names:`car_1.car_names`) WHERE car_names.Model = 'volvo' RETURN count(DISTINCT car_names.Cylinders)",
        "query": "MATCH (T1:`car_1.cars_data`)-[]-(T2:`car_1.car_names`)\nWHERE T2.Model = 'volvo'\nRETURN T1.Cylinders\nORDER BY T1.Accelerate ASC\nLIMIT 1",
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker ( volvo ) , FullName ( Volvo ) | :`car_1.model_list` : Model ( volvo ) , ModelId , Maker | :`car_1.car_names` : Model ( volvo ) , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker ( volvo ) , FullName ( Volvo ) | :`car_1.model_list` : Model ( volvo ) , ModelId , Maker | :`car_1.car_names` : Model ( volvo ) , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "seq_out": "MATCH (T1:`car_1.cars_data`)-[]-(T2:`car_1.car_names`) WHERE T2.Model = 'volvo' RETURN T1.Cylinders ORDER BY T1.Accelerate ASC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cars_data:`car_1.cars_data`) WHERE cars_data.Model = 'volvo' RETURN count(DISTINCT cars_data.Cylinders)",
        "query": "MATCH (T1:`car_1.cars_data`)-[]-(T2:`car_1.car_names`)\nWHERE T2.Model = 'volvo'\nRETURN T1.Cylinders\nORDER BY T1.Accelerate ASC\nLIMIT 1",
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker ( volvo ) , FullName ( Volvo ) | :`car_1.model_list` : Model ( volvo ) , ModelId , Maker | :`car_1.car_names` : Model ( volvo ) , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker ( volvo ) , FullName ( Volvo ) | :`car_1.model_list` : Model ( volvo ) , ModelId , Maker | :`car_1.car_names` : Model ( volvo ) , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "seq_out": "MATCH (T1:`car_1.cars_data`)-[]-(T2:`car_1.car_names`) WHERE T2.Model = 'volvo' RETURN T1.Cylinders ORDER BY T1.Accelerate ASC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cars_data:`car_1.cars_data`) WHERE cars_data.Cylinders > 6 RETURN count(*)",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders > 6\nRETURN count(*)",
        "question": "How many cars has over 6 cylinders?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "How many cars has over 6 cylinders?",
        "seq_out": "MATCH (cars_data:`car_1.cars_data`) WHERE cars_data.Cylinders > 6 RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (car_names:`car_1.car_names`) WHERE car_names.Cylinders > 6 RETURN count(*)",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders > 6\nRETURN count(*)",
        "question": "What is the number of carsw ith over 6 cylinders?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "What is the number of carsw ith over 6 cylinders?",
        "seq_out": "MATCH (cars_data:`car_1.cars_data`) WHERE cars_data.Cylinders > 6 RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cars_data:`car_1.cars_data`) WHERE cars_data.Cylinders = 4 RETURN cars_data.Model ORDER BY cars_data.Horsepower DESC LIMIT 1",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nWHERE T2.Cylinders = 4\nRETURN T1.Model\nORDER BY T2.Horsepower DESC\nLIMIT 1",
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "seq_out": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`) WHERE T2.Cylinders = 4 RETURN T1.Model ORDER BY T2.Horsepower DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cars_data:`car_1.cars_data`) RETURN cars_data.Model ORDER BY cars_data.Horsepower DESC LIMIT 4",
        "query": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`)\nWHERE T2.Cylinders = 4\nRETURN T1.Model\nORDER BY T2.Horsepower DESC\nLIMIT 1",
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "seq_out": "MATCH (T1:`car_1.car_names`)-[]-(T2:`car_1.cars_data`) WHERE T2.Cylinders = 4 RETURN T1.Model ORDER BY T2.Horsepower DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (car_makers:`car_1.car_makers`) WHERE car_makers.Cylinders >= 8 OR car_makers.Year  < 1980 RETURN max(car_makers.MPG)",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders = 8 OR cars_data.Year < 1980\nRETURN max(cars_data.MPG)",
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "seq_out": "MATCH (cars_data:`car_1.cars_data`) WHERE cars_data.Cylinders = 8 OR cars_data.Year < 1980 RETURN max(cars_data.MPG)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cars_data:`car_1.cars_data`) WHERE cars_data.Cylinders > 8 OR cars_data.Year  < 1980 RETURN max(cars_data.MPG)",
        "query": "MATCH (cars_data:`car_1.cars_data`)\nWHERE cars_data.Cylinders = 8 OR cars_data.Year < 1980\nRETURN max(cars_data.MPG)",
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "car_1",
        "db_tag_names": [
            ":`car_1.continents`",
            ":`car_1.countries`",
            ":`car_1.car_makers`",
            ":`car_1.model_list`",
            ":`car_1.car_names`",
            ":`car_1.cars_data`",
            ":`car_1.continents_HAS_car_1.countries`",
            ":`car_1.car_makers_HAS_car_1.model_list`",
            ":`car_1.model_list_HAS_car_1.car_names`",
            ":`car_1.car_names_HAS_car_1.cars_data`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "property_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Country",
                "Id",
                "Maker",
                "FullName",
                "Model",
                "ModelId",
                "Maker",
                "Model",
                "Make",
                "MakeId",
                "MPG",
                "Accelerate",
                "Id",
                "Edispl",
                "Weight",
                "Cylinders",
                "Horsepower",
                "Year"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` : ",
        "struct_in": "| car_1 | :`car_1.continents` : ContId , Continent | :`car_1.countries` : CountryId , CountryName , Continent | :`car_1.car_makers` : Country , Id , Maker , FullName | :`car_1.model_list` : Model , ModelId , Maker | :`car_1.car_names` : Model , Make , MakeId | :`car_1.cars_data` : MPG , Accelerate , Id , Edispl , Weight , Cylinders , Horsepower , Year | :`car_1.continents_HAS_car_1.countries` :  | :`car_1.car_makers_HAS_car_1.model_list` :  | :`car_1.model_list_HAS_car_1.car_names` :  | :`car_1.car_names_HAS_car_1.cars_data` :",
        "text_in": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "seq_out": "MATCH (cars_data:`car_1.cars_data`) WHERE cars_data.Cylinders = 8 OR cars_data.Year < 1980 RETURN max(cars_data.MPG)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (airlines:`flight_2.airlines`) WHERE airlines.Airline = 'JetBlue Airways' RETURN airlines.Country",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Airline = 'JetBlue Airways'\nRETURN airlines.Country",
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : Country , uid , Airline ( JetBlue Airways ) , Abbreviation ( JetBlue ) | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : Country , uid , Airline ( JetBlue Airways ) , Abbreviation ( JetBlue ) | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "text_in": "Which country does Airline \"JetBlue Airways\" belong to?",
        "seq_out": "MATCH (airlines:`flight_2.airlines`) WHERE airlines.Airline = 'JetBlue Airways' RETURN airlines.Country",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (airlines:`flight_2.airlines`) WHERE airlines.Airline = 'JetBlue Airways' RETURN airlines.Country",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Airline = 'JetBlue Airways'\nRETURN airlines.Country",
        "question": "What country is Jetblue Airways affiliated with?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : Country , uid , Airline ( JetBlue Airways ) , Abbreviation ( JetBlue ) | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : Country , uid , Airline ( JetBlue Airways ) , Abbreviation ( JetBlue ) | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "text_in": "What country is Jetblue Airways affiliated with?",
        "seq_out": "MATCH (airlines:`flight_2.airlines`) WHERE airlines.Airline = 'JetBlue Airways' RETURN airlines.Country",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (airlines:`flight_2.airlines`) WHERE airlines.Airline = 'JetBlue Airways' RETURN airlines.Abbreviation",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Airline = 'JetBlue Airways'\nRETURN airlines.Abbreviation",
        "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : Country , uid , Airline ( JetBlue Airways ) , Abbreviation ( JetBlue ) | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : Country , uid , Airline ( JetBlue Airways ) , Abbreviation ( JetBlue ) | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "text_in": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "seq_out": "MATCH (airlines:`flight_2.airlines`) WHERE airlines.Airline = 'JetBlue Airways' RETURN airlines.Abbreviation",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (airlines:`flight_2.airlines`) WHERE airlines.Airline = 'JetBlue Airways' RETURN airlines.Abbreviation",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Airline = 'JetBlue Airways'\nRETURN airlines.Abbreviation",
        "question": "Which abbreviation corresponds to Jetblue Airways?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : Country , uid , Airline ( JetBlue Airways ) , Abbreviation ( JetBlue ) | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : Country , uid , Airline ( JetBlue Airways ) , Abbreviation ( JetBlue ) | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "text_in": "Which abbreviation corresponds to Jetblue Airways?",
        "seq_out": "MATCH (airlines:`flight_2.airlines`) WHERE airlines.Airline = 'JetBlue Airways' RETURN airlines.Abbreviation",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (airlines:`flight_2.airlines`) WHERE airlines.Country = 'USA' RETURN airlines.Airline,airlines.Abbreviation",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Country = 'USA'\nRETURN airlines.Airline,airlines.Abbreviation",
        "question": "List all airline names and their abbreviations in \"USA\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : Country ( USA ) , uid , Airline , Abbreviation | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : Country ( USA ) , uid , Airline , Abbreviation | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "text_in": "List all airline names and their abbreviations in \"USA\".",
        "seq_out": "MATCH (airlines:`flight_2.airlines`) WHERE airlines.Country = 'USA' RETURN airlines.Airline,airlines.Abbreviation",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (airlines:`flight_2.airlines`) WHERE airlines.Country = 'USA' RETURN airlines.Airline,airlines.Abbreviation",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Country = 'USA'\nRETURN airlines.Airline,airlines.Abbreviation",
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : Country ( USA ) , uid , Airline , Abbreviation | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : Country ( USA ) , uid , Airline , Abbreviation | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "text_in": "What are the airline names and abbreviations for airlines in the USA?",
        "seq_out": "MATCH (airlines:`flight_2.airlines`) WHERE airlines.Country = 'USA' RETURN airlines.Airline,airlines.Abbreviation",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (airlines:`flight_2.airlines`) RETURN count(*)",
        "query": "MATCH (airlines:`flight_2.airlines`)\nRETURN count(*)",
        "question": "How many airlines do we have?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : Country , uid , Airline , Abbreviation | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : Country , uid , Airline , Abbreviation | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "text_in": "How many airlines do we have?",
        "seq_out": "MATCH (airlines:`flight_2.airlines`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (airlines:`flight_2.airlines`) RETURN count(*)",
        "query": "MATCH (airlines:`flight_2.airlines`)\nRETURN count(*)",
        "question": "What is the total number of airlines?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : Country , uid , Airline , Abbreviation | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : Country , uid , Airline , Abbreviation | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "text_in": "What is the total number of airlines?",
        "seq_out": "MATCH (airlines:`flight_2.airlines`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (airports:`flight_2.airports`) RETURN count(*)",
        "query": "MATCH (airports:`flight_2.airports`)\nRETURN count(*)",
        "question": "How many airports do we have?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : Country , uid , Airline , Abbreviation | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : Country , uid , Airline , Abbreviation | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "text_in": "How many airports do we have?",
        "seq_out": "MATCH (airports:`flight_2.airports`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (airports:`flight_2.airports`) RETURN count(*)",
        "query": "MATCH (airports:`flight_2.airports`)\nRETURN count(*)",
        "question": "Return the number of  airports.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : Country , uid , Airline , Abbreviation | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : Country , uid , Airline , Abbreviation | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "text_in": "Return the number of  airports.",
        "seq_out": "MATCH (airports:`flight_2.airports`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (airlines:`flight_2.airlines`) WHERE airlines.Abbreviation = 'UAL' RETURN airlines.Airline",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Abbreviation = 'UAL'\nRETURN airlines.Airline",
        "question": "Which airline has abbreviation 'UAL'?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : Country , uid , Airline , Abbreviation ( UAL ) | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : Country , uid , Airline , Abbreviation ( UAL ) | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "text_in": "Which airline has abbreviation 'UAL'?",
        "seq_out": "MATCH (airlines:`flight_2.airlines`) WHERE airlines.Abbreviation = 'UAL' RETURN airlines.Airline",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (airlines:`flight_2.airlines`) WHERE airlines.Abbreviation = 'UAL' RETURN airlines.Airline",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Abbreviation = 'UAL'\nRETURN airlines.Airline",
        "question": "Give the airline with abbreviation 'UAL'.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : Country , uid , Airline , Abbreviation ( UAL ) | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : Country , uid , Airline , Abbreviation ( UAL ) | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "text_in": "Give the airline with abbreviation 'UAL'.",
        "seq_out": "MATCH (airlines:`flight_2.airlines`) WHERE airlines.Abbreviation = 'UAL' RETURN airlines.Airline",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (airlines:`flight_2.airlines`) WHERE airlines.Country = 'USA' RETURN count(*)",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Country = 'USA'\nRETURN count(*)",
        "question": "How many airlines are from USA?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : Country ( USA ) , uid , Airline , Abbreviation | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : Country ( USA ) , uid , Airline , Abbreviation | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "text_in": "How many airlines are from USA?",
        "seq_out": "MATCH (airlines:`flight_2.airlines`) WHERE airlines.Country = 'USA' RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (airlines:`flight_2.airlines`) WHERE airlines.Country = 'USA' RETURN count(*)",
        "query": "MATCH (airlines:`flight_2.airlines`)\nWHERE airlines.Country = 'USA'\nRETURN count(*)",
        "question": "Return the number of airlines in the USA.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : Country ( USA ) , uid , Airline , Abbreviation | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : Country ( USA ) , uid , Airline , Abbreviation | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "text_in": "Return the number of airlines in the USA.",
        "seq_out": "MATCH (airlines:`flight_2.airlines`) WHERE airlines.Country = 'USA' RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (airports:`flight_2.airports`) WHERE airports.AirportCode = 'AKO' RETURN airports.AirportName",
        "query": "MATCH (airports:`flight_2.airports`)\nWHERE airports.AirportCode = 'AKO'\nRETURN airports.AirportName",
        "question": "What is the airport name for airport 'AKO'?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : Country , uid , Airline , Abbreviation | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode ( AKO ) , AirportName | :`flight_2.flights` : FlightNo , SourceAirport (  AKO ) , Airline , DestAirport (  AKO )",
        "struct_in": "| flight_2 | :`flight_2.airlines` : Country , uid , Airline , Abbreviation | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode ( AKO ) , AirportName | :`flight_2.flights` : FlightNo , SourceAirport (  AKO ) , Airline , DestAirport (  AKO )",
        "text_in": "What is the airport name for airport 'AKO'?",
        "seq_out": "MATCH (airports:`flight_2.airports`) WHERE airports.AirportCode = 'AKO' RETURN airports.AirportName",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (airports:`flight_2.airports`) WHERE airports.AirportCode = 'AKO' RETURN airports.AirportName",
        "query": "MATCH (airports:`flight_2.airports`)\nWHERE airports.AirportCode = 'AKO'\nRETURN airports.AirportName",
        "question": "Return the name of the airport with code 'AKO'.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : Country , uid , Airline , Abbreviation | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode ( AKO ) , AirportName | :`flight_2.flights` : FlightNo , SourceAirport (  AKO ) , Airline , DestAirport (  AKO )",
        "struct_in": "| flight_2 | :`flight_2.airlines` : Country , uid , Airline , Abbreviation | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode ( AKO ) , AirportName | :`flight_2.flights` : FlightNo , SourceAirport (  AKO ) , Airline , DestAirport (  AKO )",
        "text_in": "Return the name of the airport with code 'AKO'.",
        "seq_out": "MATCH (airports:`flight_2.airports`) WHERE airports.AirportCode = 'AKO' RETURN airports.AirportName",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (airports:`flight_2.airports`) WHERE NOT (airports:`flight_2.airports`)-[:`flight_2.flights`]-() RETURN airports.AirportName",
        "query": "MATCH (airports:`flight_2.airports`)\nWHERE NOT (airports:`flight_2.airports`)-[:`flight_2.flights`]-()\nRETURN airports.AirportName",
        "question": "Find the name of airports which do not have any flight in and out.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : Country , uid , Airline , Abbreviation | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : Country , uid , Airline , Abbreviation | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "text_in": "Find the name of airports which do not have any flight in and out.",
        "seq_out": "MATCH (airports:`flight_2.airports`) WHERE NOT (airports:`flight_2.airports`)-[:`flight_2.flights`]-() RETURN airports.AirportName",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (airports:`flight_2.airports`) WHERE NOT (airports:`flight_2.airports`)-[:`flight_2.flights`]-() RETURN airports.AirportName",
        "query": "MATCH (airports:`flight_2.airports`)\nWHERE NOT (airports:`flight_2.airports`)-[:`flight_2.flights`]-()\nRETURN airports.AirportName",
        "question": "Which airports do not have departing or arriving flights?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "flight_2",
        "db_tag_names": [
            ":`flight_2.airlines`",
            ":`flight_2.airports`",
            ":`flight_2.flights`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "CountryAbbrev",
                "AirportCode",
                "AirportName",
                "FlightNo",
                "SourceAirport",
                "Airline",
                "DestAirport"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String"
        ],
        "serialized_schema": " | flight_2 | :`flight_2.airlines` : Country , uid , Airline , Abbreviation | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "struct_in": "| flight_2 | :`flight_2.airlines` : Country , uid , Airline , Abbreviation | :`flight_2.airports` : Country , City , CountryAbbrev , AirportCode , AirportName | :`flight_2.flights` : FlightNo , SourceAirport , Airline , DestAirport",
        "text_in": "Which airports do not have departing or arriving flights?",
        "seq_out": "MATCH (airports:`flight_2.airports`) WHERE NOT (airports:`flight_2.airports`)-[:`flight_2.flights`]-() RETURN airports.AirportName",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (employee:`employee_hire_evaluation.employee`) RETURN count(*)",
        "query": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN count(*)",
        "question": "How many employees are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "text_in": "How many employees are there?",
        "seq_out": "MATCH (employee:`employee_hire_evaluation.employee`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (employee:`employee_hire_evaluation.employee`) RETURN count(*)",
        "query": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN count(*)",
        "question": "Count the number of employees",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "text_in": "Count the number of employees",
        "seq_out": "MATCH (employee:`employee_hire_evaluation.employee`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (employee:`employee_hire_evaluation.employee`) RETURN employee.Name ORDER BY employee.Age ASC",
        "query": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN employee.Name\nORDER BY employee.Age",
        "question": "Sort employee names by their age in ascending order.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "text_in": "Sort employee names by their age in ascending order.",
        "seq_out": "MATCH (employee:`employee_hire_evaluation.employee`) RETURN employee.Name ORDER BY employee.Age",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (employee:`employee_hire_evaluation.employee`) RETURN employee.Name ORDER BY employee.Age ASC",
        "query": "MATCH (employee:`employee_hire_evaluation.employee`)\nRETURN employee.Name\nORDER BY employee.Age",
        "question": "List the names of employees and sort in ascending order of age.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "text_in": "List the names of employees and sort in ascending order of age.",
        "seq_out": "MATCH (employee:`employee_hire_evaluation.employee`) RETURN employee.Name ORDER BY employee.Age",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (employee:`employee_hire_evaluation.employee`) WITH employee.City AS City, count(employee.City) AS count RETURN City,count",
        "query": "MATCH (employee:`employee_hire_evaluation.employee`)\nWITH count(employee.City) AS count, employee.City AS City\nRETURN count,City",
        "question": "What is the number of employees from each city?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "text_in": "What is the number of employees from each city?",
        "seq_out": "MATCH (employee:`employee_hire_evaluation.employee`) WITH count(employee.City) AS count, employee.City AS City RETURN count,City",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (employee:`employee_hire_evaluation.employee`) WITH employee.City AS City, count(employee.City) AS count RETURN City,count",
        "query": "MATCH (employee:`employee_hire_evaluation.employee`)\nWITH count(employee.City) AS count, employee.City AS City\nRETURN count,City",
        "question": "Count the number of employees for each city.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "text_in": "Count the number of employees for each city.",
        "seq_out": "MATCH (employee:`employee_hire_evaluation.employee`) WITH count(employee.City) AS count, employee.City AS City RETURN count,City",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (employee:`employee_hire_evaluation.employee`) WHERE employee.Age  < 30 WITH count(*) AS count, employee.City AS City WHERE count > 1 RETURN City",
        "query": "MATCH (employee:`employee_hire_evaluation.employee`)\nWHERE employee.Age < 30\nWITH count(*) AS count, employee.City AS City\nWHERE count  > 1\nRETURN City",
        "question": "Which cities do more than one employee under age 30 come from?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "text_in": "Which cities do more than one employee under age 30 come from?",
        "seq_out": "MATCH (employee:`employee_hire_evaluation.employee`) WHERE employee.Age < 30 WITH count(*) AS count, employee.City AS City WHERE count > 1 RETURN City",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (employee:`employee_hire_evaluation.employee`) WHERE employee.Age  < 30 WITH count(*) AS count, employee.City AS City WHERE count > 1 RETURN City",
        "query": "MATCH (employee:`employee_hire_evaluation.employee`)\nWHERE employee.Age < 30\nWITH count(*) AS count, employee.City AS City\nWHERE count  > 1\nRETURN City",
        "question": "Find the cities that have more than one employee under age 30.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "text_in": "Find the cities that have more than one employee under age 30.",
        "seq_out": "MATCH (employee:`employee_hire_evaluation.employee`) WHERE employee.Age < 30 WITH count(*) AS count, employee.City AS City WHERE count > 1 RETURN City",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (shop:`employee_hire_evaluation.shop`) WITH count(shop.Location) AS count, shop.Location AS Location RETURN Location,count",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nWITH shop.Location AS Location, count(shop.Location) AS count\nRETURN count,Location",
        "question": "Find the number of shops in each location.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "text_in": "Find the number of shops in each location.",
        "seq_out": "MATCH (shop:`employee_hire_evaluation.shop`) WITH shop.Location AS Location, count(shop.Location) AS count RETURN count,Location",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (shop:`employee_hire_evaluation.shop`) WITH count(shop.Location) AS count, shop.Location AS Location RETURN Location,count",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nWITH shop.Location AS Location, count(shop.Location) AS count\nRETURN count,Location",
        "question": "How many shops are there in each location?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "text_in": "How many shops are there in each location?",
        "seq_out": "MATCH (shop:`employee_hire_evaluation.shop`) WITH shop.Location AS Location, count(shop.Location) AS count RETURN count,Location",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (shop:`employee_hire_evaluation.shop`) RETURN shop.Manager_name,shop.District ORDER BY shop.Number_products DESC LIMIT 1",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.Manager_name,shop.District\nORDER BY shop.Number_products DESC\nLIMIT 1",
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "text_in": "Find the manager name and district of the shop whose number of products is the largest.",
        "seq_out": "MATCH (shop:`employee_hire_evaluation.shop`) RETURN shop.Manager_name,shop.District ORDER BY shop.Number_products DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (shop:`employee_hire_evaluation.shop`) RETURN shop.Manager_name,shop.District ORDER BY shop.Number_products DESC LIMIT 1",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.Manager_name,shop.District\nORDER BY shop.Number_products DESC\nLIMIT 1",
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "text_in": "What are the manager name and district of the shop that sells the largest number of products?",
        "seq_out": "MATCH (shop:`employee_hire_evaluation.shop`) RETURN shop.Manager_name,shop.District ORDER BY shop.Number_products DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (shop:`employee_hire_evaluation.shop`) RETURN min(shop.Number_products),max(shop.Number_products)",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN min(shop.Number_products),max(shop.Number_products)",
        "question": "find the minimum and maximum number of products of all stores.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "text_in": "find the minimum and maximum number of products of all stores.",
        "seq_out": "MATCH (shop:`employee_hire_evaluation.shop`) RETURN min(shop.Number_products),max(shop.Number_products)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (shop:`employee_hire_evaluation.shop`) RETURN min(shop.Number_products),max(shop.Number_products)",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN min(shop.Number_products),max(shop.Number_products)",
        "question": "What are the minimum and maximum number of products across all the shops?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "text_in": "What are the minimum and maximum number of products across all the shops?",
        "seq_out": "MATCH (shop:`employee_hire_evaluation.shop`) RETURN min(shop.Number_products),max(shop.Number_products)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (shop:`employee_hire_evaluation.shop`) RETURN shop.Name,shop.Location,shop.District ORDER BY shop.Number_products DESC",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.Name,shop.Location,shop.District\nORDER BY shop.Number_products DESC",
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "text_in": "Return the name, location and district of all shops in descending order of number of products.",
        "seq_out": "MATCH (shop:`employee_hire_evaluation.shop`) RETURN shop.Name,shop.Location,shop.District ORDER BY shop.Number_products DESC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (shop:`employee_hire_evaluation.shop`) RETURN shop.Name,shop.Location,shop.District ORDER BY shop.Number_products DESC",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN shop.Name,shop.Location,shop.District\nORDER BY shop.Number_products DESC",
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "text_in": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "seq_out": "MATCH (shop:`employee_hire_evaluation.shop`) RETURN shop.Name,shop.Location,shop.District ORDER BY shop.Number_products DESC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (shop:`employee_hire_evaluation.shop`) RETURN count(DISTINCT shop.Location)",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN count(DISTINCT shop.Location)",
        "question": "How many different store locations are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "text_in": "How many different store locations are there?",
        "seq_out": "MATCH (shop:`employee_hire_evaluation.shop`) RETURN count(DISTINCT shop.Location)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (shop:`employee_hire_evaluation.shop`) RETURN count(DISTINCT shop.Location)",
        "query": "MATCH (shop:`employee_hire_evaluation.shop`)\nRETURN count(DISTINCT shop.Location)",
        "question": "Count the number of distinct store locations.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "employee_hire_evaluation",
        "db_tag_names": [
            ":`employee_hire_evaluation.employee`",
            ":`employee_hire_evaluation.shop`",
            ":`employee_hire_evaluation.hiring`",
            ":`employee_hire_evaluation.evaluation`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "City",
                "Employee_ID",
                "Age",
                "Name",
                "Name",
                "Manager_name",
                "Number_products",
                "Shop_ID",
                "Location",
                "District",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Shop_ID",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Double"
        ],
        "serialized_schema": " | employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "struct_in": "| employee_hire_evaluation | :`employee_hire_evaluation.employee` : City , Employee_ID , Age , Name | :`employee_hire_evaluation.shop` : Name , Manager_name , Number_products , Shop_ID , Location , District | :`employee_hire_evaluation.hiring` : Employee_ID , Start_from , Is_full_time , Shop_ID | :`employee_hire_evaluation.evaluation` : Employee_ID , Year_awarded , Bonus",
        "text_in": "Count the number of distinct store locations.",
        "seq_out": "MATCH (shop:`employee_hire_evaluation.shop`) RETURN count(DISTINCT shop.Location)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) RETURN count(*)",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN count(*)",
        "question": "How many documents do we have?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "How many documents do we have?",
        "seq_out": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) RETURN count(*)",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN count(*)",
        "question": "Count the number of documents.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Count the number of documents.",
        "seq_out": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) RETURN documents.Document_ID,documents.Document_Name,documents.Document_Description",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN documents.Document_ID,documents.Document_Name,documents.Document_Description",
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "List document IDs, document names, and document descriptions for all documents.",
        "seq_out": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) RETURN documents.Document_ID,documents.Document_Name,documents.Document_Description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) RETURN documents.Document_ID,documents.Document_Name,documents.Document_Description",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN documents.Document_ID,documents.Document_Name,documents.Document_Description",
        "question": "What are the ids, names, and descriptions for all documents?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "What are the ids, names, and descriptions for all documents?",
        "seq_out": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) RETURN documents.Document_ID,documents.Document_Name,documents.Document_Description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WHERE documents.Document_Name = 'Robbin CV' RETURN documents.Document_ID,documents.Template_ID,documents.Document_Description",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWHERE documents.Document_Name = 'Robbin CV'\nRETURN documents.Document_ID,documents.Template_ID,documents.Document_Description",
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description ( CV ) , Template_Type_Code ( CV ) | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code ( CV ) , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name ( Robbin CV ) , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description ( CV ) , Template_Type_Code ( CV ) | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code ( CV ) , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name ( Robbin CV ) , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "seq_out": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WHERE documents.Document_Name = 'Robbin CV' RETURN documents.Document_ID,documents.Template_ID,documents.Document_Description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WHERE documents.Document_Name = 'Robbin CV' RETURN documents.Document_ID,documents.Template_ID,documents.Document_Description",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWHERE documents.Document_Name = 'Robbin CV'\nRETURN documents.Document_ID,documents.Template_ID,documents.Document_Description",
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description ( CV ) , Template_Type_Code ( CV ) | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code ( CV ) , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name ( Robbin CV ) , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description ( CV ) , Template_Type_Code ( CV ) | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code ( CV ) , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name ( Robbin CV ) , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "seq_out": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WHERE documents.Document_Name = 'Robbin CV' RETURN documents.Document_ID,documents.Template_ID,documents.Document_Description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) RETURN count(DISTINCT documents.Template_ID)",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN count(DISTINCT documents.Template_ID)",
        "question": "How many different templates do all document use?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "How many different templates do all document use?",
        "seq_out": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) RETURN count(DISTINCT documents.Template_ID)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) RETURN count(DISTINCT documents.Template_ID)",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nRETURN count(DISTINCT documents.Template_ID)",
        "question": "Count the number of different templates used for documents.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Count the number of different templates used for documents.",
        "seq_out": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) RETURN count(DISTINCT documents.Template_ID)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WHERE documents.Template_Type_Code = 'PPT' RETURN count(*)",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Documents`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`)\nWHERE T2.Template_Type_Code = 'PPT'\nRETURN count(*)",
        "question": "How many documents are using the template with type code 'PPT'?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code ( PPT ) | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code ( PPT ) , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code ( PPT ) | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code ( PPT ) , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "How many documents are using the template with type code 'PPT'?",
        "seq_out": "MATCH (T1:`cre_Doc_Template_Mgt.Documents`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`) WHERE T2.Template_Type_Code = 'PPT' RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WHERE documents.Template_Type_Code = 'PPT' RETURN count(*)",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Documents`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`)\nWHERE T2.Template_Type_Code = 'PPT'\nRETURN count(*)",
        "question": "Count the number of documents that use the PPT template type.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code ( PPT ) | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code ( PPT ) , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code ( PPT ) | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code ( PPT ) , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Count the number of documents that use the PPT template type.",
        "seq_out": "MATCH (T1:`cre_Doc_Template_Mgt.Documents`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`) WHERE T2.Template_Type_Code = 'PPT' RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WITH documents.Template_ID AS Template_ID, count(documents.Template_ID) AS count RETURN Template_ID,count",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWITH count(documents.Template_ID) AS count, documents.Template_ID AS Template_ID\nRETURN Template_ID,count",
        "question": "Show all template ids and number of documents using each template.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Show all template ids and number of documents using each template.",
        "seq_out": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WITH count(documents.Template_ID) AS count, documents.Template_ID AS Template_ID RETURN Template_ID,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WITH documents.Template_ID AS Template_ID, count(documents.Template_ID) AS count RETURN Template_ID,count",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWITH count(documents.Template_ID) AS count, documents.Template_ID AS Template_ID\nRETURN Template_ID,count",
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "What are all different template ids used for documents, and how many times were each of them used?",
        "seq_out": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WITH count(documents.Template_ID) AS count, documents.Template_ID AS Template_ID RETURN Template_ID,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WITH count(documents.Template_ID) AS count, documents.Template_Type_Code AS Template_Type_Code RETURN Template_ID,Template_Type_Code ORDER BY count DESC LIMIT 1",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Documents`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`)\nWITH count(T1.Template_ID) AS count, T1.Template_ID AS Template_ID, T2.Template_Type_Code AS Template_Type_Code\nRETURN Template_ID,Template_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "question": "What is the id and type code for the template used by the most documents?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "What is the id and type code for the template used by the most documents?",
        "seq_out": "MATCH (T1:`cre_Doc_Template_Mgt.Documents`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`) WITH count(T1.Template_ID) AS count, T1.Template_ID AS Template_ID, T2.Template_Type_Code AS Template_Type_Code RETURN Template_ID,Template_Type_Code ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WITH count(documents.Template_ID) AS count, documents.Template_ID AS Template_ID RETURN Template_ID,Template_Type_Code ORDER BY count DESC LIMIT 1",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Documents`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`)\nWITH count(T1.Template_ID) AS count, T1.Template_ID AS Template_ID, T2.Template_Type_Code AS Template_Type_Code\nRETURN Template_ID,Template_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Return the id and type code of the template that is used for the greatest number of documents.",
        "seq_out": "MATCH (T1:`cre_Doc_Template_Mgt.Documents`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`) WITH count(T1.Template_ID) AS count, T1.Template_ID AS Template_ID, T2.Template_Type_Code AS Template_Type_Code RETURN Template_ID,Template_Type_Code ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WITH count(*) AS count, documents.Template_ID AS Template_ID WHERE count > 1 RETURN Template_ID",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWITH count(*) AS count, documents.Template_ID AS Template_ID\nWHERE count  > 1\nRETURN Template_ID",
        "question": "Show ids for all templates that are used by more than one document.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Show ids for all templates that are used by more than one document.",
        "seq_out": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WITH count(*) AS count, documents.Template_ID AS Template_ID WHERE count > 1 RETURN Template_ID",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WITH count(*) AS count, documents.Template_ID AS Template_ID WHERE count > 1 RETURN Template_ID",
        "query": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`)\nWITH count(*) AS count, documents.Template_ID AS Template_ID\nWHERE count  > 1\nRETURN Template_ID",
        "question": "What are the template ids of any templates used in more than a single document?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "What are the template ids of any templates used in more than a single document?",
        "seq_out": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WITH count(*) AS count, documents.Template_ID AS Template_ID WHERE count > 1 RETURN Template_ID",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) RETURN count(*)",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN count(*)",
        "question": "How many templates do we have?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "How many templates do we have?",
        "seq_out": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) RETURN count(*)",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN count(*)",
        "question": "Count the number of templates.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Count the number of templates.",
        "seq_out": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) RETURN templates.Template_ID,templates.Version_Number,templates.Template_Type_Code",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN templates.Template_ID,templates.Version_Number,templates.Template_Type_Code",
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Show template ids, version numbers, and template type codes for all templates.",
        "seq_out": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) RETURN templates.Template_ID,templates.Version_Number,templates.Template_Type_Code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) RETURN templates.Template_ID,templates.Version_Number,templates.Template_Type_Code",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN templates.Template_ID,templates.Version_Number,templates.Template_Type_Code",
        "question": "What are the ids, version numbers, and type codes for each template?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "What are the ids, version numbers, and type codes for each template?",
        "seq_out": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) RETURN templates.Template_ID,templates.Version_Number,templates.Template_Type_Code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) RETURN DISTINCT templates.Template_Type_Code",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN DISTINCT templates.Template_Type_Code",
        "question": "Show all distinct template type codes for all templates.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Show all distinct template type codes for all templates.",
        "seq_out": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) RETURN DISTINCT templates.Template_Type_Code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) RETURN DISTINCT templates.Template_Type_Code",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nRETURN DISTINCT templates.Template_Type_Code",
        "question": "What are the different template type codes?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "What are the different template type codes?",
        "seq_out": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) RETURN DISTINCT templates.Template_Type_Code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) WHERE templates.Template_Type_Code = 'PP' OR templates.Template_Type_Code = 'PPT' RETURN templates.Template_ID",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWHERE templates.Template_Type_Code = 'PP' OR templates.Template_Type_Code = 'PPT'\nRETURN templates.Template_ID",
        "question": "What are the ids of templates with template type code PP or PPT?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code ( PPT , PP ) | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code ( PPT , PP ) , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code ( PPT , PP ) | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code ( PPT , PP ) , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "What are the ids of templates with template type code PP or PPT?",
        "seq_out": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) WHERE templates.Template_Type_Code = 'PP' OR templates.Template_Type_Code = 'PPT' RETURN templates.Template_ID",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) WHERE templates.Template_Type_Code = 'PP' OR templates.Template_Type_Code = 'PPT' RETURN templates.Template_ID",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWHERE templates.Template_Type_Code = 'PP' OR templates.Template_Type_Code = 'PPT'\nRETURN templates.Template_ID",
        "question": "Return the ids of templates that have the code PP or PPT.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code ( PPT , PP ) | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code ( PPT , PP ) , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code ( PPT , PP ) | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code ( PPT , PP ) , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Return the ids of templates that have the code PP or PPT.",
        "seq_out": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) WHERE templates.Template_Type_Code = 'PP' OR templates.Template_Type_Code = 'PPT' RETURN templates.Template_ID",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) WHERE templates.Template_Type_Code = 'CV' RETURN count(*)",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWHERE templates.Template_Type_Code = 'CV'\nRETURN count(*)",
        "question": "How many templates have template type code CV?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description ( CV ) , Template_Type_Code ( CV ) | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code ( CV ) , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description ( CV ) , Template_Type_Code ( CV ) | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code ( CV ) , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "How many templates have template type code CV?",
        "seq_out": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) WHERE templates.Template_Type_Code = 'CV' RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) WHERE templates.Template_Type_Code = 'CV' RETURN count(*)",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWHERE templates.Template_Type_Code = 'CV'\nRETURN count(*)",
        "question": "Count the number of templates of the type CV.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description ( CV ) , Template_Type_Code ( CV ) | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code ( CV ) , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description ( CV ) , Template_Type_Code ( CV ) | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code ( CV ) , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Count the number of templates of the type CV.",
        "seq_out": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) WHERE templates.Template_Type_Code = 'CV' RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) WHERE templates.Version_Number > 5 RETURN templates.Version_Number,templates.Template_Type_Code",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWHERE templates.Version_Number > 5\nRETURN templates.Version_Number,templates.Template_Type_Code",
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "What is the version number and template type code for the template with version number later than 5?",
        "seq_out": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) WHERE templates.Version_Number > 5 RETURN templates.Version_Number,templates.Template_Type_Code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) WHERE templates.Version_Number > 5 RETURN templates.Version_Number,templates.Template_Type_Code",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWHERE templates.Version_Number > 5\nRETURN templates.Version_Number,templates.Template_Type_Code",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "seq_out": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) WHERE templates.Version_Number > 5 RETURN templates.Version_Number,templates.Template_Type_Code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) WITH count(templates.Template_Type_Code) AS count, templates.Template_Type_Code AS Template_Type_Code RETURN Template_Type_Code,count",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWITH count(templates.Template_Type_Code) AS count, templates.Template_Type_Code AS Template_Type_Code\nRETURN Template_Type_Code,count",
        "question": "Show all template type codes and number of templates for each.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Show all template type codes and number of templates for each.",
        "seq_out": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) WITH count(templates.Template_Type_Code) AS count, templates.Template_Type_Code AS Template_Type_Code RETURN Template_Type_Code,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) WITH count(templates.Template_Type_Code) AS count, templates.Template_Type_Code AS Template_Type_Code RETURN Template_Type_Code,count",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWITH count(templates.Template_Type_Code) AS count, templates.Template_Type_Code AS Template_Type_Code\nRETURN Template_Type_Code,count",
        "question": "What are the different template type codes, and how many templates correspond to each?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "What are the different template type codes, and how many templates correspond to each?",
        "seq_out": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) WITH count(templates.Template_Type_Code) AS count, templates.Template_Type_Code AS Template_Type_Code RETURN Template_Type_Code,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) WITH count(templates.Template_Type_Code) AS count, templates.Template_Type_Code AS Template_Type_Code RETURN Template_Type_Code ORDER BY count DESC LIMIT 1",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWITH count(templates.Template_Type_Code) AS count, templates.Template_Type_Code AS Template_Type_Code\nRETURN Template_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "question": "Which template type code has most number of templates?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Which template type code has most number of templates?",
        "seq_out": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) WITH count(templates.Template_Type_Code) AS count, templates.Template_Type_Code AS Template_Type_Code RETURN Template_Type_Code ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) WITH count(templates.Template_Type_Code) AS count, templates.Template_Type_Code AS Template_Type_Code RETURN Template_Type_Code ORDER BY count DESC LIMIT 1",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWITH count(templates.Template_Type_Code) AS count, templates.Template_Type_Code AS Template_Type_Code\nRETURN Template_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "question": "Return the type code of the template type that the most templates belong to.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Return the type code of the template type that the most templates belong to.",
        "seq_out": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) WITH count(templates.Template_Type_Code) AS count, templates.Template_Type_Code AS Template_Type_Code RETURN Template_Type_Code ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) WITH count(*) AS count, templates.Template_Type_Code AS Template_Type_Code WHERE count  < 3 RETURN Template_Type_Code",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWITH count(*) AS count, templates.Template_Type_Code AS Template_Type_Code\nWHERE count  < 3\nRETURN Template_Type_Code",
        "question": "Show all template type codes with less than three templates.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Show all template type codes with less than three templates.",
        "seq_out": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) WITH count(*) AS count, templates.Template_Type_Code AS Template_Type_Code WHERE count < 3 RETURN Template_Type_Code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) WITH count(*) AS count, templates.Template_Type_Code AS Template_Type_Code WHERE count  < 3 RETURN Template_Type_Code",
        "query": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`)\nWITH count(*) AS count, templates.Template_Type_Code AS Template_Type_Code\nWHERE count  < 3\nRETURN Template_Type_Code",
        "question": "What are the codes of template types that have fewer than 3 templates?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "What are the codes of template types that have fewer than 3 templates?",
        "seq_out": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) WITH count(*) AS count, templates.Template_Type_Code AS Template_Type_Code WHERE count < 3 RETURN Template_Type_Code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WHERE documents.Document_Name = 'Data base' RETURN documents.Template_Type_Code",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Data base'\nRETURN T1.Template_Type_Code",
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name ( Data base ) , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name ( Data base ) , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "What is the template type code of the template used by document with the name \"Data base\"?",
        "seq_out": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`) WHERE T2.Document_Name = 'Data base' RETURN T1.Template_Type_Code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WHERE documents.Document_Name = 'Data base' RETURN documents.Template_Type_Code",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Data base'\nRETURN T1.Template_Type_Code",
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name ( Data base ) , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name ( Data base ) , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Return the template type code of the template that is used by a document named Data base.",
        "seq_out": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`) WHERE T2.Document_Name = 'Data base' RETURN T1.Template_Type_Code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WHERE documents.Template_Type_Code = 'BK' RETURN documents.Document_Name",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T1.Template_Type_Code = 'BK'\nRETURN T2.Document_Name",
        "question": "Show all document names using templates with template type code BK.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code ( BK ) | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code ( BK ) , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code ( BK ) | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code ( BK ) , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Show all document names using templates with template type code BK.",
        "seq_out": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`) WHERE T1.Template_Type_Code = 'BK' RETURN T2.Document_Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WHERE documents.Template_Type_Code = 'BK' RETURN documents.Document_Name",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T1.Template_Type_Code = 'BK'\nRETURN T2.Document_Name",
        "question": "What are the names of documents that use templates with the code BK?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code ( BK ) | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code ( BK ) , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code ( BK ) | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code ( BK ) , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "What are the names of documents that use templates with the code BK?",
        "seq_out": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`) WHERE T1.Template_Type_Code = 'BK' RETURN T2.Document_Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WITH documents.Template_Type_Code AS Template_Type_Code, count(documents.Template_Type_Code) AS count RETURN Template_Type_Code,count",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWITH T1.Template_Type_Code AS Template_Type_Code, count(T1.Template_Type_Code) AS count\nRETURN Template_Type_Code,count",
        "question": "Show all template type codes and the number of documents using each type.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Show all template type codes and the number of documents using each type.",
        "seq_out": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`) WITH T1.Template_Type_Code AS Template_Type_Code, count(T1.Template_Type_Code) AS count RETURN Template_Type_Code,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WITH documents.Template_Type_Code AS Template_Type_Code, count(documents.Template_Type_Code) AS count RETURN Template_Type_Code,count",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWITH T1.Template_Type_Code AS Template_Type_Code, count(T1.Template_Type_Code) AS count\nRETURN Template_Type_Code,count",
        "question": "What are the different template type codes, and how many documents use each type?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "What are the different template type codes, and how many documents use each type?",
        "seq_out": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`) WITH T1.Template_Type_Code AS Template_Type_Code, count(T1.Template_Type_Code) AS count RETURN Template_Type_Code,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WITH documents.Template_Type_Code AS Template_Type_Code, count(documents.Template_Type_Code) AS count RETURN Template_Type_Code ORDER BY count DESC LIMIT 1",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWITH T1.Template_Type_Code AS Template_Type_Code, count(T1.Template_Type_Code) AS count\nRETURN Template_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "question": "Which template type code is used by most number of documents?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Which template type code is used by most number of documents?",
        "seq_out": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`) WITH T1.Template_Type_Code AS Template_Type_Code, count(T1.Template_Type_Code) AS count RETURN Template_Type_Code ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WITH count(documents.Template_Type_Code) AS count, documents.Template_Type_Code AS Template_Type_Code RETURN Template_Type_Code ORDER BY count DESC LIMIT 1",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWITH T1.Template_Type_Code AS Template_Type_Code, count(T1.Template_Type_Code) AS count\nRETURN Template_Type_Code\nORDER BY count DESC\nLIMIT 1",
        "question": "Return the code of the template type that is most commonly used in documents.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Return the code of the template type that is most commonly used in documents.",
        "seq_out": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`) WITH T1.Template_Type_Code AS Template_Type_Code, count(T1.Template_Type_Code) AS count RETURN Template_Type_Code ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (templates:`cre_Doc_Template_Mgt.Templates`) RETURN templates.Template_Type_Code,templates.Template_Details",
        "query": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`)\nRETURN ref_template_types.Template_Type_Code,ref_template_types.Template_Type_Description",
        "question": "Show all template type codes and descriptions.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Show all template type codes and descriptions.",
        "seq_out": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`) RETURN ref_template_types.Template_Type_Code,ref_template_types.Template_Type_Description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`) RETURN ref_template_types.Template_Type_Code,ref_template_types.Template_Type_Description",
        "query": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`)\nRETURN ref_template_types.Template_Type_Code,ref_template_types.Template_Type_Description",
        "question": "What are the type codes and descriptions for all template types?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "What are the type codes and descriptions for all template types?",
        "seq_out": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`) RETURN ref_template_types.Template_Type_Code,ref_template_types.Template_Type_Description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`) WHERE ref_template_types.Template_Type_Code = 'AD' RETURN ref_template_types.Template_Type_Description",
        "query": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`)\nWHERE ref_template_types.Template_Type_Code = 'AD'\nRETURN ref_template_types.Template_Type_Description",
        "question": "What is the template type descriptions for template type code \"AD\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code ( AD ) | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code ( AD ) , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code ( AD ) | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code ( AD ) , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "What is the template type descriptions for template type code \"AD\".",
        "seq_out": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`) WHERE ref_template_types.Template_Type_Code = 'AD' RETURN ref_template_types.Template_Type_Description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`) WHERE ref_template_types.Template_Type_Code = 'AD' RETURN ref_template_types.Template_Type_Description",
        "query": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`)\nWHERE ref_template_types.Template_Type_Code = 'AD'\nRETURN ref_template_types.Template_Type_Description",
        "question": "Return the template type description of the template type with the code AD.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code ( AD ) | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code ( AD ) , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code ( AD ) | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code ( AD ) , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Return the template type description of the template type with the code AD.",
        "seq_out": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`) WHERE ref_template_types.Template_Type_Code = 'AD' RETURN ref_template_types.Template_Type_Description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`) WHERE ref_template_types.Template_Type_Description = 'Book' RETURN ref_template_types.Template_Type_Code",
        "query": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`)\nWHERE ref_template_types.Template_Type_Description = 'Book'\nRETURN ref_template_types.Template_Type_Code",
        "question": "What is the template type code for template type description \"Book\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description ( Book ) , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description ( Book ) , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "What is the template type code for template type description \"Book\".",
        "seq_out": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`) WHERE ref_template_types.Template_Type_Description = 'Book' RETURN ref_template_types.Template_Type_Code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`) WHERE ref_template_types.Template_Type_Description = 'Book' RETURN ref_template_types.Template_Type_Code",
        "query": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`)\nWHERE ref_template_types.Template_Type_Description = 'Book'\nRETURN ref_template_types.Template_Type_Code",
        "question": "Return the type code of the template type with the description \"Book\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description ( Book ) , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description ( Book ) , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Return the type code of the template type with the description \"Book\".",
        "seq_out": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`) WHERE ref_template_types.Template_Type_Description = 'Book' RETURN ref_template_types.Template_Type_Code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (ref_template_types:`cre_Doc_Template_Mgt.Ref_Template_Types`) WHERE ref_template_types.Template_Type_Description = 'Presentation' RETURN ref_template_types.Template_ID",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Ref_Template_Types`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`)\nWHERE T1.Template_Type_Description = 'Presentation'\nRETURN T2.Template_ID",
        "question": "What are the template ids with template type description \"Presentation\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description ( Presentation ) , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description ( Presentation ) , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "What are the template ids with template type description \"Presentation\".",
        "seq_out": "MATCH (T1:`cre_Doc_Template_Mgt.Ref_Template_Types`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`) WHERE T1.Template_Type_Description = 'Presentation' RETURN T2.Template_ID",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`cre_Doc_Template_Mgt.Templates`)-[]-(T2:`cre_Doc_Template_Mgt.Ref_Template_Types`) WHERE T2.Template_Type_Description = 'Presentation' RETURN T1.Template_ID",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Ref_Template_Types`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`)\nWHERE T1.Template_Type_Description = 'Presentation'\nRETURN T2.Template_ID",
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description ( Presentation ) , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description ( Presentation ) , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Return the ids corresponding to templates with the description 'Presentation'.",
        "seq_out": "MATCH (T1:`cre_Doc_Template_Mgt.Ref_Template_Types`)-[]-(T2:`cre_Doc_Template_Mgt.Templates`) WHERE T1.Template_Type_Description = 'Presentation' RETURN T2.Template_ID",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`) RETURN count(*)",
        "query": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nRETURN count(*)",
        "question": "How many paragraphs in total?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "How many paragraphs in total?",
        "seq_out": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`) RETURN count(*)",
        "query": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nRETURN count(*)",
        "question": "Count the number of paragraphs.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Count the number of paragraphs.",
        "seq_out": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WHERE documents.Document_Name = 'Summer Show' RETURN count(*)",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Summer Show'\nRETURN count(*)",
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name ( Summer Show ) , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name ( Summer Show ) , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "How many paragraphs for the document with name 'Summer Show'?",
        "seq_out": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`) WHERE T2.Document_Name = 'Summer Show' RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WHERE documents.Document_Name = 'Summer Show' RETURN count(*)",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Summer Show'\nRETURN count(*)",
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name ( Summer Show ) , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name ( Summer Show ) , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Count the number of paragraphs in the document named 'Summer Show'.",
        "seq_out": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`) WHERE T2.Document_Name = 'Summer Show' RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WHERE documents.Document_Name = 'Welcome to NY' RETURN documents.Paragraph_ID,documents.Paragraph_Text",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Welcome to NY'\nRETURN T1.Paragraph_ID,T1.Paragraph_Text",
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name ( Welcome to NY ) , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name ( Welcome to NY ) , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "seq_out": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`) WHERE T2.Document_Name = 'Welcome to NY' RETURN T1.Paragraph_ID,T1.Paragraph_Text",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WHERE documents.Document_Name = 'Welcome to NY' RETURN documents.Paragraph_ID,documents.Paragraph_Text",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Welcome to NY'\nRETURN T1.Paragraph_ID,T1.Paragraph_Text",
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name ( Welcome to NY ) , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name ( Welcome to NY ) , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "seq_out": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`) WHERE T2.Document_Name = 'Welcome to NY' RETURN T1.Paragraph_ID,T1.Paragraph_Text",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WHERE documents.Document_Name = 'Customer reviews' RETURN DISTINCT documents.Paragraph_Text",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Customer reviews'\nRETURN T1.Paragraph_Text",
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name ( Customer reviews ) , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name ( Customer reviews ) , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Show all paragraph texts for the document \"Customer reviews\".",
        "seq_out": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`) WHERE T2.Document_Name = 'Customer reviews' RETURN T1.Paragraph_Text",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WHERE documents.Document_Name = 'Customer reviews' RETURN documents.Paragraph_Text",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWHERE T2.Document_Name = 'Customer reviews'\nRETURN T1.Paragraph_Text",
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name ( Customer reviews ) , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name ( Customer reviews ) , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "seq_out": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`) WHERE T2.Document_Name = 'Customer reviews' RETURN T1.Paragraph_Text",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`) WITH T2.Document_Name AS Document_Name, count(T1.Document_ID) AS count, T1.Document_ID AS Document_ID RETURN Document_ID,Document_Name,count",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWITH T2.Document_Name AS Document_Name, T1.Document_ID AS Document_ID, count(T1.Document_ID) AS count\nRETURN Document_ID,Document_Name,count",
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Show all document ids, names and the number of paragraphs in each document.",
        "seq_out": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`) WITH T2.Document_Name AS Document_Name, T1.Document_ID AS Document_ID, count(T1.Document_ID) AS count RETURN Document_ID,Document_Name,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Template_Mgt.Documents`) WITH documents.Document_Name AS Document_Name, count(documents.Document_Name) AS count, documents.Document_ID AS Document_ID RETURN Document_ID,Document_Name,count",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWITH T2.Document_Name AS Document_Name, T1.Document_ID AS Document_ID, count(T1.Document_ID) AS count\nRETURN Document_ID,Document_Name,count",
        "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "seq_out": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`) WITH T2.Document_Name AS Document_Name, T1.Document_ID AS Document_ID, count(T1.Document_ID) AS count RETURN Document_ID,Document_Name,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`) WITH count(*) AS count, paragraphs.Document_ID AS Document_ID WHERE count >= 2 RETURN Document_ID",
        "query": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nWITH count(*) AS count, paragraphs.Document_ID AS Document_ID\nWHERE count  >= 2\nRETURN Document_ID",
        "question": "List all document ids with at least two paragraphs.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "List all document ids with at least two paragraphs.",
        "seq_out": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`) WITH count(*) AS count, paragraphs.Document_ID AS Document_ID WHERE count >= 2 RETURN Document_ID",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`) WITH count(*) AS count, T2.Document_ID AS Document_ID WHERE count >= 2 RETURN Document_ID",
        "query": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nWITH count(*) AS count, paragraphs.Document_ID AS Document_ID\nWHERE count  >= 2\nRETURN Document_ID",
        "question": "What are the ids of documents that have 2 or more paragraphs?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "What are the ids of documents that have 2 or more paragraphs?",
        "seq_out": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`) WITH count(*) AS count, paragraphs.Document_ID AS Document_ID WHERE count >= 2 RETURN Document_ID",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`) WITH T2.Document_Name AS Document_Name, count(T1.Document_ID) AS count, T1.Document_ID AS Document_ID RETURN Document_ID,Document_Name ORDER BY count DESC LIMIT 1",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWITH T2.Document_Name AS Document_Name, T1.Document_ID AS Document_ID, count(T1.Document_ID) AS count\nRETURN Document_ID,Document_Name\nORDER BY count DESC\nLIMIT 1",
        "question": "What is the document id and name with greatest number of paragraphs?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "What is the document id and name with greatest number of paragraphs?",
        "seq_out": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`) WITH T2.Document_Name AS Document_Name, T1.Document_ID AS Document_ID, count(T1.Document_ID) AS count RETURN Document_ID,Document_Name ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`cre_Doc_Template_Mgt.Documents`)-[]-(T2:`cre_Doc_Template_Mgt.Paragraphs`) WITH T1.Document_Name AS Document_Name, count(T1.Document_ID) AS count, T1.Document_ID AS Document_ID RETURN Document_ID,Document_Name ORDER BY count DESC LIMIT 1",
        "query": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`)\nWITH T2.Document_Name AS Document_Name, T1.Document_ID AS Document_ID, count(T1.Document_ID) AS count\nRETURN Document_ID,Document_Name\nORDER BY count DESC\nLIMIT 1",
        "question": "Return the id and name of the document with the most paragraphs.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Return the id and name of the document with the most paragraphs.",
        "seq_out": "MATCH (T1:`cre_Doc_Template_Mgt.Paragraphs`)-[]-(T2:`cre_Doc_Template_Mgt.Documents`) WITH T2.Document_Name AS Document_Name, T1.Document_ID AS Document_ID, count(T1.Document_ID) AS count RETURN Document_ID,Document_Name ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`) WITH count(paragraphs.Document_ID) AS count, paragraphs.Document_ID AS Document_ID RETURN Document_ID ORDER BY count ASC LIMIT 1",
        "query": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nWITH paragraphs.Document_ID AS Document_ID, count(paragraphs.Document_ID) AS count\nRETURN Document_ID\nORDER BY count ASC\nLIMIT 1",
        "question": "What is the document id with least number of paragraphs?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "What is the document id with least number of paragraphs?",
        "seq_out": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`) WITH paragraphs.Document_ID AS Document_ID, count(paragraphs.Document_ID) AS count RETURN Document_ID ORDER BY count ASC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (documents:`cre_Doc_Mgt.Documents`) WITH documents.Paragraph_ID AS Paragraph_ID, count(documents.Paragraph_ID) AS count RETURN Document_ID ORDER BY count ASC LIMIT 1",
        "query": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`)\nWITH paragraphs.Document_ID AS Document_ID, count(paragraphs.Document_ID) AS count\nRETURN Document_ID\nORDER BY count ASC\nLIMIT 1",
        "question": "Return the id of the document with the fewest paragraphs.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "cre_Doc_Template_Mgt",
        "db_tag_names": [
            ":`cre_Doc_Template_Mgt.Ref_Template_Types`",
            ":`cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Paragraphs`",
            ":`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates`",
            ":`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents`",
            ":`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Template_Type_Description",
                "Template_Type_Code",
                "Template_Type_Code",
                "Date_Effective_To",
                "Version_Number",
                "Template_Details",
                "Template_ID",
                "Date_Effective_From",
                "Document_Name",
                "Document_Description",
                "Template_ID",
                "Document_ID",
                "Paragraph_Text",
                "Paragraph_ID",
                "Document_ID"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` : ",
        "struct_in": "| cre_Doc_Template_Mgt | :`cre_Doc_Template_Mgt.Ref_Template_Types` : Template_Type_Description , Template_Type_Code | :`cre_Doc_Template_Mgt.Templates` : Template_Type_Code , Date_Effective_To , Version_Number , Template_Details , Template_ID , Date_Effective_From | :`cre_Doc_Template_Mgt.Documents` : Document_Name , Document_Description , Template_ID , Document_ID | :`cre_Doc_Template_Mgt.Paragraphs` : Paragraph_Text , Paragraph_ID , Document_ID | :`cre_Doc_Template_Mgt.Ref_Template_Types_HAS_cre_Doc_Template_Mgt.Templates` :  | :`cre_Doc_Template_Mgt.Templates_HAS_cre_Doc_Template_Mgt.Documents` :  | :`cre_Doc_Template_Mgt.Documents_HAS_cre_Doc_Template_Mgt.Paragraphs` :",
        "text_in": "Return the id of the document with the fewest paragraphs.",
        "seq_out": "MATCH (paragraphs:`cre_Doc_Template_Mgt.Paragraphs`) WITH paragraphs.Document_ID AS Document_ID, count(paragraphs.Document_ID) AS count RETURN Document_ID ORDER BY count ASC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (teacher:`course_teach.teacher`) RETURN count(*)",
        "query": "MATCH (teacher:`course_teach.teacher`)\nRETURN count(*)",
        "question": "How many teachers are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "struct_in": "| course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "text_in": "How many teachers are there?",
        "seq_out": "MATCH (teacher:`course_teach.teacher`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (teacher:`course_teach.teacher`) RETURN count(*)",
        "query": "MATCH (teacher:`course_teach.teacher`)\nRETURN count(*)",
        "question": "What is the total count of teachers?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "struct_in": "| course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "text_in": "What is the total count of teachers?",
        "seq_out": "MATCH (teacher:`course_teach.teacher`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (teacher:`course_teach.teacher`) RETURN teacher.Name ORDER BY teacher.Age ASC",
        "query": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Name\nORDER BY teacher.Age ASC",
        "question": "List the names of teachers in ascending order of age.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "struct_in": "| course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "text_in": "List the names of teachers in ascending order of age.",
        "seq_out": "MATCH (teacher:`course_teach.teacher`) RETURN teacher.Name ORDER BY teacher.Age ASC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (teacher:`course_teach.teacher`) RETURN teacher.Name ORDER BY teacher.Age ASC",
        "query": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Name\nORDER BY teacher.Age ASC",
        "question": "What are the names of the teachers ordered by ascending age?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "struct_in": "| course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "text_in": "What are the names of the teachers ordered by ascending age?",
        "seq_out": "MATCH (teacher:`course_teach.teacher`) RETURN teacher.Name ORDER BY teacher.Age ASC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (teacher:`course_teach.teacher`) RETURN teacher.Age,teacher.Hometown",
        "query": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Age,teacher.Hometown",
        "question": "What are the age and hometown of teachers?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "struct_in": "| course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "text_in": "What are the age and hometown of teachers?",
        "seq_out": "MATCH (teacher:`course_teach.teacher`) RETURN teacher.Age,teacher.Hometown",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (teacher:`course_teach.teacher`) RETURN teacher.Age,teacher.Hometown",
        "query": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Age,teacher.Hometown",
        "question": "What is the age and hometown of every teacher?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "struct_in": "| course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "text_in": "What is the age and hometown of every teacher?",
        "seq_out": "MATCH (teacher:`course_teach.teacher`) RETURN teacher.Age,teacher.Hometown",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (teacher:`course_teach.teacher`) WHERE teacher.Hometown  < > 'Little Lever Urban District' RETURN teacher.Name",
        "query": "MATCH (teacher:`course_teach.teacher`)\nWHERE teacher.Hometown <> 'little lever urban district'\nRETURN teacher.Name",
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown ( Little Lever Urban District ) | :`course_teach.course_arrange` : Grade",
        "struct_in": "| course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown ( Little Lever Urban District ) | :`course_teach.course_arrange` : Grade",
        "text_in": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "seq_out": "MATCH (teacher:`course_teach.teacher`) WHERE teacher.Hometown <> 'little lever urban district' RETURN teacher.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (teacher:`course_teach.teacher`) WHERE teacher.Hometown  < > 'Little Lever Urban District' RETURN teacher.Name",
        "query": "MATCH (teacher:`course_teach.teacher`)\nWHERE teacher.Hometown <> 'little lever urban district'\nRETURN teacher.Name",
        "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown ( Little Lever Urban District ) | :`course_teach.course_arrange` : Grade",
        "struct_in": "| course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown ( Little Lever Urban District ) | :`course_teach.course_arrange` : Grade",
        "text_in": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "seq_out": "MATCH (teacher:`course_teach.teacher`) WHERE teacher.Hometown <> 'little lever urban district' RETURN teacher.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (teacher:`course_teach.teacher`) RETURN teacher.Hometown ORDER BY teacher.Age ASC LIMIT 1",
        "query": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Hometown\nORDER BY teacher.Age ASC\nLIMIT 1",
        "question": "What is the hometown of the youngest teacher?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "struct_in": "| course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "text_in": "What is the hometown of the youngest teacher?",
        "seq_out": "MATCH (teacher:`course_teach.teacher`) RETURN teacher.Hometown ORDER BY teacher.Age ASC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (teacher:`course_teach.teacher`) RETURN teacher.Hometown ORDER BY teacher.Age ASC LIMIT 1",
        "query": "MATCH (teacher:`course_teach.teacher`)\nRETURN teacher.Hometown\nORDER BY teacher.Age ASC\nLIMIT 1",
        "question": "Where is the youngest teacher from?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "struct_in": "| course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "text_in": "Where is the youngest teacher from?",
        "seq_out": "MATCH (teacher:`course_teach.teacher`) RETURN teacher.Hometown ORDER BY teacher.Age ASC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (teacher:`course_teach.teacher`) WITH count(teacher.Hometown) AS count, teacher.Hometown AS Hometown RETURN Hometown,count",
        "query": "MATCH (teacher:`course_teach.teacher`)\nWITH teacher.Hometown AS Hometown, count(teacher.Hometown) AS count\nRETURN Hometown,count",
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "struct_in": "| course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "text_in": "Show different hometown of teachers and the number of teachers from each hometown.",
        "seq_out": "MATCH (teacher:`course_teach.teacher`) WITH teacher.Hometown AS Hometown, count(teacher.Hometown) AS count RETURN Hometown,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (teacher:`course_teach.teacher`) WITH count(teacher.Hometown) AS count, teacher.Hometown AS Hometown RETURN Hometown,count",
        "query": "MATCH (teacher:`course_teach.teacher`)\nWITH teacher.Hometown AS Hometown, count(teacher.Hometown) AS count\nRETURN Hometown,count",
        "question": "For each hometown, how many teachers are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "struct_in": "| course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "text_in": "For each hometown, how many teachers are there?",
        "seq_out": "MATCH (teacher:`course_teach.teacher`) WITH teacher.Hometown AS Hometown, count(teacher.Hometown) AS count RETURN Hometown,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.teacher`)-[]-(T3:`course_teach.course`) RETURN T2.Name,T3.Course",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.course`)-[]-(T3:`course_teach.teacher`)\nRETURN T3.Name,T2.Course",
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "struct_in": "| course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "text_in": "Show names of teachers and the courses they are arranged to teach.",
        "seq_out": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.course`)-[]-(T3:`course_teach.teacher`) RETURN T3.Name,T2.Course",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (teach:`course_teach.teacher`) RETURN teach.Name,teach.Course",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.course`)-[]-(T3:`course_teach.teacher`)\nRETURN T3.Name,T2.Course",
        "question": "What is the name of each teacher and what course they teach?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "struct_in": "| course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "text_in": "What is the name of each teacher and what course they teach?",
        "seq_out": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.course`)-[]-(T3:`course_teach.teacher`) RETURN T3.Name,T2.Course",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.teacher`)-[]-(T3:`course_teach.course`) RETURN T3.Name,T2.Course ORDER BY T3.Name ASC",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.course`)-[]-(T3:`course_teach.teacher`)\nRETURN T3.Name,T2.Course\nORDER BY T3.Name",
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "struct_in": "| course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "text_in": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "seq_out": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.course`)-[]-(T3:`course_teach.teacher`) RETURN T3.Name,T2.Course ORDER BY T3.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (teachers:`course_teach.teacher`) RETURN teachers.Name,course.Course ORDER BY teachers.Name ASC",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.course`)-[]-(T3:`course_teach.teacher`)\nRETURN T3.Name,T2.Course\nORDER BY T3.Name",
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "struct_in": "| course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "text_in": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "seq_out": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.course`)-[]-(T3:`course_teach.teacher`) RETURN T3.Name,T2.Course ORDER BY T3.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`course_teach.teacher`)-[T2:`course_teach.course_arrange`]-(T3:`course_teach.course`) WHERE T3.Course = 'Math' RETURN T1.Name",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.course`)-[]-(T3:`course_teach.teacher`)\nWHERE T2.Course = 'Math'\nRETURN T3.Name",
        "question": "Show the name of the teacher for the math course.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : Course_ID , Course ( Math ) , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "struct_in": "| course_teach | :`course_teach.course` : Course_ID , Course ( Math ) , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "text_in": "Show the name of the teacher for the math course.",
        "seq_out": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.course`)-[]-(T3:`course_teach.teacher`) WHERE T2.Course = 'Math' RETURN T3.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`course_teach.course`)-[]-(T2:`course_teach.teacher`) WHERE T1.Course = 'Math' RETURN T2.Name",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.course`)-[]-(T3:`course_teach.teacher`)\nWHERE T2.Course = 'Math'\nRETURN T3.Name",
        "question": "What are the names of the people who teach math courses?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : Course_ID , Course ( Math ) , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "struct_in": "| course_teach | :`course_teach.course` : Course_ID , Course ( Math ) , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "text_in": "What are the names of the people who teach math courses?",
        "seq_out": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.course`)-[]-(T3:`course_teach.teacher`) WHERE T2.Course = 'Math' RETURN T3.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (teachers:`course_teach.teacher`) WITH count(teachers.Name) AS count, teachers.Name AS Name RETURN Name,count",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.teacher`)\nWITH count(T2.Name) AS count, T2.Name AS Name\nRETURN Name,count",
        "question": "Show names of teachers and the number of courses they teach.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "struct_in": "| course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "text_in": "Show names of teachers and the number of courses they teach.",
        "seq_out": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.teacher`) WITH count(T2.Name) AS count, T2.Name AS Name RETURN Name,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (teachers:`course_teach.teacher`) WITH count(teachers.Name) AS count, teachers.Name AS Name RETURN Name,count",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.teacher`)\nWITH count(T2.Name) AS count, T2.Name AS Name\nRETURN Name,count",
        "question": "What are the names of the teachers and how many courses do they teach?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "struct_in": "| course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "text_in": "What are the names of the teachers and how many courses do they teach?",
        "seq_out": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.teacher`) WITH count(T2.Name) AS count, T2.Name AS Name RETURN Name,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (teach:`course_teach.teacher`) WITH count(*) AS count, teach.Name AS Name WHERE count >= 2 RETURN Name",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.teacher`)\nWITH count(*) AS count, T2.Name AS Name\nWHERE count  >= 2\nRETURN Name",
        "question": "Show names of teachers that teach at least two courses.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "struct_in": "| course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "text_in": "Show names of teachers that teach at least two courses.",
        "seq_out": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.teacher`) WITH count(*) AS count, T2.Name AS Name WHERE count >= 2 RETURN Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (teach:`course_teach.teacher`) WITH count(*) AS count, teach.Name AS Name WHERE count >= 2 RETURN Name",
        "query": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.teacher`)\nWITH count(*) AS count, T2.Name AS Name\nWHERE count  >= 2\nRETURN Name",
        "question": "What are the names of the teachers who teach at least two courses?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "struct_in": "| course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "text_in": "What are the names of the teachers who teach at least two courses?",
        "seq_out": "MATCH ()-[T1:`course_teach.course_arrange`]-(T2:`course_teach.teacher`) WITH count(*) AS count, T2.Name AS Name WHERE count >= 2 RETURN Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (teacher:`course_teach.teacher`) WHERE NOT (teacher:`course_teach.teacher`)-[:`course_teach.course_arrange`]-() RETURN teacher.Name",
        "query": "MATCH (teacher:`course_teach.teacher`)\nWHERE NOT (teacher:`course_teach.teacher`)-[:`course_teach.course_arrange`]-()\nRETURN teacher.Name",
        "question": "List the names of teachers who have not been arranged to teach courses.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "struct_in": "| course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "text_in": "List the names of teachers who have not been arranged to teach courses.",
        "seq_out": "MATCH (teacher:`course_teach.teacher`) WHERE NOT (teacher:`course_teach.teacher`)-[:`course_teach.course_arrange`]-() RETURN teacher.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (teachers:`course_teach.teacher`) WHERE NOT (teachers:`course_teach.teachers`)-[:`course_teach.course_arrange`]-() RETURN teachers.Name",
        "query": "MATCH (teacher:`course_teach.teacher`)\nWHERE NOT (teacher:`course_teach.teacher`)-[:`course_teach.course_arrange`]-()\nRETURN teacher.Name",
        "question": "What are the names of the teachers whose courses have not been arranged?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "course_teach",
        "db_tag_names": [
            ":`course_teach.course`",
            ":`course_teach.teacher`",
            ":`course_teach.course_arrange`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Course_ID",
                "Course",
                "Staring_Date",
                "Age",
                "Name",
                "Teacher_ID",
                "Hometown",
                "Grade"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "struct_in": "| course_teach | :`course_teach.course` : Course_ID , Course , Staring_Date | :`course_teach.teacher` : Age , Name , Teacher_ID , Hometown | :`course_teach.course_arrange` : Grade",
        "text_in": "What are the names of the teachers whose courses have not been arranged?",
        "seq_out": "MATCH (teacher:`course_teach.teacher`) WHERE NOT (teacher:`course_teach.teacher`)-[:`course_teach.course_arrange`]-() RETURN teacher.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (visitor:`museum_visit.visitor`) WHERE visitor.Age  < 30 RETURN count(*)",
        "query": "MATCH (visitor:`museum_visit.visitor`)\nWHERE visitor.Age < 30\nRETURN count(*)",
        "question": "How many visitors below age 30 are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "museum_visit",
        "db_tag_names": [
            ":`museum_visit.museum`",
            ":`museum_visit.visitor`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "Museum_ID",
                "Age",
                "Name",
                "Level_of_membership",
                "ID"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | museum_visit | :`museum_visit.museum` : Name , Num_of_Staff , Open_Year , Museum_ID | :`museum_visit.visitor` : Age , Name , Level_of_membership , ID",
        "struct_in": "| museum_visit | :`museum_visit.museum` : Name , Num_of_Staff , Open_Year , Museum_ID | :`museum_visit.visitor` : Age , Name , Level_of_membership , ID",
        "text_in": "How many visitors below age 30 are there?",
        "seq_out": "MATCH (visitor:`museum_visit.visitor`) WHERE visitor.Age < 30 RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (visitor:`museum_visit.visitor`) WHERE visitor.Level_of_membership > 4 RETURN visitor.Name ORDER BY visitor.Level_of_membership DESC",
        "query": "MATCH (visitor:`museum_visit.visitor`)\nWHERE visitor.Level_of_membership > 4\nRETURN visitor.Name\nORDER BY visitor.Level_of_membership DESC",
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "museum_visit",
        "db_tag_names": [
            ":`museum_visit.museum`",
            ":`museum_visit.visitor`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "Museum_ID",
                "Age",
                "Name",
                "Level_of_membership",
                "ID"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | museum_visit | :`museum_visit.museum` : Name , Num_of_Staff , Open_Year , Museum_ID | :`museum_visit.visitor` : Age , Name , Level_of_membership , ID",
        "struct_in": "| museum_visit | :`museum_visit.museum` : Name , Num_of_Staff , Open_Year , Museum_ID | :`museum_visit.visitor` : Age , Name , Level_of_membership , ID",
        "text_in": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "seq_out": "MATCH (visitor:`museum_visit.visitor`) WHERE visitor.Level_of_membership > 4 RETURN visitor.Name ORDER BY visitor.Level_of_membership DESC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (visitor:`museum_visit.visitor`) WHERE visitor.Level_of_membership  < 4 RETURN avg(visitor.Age)",
        "query": "MATCH (visitor:`museum_visit.visitor`)\nWHERE visitor.Level_of_membership <= 4\nRETURN avg(visitor.Age)",
        "question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "museum_visit",
        "db_tag_names": [
            ":`museum_visit.museum`",
            ":`museum_visit.visitor`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "Museum_ID",
                "Age",
                "Name",
                "Level_of_membership",
                "ID"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | museum_visit | :`museum_visit.museum` : Name , Num_of_Staff , Open_Year , Museum_ID | :`museum_visit.visitor` : Age , Name , Level_of_membership , ID",
        "struct_in": "| museum_visit | :`museum_visit.museum` : Name , Num_of_Staff , Open_Year , Museum_ID | :`museum_visit.visitor` : Age , Name , Level_of_membership , ID",
        "text_in": "What is the average age of the visitors whose membership level is not higher than 4?",
        "seq_out": "MATCH (visitor:`museum_visit.visitor`) WHERE visitor.Level_of_membership <= 4 RETURN avg(visitor.Age)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (visitor:`museum_visit.visitor`) WHERE visitor.Level_of_membership > 4 RETURN visitor.Name,visitor.Level_of_membership ORDER BY visitor.Age DESC",
        "query": "MATCH (visitor:`museum_visit.visitor`)\nWHERE visitor.Level_of_membership > 4\nRETURN visitor.Name,visitor.Level_of_membership\nORDER BY visitor.Age DESC",
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "museum_visit",
        "db_tag_names": [
            ":`museum_visit.museum`",
            ":`museum_visit.visitor`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "Museum_ID",
                "Age",
                "Name",
                "Level_of_membership",
                "ID"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | museum_visit | :`museum_visit.museum` : Name , Num_of_Staff , Open_Year , Museum_ID | :`museum_visit.visitor` : Age , Name , Level_of_membership , ID",
        "struct_in": "| museum_visit | :`museum_visit.museum` : Name , Num_of_Staff , Open_Year , Museum_ID | :`museum_visit.visitor` : Age , Name , Level_of_membership , ID",
        "text_in": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "seq_out": "MATCH (visitor:`museum_visit.visitor`) WHERE visitor.Level_of_membership > 4 RETURN visitor.Name,visitor.Level_of_membership ORDER BY visitor.Age DESC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (museum:`museum_visit.museum`) RETURN museum.Museum_ID,museum.Name ORDER BY museum.Num_of_Staff DESC LIMIT 1",
        "query": "MATCH (museum:`museum_visit.museum`)\nRETURN museum.Museum_ID,museum.Name\nORDER BY museum.Num_of_Staff DESC\nLIMIT 1",
        "question": "Find the id and name of the museum that has the most staff members?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "museum_visit",
        "db_tag_names": [
            ":`museum_visit.museum`",
            ":`museum_visit.visitor`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "Museum_ID",
                "Age",
                "Name",
                "Level_of_membership",
                "ID"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | museum_visit | :`museum_visit.museum` : Name , Num_of_Staff , Open_Year , Museum_ID | :`museum_visit.visitor` : Age , Name , Level_of_membership , ID",
        "struct_in": "| museum_visit | :`museum_visit.museum` : Name , Num_of_Staff , Open_Year , Museum_ID | :`museum_visit.visitor` : Age , Name , Level_of_membership , ID",
        "text_in": "Find the id and name of the museum that has the most staff members?",
        "seq_out": "MATCH (museum:`museum_visit.museum`) RETURN museum.Museum_ID,museum.Name ORDER BY museum.Num_of_Staff DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (museum:`museum_visit.museum`) WHERE museum.Name = 'Plaza Museum' RETURN museum.Open_Year,museum.Num_of_Staff",
        "query": "MATCH (museum:`museum_visit.museum`)\nWHERE museum.Name = 'Plaza Museum'\nRETURN museum.Num_of_Staff,museum.Open_Year",
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "museum_visit",
        "db_tag_names": [
            ":`museum_visit.museum`",
            ":`museum_visit.visitor`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "Museum_ID",
                "Age",
                "Name",
                "Level_of_membership",
                "ID"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long"
        ],
        "serialized_schema": " | museum_visit | :`museum_visit.museum` : Name ( Plaza Museum ) , Num_of_Staff , Open_Year , Museum_ID | :`museum_visit.visitor` : Age , Name , Level_of_membership , ID",
        "struct_in": "| museum_visit | :`museum_visit.museum` : Name ( Plaza Museum ) , Num_of_Staff , Open_Year , Museum_ID | :`museum_visit.visitor` : Age , Name , Level_of_membership , ID",
        "text_in": "What are the opening year and staff number of the museum named Plaza Museum?",
        "seq_out": "MATCH (museum:`museum_visit.museum`) WHERE museum.Name = 'Plaza Museum' RETURN museum.Num_of_Staff,museum.Open_Year",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (ship:`battle_death.ship`) WHERE ship.disposition_of_ship = 'Captured' RETURN count(*)",
        "query": "MATCH (ship:`battle_death.ship`)\nWHERE ship.disposition_of_ship = 'Captured'\nRETURN count(*)",
        "question": "How many ships ended up being 'Captured'?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "battle_death",
        "db_tag_names": [
            ":`battle_death.battle`",
            ":`battle_death.ship`",
            ":`battle_death.death`",
            ":`battle_death.battle_HAS_battle_death.ship`",
            ":`battle_death.ship_HAS_battle_death.death`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "id",
                "latin_commander",
                "bulgarian_commander",
                "date",
                "result",
                "name",
                "id",
                "tonnage",
                "lost_in_battle",
                "ship_type",
                "disposition_of_ship",
                "location",
                "id",
                "caused_by_ship_id",
                "killed",
                "note",
                "injured"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship ( Captured ) , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_HAS_battle_death.ship` :  | :`battle_death.ship_HAS_battle_death.death` : ",
        "struct_in": "| battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship ( Captured ) , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_HAS_battle_death.ship` :  | :`battle_death.ship_HAS_battle_death.death` :",
        "text_in": "How many ships ended up being 'Captured'?",
        "seq_out": "MATCH (ship:`battle_death.ship`) WHERE ship.disposition_of_ship = 'Captured' RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (ship:`battle_death.ship`) RETURN ship.name,ship.tonnage ORDER BY ship.name DESC",
        "query": "MATCH (ship:`battle_death.ship`)\nRETURN ship.name,ship.tonnage\nORDER BY ship.name DESC",
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "battle_death",
        "db_tag_names": [
            ":`battle_death.battle`",
            ":`battle_death.ship`",
            ":`battle_death.death`",
            ":`battle_death.battle_HAS_battle_death.ship`",
            ":`battle_death.ship_HAS_battle_death.death`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "id",
                "latin_commander",
                "bulgarian_commander",
                "date",
                "result",
                "name",
                "id",
                "tonnage",
                "lost_in_battle",
                "ship_type",
                "disposition_of_ship",
                "location",
                "id",
                "caused_by_ship_id",
                "killed",
                "note",
                "injured"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_HAS_battle_death.ship` :  | :`battle_death.ship_HAS_battle_death.death` : ",
        "struct_in": "| battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_HAS_battle_death.ship` :  | :`battle_death.ship_HAS_battle_death.death` :",
        "text_in": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "seq_out": "MATCH (ship:`battle_death.ship`) RETURN ship.name,ship.tonnage ORDER BY ship.name DESC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (death:`battle_death.death`) RETURN max(death.caused_by_ship_id),min(death.caused_by_ship_id)",
        "query": "MATCH (death:`battle_death.death`)\nRETURN max(death.killed),min(death.killed)",
        "question": "What is maximum and minimum death toll caused each time?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "battle_death",
        "db_tag_names": [
            ":`battle_death.battle`",
            ":`battle_death.ship`",
            ":`battle_death.death`",
            ":`battle_death.battle_HAS_battle_death.ship`",
            ":`battle_death.ship_HAS_battle_death.death`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "id",
                "latin_commander",
                "bulgarian_commander",
                "date",
                "result",
                "name",
                "id",
                "tonnage",
                "lost_in_battle",
                "ship_type",
                "disposition_of_ship",
                "location",
                "id",
                "caused_by_ship_id",
                "killed",
                "note",
                "injured"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_HAS_battle_death.ship` :  | :`battle_death.ship_HAS_battle_death.death` : ",
        "struct_in": "| battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_HAS_battle_death.ship` :  | :`battle_death.ship_HAS_battle_death.death` :",
        "text_in": "What is maximum and minimum death toll caused each time?",
        "seq_out": "MATCH (death:`battle_death.death`) RETURN max(death.killed),min(death.killed)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (battle:`battle_death.battle`) WHERE battle.bulgarian_commander  < > 'Boril' RETURN battle.name,battle.result",
        "query": "MATCH (battle:`battle_death.battle`)\nWHERE battle.bulgarian_commander <> 'Boril'\nRETURN battle.name,battle.result",
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "battle_death",
        "db_tag_names": [
            ":`battle_death.battle`",
            ":`battle_death.ship`",
            ":`battle_death.death`",
            ":`battle_death.battle_HAS_battle_death.ship`",
            ":`battle_death.ship_HAS_battle_death.death`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "id",
                "latin_commander",
                "bulgarian_commander",
                "date",
                "result",
                "name",
                "id",
                "tonnage",
                "lost_in_battle",
                "ship_type",
                "disposition_of_ship",
                "location",
                "id",
                "caused_by_ship_id",
                "killed",
                "note",
                "injured"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander ( Boril ) , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_HAS_battle_death.ship` :  | :`battle_death.ship_HAS_battle_death.death` : ",
        "struct_in": "| battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander ( Boril ) , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_HAS_battle_death.ship` :  | :`battle_death.ship_HAS_battle_death.death` :",
        "text_in": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "seq_out": "MATCH (battle:`battle_death.battle`) WHERE battle.bulgarian_commander <> 'Boril' RETURN battle.name,battle.result",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`battle_death.battle`)-[]-(T2:`battle_death.ship`) WHERE T2.ship_type = 'Brig' RETURN DISTINCT T1.id,T1.name",
        "query": "MATCH (T1:`battle_death.battle`)-[]-(T2:`battle_death.ship`)\nWHERE T2.ship_type = 'Brig'\nRETURN DISTINCT T1.id,T1.name",
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "battle_death",
        "db_tag_names": [
            ":`battle_death.battle`",
            ":`battle_death.ship`",
            ":`battle_death.death`",
            ":`battle_death.battle_HAS_battle_death.ship`",
            ":`battle_death.ship_HAS_battle_death.death`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "id",
                "latin_commander",
                "bulgarian_commander",
                "date",
                "result",
                "name",
                "id",
                "tonnage",
                "lost_in_battle",
                "ship_type",
                "disposition_of_ship",
                "location",
                "id",
                "caused_by_ship_id",
                "killed",
                "note",
                "injured"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type ( Brig ) , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_HAS_battle_death.ship` :  | :`battle_death.ship_HAS_battle_death.death` : ",
        "struct_in": "| battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type ( Brig ) , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_HAS_battle_death.ship` :  | :`battle_death.ship_HAS_battle_death.death` :",
        "text_in": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "seq_out": "MATCH (T1:`battle_death.battle`)-[]-(T2:`battle_death.ship`) WHERE T2.ship_type = 'Brig' RETURN DISTINCT T1.id,T1.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (battle:`battle_death.battle`) WHERE battle.bulgarian_commander = 'Kaloyan' AND battle.latin_commander = 'Baldwin I' RETURN DISTINCT battle.name",
        "query": "MATCH (battle:`battle_death.battle`)\nWHERE battle.bulgarian_commander = 'Kaloyan' AND battle.latin_commander = 'Baldwin I'\nRETURN battle.name",
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "battle_death",
        "db_tag_names": [
            ":`battle_death.battle`",
            ":`battle_death.ship`",
            ":`battle_death.death`",
            ":`battle_death.battle_HAS_battle_death.ship`",
            ":`battle_death.ship_HAS_battle_death.death`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "id",
                "latin_commander",
                "bulgarian_commander",
                "date",
                "result",
                "name",
                "id",
                "tonnage",
                "lost_in_battle",
                "ship_type",
                "disposition_of_ship",
                "location",
                "id",
                "caused_by_ship_id",
                "killed",
                "note",
                "injured"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | battle_death | :`battle_death.battle` : name , id , latin_commander ( Baldwin I ) , bulgarian_commander ( Kaloyan ) , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_HAS_battle_death.ship` :  | :`battle_death.ship_HAS_battle_death.death` : ",
        "struct_in": "| battle_death | :`battle_death.battle` : name , id , latin_commander ( Baldwin I ) , bulgarian_commander ( Kaloyan ) , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_HAS_battle_death.ship` :  | :`battle_death.ship_HAS_battle_death.death` :",
        "text_in": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "seq_out": "MATCH (battle:`battle_death.battle`) WHERE battle.bulgarian_commander = 'Kaloyan' AND battle.latin_commander = 'Baldwin I' RETURN battle.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (battle:`battle_death.battle`) RETURN count(DISTINCT battle.result)",
        "query": "MATCH (battle:`battle_death.battle`)\nRETURN count(DISTINCT battle.result)",
        "question": "How many different results are there for the battles?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "battle_death",
        "db_tag_names": [
            ":`battle_death.battle`",
            ":`battle_death.ship`",
            ":`battle_death.death`",
            ":`battle_death.battle_HAS_battle_death.ship`",
            ":`battle_death.ship_HAS_battle_death.death`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "id",
                "latin_commander",
                "bulgarian_commander",
                "date",
                "result",
                "name",
                "id",
                "tonnage",
                "lost_in_battle",
                "ship_type",
                "disposition_of_ship",
                "location",
                "id",
                "caused_by_ship_id",
                "killed",
                "note",
                "injured"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_HAS_battle_death.ship` :  | :`battle_death.ship_HAS_battle_death.death` : ",
        "struct_in": "| battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_HAS_battle_death.ship` :  | :`battle_death.ship_HAS_battle_death.death` :",
        "text_in": "How many different results are there for the battles?",
        "seq_out": "MATCH (battle:`battle_death.battle`) RETURN count(DISTINCT battle.result)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (death:`battle_death.death`) WHERE death.note =~'.*[E|e]ast.*' RETURN death.note",
        "query": "MATCH (death:`battle_death.death`)\nWHERE death.note =~'.*[E|e]ast.*'\nRETURN death.note",
        "question": "What are the notes of the death events which has substring 'East'?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "battle_death",
        "db_tag_names": [
            ":`battle_death.battle`",
            ":`battle_death.ship`",
            ":`battle_death.death`",
            ":`battle_death.battle_HAS_battle_death.ship`",
            ":`battle_death.ship_HAS_battle_death.death`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "id",
                "latin_commander",
                "bulgarian_commander",
                "date",
                "result",
                "name",
                "id",
                "tonnage",
                "lost_in_battle",
                "ship_type",
                "disposition_of_ship",
                "location",
                "id",
                "caused_by_ship_id",
                "killed",
                "note",
                "injured"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_HAS_battle_death.ship` :  | :`battle_death.ship_HAS_battle_death.death` : ",
        "struct_in": "| battle_death | :`battle_death.battle` : name , id , latin_commander , bulgarian_commander , date , result | :`battle_death.ship` : name , id , tonnage , lost_in_battle , ship_type , disposition_of_ship , location | :`battle_death.death` : id , caused_by_ship_id , killed , note , injured | :`battle_death.battle_HAS_battle_death.ship` :  | :`battle_death.ship_HAS_battle_death.death` :",
        "text_in": "What are the notes of the death events which has substring 'East'?",
        "seq_out": "MATCH (death:`battle_death.death`) WHERE death.note =~'.*[E|e]ast.*' RETURN death.note",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (addresses:`student_transcripts_tracking.Addresses`) WHERE addresses.line_1 = 1 AND addresses.line_2 = 2 RETURN addresses.address_1",
        "query": "MATCH (addresses:`student_transcripts_tracking.Addresses`)\nRETURN addresses.line_1,addresses.line_2",
        "question": "what are all the addresses including line 1 and line 2?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "what are all the addresses including line 1 and line 2?",
        "seq_out": "MATCH (addresses:`student_transcripts_tracking.Addresses`) RETURN addresses.line_1,addresses.line_2",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (addresses:`student_transcripts_tracking.Addresses`) RETURN addresses.line_1,addresses.line_2",
        "query": "MATCH (addresses:`student_transcripts_tracking.Addresses`)\nRETURN addresses.line_1,addresses.line_2",
        "question": "What is the first and second line for all addresses?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What is the first and second line for all addresses?",
        "seq_out": "MATCH (addresses:`student_transcripts_tracking.Addresses`) RETURN addresses.line_1,addresses.line_2",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (courses:`student_transcripts_tracking.Courses`) RETURN count(*)",
        "query": "MATCH (courses:`student_transcripts_tracking.Courses`)\nRETURN count(*)",
        "question": "How many courses in total are listed?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "How many courses in total are listed?",
        "seq_out": "MATCH (courses:`student_transcripts_tracking.Courses`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (courses:`student_transcripts_tracking.Courses`) RETURN count(*)",
        "query": "MATCH (courses:`student_transcripts_tracking.Courses`)\nRETURN count(*)",
        "question": "How many courses are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "How many courses are there?",
        "seq_out": "MATCH (courses:`student_transcripts_tracking.Courses`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (courses:`student_transcripts_tracking.Courses`) WHERE courses.course_name ='math' RETURN courses.course_description",
        "query": "MATCH (courses:`student_transcripts_tracking.Courses`)\nWHERE courses.course_name = 'math'\nRETURN courses.course_description",
        "question": "How is the math course described?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name ( math ) | :`student_transcripts_tracking.Departments` : department_description , department_name ( math ) , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name ( math ) | :`student_transcripts_tracking.Departments` : department_description , department_name ( math ) , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "How is the math course described?",
        "seq_out": "MATCH (courses:`student_transcripts_tracking.Courses`) WHERE courses.course_name = 'math' RETURN courses.course_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (courses:`student_transcripts_tracking.Courses`) WHERE courses.course_name ='math' RETURN courses.course_description",
        "query": "MATCH (courses:`student_transcripts_tracking.Courses`)\nWHERE courses.course_name = 'math'\nRETURN courses.course_description",
        "question": "What are the descriptions for all the math courses?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name ( math ) | :`student_transcripts_tracking.Departments` : department_description , department_name ( math ) , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name ( math ) | :`student_transcripts_tracking.Departments` : department_description , department_name ( math ) , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What are the descriptions for all the math courses?",
        "seq_out": "MATCH (courses:`student_transcripts_tracking.Courses`) WHERE courses.course_name = 'math' RETURN courses.course_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (addresses:`student_transcripts_tracking.Addresses`) WHERE addresses.city = 'Port Chelsea' RETURN addresses.zip_postcode",
        "query": "MATCH (addresses:`student_transcripts_tracking.Addresses`)\nWHERE addresses.city = 'Port Chelsea'\nRETURN addresses.zip_postcode",
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city ( Port Chelsea ) | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city ( Port Chelsea ) | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What is the zip code of the address in the city Port Chelsea?",
        "seq_out": "MATCH (addresses:`student_transcripts_tracking.Addresses`) WHERE addresses.city = 'Port Chelsea' RETURN addresses.zip_postcode",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (addresses:`student_transcripts_tracking.Addresses`) WHERE addresses.city = 'Port Chelsea' RETURN addresses.zip_postcode",
        "query": "MATCH (addresses:`student_transcripts_tracking.Addresses`)\nWHERE addresses.city = 'Port Chelsea'\nRETURN addresses.zip_postcode",
        "question": "What is the zip code for Port Chelsea?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city ( Port Chelsea ) | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city ( Port Chelsea ) | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What is the zip code for Port Chelsea?",
        "seq_out": "MATCH (addresses:`student_transcripts_tracking.Addresses`) WHERE addresses.city = 'Port Chelsea' RETURN addresses.zip_postcode",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (departmentments:`student_transcripts_tracking.Departments`) WITH departmentments.department_name AS department_name, count(department.department_name) AS count, departmentments.department_id AS department_id RETURN department_name,department_id ORDER BY count DESC LIMIT 1",
        "query": "MATCH (T1:`student_transcripts_tracking.Degree_Programs`)-[]-(T2:`student_transcripts_tracking.Departments`)\nWITH T2.department_name AS department_name, count(T1.department_id) AS count, T1.department_id AS department_id\nRETURN department_name,department_id\nORDER BY count DESC\nLIMIT 1",
        "question": "Which department offers the most number of degrees? List department name and id.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "Which department offers the most number of degrees? List department name and id.",
        "seq_out": "MATCH (T1:`student_transcripts_tracking.Degree_Programs`)-[]-(T2:`student_transcripts_tracking.Departments`) WITH T2.department_name AS department_name, count(T1.department_id) AS count, T1.department_id AS department_id RETURN department_name,department_id ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (department:`student_transcripts_tracking.Departments`) RETURN count(*)",
        "query": "MATCH (degree_programs:`student_transcripts_tracking.Degree_Programs`)\nRETURN count(DISTINCT degree_programs.department_id)",
        "question": "How many departments offer any degree?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "How many departments offer any degree?",
        "seq_out": "MATCH (degree_programs:`student_transcripts_tracking.Degree_Programs`) RETURN count(DISTINCT degree_programs.department_id)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (department:`student_transcripts_tracking.Departments`) RETURN count(DISTINCT department.department_name)",
        "query": "MATCH (degree_programs:`student_transcripts_tracking.Degree_Programs`)\nRETURN count(DISTINCT degree_programs.department_id)",
        "question": "How many different departments offer degrees?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "How many different departments offer degrees?",
        "seq_out": "MATCH (degree_programs:`student_transcripts_tracking.Degree_Programs`) RETURN count(DISTINCT degree_programs.department_id)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (degree_programs:`student_transcripts_tracking.Degree_Programs`) RETURN count(DISTINCT degree_programs.degree_summary_name)",
        "query": "MATCH (degree_programs:`student_transcripts_tracking.Degree_Programs`)\nRETURN count(DISTINCT degree_programs.degree_summary_name)",
        "question": "How many different degree names are offered?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "How many different degree names are offered?",
        "seq_out": "MATCH (degree_programs:`student_transcripts_tracking.Degree_Programs`) RETURN count(DISTINCT degree_programs.degree_summary_name)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (degree_programs:`student_transcripts_tracking.Degree_Programs`) RETURN count(DISTINCT degree_programs.degree_programs)",
        "query": "MATCH (degree_programs:`student_transcripts_tracking.Degree_Programs`)\nRETURN count(DISTINCT degree_programs.degree_summary_name)",
        "question": "How many different degrees are offered?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "How many different degrees are offered?",
        "seq_out": "MATCH (degree_programs:`student_transcripts_tracking.Degree_Programs`) RETURN count(DISTINCT degree_programs.degree_summary_name)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (sections:`student_transcripts_tracking.Sections`) RETURN sections.section_name,sections.section_description",
        "query": "MATCH (sections:`student_transcripts_tracking.Sections`)\nRETURN sections.section_name,sections.section_description",
        "question": "What are the names and descriptions of all the sections?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What are the names and descriptions of all the sections?",
        "seq_out": "MATCH (sections:`student_transcripts_tracking.Sections`) RETURN sections.section_name,sections.section_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (sections:`student_transcripts_tracking.Sections`) RETURN sections.section_name,sections.section_description",
        "query": "MATCH (sections:`student_transcripts_tracking.Sections`)\nRETURN sections.section_name,sections.section_description",
        "question": "What are the names and descriptions for all the sections?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What are the names and descriptions for all the sections?",
        "seq_out": "MATCH (sections:`student_transcripts_tracking.Sections`) RETURN sections.section_name,sections.section_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`student_transcripts_tracking.Courses`)-[]-(T2:`student_transcripts_tracking.Sections`) WITH count(*) AS count, T1.course_id AS course_id, T1.course_name AS course_name WHERE count  < = 2 RETURN course_name,course_id",
        "query": "MATCH (T1:`student_transcripts_tracking.Courses`)-[]-(T2:`student_transcripts_tracking.Sections`)\nWITH count(*) AS count, T1.course_name AS course_name, T1.course_id AS course_id\nWHERE count  <= 2\nRETURN course_name,course_id",
        "question": "What are the names and id of courses having at most 2 sections?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What are the names and id of courses having at most 2 sections?",
        "seq_out": "MATCH (T1:`student_transcripts_tracking.Courses`)-[]-(T2:`student_transcripts_tracking.Sections`) WITH count(*) AS count, T1.course_name AS course_name, T1.course_id AS course_id WHERE count <= 2 RETURN course_name,course_id",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (sections:`student_transcripts_tracking.Sections`) WITH count(*) AS count, sections.course_id AS course_id WHERE count  < 2 RETURN course_name,course_id",
        "query": "MATCH (T1:`student_transcripts_tracking.Courses`)-[]-(T2:`student_transcripts_tracking.Sections`)\nWITH count(*) AS count, T1.course_name AS course_name, T1.course_id AS course_id\nWHERE count  <= 2\nRETURN course_name,course_id",
        "question": "What are the names and ids of every course with less than 2 sections?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What are the names and ids of every course with less than 2 sections?",
        "seq_out": "MATCH (T1:`student_transcripts_tracking.Courses`)-[]-(T2:`student_transcripts_tracking.Sections`) WITH count(*) AS count, T1.course_name AS course_name, T1.course_id AS course_id WHERE count <= 2 RETURN course_name,course_id",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (sections:`student_transcripts_tracking.Sections`) RETURN sections.section_name ORDER BY sections.section_name",
        "query": "MATCH (sections:`student_transcripts_tracking.Sections`)\nRETURN sections.section_name\nORDER BY sections.section_name DESC",
        "question": "List the section_name in reversed lexicographical order.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "List the section_name in reversed lexicographical order.",
        "seq_out": "MATCH (sections:`student_transcripts_tracking.Sections`) RETURN sections.section_name ORDER BY sections.section_name DESC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (sections:`student_transcripts_tracking.Sections`) RETURN sections.section_name ORDER BY sections.section_name",
        "query": "MATCH (sections:`student_transcripts_tracking.Sections`)\nRETURN sections.section_name\nORDER BY sections.section_name DESC",
        "question": "What are the names of the sections in reverse alphabetical order?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What are the names of the sections in reverse alphabetical order?",
        "seq_out": "MATCH (sections:`student_transcripts_tracking.Sections`) RETURN sections.section_name ORDER BY sections.section_name DESC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (semesters:`student_transcripts_tracking.Semesters`) WITH count(semesters.student_id) AS count, semesters.semester_id AS semester_id RETURN semester_name,semester_id ORDER BY count DESC LIMIT 1",
        "query": "MATCH (T1:`student_transcripts_tracking.Semesters`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH count(T1.semester_id) AS count, T1.semester_id AS semester_id, T1.semester_name AS semester_name\nRETURN semester_name,semester_id\nORDER BY count DESC\nLIMIT 1",
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What is the semester which most student registered in? Show both the name and the id.",
        "seq_out": "MATCH (T1:`student_transcripts_tracking.Semesters`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`) WITH count(T1.semester_id) AS count, T1.semester_id AS semester_id, T1.semester_name AS semester_name RETURN semester_name,semester_id ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (semesters:`student_transcripts_tracking.Semesters`) WITH count(semesters.semester_id) AS count, semesters.semester_id AS semester_id, semesters.semester_name AS semester_name RETURN semester_name,semester_id ORDER BY count DESC LIMIT 1",
        "query": "MATCH (T1:`student_transcripts_tracking.Semesters`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH count(T1.semester_id) AS count, T1.semester_id AS semester_id, T1.semester_name AS semester_name\nRETURN semester_name,semester_id\nORDER BY count DESC\nLIMIT 1",
        "question": "For each semester, what is the name and id of the one with the most students registered?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "For each semester, what is the name and id of the one with the most students registered?",
        "seq_out": "MATCH (T1:`student_transcripts_tracking.Semesters`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`) WITH count(T1.semester_id) AS count, T1.semester_id AS semester_id, T1.semester_name AS semester_name RETURN semester_name,semester_id ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (department:`student_transcripts_tracking.Departments`) WHERE department.department_name =~'.*[S|s]onger.*' RETURN department.department_description",
        "query": "MATCH (departments:`student_transcripts_tracking.Departments`)\nWHERE departments.department_name =~'.*[C|c]omputer.*'\nRETURN departments.department_description",
        "question": "What is the description of the department whose name has the substring the computer?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What is the description of the department whose name has the substring the computer?",
        "seq_out": "MATCH (departments:`student_transcripts_tracking.Departments`) WHERE departments.department_name =~'.*[C|c]omputer.*' RETURN departments.department_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (department:`student_transcripts_tracking.Departments`) WHERE department.department_name =~'.*[R|r]n.*' RETURN department.department_description",
        "query": "MATCH (departments:`student_transcripts_tracking.Departments`)\nWHERE departments.department_name =~'.*[C|c]omputer.*'\nRETURN departments.department_description",
        "question": "What is the department description for the one whose name has the word computer?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What is the department description for the one whose name has the word computer?",
        "seq_out": "MATCH (departments:`student_transcripts_tracking.Departments`) WHERE departments.department_name =~'.*[C|c]omputer.*' RETURN departments.department_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (student_enrolment:`student_transcripts_tracking.Student_Enrolment`) WITH count(*) AS count, student_enrolment.student_id AS student_enrolment_id WHERE count = 2 RETURN student_enrolment.student_enrolment_id,student_enrolment.middle_name,student_enrolment.last_name",
        "query": "MATCH (T1:`student_transcripts_tracking.Students`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH T1.last_name AS last_name, T1.student_id AS student_id, count(*) AS count, T1.middle_name AS middle_name, T1.first_name AS first_name\nWHERE count  = 2\nRETURN first_name,middle_name,last_name,student_id",
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "seq_out": "MATCH (T1:`student_transcripts_tracking.Students`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`) WITH T1.last_name AS last_name, T1.student_id AS student_id, count(*) AS count, T1.middle_name AS middle_name, T1.first_name AS first_name WHERE count = 2 RETURN first_name,middle_name,last_name,student_id",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (students:`student_transcripts_tracking.Students`) WHERE students.degree_programs = 2 RETURN students.first_name,students.middle_name,students.last_name,students.student_id",
        "query": "MATCH (T1:`student_transcripts_tracking.Students`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH T1.last_name AS last_name, T1.student_id AS student_id, count(*) AS count, T1.middle_name AS middle_name, T1.first_name AS first_name\nWHERE count  = 2\nRETURN first_name,middle_name,last_name,student_id",
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "seq_out": "MATCH (T1:`student_transcripts_tracking.Students`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`) WITH T1.last_name AS last_name, T1.student_id AS student_id, count(*) AS count, T1.middle_name AS middle_name, T1.first_name AS first_name WHERE count = 2 RETURN first_name,middle_name,last_name,student_id",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (student_enrolment:`student_transcripts_tracking.Student_Enrolment`) WITH count(student_enrolment.student_program_id) AS count, student_enrolment.student_program_id AS degree_program_id RETURN degree_program_id ORDER BY count DESC LIMIT 1",
        "query": "MATCH (T1:`student_transcripts_tracking.Degree_Programs`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH count(T1.degree_summary_name) AS count, T1.degree_summary_name AS degree_summary_name\nRETURN degree_summary_name\nORDER BY count DESC\nLIMIT 1",
        "question": "Find the kind of program which most number of students are enrolled in?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "Find the kind of program which most number of students are enrolled in?",
        "seq_out": "MATCH (T1:`student_transcripts_tracking.Degree_Programs`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`) WITH count(T1.degree_summary_name) AS count, T1.degree_summary_name AS degree_summary_name RETURN degree_summary_name ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (student_enrolment:`student_transcripts_tracking.Student_Enrolment`) WITH student_enrolment.degree_summary_name AS degree_summary_name, count(student_enrolment.degree_summary_name) AS count RETURN degree_summary_name ORDER BY count DESC LIMIT 1",
        "query": "MATCH (T1:`student_transcripts_tracking.Degree_Programs`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH count(T1.degree_summary_name) AS count, T1.degree_summary_name AS degree_summary_name\nRETURN degree_summary_name\nORDER BY count DESC\nLIMIT 1",
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What is the degree summary name that has the most number of students enrolled?",
        "seq_out": "MATCH (T1:`student_transcripts_tracking.Degree_Programs`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`) WITH count(T1.degree_summary_name) AS count, T1.degree_summary_name AS degree_summary_name RETURN degree_summary_name ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (student_enrolment:`student_transcripts_tracking.Student_Enrolment`) WITH student_enrolment.student_enrolment_id AS student_enrolment_id, count(student_enrolment.student_enrolment_id) AS count RETURN student_enrolment_id,student_enrolment.student_summary_description ORDER BY count DESC LIMIT 1",
        "query": "MATCH (T1:`student_transcripts_tracking.Degree_Programs`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH T1.degree_summary_name AS degree_summary_name, T1.degree_program_id AS degree_program_id, count(T1.degree_program_id) AS count\nRETURN degree_program_id,degree_summary_name\nORDER BY count DESC\nLIMIT 1",
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "seq_out": "MATCH (T1:`student_transcripts_tracking.Degree_Programs`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`) WITH T1.degree_summary_name AS degree_summary_name, T1.degree_program_id AS degree_program_id, count(T1.degree_program_id) AS count RETURN degree_program_id,degree_summary_name ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`student_transcripts_tracking.Student_Enrolment`)-[]-(T2:`student_transcripts_tracking.Degree_Programs`) WITH T2.degree_program_id AS degree_program_id, count(T1.department_id) AS count RETURN degree_program_id,degree_summary_name ORDER BY count DESC LIMIT 1",
        "query": "MATCH (T1:`student_transcripts_tracking.Degree_Programs`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`)\nWITH T1.degree_summary_name AS degree_summary_name, T1.degree_program_id AS degree_program_id, count(T1.degree_program_id) AS count\nRETURN degree_program_id,degree_summary_name\nORDER BY count DESC\nLIMIT 1",
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What is the program id and the summary of the degree that has the most students enrolled?",
        "seq_out": "MATCH (T1:`student_transcripts_tracking.Degree_Programs`)-[]-(T2:`student_transcripts_tracking.Student_Enrolment`) WITH T1.degree_summary_name AS degree_summary_name, T1.degree_program_id AS degree_program_id, count(T1.degree_program_id) AS count RETURN degree_program_id,degree_summary_name ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (semesters:`student_transcripts_tracking.Semesters`) WHERE NOT (semesters:`student_transcripts_tracking.Semesters`)-[]-(:`student_transcripts_tracking.Student_Enrolment`) RETURN semesters.semester_name",
        "query": "MATCH (semesters:`student_transcripts_tracking.Semesters`)\nWHERE NOT (semesters:`student_transcripts_tracking.Semesters`)-[]-(:`student_transcripts_tracking.Student_Enrolment`)\nRETURN semesters.semester_name",
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "Which semesters do not have any student enrolled? List the semester name.",
        "seq_out": "MATCH (semesters:`student_transcripts_tracking.Semesters`) WHERE NOT (semesters:`student_transcripts_tracking.Semesters`)-[]-(:`student_transcripts_tracking.Student_Enrolment`) RETURN semesters.semester_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (semesters:`student_transcripts_tracking.Semesters`) WHERE NOT (semesters:`student_transcripts_tracking.Semesters`)-[]-(:`student_transcripts_tracking.Student_Enrolment`) RETURN semesters.semester_name",
        "query": "MATCH (semesters:`student_transcripts_tracking.Semesters`)\nWHERE NOT (semesters:`student_transcripts_tracking.Semesters`)-[]-(:`student_transcripts_tracking.Student_Enrolment`)\nRETURN semesters.semester_name",
        "question": "What is the name of the semester with no students enrolled?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What is the name of the semester with no students enrolled?",
        "seq_out": "MATCH (semesters:`student_transcripts_tracking.Semesters`) WHERE NOT (semesters:`student_transcripts_tracking.Semesters`)-[]-(:`student_transcripts_tracking.Student_Enrolment`) RETURN semesters.semester_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (students:`student_transcripts_tracking.Students`) WHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward' RETURN students.cell_mobile_number",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nWHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward'\nRETURN students.cell_mobile_number",
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name ( Timmothy ) , email_address , student_id , date_first_registered , last_name ( Ward ) , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name ( Timmothy ) , email_address , student_id , date_first_registered , last_name ( Ward ) , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "seq_out": "MATCH (students:`student_transcripts_tracking.Students`) WHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward' RETURN students.cell_mobile_number",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (students:`student_transcripts_tracking.Students`) RETURN students.first_name,students.middle_name,students.last_name",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_first_registered ASC\nLIMIT 1",
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "Who is the first student to register? List the first name, middle name and last name.",
        "seq_out": "MATCH (students:`student_transcripts_tracking.Students`) RETURN students.first_name,students.middle_name,students.last_name ORDER BY students.date_first_registered ASC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (students:`student_transcripts_tracking.Students`) RETURN students.first_name,students.middle_name,students.last_name",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_first_registered ASC\nLIMIT 1",
        "question": "What is the first, middle, and last name of the first student to register?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What is the first, middle, and last name of the first student to register?",
        "seq_out": "MATCH (students:`student_transcripts_tracking.Students`) RETURN students.first_name,students.middle_name,students.last_name ORDER BY students.date_first_registered ASC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (students:`student_transcripts_tracking.Semesters`) RETURN students.first_name,students.middle_name,students.last_name ORDER BY students.date_first_registered LIMIT 1",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_left ASC\nLIMIT 1",
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "seq_out": "MATCH (students:`student_transcripts_tracking.Students`) RETURN students.first_name,students.middle_name,students.last_name ORDER BY students.date_left ASC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (students:`student_transcripts_tracking.Semesters`) RETURN students.first_name,students.middle_name,students.last_name ORDER BY students.date_first_registered LIMIT 1",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.first_name,students.middle_name,students.last_name\nORDER BY students.date_left ASC\nLIMIT 1",
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What is the first, middle, and last name of the earliest school graduate?",
        "seq_out": "MATCH (students:`student_transcripts_tracking.Students`) RETURN students.first_name,students.middle_name,students.last_name ORDER BY students.date_left ASC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (students:`student_transcripts_tracking.Students`) RETURN students.first_name UNION MATCH (students:`student_transcripts_tracking.Students`) WHERE students.permanent_address_id = 0 RETURN students.first_name AS first_name UNION MATCH (students:`student_transcripts_tracking.Students`) RETURN students.first_name AS first_name UNION MATCH (students:`student_trans",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nWHERE students.current_address_id <> students.permanent_address_id\nRETURN students.first_name",
        "question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "Whose permanent address is different from his or her current address? List his or her first name.",
        "seq_out": "MATCH (students:`student_transcripts_tracking.Students`) WHERE students.current_address_id <> students.permanent_address_id RETURN students.first_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (students:`student_transcripts_tracking.Students`) WHERE students.permanent_address_id = 1 RETURN students.first_name",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nWHERE students.current_address_id <> students.permanent_address_id\nRETURN students.first_name",
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What is the first name of the student whose permanent address is different from his or her current one?",
        "seq_out": "MATCH (students:`student_transcripts_tracking.Students`) WHERE students.current_address_id <> students.permanent_address_id RETURN students.first_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`student_transcripts_tracking.Addresses`)-[]-(T2:`student_transcripts_tracking.Students`) WITH T2.address_id AS address_id, count(T1.address_id) AS count RETURN address_id,count ORDER BY count DESC LIMIT 1",
        "query": "MATCH (T1:`student_transcripts_tracking.Addresses`)-[]-(T2:`student_transcripts_tracking.Students`)\nWITH T1.line_1 AS line_1, T1.address_id AS address_id, count(T1.address_id) AS count, T1.line_2 AS line_2\nRETURN address_id,line_1,line_2\nORDER BY count DESC\nLIMIT 1",
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "Which address holds the most number of students currently? List the address id and all lines.",
        "seq_out": "MATCH (T1:`student_transcripts_tracking.Addresses`)-[]-(T2:`student_transcripts_tracking.Students`) WITH T1.line_1 AS line_1, T1.address_id AS address_id, count(T1.address_id) AS count, T1.line_2 AS line_2 RETURN address_id,line_1,line_2 ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`student_transcripts_tracking.Addresses`)-[]-(T2:`student_transcripts_tracking.Students`) WITH T2.address_id AS address_id, count(T1.address_id) AS count, T2.line_1 AS line_1 RETURN address_id,line_1,line2 ORDER BY count DESC LIMIT 1",
        "query": "MATCH (T1:`student_transcripts_tracking.Addresses`)-[]-(T2:`student_transcripts_tracking.Students`)\nWITH T1.line_1 AS line_1, T1.address_id AS address_id, count(T1.address_id) AS count, T1.line_2 AS line_2\nRETURN address_id,line_1,line_2\nORDER BY count DESC\nLIMIT 1",
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What is the id, line 1, and line 2 of the address with the most students?",
        "seq_out": "MATCH (T1:`student_transcripts_tracking.Addresses`)-[]-(T2:`student_transcripts_tracking.Students`) WITH T1.line_1 AS line_1, T1.address_id AS address_id, count(T1.address_id) AS count, T1.line_2 AS line_2 RETURN address_id,line_1,line_2 ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`) RETURN transcript.transcript_date,transcripts.other_student_details ORDER BY transcript.date_first_registered ASC LIMIT 1",
        "query": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`)\nRETURN transcripts.transcript_date,transcripts.other_details\nORDER BY transcripts.transcript_date ASC\nLIMIT 1",
        "question": "When is the first transcript released? List the date and details.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "When is the first transcript released? List the date and details.",
        "seq_out": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`) RETURN transcripts.transcript_date,transcripts.other_details ORDER BY transcripts.transcript_date ASC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`) RETURN transcript.transcript_date,transcripts.other_student_details ORDER BY transcript.transcript_date ASC LIMIT 1",
        "query": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`)\nRETURN transcripts.transcript_date,transcripts.other_details\nORDER BY transcripts.transcript_date ASC\nLIMIT 1",
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What is the earliest date of a transcript release, and what details can you tell me?",
        "seq_out": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`) RETURN transcripts.transcript_date,transcripts.other_details ORDER BY transcripts.transcript_date ASC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`) RETURN count(*)",
        "query": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`)\nRETURN count(*)",
        "question": "How many transcripts are released?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "How many transcripts are released?",
        "seq_out": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`) RETURN count(*)",
        "query": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`)\nRETURN count(*)",
        "question": "How many transcripts are listed?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "How many transcripts are listed?",
        "seq_out": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`) RETURN transcript.transcript_date ORDER BY transcript.transcript_date DESC LIMIT 1",
        "query": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`)\nRETURN transcripts.transcript_date\nORDER BY transcripts.transcript_date DESC\nLIMIT 1",
        "question": "What is the last transcript release date?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What is the last transcript release date?",
        "seq_out": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`) RETURN transcripts.transcript_date ORDER BY transcripts.transcript_date DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`) RETURN transcripts.transcript_date ORDER BY transcripts.transcript_date DESC LIMIT 1",
        "query": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`)\nRETURN transcripts.transcript_date\nORDER BY transcripts.transcript_date DESC\nLIMIT 1",
        "question": "When was the last transcript released?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "When was the last transcript released?",
        "seq_out": "MATCH (transcripts:`student_transcripts_tracking.Transcripts`) RETURN transcripts.transcript_date ORDER BY transcripts.transcript_date DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (students:`student_transcripts_tracking.Students`) RETURN count(DISTINCT students.address_id)",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN count(DISTINCT students.current_address_id)",
        "question": "How many different addresses do the students currently live?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "How many different addresses do the students currently live?",
        "seq_out": "MATCH (students:`student_transcripts_tracking.Students`) RETURN count(DISTINCT students.current_address_id)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (students:`student_transcripts_tracking.Students`) RETURN DISTINCT students.address_id",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN count(DISTINCT students.current_address_id)",
        "question": "What are the different addresses that have students living there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What are the different addresses that have students living there?",
        "seq_out": "MATCH (students:`student_transcripts_tracking.Students`) RETURN count(DISTINCT students.current_address_id)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (students:`student_transcripts_tracking.Students`) RETURN students.other_student_details ORDER BY students.other_student_details",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.other_student_details\nORDER BY students.other_student_details DESC",
        "question": "List all the student details in reversed lexicographical order.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "List all the student details in reversed lexicographical order.",
        "seq_out": "MATCH (students:`student_transcripts_tracking.Students`) RETURN students.other_student_details ORDER BY students.other_student_details DESC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (students:`student_transcripts_tracking.Students`) RETURN students.other_student_details ORDER BY students.other_student_details",
        "query": "MATCH (students:`student_transcripts_tracking.Students`)\nRETURN students.other_student_details\nORDER BY students.other_student_details DESC",
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What other details can you tell me about students in reverse alphabetical order?",
        "seq_out": "MATCH (students:`student_transcripts_tracking.Students`) RETURN students.other_student_details ORDER BY students.other_student_details DESC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (sections:`student_transcripts_tracking.Sections`) RETURN sections.section_description",
        "query": "MATCH (sections:`student_transcripts_tracking.Sections`)\nWHERE sections.section_name = 'h'\nRETURN sections.section_description",
        "question": "Describe the section h.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "Describe the section h.",
        "seq_out": "MATCH (sections:`student_transcripts_tracking.Sections`) WHERE sections.section_name = 'h' RETURN sections.section_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (sections:`student_transcripts_tracking.Sections`) WHERE sections.section_name = 'h' RETURN sections.section_description",
        "query": "MATCH (sections:`student_transcripts_tracking.Sections`)\nWHERE sections.section_name = 'h'\nRETURN sections.section_description",
        "question": "What is the description for the section named h?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "student_transcripts_tracking",
        "db_tag_names": [
            ":`student_transcripts_tracking.Addresses`",
            ":`student_transcripts_tracking.Courses`",
            ":`student_transcripts_tracking.Departments`",
            ":`student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Semesters`",
            ":`student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Student_Enrolment_Courses`",
            ":`student_transcripts_tracking.Transcripts`",
            ":`student_transcripts_tracking.Transcript_Contents`",
            ":`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs`",
            ":`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections`",
            ":`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students`",
            ":`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment`",
            ":`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9
            ],
            "property_name": [
                "*",
                "zip_postcode",
                "address_id",
                "country",
                "line_2",
                "state_province_county",
                "line_1",
                "city",
                "course_description",
                "course_id",
                "course_name",
                "department_description",
                "department_name",
                "department_id",
                "degree_summary_name",
                "degree_program_id",
                "department_id",
                "degree_summary_description",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "semester_id",
                "semester_description",
                "semester_name",
                "ssn",
                "cell_mobile_number",
                "first_name",
                "email_address",
                "student_id",
                "date_first_registered",
                "last_name",
                "current_address_id",
                "middle_name",
                "date_left",
                "other_student_details",
                "permanent_address_id",
                "semester_id",
                "degree_program_id",
                "student_enrolment_id",
                "student_id",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_date",
                "transcript_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` : ",
        "struct_in": "| student_transcripts_tracking | :`student_transcripts_tracking.Addresses` : zip_postcode , address_id , country , line_2 , state_province_county , line_1 , city | :`student_transcripts_tracking.Courses` : course_description , course_id , course_name | :`student_transcripts_tracking.Departments` : department_description , department_name , department_id | :`student_transcripts_tracking.Degree_Programs` : degree_summary_name , degree_program_id , department_id , degree_summary_description | :`student_transcripts_tracking.Sections` : section_id , course_id , section_name , section_description | :`student_transcripts_tracking.Semesters` : semester_id , semester_description , semester_name | :`student_transcripts_tracking.Students` : ssn , cell_mobile_number , first_name , email_address , student_id , date_first_registered , last_name , current_address_id , middle_name , date_left , other_student_details , permanent_address_id | :`student_transcripts_tracking.Student_Enrolment` : semester_id , degree_program_id , student_enrolment_id , student_id | :`student_transcripts_tracking.Student_Enrolment_Courses` : student_course_id , course_id , student_enrolment_id | :`student_transcripts_tracking.Transcripts` : transcript_date , transcript_id | :`student_transcripts_tracking.Transcript_Contents` :  | :`student_transcripts_tracking.Departments_HAS_student_transcripts_tracking.Degree_Programs` :  | :`student_transcripts_tracking.Courses_HAS_student_transcripts_tracking.Sections` :  | :`student_transcripts_tracking.Addresses_HAS_student_transcripts_tracking.Students` :  | :`student_transcripts_tracking.Students_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Semesters_HAS_student_transcripts_tracking.Student_Enrolment` :  | :`student_transcripts_tracking.Degree_Programs_HAS_student_transcripts_tracking.Student_Enrolment` :",
        "text_in": "What is the description for the section named h?",
        "seq_out": "MATCH (sections:`student_transcripts_tracking.Sections`) WHERE sections.section_name = 'h' RETURN sections.section_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cartoon:`tvshow.Cartoon`) RETURN cartoon.Title ORDER BY cartoon.Title ASC",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Title\nORDER BY cartoon.Title",
        "question": "List the title of all cartoons in alphabetical order.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "List the title of all cartoons in alphabetical order.",
        "seq_out": "MATCH (cartoon:`tvshow.Cartoon`) RETURN cartoon.Title ORDER BY cartoon.Title",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cartoon:`tvshow.Cartoon`) RETURN cartoon.Title ORDER BY cartoon.Title ASC",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Title\nORDER BY cartoon.Title",
        "question": "What are the titles of the cartoons sorted alphabetically?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What are the titles of the cartoons sorted alphabetically?",
        "seq_out": "MATCH (cartoon:`tvshow.Cartoon`) RETURN cartoon.Title ORDER BY cartoon.Title",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cartoon:`tvshow.Cartoon`) WHERE cartoon.Directed_by = 'Ben Jones' RETURN cartoon.Title",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Directed_by = 'Ben Jones'\nRETURN cartoon.Title",
        "question": "List all cartoon directed by \"Ben Jones\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by ( Ben Jones ) , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by ( Ben Jones ) , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "List all cartoon directed by \"Ben Jones\".",
        "seq_out": "MATCH (cartoon:`tvshow.Cartoon`) WHERE cartoon.Directed_by = 'Ben Jones' RETURN cartoon.Title",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cartoon:`tvshow.Cartoon`) WHERE cartoon.Directed_by = 'Ben Jones' RETURN cartoon.Title",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Directed_by = 'Ben Jones'\nRETURN cartoon.Title",
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by ( Ben Jones ) , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by ( Ben Jones ) , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What are the names of all cartoons directed by Ben Jones?",
        "seq_out": "MATCH (cartoon:`tvshow.Cartoon`) WHERE cartoon.Directed_by = 'Ben Jones' RETURN cartoon.Title",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cartoon:`tvshow.Cartoon`) WHERE cartoon.Written_by = 'Joseph Kuhr' RETURN count(*)",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Written_by = 'Joseph Kuhr'\nRETURN count(*)",
        "question": "How many cartoons were written by \"Joseph Kuhr\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by ( Joseph Kuhr ) , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by ( Joseph Kuhr ) , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "How many cartoons were written by \"Joseph Kuhr\"?",
        "seq_out": "MATCH (cartoon:`tvshow.Cartoon`) WHERE cartoon.Written_by = 'Joseph Kuhr' RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cartoon:`tvshow.Cartoon`) WHERE cartoon.Written_by = 'Joseph Kuhr' RETURN count(*)",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Written_by = 'Joseph Kuhr'\nRETURN count(*)",
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by ( Joseph Kuhr ) , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by ( Joseph Kuhr ) , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What is the number of cartoones written by Joseph Kuhr?",
        "seq_out": "MATCH (cartoon:`tvshow.Cartoon`) WHERE cartoon.Written_by = 'Joseph Kuhr' RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cartoon:`tvshow.Cartoon`) RETURN cartoon.Title,cartoon.Directed_by ORDER BY cartoon.Air_Date",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Title,cartoon.Directed_by\nORDER BY cartoon.Original_air_date",
        "question": "list all cartoon titles and their directors ordered by their air date",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "list all cartoon titles and their directors ordered by their air date",
        "seq_out": "MATCH (cartoon:`tvshow.Cartoon`) RETURN cartoon.Title,cartoon.Directed_by ORDER BY cartoon.Original_air_date",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cartoon:`tvshow.Cartoon`) RETURN cartoon.Title,cartoon.Directed_by ORDER BY cartoon.Air_Date",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Title,cartoon.Directed_by\nORDER BY cartoon.Original_air_date",
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What is the name and directors of all the cartoons that are ordered by air date?",
        "seq_out": "MATCH (cartoon:`tvshow.Cartoon`) RETURN cartoon.Title,cartoon.Directed_by ORDER BY cartoon.Original_air_date",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cartoon:`tvshow.Cartoon`) WHERE cartoon.Directed_by = 'Ben Jones' OR cartoon.Directed_by = 'Brandon Vietti' RETURN cartoon.Title",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Directed_by = 'Ben Jones' OR cartoon.Directed_by = 'Brandon Vietti'\nRETURN cartoon.Title",
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by ( Brandon Vietti , Ben Jones ) , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by ( Brandon Vietti , Ben Jones ) , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "seq_out": "MATCH (cartoon:`tvshow.Cartoon`) WHERE cartoon.Directed_by = 'Ben Jones' OR cartoon.Directed_by = 'Brandon Vietti' RETURN cartoon.Title",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cartoon:`tvshow.Cartoon`) WHERE cartoon.Directed_by = 'Ben Jones' OR cartoon.Directed_by = 'Brandon Vietti' RETURN cartoon.Title",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nWHERE cartoon.Directed_by = 'Ben Jones' OR cartoon.Directed_by = 'Brandon Vietti'\nRETURN cartoon.Title",
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by ( Brandon Vietti , Ben Jones ) , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by ( Brandon Vietti , Ben Jones ) , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "seq_out": "MATCH (cartoon:`tvshow.Cartoon`) WHERE cartoon.Directed_by = 'Ben Jones' OR cartoon.Directed_by = 'Brandon Vietti' RETURN cartoon.Title",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (tv_channel:`tvshow.TV_Channel`) WITH TV_channel.Country AS Country, count(tv_channel.Country) AS count RETURN Country,count ORDER BY count DESC LIMIT 1",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWITH count(tv_channel.Country) AS count, tv_channel.Country AS Country\nRETURN Country,count\nORDER BY count DESC\nLIMIT 1",
        "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "seq_out": "MATCH (tv_channel:`tvshow.TV_Channel`) WITH count(tv_channel.Country) AS count, tv_channel.Country AS Country RETURN Country,count ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (tv_channel:`tvshow.TV_Channel`) WITH TV_channel.Country AS Country, count(tv_channel.Country) AS count RETURN Country,count ORDER BY count DESC LIMIT 1",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWITH count(tv_channel.Country) AS count, tv_channel.Country AS Country\nRETURN Country,count\nORDER BY count DESC\nLIMIT 1",
        "question": "What is the country with the most number of TV Channels and how many does it have?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What is the country with the most number of TV Channels and how many does it have?",
        "seq_out": "MATCH (tv_channel:`tvshow.TV_Channel`) WITH count(tv_channel.Country) AS count, tv_channel.Country AS Country RETURN Country,count ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.TV_series`) RETURN count(DISTINCT T2.series_name),T1.Content",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nRETURN count(DISTINCT tv_channel.series_name),count(DISTINCT tv_channel.Content)",
        "question": "List the number of different series names and contents in the TV Channel table.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "List the number of different series names and contents in the TV Channel table.",
        "seq_out": "MATCH (tv_channel:`tvshow.TV_Channel`) RETURN count(DISTINCT tv_channel.series_name),count(DISTINCT tv_channel.Content)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (TV_Channel:`tvshow.TV_Channel`) RETURN count(DISTINCT TV_Channel.series_name),DISTINCT TV_Channel.Content",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nRETURN count(DISTINCT tv_channel.series_name),count(DISTINCT tv_channel.Content)",
        "question": "How many different series and contents are listed in the TV Channel table?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "How many different series and contents are listed in the TV Channel table?",
        "seq_out": "MATCH (tv_channel:`tvshow.TV_Channel`) RETURN count(DISTINCT tv_channel.series_name),count(DISTINCT tv_channel.Content)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (TV_Channel:`tvshow.TV_Channel`) WHERE TV_Channel.series_name = 'Sky Radio' RETURN TV_Channel.Content",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.series_name = 'Sky Radio'\nRETURN tv_channel.Content",
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name ( Sky Radio ) , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name ( Sky Radio ) , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "seq_out": "MATCH (tv_channel:`tvshow.TV_Channel`) WHERE tv_channel.series_name = 'Sky Radio' RETURN tv_channel.Content",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.TV_series`) WHERE T2.series_name = 'Sky Radio' RETURN T1.Content",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.series_name = 'Sky Radio'\nRETURN tv_channel.Content",
        "question": "What is the content of the series Sky Radio?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name ( Sky Radio ) , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name ( Sky Radio ) , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What is the content of the series Sky Radio?",
        "seq_out": "MATCH (tv_channel:`tvshow.TV_Channel`) WHERE tv_channel.series_name = 'Sky Radio' RETURN tv_channel.Content",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (TV_channel:`tvshow.TV_Channel`) WHERE TTV_channel.series_name = 'Sky Radio' RETURN TTV_channel.Package_Option",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.series_name = 'Sky Radio'\nRETURN tv_channel.Package_Option",
        "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option ( Option ) , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name ( Sky Radio ) , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option ( Option ) , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name ( Sky Radio ) , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "seq_out": "MATCH (tv_channel:`tvshow.TV_Channel`) WHERE tv_channel.series_name = 'Sky Radio' RETURN tv_channel.Package_Option",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.TV_series`) WHERE T2.series_name = 'Sky Radio' RETURN T1.Package_Option",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.series_name = 'Sky Radio'\nRETURN tv_channel.Package_Option",
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option ( Option ) , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name ( Sky Radio ) , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option ( Option ) , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name ( Sky Radio ) , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "seq_out": "MATCH (tv_channel:`tvshow.TV_Channel`) WHERE tv_channel.series_name = 'Sky Radio' RETURN tv_channel.Package_Option",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (tv_channel:`tvshow.TV_Channel`) WHERE tv_channel.Language = 'English' RETURN count(*)",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Language = 'English'\nRETURN count(*)",
        "question": "How many TV Channel using language English?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language ( English ) , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language ( English ) , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "How many TV Channel using language English?",
        "seq_out": "MATCH (tv_channel:`tvshow.TV_Channel`) WHERE tv_channel.Language = 'English' RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (tv_channel:`tvshow.TV_Channel`) WHERE tv_channel.Language = 'English' RETURN count(*)",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Language = 'English'\nRETURN count(*)",
        "question": "How many TV Channels use the English language?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language ( English ) , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language ( English ) , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "How many TV Channels use the English language?",
        "seq_out": "MATCH (tv_channel:`tvshow.TV_Channel`) WHERE tv_channel.Language = 'English' RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (tv_channel:`tvshow.TV_Channel`) WITH TV_channel.Language AS Language, count(tv_channel.Language) AS count RETURN Language,count ORDER BY count ASC LIMIT 1",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWITH tv_channel.Language AS Language, count(tv_channel.Language) AS count\nRETURN Language,count\nORDER BY count ASC\nLIMIT 1",
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "seq_out": "MATCH (tv_channel:`tvshow.TV_Channel`) WITH tv_channel.Language AS Language, count(tv_channel.Language) AS count RETURN Language,count ORDER BY count ASC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.TV_Series`) WITH T2.Language AS Language, count(T1.id) AS count RETURN Language,count ORDER BY count ASC LIMIT 1",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWITH tv_channel.Language AS Language, count(tv_channel.Language) AS count\nRETURN Language,count\nORDER BY count ASC\nLIMIT 1",
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "seq_out": "MATCH (tv_channel:`tvshow.TV_Channel`) WITH tv_channel.Language AS Language, count(tv_channel.Language) AS count RETURN Language,count ORDER BY count ASC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (tv_channel:`tvshow.TV_Channel`) WITH TV_channel.Language AS Language, count(tv_channel.Language) AS count RETURN Language,count",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWITH tv_channel.Language AS Language, count(tv_channel.Language) AS count\nRETURN Language,count",
        "question": "List each language and the number of TV Channels using it.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "List each language and the number of TV Channels using it.",
        "seq_out": "MATCH (tv_channel:`tvshow.TV_Channel`) WITH tv_channel.Language AS Language, count(tv_channel.Language) AS count RETURN Language,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (tv_channel:`tvshow.TV_Channel`) WITH count(tv_channel.Language) AS count, tv_channel.Language AS Language RETURN Language,count",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWITH tv_channel.Language AS Language, count(tv_channel.Language) AS count\nRETURN Language,count",
        "question": "For each language, list the number of TV Channels that use it.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "For each language, list the number of TV Channels that use it.",
        "seq_out": "MATCH (tv_channel:`tvshow.TV_Channel`) WITH tv_channel.Language AS Language, count(tv_channel.Language) AS count RETURN Language,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`) WHERE T1.Title = 'The Rise of the Blue Beetle!' RETURN T2.series_name",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`)\nWHERE T2.Title = 'The Rise of the Blue Beetle!'\nRETURN T1.series_name",
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title ( The Rise of the Blue Beetle! ) , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title ( The Rise of the Blue Beetle! ) , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "seq_out": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`) WHERE T2.Title = 'The Rise of the Blue Beetle!' RETURN T1.series_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`) WHERE T1.Title = 'The Rise of the Blue Beetle' RETURN T2.series_name",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`)\nWHERE T2.Title = 'The Rise of the Blue Beetle!'\nRETURN T1.series_name",
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title ( The Rise of the Blue Beetle! ) , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title ( The Rise of the Blue Beetle! ) , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "seq_out": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`) WHERE T2.Title = 'The Rise of the Blue Beetle!' RETURN T1.series_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`tvshow.Cartoon`)-[]-(T2:`tvshow.TV_Channel`) WHERE T2.series_name = 'Sky Radio' RETURN T1.Title",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`)\nWHERE T1.series_name = 'Sky Radio'\nRETURN T2.Title",
        "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name ( Sky Radio ) , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name ( Sky Radio ) , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "seq_out": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`) WHERE T1.series_name = 'Sky Radio' RETURN T2.Title",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`tvshow.Cartoon`)-[]-(T2:`tvshow.TV_Channel`) WHERE T2.series_name = 'Sky Radio' RETURN T1.Title",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`)\nWHERE T1.series_name = 'Sky Radio'\nRETURN T2.Title",
        "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name ( Sky Radio ) , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name ( Sky Radio ) , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "seq_out": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`) WHERE T1.series_name = 'Sky Radio' RETURN T2.Title",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (tv_series:`tvshow.TV_series`) RETURN tv_series.Episode ORDER BY tv_series.Rating",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN tv_series.Episode\nORDER BY tv_series.Rating",
        "question": "List the Episode of all TV series sorted by rating.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "List the Episode of all TV series sorted by rating.",
        "seq_out": "MATCH (tv_series:`tvshow.TV_series`) RETURN tv_series.Episode ORDER BY tv_series.Rating",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (tv_series:`tvshow.TV_series`) RETURN tv_series.Episode ORDER BY tv_series.Rating",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN tv_series.Episode\nORDER BY tv_series.Rating",
        "question": "What are all of the episodes ordered by ratings?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What are all of the episodes ordered by ratings?",
        "seq_out": "MATCH (tv_series:`tvshow.TV_series`) RETURN tv_series.Episode ORDER BY tv_series.Rating",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (TV_series:`tvshow.TV_series`) RETURN TV_series.Episode,TV_series.Rating ORDER BY TV_series.Rating DESC LIMIT 3",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN tv_series.Episode,tv_series.Rating\nORDER BY tv_series.Rating DESC\nLIMIT 3",
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "seq_out": "MATCH (tv_series:`tvshow.TV_series`) RETURN tv_series.Episode,tv_series.Rating ORDER BY tv_series.Rating DESC LIMIT 3",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (TV_series:`tvshow.TV_series`) RETURN TV_series.Episode,TV_series.Rating ORDER BY TV_series.Rating DESC LIMIT 3",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN tv_series.Episode,tv_series.Rating\nORDER BY tv_series.Rating DESC\nLIMIT 3",
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "seq_out": "MATCH (tv_series:`tvshow.TV_series`) RETURN tv_series.Episode,tv_series.Rating ORDER BY tv_series.Rating DESC LIMIT 3",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (tv_series:`tvshow.TV_series`) RETURN min(tv_series.Share),max(tv_series.Share)",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN max(tv_series.Share),min(tv_series.Share)",
        "question": "What is minimum and maximum share of TV series?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What is minimum and maximum share of TV series?",
        "seq_out": "MATCH (tv_series:`tvshow.TV_series`) RETURN max(tv_series.Share),min(tv_series.Share)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (tv_series:`tvshow.TV_series`) RETURN max(tv_series.Share),min(tv_series.Share)",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nRETURN max(tv_series.Share),min(tv_series.Share)",
        "question": "What is the maximum and minimum share for the TV series?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What is the maximum and minimum share for the TV series?",
        "seq_out": "MATCH (tv_series:`tvshow.TV_series`) RETURN max(tv_series.Share),min(tv_series.Share)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (TV_series:`tvshow.TV_series`) WHERE TV_series.Episode = 'A Love of a Lifetime' RETURN TV_series.Air_Date",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nWHERE tv_series.Episode = 'A Love of a Lifetime'\nRETURN tv_series.Air_Date",
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode ( A Love of a Lifetime ) , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode ( A Love of a Lifetime ) , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "seq_out": "MATCH (tv_series:`tvshow.TV_series`) WHERE tv_series.Episode = 'A Love of a Lifetime' RETURN tv_series.Air_Date",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (TV_series:`tvshow.TV_series`) WHERE TTV_series.Episode = 'A Love of a Lifetime' RETURN TTV_series.Air_Date",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nWHERE tv_series.Episode = 'A Love of a Lifetime'\nRETURN tv_series.Air_Date",
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode ( A Love of a Lifetime ) , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode ( A Love of a Lifetime ) , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "When did the episode \"A Love of a Lifetime\" air?",
        "seq_out": "MATCH (tv_series:`tvshow.TV_series`) WHERE tv_series.Episode = 'A Love of a Lifetime' RETURN tv_series.Air_Date",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (TV_series:`tvshow.TV_series`) WHERE TV_series.Episode = 'A Love of a Lifetime' RETURN TV_series.Weekly_Rank",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nWHERE tv_series.Episode = 'A Love of a Lifetime'\nRETURN tv_series.Weekly_Rank",
        "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode ( A Love of a Lifetime ) , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode ( A Love of a Lifetime ) , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "seq_out": "MATCH (tv_series:`tvshow.TV_series`) WHERE tv_series.Episode = 'A Love of a Lifetime' RETURN tv_series.Weekly_Rank",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (TV_series:`tvshow.TV_series`) WHERE T1.Episode = 'A Love of a Lifetime' RETURN T2.Weekly_Rank",
        "query": "MATCH (tv_series:`tvshow.TV_series`)\nWHERE tv_series.Episode = 'A Love of a Lifetime'\nRETURN tv_series.Weekly_Rank",
        "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode ( A Love of a Lifetime ) , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode ( A Love of a Lifetime ) , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "seq_out": "MATCH (tv_series:`tvshow.TV_series`) WHERE tv_series.Episode = 'A Love of a Lifetime' RETURN tv_series.Weekly_Rank",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.TV_series`) WHERE T2.Episode = 'A Love of a Lifetime' RETURN T1.series_name",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.TV_series`)\nWHERE T2.Episode = 'A Love of a Lifetime'\nRETURN T1.series_name",
        "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode ( A Love of a Lifetime ) , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode ( A Love of a Lifetime ) , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "seq_out": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.TV_series`) WHERE T2.Episode = 'A Love of a Lifetime' RETURN T1.series_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (TV_series:`tvshow.TV_series`) WHERETV_series.Episode = 'A Love of a Lifetime' RETURNTV_series.series_name",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.TV_series`)\nWHERE T2.Episode = 'A Love of a Lifetime'\nRETURN T1.series_name",
        "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode ( A Love of a Lifetime ) , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode ( A Love of a Lifetime ) , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "seq_out": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.TV_series`) WHERE T2.Episode = 'A Love of a Lifetime' RETURN T1.series_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`tvshow.TV_series`)-[]-(T2:`tvshow.TV_Channel`) WHERE T2.series_name = 'Sky Radio' RETURN T1.Episode",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.TV_series`)\nWHERE T1.series_name = 'Sky Radio'\nRETURN T2.Episode",
        "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name ( Sky Radio ) , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name ( Sky Radio ) , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "seq_out": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.TV_series`) WHERE T1.series_name = 'Sky Radio' RETURN T2.Episode",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (TV_series:`tvshow.TV_series`) WHERE TV_series.series_name = 'Sky Radio' RETURN TV_series.Episode",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.TV_series`)\nWHERE T1.series_name = 'Sky Radio'\nRETURN T2.Episode",
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name ( Sky Radio ) , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name ( Sky Radio ) , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What is the episode for the TV series named \"Sky Radio\"?",
        "seq_out": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.TV_series`) WHERE T1.series_name = 'Sky Radio' RETURN T2.Episode",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cartoon:`tvshow.Cartoon`) WITH count(cartoon.Directed_by) AS count, cartoon.Directed_by AS Directed_by RETURN Directed_by,count",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nWITH count(cartoon.Directed_by) AS count, cartoon.Directed_by AS Directed_by\nRETURN count,Directed_by",
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "Find the number of cartoons directed by each of the listed directors.",
        "seq_out": "MATCH (cartoon:`tvshow.Cartoon`) WITH count(cartoon.Directed_by) AS count, cartoon.Directed_by AS Directed_by RETURN count,Directed_by",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cartoon:`tvshow.Cartoon`) WITH count(cartoon.Directed_by) AS count, cartoon.Directed_by AS Directed_by RETURN Directed_by,count",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nWITH count(cartoon.Directed_by) AS count, cartoon.Directed_by AS Directed_by\nRETURN count,Directed_by",
        "question": "How many cartoons did each director create?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "How many cartoons did each director create?",
        "seq_out": "MATCH (cartoon:`tvshow.Cartoon`) WITH count(cartoon.Directed_by) AS count, cartoon.Directed_by AS Directed_by RETURN count,Directed_by",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cartoon:`tvshow.Cartoon`) RETURN cartoon.Production_code,cartoon.Channel ORDER BY cartoon.Original_air_date DESC LIMIT 1",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Production_code,cartoon.Channel\nORDER BY cartoon.Original_air_date DESC\nLIMIT 1",
        "question": "Find the production code and channel of the most recently aired cartoon .",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "Find the production code and channel of the most recently aired cartoon .",
        "seq_out": "MATCH (cartoon:`tvshow.Cartoon`) RETURN cartoon.Production_code,cartoon.Channel ORDER BY cartoon.Original_air_date DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (cartoon:`tvshow.Cartoon`) RETURN cartoon.Production_code,cartoon.Channel ORDER BY cartoon.Year DESC LIMIT 1",
        "query": "MATCH (cartoon:`tvshow.Cartoon`)\nRETURN cartoon.Production_code,cartoon.Channel\nORDER BY cartoon.Original_air_date DESC\nLIMIT 1",
        "question": "What is the produdction code and channel of the most recent cartoon ?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What is the produdction code and channel of the most recent cartoon ?",
        "seq_out": "MATCH (cartoon:`tvshow.Cartoon`) RETURN cartoon.Production_code,cartoon.Channel ORDER BY cartoon.Original_air_date DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (TV_Channel:`tvshow.TV_Channel`) WHERE TV_Channel.Hight_definition_TV > 0 RETURN TV_Channel.Package_Option,TV_Channel.series_name ORDER BY TV_Channel.Hight_definition_TV DESC LIMIT 1",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Hight_definition_TV = 'yes'\nRETURN tv_channel.Package_Option,tv_channel.series_name",
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "Find the package choice and series name of the TV channel that has high definition TV.",
        "seq_out": "MATCH (tv_channel:`tvshow.TV_Channel`) WHERE tv_channel.Hight_definition_TV = 'yes' RETURN tv_channel.Package_Option,tv_channel.series_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.TV_series`) WHERE T2.Hight_definition_TV = 1 RETURN T1.Package_Option,T2.series_name",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Hight_definition_TV = 'yes'\nRETURN tv_channel.Package_Option,tv_channel.series_name",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option ( Option ) , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option ( Option ) , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "seq_out": "MATCH (tv_channel:`tvshow.TV_Channel`) WHERE tv_channel.Hight_definition_TV = 'yes' RETURN tv_channel.Package_Option,tv_channel.series_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`tvshow.Cartoon`)-[]-(T2:`tvshow.TV_Channel`) WHERE T2.Written_by = 'Todd Casey' RETURN T1.Country",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`)\nWHERE T2.Written_by = 'Todd Casey'\nRETURN T1.Country",
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by ( Todd Casey ) , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by ( Todd Casey ) , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "seq_out": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`) WHERE T2.Written_by = 'Todd Casey' RETURN T1.Country",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`tvshow.Cartoon`)-[]-(T2:`tvshow.TV_series`) WHERE T2.Written_by = 'Todd Casey' RETURN T1.Country",
        "query": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`)\nWHERE T2.Written_by = 'Todd Casey'\nRETURN T1.Country",
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by ( Todd Casey ) , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by ( Todd Casey ) , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "seq_out": "MATCH (T1:`tvshow.TV_Channel`)-[]-(T2:`tvshow.Cartoon`) WHERE T2.Written_by = 'Todd Casey' RETURN T1.Country",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (tv_channel:`tvshow.TV_Channel`) WHERE tv_channel.Language  < > 'English' RETURN tv_channel.Pixel_aspect_ratio_PAR,tv_channel.Nation",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Language <> 'English'\nRETURN tv_channel.Pixel_aspect_ratio_PAR,tv_channel.Country",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language ( English ) , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language ( English ) , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "seq_out": "MATCH (tv_channel:`tvshow.TV_Channel`) WHERE tv_channel.Language <> 'English' RETURN tv_channel.Pixel_aspect_ratio_PAR,tv_channel.Country",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (TV_Channel:`tvshow.TV_Channel`) WHERE TV_Channel.Language  < > 'English' RETURN T2.Pixel_aspect_ratio_PAR,T1.Country",
        "query": "MATCH (tv_channel:`tvshow.TV_Channel`)\nWHERE tv_channel.Language <> 'English'\nRETURN tv_channel.Pixel_aspect_ratio_PAR,tv_channel.Country",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "tvshow",
        "db_tag_names": [
            ":`tvshow.TV_Channel`",
            ":`tvshow.TV_series`",
            ":`tvshow.Cartoon`",
            ":`tvshow.TV_Channel_HAS_tvshow.TV_series`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "Country",
                "id",
                "Package_Option",
                "Language",
                "Hight_definition_TV",
                "Pixel_aspect_ratio_PAR",
                "series_name",
                "Pay_per_view_PPV",
                "Content",
                "id",
                "Weekly_Rank",
                "Episode",
                "18_49_Rating_Share",
                "Rating",
                "Share",
                "Channel",
                "Viewers_m",
                "Air_Date",
                "id",
                "Title",
                "Original_air_date",
                "Production_code",
                "Written_by",
                "Directed_by",
                "Channel"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Double",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String"
        ],
        "serialized_schema": " | tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language ( English ) , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` : ",
        "struct_in": "| tvshow | :`tvshow.TV_Channel` : Country , id , Package_Option , Language ( English ) , Hight_definition_TV , Pixel_aspect_ratio_PAR , series_name , Pay_per_view_PPV , Content | :`tvshow.TV_series` : id , Weekly_Rank , Episode , 18_49_Rating_Share , Rating , Share , Channel , Viewers_m , Air_Date | :`tvshow.Cartoon` : id , Title , Original_air_date , Production_code , Written_by , Directed_by , Channel | :`tvshow.TV_Channel_HAS_tvshow.TV_series` :",
        "text_in": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "seq_out": "MATCH (tv_channel:`tvshow.TV_Channel`) WHERE tv_channel.Language <> 'English' RETURN tv_channel.Pixel_aspect_ratio_PAR,tv_channel.Country",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (poker_player:`poker_player.poker_player`) RETURN count(*)",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN count(*)",
        "question": "How many poker players are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "How many poker players are there?",
        "seq_out": "MATCH (poker_player:`poker_player.poker_player`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (poker_player:`poker_player.poker_player`) RETURN count(*)",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN count(*)",
        "question": "Count the number of poker players.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "Count the number of poker players.",
        "seq_out": "MATCH (poker_player:`poker_player.poker_player`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (poker_player:`poker_player.poker_player`) RETURN poker_player.Earnings ORDER BY poker_player.Earnings DESC",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Earnings\nORDER BY poker_player.Earnings DESC",
        "question": "List the earnings of poker players in descending order.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "List the earnings of poker players in descending order.",
        "seq_out": "MATCH (poker_player:`poker_player.poker_player`) RETURN poker_player.Earnings ORDER BY poker_player.Earnings DESC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (poker_player:`poker_player.poker_player`) RETURN poker_player.Earnings ORDER BY poker_player.Earnings DESC",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Earnings\nORDER BY poker_player.Earnings DESC",
        "question": "What are the earnings of poker players, ordered descending by value?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "What are the earnings of poker players, ordered descending by value?",
        "seq_out": "MATCH (poker_player:`poker_player.poker_player`) RETURN poker_player.Earnings ORDER BY poker_player.Earnings DESC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (poker_player:`poker_player.poker_player`) RETURN poker_player.Final_Table_Made,poker_player.Best_Finish ORDER BY poker_player.Best_Finish DESC LIMIT 1",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Final_Table_Made,poker_player.Best_Finish",
        "question": "List the final tables made and the best finishes of poker players.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "List the final tables made and the best finishes of poker players.",
        "seq_out": "MATCH (poker_player:`poker_player.poker_player`) RETURN poker_player.Final_Table_Made,poker_player.Best_Finish",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (poker_player:`poker_player.poker_player`) RETURN poker_player.Final_Table_Made,poker_player.Best_Finish",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Final_Table_Made,poker_player.Best_Finish",
        "question": "What are the final tables made and best finishes for all poker players?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "What are the final tables made and best finishes for all poker players?",
        "seq_out": "MATCH (poker_player:`poker_player.poker_player`) RETURN poker_player.Final_Table_Made,poker_player.Best_Finish",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (poker_player:`poker_player.poker_player`) RETURN avg(poker_player.Earnings)",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN avg(poker_player.Earnings)",
        "question": "What is the average earnings of poker players?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "What is the average earnings of poker players?",
        "seq_out": "MATCH (poker_player:`poker_player.poker_player`) RETURN avg(poker_player.Earnings)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (poker_player:`poker_player.poker_player`) RETURN avg(poker_player.Earnings)",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN avg(poker_player.Earnings)",
        "question": "Return the average earnings across all poker players.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "Return the average earnings across all poker players.",
        "seq_out": "MATCH (poker_player:`poker_player.poker_player`) RETURN avg(poker_player.Earnings)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (poker_player:`poker_player.poker_player`) RETURN poker_player.Money_Rank ORDER BY poker_player.Earnings DESC LIMIT 1",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Money_Rank\nORDER BY poker_player.Earnings DESC\nLIMIT 1",
        "question": "What is the money rank of the poker player with the highest earnings?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "What is the money rank of the poker player with the highest earnings?",
        "seq_out": "MATCH (poker_player:`poker_player.poker_player`) RETURN poker_player.Money_Rank ORDER BY poker_player.Earnings DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (poker_player:`poker_player.poker_player`) RETURN poker_player.Money_Rank ORDER BY poker_player.Earnings DESC LIMIT 1",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nRETURN poker_player.Money_Rank\nORDER BY poker_player.Earnings DESC\nLIMIT 1",
        "question": "Return the money rank of the player with the greatest earnings.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "Return the money rank of the player with the greatest earnings.",
        "seq_out": "MATCH (poker_player:`poker_player.poker_player`) RETURN poker_player.Money_Rank ORDER BY poker_player.Earnings DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (poker_player:`poker_player.poker_player`) WHERE poker_player.Earnings  < 200000 RETURN max(poker_player.Final_Table_Made)",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nWHERE poker_player.Earnings < 200000\nRETURN max(poker_player.Final_Table_Made)",
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "seq_out": "MATCH (poker_player:`poker_player.poker_player`) WHERE poker_player.Earnings < 200000 RETURN max(poker_player.Final_Table_Made)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (poker_player:`poker_player.poker_player`) WHERE poker_player.Earnings  < 200000 RETURN max(poker_player.Final_Table_Made)",
        "query": "MATCH (poker_player:`poker_player.poker_player`)\nWHERE poker_player.Earnings < 200000\nRETURN max(poker_player.Final_Table_Made)",
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "seq_out": "MATCH (poker_player:`poker_player.poker_player`) WHERE poker_player.Earnings < 200000 RETURN max(poker_player.Final_Table_Made)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`poker_player.poker_player`)-[]-(T2:`poker_player.people`) RETURN T2.Name",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Name",
        "question": "What are the names of poker players?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "What are the names of poker players?",
        "seq_out": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`) RETURN T1.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`poker_player.poker_player`)-[]-(T2:`poker_player.people`) RETURN T2.Name",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Name",
        "question": "Return the names of all the poker players.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "Return the names of all the poker players.",
        "seq_out": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`) RETURN T1.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`poker_player.poker_player`)-[]-(T2:`poker_player.people`) WHERE T1.Earnings > 300000 RETURN T2.Name",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nWHERE T2.Earnings > 300000\nRETURN T1.Name",
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "What are the names of poker players whose earnings is higher than 300000?",
        "seq_out": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`) WHERE T2.Earnings > 300000 RETURN T1.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`poker_player.poker_player`)-[]-(T2:`poker_player.people`) WHERE T1.Earnings > 300000 RETURN T2.Name",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nWHERE T2.Earnings > 300000\nRETURN T1.Name",
        "question": "Give the names of poker players who have earnings above 300000.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "Give the names of poker players who have earnings above 300000.",
        "seq_out": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`) WHERE T2.Earnings > 300000 RETURN T1.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`poker_player.poker_player`)-[]-(T2:`poker_player.people`) RETURN T1.Name ORDER BY T2.Final_Table_Made ASC",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Name\nORDER BY T2.Final_Table_Made",
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "List the names of poker players ordered by the final tables made in ascending order.",
        "seq_out": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`) RETURN T1.Name ORDER BY T2.Final_Table_Made",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`poker_player.poker_player`)-[]-(T2:`poker_player.people`) RETURN T2.Name ORDER BY T2.Final_Table_Made ASC",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Name\nORDER BY T2.Final_Table_Made",
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "seq_out": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`) RETURN T1.Name ORDER BY T2.Final_Table_Made",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`poker_player.poker_player`)-[]-(T2:`poker_player.people`) RETURN T2.Birth_Date ORDER BY T1.Earnings LIMIT 1",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Birth_Date\nORDER BY T2.Earnings ASC\nLIMIT 1",
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "What is the birth date of the poker player with the lowest earnings?",
        "seq_out": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`) RETURN T1.Birth_Date ORDER BY T2.Earnings ASC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`poker_player.poker_player`)-[]-(T2:`poker_player.people`) RETURN T2.Birth_Date ORDER BY T1.Earnings LIMIT 1",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Birth_Date\nORDER BY T2.Earnings ASC\nLIMIT 1",
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "Return the birth date of the poker player with the lowest earnings.",
        "seq_out": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`) RETURN T1.Birth_Date ORDER BY T2.Earnings ASC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`poker_player.poker_player`)-[]-(T2:`poker_player.people`) RETURN T2.Money_Rank ORDER BY T2.Height DESC LIMIT 1",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T2.Money_Rank\nORDER BY T1.Height DESC\nLIMIT 1",
        "question": "What is the money rank of the tallest poker player?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "What is the money rank of the tallest poker player?",
        "seq_out": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`) RETURN T2.Money_Rank ORDER BY T1.Height DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`poker_player.poker_player`)-[]-(T2:`poker_player.people`) RETURN T1.Money_Rank ORDER BY T2.Height DESC LIMIT 1",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T2.Money_Rank\nORDER BY T1.Height DESC\nLIMIT 1",
        "question": "Return the money rank of the poker player with the greatest height.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "Return the money rank of the poker player with the greatest height.",
        "seq_out": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`) RETURN T2.Money_Rank ORDER BY T1.Height DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`poker_player.poker_player`)-[]-(T2:`poker_player.people`) WHERE T2.Height > 200 RETURN avg(T1.Earnings)",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nWHERE T1.Height > 200\nRETURN avg(T2.Earnings)",
        "question": "What is the average earnings of poker players with height higher than 200?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "What is the average earnings of poker players with height higher than 200?",
        "seq_out": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`) WHERE T1.Height > 200 RETURN avg(T2.Earnings)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`poker_player.poker_player`)-[]-(T2:`poker_player.people`) WHERE T1.Height > 200 RETURN avg(T2.Earnings)",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nWHERE T1.Height > 200\nRETURN avg(T2.Earnings)",
        "question": "Give average earnings of poker players who are taller than 200.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "Give average earnings of poker players who are taller than 200.",
        "seq_out": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`) WHERE T1.Height > 200 RETURN avg(T2.Earnings)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`poker_player.poker_player`)-[]-(T2:`poker_player.people`) RETURN T2.Name ORDER BY T2.Earnings DESC",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Name\nORDER BY T2.Earnings DESC",
        "question": "What are the names of poker players in descending order of earnings?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "What are the names of poker players in descending order of earnings?",
        "seq_out": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`) RETURN T1.Name ORDER BY T2.Earnings DESC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`poker_player.poker_player`)-[]-(T2:`poker_player.people`) RETURN T2.Name ORDER BY T2.Earnings DESC",
        "query": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`)\nRETURN T1.Name\nORDER BY T2.Earnings DESC",
        "question": "Return the names of poker players sorted by their earnings descending.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "Return the names of poker players sorted by their earnings descending.",
        "seq_out": "MATCH (T1:`poker_player.people`)-[]-(T2:`poker_player.poker_player`) RETURN T1.Name ORDER BY T2.Earnings DESC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (people:`poker_player.people`) WITH people.Nationality AS Nationality, count(people.Nationality) AS count RETURN Nationality,count",
        "query": "MATCH (people:`poker_player.people`)\nWITH people.Nationality AS Nationality, count(people.Nationality) AS count\nRETURN Nationality,count",
        "question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "What are different nationalities of people and the corresponding number of people from each nation?",
        "seq_out": "MATCH (people:`poker_player.people`) WITH people.Nationality AS Nationality, count(people.Nationality) AS count RETURN Nationality,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (people:`poker_player.people`) WITH people.Nationality AS Nationality, count(people.Nationality) AS count RETURN Nationality,count",
        "query": "MATCH (people:`poker_player.people`)\nWITH people.Nationality AS Nationality, count(people.Nationality) AS count\nRETURN Nationality,count",
        "question": "How many people are there of each nationality?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "How many people are there of each nationality?",
        "seq_out": "MATCH (people:`poker_player.people`) WITH people.Nationality AS Nationality, count(people.Nationality) AS count RETURN Nationality,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (people:`poker_player.people`) WITH people.Nationality AS Nationality, count(people.Nationality) AS count RETURN Nationality ORDER BY count DESC LIMIT 1",
        "query": "MATCH (people:`poker_player.people`)\nWITH people.Nationality AS Nationality, count(people.Nationality) AS count\nRETURN Nationality\nORDER BY count DESC\nLIMIT 1",
        "question": "What is the most common nationality of people?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "What is the most common nationality of people?",
        "seq_out": "MATCH (people:`poker_player.people`) WITH people.Nationality AS Nationality, count(people.Nationality) AS count RETURN Nationality ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (people:`poker_player.people`) WITH people.Nationality AS Nationality, count(people.Nationality) AS count RETURN Nationality ORDER BY count DESC LIMIT 1",
        "query": "MATCH (people:`poker_player.people`)\nWITH people.Nationality AS Nationality, count(people.Nationality) AS count\nRETURN Nationality\nORDER BY count DESC\nLIMIT 1",
        "question": "Give the nationality that is most common across all people.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "Give the nationality that is most common across all people.",
        "seq_out": "MATCH (people:`poker_player.people`) WITH people.Nationality AS Nationality, count(people.Nationality) AS count RETURN Nationality ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (people:`poker_player.people`) WITH count(*) AS count, people.Nationality AS Nationality WHERE count >= 2 RETURN Nationality",
        "query": "MATCH (people:`poker_player.people`)\nWITH count(*) AS count, people.Nationality AS Nationality\nWHERE count  >= 2\nRETURN Nationality",
        "question": "What are the nationalities that are shared by at least two people?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "What are the nationalities that are shared by at least two people?",
        "seq_out": "MATCH (people:`poker_player.people`) WITH count(*) AS count, people.Nationality AS Nationality WHERE count >= 2 RETURN Nationality",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (people:`poker_player.people`) WITH count(*) AS count, people.Nationality AS Nationality WHERE count >= 2 RETURN Nationality",
        "query": "MATCH (people:`poker_player.people`)\nWITH count(*) AS count, people.Nationality AS Nationality\nWHERE count  >= 2\nRETURN Nationality",
        "question": "Return the nationalities for which there are two or more people.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "Return the nationalities for which there are two or more people.",
        "seq_out": "MATCH (people:`poker_player.people`) WITH count(*) AS count, people.Nationality AS Nationality WHERE count >= 2 RETURN Nationality",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (people:`poker_player.people`) RETURN people.Name,people.Birth_Date ORDER BY people.Name ASC",
        "query": "MATCH (people:`poker_player.people`)\nRETURN people.Name,people.Birth_Date\nORDER BY people.Name ASC",
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "List the names and birth dates of people in ascending alphabetical order of name.",
        "seq_out": "MATCH (people:`poker_player.people`) RETURN people.Name,people.Birth_Date ORDER BY people.Name ASC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (people:`poker_player.people`) RETURN people.Name,people.Birth_Date ORDER BY people.Name ASC",
        "query": "MATCH (people:`poker_player.people`)\nRETURN people.Name,people.Birth_Date\nORDER BY people.Name ASC",
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "seq_out": "MATCH (people:`poker_player.people`) RETURN people.Name,people.Birth_Date ORDER BY people.Name ASC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (people:`poker_player.people`) WHERE people.Nationality  < > 'Russia' RETURN people.Name",
        "query": "MATCH (people:`poker_player.people`)\nWHERE people.Nationality <> 'Russia'\nRETURN people.Name",
        "question": "Show names of people whose nationality is not \"Russia\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality ( Russia ) , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality ( Russia ) , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "Show names of people whose nationality is not \"Russia\".",
        "seq_out": "MATCH (people:`poker_player.people`) WHERE people.Nationality <> 'Russia' RETURN people.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (people:`poker_player.people`) WHERE people.Nationality  < > 'Russia' RETURN people.Name",
        "query": "MATCH (people:`poker_player.people`)\nWHERE people.Nationality <> 'Russia'\nRETURN people.Name",
        "question": "What are the names of people who are not from Russia?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality ( Russia ) , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality ( Russia ) , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "What are the names of people who are not from Russia?",
        "seq_out": "MATCH (people:`poker_player.people`) WHERE people.Nationality <> 'Russia' RETURN people.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (people:`poker_player.people`) WHERE NOT (people:`poker_player.people`)-[]-(:`poker_player.poker_player`) RETURN people.Name",
        "query": "MATCH (people:`poker_player.people`)\nWHERE NOT (people:`poker_player.people`)-[]-(:`poker_player.poker_player`)\nRETURN people.Name",
        "question": "List the names of people that are not poker players.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "List the names of people that are not poker players.",
        "seq_out": "MATCH (people:`poker_player.people`) WHERE NOT (people:`poker_player.people`)-[]-(:`poker_player.poker_player`) RETURN people.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (people:`poker_player.people`) WHERE NOT (people:`poker_player.people`)-[]-(:`poker_player.poker_player`) RETURN people.Name",
        "query": "MATCH (people:`poker_player.people`)\nWHERE NOT (people:`poker_player.people`)-[]-(:`poker_player.poker_player`)\nRETURN people.Name",
        "question": "What are the names of people who do not play poker?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "What are the names of people who do not play poker?",
        "seq_out": "MATCH (people:`poker_player.people`) WHERE NOT (people:`poker_player.people`)-[]-(:`poker_player.poker_player`) RETURN people.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (people:`poker_player.people`) RETURN count(DISTINCT people.Nationality)",
        "query": "MATCH (people:`poker_player.people`)\nRETURN count(DISTINCT people.Nationality)",
        "question": "How many distinct nationalities are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "How many distinct nationalities are there?",
        "seq_out": "MATCH (people:`poker_player.people`) RETURN count(DISTINCT people.Nationality)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (people:`poker_player.people`) RETURN count(DISTINCT people.Nationality)",
        "query": "MATCH (people:`poker_player.people`)\nRETURN count(DISTINCT people.Nationality)",
        "question": "Count the number of different nationalities.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "poker_player",
        "db_tag_names": [
            ":`poker_player.poker_player`",
            ":`poker_player.people`",
            ":`poker_player.people_HAS_poker_player.poker_player`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "People_ID",
                "Best_Finish",
                "Earnings",
                "Poker_Player_ID",
                "Money_Rank",
                "Final_Table_Made",
                "Name",
                "People_ID",
                "Nationality",
                "Height",
                "Birth_Date"
            ]
        },
        "db_property_types": [
            "Long",
            "Double",
            "Double",
            "Long",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "String"
        ],
        "serialized_schema": " | poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` : ",
        "struct_in": "| poker_player | :`poker_player.poker_player` : People_ID , Best_Finish , Earnings , Poker_Player_ID , Money_Rank , Final_Table_Made | :`poker_player.people` : Name , People_ID , Nationality , Height , Birth_Date | :`poker_player.people_HAS_poker_player.poker_player` :",
        "text_in": "Count the number of different nationalities.",
        "seq_out": "MATCH (people:`poker_player.people`) RETURN count(DISTINCT people.Nationality)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (area_code_state:`voter_1.AREA_CODE_STATE`) RETURN count(*)",
        "query": "MATCH (area_code_state:`voter_1.AREA_CODE_STATE`)\nRETURN count(*)",
        "question": "How many states are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "voter_1",
        "db_tag_names": [
            ":`voter_1.AREA_CODE_STATE`",
            ":`voter_1.CONTESTANTS`",
            ":`voter_1.VOTES`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "created",
                "contestant_number",
                "phone_number",
                "vote_id",
                "state"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String"
        ],
        "serialized_schema": " | voter_1 | :`voter_1.AREA_CODE_STATE` : area_code , state | :`voter_1.CONTESTANTS` : contestant_number , contestant_name | :`voter_1.VOTES` : created , contestant_number , phone_number , vote_id , state",
        "struct_in": "| voter_1 | :`voter_1.AREA_CODE_STATE` : area_code , state | :`voter_1.CONTESTANTS` : contestant_number , contestant_name | :`voter_1.VOTES` : created , contestant_number , phone_number , vote_id , state",
        "text_in": "How many states are there?",
        "seq_out": "MATCH (area_code_state:`voter_1.AREA_CODE_STATE`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (conteSTANTS:`voter_1.CONTESTANTS`) RETURN conteSTANTS.contestant_number,conteSTANTS.contestant_name ORDER BY conteSTANTS.contestant_name DESC",
        "query": "MATCH (contestants:`voter_1.CONTESTANTS`)\nRETURN contestants.contestant_number,contestants.contestant_name\nORDER BY contestants.contestant_name DESC",
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "voter_1",
        "db_tag_names": [
            ":`voter_1.AREA_CODE_STATE`",
            ":`voter_1.CONTESTANTS`",
            ":`voter_1.VOTES`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "created",
                "contestant_number",
                "phone_number",
                "vote_id",
                "state"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String"
        ],
        "serialized_schema": " | voter_1 | :`voter_1.AREA_CODE_STATE` : area_code , state | :`voter_1.CONTESTANTS` : contestant_number , contestant_name | :`voter_1.VOTES` : created , contestant_number , phone_number , vote_id , state",
        "struct_in": "| voter_1 | :`voter_1.AREA_CODE_STATE` : area_code , state | :`voter_1.CONTESTANTS` : contestant_number , contestant_name | :`voter_1.VOTES` : created , contestant_number , phone_number , vote_id , state",
        "text_in": "List the contestant numbers and names, ordered by contestant name descending.",
        "seq_out": "MATCH (contestants:`voter_1.CONTESTANTS`) RETURN contestants.contestant_number,contestants.contestant_name ORDER BY contestants.contestant_name DESC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (votes:`voter_1.VOTES`) RETURN votes.vote_id,votes.phone_number,votes.state",
        "query": "MATCH (votes:`voter_1.VOTES`)\nRETURN votes.vote_id,votes.phone_number,votes.state",
        "question": "List the vote ids, phone numbers and states of all votes.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "voter_1",
        "db_tag_names": [
            ":`voter_1.AREA_CODE_STATE`",
            ":`voter_1.CONTESTANTS`",
            ":`voter_1.VOTES`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "created",
                "contestant_number",
                "phone_number",
                "vote_id",
                "state"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String"
        ],
        "serialized_schema": " | voter_1 | :`voter_1.AREA_CODE_STATE` : area_code , state | :`voter_1.CONTESTANTS` : contestant_number , contestant_name | :`voter_1.VOTES` : created , contestant_number , phone_number , vote_id , state",
        "struct_in": "| voter_1 | :`voter_1.AREA_CODE_STATE` : area_code , state | :`voter_1.CONTESTANTS` : contestant_number , contestant_name | :`voter_1.VOTES` : created , contestant_number , phone_number , vote_id , state",
        "text_in": "List the vote ids, phone numbers and states of all votes.",
        "seq_out": "MATCH (votes:`voter_1.VOTES`) RETURN votes.vote_id,votes.phone_number,votes.state",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (area_code_state:`voter_1.AREA_CODE_STATE`) RETURN max(area_code_state.area_code),min(area_code_state.area_code)",
        "query": "MATCH (area_code_state:`voter_1.AREA_CODE_STATE`)\nRETURN max(area_code_state.area_code),min(area_code_state.area_code)",
        "question": "What are the maximum and minimum values of area codes?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "voter_1",
        "db_tag_names": [
            ":`voter_1.AREA_CODE_STATE`",
            ":`voter_1.CONTESTANTS`",
            ":`voter_1.VOTES`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "created",
                "contestant_number",
                "phone_number",
                "vote_id",
                "state"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String"
        ],
        "serialized_schema": " | voter_1 | :`voter_1.AREA_CODE_STATE` : area_code , state | :`voter_1.CONTESTANTS` : contestant_number , contestant_name | :`voter_1.VOTES` : created , contestant_number , phone_number , vote_id , state",
        "struct_in": "| voter_1 | :`voter_1.AREA_CODE_STATE` : area_code , state | :`voter_1.CONTESTANTS` : contestant_number , contestant_name | :`voter_1.VOTES` : created , contestant_number , phone_number , vote_id , state",
        "text_in": "What are the maximum and minimum values of area codes?",
        "seq_out": "MATCH (area_code_state:`voter_1.AREA_CODE_STATE`) RETURN max(area_code_state.area_code),min(area_code_state.area_code)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (votes:`voter_1.VOTES`) WHERE votes.state = 'CA' RETURN votes.created ORDER BY votes.created DESC LIMIT 1",
        "query": "MATCH (votes:`voter_1.VOTES`)\nWHERE votes.state = 'CA'\nRETURN max(votes.created)",
        "question": "What is last date created of votes from the state 'CA'?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "voter_1",
        "db_tag_names": [
            ":`voter_1.AREA_CODE_STATE`",
            ":`voter_1.CONTESTANTS`",
            ":`voter_1.VOTES`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "created",
                "contestant_number",
                "phone_number",
                "vote_id",
                "state"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String"
        ],
        "serialized_schema": " | voter_1 | :`voter_1.AREA_CODE_STATE` : area_code , state ( CA ) | :`voter_1.CONTESTANTS` : contestant_number , contestant_name | :`voter_1.VOTES` : created , contestant_number , phone_number , vote_id , state ( CA )",
        "struct_in": "| voter_1 | :`voter_1.AREA_CODE_STATE` : area_code , state ( CA ) | :`voter_1.CONTESTANTS` : contestant_number , contestant_name | :`voter_1.VOTES` : created , contestant_number , phone_number , vote_id , state ( CA )",
        "text_in": "What is last date created of votes from the state 'CA'?",
        "seq_out": "MATCH (votes:`voter_1.VOTES`) WHERE votes.state = 'CA' RETURN max(votes.created)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (conteSTANTS:`voter_1.CONTESTANTS`) WHERE conteSTANTS.contestant_name  < > 'Jessie Alloway' RETURN conteSTANTS.contestant_name",
        "query": "MATCH (contestants:`voter_1.CONTESTANTS`)\nWHERE contestants.contestant_name <> 'Jessie Alloway'\nRETURN contestants.contestant_name",
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "voter_1",
        "db_tag_names": [
            ":`voter_1.AREA_CODE_STATE`",
            ":`voter_1.CONTESTANTS`",
            ":`voter_1.VOTES`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "created",
                "contestant_number",
                "phone_number",
                "vote_id",
                "state"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String"
        ],
        "serialized_schema": " | voter_1 | :`voter_1.AREA_CODE_STATE` : area_code , state | :`voter_1.CONTESTANTS` : contestant_number , contestant_name ( Jessie Alloway ) | :`voter_1.VOTES` : created , contestant_number , phone_number , vote_id , state",
        "struct_in": "| voter_1 | :`voter_1.AREA_CODE_STATE` : area_code , state | :`voter_1.CONTESTANTS` : contestant_number , contestant_name ( Jessie Alloway ) | :`voter_1.VOTES` : created , contestant_number , phone_number , vote_id , state",
        "text_in": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "seq_out": "MATCH (contestants:`voter_1.CONTESTANTS`) WHERE contestants.contestant_name <> 'Jessie Alloway' RETURN contestants.contestant_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (votes:`voter_1.VOTES`) RETURN DISTINCT votes.state,votes.created",
        "query": "MATCH (votes:`voter_1.VOTES`)\nRETURN DISTINCT votes.state,votes.created",
        "question": "What are the distinct states and create time of all votes?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "voter_1",
        "db_tag_names": [
            ":`voter_1.AREA_CODE_STATE`",
            ":`voter_1.CONTESTANTS`",
            ":`voter_1.VOTES`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "created",
                "contestant_number",
                "phone_number",
                "vote_id",
                "state"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String"
        ],
        "serialized_schema": " | voter_1 | :`voter_1.AREA_CODE_STATE` : area_code , state | :`voter_1.CONTESTANTS` : contestant_number , contestant_name | :`voter_1.VOTES` : created , contestant_number , phone_number , vote_id , state",
        "struct_in": "| voter_1 | :`voter_1.AREA_CODE_STATE` : area_code , state | :`voter_1.CONTESTANTS` : contestant_number , contestant_name | :`voter_1.VOTES` : created , contestant_number , phone_number , vote_id , state",
        "text_in": "What are the distinct states and create time of all votes?",
        "seq_out": "MATCH (votes:`voter_1.VOTES`) RETURN DISTINCT votes.state,votes.created",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (votes:`voter_1.VOTES`) WHERE votes.state = 'NY' OR votes.state = 'CA' RETURN count(*)",
        "query": "MATCH (votes:`voter_1.VOTES`)\nWHERE votes.state = 'NY' OR votes.state = 'CA'\nRETURN count(*)",
        "question": "What are the number of votes from state 'NY' or 'CA'?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "voter_1",
        "db_tag_names": [
            ":`voter_1.AREA_CODE_STATE`",
            ":`voter_1.CONTESTANTS`",
            ":`voter_1.VOTES`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "property_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "created",
                "contestant_number",
                "phone_number",
                "vote_id",
                "state"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String"
        ],
        "serialized_schema": " | voter_1 | :`voter_1.AREA_CODE_STATE` : area_code , state ( NY , CA ) | :`voter_1.CONTESTANTS` : contestant_number , contestant_name | :`voter_1.VOTES` : created , contestant_number , phone_number , vote_id , state ( NY , CA )",
        "struct_in": "| voter_1 | :`voter_1.AREA_CODE_STATE` : area_code , state ( NY , CA ) | :`voter_1.CONTESTANTS` : contestant_number , contestant_name | :`voter_1.VOTES` : created , contestant_number , phone_number , vote_id , state ( NY , CA )",
        "text_in": "What are the number of votes from state 'NY' or 'CA'?",
        "seq_out": "MATCH (votes:`voter_1.VOTES`) WHERE votes.state = 'NY' OR votes.state = 'CA' RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (conductor:`orchestra.conductor`) RETURN count(*)",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN count(*)",
        "question": "How many conductors are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "How many conductors are there?",
        "seq_out": "MATCH (conductor:`orchestra.conductor`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (conductor:`orchestra.conductor`) RETURN count(*)",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN count(*)",
        "question": "Count the number of conductors.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "Count the number of conductors.",
        "seq_out": "MATCH (conductor:`orchestra.conductor`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (conductor:`orchestra.conductor`) RETURN conductor.Name ORDER BY conductor.Age ASC",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Age ASC",
        "question": "List the names of conductors in ascending order of age.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "List the names of conductors in ascending order of age.",
        "seq_out": "MATCH (conductor:`orchestra.conductor`) RETURN conductor.Name ORDER BY conductor.Age ASC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (conductor:`orchestra.conductor`) RETURN conductor.Name ORDER BY conductor.Age",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Age ASC",
        "question": "What are the names of conductors, ordered by age?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "What are the names of conductors, ordered by age?",
        "seq_out": "MATCH (conductor:`orchestra.conductor`) RETURN conductor.Name ORDER BY conductor.Age ASC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (conductor:`orchestra.conductor`) WHERE conductor.Nationality  < > 'USA' RETURN conductor.Name",
        "query": "MATCH (conductor:`orchestra.conductor`)\nWHERE conductor.Nationality <> 'USA'\nRETURN conductor.Name",
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality ( USA ) | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality ( USA ) | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "What are the names of conductors whose nationalities are not \"USA\"?",
        "seq_out": "MATCH (conductor:`orchestra.conductor`) WHERE conductor.Nationality <> 'USA' RETURN conductor.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (conductor:`orchestra.conductor`) WHERE conductor.Nationality  < > 'USA' RETURN conductor.Name",
        "query": "MATCH (conductor:`orchestra.conductor`)\nWHERE conductor.Nationality <> 'USA'\nRETURN conductor.Name",
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality ( USA ) | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality ( USA ) | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "Return the names of conductors that do not have the nationality \"USA\".",
        "seq_out": "MATCH (conductor:`orchestra.conductor`) WHERE conductor.Nationality <> 'USA' RETURN conductor.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (orchestra:`orchestra.orchestra`) RETURNorchestra.Record_Company ORDER BYorchestra.Year_of_Founded DESC",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nRETURN orchestra.Record_Company\nORDER BY orchestra.Year_of_Founded DESC",
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "seq_out": "MATCH (orchestra:`orchestra.orchestra`) RETURN orchestra.Record_Company ORDER BY orchestra.Year_of_Founded DESC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (orchestra:`orchestra.orchestra`) RETURNorchestra.Record_Company ORDER BYorchestra.Year_of_Founded DESC",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nRETURN orchestra.Record_Company\nORDER BY orchestra.Year_of_Founded DESC",
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "seq_out": "MATCH (orchestra:`orchestra.orchestra`) RETURN orchestra.Record_Company ORDER BY orchestra.Year_of_Founded DESC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (show:`orchestra.show`) RETURN avg(show.Attendance)",
        "query": "MATCH (show:`orchestra.show`)\nRETURN avg(show.Attendance)",
        "question": "What is the average attendance of shows?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "What is the average attendance of shows?",
        "seq_out": "MATCH (show:`orchestra.show`) RETURN avg(show.Attendance)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (show:`orchestra.show`) RETURN avg(show.Attendance)",
        "query": "MATCH (show:`orchestra.show`)\nRETURN avg(show.Attendance)",
        "question": "Return the average attendance across all shows.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "Return the average attendance across all shows.",
        "seq_out": "MATCH (show:`orchestra.show`) RETURN avg(show.Attendance)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (performance:`orchestra.performance`) WHERE performance.Type  < > 'Live final' RETURN max(performance.Share),min(performance.Share)",
        "query": "MATCH (performance:`orchestra.performance`)\nWHERE performance.Type <> 'Live final'\nRETURN max(performance.Share),min(performance.Share)",
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type ( Live final ) , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type ( Live final ) , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "seq_out": "MATCH (performance:`orchestra.performance`) WHERE performance.Type <> 'Live final' RETURN max(performance.Share),min(performance.Share)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (performance:`orchestra.performance`) WHERE performance.Type  < > 'Live final' RETURN max(performance.Share),min(performance.Share)",
        "query": "MATCH (performance:`orchestra.performance`)\nWHERE performance.Type <> 'Live final'\nRETURN max(performance.Share),min(performance.Share)",
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type ( Live final ) , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type ( Live final ) , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "seq_out": "MATCH (performance:`orchestra.performance`) WHERE performance.Type <> 'Live final' RETURN max(performance.Share),min(performance.Share)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (conductor:`orchestra.conductor`) RETURN count(DISTINCT conductor.Nationality)",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN count(DISTINCT conductor.Nationality)",
        "question": "How many different nationalities do conductors have?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "How many different nationalities do conductors have?",
        "seq_out": "MATCH (conductor:`orchestra.conductor`) RETURN count(DISTINCT conductor.Nationality)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (conductor:`orchestra.conductor`) RETURN count(DISTINCT conductor.Nationality)",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN count(DISTINCT conductor.Nationality)",
        "question": "Count the number of different nationalities of conductors.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "Count the number of different nationalities of conductors.",
        "seq_out": "MATCH (conductor:`orchestra.conductor`) RETURN count(DISTINCT conductor.Nationality)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (conductor:`orchestra.conductor`) RETURN conductor.Name ORDER BY conductor.Year_of_Work DESC",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Year_of_Work DESC",
        "question": "List names of conductors in descending order of years of work.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "List names of conductors in descending order of years of work.",
        "seq_out": "MATCH (conductor:`orchestra.conductor`) RETURN conductor.Name ORDER BY conductor.Year_of_Work DESC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (conductor:`orchestra.conductor`) RETURN conductor.Name ORDER BY conductor.Year_of_Work DESC",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Year_of_Work DESC",
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "seq_out": "MATCH (conductor:`orchestra.conductor`) RETURN conductor.Name ORDER BY conductor.Year_of_Work DESC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (conductor:`orchestra.conductor`) RETURN conductor.Name ORDER BY conductor.Year_of_Work DESC LIMIT 1",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Year_of_Work DESC\nLIMIT 1",
        "question": "List the name of the conductor with the most years of work.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "List the name of the conductor with the most years of work.",
        "seq_out": "MATCH (conductor:`orchestra.conductor`) RETURN conductor.Name ORDER BY conductor.Year_of_Work DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (conductor:`orchestra.conductor`) RETURN conductor.Name ORDER BY conductor.Year_of_Work DESC LIMIT 1",
        "query": "MATCH (conductor:`orchestra.conductor`)\nRETURN conductor.Name\nORDER BY conductor.Year_of_Work DESC\nLIMIT 1",
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "What is the name of the conductor who has worked the greatest number of years?",
        "seq_out": "MATCH (conductor:`orchestra.conductor`) RETURN conductor.Name ORDER BY conductor.Year_of_Work DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`) RETURN T1.Name,T2.Orchestra",
        "query": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nRETURN T1.Name,T2.Orchestra",
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "Show the names of conductors and the orchestras they have conducted.",
        "seq_out": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`) RETURN T1.Name,T2.Orchestra",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`) RETURN T1.Name,T2.Orchestra",
        "query": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nRETURN T1.Name,T2.Orchestra",
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "seq_out": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`) RETURN T1.Name,T2.Orchestra",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`) WHERE T2.Year_of_Founded > 2008 RETURN T1.Name",
        "query": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nWHERE T2.Year_of_Founded > 2008\nRETURN T1.Name",
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "seq_out": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`) WHERE T2.Year_of_Founded > 2008 RETURN T1.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`) WHERE T2.Year_of_Founded > 2008 RETURN T1.Name",
        "query": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`)\nWHERE T2.Year_of_Founded > 2008\nRETURN T1.Name",
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "seq_out": "MATCH (T1:`orchestra.conductor`)-[]-(T2:`orchestra.orchestra`) WHERE T2.Year_of_Founded > 2008 RETURN T1.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (orchestra:`orchestra.orchestra`) WITH count(orchestra.Record_Company) AS count, orchestra.Record_Company AS Record_Company RETURN Record_Company,count",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWITH orchestra.Record_Company AS Record_Company, count(orchestra.Record_Company) AS count\nRETURN Record_Company,count",
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "Please show the different record companies and the corresponding number of orchestras.",
        "seq_out": "MATCH (orchestra:`orchestra.orchestra`) WITH orchestra.Record_Company AS Record_Company, count(orchestra.Record_Company) AS count RETURN Record_Company,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (orchestra:`orchestra.orchestra`) WITH count(orchestra.Record_Company) AS count,orchestra.Record_Company AS Record_Company RETURN Record_Company,count",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWITH orchestra.Record_Company AS Record_Company, count(orchestra.Record_Company) AS count\nRETURN Record_Company,count",
        "question": "How many orchestras does each record company manage?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "How many orchestras does each record company manage?",
        "seq_out": "MATCH (orchestra:`orchestra.orchestra`) WITH orchestra.Record_Company AS Record_Company, count(orchestra.Record_Company) AS count RETURN Record_Company,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (orchestra:`orchestra.orchestra`) WITH count(orchestra.Orchestra_ID) AS count, orchestra.Major_Record_Format AS Major_Record_Format RETURN Major_Record_Format ORDER BY count ASC",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWITH count(orchestra.Major_Record_Format) AS count, orchestra.Major_Record_Format AS Major_Record_Format\nRETURN Major_Record_Format\nORDER BY count ASC",
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "Please show the record formats of orchestras in ascending order of count.",
        "seq_out": "MATCH (orchestra:`orchestra.orchestra`) WITH count(orchestra.Major_Record_Format) AS count, orchestra.Major_Record_Format AS Major_Record_Format RETURN Major_Record_Format ORDER BY count ASC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (orchestra:`orchestra.orchestra`) WITH count(orchestra.Major_Record_Format) AS count,orchestra.Major_Record_Format AS Major_Record_Format RETURN Major_Record_Format ORDER BY count DESC",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWITH count(orchestra.Major_Record_Format) AS count, orchestra.Major_Record_Format AS Major_Record_Format\nRETURN Major_Record_Format\nORDER BY count ASC",
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "What are the major record formats of orchestras, sorted by their frequency?",
        "seq_out": "MATCH (orchestra:`orchestra.orchestra`) WITH count(orchestra.Major_Record_Format) AS count, orchestra.Major_Record_Format AS Major_Record_Format RETURN Major_Record_Format ORDER BY count ASC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (orchestra:`orchestra.orchestra`) WITH count(orchestra.Record_Company) AS count,orchestra.Record_Company AS Record_Company RETURN Record_Company ORDER BY count DESC LIMIT 1",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWITH orchestra.Record_Company AS Record_Company, count(orchestra.Record_Company) AS count\nRETURN Record_Company\nORDER BY count DESC\nLIMIT 1",
        "question": "List the record company shared by the most number of orchestras.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "List the record company shared by the most number of orchestras.",
        "seq_out": "MATCH (orchestra:`orchestra.orchestra`) WITH orchestra.Record_Company AS Record_Company, count(orchestra.Record_Company) AS count RETURN Record_Company ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (orchestra:`orchestra.orchestra`) WITH count(orchestra.Record_Company) AS count,orchestra.Record_Company AS Record_Company RETURN Record_Company ORDER BY count DESC LIMIT 1",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWITH orchestra.Record_Company AS Record_Company, count(orchestra.Record_Company) AS count\nRETURN Record_Company\nORDER BY count DESC\nLIMIT 1",
        "question": "What is the record company used by the greatest number of orchestras?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "What is the record company used by the greatest number of orchestras?",
        "seq_out": "MATCH (orchestra:`orchestra.orchestra`) WITH orchestra.Record_Company AS Record_Company, count(orchestra.Record_Company) AS count RETURN Record_Company ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (orchestra:`orchestra.orchestra`) WHERE NOT (orchestra:`orchestra.orchestra`)-[]-(:`orchestra.performance`) RETURN orchestra.Orchestra",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWHERE NOT (orchestra:`orchestra.orchestra`)-[]-(:`orchestra.performance`)\nRETURN orchestra.Orchestra",
        "question": "List the names of orchestras that have no performance.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "List the names of orchestras that have no performance.",
        "seq_out": "MATCH (orchestra:`orchestra.orchestra`) WHERE NOT (orchestra:`orchestra.orchestra`)-[]-(:`orchestra.performance`) RETURN orchestra.Orchestra",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (orchestra:`orchestra.orchestra`) WHERE NOT (orchestra:`orchestra.orchestra`)-[]-(:`orchestra.performance`) RETURN orchestra.Orchestra",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWHERE NOT (orchestra:`orchestra.orchestra`)-[]-(:`orchestra.performance`)\nRETURN orchestra.Orchestra",
        "question": "What are the orchestras that do not have any performances?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "What are the orchestras that do not have any performances?",
        "seq_out": "MATCH (orchestra:`orchestra.orchestra`) WHERE NOT (orchestra:`orchestra.orchestra`)-[]-(:`orchestra.performance`) RETURN orchestra.Orchestra",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (orchestra:`orchestra.orchestra`) WHEREorchestra.Major_Record_Format = 'CD' ORorchestra.Major_Record_Format = 'DVD' RETURN count(*)",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWHERE orchestra.Major_Record_Format = 'CD' OR orchestra.Major_Record_Format = 'DVD'\nRETURN count(*)",
        "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format ( DVD , CD ) , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format ( DVD , CD ) , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "seq_out": "MATCH (orchestra:`orchestra.orchestra`) WHERE orchestra.Major_Record_Format = 'CD' OR orchestra.Major_Record_Format = 'DVD' RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (orchestra:`orchestra.orchestra`) WHEREorchestra.Major_Record_Format = 'CD' ORorchestra.Major_Record_Format = 'DVD' RETURN count(*)",
        "query": "MATCH (orchestra:`orchestra.orchestra`)\nWHERE orchestra.Major_Record_Format = 'CD' OR orchestra.Major_Record_Format = 'DVD'\nRETURN count(*)",
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "orchestra",
        "db_tag_names": [
            ":`orchestra.conductor`",
            ":`orchestra.orchestra`",
            ":`orchestra.performance`",
            ":`orchestra.show`",
            ":`orchestra.conductor_HAS_orchestra.orchestra`",
            ":`orchestra.orchestra_HAS_orchestra.performance`",
            ":`orchestra.performance_HAS_orchestra.show`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "property_name": [
                "*",
                "Age",
                "Name",
                "Year_of_Work",
                "Conductor_ID",
                "Nationality",
                "Orchestra_ID",
                "Conductor_ID",
                "Orchestra",
                "Major_Record_Format",
                "Year_of_Founded",
                "Record_Company",
                "Type",
                "Date",
                "Orchestra_ID",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Performance_ID",
                "Share",
                "If_first_show",
                "Performance_ID",
                "Show_ID",
                "Result",
                "Attendance"
            ]
        },
        "db_property_types": [
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "Long",
            "Long",
            "String",
            "String",
            "Double",
            "String",
            "String",
            "String",
            "Long",
            "Double",
            "String",
            "Long",
            "String",
            "String",
            "Long",
            "Long",
            "String",
            "Double"
        ],
        "serialized_schema": " | orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format ( DVD , CD ) , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` : ",
        "struct_in": "| orchestra | :`orchestra.conductor` : Age , Name , Year_of_Work , Conductor_ID , Nationality | :`orchestra.orchestra` : Orchestra_ID , Conductor_ID , Orchestra , Major_Record_Format ( DVD , CD ) , Year_of_Founded , Record_Company | :`orchestra.performance` : Type , Date , Orchestra_ID , Official_ratings_(millions) , Weekly_rank , Performance_ID , Share | :`orchestra.show` : If_first_show , Performance_ID , Show_ID , Result , Attendance | :`orchestra.conductor_HAS_orchestra.orchestra` :  | :`orchestra.orchestra_HAS_orchestra.performance` :  | :`orchestra.performance_HAS_orchestra.show` :",
        "text_in": "Count the number of orchestras that have CD or DVD as their record format.",
        "seq_out": "MATCH (orchestra:`orchestra.orchestra`) WHERE orchestra.Major_Record_Format = 'CD' OR orchestra.Major_Record_Format = 'DVD' RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (highschooler:`network_1.Highschooler`) RETURN count(*)",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN count(*)",
        "question": "How many high schoolers are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "text_in": "How many high schoolers are there?",
        "seq_out": "MATCH (highschooler:`network_1.Highschooler`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (highschooler:`network_1.Highschooler`) RETURN count(*)",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN count(*)",
        "question": "Count the number of high schoolers.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "text_in": "Count the number of high schoolers.",
        "seq_out": "MATCH (highschooler:`network_1.Highschooler`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (highschooler:`network_1.Highschooler`) RETURN highschooler.name,highschooler.grade",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN highschooler.name,highschooler.grade",
        "question": "Show the names and grades of each high schooler.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "text_in": "Show the names and grades of each high schooler.",
        "seq_out": "MATCH (highschooler:`network_1.Highschooler`) RETURN highschooler.name,highschooler.grade",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (highschooler:`network_1.Highschooler`) RETURN highschooler.name,highschooler.grade",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN highschooler.name,highschooler.grade",
        "question": "What are the names and grades for each high schooler?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "text_in": "What are the names and grades for each high schooler?",
        "seq_out": "MATCH (highschooler:`network_1.Highschooler`) RETURN highschooler.name,highschooler.grade",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (highschooler:`network_1.Highschooler`) RETURN DISTINCT highschooler.grade",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN highschooler.grade",
        "question": "Show all the grades of the high schoolers.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "text_in": "Show all the grades of the high schoolers.",
        "seq_out": "MATCH (highschooler:`network_1.Highschooler`) RETURN highschooler.grade",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (highschooler:`network_1.Highschooler`) RETURN highschooler.grade",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nRETURN highschooler.grade",
        "question": "What is the grade of each high schooler?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "text_in": "What is the grade of each high schooler?",
        "seq_out": "MATCH (highschooler:`network_1.Highschooler`) RETURN highschooler.grade",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (highschooler:`network_1.Highschooler`) WHERE highschooler.name = 'Kyle' RETURN highschooler.grade",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.name = 'Kyle'\nRETURN highschooler.grade",
        "question": "What grade is Kyle in?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.Highschooler` : name ( Kyle ) , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.Highschooler` : name ( Kyle ) , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "text_in": "What grade is Kyle in?",
        "seq_out": "MATCH (highschooler:`network_1.Highschooler`) WHERE highschooler.name = 'Kyle' RETURN highschooler.grade",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (highschooler:`network_1.Highschooler`) WHERE highschooler.name = 'Kyle' RETURN highschooler.grade",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.name = 'Kyle'\nRETURN highschooler.grade",
        "question": "Return the grade for the high schooler named Kyle.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.Highschooler` : name ( Kyle ) , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.Highschooler` : name ( Kyle ) , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "text_in": "Return the grade for the high schooler named Kyle.",
        "seq_out": "MATCH (highschooler:`network_1.Highschooler`) WHERE highschooler.name = 'Kyle' RETURN highschooler.grade",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (highschooler:`network_1.Highschooler`) WHERE highschooler.grade = 10 RETURN highschooler.name",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.grade = 10\nRETURN highschooler.name",
        "question": "Show the names of all high schoolers in grade 10.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "text_in": "Show the names of all high schoolers in grade 10.",
        "seq_out": "MATCH (highschooler:`network_1.Highschooler`) WHERE highschooler.grade = 10 RETURN highschooler.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (highschooler:`network_1.Highschooler`) WHERE highschooler.grade = 10 RETURN highschooler.name",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.grade = 10\nRETURN highschooler.name",
        "question": "What are the names of all high schoolers in grade 10?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "text_in": "What are the names of all high schoolers in grade 10?",
        "seq_out": "MATCH (highschooler:`network_1.Highschooler`) WHERE highschooler.grade = 10 RETURN highschooler.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (highschooler:`network_1.Highschooler`) WHERE highschooler.name = 'Kyle' RETURN highschooler.ID",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.name = 'Kyle'\nRETURN highschooler.ID",
        "question": "Show the ID of the high schooler named Kyle.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.Highschooler` : name ( Kyle ) , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.Highschooler` : name ( Kyle ) , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "text_in": "Show the ID of the high schooler named Kyle.",
        "seq_out": "MATCH (highschooler:`network_1.Highschooler`) WHERE highschooler.name = 'Kyle' RETURN highschooler.ID",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (highschooler:`network_1.Highschooler`) WHERE highschooler.name = 'Kyle' RETURN highschooler.ID",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.name = 'Kyle'\nRETURN highschooler.ID",
        "question": "What is Kyle's id?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.Highschooler` : name ( Kyle ) , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.Highschooler` : name ( Kyle ) , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "text_in": "What is Kyle's id?",
        "seq_out": "MATCH (highschooler:`network_1.Highschooler`) WHERE highschooler.name = 'Kyle' RETURN highschooler.ID",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (highschooler:`network_1.Highschooler`) WHERE highschooler.grade = 9 OR highschooler.grade = 10 RETURN count(*)",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.grade = 9 OR highschooler.grade = 10\nRETURN count(*)",
        "question": "How many high schoolers are there in grade 9 or 10?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "text_in": "How many high schoolers are there in grade 9 or 10?",
        "seq_out": "MATCH (highschooler:`network_1.Highschooler`) WHERE highschooler.grade = 9 OR highschooler.grade = 10 RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (highschooler:`network_1.Highschooler`) WHERE highschooler.grade = 9 OR highschooler.grade = 10 RETURN count(*)",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWHERE highschooler.grade = 9 OR highschooler.grade = 10\nRETURN count(*)",
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "text_in": "Count the number of high schoolers in grades 9 or 10.",
        "seq_out": "MATCH (highschooler:`network_1.Highschooler`) WHERE highschooler.grade = 9 OR highschooler.grade = 10 RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (highschooler:`network_1.Highschooler`) WITH count(highschooler.grade) AS count, highschooler.grade AS grade RETURN grade,count",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWITH highschooler.grade AS grade, count(highschooler.grade) AS count\nRETURN grade,count",
        "question": "Show the number of high schoolers for each grade.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "text_in": "Show the number of high schoolers for each grade.",
        "seq_out": "MATCH (highschooler:`network_1.Highschooler`) WITH highschooler.grade AS grade, count(highschooler.grade) AS count RETURN grade,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (highschooler:`network_1.Highschooler`) WITH count(highschooler.grade) AS count, highschooler.grade AS grade RETURN grade,count",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWITH highschooler.grade AS grade, count(highschooler.grade) AS count\nRETURN grade,count",
        "question": "How many high schoolers are in each grade?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "text_in": "How many high schoolers are in each grade?",
        "seq_out": "MATCH (highschooler:`network_1.Highschooler`) WITH highschooler.grade AS grade, count(highschooler.grade) AS count RETURN grade,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (highschooler:`network_1.Highschooler`) WITH count(*) AS count, highschooler.grade AS grade WHERE count >= 4 RETURN grade",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWITH highschooler.grade AS grade, count(*) AS count\nWHERE count  >= 4\nRETURN grade",
        "question": "Show me all grades that have at least 4 students.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "text_in": "Show me all grades that have at least 4 students.",
        "seq_out": "MATCH (highschooler:`network_1.Highschooler`) WITH highschooler.grade AS grade, count(*) AS count WHERE count >= 4 RETURN grade",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (highschooler:`network_1.Highschooler`) WITH count(*) AS count, highschooler.grade AS grade WHERE count >= 4 RETURN grade",
        "query": "MATCH (highschooler:`network_1.Highschooler`)\nWITH highschooler.grade AS grade, count(*) AS count\nWHERE count  >= 4\nRETURN grade",
        "question": "Which grades have 4 or more high schoolers?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "network_1",
        "db_tag_names": [
            ":`network_1.Highschooler`",
            ":`network_1.Friend`",
            ":`network_1.Likes`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "property_name": [
                "*",
                "name",
                "grade",
                "ID",
                "friend_id",
                "student_id",
                "liked_id",
                "student_id"
            ]
        },
        "db_property_types": [
            "String",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long",
            "Long"
        ],
        "serialized_schema": " | network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "struct_in": "| network_1 | :`network_1.Highschooler` : name , grade , ID | :`network_1.Friend` : friend_id , student_id | :`network_1.Likes` : liked_id , student_id",
        "text_in": "Which grades have 4 or more high schoolers?",
        "seq_out": "MATCH (highschooler:`network_1.Highschooler`) WITH highschooler.grade AS grade, count(*) AS count WHERE count >= 4 RETURN grade",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Owners`) WITH T2.first_name AS first_name, T2.last_name AS last_name, count(T1.owner_id) AS count, T1.owner_id AS owner_id RETURN owner_id,first_name,last_name ORDER BY count DESC LIMIT 1",
        "query": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Owners`)\nWITH T2.first_name AS first_name, T2.last_name AS last_name, count(T1.owner_id) AS count, T1.owner_id AS owner_id\nRETURN owner_id,first_name,last_name\nORDER BY count DESC\nLIMIT 1",
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "seq_out": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Owners`) WITH T2.first_name AS first_name, T2.last_name AS last_name, count(T1.owner_id) AS count, T1.owner_id AS owner_id RETURN owner_id,first_name,last_name ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Owners`) WITH T2.first_name AS first_name, T2.last_name AS last_name, count(T1.owner_id) AS count, T1.owner_id AS owner_id RETURN owner_id,first_name,last_name ORDER BY count DESC LIMIT 1",
        "query": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Owners`)\nWITH T2.first_name AS first_name, T2.last_name AS last_name, count(T1.owner_id) AS count, T1.owner_id AS owner_id\nRETURN owner_id,first_name,last_name\nORDER BY count DESC\nLIMIT 1",
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "seq_out": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Owners`) WITH T2.first_name AS first_name, T2.last_name AS last_name, count(T1.owner_id) AS count, T1.owner_id AS owner_id RETURN owner_id,first_name,last_name ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`) WITH count(*) AS count, T1.professional_id AS professional_id, T1.role_code AS role_code, T1.first_name AS first_name WHERE count >= 2 RETURN professional_id,role_code,first_name",
        "query": "MATCH (T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`)\nWITH count(*) AS count, T1.first_name AS first_name, T1.professional_id AS professional_id, T1.role_code AS role_code\nWHERE count  >= 2\nRETURN professional_id,role_code,first_name",
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "seq_out": "MATCH (T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`) WITH count(*) AS count, T1.first_name AS first_name, T1.professional_id AS professional_id, T1.role_code AS role_code WHERE count >= 2 RETURN professional_id,role_code,first_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`) WITH count(*) AS count, T1.professional_id AS professional_id WHERE count >= 2 RETURN professional_id,role_code,first_name",
        "query": "MATCH (T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`)\nWITH count(*) AS count, T1.first_name AS first_name, T1.professional_id AS professional_id, T1.role_code AS role_code\nWHERE count  >= 2\nRETURN professional_id,role_code,first_name",
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "seq_out": "MATCH (T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`) WITH count(*) AS count, T1.first_name AS first_name, T1.professional_id AS professional_id, T1.role_code AS role_code WHERE count >= 2 RETURN professional_id,role_code,first_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Breeds`)-[]-(T2:`dog_kennels.Dogs`) WITH T1.breed_name AS breed_name, count(T1.breed_code) AS count, T1.breed_code AS breed_code RETURN breed_code ORDER BY count DESC LIMIT 1",
        "query": "MATCH (T1:`dog_kennels.Breeds`)-[]-(T2:`dog_kennels.Dogs`)\nWITH T1.breed_name AS breed_name, count(T1.breed_name) AS count\nRETURN breed_name\nORDER BY count DESC\nLIMIT 1",
        "question": "What is the name of the breed with the most dogs?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "What is the name of the breed with the most dogs?",
        "seq_out": "MATCH (T1:`dog_kennels.Breeds`)-[]-(T2:`dog_kennels.Dogs`) WITH T1.breed_name AS breed_name, count(T1.breed_name) AS count RETURN breed_name ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Breeds`)-[]-(T2:`dog_kennels.Dogs`) WITH T1.breed_name AS breed_name, count(T1.breed_code) AS count RETURN breed_name ORDER BY count DESC LIMIT 1",
        "query": "MATCH (T1:`dog_kennels.Breeds`)-[]-(T2:`dog_kennels.Dogs`)\nWITH T1.breed_name AS breed_name, count(T1.breed_name) AS count\nRETURN breed_name\nORDER BY count DESC\nLIMIT 1",
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "Which breed do the most dogs have? Give me the breed name.",
        "seq_out": "MATCH (T1:`dog_kennels.Breeds`)-[]-(T2:`dog_kennels.Dogs`) WITH T1.breed_name AS breed_name, count(T1.breed_name) AS count RETURN breed_name ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`) WITH count(*) AS count, T1.professional_id AS professional_id WHERE count >= 2 RETURN professional_id,cell_number",
        "query": "MATCH (T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`)\nWITH count(*) AS count, T1.cell_number AS cell_number, T1.professional_id AS professional_id\nWHERE count  >= 2\nRETURN professional_id,cell_number",
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "seq_out": "MATCH (T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`) WITH count(*) AS count, T1.cell_number AS cell_number, T1.professional_id AS professional_id WHERE count >= 2 RETURN professional_id,cell_number",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`) WITH count(*) AS count, T1.professional_id AS professional_id, T1.cell_number AS cell_number WHERE count >= 2 RETURN professional_id,cell_number",
        "query": "MATCH (T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`)\nWITH count(*) AS count, T1.cell_number AS cell_number, T1.professional_id AS professional_id\nWHERE count  >= 2\nRETURN professional_id,cell_number",
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "seq_out": "MATCH (T1:`dog_kennels.Professionals`)-[]-(T2:`dog_kennels.Treatments`) WITH count(*) AS count, T1.cell_number AS cell_number, T1.professional_id AS professional_id WHERE count >= 2 RETURN professional_id,cell_number",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Treatments`)-[]-(T2:`dog_kennels.Professionals`) RETURN T2.date_of_treatment,T1.first_name",
        "query": "MATCH (T1:`dog_kennels.Treatments`)-[]-(T2:`dog_kennels.Professionals`)\nRETURN T1.date_of_treatment,T2.first_name",
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "List the date of each treatment, together with the first name of the professional who operated it.",
        "seq_out": "MATCH (T1:`dog_kennels.Treatments`)-[]-(T2:`dog_kennels.Professionals`) RETURN T1.date_of_treatment,T2.first_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Treatments`)-[]-(T2:`dog_kennels.Professionals`) RETURN T2.date_of_treatment,T1.last_name",
        "query": "MATCH (T1:`dog_kennels.Treatments`)-[]-(T2:`dog_kennels.Professionals`)\nRETURN T1.date_of_treatment,T2.first_name",
        "question": "What are the date and the operating professional's first name of each treatment?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "What are the date and the operating professional's first name of each treatment?",
        "seq_out": "MATCH (T1:`dog_kennels.Treatments`)-[]-(T2:`dog_kennels.Professionals`) RETURN T1.date_of_treatment,T2.first_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Treatments`)-[]-(T2:`dog_kennels.Treatment_Types`) RETURN T1.cost_of_treatment,T2.treatment_type_description",
        "query": "MATCH (T1:`dog_kennels.Treatments`)-[]-(T2:`dog_kennels.Treatment_Types`)\nRETURN T1.cost_of_treatment,T2.treatment_type_description",
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "List the cost of each treatment and the corresponding treatment type description.",
        "seq_out": "MATCH (T1:`dog_kennels.Treatments`)-[]-(T2:`dog_kennels.Treatment_Types`) RETURN T1.cost_of_treatment,T2.treatment_type_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Treatments`)-[]-(T2:`dog_kennels.Treatment_Types`) RETURN T1.cost_of_treatment,T2.treatment_type_description",
        "query": "MATCH (T1:`dog_kennels.Treatments`)-[]-(T2:`dog_kennels.Treatment_Types`)\nRETURN T1.cost_of_treatment,T2.treatment_type_description",
        "question": "What are the cost and treatment type description of each treatment?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "What are the cost and treatment type description of each treatment?",
        "seq_out": "MATCH (T1:`dog_kennels.Treatments`)-[]-(T2:`dog_kennels.Treatment_Types`) RETURN T1.cost_of_treatment,T2.treatment_type_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Owners`) RETURN T2.first_name,T2.last_name,T1.size_code",
        "query": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`)\nRETURN T1.first_name,T1.last_name,T2.size_code",
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "List each owner's first name, last name, and the size of his for her dog.",
        "seq_out": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`) RETURN T1.first_name,T1.last_name,T2.size_code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Owners`) RETURN T2.first_name,T2.last_name,T1.size_code",
        "query": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`)\nRETURN T1.first_name,T1.last_name,T2.size_code",
        "question": "What are each owner's first name, last name, and the size of their dog?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "What are each owner's first name, last name, and the size of their dog?",
        "seq_out": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`) RETURN T1.first_name,T1.last_name,T2.size_code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Owners`) RETURN T2.first_name,T2.last_name",
        "query": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`)\nRETURN T1.first_name,T2.name",
        "question": "List pairs of the owner's first name and the dogs's name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "List pairs of the owner's first name and the dogs's name.",
        "seq_out": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`) RETURN T1.first_name,T2.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Owners`) RETURN T2.first_name,T1.last_name",
        "query": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`)\nRETURN T1.first_name,T2.name",
        "question": "What are each owner's first name and their dogs's name?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "What are each owner's first name and their dogs's name?",
        "seq_out": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`) RETURN T1.first_name,T2.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Owners`) WHERE T2.state = 'Virginia' RETURN T1.first_name,T1.last_name",
        "query": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`)\nWHERE T1.state = 'Virginia'\nRETURN T1.first_name,T2.name",
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state ( Virginia ) , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state ( Virginia ) , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "seq_out": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`) WHERE T1.state = 'Virginia' RETURN T1.first_name,T2.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Owners`) WHERE T2.state = 'Virginia' RETURN T1.first_name,T1.last_name",
        "query": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`)\nWHERE T1.state = 'Virginia'\nRETURN T1.first_name,T2.name",
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state ( Virginia ) , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state ( Virginia ) , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "seq_out": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.Dogs`) WHERE T1.state = 'Virginia' RETURN T1.first_name,T2.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Treatments`) RETURN T2.date_arrived,T2.date_departed",
        "query": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Treatments`)\nRETURN DISTINCT T1.date_arrived,T1.date_departed",
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "seq_out": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Treatments`) RETURN DISTINCT T1.date_arrived,T1.date_departed",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Treatments`) RETURN T2.date_arrived,T2.date_departed",
        "query": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Treatments`)\nRETURN DISTINCT T1.date_arrived,T1.date_departed",
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "seq_out": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Treatments`) RETURN DISTINCT T1.date_arrived,T1.date_departed",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (professionals:`dog_kennels.Professionals`) WHERE professionals.state = 'Hawaii' OR professionals.state = 'Wisconsin' RETURN professionals.email_address",
        "query": "MATCH (professionals:`dog_kennels.Professionals`)\nWHERE professionals.state = 'Hawaii' OR professionals.state = 'Wisconsin'\nRETURN professionals.email_address",
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state ( Wisconsin ) , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state ( Wisconsin , Hawaii ) , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state ( Wisconsin ) , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state ( Wisconsin , Hawaii ) , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "seq_out": "MATCH (professionals:`dog_kennels.Professionals`) WHERE professionals.state = 'Hawaii' OR professionals.state = 'Wisconsin' RETURN professionals.email_address",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (professionals:`dog_kennels.Professionals`) WHERE professionals.state = 'Hawaii' OR professionals.state = 'Wisconsin' RETURN professionals.email_address",
        "query": "MATCH (professionals:`dog_kennels.Professionals`)\nWHERE professionals.state = 'Hawaii' OR professionals.state = 'Wisconsin'\nRETURN professionals.email_address",
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state ( Wisconsin ) , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state ( Wisconsin , Hawaii ) , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state ( Wisconsin ) , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state ( Wisconsin , Hawaii ) , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "seq_out": "MATCH (professionals:`dog_kennels.Professionals`) WHERE professionals.state = 'Hawaii' OR professionals.state = 'Wisconsin' RETURN professionals.email_address",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (dogs:`dog_kennels.Dogs`) RETURN dogs.date_arrived,dogs.date_departed",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN dogs.date_arrived,dogs.date_departed",
        "question": "What are the arriving date and the departing date of all the dogs?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "What are the arriving date and the departing date of all the dogs?",
        "seq_out": "MATCH (dogs:`dog_kennels.Dogs`) RETURN dogs.date_arrived,dogs.date_departed",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (dogs:`dog_kennels.Dogs`) RETURN dogs.date_arrived,dogs.date_departed",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN dogs.date_arrived,dogs.date_departed",
        "question": "List the arrival date and the departure date for all the dogs.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "List the arrival date and the departure date for all the dogs.",
        "seq_out": "MATCH (dogs:`dog_kennels.Dogs`) RETURN dogs.date_arrived,dogs.date_departed",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Treatments`) RETURN count(*)",
        "query": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN count(DISTINCT treatments.dog_id)",
        "question": "How many dogs went through any treatments?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "How many dogs went through any treatments?",
        "seq_out": "MATCH (treatments:`dog_kennels.Treatments`) RETURN count(DISTINCT treatments.dog_id)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Treatments`) RETURN count(*)",
        "query": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN count(DISTINCT treatments.dog_id)",
        "question": "Count the number of dogs that went through a treatment.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "Count the number of dogs that went through a treatment.",
        "seq_out": "MATCH (treatments:`dog_kennels.Treatments`) RETURN count(DISTINCT treatments.dog_id)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Professionals`) RETURN count(*)",
        "query": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN count(DISTINCT treatments.professional_id)",
        "question": "How many professionals have performed any treatment to dogs?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "How many professionals have performed any treatment to dogs?",
        "seq_out": "MATCH (treatments:`dog_kennels.Treatments`) RETURN count(DISTINCT treatments.professional_id)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Dogs`)-[]-(T2:`dog_kennels.Professals`) RETURN count(DISTINCT T1.name)",
        "query": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN count(DISTINCT treatments.professional_id)",
        "question": "Find the number of professionals who have ever treated dogs.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "Find the number of professionals who have ever treated dogs.",
        "seq_out": "MATCH (treatments:`dog_kennels.Treatments`) RETURN count(DISTINCT treatments.professional_id)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (professionals:`dog_kennels.Professionals`) WHERE professionals.city =~'.*[W|w]est.*' RETURN professionals.role_code,professionals.street,professionals.city,professionals.state",
        "query": "MATCH (professionals:`dog_kennels.Professionals`)\nWHERE professionals.city =~'.*[W|w]est.*'\nRETURN professionals.role_code,professionals.street,professionals.city,professionals.state",
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "seq_out": "MATCH (professionals:`dog_kennels.Professionals`) WHERE professionals.city =~'.*[W|w]est.*' RETURN professionals.role_code,professionals.street,professionals.city,professionals.state",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (professionals:`dog_kennels.Professionals`) WHERE professionals.city =~'.*[W|w]est.*' RETURN professionals.role_code,professionals.street,professionals.city,professionals.state",
        "query": "MATCH (professionals:`dog_kennels.Professionals`)\nWHERE professionals.city =~'.*[W|w]est.*'\nRETURN professionals.role_code,professionals.street,professionals.city,professionals.state",
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "seq_out": "MATCH (professionals:`dog_kennels.Professionals`) WHERE professionals.city =~'.*[W|w]est.*' RETURN professionals.role_code,professionals.street,professionals.city,professionals.state",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (owners:`dog_kennels.Owners`) WHERE owners.first_name =~'.*[N|n]onor.*' RETURN owners.first_name,owners.last_name,owners.email_address",
        "query": "MATCH (owners:`dog_kennels.Owners`)\nWHERE owners.state =~'.*[N|n]orth.*'\nRETURN owners.first_name,owners.last_name,owners.email_address",
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "seq_out": "MATCH (owners:`dog_kennels.Owners`) WHERE owners.state =~'.*[N|n]orth.*' RETURN owners.first_name,owners.last_name,owners.email_address",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Owners`)-[]-(T2:`dog_kennels.state WHERE T2.state =~'.*[N|n]on.*' RETURN T1.first_name,T1.last_name,T1.email_address",
        "query": "MATCH (owners:`dog_kennels.Owners`)\nWHERE owners.state =~'.*[N|n]orth.*'\nRETURN owners.first_name,owners.last_name,owners.email_address",
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "seq_out": "MATCH (owners:`dog_kennels.Owners`) WHERE owners.state =~'.*[N|n]orth.*' RETURN owners.first_name,owners.last_name,owners.email_address",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (treatments:`dog_kennels.Treatments`) RETURN treatment.cost_of_treatment ORDER BY treatmentments.cost_of_treatment DESC LIMIT 1",
        "query": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN treatments.cost_of_treatment\nORDER BY treatments.date_of_treatment DESC\nLIMIT 1",
        "question": "How much does the most recent treatment cost?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "How much does the most recent treatment cost?",
        "seq_out": "MATCH (treatments:`dog_kennels.Treatments`) RETURN treatments.cost_of_treatment ORDER BY treatments.date_of_treatment DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Treatments`)-[]-(T2:`dog_kennels.Dogs`) RETURN T2.cost_of_treatment ORDER BY T1.date_of_treatment DESC LIMIT 1",
        "query": "MATCH (treatments:`dog_kennels.Treatments`)\nRETURN treatments.cost_of_treatment\nORDER BY treatments.date_of_treatment DESC\nLIMIT 1",
        "question": "Show me the cost of the most recently performed treatment.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "Show me the cost of the most recently performed treatment.",
        "seq_out": "MATCH (treatments:`dog_kennels.Treatments`) RETURN treatments.cost_of_treatment ORDER BY treatments.date_of_treatment DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (dogs:`dog_kennels.Dogs`) WHERE NOT (dogs:`dog_kennels.Dogs`)-[]-(:`dog_kennels.Treatments`) RETURN count(*)",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nWHERE NOT (dogs:`dog_kennels.Dogs`)-[]-(:`dog_kennels.Treatments`)\nRETURN count(*)",
        "question": "How many dogs have not gone through any treatment?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "How many dogs have not gone through any treatment?",
        "seq_out": "MATCH (dogs:`dog_kennels.Dogs`) WHERE NOT (dogs:`dog_kennels.Dogs`)-[]-(:`dog_kennels.Treatments`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (dogs:`dog_kennels.Dogs`) WHERE NOT (dogs:`dog_kennels.Dogs`)-[]-(:`dog_kennels.Treatments`) RETURN count(*)",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nWHERE NOT (dogs:`dog_kennels.Dogs`)-[]-(:`dog_kennels.Treatments`)\nRETURN count(*)",
        "question": "Tell me the number of dogs that have not received any treatment .",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "Tell me the number of dogs that have not received any treatment .",
        "seq_out": "MATCH (dogs:`dog_kennels.Dogs`) WHERE NOT (dogs:`dog_kennels.Dogs`)-[]-(:`dog_kennels.Treatments`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (owners:`dog_kennels.Owners`) WHERE NOT (owners:`dog_kennels.Owners`)-[]-(:`dog_kennels.Dogs`) RETURN count(*)",
        "query": "MATCH (owners:`dog_kennels.Owners`)\nWHERE NOT (owners:`dog_kennels.Owners`)-[]-(:`dog_kennels.Dogs`)\nRETURN count(*)",
        "question": "How many owners temporarily do not have any dogs?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "How many owners temporarily do not have any dogs?",
        "seq_out": "MATCH (owners:`dog_kennels.Owners`) WHERE NOT (owners:`dog_kennels.Owners`)-[]-(:`dog_kennels.Dogs`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (owners:`dog_kennels.Owners`) WHERE NOT (owners:`dog_kennels.Owners`)-[]-(:`dog_kennels.Dogs`) RETURN count(*)",
        "query": "MATCH (owners:`dog_kennels.Owners`)\nWHERE NOT (owners:`dog_kennels.Owners`)-[]-(:`dog_kennels.Dogs`)\nRETURN count(*)",
        "question": "Find the number of owners who do not own any dogs at this moment.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "Find the number of owners who do not own any dogs at this moment.",
        "seq_out": "MATCH (owners:`dog_kennels.Owners`) WHERE NOT (owners:`dog_kennels.Owners`)-[]-(:`dog_kennels.Dogs`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (professionals:`dog_kennels.Professionals`) WHERE NOT (professionals:`dog_kennels.Professionals`)-[]-(:`dog_kennels.Dogs`) RETURN count(*)",
        "query": "MATCH (professionals:`dog_kennels.Professionals`)\nWHERE NOT (professionals:`dog_kennels.Professionals`)-[]-(:`dog_kennels.Treatments`)\nRETURN count(*)",
        "question": "How many professionals did not operate any treatment on dogs?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "How many professionals did not operate any treatment on dogs?",
        "seq_out": "MATCH (professionals:`dog_kennels.Professionals`) WHERE NOT (professionals:`dog_kennels.Professionals`)-[]-(:`dog_kennels.Treatments`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (professionals:`dog_kennels.Professionals`) WHERE NOT (professionals:`dog_kennels.Professionals`)-[]-(:`dog_kennels.Dogs`) RETURN count(*)",
        "query": "MATCH (professionals:`dog_kennels.Professionals`)\nWHERE NOT (professionals:`dog_kennels.Professionals`)-[]-(:`dog_kennels.Treatments`)\nRETURN count(*)",
        "question": "Find the number of professionals who have not treated any dogs.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "Find the number of professionals who have not treated any dogs.",
        "seq_out": "MATCH (professionals:`dog_kennels.Professionals`) WHERE NOT (professionals:`dog_kennels.Professionals`)-[]-(:`dog_kennels.Treatments`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (dogs:`dog_kennels.Dogs`) RETURN dog.age ORDER BY dog.age DESC LIMIT 1",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN max(dogs.age)",
        "question": "What is the age of the oldest dog?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "What is the age of the oldest dog?",
        "seq_out": "MATCH (dogs:`dog_kennels.Dogs`) RETURN max(dogs.age)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (dogs:`dog_kennels.Dogs`) RETURN dog.age ORDER BY dog.age DESC LIMIT 1",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN max(dogs.age)",
        "question": "Tell me the age of the oldest dog.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "Tell me the age of the oldest dog.",
        "seq_out": "MATCH (dogs:`dog_kennels.Dogs`) RETURN max(dogs.age)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (charges:`dog_kennels.Charges`) WITH count(charges.charge_type) AS count, charges.charge_type AS charge_type RETURN charge_type,charge_amount",
        "query": "MATCH (charges:`dog_kennels.Charges`)\nRETURN charges.charge_type,charges.charge_amount",
        "question": "How much does each charge type costs? List both charge type and amount.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "How much does each charge type costs? List both charge type and amount.",
        "seq_out": "MATCH (charges:`dog_kennels.Charges`) RETURN charges.charge_type,charges.charge_amount",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (charges:`dog_kennels.Charges`) RETURN DISTINCT charges.charge_type,charges.charge_amount",
        "query": "MATCH (charges:`dog_kennels.Charges`)\nRETURN charges.charge_type,charges.charge_amount",
        "question": "List each charge type and its amount.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "List each charge type and its amount.",
        "seq_out": "MATCH (charges:`dog_kennels.Charges`) RETURN charges.charge_type,charges.charge_amount",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (charges:`dog_kennels.Charges`) RETURN charge_amount ORDER BY charge_amount DESC LIMIT 1",
        "query": "MATCH (charges:`dog_kennels.Charges`)\nRETURN max(charges.charge_amount)",
        "question": "How much does the most expensive charge type costs?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "How much does the most expensive charge type costs?",
        "seq_out": "MATCH (charges:`dog_kennels.Charges`) RETURN max(charges.charge_amount)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (charges:`dog_kennels.Charges`) RETURN charges.charge_amount ORDER BY charges.charge_amount DESC LIMIT 1",
        "query": "MATCH (charges:`dog_kennels.Charges`)\nRETURN max(charges.charge_amount)",
        "question": "What is the charge amount of the most expensive charge type?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "What is the charge amount of the most expensive charge type?",
        "seq_out": "MATCH (charges:`dog_kennels.Charges`) RETURN max(charges.charge_amount)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (professionals:`dog_kennels.Professionals`) RETURN professionals.email_address,professionals.cell_number,professionals.home_phone",
        "query": "MATCH (professionals:`dog_kennels.Professionals`)\nRETURN professionals.email_address,professionals.cell_number,professionals.home_phone",
        "question": "List the email, cell phone and home phone of all the professionals.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "List the email, cell phone and home phone of all the professionals.",
        "seq_out": "MATCH (professionals:`dog_kennels.Professionals`) RETURN professionals.email_address,professionals.cell_number,professionals.home_phone",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (professionals:`dog_kennels.Professionals`) RETURN professionals.email_address,professionals.cell_number,professionals.home_phone",
        "query": "MATCH (professionals:`dog_kennels.Professionals`)\nRETURN professionals.email_address,professionals.cell_number,professionals.home_phone",
        "question": "What are the email, cell phone and home phone of each professional?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "What are the email, cell phone and home phone of each professional?",
        "seq_out": "MATCH (professionals:`dog_kennels.Professionals`) RETURN professionals.email_address,professionals.cell_number,professionals.home_phone",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`dog_kennels.Breeds`)-[]-(T2:`dog_kennels.Sizes`) RETURN DISTINCT T1.breed_code,T2.size_code",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN DISTINCT dogs.breed_code,dogs.size_code",
        "question": "What are all the possible breed type and size type combinations?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "What are all the possible breed type and size type combinations?",
        "seq_out": "MATCH (dogs:`dog_kennels.Dogs`) RETURN DISTINCT dogs.breed_code,dogs.size_code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (dogs:`dog_kennels.Dogs`) RETURN DISTINCT dogs.breed_code,dogs.size_code",
        "query": "MATCH (dogs:`dog_kennels.Dogs`)\nRETURN DISTINCT dogs.breed_code,dogs.size_code",
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "dog_kennels",
        "db_tag_names": [
            ":`dog_kennels.Breeds`",
            ":`dog_kennels.Charges`",
            ":`dog_kennels.Sizes`",
            ":`dog_kennels.Treatment_Types`",
            ":`dog_kennels.Owners`",
            ":`dog_kennels.Dogs`",
            ":`dog_kennels.Professionals`",
            ":`dog_kennels.Treatments`",
            ":`dog_kennels.Owners_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Sizes_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Breeds_HAS_dog_kennels.Dogs`",
            ":`dog_kennels.Dogs_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Professionals_HAS_dog_kennels.Treatments`",
            ":`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "property_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_description",
                "treatment_type_code",
                "owner_id",
                "first_name",
                "cell_number",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "last_name",
                "city",
                "street",
                "name",
                "owner_id",
                "age",
                "date_departed",
                "date_adopted",
                "size_code",
                "date_arrived",
                "breed_code",
                "gender",
                "dog_id",
                "date_of_birth",
                "abandoned_yn",
                "weight",
                "first_name",
                "cell_number",
                "role_code",
                "email_address",
                "state",
                "zip_code",
                "home_phone",
                "professional_id",
                "last_name",
                "city",
                "street",
                "date_of_treatment",
                "cost_of_treatment",
                "treatment_id",
                "dog_id",
                "treatment_type_code",
                "professional_id"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "String",
            "Long",
            "Long",
            "Long",
            "String",
            "Long"
        ],
        "serialized_schema": " | dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` : ",
        "struct_in": "| dog_kennels | :`dog_kennels.Breeds` : breed_code , breed_name | :`dog_kennels.Charges` : charge_id , charge_type , charge_amount | :`dog_kennels.Sizes` : size_code , size_description | :`dog_kennels.Treatment_Types` : treatment_type_description , treatment_type_code | :`dog_kennels.Owners` : owner_id , first_name , cell_number , email_address , state , zip_code , home_phone , last_name , city , street | :`dog_kennels.Dogs` : name , owner_id , age , date_departed , date_adopted , size_code , date_arrived , breed_code , gender , dog_id , date_of_birth , abandoned_yn , weight | :`dog_kennels.Professionals` : first_name , cell_number , role_code , email_address , state , zip_code , home_phone , professional_id , last_name , city , street | :`dog_kennels.Treatments` : date_of_treatment , cost_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id | :`dog_kennels.Owners_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Sizes_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Breeds_HAS_dog_kennels.Dogs` :  | :`dog_kennels.Dogs_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Professionals_HAS_dog_kennels.Treatments` :  | :`dog_kennels.Treatment_Types_HAS_dog_kennels.Treatments` :",
        "text_in": "Find the distinct breed type and size type combinations for dogs.",
        "seq_out": "MATCH (dogs:`dog_kennels.Dogs`) RETURN DISTINCT dogs.breed_code,dogs.size_code",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`singer.singer`) RETURN count(*)",
        "query": "MATCH (singer:`singer.singer`)\nRETURN count(*)",
        "question": "How many singers are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` :",
        "text_in": "How many singers are there?",
        "seq_out": "MATCH (singer:`singer.singer`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`singer.singer`) RETURN count(*)",
        "query": "MATCH (singer:`singer.singer`)\nRETURN count(*)",
        "question": "What is the count of singers?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` :",
        "text_in": "What is the count of singers?",
        "seq_out": "MATCH (singer:`singer.singer`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`singer.singer`) RETURN singer.Name ORDER BY singer.Net_Worth_Millions ASC",
        "query": "MATCH (singer:`singer.singer`)\nRETURN singer.Name\nORDER BY singer.Net_Worth_Millions ASC",
        "question": "List the name of singers in ascending order of net worth.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` :",
        "text_in": "List the name of singers in ascending order of net worth.",
        "seq_out": "MATCH (singer:`singer.singer`) RETURN singer.Name ORDER BY singer.Net_Worth_Millions ASC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`singer.singer`) RETURN singer.Name ORDER BY singer.Net_Worth_Millions ASC",
        "query": "MATCH (singer:`singer.singer`)\nRETURN singer.Name\nORDER BY singer.Net_Worth_Millions ASC",
        "question": "What are the names of singers ordered by ascending net worth?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` :",
        "text_in": "What are the names of singers ordered by ascending net worth?",
        "seq_out": "MATCH (singer:`singer.singer`) RETURN singer.Name ORDER BY singer.Net_Worth_Millions ASC",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`singer.singer`) RETURN singer.Birth_Year,singer.Citizenship",
        "query": "MATCH (singer:`singer.singer`)\nRETURN singer.Birth_Year,singer.Citizenship",
        "question": "What are the birth year and citizenship of singers?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` :",
        "text_in": "What are the birth year and citizenship of singers?",
        "seq_out": "MATCH (singer:`singer.singer`) RETURN singer.Birth_Year,singer.Citizenship",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`singer.singer`) RETURN singer.Birth_Year,singer.Citizenship",
        "query": "MATCH (singer:`singer.singer`)\nRETURN singer.Birth_Year,singer.Citizenship",
        "question": "What are the birth years and citizenships of the singers?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` :",
        "text_in": "What are the birth years and citizenships of the singers?",
        "seq_out": "MATCH (singer:`singer.singer`) RETURN singer.Birth_Year,singer.Citizenship",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`singer.singer`) WHERE singer.Citizenship  < > 'France' RETURN singer.Name",
        "query": "MATCH (singer:`singer.singer`)\nWHERE singer.Citizenship <> 'France'\nRETURN singer.Name",
        "question": "List the name of singers whose citizenship is not \"France\".",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship ( France ) , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship ( France ) , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` :",
        "text_in": "List the name of singers whose citizenship is not \"France\".",
        "seq_out": "MATCH (singer:`singer.singer`) WHERE singer.Citizenship <> 'France' RETURN singer.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`singer.singer`) WHERE singer.Citizenship  < > 'French' RETURN singer.Name",
        "query": "MATCH (singer:`singer.singer`)\nWHERE singer.Citizenship <> 'France'\nRETURN singer.Name",
        "question": "What are the names of the singers who are not French citizens?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` :",
        "text_in": "What are the names of the singers who are not French citizens?",
        "seq_out": "MATCH (singer:`singer.singer`) WHERE singer.Citizenship <> 'France' RETURN singer.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`singer.singer`) WHERE singer.Birth_Year = 1948 OR singer.Birth_Year = 1949 RETURN singer.Name",
        "query": "MATCH (singer:`singer.singer`)\nWHERE singer.Birth_Year = 1948 OR singer.Birth_Year = 1949\nRETURN singer.Name",
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` :",
        "text_in": "Show the name of singers whose birth year is either 1948 or 1949?",
        "seq_out": "MATCH (singer:`singer.singer`) WHERE singer.Birth_Year = 1948 OR singer.Birth_Year = 1949 RETURN singer.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`singer.singer`) WHERE singer.Birth_Year = 1948 OR singer.Birth_Year = 1949 RETURN singer.Name",
        "query": "MATCH (singer:`singer.singer`)\nWHERE singer.Birth_Year = 1948 OR singer.Birth_Year = 1949\nRETURN singer.Name",
        "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` :",
        "text_in": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "seq_out": "MATCH (singer:`singer.singer`) WHERE singer.Birth_Year = 1948 OR singer.Birth_Year = 1949 RETURN singer.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`singer.singer`) RETURN singer.Name ORDER BY singer.Net_Worth_Millions DESC LIMIT 1",
        "query": "MATCH (singer:`singer.singer`)\nRETURN singer.Name\nORDER BY singer.Net_Worth_Millions DESC\nLIMIT 1",
        "question": "What is the name of the singer with the largest net worth?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` :",
        "text_in": "What is the name of the singer with the largest net worth?",
        "seq_out": "MATCH (singer:`singer.singer`) RETURN singer.Name ORDER BY singer.Net_Worth_Millions DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`singer.singer`) WITH singer.Name AS Name, count(singer.Name) AS count RETURN Name ORDER BY count DESC LIMIT 1",
        "query": "MATCH (singer:`singer.singer`)\nRETURN singer.Name\nORDER BY singer.Net_Worth_Millions DESC\nLIMIT 1",
        "question": "What is the name of the singer who is worth the most?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` :",
        "text_in": "What is the name of the singer who is worth the most?",
        "seq_out": "MATCH (singer:`singer.singer`) RETURN singer.Name ORDER BY singer.Net_Worth_Millions DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`singer.singer`) WITH count(singer.Citizenship) AS count, singer.Citizenship AS Citizenship RETURN Citizenship,count",
        "query": "MATCH (singer:`singer.singer`)\nWITH singer.Citizenship AS Citizenship, count(singer.Citizenship) AS count\nRETURN Citizenship,count",
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` :",
        "text_in": "Show different citizenship of singers and the number of singers of each citizenship.",
        "seq_out": "MATCH (singer:`singer.singer`) WITH singer.Citizenship AS Citizenship, count(singer.Citizenship) AS count RETURN Citizenship,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`singer.singer`) WITH singer.Citizenship AS Citizenship, count(singer.Citizenship) AS count RETURN Citizenship,count",
        "query": "MATCH (singer:`singer.singer`)\nWITH singer.Citizenship AS Citizenship, count(singer.Citizenship) AS count\nRETURN Citizenship,count",
        "question": "For each citizenship, how many singers are from that country?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` :",
        "text_in": "For each citizenship, how many singers are from that country?",
        "seq_out": "MATCH (singer:`singer.singer`) WITH singer.Citizenship AS Citizenship, count(singer.Citizenship) AS count RETURN Citizenship,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`singer.singer`) WITH count(singer.Citizenship) AS count, singer.Citizenship AS Citizenship RETURN Citizenship ORDER BY count DESC LIMIT 1",
        "query": "MATCH (singer:`singer.singer`)\nWITH singer.Citizenship AS Citizenship, count(singer.Citizenship) AS count\nRETURN Citizenship\nORDER BY count DESC\nLIMIT 1",
        "question": "Please show the most common citizenship of singers.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` :",
        "text_in": "Please show the most common citizenship of singers.",
        "seq_out": "MATCH (singer:`singer.singer`) WITH singer.Citizenship AS Citizenship, count(singer.Citizenship) AS count RETURN Citizenship ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`singer.singer`) WITH count(singer.Citizenship) AS count, singer.Citizenship AS Citizenship RETURN Citizenship ORDER BY count DESC LIMIT 1",
        "query": "MATCH (singer:`singer.singer`)\nWITH singer.Citizenship AS Citizenship, count(singer.Citizenship) AS count\nRETURN Citizenship\nORDER BY count DESC\nLIMIT 1",
        "question": "What is the most common singer citizenship ?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` :",
        "text_in": "What is the most common singer citizenship ?",
        "seq_out": "MATCH (singer:`singer.singer`) WITH singer.Citizenship AS Citizenship, count(singer.Citizenship) AS count RETURN Citizenship ORDER BY count DESC LIMIT 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`) RETURN T2.Title,T1.Name",
        "query": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`)\nRETURN T2.Title,T1.Name",
        "question": "Show titles of songs and names of singers.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` :",
        "text_in": "Show titles of songs and names of singers.",
        "seq_out": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`) RETURN T2.Title,T1.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`singer.song`)-[]-(T2:`singer.singer`) RETURN T1.Title,T2.Name",
        "query": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`)\nRETURN T2.Title,T1.Name",
        "question": "What are the song titles and singer names?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` :",
        "text_in": "What are the song titles and singer names?",
        "seq_out": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`) RETURN T2.Title,T1.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`) WHERE T2.Sales > 300000 RETURN DISTINCT T1.Name",
        "query": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`)\nWHERE T2.Sales > 300000\nRETURN DISTINCT T1.Name",
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` :",
        "text_in": "Show distinct names of singers that have songs with sales more than 300000.",
        "seq_out": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`) WHERE T2.Sales > 300000 RETURN DISTINCT T1.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`) WHERE T2.Sales > 300000 RETURN DISTINCT T1.Name",
        "query": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`)\nWHERE T2.Sales > 300000\nRETURN DISTINCT T1.Name",
        "question": "what are the different names of the singers that have sales more than 300000?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` :",
        "text_in": "what are the different names of the singers that have sales more than 300000?",
        "seq_out": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`) WHERE T2.Sales > 300000 RETURN DISTINCT T1.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`) WITH count(*) AS count, T1.Name AS Name WHERE count > 1 RETURN Name",
        "query": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`)\nWITH T1.Name AS Name, count(*) AS count\nWHERE count  > 1\nRETURN Name",
        "question": "Show the names of singers that have more than one song.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` :",
        "text_in": "Show the names of singers that have more than one song.",
        "seq_out": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`) WITH T1.Name AS Name, count(*) AS count WHERE count > 1 RETURN Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`) WITH count(*) AS count, T1.Name AS Name WHERE count > 1 RETURN Name",
        "query": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`)\nWITH T1.Name AS Name, count(*) AS count\nWHERE count  > 1\nRETURN Name",
        "question": "What are the names of the singers that have more than one songs?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` :",
        "text_in": "What are the names of the singers that have more than one songs?",
        "seq_out": "MATCH (T1:`singer.singer`)-[]-(T2:`singer.song`) WITH T1.Name AS Name, count(*) AS count WHERE count > 1 RETURN Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`singer.singer`) WHERE NOT (singer:`singer.singer`)-[]-(:`singer.song`) RETURN singer.Name",
        "query": "MATCH (singer:`singer.singer`)\nWHERE NOT (singer:`singer.singer`)-[]-(:`singer.song`)\nRETURN singer.Name",
        "question": "List the name of singers that do not have any song.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` :",
        "text_in": "List the name of singers that do not have any song.",
        "seq_out": "MATCH (singer:`singer.singer`) WHERE NOT (singer:`singer.singer`)-[]-(:`singer.song`) RETURN singer.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (singer:`singer.singer`) WHERE NOT (singer:`singer.singer`)-[]-(:`singer.song`) RETURN singer.Name",
        "query": "MATCH (singer:`singer.singer`)\nWHERE NOT (singer:`singer.singer`)-[]-(:`singer.song`)\nRETURN singer.Name",
        "question": "What is the sname of every sing that does not have any song?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "singer",
        "db_tag_names": [
            ":`singer.singer`",
            ":`singer.song`",
            ":`singer.singer_HAS_singer.song`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "property_name": [
                "*",
                "Name",
                "Net_Worth_Millions",
                "Birth_Year",
                "Citizenship",
                "Singer_ID",
                "Title",
                "Sales",
                "Song_ID",
                "Highest_Position",
                "Singer_ID"
            ]
        },
        "db_property_types": [
            "String",
            "Double",
            "Double",
            "String",
            "Long",
            "String",
            "Double",
            "Long",
            "Double",
            "Long"
        ],
        "serialized_schema": " | singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` : ",
        "struct_in": "| singer | :`singer.singer` : Name , Net_Worth_Millions , Birth_Year , Citizenship , Singer_ID | :`singer.song` : Title , Sales , Song_ID , Highest_Position , Singer_ID | :`singer.singer_HAS_singer.song` :",
        "text_in": "What is the sname of every sing that does not have any song?",
        "seq_out": "MATCH (singer:`singer.singer`) WHERE NOT (singer:`singer.singer`)-[]-(:`singer.song`) RETURN singer.Name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (other_available_features:`real_estate_properties.Other_Available_Features`) RETURN count(*)",
        "query": "MATCH (other_available_features:`real_estate_properties.Other_Available_Features`)\nRETURN count(*)",
        "question": "How many available features are there in total?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "real_estate_properties",
        "db_tag_names": [
            ":`real_estate_properties.Ref_Feature_Types`",
            ":`real_estate_properties.Ref_Property_Types`",
            ":`real_estate_properties.Other_Available_Features`",
            ":`real_estate_properties.Properties`",
            ":`real_estate_properties.Other_Property_Features`",
            ":`real_estate_properties.Ref_Feature_Types_HAS_real_estate_properties.Other_Available_Features`",
            ":`real_estate_properties.Ref_Property_Types_HAS_real_estate_properties.Properties`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4
            ],
            "property_name": [
                "*",
                "feature_type_code",
                "feature_type_name",
                "property_type_code",
                "property_type_description",
                "feature_id",
                "feature_description",
                "feature_type_code",
                "feature_name",
                "buyer_offered_price",
                "date_sold",
                "date_on_market",
                "property_id",
                "apt_feature_1",
                "property_name",
                "property_type_code",
                "vendor_requested_price",
                "property_address",
                "room_count",
                "apt_feature_2",
                "agreed_selling_price",
                "property_feature_description"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long_Double",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long_Double",
            "String",
            "Long",
            "String",
            "Long_Double",
            "String"
        ],
        "serialized_schema": " | real_estate_properties | :`real_estate_properties.Ref_Feature_Types` : feature_type_code , feature_type_name | :`real_estate_properties.Ref_Property_Types` : property_type_code , property_type_description | :`real_estate_properties.Other_Available_Features` : feature_id , feature_description , feature_type_code , feature_name | :`real_estate_properties.Properties` : buyer_offered_price , date_sold , date_on_market , property_id , apt_feature_1 , property_name , property_type_code , vendor_requested_price , property_address , room_count , apt_feature_2 , agreed_selling_price | :`real_estate_properties.Other_Property_Features` : property_feature_description | :`real_estate_properties.Ref_Feature_Types_HAS_real_estate_properties.Other_Available_Features` :  | :`real_estate_properties.Ref_Property_Types_HAS_real_estate_properties.Properties` : ",
        "struct_in": "| real_estate_properties | :`real_estate_properties.Ref_Feature_Types` : feature_type_code , feature_type_name | :`real_estate_properties.Ref_Property_Types` : property_type_code , property_type_description | :`real_estate_properties.Other_Available_Features` : feature_id , feature_description , feature_type_code , feature_name | :`real_estate_properties.Properties` : buyer_offered_price , date_sold , date_on_market , property_id , apt_feature_1 , property_name , property_type_code , vendor_requested_price , property_address , room_count , apt_feature_2 , agreed_selling_price | :`real_estate_properties.Other_Property_Features` : property_feature_description | :`real_estate_properties.Ref_Feature_Types_HAS_real_estate_properties.Other_Available_Features` :  | :`real_estate_properties.Ref_Property_Types_HAS_real_estate_properties.Properties` :",
        "text_in": "How many available features are there in total?",
        "seq_out": "MATCH (other_available_features:`real_estate_properties.Other_Available_Features`) RETURN count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (other_available_features:`real_estate_properties.Other_Available_Features`) WHERE other_available_features.feature_name = 'AirCon' RETURN other_available_features.feature_type_name",
        "query": "MATCH (T1:`real_estate_properties.Other_Available_Features`)-[]-(T2:`real_estate_properties.Ref_Feature_Types`)\nWHERE T1.feature_name = 'AirCon'\nRETURN T2.feature_type_name",
        "question": "What is the feature type name of feature AirCon?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "real_estate_properties",
        "db_tag_names": [
            ":`real_estate_properties.Ref_Feature_Types`",
            ":`real_estate_properties.Ref_Property_Types`",
            ":`real_estate_properties.Other_Available_Features`",
            ":`real_estate_properties.Properties`",
            ":`real_estate_properties.Other_Property_Features`",
            ":`real_estate_properties.Ref_Feature_Types_HAS_real_estate_properties.Other_Available_Features`",
            ":`real_estate_properties.Ref_Property_Types_HAS_real_estate_properties.Properties`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4
            ],
            "property_name": [
                "*",
                "feature_type_code",
                "feature_type_name",
                "property_type_code",
                "property_type_description",
                "feature_id",
                "feature_description",
                "feature_type_code",
                "feature_name",
                "buyer_offered_price",
                "date_sold",
                "date_on_market",
                "property_id",
                "apt_feature_1",
                "property_name",
                "property_type_code",
                "vendor_requested_price",
                "property_address",
                "room_count",
                "apt_feature_2",
                "agreed_selling_price",
                "property_feature_description"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long_Double",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long_Double",
            "String",
            "Long",
            "String",
            "Long_Double",
            "String"
        ],
        "serialized_schema": " | real_estate_properties | :`real_estate_properties.Ref_Feature_Types` : feature_type_code , feature_type_name | :`real_estate_properties.Ref_Property_Types` : property_type_code , property_type_description | :`real_estate_properties.Other_Available_Features` : feature_id , feature_description , feature_type_code , feature_name ( AirCon ) | :`real_estate_properties.Properties` : buyer_offered_price , date_sold , date_on_market , property_id , apt_feature_1 , property_name , property_type_code , vendor_requested_price , property_address , room_count , apt_feature_2 , agreed_selling_price | :`real_estate_properties.Other_Property_Features` : property_feature_description | :`real_estate_properties.Ref_Feature_Types_HAS_real_estate_properties.Other_Available_Features` :  | :`real_estate_properties.Ref_Property_Types_HAS_real_estate_properties.Properties` : ",
        "struct_in": "| real_estate_properties | :`real_estate_properties.Ref_Feature_Types` : feature_type_code , feature_type_name | :`real_estate_properties.Ref_Property_Types` : property_type_code , property_type_description | :`real_estate_properties.Other_Available_Features` : feature_id , feature_description , feature_type_code , feature_name ( AirCon ) | :`real_estate_properties.Properties` : buyer_offered_price , date_sold , date_on_market , property_id , apt_feature_1 , property_name , property_type_code , vendor_requested_price , property_address , room_count , apt_feature_2 , agreed_selling_price | :`real_estate_properties.Other_Property_Features` : property_feature_description | :`real_estate_properties.Ref_Feature_Types_HAS_real_estate_properties.Other_Available_Features` :  | :`real_estate_properties.Ref_Property_Types_HAS_real_estate_properties.Properties` :",
        "text_in": "What is the feature type name of feature AirCon?",
        "seq_out": "MATCH (T1:`real_estate_properties.Other_Available_Features`)-[]-(T2:`real_estate_properties.Ref_Feature_Types`) WHERE T1.feature_name = 'AirCon' RETURN T2.feature_type_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (T1:`real_estate_properties.Properties`)-[]-(T2:`real_estate_properties.Ref_Property_Types`) RETURN T2.property_type_description",
        "query": "MATCH (T1:`real_estate_properties.Properties`)-[]-(T2:`real_estate_properties.Ref_Property_Types`)\nWITH count(T1.property_type_code) AS count, T2.property_type_description AS property_type_description\nRETURN property_type_description",
        "question": "Show the property type descriptions of properties belonging to that code.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "real_estate_properties",
        "db_tag_names": [
            ":`real_estate_properties.Ref_Feature_Types`",
            ":`real_estate_properties.Ref_Property_Types`",
            ":`real_estate_properties.Other_Available_Features`",
            ":`real_estate_properties.Properties`",
            ":`real_estate_properties.Other_Property_Features`",
            ":`real_estate_properties.Ref_Feature_Types_HAS_real_estate_properties.Other_Available_Features`",
            ":`real_estate_properties.Ref_Property_Types_HAS_real_estate_properties.Properties`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4
            ],
            "property_name": [
                "*",
                "feature_type_code",
                "feature_type_name",
                "property_type_code",
                "property_type_description",
                "feature_id",
                "feature_description",
                "feature_type_code",
                "feature_name",
                "buyer_offered_price",
                "date_sold",
                "date_on_market",
                "property_id",
                "apt_feature_1",
                "property_name",
                "property_type_code",
                "vendor_requested_price",
                "property_address",
                "room_count",
                "apt_feature_2",
                "agreed_selling_price",
                "property_feature_description"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long_Double",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long_Double",
            "String",
            "Long",
            "String",
            "Long_Double",
            "String"
        ],
        "serialized_schema": " | real_estate_properties | :`real_estate_properties.Ref_Feature_Types` : feature_type_code , feature_type_name | :`real_estate_properties.Ref_Property_Types` : property_type_code , property_type_description | :`real_estate_properties.Other_Available_Features` : feature_id , feature_description , feature_type_code , feature_name | :`real_estate_properties.Properties` : buyer_offered_price , date_sold , date_on_market , property_id , apt_feature_1 , property_name , property_type_code , vendor_requested_price , property_address , room_count , apt_feature_2 , agreed_selling_price | :`real_estate_properties.Other_Property_Features` : property_feature_description | :`real_estate_properties.Ref_Feature_Types_HAS_real_estate_properties.Other_Available_Features` :  | :`real_estate_properties.Ref_Property_Types_HAS_real_estate_properties.Properties` : ",
        "struct_in": "| real_estate_properties | :`real_estate_properties.Ref_Feature_Types` : feature_type_code , feature_type_name | :`real_estate_properties.Ref_Property_Types` : property_type_code , property_type_description | :`real_estate_properties.Other_Available_Features` : feature_id , feature_description , feature_type_code , feature_name | :`real_estate_properties.Properties` : buyer_offered_price , date_sold , date_on_market , property_id , apt_feature_1 , property_name , property_type_code , vendor_requested_price , property_address , room_count , apt_feature_2 , agreed_selling_price | :`real_estate_properties.Other_Property_Features` : property_feature_description | :`real_estate_properties.Ref_Feature_Types_HAS_real_estate_properties.Other_Available_Features` :  | :`real_estate_properties.Ref_Property_Types_HAS_real_estate_properties.Properties` :",
        "text_in": "Show the property type descriptions of properties belonging to that code.",
        "seq_out": "MATCH (T1:`real_estate_properties.Properties`)-[]-(T2:`real_estate_properties.Ref_Property_Types`) WITH count(T1.property_type_code) AS count, T2.property_type_description AS property_type_description RETURN property_type_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "MATCH (properties:`real_estate_properties.Properties`) WHERE properties.property_type_code = 'Hous' OR properties.property_type_code = 'Apartment' WITH count(*) AS count, properties.property_name AS property_name WHERE count > 1 RETURN property_name",
        "query": "MATCH (properties:`real_estate_properties.Properties`)\nWHERE properties.property_type_code = 'House'\nRETURN properties.property_name  AS property_name \nUNION\nMATCH (properties:`real_estate_properties.Properties`)\nWHERE properties.property_type_code = 'Apartment' AND properties.room_count > 1\nRETURN properties.property_name  AS property_name",
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "real_estate_properties",
        "db_tag_names": [
            ":`real_estate_properties.Ref_Feature_Types`",
            ":`real_estate_properties.Ref_Property_Types`",
            ":`real_estate_properties.Other_Available_Features`",
            ":`real_estate_properties.Properties`",
            ":`real_estate_properties.Other_Property_Features`",
            ":`real_estate_properties.Ref_Feature_Types_HAS_real_estate_properties.Other_Available_Features`",
            ":`real_estate_properties.Ref_Property_Types_HAS_real_estate_properties.Properties`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4
            ],
            "property_name": [
                "*",
                "feature_type_code",
                "feature_type_name",
                "property_type_code",
                "property_type_description",
                "feature_id",
                "feature_description",
                "feature_type_code",
                "feature_name",
                "buyer_offered_price",
                "date_sold",
                "date_on_market",
                "property_id",
                "apt_feature_1",
                "property_name",
                "property_type_code",
                "vendor_requested_price",
                "property_address",
                "room_count",
                "apt_feature_2",
                "agreed_selling_price",
                "property_feature_description"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long_Double",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long_Double",
            "String",
            "Long",
            "String",
            "Long_Double",
            "String"
        ],
        "serialized_schema": " | real_estate_properties | :`real_estate_properties.Ref_Feature_Types` : feature_type_code , feature_type_name | :`real_estate_properties.Ref_Property_Types` : property_type_code ( Apartment , House ) , property_type_description | :`real_estate_properties.Other_Available_Features` : feature_id , feature_description , feature_type_code , feature_name | :`real_estate_properties.Properties` : buyer_offered_price , date_sold , date_on_market , property_id , apt_feature_1 , property_name , property_type_code ( Apartment , House ) , vendor_requested_price , property_address , room_count , apt_feature_2 , agreed_selling_price | :`real_estate_properties.Other_Property_Features` : property_feature_description | :`real_estate_properties.Ref_Feature_Types_HAS_real_estate_properties.Other_Available_Features` :  | :`real_estate_properties.Ref_Property_Types_HAS_real_estate_properties.Properties` : ",
        "struct_in": "| real_estate_properties | :`real_estate_properties.Ref_Feature_Types` : feature_type_code , feature_type_name | :`real_estate_properties.Ref_Property_Types` : property_type_code ( Apartment , House ) , property_type_description | :`real_estate_properties.Other_Available_Features` : feature_id , feature_description , feature_type_code , feature_name | :`real_estate_properties.Properties` : buyer_offered_price , date_sold , date_on_market , property_id , apt_feature_1 , property_name , property_type_code ( Apartment , House ) , vendor_requested_price , property_address , room_count , apt_feature_2 , agreed_selling_price | :`real_estate_properties.Other_Property_Features` : property_feature_description | :`real_estate_properties.Ref_Feature_Types_HAS_real_estate_properties.Other_Available_Features` :  | :`real_estate_properties.Ref_Property_Types_HAS_real_estate_properties.Properties` :",
        "text_in": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "seq_out": "MATCH (properties:`real_estate_properties.Properties`) WHERE properties.property_type_code = 'House' RETURN properties.property_name AS property_name UNION MATCH (properties:`real_estate_properties.Properties`) WHERE properties.property_type_code = 'Apartment' AND properties.room_count > 1 RETURN properties.property_name AS property_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    }
]