[
    {
        "prediction": "match (feature AirCon) with property_type_name (feature: real_estate_properties. return return value (feature AirCon) return return value (feature AirCon) return value (feature AirCon) return value (feature AirCon) return value (feature AirCon) return value (feature AirCon) return value (feature AirCon) return value (feature AirCon) return value (feature AirCon) return value (feature AirCon) return value (feature AirCon) return value (feature AirCon) return value",
        "query": "MATCH (T1:`real_estate_properties.Other_Available_Features`)-[]-(T2:`real_estate_properties.Ref_Feature_Types`)\nWHERE T1.feature_name = 'AirCon'\nRETURN T2.feature_type_name",
        "question": "What is the feature type name of feature AirCon?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "real_estate_properties",
        "db_tag_names": [
            ":`real_estate_properties.Ref_Feature_Types`",
            ":`real_estate_properties.Ref_Property_Types`",
            ":`real_estate_properties.Other_Available_Features`",
            ":`real_estate_properties.Properties`",
            ":`real_estate_properties.Other_Property_Features`",
            ":`real_estate_properties.Ref_Feature_Types_HAS_real_estate_properties.Other_Available_Features`",
            ":`real_estate_properties.Ref_Property_Types_HAS_real_estate_properties.Properties`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4
            ],
            "property_name": [
                "*",
                "feature_type_code",
                "feature_type_name",
                "property_type_code",
                "property_type_description",
                "feature_id",
                "feature_description",
                "feature_type_code",
                "feature_name",
                "buyer_offered_price",
                "date_sold",
                "date_on_market",
                "property_id",
                "apt_feature_1",
                "property_name",
                "property_type_code",
                "vendor_requested_price",
                "property_address",
                "room_count",
                "apt_feature_2",
                "agreed_selling_price",
                "property_feature_description"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long_Double",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long_Double",
            "String",
            "Long",
            "String",
            "Long_Double",
            "String"
        ],
        "serialized_schema": " | real_estate_properties | :`real_estate_properties.Ref_Feature_Types` : feature_type_code , feature_type_name | :`real_estate_properties.Ref_Property_Types` : property_type_code , property_type_description | :`real_estate_properties.Other_Available_Features` : feature_id , feature_description , feature_type_code , feature_name ( AirCon ) | :`real_estate_properties.Properties` : buyer_offered_price , date_sold , date_on_market , property_id , apt_feature_1 , property_name , property_type_code , vendor_requested_price , property_address , room_count , apt_feature_2 , agreed_selling_price | :`real_estate_properties.Other_Property_Features` : property_feature_description | :`real_estate_properties.Ref_Feature_Types_HAS_real_estate_properties.Other_Available_Features` :  | :`real_estate_properties.Ref_Property_Types_HAS_real_estate_properties.Properties` : ",
        "struct_in": "| real_estate_properties | :`real_estate_properties.Ref_Feature_Types` : feature_type_code , feature_type_name | :`real_estate_properties.Ref_Property_Types` : property_type_code , property_type_description | :`real_estate_properties.Other_Available_Features` : feature_id , feature_description , feature_type_code , feature_name ( AirCon ) | :`real_estate_properties.Properties` : buyer_offered_price , date_sold , date_on_market , property_id , apt_feature_1 , property_name , property_type_code , vendor_requested_price , property_address , room_count , apt_feature_2 , agreed_selling_price | :`real_estate_properties.Other_Property_Features` : property_feature_description | :`real_estate_properties.Ref_Feature_Types_HAS_real_estate_properties.Other_Available_Features` :  | :`real_estate_properties.Ref_Property_Types_HAS_real_estate_properties.Properties` :",
        "text_in": "What is the feature type name of feature AirCon?",
        "seq_out": "match (t1:`real_estate_properties.other_available_features`)-[]-(t2:`real_estate_properties.ref_feature_types`) where t1.feature_name = 'AirCon' return t2.feature_type_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (property_type_description,property_type_name,property_type_name,property_type_name,property_type_name,property_type_name,property_type_name,property_type_name,property_type_name,property_type_name,property_type_name,property_type_name,property_type_description) with property_type_description) with (property_type_description) match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match matchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatchmatch",
        "query": "MATCH (T1:`real_estate_properties.Properties`)-[]-(T2:`real_estate_properties.Ref_Property_Types`)\nWITH count(T1.property_type_code) AS count, T2.property_type_description AS property_type_description\nRETURN property_type_description",
        "question": "Show the property type descriptions of properties belonging to that code.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "real_estate_properties",
        "db_tag_names": [
            ":`real_estate_properties.Ref_Feature_Types`",
            ":`real_estate_properties.Ref_Property_Types`",
            ":`real_estate_properties.Other_Available_Features`",
            ":`real_estate_properties.Properties`",
            ":`real_estate_properties.Other_Property_Features`",
            ":`real_estate_properties.Ref_Feature_Types_HAS_real_estate_properties.Other_Available_Features`",
            ":`real_estate_properties.Ref_Property_Types_HAS_real_estate_properties.Properties`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4
            ],
            "property_name": [
                "*",
                "feature_type_code",
                "feature_type_name",
                "property_type_code",
                "property_type_description",
                "feature_id",
                "feature_description",
                "feature_type_code",
                "feature_name",
                "buyer_offered_price",
                "date_sold",
                "date_on_market",
                "property_id",
                "apt_feature_1",
                "property_name",
                "property_type_code",
                "vendor_requested_price",
                "property_address",
                "room_count",
                "apt_feature_2",
                "agreed_selling_price",
                "property_feature_description"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long_Double",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long_Double",
            "String",
            "Long",
            "String",
            "Long_Double",
            "String"
        ],
        "serialized_schema": " | real_estate_properties | :`real_estate_properties.Ref_Feature_Types` : feature_type_code , feature_type_name | :`real_estate_properties.Ref_Property_Types` : property_type_code , property_type_description | :`real_estate_properties.Other_Available_Features` : feature_id , feature_description , feature_type_code , feature_name | :`real_estate_properties.Properties` : buyer_offered_price , date_sold , date_on_market , property_id , apt_feature_1 , property_name , property_type_code , vendor_requested_price , property_address , room_count , apt_feature_2 , agreed_selling_price | :`real_estate_properties.Other_Property_Features` : property_feature_description | :`real_estate_properties.Ref_Feature_Types_HAS_real_estate_properties.Other_Available_Features` :  | :`real_estate_properties.Ref_Property_Types_HAS_real_estate_properties.Properties` : ",
        "struct_in": "| real_estate_properties | :`real_estate_properties.Ref_Feature_Types` : feature_type_code , feature_type_name | :`real_estate_properties.Ref_Property_Types` : property_type_code , property_type_description | :`real_estate_properties.Other_Available_Features` : feature_id , feature_description , feature_type_code , feature_name | :`real_estate_properties.Properties` : buyer_offered_price , date_sold , date_on_market , property_id , apt_feature_1 , property_name , property_type_code , vendor_requested_price , property_address , room_count , apt_feature_2 , agreed_selling_price | :`real_estate_properties.Other_Property_Features` : property_feature_description | :`real_estate_properties.Ref_Feature_Types_HAS_real_estate_properties.Other_Available_Features` :  | :`real_estate_properties.Ref_Property_Types_HAS_real_estate_properties.Properties` :",
        "text_in": "Show the property type descriptions of properties belonging to that code.",
        "seq_out": "match (t1:`real_estate_properties.properties`)-[]-(t2:`real_estate_properties.ref_property_types`) with count(t1.property_type_code) as count, t2.property_type_description as property_type_description return property_type_description",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match () with property_type_name () where ''(*) match (*) match (*) match match (*) match match (*) match match (*) match match (*) match match (*) match match (*) match match (*) match match (*) match match (*) match match (*) match match (*) match match (*) match match (*) match match (*) match match (*) match match (*) match match (*) match match",
        "query": "MATCH (properties:`real_estate_properties.Properties`)\nWHERE properties.property_type_code = 'House'\nRETURN properties.property_name  AS property_name \nUNION\nMATCH (properties:`real_estate_properties.Properties`)\nWHERE properties.property_type_code = 'Apartment' AND properties.room_count > 1\nRETURN properties.property_name  AS property_name",
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "real_estate_properties",
        "db_tag_names": [
            ":`real_estate_properties.Ref_Feature_Types`",
            ":`real_estate_properties.Ref_Property_Types`",
            ":`real_estate_properties.Other_Available_Features`",
            ":`real_estate_properties.Properties`",
            ":`real_estate_properties.Other_Property_Features`",
            ":`real_estate_properties.Ref_Feature_Types_HAS_real_estate_properties.Other_Available_Features`",
            ":`real_estate_properties.Ref_Property_Types_HAS_real_estate_properties.Properties`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4
            ],
            "property_name": [
                "*",
                "feature_type_code",
                "feature_type_name",
                "property_type_code",
                "property_type_description",
                "feature_id",
                "feature_description",
                "feature_type_code",
                "feature_name",
                "buyer_offered_price",
                "date_sold",
                "date_on_market",
                "property_id",
                "apt_feature_1",
                "property_name",
                "property_type_code",
                "vendor_requested_price",
                "property_address",
                "room_count",
                "apt_feature_2",
                "agreed_selling_price",
                "property_feature_description"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long_Double",
            "String",
            "String",
            "Long",
            "String",
            "String",
            "String",
            "Long_Double",
            "String",
            "Long",
            "String",
            "Long_Double",
            "String"
        ],
        "serialized_schema": " | real_estate_properties | :`real_estate_properties.Ref_Feature_Types` : feature_type_code , feature_type_name | :`real_estate_properties.Ref_Property_Types` : property_type_code ( Apartment , House ) , property_type_description | :`real_estate_properties.Other_Available_Features` : feature_id , feature_description , feature_type_code , feature_name | :`real_estate_properties.Properties` : buyer_offered_price , date_sold , date_on_market , property_id , apt_feature_1 , property_name , property_type_code ( Apartment , House ) , vendor_requested_price , property_address , room_count , apt_feature_2 , agreed_selling_price | :`real_estate_properties.Other_Property_Features` : property_feature_description | :`real_estate_properties.Ref_Feature_Types_HAS_real_estate_properties.Other_Available_Features` :  | :`real_estate_properties.Ref_Property_Types_HAS_real_estate_properties.Properties` : ",
        "struct_in": "| real_estate_properties | :`real_estate_properties.Ref_Feature_Types` : feature_type_code , feature_type_name | :`real_estate_properties.Ref_Property_Types` : property_type_code ( Apartment , House ) , property_type_description | :`real_estate_properties.Other_Available_Features` : feature_id , feature_description , feature_type_code , feature_name | :`real_estate_properties.Properties` : buyer_offered_price , date_sold , date_on_market , property_id , apt_feature_1 , property_name , property_type_code ( Apartment , House ) , vendor_requested_price , property_address , room_count , apt_feature_2 , agreed_selling_price | :`real_estate_properties.Other_Property_Features` : property_feature_description | :`real_estate_properties.Ref_Feature_Types_HAS_real_estate_properties.Other_Available_Features` :  | :`real_estate_properties.Ref_Property_Types_HAS_real_estate_properties.Properties` :",
        "text_in": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "seq_out": "match (properties:`real_estate_properties.properties`) where properties.property_type_code = 'House' return properties.property_name as property_name union match (properties:`real_estate_properties.properties`) where properties.property_type_code = 'Apartment' and properties.room_count > 1 return properties.property_name as property_name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (department: department_management.department ) where head_ID is > 56 as head_ID. return head_ID as head_ID. return head_ID as head_ID as count count as count as count as count as count as count as count as count as count as count as count as count as count as count as count as count as count as count as count as count as count as count as count count as count count as count count as count count as count count as count count as count",
        "query": "MATCH (head:`department_management.head`)\nWHERE head.age > 56\nRETURN count(*)",
        "question": "How many heads of the departments are older than 56 ?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "department_management",
        "db_tag_names": [
            ":`department_management.department`",
            ":`department_management.head`",
            ":`department_management.management`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Creation",
                "Department_ID",
                "Ranking",
                "Budget_in_Billions",
                "Num_Employees",
                "name",
                "born_state",
                "age",
                "head_ID",
                "temporary_acting"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "Long",
            "Double",
            "Double",
            "String",
            "String",
            "Double",
            "Long",
            "String"
        ],
        "serialized_schema": " | department_management | :`department_management.department` : Name , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting",
        "struct_in": "| department_management | :`department_management.department` : Name , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting",
        "text_in": "How many heads of the departments are older than 56 ?",
        "seq_out": "match (head:`department_management.head`) where head.age > 56 return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (head) with head(head) return head(head) return head(head) return head(head) return head(head) return head(head) return head(head) return head(head) return head(head) return head(head) return head(head) return head(head) return head(head) return head(head) return head(head) return head(head) return head(head) return head(head) return head(head) return head(head) return head(head) return head(head",
        "query": "MATCH (head:`department_management.head`)\nRETURN head.name,head.born_state,head.age\nORDER BY head.age",
        "question": "List the name, born state and age of the heads of departments ordered by age.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "department_management",
        "db_tag_names": [
            ":`department_management.department`",
            ":`department_management.head`",
            ":`department_management.management`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Creation",
                "Department_ID",
                "Ranking",
                "Budget_in_Billions",
                "Num_Employees",
                "name",
                "born_state",
                "age",
                "head_ID",
                "temporary_acting"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "Long",
            "Double",
            "Double",
            "String",
            "String",
            "Double",
            "Long",
            "String"
        ],
        "serialized_schema": " | department_management | :`department_management.department` : Name ( State ) , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting",
        "struct_in": "| department_management | :`department_management.department` : Name ( State ) , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting",
        "text_in": "List the name, born state and age of the heads of departments ordered by age.",
        "seq_out": "match (head:`department_management.head`) return head.name,head.born_state,head.age order by head.age",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (department: department_management.department ) where 'department: department_management.department'return creation year, name and budget of each department",
        "query": "MATCH (department:`department_management.department`)\nRETURN department.Creation,department.Name,department.Budget_in_Billions",
        "question": "List the creation year, name and budget of each department.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "department_management",
        "db_tag_names": [
            ":`department_management.department`",
            ":`department_management.head`",
            ":`department_management.management`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Creation",
                "Department_ID",
                "Ranking",
                "Budget_in_Billions",
                "Num_Employees",
                "name",
                "born_state",
                "age",
                "head_ID",
                "temporary_acting"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "Long",
            "Double",
            "Double",
            "String",
            "String",
            "Double",
            "Long",
            "String"
        ],
        "serialized_schema": " | department_management | :`department_management.department` : Name , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting",
        "struct_in": "| department_management | :`department_management.department` : Name , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting",
        "text_in": "List the creation year, name and budget of each department.",
        "seq_out": "match (department:`department_management.department`) return department.creation,department.name,department.budget_in_billions",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (department: department_management.department ) where 'department: department_management.department'where 'department: department_management.department '",
        "query": "MATCH (department:`department_management.department`)\nRETURN max(department.Budget_in_Billions),min(department.Budget_in_Billions)",
        "question": "What are the maximum and minimum budget of the departments?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "department_management",
        "db_tag_names": [
            ":`department_management.department`",
            ":`department_management.head`",
            ":`department_management.management`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Creation",
                "Department_ID",
                "Ranking",
                "Budget_in_Billions",
                "Num_Employees",
                "name",
                "born_state",
                "age",
                "head_ID",
                "temporary_acting"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "Long",
            "Double",
            "Double",
            "String",
            "String",
            "Double",
            "Long",
            "String"
        ],
        "serialized_schema": " | department_management | :`department_management.department` : Name , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting",
        "struct_in": "| department_management | :`department_management.department` : Name , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting",
        "text_in": "What are the maximum and minimum budget of the departments?",
        "seq_out": "match (department:`department_management.department`) return max(department.budget_in_billions),min(department.budget_in_billions)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (department: department_management.department ) where 'department: department_management.department '",
        "query": "MATCH (department:`department_management.department`)\nWHERE 10<=department.Ranking<=15\nRETURN avg(department.Num_Employees)",
        "question": "What is the average number of employees of the departments whose rank is between 10 and 15?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "department_management",
        "db_tag_names": [
            ":`department_management.department`",
            ":`department_management.head`",
            ":`department_management.management`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Creation",
                "Department_ID",
                "Ranking",
                "Budget_in_Billions",
                "Num_Employees",
                "name",
                "born_state",
                "age",
                "head_ID",
                "temporary_acting"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "Long",
            "Double",
            "Double",
            "String",
            "String",
            "Double",
            "Long",
            "String"
        ],
        "serialized_schema": " | department_management | :`department_management.department` : Name , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting",
        "struct_in": "| department_management | :`department_management.department` : Name , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting",
        "text_in": "What is the average number of employees of the departments whose rank is between 10 and 15?",
        "seq_out": "match (department:`department_management.department`) where 10<=department.ranking<=15 return avg(department.num_employees)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (head: department_management.head ) where head.born_state (head.born_state.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born.born",
        "query": "MATCH (head:`department_management.head`)\nWHERE head.born_state <> 'California'\nRETURN head.name",
        "question": "What are the names of the heads who are born outside the California state?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "department_management",
        "db_tag_names": [
            ":`department_management.department`",
            ":`department_management.head`",
            ":`department_management.management`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Creation",
                "Department_ID",
                "Ranking",
                "Budget_in_Billions",
                "Num_Employees",
                "name",
                "born_state",
                "age",
                "head_ID",
                "temporary_acting"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "Long",
            "Double",
            "Double",
            "String",
            "String",
            "Double",
            "Long",
            "String"
        ],
        "serialized_schema": " | department_management | :`department_management.department` : Name ( State ) , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state ( California ) , age , head_ID | :`department_management.management` : temporary_acting",
        "struct_in": "| department_management | :`department_management.department` : Name ( State ) , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state ( California ) , age , head_ID | :`department_management.management` : temporary_acting",
        "text_in": "What are the names of the heads who are born outside the California state?",
        "seq_out": "match (head:`department_management.head`) where head.born_state <> 'California' return head.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (alabama) with (department: department_management.department ) where 'alabama' return distinct creation years.",
        "query": "MATCH (T1:`department_management.department`)-[T2:`department_management.management`]-(T3:`department_management.head`)\nWHERE T3.born_state = 'Alabama'\nRETURN DISTINCT T1.Creation",
        "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "department_management",
        "db_tag_names": [
            ":`department_management.department`",
            ":`department_management.head`",
            ":`department_management.management`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Creation",
                "Department_ID",
                "Ranking",
                "Budget_in_Billions",
                "Num_Employees",
                "name",
                "born_state",
                "age",
                "head_ID",
                "temporary_acting"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "Long",
            "Double",
            "Double",
            "String",
            "String",
            "Double",
            "Long",
            "String"
        ],
        "serialized_schema": " | department_management | :`department_management.department` : Name ( State ) , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state ( Alabama ) , age , head_ID | :`department_management.management` : temporary_acting",
        "struct_in": "| department_management | :`department_management.department` : Name ( State ) , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state ( Alabama ) , age , head_ID | :`department_management.management` : temporary_acting",
        "text_in": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
        "seq_out": "match (t1:`department_management.department`)-[t2:`department_management.management`]-(t3:`department_management.head`) where t3.born_state = 'Alabama' return distinct t1.creation",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (head: department_management.department ) where head.born_state.born_state.born_state.born_state.born_state.born_state.born_state.born_state.born_state.born_state.born_state.born_state.born_state.born_state.born_state.born_state.born_state.born_state.born_state.born_state.born_state.born_state.born_state.born_state",
        "query": "MATCH (head:`department_management.head`)\nWITH count(*) AS count, head.born_state AS born_state\nWHERE count  >= 3\nRETURN born_state",
        "question": "What are the names of the states where at least 3 heads were born?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "department_management",
        "db_tag_names": [
            ":`department_management.department`",
            ":`department_management.head`",
            ":`department_management.management`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Creation",
                "Department_ID",
                "Ranking",
                "Budget_in_Billions",
                "Num_Employees",
                "name",
                "born_state",
                "age",
                "head_ID",
                "temporary_acting"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "Long",
            "Double",
            "Double",
            "String",
            "String",
            "Double",
            "Long",
            "String"
        ],
        "serialized_schema": " | department_management | :`department_management.department` : Name ( State ) , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting",
        "struct_in": "| department_management | :`department_management.department` : Name ( State ) , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting",
        "text_in": "What are the names of the states where at least 3 heads were born?",
        "seq_out": "match (head:`department_management.head`) with count(*) as count, head.born_state as born_state where count >= 3 return born_state",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (department: department_management.department ) where 'department: department_management.department'return count(department: department_management.department 'department: department_management.department 'department: 'department: 'department: 'department: 'department: 'department: '",
        "query": "MATCH (department:`department_management.department`)\nWITH department.Creation AS Creation, count(department.Creation) AS count\nRETURN Creation\nORDER BY count DESC\nLIMIT 1",
        "question": "In which year were most departments established?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "department_management",
        "db_tag_names": [
            ":`department_management.department`",
            ":`department_management.head`",
            ":`department_management.management`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Creation",
                "Department_ID",
                "Ranking",
                "Budget_in_Billions",
                "Num_Employees",
                "name",
                "born_state",
                "age",
                "head_ID",
                "temporary_acting"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "Long",
            "Double",
            "Double",
            "String",
            "String",
            "Double",
            "Long",
            "String"
        ],
        "serialized_schema": " | department_management | :`department_management.department` : Name , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting",
        "struct_in": "| department_management | :`department_management.department` : Name , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting",
        "text_in": "In which year were most departments established?",
        "seq_out": "match (department:`department_management.department`) with department.creation as creation, count(department.creation) as count return creation order by count desc limit 1",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match ('yes') with temporary_acting ('yes' return count as temporary_acting = 'yes' return count as 'yes' return count as 'yes' return count as 'yes' return count as 'yes' return count as 'yes' return count as 'yes' return count as 'yes' return count as 'yes' return count as 'yes' return count as 'yes' return count as 'yes' return count as 'yes' return count",
        "query": "MATCH (T1:`department_management.department`)-[T2:`department_management.management`]-()\nWHERE T2.temporary_acting = 'Yes'\nRETURN T1.Name,T1.Num_Employees",
        "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "department_management",
        "db_tag_names": [
            ":`department_management.department`",
            ":`department_management.head`",
            ":`department_management.management`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Creation",
                "Department_ID",
                "Ranking",
                "Budget_in_Billions",
                "Num_Employees",
                "name",
                "born_state",
                "age",
                "head_ID",
                "temporary_acting"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "Long",
            "Double",
            "Double",
            "String",
            "String",
            "Double",
            "Long",
            "String"
        ],
        "serialized_schema": " | department_management | :`department_management.department` : Name , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting ( Yes )",
        "struct_in": "| department_management | :`department_management.department` : Name , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting ( Yes )",
        "text_in": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
        "seq_out": "match (t1:`department_management.department`)-[t2:`department_management.management`]-() where t2.temporary_acting = 'Yes' return t1.name,t1.num_employees",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (department: department_management.department ) where 'temporary_acting' return 'temporary_acting'",
        "query": "MATCH ()-[management:`department_management.management`]-()\nRETURN count(DISTINCT management.temporary_acting)",
        "question": "How many acting statuses are there?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "department_management",
        "db_tag_names": [
            ":`department_management.department`",
            ":`department_management.head`",
            ":`department_management.management`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Creation",
                "Department_ID",
                "Ranking",
                "Budget_in_Billions",
                "Num_Employees",
                "name",
                "born_state",
                "age",
                "head_ID",
                "temporary_acting"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "Long",
            "Double",
            "Double",
            "String",
            "String",
            "Double",
            "Long",
            "String"
        ],
        "serialized_schema": " | department_management | :`department_management.department` : Name , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting",
        "struct_in": "| department_management | :`department_management.department` : Name , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting",
        "text_in": "How many acting statuses are there?",
        "seq_out": "match ()-[management:`department_management.management`]-() return count(distinct management.temporary_acting)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (department: department_management.department ) where head.name,department.head )",
        "query": "MATCH (department:`department_management.department`)\nWHERE NOT (department:`department_management.department`)-[:`department_management.management`]-()\nRETURN count(*)",
        "question": "How many departments are led by heads who are not mentioned?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "department_management",
        "db_tag_names": [
            ":`department_management.department`",
            ":`department_management.head`",
            ":`department_management.management`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Creation",
                "Department_ID",
                "Ranking",
                "Budget_in_Billions",
                "Num_Employees",
                "name",
                "born_state",
                "age",
                "head_ID",
                "temporary_acting"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "Long",
            "Double",
            "Double",
            "String",
            "String",
            "Double",
            "Long",
            "String"
        ],
        "serialized_schema": " | department_management | :`department_management.department` : Name , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting",
        "struct_in": "| department_management | :`department_management.department` : Name , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting",
        "text_in": "How many departments are led by heads who are not mentioned?",
        "seq_out": "match (department:`department_management.department`) where not (department:`department_management.department`)-[:`department_management.management`]-() return count(*)",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (head: department_management.head ) where head.age are counted as head.age",
        "query": "MATCH ()-[T2:`department_management.management`]-(T1:`department_management.head`)\nWHERE T2.temporary_acting = 'Yes'\nRETURN DISTINCT T1.age",
        "question": "What are the distinct ages of the heads who are acting?",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "department_management",
        "db_tag_names": [
            ":`department_management.department`",
            ":`department_management.head`",
            ":`department_management.management`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Creation",
                "Department_ID",
                "Ranking",
                "Budget_in_Billions",
                "Num_Employees",
                "name",
                "born_state",
                "age",
                "head_ID",
                "temporary_acting"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "Long",
            "Double",
            "Double",
            "String",
            "String",
            "Double",
            "Long",
            "String"
        ],
        "serialized_schema": " | department_management | :`department_management.department` : Name , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting",
        "struct_in": "| department_management | :`department_management.department` : Name , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting",
        "text_in": "What are the distinct ages of the heads who are acting?",
        "seq_out": "match ()-[t2:`department_management.management`]-(t1:`department_management.head`) where t2.temporary_acting = 'Yes' return distinct t1.age",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (department: department_management.department ) where head.department.department.department.department.department.department.department.department.department.department.department.department.department.department.department.department.department.department.department.department.department.department.department.de",
        "query": "MATCH ()-[T2:`department_management.management`]-(T1:`department_management.department`)\nWITH count(*) AS count, T1.Department_ID AS Department_ID, T1.Name AS Name\nWHERE count  > 1\nRETURN Department_ID,Name,count",
        "question": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "department_management",
        "db_tag_names": [
            ":`department_management.department`",
            ":`department_management.head`",
            ":`department_management.management`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Creation",
                "Department_ID",
                "Ranking",
                "Budget_in_Billions",
                "Num_Employees",
                "name",
                "born_state",
                "age",
                "head_ID",
                "temporary_acting"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "Long",
            "Double",
            "Double",
            "String",
            "String",
            "Double",
            "Long",
            "String"
        ],
        "serialized_schema": " | department_management | :`department_management.department` : Name , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting",
        "struct_in": "| department_management | :`department_management.department` : Name , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting",
        "text_in": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
        "seq_out": "match ()-[t2:`department_management.management`]-(t1:`department_management.department`) with count(*) as count, t1.department_id as department_id, t1.name as name where count > 1 return department_id,name,count",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    },
    {
        "prediction": "match (head: department_management.head ) where 'Ha' return head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head.head",
        "query": "MATCH (head:`department_management.head`)\nWHERE head.name =~'.*[H|h]a.*'\nRETURN head.head_ID,head.name",
        "question": "Which head's name has the substring 'Ha'? List the id and name.",
        "schema_path": "/home/22842219/Desktop/phd/SemanticParser4Graph/semantic_parser/data/text2cypher/schema.json",
        "db_id": "department_management",
        "db_tag_names": [
            ":`department_management.department`",
            ":`department_management.head`",
            ":`department_management.management`"
        ],
        "db_property_names": {
            "tag_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            "property_name": [
                "*",
                "Name",
                "Creation",
                "Department_ID",
                "Ranking",
                "Budget_in_Billions",
                "Num_Employees",
                "name",
                "born_state",
                "age",
                "head_ID",
                "temporary_acting"
            ]
        },
        "db_property_types": [
            "String",
            "String",
            "Long",
            "Long",
            "Double",
            "Double",
            "String",
            "String",
            "Double",
            "Long",
            "String"
        ],
        "serialized_schema": " | department_management | :`department_management.department` : Name , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting",
        "struct_in": "| department_management | :`department_management.department` : Name , Creation , Department_ID , Ranking , Budget_in_Billions , Num_Employees | :`department_management.head` : name , born_state , age , head_ID | :`department_management.management` : temporary_acting",
        "text_in": "Which head's name has the substring 'Ha'? List the id and name.",
        "seq_out": "match (head:`department_management.head`) where head.name =~'.*[h|h]a.*' return head.head_id,head.name",
        "description": "task: text-to-cypher",
        "section": "test",
        "arg_path": "META_TUNING/text2cypher_with_cell.cfg"
    }
]